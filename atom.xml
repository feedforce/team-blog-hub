<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://engineers.feedforce.jp</id>
    <title>Feedforce Engineers' Blogs</title>
    <updated>2021-09-22T01:27:20.259Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://engineers.feedforce.jp"/>
    <subtitle>フィードフォースグループに所属するエンジニアのブログ記事をまとめています。</subtitle>
    <logo>https://engineers.feedforce.jp/logo.png</logo>
    <rights>© Feedforce Inc.</rights>
    <entry>
        <title type="html"><![CDATA[Redis::Objects を使ったサービス改善と新しい gem を作ったお話]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/09/20/172054</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/09/20/172054"/>
        <updated>2021-09-20T08:20:54.000Z</updated>
        <summary type="html"><![CDATA[<p>半年ぶりくらいに会社の勉強会で発表しました。</p>

<iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/58bb74a90a8b444e8607850fc76d8eb7" title="Redis::Objects で遊んでみよう" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;"></iframe>


<p>Redis::Objects という gem を使って RDS にかかっていた IO 負荷を改善した、という話と、 Redis::Objects を拡張する gem を作ったという話（後述）です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fredis-objects-daily-counter" title="GitHub - ryz310/redis-objects-daily-counter: Daily counter within Redis::Objects. Works with any class or ORM." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/redis-objects-daily-counter">github.com</a></cite></p>

<p>Redis を使って DB の負荷を下げる系のお話って 2010 年代にされ尽くした感があって、今更な気もするんですが、一周回って最近聞かない話だなーと思ってます。
フロントエンドエンジニアで最近サーバーサイドも触る機会が増えたような方々にウケが良かった感じがありますね。</p>

<hr />

<p>一方で社内のインフラエンジニアからは Redis ってメンテナンスの手間が掛かって評判悪いですね。
使うだけなら手軽で楽なんですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> のアップデートでダウンタイムが発生する時に利用者向けにアナウンスしないといけなかったり。
ダウンタイムと言っても深夜に数秒〜数分なので影響は少ないと思うんですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%BF%A1%BC%A5%D7%A5%E9%A5%A4%A5%BA">エンタープライズ</a>向けのサービスとかやってるとこの辺は厳しいですね。</p>

<p><a href="https://cloud.google.com/blog/ja/products/management-tools/sre-error-budgets-and-maintenance-windows">SRE のエラーバジェットの概念</a> が日本全体に浸透すればソフトウェア開発の生産性は底上げされるんじゃないかと思うのですが、この辺は時間を掛けて少しずつ啓蒙していくしか無いですね。例えば日本の生活インフラ（電気・水道・ガスとか電車とか）ってめっちゃ高水準なので、ソフトウェアの世界でも100％稼働することが当たり前という価値観になってしまうんじゃないかな、と思うのですが、この辺の価値観は表裏一体というか、当たり前と感じているから高品質になる一方で、生産性は下がってしまうという構図だと思っています。</p>

<p><a href="https://www.nic.ad.jp/ja/materials/iw/2017/proceedings/s15/s15-fujisaki.pdf">https://www.nic.ad.jp/ja/materials/iw/2017/proceedings/s15/s15-fujisaki.pdf</a>
<figure class="figure-image figure-image-fotolife" title="SREの信条 (Google)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210920/20210920165304.png" alt="f:id:ryz310:20210920165304p:plain" width="963" height="527" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>SREの信条 (<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>)</figcaption></figure></p>

<p>一応メンテナンスの手間、という点では夏頃に <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> から <a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a> MemoryDB for Redis というフルマネージドな Redis が発表されています。
東京リージョンは未対応で、書き込み速度が遅くなっていたり、料金も若干高くなっていたりしますが、気になるサービスではありますね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdev.classmethod.jp%2Farticles%2Faws-release-durable-redis-amazon-memorydb-for-redis%2F" title="Redisに耐久性が加わったAmazon MemoryDB for Redisが登場 | DevelopersIO" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://dev.classmethod.jp/articles/aws-release-durable-redis-amazon-memorydb-for-redis/">dev.classmethod.jp</a></cite></p>

<hr />

<p>さて、この記事のメインは冒頭で触れた Redis::Objects を拡張する gem を作ったよ、という話です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fredis-objects-daily-counter" title="GitHub - ryz310/redis-objects-daily-counter: Daily counter within Redis::Objects. Works with any class or ORM." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/redis-objects-daily-counter">github.com</a></cite></p>

<p>発端は Redis::Objects の <code>counter</code> を使ってサービスの効果測定（メール配信数、CV 数、ログイン数など）をしたいなーと考えたことなんですが、効果測定って一定の期間毎に集計して改善した・していないの指標にしたいやつじゃないですか？
<code>counter</code> でカウントアップしつつ、日次の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>で集計すれば良いんですが、それだとあまり気軽じゃないというか、測定対象となるサービス開発の後、測定ロジックと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>、保存先の DB テーブル作成までセットで実装しないと実現できないですよね。</p>

<p>これはサクッと実装するには <code>counter</code> が自動で日次で保存先を切り替えてくれれば良さそう、ということで、 <code>redis-objects-daily-counter</code> という gem は <code>daily_counter</code> という日次で保存先を切り替えるカウンター機能を提供します。
Redis::Objects を拡張して作ってあるので、使い方はほぼ同じで、対象としたい Class に <code>include Redis::Objects</code> を追加すると使えるようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Gemfile</span>
gem <span class="synSpecial">'</span><span class="synConstant">redis-objects-daily-counter</span><span class="synSpecial">'</span>
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">Homepage</span>
  <span class="synPreProc">include</span> <span class="synType">Redis</span>::<span class="synType">Objects</span>

  daily_counter <span class="synConstant">:pv</span>, <span class="synConstant">expireat</span>: -&gt; { <span class="synType">Time</span>.now + <span class="synConstant">2_678_400</span> } <span class="synComment"># about a month</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">id</span>
    <span class="synConstant">1</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synComment"># 2021-04-01</span>
homepage = <span class="synType">Homepage</span>.new
homepage.id <span class="synComment"># 1</span>

homepage.pv.increment
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 3</span>

<span class="synComment"># 2021-04-02 (next day)</span>
puts homepage.pv.value <span class="synComment"># 0</span>
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 2</span>

start_date = <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)
end_date = <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)
homepage.pv.range(start_date, end_date) <span class="synComment"># [3, 2]</span>
</pre>


<p><code>#increment</code> <code>#decrement</code> は <code>counter</code> と同じ使い勝手です。ただ、日付が変わると自動的に保存先が切り替わります。
これは Redis で保存している Key 名が以下のフォーマットになっているためです。</p>

<pre class="code" data-lang="" data-unlink>model_name:id:field_name:yyyy-mm-dd</pre>


<p>日付が変わった後も過去のレコードは削除されていないので、以下のコードでアクセス出来ます。この使い方は同じく Redis::Objects の <code>list</code> と似たような使い勝手になっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-01</span>
homepage.pv.increment(<span class="synConstant">3</span>)

<span class="synComment"># 2021-04-02 (next day)</span>
homepage.pv.increment(<span class="synConstant">2</span>)

<span class="synComment"># 2021-04-03 (next day)</span>
homepage.pv.increment(<span class="synConstant">5</span>)

homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)] <span class="synComment"># =&gt; 3</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synConstant">3</span>] <span class="synComment"># =&gt; [3, 2, 5]</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)..<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)] <span class="synComment"># =&gt; [3, 2]</span>

homepage.pv.delete(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>))
homepage.pv.range(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">3</span>)) <span class="synComment"># =&gt; [0, 2, 5]</span>
homepage.pv.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)) <span class="synComment"># =&gt; 2</span>
</pre>


<p>これで測定対象となるサービスを開発した後、 <code>daily_counter</code> で測定処理を実装しておくだけで OK。
この状態でリリースすればデータは溜まっていくので、週次や月次で集計する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>を後でゆっくり実装すれば良いです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>実装前にサーバー内で <code>$ bin/rails console</code> を実行して <code>daily_counter</code> の値を確認しながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>の実装を考える、とかも出来ますね。
具体的なデータを見ながらの方が開発難易度は下がります。</p>

<p>ちなみにですが、 <strong><code>expireat</code> オプションを指定しておくことをオススメします。</strong>
gem の仕様上、どんどん Redis 上のメモリを圧迫していくので、一定期間後に自動的に削除するようにしましょう。</p>

<hr />

<p><code>daily_counter</code> があるなら週次、月次、年次カウンターがあっても良いよね、なんだったら毎時、毎分カウンターもあったって良いじゃないか、という事で <code>v0.2.0</code> ではそれらが追加されています。</p>

<p>毎時・毎分のカウンターは <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> rate limit 機能の実装にも良いかもしれないですね。</p>

<ul>
<li><code>annual_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy</code></li>
<li>Redis is a highly volatile key-<a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a> store, so I don't recommend using it.</li>
</ul>
</li>
<li><code>monthly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm</code></li>
</ul>
</li>
<li><code>weekly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyyWw</code></li>
</ul>
</li>
<li><code>daily_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-dd</code></li>
</ul>
</li>
<li><code>hourly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh</code></li>
</ul>
</li>
<li><code>minutely_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh:mi</code></li>
</ul>
</li>
</ul>


<p>一応実装はしましたが、 <code>annual_counter</code> のように期間の長いカウンターの利用はあまりオススメしません。
Redis ってふとした拍子にデータが飛んでしまう可能性があるので、あくまでキャッシュ的な位置付けで利用するのが良いと思います。
<code>daily_counter</code> も週次・月次で RDS に集計結果を保存する運用を想定していますので。</p>

<hr />

<p>というわけで久々のブログ更新では新しく作った <code>redis-objects-daily-counter</code> という gem の紹介をさせて頂きました。
これから弊社プロダクトでも利用していく予定ですし、色々なサービスでも活用頂けると嬉しいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon EKS で高負荷時に CoreDNS が原因で稀にネットワークエラーが発生していた時のトラブルシュート]]></title>
        <id>https://developer.feedforce.jp/entry/2021/09/02/134725</id>
        <link href="https://developer.feedforce.jp/entry/2021/09/02/134725"/>
        <updated>2021-09-02T04:47:25.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS の開発チームでインフラエンジニア をやっています <a href="http://blog.hatena.ne.jp/mayuki123/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mayuki123/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mayuki123</a> です。今月からフィードフォースから分社化をした株式会社ソーシャルPLUS の所属となりましたが、仕事内容は変わらずにサービスのインフラ改善を進めていく事になるかと思います。</p>

<p>2019年11月に技術スタックを整理してみたという記事から2年弱経過していますが、ソーシャルPLUSのインフラ環境は、一部アプリケーションについてはコンテナ環境を Amazon EKS にホスティングして本番運用するようになりました。あと数ヶ月ほどで全ての環境がEC2からコンテナに置き換えられると良いなと思っています(願望)。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F11%2F25%2F120000" title="ソーシャルPLUS の技術スタックを整理してみた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2019/11/25/120000">developer.feedforce.jp</a></cite></p>

<p>そして、既に利用されている機能の一部を Amazon EKS に移行して、しばらく経過した時にアプリケーションでネットワークエラーが稀に発生していました。原因調査をした結果が CoreDNS の負荷によるものと発覚するまでのトラブルシュートの流れについて、記事として書き残しておきます。</p>

<ul class="table-of-contents">
    <li><a href="#発生していた事象">発生していた事象</a></li>
    <li><a href="#Datadog-を活用した原因調査">Datadog を活用した原因調査</a><ul>
            <li><a href="#アプリケーションの負荷状況">アプリケーションの負荷状況</a></li>
            <li><a href="#EKS-上のコンテナの調査">EKS 上のコンテナの調査</a></li>
        </ul>
    </li>
    <li><a href="#EKS-のCoreDNS-の調査">EKS のCoreDNS の調査</a><ul>
            <li><a href="#CoreDNS-のデバッグログの有効化">CoreDNS のデバッグログの有効化</a></li>
            <li><a href="#Kubernetes-の名前解決について">Kubernetes の名前解決について</a></li>
        </ul>
    </li>
    <li><a href="#CoreDNS-の負荷軽減">CoreDNS の負荷軽減</a><ul>
            <li><a href="#ドメインの末尾にドット--を追加する">ドメインの末尾にドット (.) を追加する</a></li>
            <li><a href="#etcresolvconf-で-ndots1-の設定をする">/etc/resolv.conf で ndots:1 の設定をする</a></li>
            <li><a href="#その他の-CoreDNS-の負荷軽減の方法">その他の CoreDNS の負荷軽減の方法</a></li>
        </ul>
    </li>
    <li><a href="#最終的な結果">最終的な結果</a></li>
    <li><a href="#おわりに">おわりに</a></li>
    <li><a href="#おまけ">おまけ</a></li>
</ul>

<h2 id="発生していた事象">発生していた事象</h2>

<p>ソーシャルPLUSでは、バックエンドのアプリケーションでエラーが発生した時に、Bugsnag を利用して Slack 通知するようにしています。ある時に<code>Mysql2::Error::ConnectionError</code> が発生しました。単発のネットワークエラーの場合はアプリケーションがリトライする事でサービス影響がない事も多く、一時的な問題と思って静観する事があるかと思います。しかし、また数日後に同じ事象が発生しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210830/20210830152912.png" alt="f:id:mayuki123:20210830152912p:plain" width="667" height="258" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%A4%E3%83%B3%E3%83%AA%E3%83%83%E3%83%92%E3%81%AE%E6%B3%95%E5%89%87">ハインリッヒの1：29：300の法則</a>のように、ちょっとした異常を見落としていると重大なサービス障害となってしまう可能性があるので、原因調査を始めます。</p>

<h2 id="Datadog-を活用した原因調査">Datadog を活用した原因調査</h2>

<p>ソーシャルPLUSでは、モニタリングサービスの Datadog を利用しているのでメトリクスやログの調査を出来るようになっています。どこが原因かを探り始めました。</p>

<h3 id="アプリケーションの負荷状況">アプリケーションの負荷状況</h3>

<p>まずはアプリケーションで利用するサーバの負荷状況を確認する所から始めました。<code>Mysql2::Error::ConnectionError</code> が発生した時刻は EKS の Node の CPU 使用率が 70% ほどで、アプリケーションで負荷のかかる処理の最中でした。また、データベースの負荷は少し前に負荷対策の改善をした事もあって、今回の事件の犯人ではなさそうです。他にもEC2 と DB 間でネットワークのボトルネックがないかなどの確認はしましたが、CPU 使用率が高い以外の問題は特に見つかりませんでした。完全犯罪でしょうか。</p>

<h3 id="EKS-上のコンテナの調査">EKS 上のコンテナの調査</h3>

<p>サーバ単体の問題ではないとすると、Amazon EKS で何か起きている事を疑うことにしました。EKSで動かしているコンテナのログは Datadog Logs に送っているので、<strong>エラーが発生していたアプリケーション以外のログ</strong> を確認していると、MySQL の ConnectionError が発生した時間帯に下記の Warning のメッセージが出ている事に気づきました。このログは Amazon Kinesis Data Firehose にログを送る Fluent Bit のコンテナで発生しており、エラーが発生してたアプリケーションとは異なるノードに存在してました。</p>

<blockquote><p>[yyyy/mm/dd hh:mm:ss] [ warn] [net] getaddrinfo(host='kinesis.ap-northeast-1.amazonaws.com'): Name or service not known</p></blockquote>

<p>同時刻に特定のアプリケーション以外のコンテナも影響を受けていることから、EKS の中で問題がありそうです。元々、EKSに関する技術ブログは目を通すようにしていた事もあり、Kubernetes の DNS の名前解決で問題が発生する場合があるというのは知っていたので、CoreDNSに焦点を当てて調べることにしました。アウトプットをしてくれる人たちには、いつも感謝をしています。</p>

<ul>
<li><a href="https://medium.com/cloutive/production-ready-eks-coredns-configuration-6fea830606f8">Production Ready EKS CoreDNS Configuration | by Serkan Capkan | Cloutive Technology Solutions - Tech Blog | Medium</a></li>
<li><a href="https://creators-note.chatwork.com/entry/2021/01/05/104206#%E4%B8%80%E5%AE%9A%E6%95%B0%E3%81%AEPod%E4%BB%A5%E4%B8%8A%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E4%B8%8D%E5%AE%89%E5%AE%9A%E3%81%AB%E3%81%AA%E3%82%8B">EKS&#x3067;DNS&#x3092;&#x5B89;&#x5B9A;&#x3055;&#x305B;&#x308B;&#x305F;&#x3081;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x3053;&#x3068; - Chatwork Creator&#39;s Note</a></li>
<li><a href="https://labs.gree.jp/blog/2020/01/20271/">&#x30B9;&#x30DE;&#x30DB;&#x30B2;&#x30FC;&#x30E0;&#x306E; API &#x30B5;&#x30FC;&#x30D0;&#x306B;&#x304A;&#x3051;&#x308B; EKS &#x306E;&#x904B;&#x7528;&#x4E8B;&#x4F8B; | &#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x30D6;&#x30ED;&#x30B0; | GREE Engineering</a></li>
</ul>


<h2 id="EKS-のCoreDNS-の調査">EKS のCoreDNS の調査</h2>

<p>Datadog Agent で Kurbernetes の各種メトリクスを収集していて、EKS の CoreDNS の状況も Datadog の Metric Explorer で確認する事が出来るようになっています。</p>

<ul>
<li><a href="https://docs.datadoghq.com/ja/integrations/coredns/?tab=docker#%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9">Datadog で取得可能な CoreDNS のメトリクス</a></li>
</ul>


<p><code>coredns.request_count</code> を確認すると特定の時間帯で CoreDNS へのリクエストが多い状態で、このタイミングでの CoreDNS Pod の CPU 負荷は10％前後でしたが、それ以外に不審なメトリクスは存在しませんでした。まだ事象の原因との確信は持てないですが、負荷がそれなりにかかっていることは確かなのでリクエストが多くなる理由を調べます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831151005.png" alt="f:id:mayuki123:20210831151005p:plain" width="522" height="200" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h3 id="CoreDNS-のデバッグログの有効化">CoreDNS のデバッグログの有効化</h3>

<p>まずは CoreDNS のデバッグログを確認したいとなるかと思いますが、EKS の CoreDNS はデフォルトだとデバッグログの出力がオフの状態のため、どのようなリクエストが到達しているのかは確認する事ができません。CoreDNS のログを有効化する方法は AWS のナレッジベースにある記事に方法が記載されています。</p>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>
</ul>


<p>この記事によると、Namespace(<code>kube-system</code>) に Configmap (<code>coredns</code>) があるので、Corefile 設定に <code>log</code> を追加するとデバッグログ が出力されるようになります。</p>

<pre class="code" data-lang="" data-unlink># kubectl -n kube-system edit configmap coredns
kind: ConfigMap
apiVersion: v1
data:
  Corefile: |
    .:53 {
        log    # Enabling CoreDNS Logging
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          upstream
          fallthrough in-addr.arpa ip6.arpa
        }
        ...</pre>


<p>上記の設定をすると CoreDNS のPod の標準出力にデバッグログ が出力されるようになります。私の触っていた EKS の環境の場合は、数分ほどで CoreDNS の Pod で reload が発生して元の設定（デバッグログ がオフ）に戻るようになってました。</p>

<h3 id="Kubernetes-の名前解決について">Kubernetes の名前解決について</h3>

<p>次にKubernetes 上のコンテナはどのように名前解決するのかを知っておく必要があります。Kurbernetes の Pod の DNS リゾルバー(<code>/etc/resolv.conf</code>) のデフォルト設定は下記のようになっています。</p>

<pre class="code" data-lang="" data-unlink>% kubectl exec fluent-bit-46zvl -- cat /etc/resolv.conf
nameserver 172.20.0.10
search logging.svc.cluster.local svc.cluster.local cluster.local
options ndots:5</pre>


<p>この状態で Fluent Bit のコンテナから Amazon Kinesis の API エンドポイントに疎通する場合は、CoreDNS に8回のリクエストが発生します。これは、IPv4 , IPv6 の2種類の名前解決を <code>search</code> の数だけ名前解決を試みた後で EKS 外に名前解決をする設定になっているからです。この設定になっているおかげで Kubernetes の Service を使った名前解決が出来るようになっています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831154909.png" alt="f:id:mayuki123:20210831154909p:plain" width="1200" height="328" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>また、<code>options ndots:5</code> の設定は <code>.</code> の数が 5個以上の時は最初から外部に名前解決するようになります。そのため、Amazon Aurora や ElastiCache などのデータベースへの クラスターエンドポイントは <code>.</code> の数が五個以上あるので、CoreDNSへのリクエスト回数は少なくて済みます。ここを意識しなくてよいのはありがたいですね。</p>

<p>ソーシャルPLUSというプロダクトの特性上、EKS 内のアプリケーションから外部サービスの API を実行する機会が多々あります。特定のタイミングで外部のサービスに大量のAPIリクエストを実行した際に、CoreDNS へのリクエストが増大してしまい不安定になってしまったのではと考えられます。</p>

<h2 id="CoreDNS-の負荷軽減">CoreDNS の負荷軽減</h2>

<p>Kurbernetes 上のコンテナの名前解決を知ると、外部サービスのAPI を実行する際には CoreDNS へのリクエストが多くなる事が分かりました。ここで、CoreDNS へのリクエスト数を減らす方法は下記の二つがあります。これも AWS のナレッジベースに方法が記載されているので、詳細は下記の記事を読む方が良いと思います。</p>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>
</ul>


<h3 id="ドメインの末尾にドット--を追加する">ドメインの末尾にドット (.) を追加する</h3>

<p>接続先のドメインの最後に <code>.</code> をつけると、EKS の内部で名前解決を複数回しないようになり、CoreDNS へのリクエストの総数が減ります。一例をあげると、<code>example.com</code> ではなく、 <code>example.com.</code> とする事で最初から EKS の外部に名前解決をしてくれるようになります。ドメインが SDK の内部で定義されているような場合など、変更出来ない場合はこの方法は利用出来ないかと思います。</p>

<h3 id="etcresolvconf-で-ndots1-の設定をする"><code>/etc/resolv.conf</code> で ndots:1 の設定をする</h3>

<p><code>/etc/resolv.conf</code> に <code>options ndots:5</code> とデフォルトで設定されている数値を <code>1</code> にする事で、ドメインに <code>.</code> が含まれている場合は常に EKS の外部に名前解決するようになります。Kubernetes の Manifest に <code>spec.dnsConfig</code> パラメータを設定する事で Pod 単位で変更が出来ます。ただし、この設定をすると EKS 内部で名前解決をしなくなってしまいますが、<code>&lt;name&gt;.&lt;namespace&gt;.svc.cluster.local.</code> のように最後に <code>.</code> をつけると名前解決出来ました。Kurbernetes の Service の数が多いとこの方法を周知させるのも大変だと思います。</p>

<pre class="code" data-lang="" data-unlink>apiVersion: apps/v1
kind: Deployment
metadata:
  name: hoge
spec:
  template:
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: &#34;1&#34;</pre>


<h3 id="その他の-CoreDNS-の負荷軽減の方法">その他の CoreDNS の負荷軽減の方法</h3>

<p>上記の二つの方法は CoreDNS へのリクエスト数を減らすことで、負荷を軽減するようなアプローチでした。CoreDNS の Pod 数はデフォルトで 2個となりますが、CoreDNS のPod をオートスケールする手段もあります。</p>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/">Autoscale the DNS Service in a Cluster</a></li>
</ul>


<p>また、Daemonset で DNS キャッシュをノード単位で配置するという方法もあります。</p>

<ul>
<li><a href="https://kubernetes.io/ja/docs/tasks/administer-cluster/nodelocaldns/">KubernetesクラスターでNodeLocal DNSキャッシュを使用する</a></li>
</ul>


<p>この辺りは他の方が書いた技術ブログも多くあるかと思うので、この記事では特に説明はしないです。</p>

<h2 id="最終的な結果">最終的な結果</h2>

<p>ソーシャルPLUSでは最終的に根本原因の CoreDNS へのリクエスト数を減らすために <code>/etc/resolv.conf</code> で <code>ndots:1</code> の設定をするようにしました。この設定をアプリケーションの Pod に適応した所、CoreDNS へのリクエスト数は 25% ほどと目に見えて減少させる事が出来ました。キャプチャは載せてないですが、CoreDNS の Pod の CPU使用率も 以前の半分ほどになったので、負荷軽減の目的は達成しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831171734.png" alt="f:id:mayuki123:20210831171734p:plain" width="527" height="187" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>ここまで、確信を持てないまま CoreDNS の負荷軽減に取り組みましたが、元々のネットワークエラーであった <code>Mysql2::Error::ConnectionError</code> のエラーは再発しなくなりました。また、EKS 上の他のコンテナも <code>Name or service not known</code> のような名前解決が出来ないといったエラーも発生しなくなりました。CoreDNS の負荷を減らす事で悩まされていた問題の解消が出来たと思います。今回のように比較的早い段階で気づく事が出来たので、お客さんへのサービス影響のある問題に発展せずに済みました。</p>

<p>今後、利用者数が増えてより負荷のかかる状況になってきた時には再発する可能性はありますが、早い段階で気付けるように日々確認するダッシュボードにメトリクスを追加するようにしています。その時がきた場合は CoreDNS の Pod 数の調整や DNS キャッシュの導入が必要になりそうです。</p>

<h2 id="おわりに">おわりに</h2>

<p>最終的には Pod の DNS 設定を調整するだけでネットワークエラーは解決しました。この記事では、結果だけではなくて解決に至るまでの経緯をメインにまとめてみました。実施していて良かったと思うことを下記にまとめます。これらの事が出来ていなければ、今回のようなネットワークエラーはたまに発生する事象として、根本原因の追及は出来なかったと思うので、サービスのオブザーバビリティを整備する事や日々の情報収集は大事ですね。</p>

<ul>
<li>アプリケーションのエラーを Slack に通知していた</li>
<li>Kurbernetes のメトリクスを Datadog で確認できる状態だった</li>
<li>コンテナのログを一元的に Datadog Logs  で閲覧できるようにしていた</li>
<li>他の人の技術ブログから Kubernetes の CoreDNS が不安定になることを知っていた</li>
</ul>


<p>この記事に間違っている内容や、もっと良い改善方法がある事をご存知の方がいましたら、優しく教えてください。</p>

<h2 id="おまけ">おまけ</h2>

<p>現在、ソーシャルPLUS では作りたい機能が山ほどある状況でまだまだ成長するサービスになると思うので、成長を続けるサービスに携わりたいエンジニアやデザイナーのご応募をお待ちしております！サイトにはまだないですが、インフラエンジニアも近いうちに募集をする事にはなると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21802" title="Railsエンジニア【Shopify App開発/ID連携サービス】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21802">open.talentio.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21755" title="フロントエンドエンジニア【Shopifyアプリ開発/ID連携サービス/React/TypeScript】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21755">open.talentio.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21760" title="UI/UXデザイナー【ID連携サービス/マーケティング支援SaaS】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21760">open.talentio.com</a></cite></p>

<p>フィードフォース の他のサービスもエンジニアを募集してますので、興味があればご応募お待ちしております！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fengineers.recruit.feedforce.jp%2F%3F_ga%3D2.157559610.1029003260.1630297434-1923366822.1626416415%23entry" title="フィードフォース エンジニア・デザイナー採用サイト" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://engineers.recruit.feedforce.jp/?_ga=2.157559610.1029003260.1630297434-1923366822.1626416415#entry">engineers.recruit.feedforce.jp</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた]]></title>
        <id>https://developer.feedforce.jp/entry/2021/08/30/150000</id>
        <link href="https://developer.feedforce.jp/entry/2021/08/30/150000"/>
        <updated>2021-08-30T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。
先週はまるっと夏休みにしてました。今日からまた <a href="https://ja.looker.com/">Looker</a> と戯れる日々が始まります。</p>

<p>丸１年 Looker と戯れてきて最近ようやく、<strong>Join 先の view でも</strong> primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#Looker-における-primary_key-の役割">Looker における primary_key の役割</a></li>
    <li><a href="#primary_key-の実装例">primary_key の実装例</a></li>
    <li><a href="#LookML-開発におけるテスト">LookML 開発におけるテスト</a></li>
    <li><a href="#Join-先の-view-は-primary_key-をテスト出来ないことがある">Join 先の view は primary_key をテスト出来ないことがある</a></li>
    <li><a href="#Join-先の-view-の-primary_key-をいい感じにテストする">Join 先の view の primary_key をいい感じにテストする</a></li>
    <li><a href="#まとめと所感">まとめと所感</a></li>
    <li><a href="#おまけ">おまけ</a></li>
</ul>

<h2 id="Looker-における-primary_key-の役割">Looker における primary_key の役割</h2>

<p>Looker には <a href="https://help.looker.com/hc/en-us/articles/360023722974">Symmetric Aggregates</a> という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000" title="『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>その Symmetric Aggregates では <a href="https://docs.looker.com/reference/field-params/primary_key">primary_key</a> が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。</p>

<ul>
<li>primary_key が重複すると fanout エラーが発生することがある</li>
<li>primary_key が null だと Measure が 0 になることがある</li>
</ul>


<p>このような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。</p>

<h2 id="primary_key-の実装例">primary_key の実装例</h2>

<p>私が所属する <a href="https://feedmatic.net/">Feedmatic</a> では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。</p>

<p>そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。</p>

<pre class="code" data-lang="" data-unlink>dimension: id {
  primary_key: yes
  type: string
  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, &#39;&#39;)) ;;
  hidden: yes
}</pre>


<p>※ <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%8F%E3%82%A6%E3%82%B9">DWH</a> は BigQuery を使っています。</p>

<p>これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭</p>

<h2 id="LookML-開発におけるテスト">LookML 開発におけるテスト</h2>

<p>以上の課題を解決するために、<a href="https://docs.looker.com/reference/model-params/test">test</a> パラメータが使えます。</p>

<p>例えばこのような <code>parent</code> explore があったとします。Join がないのでシンプルです。</p>

<pre class="code" data-lang="" data-unlink>explore: parent {
  ...
}

view: parent {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
  }
}</pre>


<p>私はこのようなテストを書いて、全ての <code>parent.id</code> が null でないことと、重複しないことを保証させています。</p>

<pre class="code" data-lang="" data-unlink>test: parent_id_is_not_null {
  explore_source: parent {
    column: id {}
    sorts: [parent.id: asc]
    limit: 1
  }
  assert: id_is_not_null {
    expression: NOT is_null(${parent.id}) ;;
  }
}

test: parent_id_is_unique {
  explore_source: parent {
    column: id {}
    column: count {}
    sorts: [parent.count: desc]
    limit: 1
  }
  assert: id_is_unique {
    expression: ${parent.count} = 1 ;;
  }
}</pre>


<p>👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。</p>

<h2 id="Join-先の-view-は-primary_key-をテスト出来ないことがある">Join 先の view は primary_key をテスト出来ないことがある</h2>

<p>さて、<code>child</code> view を Join する必要が出てきました。</p>

<pre class="code" data-lang="" data-unlink>explore: parent {
  join: child {
    type: left_outer
    relationship: one_to_many
    sql_on: ... ;;
  }
}

view: parent {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
  }
}

view: child {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
    hidden: yes
  }
}</pre>


<p>同じように <code>child.id</code> のテストを書きましたが、うまくいきません。<code>is_not_null</code> はまだしも、<code>is_unique</code> がダメです。</p>

<pre class="code" data-lang="" data-unlink># これは OK
test: parent_child_id_is_not_null {
  explore_source: parent {
    column: id { field: child.id }
    sorts: [child.id: asc]
    limit: 1
  }
  assert: child_id_is_not_null {
    expression: NOT is_null(${child.id}) ;;
  }
}

# parent の count になり、テストが通らない。
test: parent_child_id_is_unique {
  explore_source: parent {
    column: id { field: child.id }
    column: count { field: child.count }
    sorts: [parent.count: desc]
    limit: 1
  }
  assert: child_id_is_unique {
    expression: ${child.count} = 1 ;;
  }
}</pre>


<p>よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも <code>child</code> view の primary_key のテストをしたいだけなのに、Join は邪魔です。</p>

<h2 id="Join-先の-view-の-primary_key-をいい感じにテストする">Join 先の view の primary_key をいい感じにテストする</h2>

<p><code>child</code> view と同じファイルに、こっそり <code>child</code> explore を定義します。<a href="https://docs.looker.com/ja/reference/explore-params/hidden-for-explore">hidden</a> にして存在を消しています。さらに <a href="https://docs.looker.com/reference/explore-params/required_access_grants-for-explore">required_access_grants</a> で、開発者以外の URL 直打ちによるアクセスも防いでいます。</p>

<pre class="code" data-lang="" data-unlink>view: child {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
    hidden: yes
  }
}

# Define for test
explore: child {
  hidden: yes
  required_access_grants: [can_view_explores_for_tests]
}</pre>


<p><a href="https://docs.looker.com/reference/model-params/access_grant">access_grant</a> である <code>can_view_explores_for_tests</code> はこのような定義です。</p>

<pre class="code" data-lang="" data-unlink># For tests
access_grant: can_view_explores_for_tests {
  user_attribute: view_explores_for_tests
  allowed_values: [&#34;yes&#34;]
}</pre>


<p><a href="https://docs.looker.com/admin-options/settings/user-attributes">User attribute</a> である <code>view_explores_for_tests</code> は、今回のような「Join 先の view をテストすること」全般に使います。User Access は <code>None</code>、Default Value も <code>no</code> です。開発者用の Group を作り、その Group value を <code>yes</code> にしました。</p>

<p>ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。</p>

<p>あとは <code>parent</code> explore と同じようにテストを書くだけです。</p>

<pre class="code" data-lang="" data-unlink>test: child_id_is_not_null {
  explore_source: child {
    column: id {}
    sorts: [child.id: asc]
    limit: 1
  }
  assert: id_is_not_null {
    expression: NOT is_null(${child.id}) ;;
  }
}

test: child_id_is_unique {
  explore_source: child {
    column: id {}
    column: count {}
    sorts: [child.count: desc]
    limit: 1
  }
  assert: id_is_unique {
    expression: ${child.count} = 1 ;;
  }
}</pre>


<p>テストは通っても、LookML validation error が発生するかもしれません。その時は <a href="https://docs.looker.com/ja/reference/explore-params/fields-for-explore">fields</a> パラメータを使って、露出する field を限定すると良いでしょう。</p>

<pre class="code" data-lang="" data-unlink># Define for test
explore: child {
  hidden: yes
  required_access_grants: [can_view_explores_for_tests]
  fields: [child.id, child.count] # Avoid LookML validation error
}</pre>


<p>このテクニックは <a href="https://help.looker.com/hc/en-us/articles/360023586293-Error-Unknown-or-Inaccessible-Field">Error: Unknown or Inaccessible Field – Looker Help Center</a> でも紹介されています。</p>

<h2 id="まとめと所感">まとめと所感</h2>

<p>LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。</p>

<p>もっと良い方法や、今回のやり方はここがマズイとかあれば <a href="https://twitter.com/masutaka">@masutaka</a> にお知らせ頂けると大変うれしいです。🙏</p>

<p>Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。</p>

<p>Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。</p>

<p>それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。</p>

<h2 id="おまけ">おまけ</h2>

<p>今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815" title="LookML Data Tests: Recommendations and Best Practices | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Manjaro でハイバネート出来るようにしたメモ]]></title>
        <id>https://masutaka.net/chalow/2021-08-25-1.html</id>
        <link href="https://masutaka.net/chalow/2021-08-25-1.html"/>
        <updated>2021-08-25T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[４月から個人 PC を MacBook Air から Linux マシンに変えました。[2021-05-06-1]スライド P41 に書いたとおり、たまにスリープから復帰しなくてつらいです。仕方がないので「スリープしない設定にする。常にAC電源ON🤗」という運用でカバー（）をしていました。😭いつまでも続けるわけにもいかないので、今回重い腰を上げてハイバネート出来るようにしました。Linux (Xfce4) のスリープ方式私が使っているウィンドウマネージャーは Xfce4 です。電源管理の設定等で出てくるスリープ関連の用語と、自分なりの理解は以下のとおりです。情報源は Wikipedia です。😆・サスペンドメモリ以外の給電停止した状態。ACPI では S3 に相当する。・ハイバネートメモリの内容をストレージに移し電源断。ACPI では S4 に相当する。・ハイブリッドスリープサスペンドとハイバネートの中間だと思われるが、試したらすぐハイバネートしただけだった...。macOS (Big Sur) のスリープ方式macOS ではサスペンドやハイバネートの使い分けは不要で、意識するのは「スリープ」のみです。以下のような「セーフスリープ」という機構を備えているそうです。・スリープ状態になると、メモリの内容を保持したままストレージにも保存する・スリープ中にバッテリーが切れていなければ、復帰時にメモリの内容を使う・スリープ中にバッテリーが切れていたら、復帰時にストレージの内容を使う奨励はされていませんが、pmset コマンドでスリープ方式を「セーフスリープ」から「スリープ」または「ディープスリープ」に変更は出来るようです。「スリープ」は ACPI の S3 に相当し、「ディープスリープ」は S4 に相当するようなので、Xfce4 の「ハイブリッドスリープ」は「セーフスリープ」が本来の振る舞いなのかも。※ 状態としての「スリープ」と、その種類としての「スリープ」（と「セーフスリープ」「ディープスリープ」）があるので、文章がややこしいです。Linux と macOS の振る舞いの違いmacOS の素晴らしい点に、ユーザーにスリープをほぼ意識させない設計があると思います。サスペンドやハイバネートのような用語が現れないこともさることながら、MacBook なら蓋を開けばログイン画面が表示されるだけです。多少復帰がもたつくことはあるのはご愛嬌。Linux はサスペンドは同じとしても、ハイバネートは OS の起動から始まるので、「あれ？バッテリー切れてた？」と一瞬不安になります。Windows も同じという理解です。どの OS もバックグラウンドの処理は同じだと思います。macOS はユーザーへの見せ方がきれいですね。Manjaro でのハイバネート設定方法「サスペンドとハイバネート - ArchWiki」に従いました。以下の流れです。1. スワップファイルを作る2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する3. 関連するフックを initramfs に追加する1. スワップファイルを作る今回は /swapfile という 18GB のスワップファイルを作りました。$ sudo fallocate -l 18G /swapfile$ sudo chmod 600 /swapfile$ sudo mkswap /swapfile$ sudo swapon /swapfileこの VivoBook のメモリは 16GB です。RedHat の記事に従い、スワップファイルのサイズは 18GB にしました。無事作られました。$ swapon -showFilename Type Size Used Priority/swapfile file 18874364 0 -2永続化するために /etc/fstab に以下を追記しました。/swapfile none swap defaults 0 0ちなみに、今回のような任意サイズのファイルは dd でも作れます。ただ、dd は実際にファイル書き込みが発生するため、可能なら fallocate を使うほうが無駄がなくて良いと思います。参考記事: Linuxでサイズ指定してダミーファイルを作成する方法 - conf t2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する/etc/default/grub を以下のように変更しました。/swapfile が、どのデバイスの、どの位置（オフセット）に存在するかを教えています。--- /tmp/grub.orig2021-08-25 01:12:57.415049508 +0900+++ /etc/default/grub2021-08-23 23:42:08.875333968 +0900@@ -2,7 +2,7 @@ GRUB_TIMEOUT=5 GRUB_TIMEOUT_STYLE=hidden GRUB_DISTRIBUTOR="Manjaro"-GRUB_CMDLINE_LINUX_DEFAULT="quiet apparmor=1 security=apparmor udev.log_priority=3"+GRUB_CMDLINE_LINUX_DEFAULT="quiet apparmor=1 security=apparmor udev.log_priority=3 resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9 resume_offset=52037632" GRUB_CMDLINE_LINUX="" # If you want to enable the save default function, uncomment the followingGRUB_CMDLINE_LINUX がユーザー用の変数かと思い、初めはこれを使ってしまいましたが、リカバリモード用でした（GNU GRUB Manual 2.06: Simple configuration）。"resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9" で、/swapfile が置いてあるデバイスを教えています。雑に調べると /dev/nvme0n1p5 です。/swapfile なので当たり前ですが、"/" がマウントポイントです。$ df /swapfileFilesystem 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p5 527306168 62862840 437583404 13% /"resume=/dev/nvme0n1p5" でも問題はないとは思いますが、外付けストレージの追加等で名前が変わるリスクはゼロではないため、UUID による永続的な命名方法を使いました。各デバイスの UUID 確認方法は簡単です（永続的なブロックデバイスの命名 - ArchWiki）。$ ls -alF /dev/disk/by-uuidtotal 0drwxr-xr-x 2 root root 100 8月 24 00:14 ./drwxr-xr-x 8 root root 160 8月 24 00:14 ../lrwxrwxrwx 1 root root 15 8月 24 00:14 2E80-83B2 -&gt; ../../nvme0n1p1lrwxrwxrwx 1 root root 15 8月 24 00:14 52d772c6-e49d-4be0-9963-c9aae2a9e4f9 -&gt; ../../nvme0n1p5lrwxrwxrwx 1 root root 15 8月 24 00:14 DA82730D8272ECFF -&gt; ../../nvme0n1p4"resume_offset=52037632" で、/swapfile が /dev/nvme0n1p5 の先頭からどの位置（オフセット）に存在するかを教えています。filefrag というコマンドで分かるようです。$ sudo filefrag -v /swapfile | head -n 5Filesystem type is: ef53File size of /swapfile is 19327352832 (4718592 blocks of 4096 bytes) ext: logical_offset: physical_offset: length: expected: flags: 0: 0.. 0: 52037632.. 52037632: 1: 1: 1.. 2047: 52037633.. 52039679: 2047: unwrittenext4 はフラグメンテーションが起きづらいそうだけど、e4defrag で手動デフラグしたらオフセットは変わり得るのでは？と思いました。ちょっと怖いな。どうなんでしょう？/etc/default/grub を変更したら /boot/grub/grub.cfg を再作成します。$ sudo grub-mkconfig -o /boot/grub/grub.cfg3. 関連するフックを initramfs に追加する/etc/mkinitcpio.conf を以下のように変更しました。カーネル起動時に resume というモジュールがロードされるのかな。filesystems の前に追加するのがとても重要だそうです。--- /tmp/mkinitcpio.conf.orig2021-08-25 01:40:50.793227026 +0900+++ /etc/mkinitcpio.conf2021-08-23 23:07:04.396638336 +0900@@ -49,7 +49,7 @@ # ## NOTE: If you have /usr on a separate partition, you MUST include the # usr, fsck and shutdown hooks.-HOOKS="base udev autodetect modconf block keyboard keymap filesystems fsck"+HOOKS="base udev autodetect modconf block keyboard keymap resume filesystems fsck" # COMPRESSION # Use this to compress the initramfs image. By default, gzip compression/etc/mkinitcpio.conf を変更したら /boot/initramfs-*.img を再作成します。$ sudo mkinitcpio -p linux510linux510 は /etc/mkinitcpio.d/ 以下のファイルと対応していました。今回は /etc/mkinitcpio.d/linux510.preset しかなかったので、linux510 になりました。ちなみに mkinitcpio を引数なしで実行すると、dry run モードによる確認が出来ます。$ sudo mkinitcpio==&gt; Starting dry run: 5.10.59-1-MANJARO -&gt; Running build hook: [base] -&gt; Running build hook: [udev] -&gt; Running build hook: [autodetect] -&gt; Running build hook: [modconf] -&gt; Running build hook: [block] -&gt; Running build hook: [keyboard] -&gt; Running build hook: [keymap] -&gt; Running build hook: [resume] -&gt; Running build hook: [filesystems] -&gt; Running build hook: [fsck]==&gt; Generating module dependencies==&gt; Dry run complete, use -g IMAGE to generate a real image注意点GRUB や Linux カーネルが更新されたら、2 や 3 の再設定が必要みたいです。面倒なので私は mitamae でゆるふわ構成管理しています。まとめハイバネート出来た時は、思わずおぉー！と声が出ました。他の OS では当たり前すぎるハイバネートですが、自分で設定すると感慨深いものがあります。これで VivoBook から気軽に AC 電源コードを抜けるようになりました。なんと当たり前な...。今までは気がつくと電源が落ちていたので、AC 電源コードも気も抜けませんでした。😭サスペンドは復帰時に画面が表示されず、電源ボタンを長押しするしかなくなることがあるので、まだ使えていません。前述の「サスペンドとハイバネート - ArchWiki」によると、この現象は多数報告されているそうです。そして、そのデバッグのベストプラクティスがこの記事とのこと。長いので気が向いたら調べます。たぶん、Linux カーネルと ATI のドライバの相性（）が悪いのだと思います。他の参考記事・Arch Linux 快適デスクトップ環境の構築 2019 - Qiita・Linux におけるラップトップマシン向け電力管理スイートの紹介（Pm-utils, Laptop-mode-tools, Powertop, TLP） – 怠惰の形而上学初めからインストールされていた TLP があればサスペンド（スリープ）は問題なく管理されているそう。Laptop-mode-tools はもう古いそう。なのにサスペンドだけだと数時間しかバッテリーがもたないのは、推して知るべし...。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[私が１年かけて辿り着いた Looker の情報収集方法を紹介する]]></title>
        <id>https://developer.feedforce.jp/entry/2021/08/16/150000</id>
        <link href="https://developer.feedforce.jp/entry/2021/08/16/150000"/>
        <updated>2021-08-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんばんは、<del>徳川家ｙ</del> <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>以前紹介したように、去年から <a href="https://ja.looker.com/">Looker</a> を使ったウェブ広告数値の可視化や BI <a href="#f-25b67c2a" name="fn-25b67c2a" title="Business Intelligence">*1</a> に取り組んでいます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000" title="『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。</p>

<p>LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。</p>

<p>現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#情報源をリストアップする">「情報源」をリストアップする</a></li>
    <li><a href="#少し脱線">少し脱線...</a></li>
    <li><a href="#情報源の取得方法への課題">「情報源」の取得方法への課題</a></li>
    <li><a href="#今はどうなったか">今はどうなったか？</a></li>
    <li><a href="#Looker-Communityのフィードが存在した件">「Looker Community」のフィードが存在した件</a></li>
    <li><a href="#Looker-の記事一覧--DevelopersIOのフィードを作った件">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</a></li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#追記">追記</a></li>
</ul>

<h2 id="情報源をリストアップする">「情報源」をリストアップする</h2>

<p>初めはこれらをたまに見に行ったり、Slack の <code>/feed subscribe</code> <a href="#f-e46aea89" name="fn-e46aea89" title="Slack に RSS フィードを追加する | Slack">*2</a> で購読したりしてました。</p>

<ul>
<li><a href="https://community.looker.com/">Looker Community</a>

<ul>
<li>公式フォーラム。英語で Question や Conversation が出来る</li>
</ul>
</li>
<li><p><a href="https://community.looker.com/%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0-japanese-161">Looker 日本語コミュニティフォーラム</a></p>

<ul>
<li>「Looker Community」の日本語版。<a href="https://docs.looker.com/relnotes/intro">Release Notes</a> の日本語訳には本当に感謝 🙏</li>
<li><p>「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される</p>

<p>  <figure class="figure-image figure-image-fotolife" title="Looker 日本語コミュニティフォーラム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815145002.png" alt="f:id:masutaka26:20210815145002p:plain" width="1200" height="382" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker 日本語コミュニティフォーラム</figcaption></figure></p></li>
</ul>
</li>
<li><p><a href="https://www.facebook.com/groups/721814241538725">Looker APAC Forum | Facebook</a></p>

<ul>
<li>リリース案内や事例紹介など</li>
</ul>
</li>
<li><a href="https://dev.classmethod.jp/tags/looker/">Looker の記事一覧 | DevelopersIO</a>

<ul>
<li>ご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度</li>
</ul>
</li>
<li><a href="https://zenn.dev/topics/looker">Lookerの記事一覧 | Zenn</a>

<ul>
<li>Zenn にもそれなりの頻度で投稿される</li>
</ul>
</li>
<li><a href="https://qiita.com/tags/looker">Looker - Qiita</a>

<ul>
<li>Qiita はもう少し頻度は落ちるかな</li>
</ul>
</li>
<li><a href="https://twitter.com/search?q=%23looker%20lang%3Aja&amp;f=live&amp;vertical=default">#looker lang:ja - Twitter 検索</a>

<ul>
<li>以上の情報をふわっと取得できる。<code>looker lang:ja</code> や <code>#looker</code> だとノイズが多いのでこれに落ち着いた</li>
</ul>
</li>
</ul>


<h2 id="少し脱線">少し脱線...</h2>

<p>Looker Community には過去一度だけ質問しました。</p>

<p><a href="https://community.looker.com/lookml-5/how-do-i-dynamically-switch-view-name-in-sql-parameter-of-dimension-27831">How do I dynamically switch view name in sql parameter of dimension? | Looker Community</a></p>

<p>私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。</p>

<p>扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀</p>

<p>Looker の水野さんが日本語訳して下さっている、Looker のリリースノート <a href="#f-c898f381" name="fn-c898f381" title="例: Looker 21.12 リリースノート | Looker Community">*3</a> は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。</p>

<p><figure class="figure-image figure-image-fotolife" title="Looker 21.12 のリリースノートを眺めてみた"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160438.png" alt="f:id:masutaka26:20210815160438p:plain" width="1200" height="849" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker 21.12 のリリースノートを眺めてみた</figcaption></figure></p>

<p>今まで書いた記事です。</p>

<p><figure class="figure-image figure-image-fotolife" title="Looker のリリースノートを眺めてみたシリーズ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160356.png" alt="f:id:masutaka26:20210815160356p:plain" width="1200" height="887" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker のリリースノートを眺めてみたシリーズ</figcaption></figure></p>

<h2 id="情報源の取得方法への課題">「情報源」の取得方法への課題</h2>

<p>RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。</p>

<p>そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。</p>

<h2 id="今はどうなったか">今はどうなったか？</h2>

<p>ほぼすべてを社内の Slack channel <code>#news-looker</code> に集約させることが出来ました。</p>

<p>以下が実際に購読しているフィードです。</p>

<ul>
<li><a href="https://community.looker.com/feed/buzzcapture">https://community.looker.com/feed/buzzcapture</a>

<ul>
<li>「Looker Community」のフィード。後述する</li>
</ul>
</li>
<li><a href="https://feed43.com/developersio-looker.xml">https://feed43.com/developersio-looker.xml</a>

<ul>
<li>「Looker の記事一覧 | DevelopersIO」のフィード。後述する</li>
</ul>
</li>
<li><a href="https://zenn.dev/topics/looker/feed">https://zenn.dev/topics/looker/feed</a>

<ul>
<li>「Lookerの記事一覧 | Zenn」のフィード</li>
</ul>
</li>
<li><a href="https://qiita.com/tags/looker/feed">https://qiita.com/tags/looker/feed</a>

<ul>
<li>「Looker - Qiita」のフィード</li>
</ul>
</li>
</ul>


<p>Twitter は <a href="https://ifttt.com/">IFTTT</a> を使って、同 channel に POST しています。</p>

<ul>
<li><code>If</code> New tweet from search <code>#looker lang:ja -rt</code></li>
<li><code>Then</code> Post to channel

<ul>
<li>Channel: <code>#news-looker</code></li>
<li>Message: <code>@{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})</code></li>
</ul>
</li>
</ul>


<p>「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。</p>

<h2 id="Looker-Communityのフィードが存在した件">「Looker Community」のフィードが存在した件</h2>

<p><a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA-the-kitchen-table-%E3%81%8C%E5%85%AC%E9%96%8B%E3%81%95%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F-24032?postid=45126#post45126">Looker の水野さんに聞いたら、調べて教えて下さいました。</a>🙏</p>

<ul>
<li>(1) 新しいトピックの投稿

<ul>
<li><a href="https://community.looker.com/feed/topics">https://community.looker.com/feed/topics</a></li>
</ul>
</li>
<li>(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）

<ul>
<li><a href="https://community.looker.com/feed/buzzcapture">https://community.looker.com/feed/buzzcapture</a></li>
</ul>
</li>
</ul>


<p>アナウンス記事です。
<a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AErss%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89-25553?postid=46404#post46404">LookerコミュニティのRSSフィード | Looker Community</a></p>

<p>(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。</p>

<p>今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。</p>

<p><a href="https://community.looker.com/">https://community.looker.com/</a> の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。</p>

<h2 id="Looker-の記事一覧--DevelopersIOのフィードを作った件">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</h2>

<p>ないものは仕方がないので、<a href="https://feed43.com/">Feed43</a> というサービスで作りました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2021-03-14-1.html" title="フィード（RSS/Atom）を配信していないサイトのフィードを Feed43 で作成する" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>出来たのが <a href="https://feed43.com/developersio-looker.xml">https://feed43.com/developersio-looker.xml</a> です。どなたでも購読可能です。よろしければどうぞ。</p>

<p>HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。</p>

<p>本当は <a href="https://dev.classmethod.jp/tags/looker/">https://dev.classmethod.jp/tags/looker/</a> のフィードがあれば良いのですけどね。今後に期待です。</p>

<p>[Update] そのものズバリ <a href="https://dev.classmethod.jp/feed/?tag=looker">https://dev.classmethod.jp/feed/?tag=looker</a> を <a href="https://twitter.com/sh19910711/status/1427429573117964306">Twitterで教えて</a>頂きました。ありがとうございます！</p>

<h2 id="まとめ">まとめ</h2>

<p>私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。</p>

<p>これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥
※ ネタは少しあるけど、時間がない。(^^;</p>

<p>皆さんにも参考になれば幸いです。他にもあれば <a href="https://twitter.com/masutaka">@masutaka</a> に教えて下さい！</p>

<h2 id="追記">追記</h2>

<blockquote><p>他にもあれば <a href="https://twitter.com/masutaka">@masutaka</a> に教えて下さい！</p></blockquote>

<p>記事にも登場して頂いた Looker の水野さん <a href="https://twitter.com/tomoya_cs">@tomoya_cs</a> をフォローするとさらに捗ると思います。</p>

<p><blockquote data-conversation="none" class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭<br>あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） <a href="https://t.co/eDQz8A5VCC">https://t.co/eDQz8A5VCC</a></p>&mdash; tomoya | Looker CS (@tomoya_cs) <a href="https://twitter.com/tomoya_cs/status/1428194155943972872?ref_src=twsrc%5Etfw">2021年8月19日</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </p>
<div class="footnote">
<p class="footnote"><a href="#fn-25b67c2a" name="f-25b67c2a" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%86%E3%83%AA%E3%82%B8%E3%82%A7%E3%83%B3%E3%82%B9">Business Intelligence</a></span></p>
<p class="footnote"><a href="#fn-e46aea89" name="f-e46aea89" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://slack.com/intl/ja-jp/help/articles/218688467-Slack-%E3%81%AB-RSS-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">Slack に RSS フィードを追加する | Slack</a></span></p>
<p class="footnote"><a href="#fn-c898f381" name="f-c898f381" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">例: <a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker-21-12-%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88-27799">Looker 21.12 リリースノート | Looker Community</a></span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome から Firefox に乗り換えたよ]]></title>
        <id>https://masutaka.net/chalow/2021-08-07-1.html</id>
        <link href="https://masutaka.net/chalow/2021-08-07-1.html"/>
        <updated>2021-08-07T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[[2011-06-03-1] に Firefox から Chrome に乗り換えて以来です。ちょうど 10 年。iPhone から Android への乗り換え [2020-07-14-1] も 10 年だったし、飽きづらいマスタカも 10 年が周期みたいです。まあ、普通の人は乗り換えたことをいちいち記録しないし、もっとカジュアルにあっちこっち使う気はしてます。このブログの名前が「マスタカの ChangeLog メモ」なので記録せざるを得ないのです。もう大変。(>o<)飽きたのはありますが、この Issue がきっかけではあります。Xkeysnail と Chrome の組み合わせで、カーソル移動やタブ移動のキーが 2 回発行されてしまう問題です。もう修正されたようですが、回避方法がダウングレードしかなく地味に厄介でした。そんな私はブラウザ乗り換えで回避したという...。10 年前は Firefox と Keysnail を使っていました。個人 PC を Linux にしたことで、また同じ作者である mooz さん作の Xkeysnail を Firefox でも使うことには感慨深いものがあります。そういえば Manjaro (Linux) のデフォルトブラウザは Firefox でした。それも戻った理由ではあるかな。Chrome だと AUR でインストールする必要があるのですよね。10 年と書きましたが、その間 2 回ほど Firefox に戻ろうとしていました。2017 年の時は、20 日程度戻ってました。当時は Quantum として大型アップデートされた直後で、アドオンが割と壊れていた記憶。1Password アドオンはまだなかった。あと、Multi-Account Containers に惑わされてしまった。loading...loading...2019 年は 15 日くらい頑張っていました。2014 年製の MacBook Air が遅いのが諦めた要因だったような。> 買えよ (^^;loading...loading...今回は乗り換えのハードルを低くするために個人 PC だけ乗り換えました。PC も速くなった [2021-05-06-1] ので、2019 年とは違います。会社の MacBook Pro はまだ（？）Chrome です。Firefox でまず戸惑うのが、Chrome のユーザー（プロファイル）切り替えに相当する機能が見当たらないことです。4 年前と変わらず、なぜか Multi-Account Containers を推してきますが、これはタブ単位でセッションを切り替える機能です。Firefox アカウントは切り替えられないので代わりにはなりません。代わりに "about:profiles" が使えます。アドレスバーにこれを入力して開くと、素朴な画面が開いてプロファイルの管理や起動が出来ます。"$ firefox -P" などと "-P" オプション付きで Firefox を開いても、似た機能を持つプロファイルマネージャーが起動します。公式ヘルプ: プロファイルマネージャーを使用して、Firefox のプロファイルを作成または削除する｜Firefox ヘルプ前回と同じように、私が使う数少ないアドオンの乗り換え記録も残しておきます。各タイトルは Chrome 拡張名です。1Passwordこれは普通にあります。X は気にしないでください。1Password X – パスワード保管庫Chrome 版は２つあって初心者を悩ませそうです。前者が X です。気にしないでください...。1Password – パスワード保管庫1Password 拡張機能 (パソコンのアプリが必要)ato-ichinenON にしている間、Google 検索を直近 1 年にするだけの Chrome 拡張です。技術系の調査は鮮度が大事なことがあるからです。よく考えたらブックマークレットで十分なので、こんなのを作りました。どうでも良いですが、名前は G1nen にしました。javascript:location.href=location.href+'&amp;tbs=qdr:y'ついでに G2en というブックマークレットも作りました。これは Google の検索対象を英語サイトにします（情報源）。日本語の情報はノイズになることが多いので。だったら常に英語にしろよという意見は認めます。javascript:location.href=location.href+'&amp;gl=us&amp;hl=en&amp;gws_rd=cr&amp;pws=0'Create Link今開いているページや選択したリンクを、Markdown や任意のフォーマットでクリップボードにコピーする Chrome 拡張です。esa とか書いてるとよく使いますよね。Format Link に移行しました。若干上位互換風で、正規表現を使った置換も出来ます。Emoty絵文字を一覧から選んでクリップボードにコピー出来る Chrome 拡張です。フォーマットは :smile: などで、Unicode 絵文字ではありません。Emoji Cheatsheet に移行しました。こちらは Unicode 絵文字にも対応しています。Google Analytics オプトアウト アドオン (by Google)その名の通りの Chrome 拡張です。Chrome の機能を使って、自分のサイトや会社のサイトだけをオプトアウトしていました。宗教上の理由（）がないので、全サイトはオプトアウトしていません。良さげなアドオンが見つかっていません。情報求む。Google 翻訳その名の通りの Chrome 拡張です。選択範囲だけを翻訳したり、ページ全体を日本語に置き換えたり便利ですよね。To Google Translate に移行しました。https://translate.google.com/ が別タブで開いてしまうので大げさではあります。まあいいか...。Grammarly for Chromeスペルチェッカーサービス Grammarly の Chrome 拡張です。今年も気がついたら課金していたので、来年は課金しないようにしました。Grammarly for Firefox があります。ただ、Chrome と違って動作するサイトを絞れないので、フォームへの書き込みを邪魔することが多いです...。Keepa - Amazon Price TrackerAmazon の商品ページに価格変動グラフを挿入してくれる Chrome 拡張です。「安くなった。買い時だ。」「高いけど買っちゃおう。」などと判断の助けになります。← 結局買う奴Amazon Price Tracker - Keepa.com があります。LINELINE の Chrome アプリです。長めの文章が面倒な時に使ってました。Firefox 版はないみたいです。LINE をあまり使わないので問題なし。Save to PocketPocket の Chrome 拡張です。結局 Pocket に戻って来てしまいます。Firefox にはこの機能が組み込まれています。2015-04-21 にそんなニュースがありました。速報： MozillaがPocket（旧Read It Later）をFirefox本体に統合（追記あり） - Mozilla Fluxtwitter画像原寸ボタンtwitter.com や TweetDeck で小さくて見づらい画像を原寸サイズで、別タブにバババッと開く Chrome 拡張です。Twitter 原寸びゅーに移行しました。モーダルで開き、ショートカットキーでサイズを変えられるので、こちらの方が便利です。はてなブックマークご存知はてブの Chrome 拡張です。Hatena Bookmark があります。なぜか英語。新たに Firefox にインストールしたアドオンChrome では要らなかったが、Firefox でインストールしたアドオンを書いていきます。Copy Link Textリンクテキストをコピーするアドオンです。↑ だと "Copy Link Text" をコピーできます。信じられないことに Firefox ではこれが出来ないのです。4 年前のやつが残ってて、何をするアドオンか思い出すのに時間がかかりました...。Firefox で不要になったアドオン反対に、Chrome で使っていたが、Firefox で代わりは要らなかった Chrome 拡張を書いていきます。Close download barファイルをダウンロードすると現れるうざいフッターを Option-w や Alt-w で閉じられる Chrome 拡張です。地味だけど便利です。まとめ10 年ぶりに Firefox に戻ってきました。1 週間使っていますが、課題はありつつも、Firefox だと忘れてしまう程度には主張してきません。割と快適です。アドオンがエラーを起こすのはたまたまなんですかね？この記事を書いている間、Format Link が使えませんでした...。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[３月に無償提供となった Microsoft Power Automate Desktop を今さらながら使ってみた]]></title>
        <id>https://masutaka.net/chalow/2021-07-28-1.html</id>
        <link href="https://masutaka.net/chalow/2021-07-28-1.html"/>
        <updated>2021-07-28T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[※ 会社の「インフラ共有会」用に書いた記事の転載です。Windows PC を買った [2021-05-06-1] ので、個人で試せることに気づいてちょろっと試したって経緯です。Microsoft、自社製RPAツールを全Windows 10ユーザーに無償提供　マウスクリックやキーボード入力をGUIで自動化：Microsoft Ignite 2021 - ITmedia NEWS・動作するのは目の前の Windows PC。エクセルとかのマクロをパワーアップしたものに近いかも・ スケジュール（時間を指定した自動実行）の機能は見つけられなかった。寝ている間に自動実行とかは出来ない気がした・Chrome の「要素を検証」みたいな感覚で、クリックやフォームの位置を指定できる・要素名を変更するなど細かい微調整は出来ないようなので、id 名等が少しでも変わるとフローが動かなくなるかも・アクションの種類は多彩で、頑張れば「LINEビジネスアカウントでログインして、レポートをローカルフォルダにダウンロードし、それを Google スプレッドシートにインポート」は出来ると思う・今起動しているブラウザにも接続できるようなので、２段階認証突破のハードルは多少低そうPower Automate と Power Automate Desktop との違いはイマイチ理解できていない。難しい...。・Power Automate・Power Automate Desktop ← 今回はこっち多彩なアクション※ フローの新規作成画面です。[多彩なアクション]フローを作った様子https://www.myfitnesspal.com/ja/account/login にログインして csv ファイルをダウンロードするフローを作ったが、MyFitnesspal は「CSV ファイルをダウンロードするためのリンクを含んだメールが届きます」だと知った。試しに作るには大きすぎるため心が折れた。(^^;[設定例]インストール方法や実行方法などの紹介動画うぃんどうずしょしんしゃなので、わかりやすいどうがをみたよ。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firestore エミュレーターを使ったテスト同士の競合が起きないようにしていい感じにテストできるようにした話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/07/07/103917</id>
        <link href="https://developer.feedforce.jp/entry/2021/07/07/103917"/>
        <updated>2021-07-07T01:39:17.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/len_prog/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/len_prog/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:len_prog</a> です。</p>

<p>私が所属している <a href="https://ecbooster.jp/">EC Booster</a> チームでは、「<a href="https://support.ecbooster.jp/ja/articles/4854572-%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%82%AB%E3%83%BC%E3%83%89%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">カイゼンカード</a>」機能の開発に Firebase を採用しています。<br />
その中でも特に Cloud Functions for Firebase と Cloud Firestore をメインで使用しており、これらの採用により短い開発期間で機能をリリースすることができました 🎉</p>

<p>しかし、Firebase を採用したことで苦労したことが全く無かったわけではありません。<br />
特に、テスト周りはインターネット上にもあまり情報が多くない状況で、色々ハマりながら開発をしてきました。</p>

<p>そこで、今回の記事では、いくつかあったハマりごとの中でも特に厄介だったものについて対策を書いていきます。</p>

<h1>Firestore Emulator のプロジェクト共有時のデータ競合</h1>

<p><a href="https://firebase.google.com/docs/emulator-suite?hl=ja">Firebase Local Emulator Suite</a> を使って Firestore に接続するテストを書いていた際に、<br />
テストを単体で実行した場合には通るのに、他のテストと並列に実行した場合のみドキュメントの状態が予期せぬものになりテストが落ちてしまうことに悩まされました。</p>

<p>調査の結果、これは、接続先プロジェクトがすべてのテストで同じになってしまっているのが原因ということが分かりました。</p>

<p>この状態で同じドキュメントを書き換えるテストが並列で走ってしまった場合、実行タイミングによってはドキュメントが予期せぬ状態になってしまいます。<br />
また、テスト結果が不安定だとテストが信用できず、実装を保証するものになりません。</p>

<p>このままでは役に立つテストが書けないと思い試行錯誤した結果、<strong>テストごとに違うプロジェクトの Firestore に接続する</strong>ことでそれぞれのテストが独立した状態で実行でき、結果としてデータ競合が防げることが分かりました。</p>

<p>以下、サンプルアプリケーションを用いてこの方法について書いていきます。</p>

<h1>サンプルアプリケーションの概要</h1>

<p>今回は、サンプルとして簡易的な RPG を開発することを想定します。<br />
ゲームに登場するキャラクターは、以下のような構造のドキュメントを持つ <code>characters</code> コレクションで管理されています。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synIdentifier">{</span>
  name: <span class="synType">string</span><span class="synStatement">;</span>
  level: <span class="synType">number</span><span class="synStatement">;</span>
  job: <span class="synType">string</span><span class="synStatement">;</span>
<span class="synIdentifier">}</span>
</pre>


<p>また、このゲームでは以下の行動のみが可能と仮定します(これだけじゃゲームとして成り立たないと思いますが、簡単のためということでお許しください)</p>

<ul>
<li>キャラクターは、レベルアップすることができる</li>
<li>キャラクターは、転職することができる

<ul>
<li>転職すると、キャラクターのレベルが1に戻る</li>
</ul>
</li>
</ul>


<p>なお、アプリケーション上においてキャラクターのレベルアップは、<code>characterLevelUpUseCase</code>、キャラクターの転職は <code>characterJobChangeUseCase</code> という関数を呼ぶことで行えることとします。</p>

<p>ここからは、実際にこれら2つの関数のテストコードが競合する様子を見ていきます。</p>

<h1>データ競合発生時の構成</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210624/20210624165133.png" alt="f:id:len_prog:20210624165133p:plain:w500" width="1200" height="790" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><code>characterJobChangeUseCase</code> と <code>characterLevelUpUseCase</code> が <code>my-game</code> プロジェクトの Firestore を共有してしまっています。<br />
この状態で両方の関数から同じドキュメントを書き換えてしまった場合、データ競合が発生する可能性があります。<br />
この場合、実際のコードは以下のようになります。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterJobChangeUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;my-game&quot;</span><span class="synStatement">,</span> <span class="synComment">// ここが問題</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterJobChangeUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterJobChangeUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>
    <span class="synStatement">const</span> jobChangedCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>jobChangedCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">1</span><span class="synStatement">);</span> <span class="synComment">// 実行タイミング次第では、1になるはずが11になってしまう！</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterLevelUpUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;my-game&quot;</span><span class="synStatement">,</span> <span class="synComment">// ここが問題</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterLevelUpUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterLevelUpUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>
    <span class="synStatement">const</span> grownCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>grownCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">11</span><span class="synStatement">);</span> <span class="synComment">// 実行タイミング次第では、11になるはずが1に戻ってしまう！</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>見ての通り、両方のテストが <code>my-game</code> プロジェクトの Firestore の、ID: <code>target-character-id</code> のドキュメントを更新してしまっています。<br />
これらのテストコードを並列で実行した場合、<strong>キャラクターが転職したのにレベルが1に戻らない</strong>、<strong>キャラクターがレベルアップしたはずなのになぜかレベル1に戻ってしまう</strong>など予期せぬ状態になってしまい、
テストが落ちてしまう可能性があります。</p>

<p>この状態ではテストコードが信用できないので、テストごとに向き先プロジェクトを変えてこの問題を解決していきます。</p>

<h1>データ競合解決後の構成</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png" alt="f:id:len_prog:20210705113933p:plain:w500" width="1200" height="779" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>上図②③のようにテストごとに接続先プロジェクトを独立させることで、他のテストとの並列実行が原因のデータ競合を防ぐことができます。<br />
具体的には、以下のように <code>admin.initializeApp()</code>の第一引数に他のテストと重複しないプロジェクトID を渡すようにします。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-job-change-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">//  図の②に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-level-up-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">// 図の③に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>変更後のコードの全体像は以下のようになります。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterJobChangeUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-job-change-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">//  図の②に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// ここから下は構成変更前のコードと同じ</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterJobChangeUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterJobChangeUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>
    <span class="synStatement">const</span> jobChangedCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>jobChangedCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">1</span><span class="synStatement">);</span> <span class="synComment">// 転職するとレベルが1に戻ることを検証できるようになった</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterLevelUpUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-level-up-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">// 図の③に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// ここから下は構成変更前のコードと同じ</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterLevelUpUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterLevelUpUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>
    <span class="synStatement">const</span> grownCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>grownCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">11</span><span class="synStatement">);</span> <span class="synComment">// レベルアップした場合にレベルが1上がることを検証できるようになった</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>このようにテストごとに向き先プロジェクトを変えることで、それぞれのテストで担保したいことをちゃんと担保できるようになります。</p>

<h1>ちょっと微妙な点</h1>

<p>上記の方法でテストごとに独立した環境の Firestore を操作できるようになり、データ競合を防げるようになりました。</p>

<p>しかし、この方法にはひとつだけ微妙な点があります。<br />
問題の説明のために、先程掲載した<code>競合解決後の構成図</code>を再掲します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png" alt="f:id:len_prog:20210705113933p:plain:w500" width="1200" height="779" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>上図①の接続先は、<code>$ firebase use</code> で指定したプロジェクトか、<code>$ firebase emulators:start</code> に <code>--project</code>を渡した場合にはそのプロジェクトになり、そのほかの方法で変えることは今のところできないようです。</p>

<p>そのため、プロジェクトをテストごとに分けた場合、上図②③のテスト中にテスト自体は動くものの、Firebase Emulator の UI からデータの内容を見ることはできなくなります。</p>

<p>一応、接続先を <code>$ firebase use</code> で指定しているものに切り替えるようコードを書き換えたりすればデバッグはできますが、
いちいち書き換えの手間が生じるので若干面倒です。</p>

<p>また、これは Firebase Enulator の UI で立ち上がっているすべてのプロジェクトの Firestore を見られるようになれば解決する問題ではあり、実際に <a href="https://github.com/firebase/firebase-tools-ui">firebase/firebase-tools-ui</a> リポジトリに <a href="https://github.com/firebase/firebase-tools-ui/issues/281">issue</a> も立っていますが、すぐに対応が終わりそうには見えない状況なので、しばらくは不便な状況が続くことが予想されます。</p>

<h1>所感</h1>

<p>Firebase は便利ですが、当然ながら全くハマらずに開発できる銀の弾丸ではないですね。<br />
しかし、基本的には便利でドキュメントもそれなりに読みやすく、個人的には使っていて満足感があります。</p>

<p>今後も日々の開発で得た Firebase や GCP 周りの TIPS を書いていけたらと思っておりますので、よろしくお願いいたします 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apple Silicon Mac で複数 Terraform バージョンを管理するために asdf-terraform-build を作った]]></title>
        <id>https://blog.tsub.me/post/create-asdf-terraform-build/</id>
        <link href="https://blog.tsub.me/post/create-asdf-terraform-build/"/>
        <updated>2021-06-19T08:41:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/tsub/asdf-terraform-build"><img src="https://gh-card.dev/repos/tsub/asdf-terraform-build.svg?fullname=" alt="tsub/asdf-terraform-build - GitHub" /></a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[一年間の育休から復帰しました]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/16/120000</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/16/120000"/>
        <updated>2021-06-16T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、インフラエンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。実は去年の 1 月から 1 年間育休を取っており、今年の 1 月から復帰していました。</p>

<p>復帰してから記事を書くのが遅くなってしまいましたが、社内勉強会で話したスライドや育休から復帰してみてどうだったかをまとめてみました。</p>

<h2>社内勉強会で話した</h2>

<p>今年の 3 月頃に社内の技術勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で発表しました。
(技術勉強会という立て付けですが、技術に限らず本人が話したいことを話して良い場です)</p>

<script async class="speakerdeck-embed" data-id="e196f600db8d42c4841227d36b76f3b5" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>なぜ一年間の育休を取得したのか、育児の知見などがスライド内に書いてありますので気になる方はご覧ください！</p>

<p>ちなみに当時のスライド内ではねんねトレーニング (ネントレ) をやっていると書いてありますが、実は現在はやってません。</p>

<p>理由はネントレの効果が見られなくなったためです。</p>

<p>今年の 4 月くらいから寝付きが悪くなり、胸や背中をトントンしないと寝てくれなくなってしまいました。</p>

<p>それ以降夜通し寝てくれないことも増えてしまい、再度ネントレにチャレンジしましたが夜泣きは改善されなかったため、夜泣きの原因は寝かしつけ方法と直接関係ないのでは？と思いネントレをやめました。</p>

<p>ちょうどその頃から奥歯が生え始めていたので、それが原因だったのではないかとは思っています。</p>

<p>ここ最近は歯の痛みが落ち着いたのか、夜泣きが少し減ってきたような気がします。と思ってたらまた夜泣きが復活しました... 😭</p>

<p>やっぱりセルフねんねしてくれてた頃と比べて寝かしつけにかかる時間は増えましたが...</p>

<p>寝かしつけで悩んでいる方にとって少しでも参考になれば幸いです。
(自分はめっちゃ悩んだ)</p>

<h2>育休から復帰した感想</h2>

<p>スライド内でも触れていましたが、やはり一番感じたことは一年間というそれなりに長い期間にも関わらず、普段有給を取るのとそこまで大きく変わらないくらいの感覚でした。</p>

<p>もちろん育休を取るという話をしてからチーム内での調整は行いましたが、取得する障壁は特にありませんでした。
チームメンバーも育休は取得する前提で育休期間中はどう進めていくのか、という話にフォーカスしている印象でした。</p>

<p>そして、一年間の育休を終えて復帰する際にもすんなり業務に戻ることができました。</p>

<p>人事やチームメンバーが自分の育休中の変化を事前に記事にまとめてくれていたこともあり、キャッチアップも大体 2 週間くらいで完了しました。</p>

<p>復帰がスムーズにいった理由の 1 つにチーム体制や使用技術に大きな変化がなかったことも大きいと思います。</p>

<p>以下の記事でも軽く触れていますので良ければご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn98075add5154" title="「謙虚な人が多い」「有休みたいに育休がとれる」エンジニアが語る、フィードフォースのぶっちゃけ裏話｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<h2>働き方の変化</h2>

<p>育休取得前後 (子どもが生まれる前後) での大きな変化の 1 つとして、働き方がかなり変わりました。</p>

<p>子どもが生まれる前は 10:00 ~ 19:00 で働いており、モチベーションや体力がある日は少し長めに働いたり、反対に効率の悪い日は早めに退勤したりという働き方をしていました。</p>

<p>子どもが生まれた後は保育園や子どもの就寝時間の都合で 8:00 ~ 17:00 で働くこととなり、保育園の送り迎えや夕飯の支度などがあるので長めに働くということができなくなりました。</p>

<p>また、プライベートの時間で技術的な勉強をやることもほとんどなくなってしまいました。</p>

<p>やる時間が全くないわけではないのですが、ゲームなどでリフレッシュしないと育児疲れが厳しいのと、まとまった時間が取りづらいのが理由です。</p>

<p>子どもが起きている間はなかなか PC を広げて作業しづらいですし、寝ている間も夜泣きなどでいつ泣くか分からないので集中して作業ができないです。</p>

<p>とはいえプライベートで開発する時間を取れなくても個人的にはそこまでストレスになっていなくて、今はそういう時期と割り切っています。</p>

<p>また仕事で直接使えるような技術の検証であれば、チームの計画に入れて業務時間内で進められるのでなんとかなっています。</p>

<h2>終わりに</h2>

<p>育休から復帰してまだ半年程度なので育児もまだまだこれからという感じですが、仕事との両立を引き続き頑張っていきたいと思います 💪</p>

<p>ちなみに自分が育休から復帰した前後で他のエンジニアも育休を取得していました。よければこちらの記事もぜひご覧ください！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn6cf3af35cb86" title="「家庭あっての職業人」限られた時間で成果を出すためにパパエンジニアが取り組んでいること｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『ここがつらいよ普段使いのLinux』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/11/180000</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/11/180000"/>
        <updated>2021-06-11T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。いよいよ明後日は <a href="https://jp.rizinff.com/_ct/17440570">RIZIN.28</a> ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。</p>

<p>本日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTBXZg9pczERJABgT3Uuu922Ktcc91HHl00QOtySt7fFtxrL4NZOcco1BtkK_pDuFkO0Uo-JuAwBkoC/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。</p>

<p>そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。</p>

<p>数々の諸問題が発生しましたが、無事全部解決（？）したお話です。</p>

<ul>
<li>キーボードショートカットがつらい</li>
<li>タッチパッドがつらい</li>
<li>指紋認証出来なくてつらい</li>
<li>たまにスリープから復帰しなくてつらい（一番つらい）</li>
<li>ちょっとした画像編集に GIMP を使うのはつらい</li>
</ul>


<p>みんなも Mac を捨てて Linux を使うといいと思うよ！</p>

<p>それでは！</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg" class="hatena-asin-detail-image" alt="だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス" title="だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" target="_blank" rel="noopener">だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%20%C5%AF%BA%C8" class="keyword">鈴木 哲哉</a></li><li>オーエス出版</li></ul><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021年夏】半期に1度の Engineer’s Principles Award 受賞者を紹介します]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/11/164253</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/11/164253"/>
        <updated>2021-06-11T07:42:53.000Z</updated>
        <summary type="html"><![CDATA[<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/f/feedforce_recruit/20210611/20210611163915.jpg" alt="f:id:feedforce_recruit:20210611163915j:plain" width="1200" height="700" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>こんにちは。人事の今岡と申します。
2021年もあっという間に6月ですね。</p>

<p>フィードフォースでは先日オンライン納会が開催され、半期に一度の「Engineer’s Principles Award 2021 Summer」の受賞者が発表されました。
今回アワードを受賞した開発メンバーと表彰内容をご紹介します。</p>

<p>前回の表彰者紹介はコチラ</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F28%2F131042" title="半期に1度の Engineer’s Principles Award 受賞者を紹介します - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2020/12/28/131042">developer.feedforce.jp</a></cite></p>

<h2>Engineer’s Principles Award とは</h2>

<p>Engineer’s Principles とは、フィードフォースの開発メンバー向けに現場が主体となって設定した、5つの行動指針です。
半期に一度、開発メンバー同士で投票を行い、行動指針の項目ごとに最も体現しているメンバーが選ばれ表彰されます。</p>

<p>Engineer’s Principles についてはこちら</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fnd1f2236470b3" title="フィードフォースが目指すエンジニア像とは。「Engineer’s Principles」を紹介します｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/nd1f2236470b3">media.feedforce.jp</a></cite></p>

<h2>受賞者紹介</h2>

<p>※表彰コメントは本来社内向けのものであるため一部変更させていただいています。受賞者によって各種アカウントを載せています。</p>

<h3>🏆「Stay Humble; 常に謙虚であるべし」受賞者</h3>

<h4>@len_prog さん</h4>

<p>表彰コメント：<br />
社内でメジャーな Rails 以外でバックエンドを実装する際に、なぜそうするのかという理由やレイヤーの切り方を他のメンバーにわかりやすく説明していました。
一方、自分自身で苦手なことがあった場合に、他の人に相談したり、フィードバックを求めそれを受け入れる姿勢は、まさに Stay Humble だと思いました。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/len_prog">Len (@len_prog)</a> , <i class="blogicon-entry"></i> <a href="https://len-prog.hatenablog.com/">Blog</a></p>

<h4>@katsunn さん</h4>

<p>表彰コメント：<br />
事前に色々なアイデアを用意しつつも、相談の過程でお互いの認識や意図を踏まえたうえで改善を進めていく一方、ただ受け入れるだけではなく、
プロフェッショナルとして自分なりに咀嚼したアウトプットにしていく姿勢が非常に素晴らしく、ベンチマークにすべきだと感じました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/nomo_017">のもち(@nomo_017)</a></p>

<h3>🏆「Be Positive &amp; Proactive; 常に肯定的・主体的であるべし」受賞者</h3>

<h4>@sukechannnn さん</h4>

<p>表彰コメント：<br />
エンジニアとして様々なチームビルディングや開発手法を試しているだけではなく、ビジネス視点からも方向性を考え、
プロダクトオーナーとしてプロダクトを成長させようとしている姿勢は、まさにこの言葉にぴったりだと思います。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/sukechannnn"> sukechannnn (@sukechannnn)</a> , <i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/sukechannnn">sukechannnn</a></p>

<h4>@daido1976 さん</h4>

<p>表彰コメント：<br />
分野を問わず新しいことに前向きに挑戦し、気になったことはどんどん質問するのに加え、
育休中のメンバーに代わって、率先してチームを引っ張っている行動力が素晴らしいと思いました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/daido1976">Daido Shota (@daido1976)</a> , <i class="fa fa-github" aria-hidden="true"></i>  <a href="https://github.com/daido1976"> daido1976</a></p>

<h3>🏆「Be Prepared; 常に来たるべき機会に備えるべし」受賞者</h3>

<h4>@daido1976 さん</h4>

<p>表彰コメント：<br />
自分のキャリアや目指すべき方向を踏まえつつ、常にアンテナを立てて知識を広く持とうとしている姿勢がよいと感じています。
さらに、そうして蓄積したスキルを開発だけではなく、自ら手を挙げ講師をつとめた新卒向け Web 研修にも活かしている点がまさに Be Prepared だと思いました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/daido1976">Daido Shota (@daido1976)</a> , <i class="fa fa-github" aria-hidden="true"></i>  <a href="https://github.com/daido1976"> daido1976</a></p>

<h4>@namikingsoft さん</h4>

<p>表彰コメント：<br />
Omni Hub の開発において、あまり開発経験がなかったはずの Rust を使いこなしつつ WAF を含めたインフラ構築をしていて、
@namikingsoft さんの強みが発揮される局面でした。また dfplus.io でもパフォーマンス改善でコアな知識を活かすなど、まさにこれまでの準備の賜物だと思います。</p>

<p><i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/namikingsoft">namikingsoft</a></p>

<h3>🏆「Share All; 己の知見、試行、失敗、遍く共有すべし」受賞者</h3>

<h4>@masutaka さん</h4>

<p>表彰コメント：<br />
Looker 導入において知見や失敗など社内共有しているほか、そもそも  esa にどう記録すべきかといった、「共有のための知見の共有」にまで配慮しています。
Slack や esa 、Blog への共有はエンジニアのみならず、全社的にプラスの影響を与えていて、まさに共有の神様と言えるでしょう。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/masutaka">Takashi Masuda (@masutaka)</a> , <i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/masutaka">masutaka</a> , <i class="blogicon-entry"></i> <a href="https://masutaka.net/">Blog</a></p>

<h4>@kogai さん</h4>

<p>表彰コメント：<br />
Shopify 周りでは、社内だけでなく社外に対してのプレゼンスを示しています。また Omni Hub の開発で多忙な中、
社内勉強会 Rust の会では実際の新規事業のプロダクトコードを題材に実践的な知見を共有するなど、その共有力はフィードフォースエンジニアの鑑（かがみ）だと思います。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/iamchawan">茶碗 (@iamchawan)</a> ,<i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/kogai">kogai</a> , <i class="blogicon-entry"></i> <a href="https://k9bookshelf.com/blogs/development">Blog</a></p>

<h3>🏆「Just Do It; 全力でやりきるべし」受賞者</h3>

<h4>@namikingsoftさん</h4>

<p>表彰コメント：<br />
Omni  Hub リリースまでの道筋をきちんと立ててスケジュール以上の速さで完走して去っていくその姿は、まさに Just Do It でした。</p>

<p><i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/namikingsoft">namikingsoft</a></p>

<h2>周囲の賞賛・承認を共有するよい機会に</h2>

<p>以上、延べ9名の受賞者でした。</p>

<p>表彰コメントは、<strong>開発メンバー同士の投票時に自由記述できるコメントがもとになっているので</strong>、周囲からの賞賛・承認の声を全社で共有できるよい機会となっています。</p>

<p>前回に引き続き連続受賞しているメンバーもいますが、投票コメントには毎回違ったエピソードが集まっており、日ごろから継続的に実践をしているからこそ周りのエンジニアの目に留まるのだと感じました。</p>

<p>受賞者のみなさん、おめでとうございました！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dependabot の Terraform 1.0 対応が完了した件]]></title>
        <id>https://masutaka.net/chalow/2021-06-10-1.html</id>
        <link href="https://masutaka.net/chalow/2021-06-10-1.html"/>
        <updated>2021-06-10T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[[2021-05-27-1] のつづき。この間に 1.0 がリリースされてましたね。先ほど、Lockfile (.terraform.lock.hcl) の対応が完了したそうです。https://github.com/dependabot/dependabot-core/issues/1176#issuecomment-858490407これで Dependabot での terraform 対応が完了しました。・terraform version は自動更新できない・provider version を自動更新できる。その際、.terraform.lock.hcl も更新されるはず・以前の Dependabot で対応されていた module version はどうなんだろう？使ってないので分からないdependabot.yml のドキュメントはこちら。circleci-tfupdate-orb はそろそろアーカイブしたいな。でも Dependabot だと terraform version は更新出来ないんだよね...。追記(2021-06-11):公式でもアナウンスされてました。Dependabot now supports Terraform 1.0｜GitHub Changelog]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[プランニングの難しさを乗り越えて...スクラム開発が良い感じになった話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/05/31/104813</id>
        <link href="https://developer.feedforce.jp/entry/2021/05/31/104813"/>
        <updated>2021-05-31T01:48:13.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。フィードフォースの <a href="https://ecbooster.jp/">EC Booster</a> チームで開発（主にプロダクトオーナー）をしている <a href="https://twitter.com/sukechannnn">@sukechannnn</a> です。元々ずっとバックエンドエンジニアでしたが、最近プロダクトオーナーをやるようになりました（理由はのちほど！）。</p>

<p>昨年のアドベントカレンダーで <a href="https://developer.feedforce.jp/entry/2020/12/11/172338">半年モブプロしたらチームが大きく成長した話</a> というブログを書いたのですが、2021年3月から <strong>モブプロを取り入れたスクラム開発</strong> をしています。それに伴って、"モブプロ" と "個人タスク⇢レビュー" の両軸で開発するようになりました（<a href="https://prtimes.jp/main/html/rd/p/000000040.000071307.html">先日リリースしたカイゼンカード</a> はスクラムで開発しました）。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F11%2F172338" title="半年モブプロしたらチームが大きく成長した話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>今は良い感じに回っていますが、そうなるまでに色々と試行錯誤したので、そこで得た学びをお伝えできればと思います。全員リモートワークで開発するなら、モブプロを取り入れたスクラムはおすすめです！</p>

<ul class="table-of-contents">
    <li><a href="#モブプロの良さと難しさ">モブプロの良さと難しさ</a></li>
    <li><a href="#そうだスクラムしよう">そうだ、スクラムしよう！</a></li>
    <li><a href="#プランニングが終わらない問題">プランニングが終わらない問題</a></li>
    <li><a href="#原因はissue-が散らかっていることだった">原因は「issue が散らかっていること」だった</a></li>
    <li><a href="#issue-をグルーピング優先順位はそれぞれで">issue をグルーピング、優先順位はそれぞれで</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="モブプロの良さと難しさ">モブプロの良さと難しさ</h2>

<p>モブプロ中心の開発を初めた当初は、以下の利点を感じていました。</p>

<ul>
<li>ドメイン知識の共有がしやすい</li>
<li>コンテキストの共有がしやすい（"何をどう作るか" という議論もしやすい）</li>
<li>レビューが要らない</li>
<li>リモートワークでもさみしくない（だいじ）</li>
</ul>


<p>しばらくモブプロを続ける中で、開発メンバー全員がドメイン知識やフロント〜バックエンド全体の技術的な知識を共有している状態になりました。なので、なにか悩みがあってモブプロで共有すると「わかる〜」となるし、何より単純に仲良くなったと思います（ﾖｼｯ!!）。</p>

<p>一方で、だんだんと <strong>モブプロだけ</strong> の開発が窮屈になってきました。</p>

<ul>
<li>知識の共有が進んできて "全員でやらなくても良くない？" というタスクが増えてきた</li>
<li>個人でじっくり考えた方が良いタスクもあるのが分かった（新しい技術の調査、設計の見直しなど）</li>
</ul>


<p>これはチームが成長したことで出てきた嬉しい悩みなのですが、とはいえ完全にモブプロを辞めるのも上述したメリットを失いそうで怖い...。チーム全員で「今後どう開発していこう？」というのを話し合い、<strong>モブプロを取り入れたスクラム開発</strong> を試してみることにしました。</p>

<h2 id="そうだスクラムしよう">そうだ、スクラムしよう！</h2>

<p>スクラム開発をしようと思ったのは、ストーリーポイント<a href="#f-9495249b" name="fn-9495249b" title="ストーリーポイント：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる">*1</a>で見積もって <strong>ベロシティ<a href="#f-33d76d3d" name="fn-33d76d3d" title="ベロシティ：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと">*2</a>を測りたい</strong> という別の目的もありました。</p>

<p>モブプロで開発していると新機能のメイン開発は着実に進んでいくのですが、それ以外の細かいタスク（主に保守系）が見積もりづらい状況で、空いた時間にやるという形になってしまっていました（それ用に時間は設けていましたが）。</p>

<p>モブプロ以外の個人タスクを計画的にやりたい、見積もりもしっかりやりたい、ということで、スクラムを導入することで、<strong>モブプロと個人開発のいいとこ取り</strong> をしようと考えました。</p>

<ul>
<li>新機能開発などのコンテキストの共有が重要なタスクは引き続きモブプロでやる

<ul>
<li>ストーリーポイントで見積もる</li>
</ul>
</li>
<li>それ以外は個人タスクとして各自で進められるように、プランニングでしっかり整理する

<ul>
<li>個人タスクもストーリーポイントで見積もる</li>
</ul>
</li>
<li>全てのタスクをストーリーポイントで見積もるのでベロシティが測れるようになる

<ul>
<li>振り返りで見積もりの精度を上げられる</li>
</ul>
</li>
</ul>


<p>めっちゃ良さそう...そう思っていざやってみたところ、１つ大きな壁にぶち当たってしまいました。</p>

<h2 id="プランニングが終わらない問題">プランニングが終わらない問題</h2>

<p><a href="https://www.shoeisha.co.jp/book/detail/9784798130507">エッセンシャルスクラム</a>にもある通り、１週間のプランニングに２時間以上かけるべきではありません。僕らは「１スプリント=１週間」で回しているため、２時間の予定で始めたプランニングですが、これが終わらない...。最初から何回かは４時間以上かかり、全員ヘトヘトになってしまいました。</p>

<p>モブプロはプランニングが簡単です。全員やることが同じなので、基本的にタスクが直列で繋がっていきます。そのため「今スプリントはここから⇢ここまで」という感じで Sprint Backlog 的なものを決めることができました。</p>

<p>しかし、スクラムの見積もりはもっと横断的なものです。単純に、今取り組んでいるものだけ見れば良いのではなく、これから取り組むものをたくさんある issue から選ぶ必要があります。そう、この <strong>たくさんある issue の中から今スプリントにやるタスクを選ぶこと</strong> に時間がかかってしまうのです。</p>

<p>以前にもスクラム開発を試したことがあるのですが、その時もこれが原因でプランニングがとても大変でした。気にするトピックが多すぎてだんだん何について議論してるか分からなくなり、空中戦になってしまうんですよね...。</p>

<p>その原因は、主に以下の２つでした。</p>

<ul>
<li>バックログの整理/管理に責任を持つ人（プロダクトオーナー<a href="#f-339964b7" name="fn-339964b7" title="プロダクトオーナー：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）">*3</a>）がいなかった</li>
<li>issue の数と種類が多く、バックログリファインメント<a href="#f-f2375d03" name="fn-f2375d03" title="バックログリファインメント：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと">*4</a>をしても整理しきれなかった</li>
</ul>


<p>プロダクトオーナー不在の問題は、元々それっぽいことをしていた僕が、改めてプロダクトオーナーやりますと手を上げ、バックログ管理の責任を持つことになりました。</p>

<p>それでも、バックログリファインメントが上手く行かない問題は残っていました。リファインメントの概念は理解していて、しっかり時間も取っていたのに、いざプランニングをすると色々な issue を見すぎて伸びてしまう...。過去に何度も直面したこの問題に、改めて取り組むことにしました。</p>

<h2 id="原因はissue-が散らかっていることだった">原因は「issue が散らかっていること」だった</h2>

<p>僕たちが開発している EC Booster は、ショッピング広告の自動運用やデータフィードの更新など、様々なジョブが裏で動いています。そのため、運用作業が日々発生し、運用の中で見つかる例外ケースやバグの修正が多々あります。
また、フロントエンドとバックエンドを全員が開発するため、１つのリポジトリで管理していることもあり、色々な種類の issue が１つのレーンに入り乱れてしまっていました。</p>

<p>そのため、優先順位を付けるのも難しく、また「次スプリントで何をどこまでやるか？」を判断するのが難しくなってしまっていました。</p>

<p>プロダクトバックログを整理しなければ、というのは分かっているのですが、スクラムに関する本やブログには整理の方法は書いてありません。どうやって整理したら分かりやすくなるかな...と考えていたところ、同僚が共有してくれた以下の記事が参考になりました。</p>

<p><a href="https://note.com/gonjyu/n/nd7bf3efa0728">エンジニア歴17年の俺が、事業系の開発タスクをバンバン投げてくる非エンジニアに、保守の必要性を死ぬほど分かりやすく説明する。</a></p>

<p>この記事の中で「issueには "種類" がある」と言っていて、issue の種類別に整理された図が載っていました。これだ...！</p>

<h2 id="issue-をグルーピング優先順位はそれぞれで">issue をグルーピング、優先順位はそれぞれで</h2>

<p>上記の記事を参考に、issue を <strong>新機能開発</strong>、<strong>バグ修正/運用改善</strong>、<strong>ライブラリーアップデート</strong> に分けて、それぞれのレーンで優先順位を付けるようにしました。</p>

<p><figure class="figure-image figure-image-fotolife" title="issue をグルーピング、優先順位はそれぞれで"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526215948.png" alt="f:id:sukechannnn:20210526215948p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>issue をグルーピング、優先順位はそれぞれで</figcaption></figure></p>

<p>issue の種類が同じなので、優先順位を付けるのは簡単です。さらに、スプリントバックログに入れるタスクを <strong>新機能開発：運用系 = ６：４</strong> の割合にする、という決めを作りました。さらに、何回かスプリントを回してベロシティも見えてきました。</p>

<p>ここまで情報が揃うと <strong>次のスプリントで何をやるか決める基準</strong> ができてきます。</p>

<p>そもそもの「次のプランニングでどの issue について話すか？」というのも、それぞれのレーンで優先順位が高い issue を６：４のバランスとベロシティを参考に選べるようになりました。<strong>プランニングの前</strong>にプロダクトオーナーが（開発チームと協力しながら）当たりを付けておくことで、プランニングで話すトピックを事前に共有できるようになり、開発メンバーそれぞれが事前に頭を整理しておくこともできるようになりました。</p>

<p>これにより、プランニングがかなりスムーズに進むようになったので、いよいよスクラムが回り始めました。新機能開発はモブプロの同期的な開発で、それ以外のタスクは個人タスク⇢レビューという非同期な開発で進められるようになり、デリバリーの最大化を目指しつつ、個人の稼働率も上げられるようになりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526212511.png" alt="f:id:sukechannnn:20210526212511p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい</figcaption></figure></p>

<h2 id="まとめ">まとめ</h2>

<p>issue をグルーピングしそれぞれで優先順位を付けたことで、プランニングが時間内に収まるようになっただけでなく、プランニングで話すトピックを絞ったことでより深い議論をすることができるようになりました。今は「モブプロを取り入れたスクラム」がとても良い感じに回っています！</p>

<p>↓ EC Booster チームでの「スプリントの回し方」資料を公開しているので、気になった方はぜひ見てみてください！（もっとこうしたら良いよ！という助言などあれば頂けると嬉しいです！）</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTQY639rUAwDDtLfj_c9WbU1E0IlDSFzAbrP-XFCmbg8V_sNKPX_pCvKpiy50CQpS02nXvZnQHBb6JT/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>こんな感じ開発している EC Booster ですが、ただ今 <strong>バックエンド（Ruby, Rails）が得意なエンジニアを猛烈に必要としています！！！</strong></p>

<p>もしちょっっっとでも興味があれば、 <strong>僕とお話しましょう！</strong> 以下から気軽に応募してください！
<a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/19785">https://open.talentio.com/1/c/feedforce/requisitions/detail/19785</a></p>

<p>最後まで読んでいただき、ありがとうございました！</p>
<div class="footnote">
<p class="footnote"><a href="#fn-9495249b" name="f-9495249b" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/3716">ストーリーポイント</a>：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる</span></p>
<p class="footnote"><a href="#fn-33d76d3d" name="f-33d76d3d" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/4802">ベロシティ</a>：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと</span></p>
<p class="footnote"><a href="#fn-339964b7" name="f-339964b7" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/7143">プロダクトオーナー</a>：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）</span></p>
<p class="footnote"><a href="#fn-f2375d03" name="f-f2375d03" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/5024">バックログリファインメント</a>：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[暑がりの私にはマスクチェーンがとても合ってる]]></title>
        <id>https://masutaka.net/chalow/2021-05-30-1.html</id>
        <link href="https://masutaka.net/chalow/2021-05-30-1.html"/>
        <updated>2021-05-30T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[去年の秋くらいからマスクチェーン（ストラップ）を使っています。私はとても暑がりなのと、マスクの着用感が好きではないので、かなり重宝しています。どのくらい暑がりかと言うと、中学生の時は暑くない水泳部に入ったり、毎日スーツを着る会社には絶対に入社しなかったり、今の会社が上場した時も暑かったので（スーツが必要な）東証には行かなかったり、まあそんな感じです。外に出た時にスッと外せるのがとても良いです。店で...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dependabot の Terraform 0.15 対応が進んでいる件]]></title>
        <id>https://masutaka.net/chalow/2021-05-27-1.html</id>
        <link href="https://masutaka.net/chalow/2021-05-27-1.html"/>
        <updated>2021-05-27T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[最近この Issue が活発になってきました。Terraform 0.15 support · Issue #1176 · dependabot/dependabot-core実はプロバイダーバージョンのアップデートだけならもう使えます。・プロバイダーバージョンのアップデートはもう動く・↑の後に必要な .terraform.lock.hcl の更新は実装中とのこと。現在は手動で "$ terraform init -upgrade" が必要・terraform バージョンのアップデートはロードマップに含まれていない↓プライベートリポジトリで動いている様子。[dependabot terraform1][dependabot terraform2]dependabot.yml のドキュメントはここにあるので、試してみるのも良いかもしれません。↓このブログが置いてあるリポジトリの .github/dependabot.yml です。daily はやり過ぎなのであとで減らそう。version: 2updates: - package-ecosystem: "terraform" directory: "/terraform/aws" schedule: interval: "daily" time: "12:00" timezone: "Asia/Tokyo" assignees: - "masutaka" open-pull-requests-limit: 10 - package-ecosystem: "terraform" directory: "/terraform/heroku" schedule: interval: "daily" time: "12:00" timezone: "Asia/Tokyo" assignees: - "masutaka" open-pull-requests-limit: 10今までの経緯とかTerraform 0.11 まで、Dependabot はモジュールのアップデートだけ対応していました。https://dependabot.com/docs/config-file/ でその痕跡を確認できます。※ Dependabot は GitHub に統合されたので、https://dependabot.com はもう古いです。ですが、Terraform 0.12 で HCL2 が導入されてから、全く動かなくなりました。前述の Issue も要望の嵐。@minamijoyo が tfupdate を作ってくれたので、私もその CircleCI Orb を作ってみるなど。※ 現在この Orb は terraform 本体とプロバイダーバージョンのアップデートのみ対応しています。terraform.lock.hcl の更新には対応していないので、手動で $ terraform init -upgrade が必要です。https://github.com/minamijoyo/tfupdate-circleci-example のサンプルコードは対応しているみたいです。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアキャリアパスをアップデートしました]]></title>
        <id>https://developer.feedforce.jp/entry/career_path_revised_2021</id>
        <link href="https://developer.feedforce.jp/entry/career_path_revised_2021"/>
        <updated>2021-05-24T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="https://twitter.com/meihong">meihong</a> です。</p>

<p>株式会社フィードフォースでは<a href="https://media.feedforce.jp/n/nc7a2e89635eb">定期評価ではなく本人の希望するタイミングで評価を行う制度</a>を導入しています。具体的には、各等級ごとに満たすべき基準・条件、またはスキルがあらかじめ提示されており、それを満たしていれば次の等級に進める制度になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn222a08fd3e2b" title="半年に1回の評価制度を毎月の評価制度に変えた話｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n222a08fd3e2b">media.feedforce.jp</a></cite></p>

<p>この基準やスキルを私たちはキャリアパスと呼んでいますが、今回、エンジニアのキャリアパスをアップデートしましたのでご紹介したいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524010544.png" alt="f:id:meihong:20210524010544p:plain" width="1200" height="630" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2>なぜキャリアパスをアップデートしたのか</h2>

<p>もともとのキャリアパスは<a href="https://media.feedforce.jp/n/n222a08fd3e2b">導入当初に設計されたもの</a>をベースに、マネージャやエンジニア、新規事業向けエンジニアといった個々人の志向に応じて細分化されていました。</p>

<p>これはこれでよくできたものだったのですが、しばらく運用している中でいくつかの課題点を感じるようになってきました。
例えば、</p>

<ul>
<li>志向ごとに分かれすぎていて、志向を横断した動きが想定しづらくなった。</li>
<li>独り立ちと判断される等級であるメンバーとその一つ上のシニアの境界に「見えない高い壁」が存在するようになった。</li>
<li>シニア以上の等級になるとチームや会社を牽引することを求められ、技術をそれ以上深掘りすることに対して会社がどう考えているのかが見えづらくなった。</li>
</ul>


<p>といったところです。</p>

<p>特にキャリアパス全体として、職種問わず等級が上がれば上がるほどチームや会社への影響力が求められる設計になっています。</p>

<p>もちろんエンジニアも全体への影響力は持つべきなのですが、その持ち方は他の職種と異なり、技術力の広さ、深さといった持ち方もあるのではないかと考えるようになりました。</p>

<p>ここで、個人的にはプロフェッショナルとしてのスキルは体積であり、その底面積はスキルの幅広さだと考えています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210523/20210523235853.png" alt="f:id:meihong:20210523235853p:plain" width="1200" height="731" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>極端に底面積が狭いのはさすがに現時点では厳しいとは思いますが、</p>

<ul>
<li>底面積がそれなりである代わりに高さ(= 深さ)がある</li>
<li>底面積が広い (= 引き出しが多い) 反面高さはそこまででもない</li>
</ul>


<p>の両者は体積という意味では同じはずです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524000640.png" alt="f:id:meihong:20210524000640p:plain" width="1200" height="576" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>この両者が共存できる余地が欲しいと考えていました。</p>

<p>そんな中、弊社デザイナーのキャリアパスがアップデートされました。その中でも目を引いたのは、必須スキルと専門スキルという考え方です。</p>

<p>必須スキルはデザイナーとして必ず持っていて欲しいスキルである一方、専門スキルは本人の志向、特性に応じてピックアップできるというもので、大学の専攻を思い出す建て付けでした。</p>

<p><s>これをパクる</s>これにインスパイアされて、エンジニアのキャリアパスもアップデートすることにしました。</p>

<h2>どのように更新したのか</h2>

<p>結果から先にお伝えしておくと、大まかに以下のような方向性に改訂しました。</p>

<ul>
<li>志向ごとのキャリアパスは止めた。</li>
<li>旧来の「志向」を専門スキルに分解し、専門スキルの組み合わせで個々人の志向・特性を表現できるようにした。</li>
<li>等級が上がれば上がるほど満たすべき専門スキルの最低数が増えるようにした。</li>
</ul>


<p>その結果として、例えば</p>

<ul>
<li>バックエンドエンジニアに特化</li>
<li>フルスタックエンジニア</li>
<li>フルスタックな知識をベースに事業の 0 → 1 フェイズに参画できるエンジニア</li>
<li>カスタマーサクセスエンジニア</li>
<li>アジャイルコーチ</li>
</ul>


<p>といった、実際に社内に存在している各エンジニアの志向や得意なポイントを表現できるようになりました。</p>

<h2>産みの苦しみ</h2>

<p>ここに至るまでには色々な葛藤がありました。
社内の esa にキャリアパスを更新したいと宣言はしたものの、社内のエンジニア個々人の顔を思い浮かべつつ何を専門スキルとして設定するかを考えると想像以上に難しい問題だということに気付きました。</p>

<h3>必須スキルと専門スキル</h3>

<p>そもそも必須スキルと専門スキルとは何か、そこの定義から考えることにしました。</p>

<p>必須スキルとは文字通り、全てのエンジニアが共通に要求されるスキルセットのことです。どちらかというと「バックエンド」「フロントエンド」といった用語で定義されるスキルセットというよりも「フィードフォースに所属するエンジニアとしての振る舞い方」ではないでしょうか。</p>

<p>そう考えながら改訂前のキャリアパスを改めて眺めていると、改訂前のキャリアパスはその振る舞いを定義していることに気付きました。その結果、改訂前のキャリアパスが必須スキルのベースとなりました。</p>

<p>そうです、キャリアパスの改訂によって、より要求水準が上がったとも言えます。</p>

<p>一方、専門スキルは、本人の得意分野、志向、特性を定義するものです。
その志向・方向性で貢献するのであれば、各等級ごとにどの水準の成果を出すべきか。それを定義するものが専門スキルになります。</p>

<h3>専門スキルとはどうあるべきか</h3>

<p>本人の志向を定義するものが専門スキルと説明しましたが、例えばカスタマーサクセスエンジニアやエンジニアリングマネージャといった職種にしてもエンジニアの延長である以上はエンジニアとしての「共通言語」を身につけているべきです。</p>

<p>その「共通言語」とは、例えば設計力であったり、フロントエンドやバックエンドのスキルが該当します。</p>

<p>こういった知識を前提として例えば事業開発であったりチームビルディングを行うべきで、これらの知識がなければエンジニアとの「共通言語」を持っていないと判断せざるを得ません。</p>

<p>一方で、「フロントエンド力」と「バックエンド力」が同じくらい強いエンジニアというのは SSR エンジニアで、そうそう市場には存在しません。そこで、フルスタックとはいえどこかの分野に軸足を置くことができる制度というのも必須に感じました。</p>

<p>ただ、ここの軸足とはあくまでも「フロントエンド」「バックエンド」「インフラ」といった区分けで、エンジニアとしてコードを書き続ける選択をするのであれば、フロントエンド/バックエンド/インフラといった区分に関係なく設計力・実装力が担保されているべきでしょう。</p>

<h3>17 の専門スキル</h3>

<p>ここのバランス感が非常に難しい点でしたが、これを元に 17 の専門スキルを定義しました。
ただし、17 の専門スキルは完全に独立しているわけではなく、以下 6 つは本人の志向を定義するものとして、必ずどれか一つが必須選択としました。</p>

<ul>
<li>バックエンド</li>
<li>フロントエンド</li>
<li>データベース</li>
<li>基盤</li>
<li>カスタマーサクセス</li>
<li>組織支援</li>
</ul>


<p>さらに、上記のうち以下 4 つを選択した場合は「実装・設計」と呼ばれるスキルが必須となります。</p>

<ul>
<li>バックエンド</li>
<li>フロントエンド</li>
<li>データベース</li>
<li>基盤</li>
</ul>


<p>これにより、コードを書き続けるのであればただコードを書くだけでなく、実装力・設計力が要求される建て付けを実現しました。</p>

<p>また、詳細は省きますが、さらにいくつかの例外を設置することで、「全ての分野で等しく強い SSR なフルスタックエンジニア」が求められないようにしています。</p>

<hr />

<p>様々なエッジケースを考慮したせいでちょっと複雑になった感の否めない新しいキャリアパスですが、以前のものと比べるとその分より柔軟なものになったと思います。</p>

<p>今回は敢えて詳細を省きましたが、<a href="https://engineers.recruit.feedforce.jp/#entry">ご興味をお持ちいただけたら是非カジュアル面談でねっちょりとご説明します</a>！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ノートパソコンクーラーを買い替えた]]></title>
        <id>https://masutaka.net/chalow/2021-05-23-1.html</id>
        <link href="https://masutaka.net/chalow/2021-05-23-1.html"/>
        <updated>2021-05-23T14:59:59.000Z</updated>
        <summary type="html"><![CDATA[2 年使っていた冷却パッドが寿命っぽいので、エレコムのノートパソコンクーラーを買いました。心配していた冷却効果は申し分なく、ひとまずホッとしています。元々こちらの冷却パッドを使っていました。ゲーミング PC 向けみたいです。この動画お気に入りです。つい何度も見てしまう中毒性があります。少々デカイのが難点でしたが、冷却効果は申し分ありませんでした。ただ 2 年も使うとホコリが溜まってきます。分解は無理そう...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分を計算しよう]]></title>
        <id>https://developer.feedforce.jp/entry/2021/05/13/093842</id>
        <link href="https://developer.feedforce.jp/entry/2021/05/13/093842"/>
        <updated>2021-05-17T00:38:42.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　機械学習エンジニアの<a href="https://twitter.com/feed_yao">八百俊哉</a>です。</p>

<p>今回は複数媒体へ広告を出稿する際に、多くの方が悩まれるであろう「各媒体への予算配分」に関して有効な配分手法を紹介します。</p>

<p><strong>今回の記事で登場する広告用語</strong></p>

<ul>
<li>媒体・・・広告の配信先や配信手法</li>
<li>ROAS・・・広告経由で発生した売り上げを広告費用で割った値(広告の費用対効果)</li>
<li>CPA・・・1件のコンバージョン(目標)を獲得するのにかかった広告コスト</li>
</ul>


<h1>広告運用者が抱える課題とは？</h1>

<p>1つの媒体のみで運用している場合は別ですが、<strong>複数の媒体で広告配信を行っている場合は、どの媒体に対していくら予算を割り振れば良いのかわからない場合があると思います。</strong></p>

<p>過去の実績を元に成果が良い媒体に対して、多く予算を割り振れば良いことは理解しているものの、<strong>「どれくらい」「どの媒体から」予算を割り振れば良いのか</strong>は経験則や簡単な分析で決めている方も多いのではないでしょうか？</p>

<p>今回はこれらの課題を解決するために、<strong>数学的に根拠のある予算配分方法</strong>について紹介しようと思います。</p>

<p>まず今回の手法を紹介するにあたり、例題がある方が話が進めやすいので以下の広告運用者さんを例に考えます。</p>

<pre class="code" data-lang="" data-unlink>広告運用者○○さん

現在A,B,Cの３媒体で広告配信を行っています。

全体のROASを高めるために予算配分を見直したいと考えています。

３媒体での合計予算は3万円です。</pre>


<p>では、実際にどのようにして最適な予算を求めるのか見ていきましょう。</p>

<h1>過去の実績から各媒体の実績をシミュレーションします</h1>

<p>最初に過去の実績から各媒体での予算とROASの傾向を、式で表現します。</p>

<p>ここで<strong>ROASを最大化するということは、限られた予算の中で売り上げを最大化すると言い換えることができる</strong>ので、今回は <img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29" alt=" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)"/> を2次回帰で近似します。</p>

<p>今回の例だと媒体A,B,Cに対してそれぞれ近似式が用意できるので以下のように表現できます。(各媒体の予算を<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>とします)</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AA%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%0A" alt=" \displaystyle
A&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) = a_A x_1^2 + b_A x_1
"/>
</div>




<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AB%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%3D%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%0A" alt=" \displaystyle
B&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) = a_B x_2^2 + b_B x_2
"/>
</div>




<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AC%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%3D%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A" alt=" \displaystyle
C&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) = a_C x_3^2 + b_C x_3
"/>
</div>


<p><br>
予算が0円の時は、原点を通る(売り上げが0円)になるように切片は使用していないです。</p>

<h1>ラグランジュの未定乗数法を用いて最適な予算配分を見つける</h1>

<h2>ラグランジュの未定乗数法とは？</h2>

<p>ラグランジュの未定乗数法とは、</p>

<blockquote><p>束縛条件のもとで最適化を行うための数学的な方法である。いくつかの変数に対して、いくつかの関数の値を固定するという束縛条件のもとで、別のある1つの関数の極値を求める</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fja.wikipedia.org%2Fwiki%2F%25E3%2583%25A9%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25A5%25E3%2581%25AE%25E6%259C%25AA%25E5%25AE%259A%25E4%25B9%2597%25E6%2595%25B0%25E6%25B3%2595" title="ラグランジュの未定乗数法 - Wikipedia" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B0%E3%83%A9%E3%83%B3%E3%82%B8%E3%83%A5%E3%81%AE%E6%9C%AA%E5%AE%9A%E4%B9%97%E6%95%B0%E6%B3%95">ja.wikipedia.org</a></cite></p></blockquote>

<p>少し小難しく聞こえますが、今回の例題に当てはめて考えてみます。</p>

<pre class="code" data-lang="" data-unlink>いくつかの変数に対して(各媒体の予算)

いくつかの関数の値を固定する束縛条件(3媒体の総予算は3万円)

別のある関数の極値を求める(3媒体の売り上げが最大となるポイントを求める)</pre>


<p>ラグランジュの未定乗数法とは、上のような条件を満たす予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>を見つけてくれる手法です。</p>

<p>ラグランジュの未定乗数法では、媒体A,B,Cのそれぞれの<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29" alt=" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)"/> に対して<strong>近似式が二階微分可能である必要がある</strong>ため、今回の例では2次回帰で近似を行いました。</p>

<p>また今回は、<strong>3媒体の総予算(束縛条件)が広告によって全て使用される</strong>という仮説のもとで計算しています。予算を全て使わない場合は、計算が複雑になってしまうので今回は紹介しません。</p>

<h2>実際にどのように計算するのか検証します</h2>

<p>まず初めに束縛条件<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/> を定義します。今回の束縛条件は、それぞれの予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>を足し合わせたものが30000円になるということですので、以下のように書けます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%0Ax_1%20%2B%20x_2%20%2B%20x_3%20%3D%2030000%0A%5Ctag%7B1%7D%0A" alt=" 
x_1 + x_2 + x_3 = 30000
\tag{1}
"/></div>


<p><br>
ここで式(1)を変換し、<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20g%28x_1%2Cx_2%2Cx_3%29" alt=" g(x_1,x_2,x_3)"/>とおきます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0Ag%28x_1%2Cx_2%2Cx_3%29%20%3D%20x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%20%3D%200%0A" alt="
g(x_1,x_2,x_3) = x_1 + x_2 + x_3 - 30000 = 0
"/></div>


<p><br>
また、今回最大にしたい3媒体の総売り上げを<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29" alt=" f(x_1,x_2,x_3)"/>と置きます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%20f%28x_1%2Cx_2%2Cx_3%29%20%26%3D%20A%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%2B%20B%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%2B%20C%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%5C%5C%0A%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
 f(x_1,x_2,x_3) &amp;= A&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) + B&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) + C&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) \\
&amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3
\end{aligned}
"/></div>


<p><br>
ここで未定乗数<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Clambda%20" alt=" \lambda "/>と<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29%2Cg%28x_1%2Cx_2%2Cx_3%29" alt=" f(x_1,x_2,x_3),g(x_1,x_2,x_3)"/>を用いてラグランジュ関数<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20L" alt=" L"/>を作ります。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0AL%28x_1%2Cx_2%2Cx_3%2C%5Clambda%29%20%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%20-%20%5Clambda%20%28x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%29%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
L(x_1,x_2,x_3,\lambda) &amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3 - \lambda (x_1 + x_2 + x_3 - 30000)
\end{aligned}
"/></div>


<p><br>
それぞれの変数で偏微分すると以下のようになります。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_1%7D%20%26%3D%202%20a_A%20x_1%20%2B%20b_A%20-%20%5Clambda%20%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_2%7D%20%26%3D%202%20a_B%20x_2%20%2B%20b_B%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_3%7D%20%26%3D%202%20a_C%20x_3%20%2B%20b_C%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Clambda%7D%20%26%3D%20-%20x_1%20-%20x_2%20-%20x_3%20%2B%2030000%20%3D%200%5C%5C%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
\frac{\partial L}{\partial x_1} &amp;= 2 a_A x_1 + b_A - \lambda  = 0\\
\frac{\partial L}{\partial x_2} &amp;= 2 a_B x_2 + b_B - \lambda = 0\\
\frac{\partial L}{\partial x_3} &amp;= 2 a_C x_3 + b_C - \lambda = 0\\
\frac{\partial L}{\partial \lambda} &amp;= - x_1 - x_2 - x_3 + 30000 = 0\\
\end{aligned}
"/></div>


<p><br>
これら4変数の4元連立方程式を説くと、予算30000円で総売り上げが最大になる予算配分<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>が求まります。</p>

<p>今回は、ROASを最大化するための方法を紹介しましたがCPAを最小化する場合は2次回帰式を求める際に<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28cost%2Ccv%29" alt=" (cost,cv)"/>としてcvを最大化するようにラグランジュを適応することで求めることができます。</p>

<p>また今回の例では3媒体までの予算配分を計算しましたが、<strong>媒体数を増やしても計算速度が極端に遅くなることがない</strong>ところが今回の手法の良いところです。</p>

<h1>この手法の課題点</h1>

<p>ここまで「ネット広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分」を紹介しましたが、この手法には2つほど課題があります。</p>

<p>まず一つ目が、最適予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28x_1%2Cx_2%2Cx_3%29" alt=" (x_1,x_2,x_3)"/>にマイナスの結果が得られる可能性があるということです。売り上げを最大化しようとするあまり、もともとROASが低い媒体に対しては予算を割り振らずにマイナスの予算を割り振り、そのほかのROASが高い媒体により多くの予算を割り振ろうとしてしまうことが確認できています。</p>

<p>次に、媒体の周期性や外部要因を一切考慮していないということです。広告は少なからず外部要因によって成果が左右されますが、この手法では過去の実績のみを用いて最適予算を割り振るので外部要因は一切考慮されていないということに注意が必要です。</p>

<h1>まとめ</h1>

<p>いかがだったでしょうか。
今回は、ラグランジュの未定乗数法を用いて複数媒体への予算配分方法を紹介しました。流石に手作業では計算できないので私はpythonで上記の流れを実装しています。</p>

<p>ラグランジュの未定乗数法は、理系の方は大学の数学の講義で習っていたかもしれないです。私も大学の時に習いましたが、当時は何に使うのか一切わかりませんでした。社会人になって学生の時に学んだことが活用できると、学んだ甲斐があったと感じることができて良いです。</p>

<p>最後まで読んでいただきありがとうございます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus v2 を日本語化]]></title>
        <id>https://zenn.dev/tmd45/articles/docusaurus-config-lang-ja</id>
        <link href="https://zenn.dev/tmd45/articles/docusaurus-config-lang-ja"/>
        <updated>2021-05-01T09:30:35.000Z</updated>
        <summary type="html"><![CDATA[
Docusaurus 2.0.0-alpha.75 で確認しています。

多言語対応で記事を作成し、ヘッダーから言語選択する UI も標準で用意されている Docusaurus ですが、セットアップした状態（多言語対応化していない状態）では英語 lang="en" がデフォルトの言語となっています。

      
        
        &lt;!DOCTYPE html&gt;
&lt;html lang="en" data-theme="light" dir="ltr" data-react-helmet="lang,dir"&gt;


      
      日本...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ESP8266 で温湿度を測って、AWS IoT Core + Amplify でグラフにしてみる]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/28/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/28/110000"/>
        <updated>2021-04-28T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、ソーシャルPLUS チームの <a href="http://blog.hatena.ne.jp/mashabow/">id:mashabow</a> です。</p>

<p>社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> のネタとして、ESP8266 で Wi-Fi 温湿度センサーを作り、グラフ化してみました。普段はフロントエンドの開発をしているんですが、ちょっと別のことをやってみようかと思いまして。電子工作に入門して、AWS IoT Core とか AWS Amplify を使ってみた記録です。</p>

<ul>
<li>グラフ：<a href="https://main.dt7p4lkfvt2c8.amplifyapp.com/">https://main.dt7p4lkfvt2c8.amplifyapp.com/</a></li>
<li>リポジトリ：<a href="https://github.com/mashabow/uchino-sensors">https://github.com/mashabow/uchino-sensors</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20210426/20210426193800.png" alt="f:id:mashabow:20210426193800p:plain:w300" title="" class="hatena-fotolife" style="width:300px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20210426/20210426193805.png" alt="f:id:mashabow:20210426193805p:plain:w330" title="" class="hatena-fotolife" style="width:330px" itemprop="image"></span></p>

<p>詳しくはスライドをご覧ください。</p>

<script async class="speakerdeck-embed" data-id="92082383e7cc463dbb9ea18867036605" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>Q&amp;A</h2>

<p>勉強会で出た質問です。</p>

<ul>
<li>Q. Wi-Fi のパスワードってどうしてるんですか？

<ul>
<li>A. ESP8266 へ書き込むプログラムの中に、<a href="https://github.com/mashabow/uchino-sensors/blob/main/esp8266/src/secrets.h.template#L3-L4">そのまま埋め込んでいます</a>。</li>
</ul>
</li>
<li>Q. どれくらいのサイズのプログラムを書き込めるのかな

<ul>
<li>A. 今回は小さいプログラムなのであまり気にしていませんでしたが、<a href="https://www.mgo-tec.com/blog-entry-pointer-ini-arduino-esp8266.html#title04">ユーザーが使えるのは 50 KB 程度</a>らしいです。</li>
</ul>
</li>
<li>Q. すると timestamp は測定時点のものではないのか。数十ミリ秒くらいはズレているのかな

<ul>
<li>A. <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-functions.html#iot-function-timestamp">IoT Core のルールエンジンに届いた時刻</a>なので、正確ではないですね。10分間隔の測定で、かつセンサーの精度もそんなに無いので、まぁいいかなと。送信するメッセージに timestamp を入れるようにすればいい話ではあります（ESP8266 を書き変えるのが面倒だった 💦）。</li>
</ul>
</li>
<li>Q. AWS IoT Core とかってお高いんですか？

<ul>
<li>A. 個人で使う規模なら<a href="https://aws.amazon.com/jp/iot-core/pricing">激安</a>ですね 👀</li>
</ul>
</li>
<li>Q. 温度が急上昇してたら 119 しとけば良いですか？

<ul>
<li>A. よろしくおねがいします 🚒</li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>IoT っぽいものに初めて手を出してみたんですが、おもしろいですね。一番最初は用語も概念も調べ方もわからず、ネット上で情報収集しても「???」だったんですが、<a href="https://www.amazon.co.jp/dp/4789847047">本</a>を読んだら頭に入ってくるようになりました。</p>

<p>グラフも単なるグラフだろと思っていたんですが、自宅の実データをいざ視覚化してみると、自分だけにしか見えない様子ががいろいろ見えてきます。「あ、これ夕食を準備してたときだ」とか、ついついじっくり眺めてしまいますね。今回はセンサーだけでしたが、アクチュエーターに指示を出せば、さらにおもしろいものができそうです。</p>

<h2>リンク集</h2>

<p>スライドで触れたページや、実装にあたって参考にしたページです。</p>

<h3>1. Wi-Fi 温湿度センサーを作る</h3>

<ul>
<li><a href="https://akizukidenshi.com/catalog/g/gK-09758/">Wi-Fiモジュール ESP-WROOM-02 DIP化キット: 秋月電子通商-電子部品・ネット通販</a></li>
<li><a href="https://www.amazon.co.jp/dp/4789847047">超特急Web接続! ESPマイコン・プログラム全集 | 国野 亘 | Amazon</a>

<ul>
<li>組み立てや実装の参考にした本</li>
<li>[PDF] <a href="https://shop.cqpub.co.jp/hanbai/books/I/I000315/setsumei.pdf">IoT実習キット説明書・パーツリスト</a>

<ul>
<li>上記書籍の回路部分。基本的にはこれに倣った</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.amazon.co.jp/dp/B010GXAH4E">HiLetgo 3個セット DHT11温度センサー | Amazon</a>

<ul>
<li>今回使った温湿度センサー</li>
</ul>
</li>
<li><a href="https://garretlab.web.fc2.com/arduino/">Arduinoで遊ぶページ</a>

<ul>
<li>Arduino 言語の参考に</li>
</ul>
</li>
<li><a href="https://platformio.org/">A professional collaborative platform for embedded development · PlatformIO</a>

<ul>
<li>使い慣れたエディタで Arduino の開発ができる。補完や依存管理ができて便利</li>
</ul>
</li>
<li><a href="https://bokunimo.net/blog/esp/784/">乾電池で本当に1年間動作するIoTセンサ ESP8266 - ボクにもわかる電子工作のブログ</a></li>
</ul>


<h3>2. 測定結果を受け取ってためる</h3>

<ul>
<li><a href="https://ambidata.io/">Ambient – IoTデータ可視化サービス</a>

<ul>
<li><a href="https://ambidata.io/docs/esp8266/">Arduino ESP8266で温度・湿度を測定し、Ambientに送ってグラフ化する – Ambient</a></li>
</ul>
</li>
<li><a href="https://machinist.iij.jp/">Machinist</a></li>
<li><a href="https://aws-iot-core-for-beginners.workshop.aws/">AWS IoT Core 初級ハンズオン :: AWS IoT Core 初級 ハンズオン</a></li>
<li><a href="https://github.com/debsahu/ESP-MQTT-AWS-IoT-Core">debsahu/ESP-MQTT-AWS-IoT-Core: Arduino examples of connecting ESP8266/ESP32 to AWS IOT Core</a></li>
<li><a href="https://flogics.com/wp/ja/2019/07/esp8266-arduino-aws-iot-mqtt/">TI DSP ソフトウェア設計のファームロジックス | ESP8266（Arduino環境）で AWS IoT（MQTT over TLS）にアクセスする</a>

<ul>
<li>最初 MQTT で接続できなくて悩んでいたが、NTP で時刻を合わせたら解決した</li>
</ul>
</li>
</ul>


<h3>3. 測定結果をグラフにする</h3>

<ul>
<li><a href="https://docs.amplify.aws/start/q/integration/react">Getting started - Amplify Docs</a></li>
<li><a href="https://github.com/aws-amplify/amplify-js/issues/6369">[Feedback] <code>API.graphql</code> return signature is hard to use in TypeScript · Issue #6369 · aws-amplify/amplify-js</a>

<ul>
<li>素の状態だと TS サポートがいまいちな件</li>
</ul>
</li>
<li><a href="https://apexcharts.com/docs/react-charts/">React-ApexChart - A React Chart wrapper for ApexCharts.js</a></li>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/appsync-notify-subscribers-real-time/">AWS AppSync を使用して、外部データベースの更新をサブスクライバーにリアルタイムで通知する</a></li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ふりかえりカンファレンスのスタッフをやりました！]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/19/141153</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/19/141153"/>
        <updated>2021-04-19T05:11:53.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/pokotyamu/">id:pokotyamu</a> です！
最近は、モンハンライズにハマっています！ハンマー担いでブンブンしてます！</p>

<p>4月16日(土)に行われた「ふりかえりカンファレンス」のスタッフをやりました！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/p/pokotyamu/20210416/20210416155303.png" alt="f:id:pokotyamu:20210416155303p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>今回はそこでの学びや感じたことを社内勉強会で発表したので、スライドとコメントをまとめます。</p>

<h2>FFTT 発表資料</h2>

<script async class="speakerdeck-embed" data-id="1f772bfe5abd4fa28ff738df3a5e76a2" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>勉強会の感想コメント</h2>

<blockquote><p> なんのためにふりかえりやってるの？</p></blockquote>

<p>明日の自分やチームを1歩でも楽しくなるためにやってほしいですね！
連続したサイクルの中にふりかえりを組み込むことで、安全に転んで、次の1歩を早く出せるようになると思います！</p>

<blockquote><p>オンラインセミナーは当日参加が多い
結構人数集まったようなので準備とか大変そう</p></blockquote>

<p>場所の制約がなくなったのが非常に大きいですね〜！
国内・国外関係なく、どこでもいけるのが本当に便利！</p>

<blockquote><p>振り返り手法ってあんなにたくさんあるのだなぁ
振り返りの手法も多いようなのでどのタイミングで何を使うのが適切かを考えるの難しそう
会社やチームよって向き不向きがありそうだけど、選ぶには知らないといけないので専門的な人がいる意味がよく分かる</p></blockquote>

<p>そーなんですよね。
次の Action を決めたい時や、関係構築したい時など、用途に合わせてやるのがいいと思います！
もちろん KPT も素晴らしい手法なので、たまに気分を変えてみるみたいな感じでどうぞ！</p>

<blockquote><p>振り返りとの因果関係を感じられる強い人やチームの実例を見たら、もう少しイメージが付くのかな
と思っていたが、21卒の方の日報をザッピングしていたら、振り返りが役に立った、楽しいという風に書かれていた</p></blockquote>

<p>今年は特に楽しいにフォーカスしてふりかえりをしているのもあると思います！</p>

<blockquote><p>オンラインカンファレンスのスタッフの話って結構レアな気がするので興味深かった</p></blockquote>

<p>楽しいのでぜひぜひ！</p>

<h2>感想</h2>

<p>私は、初めてカンファレンスのスタッフをやらせてもらったのですが、非常に楽しかったです！
他の人の感想やブログレポートを見るのも、それそれ！その言葉待ってた！という感じでいつもの一般参加とは違う感覚で聞くことができました！</p>

<p>今回のスタッフを経験したことで、「楽しくふりかえる」の意味を体で感じることができたと思います。もちろん当日の発表もどれも素晴らしくてそれも含みで楽しかったところではありましたが ☺️
気軽に試す、実験してみるを最近のふりかえりでも挑戦中です。</p>

<p>また、オンラインカンファレンスということもあり、夜の2次会が3時ぐらいまで盛り上がっていたのも楽しかったポイントでした。
新しいつながりも持てたので、社内の知見をどんどん外に発信して自分の魅力を高めていければと思います。</p>

<p>改めて、スタッフに誘っていただいた <a href="https://twitter.com/viva_tweet_x">@viva_tweet_x</a> さんに改めて感謝です！ありがとうございました！これからもよろしくおねがいします！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 夜間光データから土地価格を予測 コンペの参加記録]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/13/174808</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/13/174808"/>
        <updated>2021-04-13T08:48:08.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは
株式会社フィードフォース2020年入社の機械学習エンジニア
<a href="https://twitter.com/feed_yao">八百　俊哉</a>と申します。</p>

<p>今回は、solafuneで開催された「<a href="https://solafune.com/#/competitions/f03f39cc-597b-4819-b1a5-41479d4b73d6">夜間光データから土地価格を予測</a>」という機械学習コンペに参加したので工夫した点や反省点などを紹介します。</p>

<p>コンペ参加の目標設定としては、「賞金獲得！！（4位以内）」を設定していましたが、36位/201人中と目標達成できませんでした。残念な結果に終わってしまいましたが、多くのことを学ぶことができました。</p>

<h1>参加経緯</h1>

<p>私は、2020年10月から2021年2月ごろまで顧客の課題解決のために機械学習を応用する方法を学ぶためにAI Questというイベントに参加していました。そのイベントをきっかけに私は精度の高いモデルや良い特徴量を作成することに興味を持ちました。</p>

<p>そこでより多くのコンペに参加することで精度を上げるためのノウハウを身に付けたいと思ったことが今回のコンペに参加したきっかけです。</p>

<p>また、今回参加したコンペは与えられている特徴量が4つしかないので、初心者が参加しやすいコンペだったということも魅力的なポイントでした。</p>

<h1>課題と与えられているデータ</h1>

<p>課題としては、「夜間光データを元に土地価格を予測するアルゴリズムを開発する」というものです。
使用可能なデータとしては、以下のものが与えられました。</p>

<ul>
<li>地域ごとのデータ・・・地域固有のID</li>
<li>年代・・・1992~2013年まで</li>
<li>土地の平均価格（目的変数）・・・1992~2013年まで</li>
<li>夜間光量の平均値・・・0~63までのレンジでその地域の平均光量</li>
<li>夜間光量の合計値・・・その地域の合計光量</li>
</ul>


<h1>全体構成</h1>

<p>今回最終submitとして選択したモデルの全体構成は以下です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210409/20210409155716.png" alt="f:id:newton800:20210409155716p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h1>前処理に関して</h1>

<h2>集約的特徴量について</h2>

<p>集約的特徴量の作成にあたっては<a href="https://twitter.com/mst_8823">masato8823 (@mst_8823) | Twitter</a>さんがBaseLineとして公開されていた以下のものを使用しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fzenn.dev%2Fmst8823%2Farticles%2Fcd40cb971f702e" title="[solafune] 夜間光データから土地価格を予測 BaseLine" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://zenn.dev/mst8823/articles/cd40cb971f702e">zenn.dev</a></cite></p>

<p>作成した特徴量としては以下です。</p>

<table>
<thead>
<tr>
<th>    </th>
<th>    </th>
</tr>
</thead>
<tbody>
<tr>
<td>  面積  </td>
<td>  夜間光量の合計値/夜間光量の平均値を行い面積を算出した </td>
</tr>
<tr>
<td>   PlaceID,Yearごとの統計情報 </td>
<td>  PlaceID,Yearをキーとして平均光量、合計光量、面積のmin,max,median,mean,std,max-min,q75-q25を算出した  </td>
</tr>
<tr>
<td> PlaceID をキーにしたグループ内差分</td>
<td>  平均光量、合計光量の年ごとの差分を算出した</td>
</tr>
<tr>
<td>PlaceID をキーにしたグループ内シフト </td>
<td> 平均光量、合計光量の年ごとの値をシフトした</td>
</tr>
<tr>
<td>ピボットテーブルを用いた特徴量</td>
<td>index=PlaceID,columns=Yearとして平均光量、合計光量、面積のピボットテーブルを作成し、PCAで次元削減したものを算出した</td>
</tr>
<tr>
<td>PlaceIDをキーにしたグループ内相関係数</td>
<td>PlaceIDごとにデータを集約しYearと平均光量、合計光量、面積との相関係数を算出した</td>
</tr>
<tr>
<td>平均光量が63であった回数</td>
<td>平均光量の最大値が63であることから平均光量が63である数を追加した</td>
</tr>
</tbody>
</table>


<h2>Area特徴量について</h2>

<p>先ほど<i>集約的特徴量について</i>で面積の求め方について書きました。面積=合計光量/平均光量で算出しています。ここで求められる<b>土地の面積は、年が変化しようと変化しないと思われますが、実際のデータを確認すると年が変化すると面積も変化していました。</b></p>

<p>そこで<b>合計光量/平均光量より算出された面積をPlaceIDをキーとして平均を取ったものを新たな面積としました。</b>
新たな面積が求まると <b>新たな合計光量 =  平均光量×新たな面積,新たな平均面積 = 合計光量/新たな面積</b> が求まります。</p>

<p>これらより求まる新たな合計光量、新たな平均光量、新たな面積を元々の合計光量、平均光量、面積と置き換えて集約的特徴量の作成を行いました。</p>

<h2>gplearnについて</h2>

<p>上で紹介した集約的特徴量とArea特徴量のそれぞれに対して<a href="https://gplearn.readthedocs.io/en/stable/">gplearn</a>というライブラリを用いて新たな特徴量を作成しました。このライブラリは遺伝的アルゴリズムにより目的変数をよく表している変数を作成してくれるものです。</p>

<p>このライブラリを用いて新しい特徴量を10個,25個,50個作成し、元々の集約的特徴量、Area特徴量と組み合わせてそれぞれに対して予測を行いました。</p>

<p>gplearnでの特徴量作成については以下のサイトが参考になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FHatomugi%2Fitems%2F3bb16ed9c6bdc15f1e00" title="遺伝的アルゴリズムを使って特徴量エンジニアリングしてみた - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/Hatomugi/items/3bb16ed9c6bdc15f1e00">qiita.com</a></cite></p>

<h1>モデル構築に関して</h1>

<p>モデルの構築としてはgroup k fold(fold=5)でStackingのモデルを採用しました。</p>

<p>1層目はrandom forest,lgb,multi regression,catboost,xgboostに加えてAutoMLの<a href="https://auto.gluon.ai/stable/index.html">Autogluon</a>を採用しました。</p>

<p>Autogluonは以下のようにデータを渡すだけで、11個のモデルを検証し最後に出力結果を重量平均で作成してくれます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>
predictor = TabularPredictor(
                                label=<span class="synConstant">'label'</span>,
                                problem_type=<span class="synConstant">'regression'</span>, 
                                eval_metric=<span class="synConstant">'root_mean_squared_error'</span>, <span class="synComment"># 評価指標</span>
)

X_train[<span class="synConstant">'label'</span>] = y_train
X_test[<span class="synConstant">'label'</span>] = y_test

predictor.fit(
            train_data=X_train,
            tuning_data=X_test, <span class="synComment"># これを渡さない場合はランダムスプリット</span>
            time_limit=<span class="synIdentifier">None</span>, <span class="synComment"># おおよその時間制限を設けられる</span>
)
</pre>


<p>そして2層目は1層目でも採用しているAutogluonで出力を作成しました。</p>

<h1>感想・反省点</h1>

<p>Public Scoreの時点では6位と賞金獲得の可能性が十分にありましたが、Private Scoreでは36位と大幅にshake downしてしまいました。今回目標達成できなかった理由としては以下の2つが考えられます。</p>

<p><b>1 CVの値とPublic ScoreからPrivate Scoreについて考えられなかった
</b></p>

<p>1つ目の要因としては、Public Scoreが下がることのみを考えてモデルの改善・特徴量の作成を行っていたということです。その時CVの値とPublic Scoreをどこかに記録しておけばよかったのですが、どこにも保存せずPublic Scoreが下がることが最も良いことであると捉えていました。実際は、CVが下がったモデル・特徴量においてPublic Scoreも同じように下がることが望ましく、その記録を取っておくべきでした。</p>

<p>実際これまで提出していたファイルの中にPrivate Scoreが0.48774というものがあり、このファイルを最終提出としておけば3位に入ることができていました。しっかりとPrivate Scoreに効いているであろう提出ファイルが選べるようにCVとPublic Scoreに着目できるようにならないといけないと感じました。</p>

<p><b>2 gplearnを行う位置が悪かった
</b></p>

<p>2つめは、group k foldを行う前にgplearnを行ったことによって、validationの目的変数が確認できる状態でgplearnが特徴量作成を行ってたことです。これは本来見ることができないデータを確認しながらデータ生成を行っていることになるので過学習を引き起こす可能性がありました。
　
　<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413095008.png" alt="f:id:newton800:20210413095008p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>あるべき姿としては、group k foldでtrainをtrain,validationに分割した後にtrainのみのデータを用いてgplearnをfitさせるべきだったと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413112402.png" alt="f:id:newton800:20210413112402p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h1>次回コンペでは</h1>

<p>今回のコンペを通じて集約的特徴量の作成方法、Stackingの実装方法、gplearnの実行位置、CVとPublic Scoreの関係性の重要度について学ぶことができました。
テーブルコンペ において有効な手法を多く学ぶことができたので、次回参加するコンペでは賞金獲得を目標に頑張ります！！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[カスタマーサクセスエンジニアのお仕事]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/09/120453</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/09/120453"/>
        <updated>2021-04-09T03:04:53.000Z</updated>
        <summary type="html"><![CDATA[<p>ごきげんようございます、ソーシャルPLUS チームの <a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。今回も社内の技術勉強会（通称 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a>）で話した内容で書きたいと思います。</p>

<p>毎回一貫性のないネタで（しかもあんまり Tech じゃない話を）話してますが、今回も自分のキャリアについての話をしました。</p>

<ul>
<li><a href="https://developer.feedforce.jp/entry/2020/01/10/185250">2020/01/10 FFTT#381 認証認可情報の追い方のはなし</a></li>
<li><a href="https://developer.feedforce.jp/entry/2020/08/28/183637">2020/08/28 FFTT#407 認知（cognition）のはなし</a></li>
</ul>


<p>過去にこのブログで書いたこの記事↓の続編ということになります。</p>

<ul>
<li><a href="https://developer.feedforce.jp/entry/2018/12/05/110000">2018/12/05 社内では開発チームマネージャーを名乗っています</a></li>
</ul>


<p>知識として役に立つ内容というよりは、自分に合った仕事ができると楽しいよね、とか、エンジニアでもこういう仕事あるよ、とか、ざっくりとした自分語りになります。</p>

<p>では、よろしくお願いします！</p>

<h2>2020年10月からカスタマーサクセスエンジニアになりました</h2>

<p>いきなり本題ですが、はい、なっておりました。</p>

<p>対外的に自分のポジションを名乗ることがないので、ただの自称なんですが、最近だと元同僚の <a href="http://blog.hatena.ne.jp/a-know/">id:a-know</a> さんが<a href="https://blog.a-know.me/entry/2021/03/15/214630">転職先で正式に（？）名乗ってらっしゃいます</a>。</p>

<p>自分ではあまり上手く言語化できていなかったんですが、a-know さんの記事に書かれているポジション名への思いを見て「あー！まさにそれ！」って思いました（あぁ！先に公に言われてしまった！😩というのも思いました。笑）。</p>

<p>他にも Customer Support &amp; Senior Developer とも自称しています。これは単純にいまやっていることを並べた感じの肩書きです。</p>

<h2>具体的に何をやってるのか</h2>

<p>１つは、メールでのカスタマーサポートを担当しています。</p>

<p>現在 ソーシャルPLUS のカスタマーサポートへお問い合わせいただくと、8 〜 9 割がた私がお返事いたします。</p>

<p>ソーシャルPLUS のカスタマーサポートは、メールでご連絡いただくことで対応する、受動的かつ突発的なタスクです。主に企業がソーシャルPLUS を導入するための<b>技術的な事前調査</b>や、<b>導入開発</b>に関する質問が多いです。この導入フェーズを乗り越えていただかないと、本来のソーシャルPLUS というサービスの価値を感じていただくことができないため、とても大事なサポートだと認識しています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408171759.png" alt="f:id:tmd45:20210408171759p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>もともと技術的なお問い合わせも多く、お客様側のシステムや利用方法を加味してご案内する必要がありました。またソーシャルログインプロバイダ側の契約や仕様についても把握している必要があります。技術面まで捉えてお返事するとなると、エンジニア以外では返答に窮することもありました。</p>

<p>もちろん開発チームと連携して回答するというのは以前からやっていましたが、双方のコミュニケーションコストや、開発チームが本来の開発タスクから突発的な質問（しかもちょっと複雑）に対応するための脳のスイッチングコストなど気になることがありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408182910.png" alt="f:id:tmd45:20210408182910p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>ビジネスチームにはもっとたくさんの企業に利用いただけるようなまさに "ビジネス的" な施策に時間を使ってほしかったし、開発チームには開発に集中する時間をできるだけ作りたいと思っていました。</p>

<h2>カスタマーサポートを担当しはじめたきっかけ</h2>

<p>先日、我らがチームリーダー、Tech Lead の佐藤の社内インタビュー記事が公開されました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn973a7399829c" title="理想のエンジニア組織を目指して。ソーシャルPLUSの開発リーダーがビジネスサイドにもコミットする理由｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n973a7399829c">media.feedforce.jp</a></cite></p>

<p>去年の夏頃、当時まだ開発チームリーダーだった私と 1on1 をしていた佐藤から、エンジニアとしてのステップアップとして、ソーシャルPLUS の開発チームリーダーとしてもっとコミットしていきたい、という話をもらいました。自分としては断る理由もなく、めっちゃいいじゃん！むしろぜひお願いします！という感じでした。</p>

<p>しかし、そうなると 7 年もソーシャルPLUS にいる自分はどこに向かえばいいのか？という悩みがはっきりと表面化してきました。</p>

<p>ポジションや肩書きに執着はないので、リーダーでもなんでもない、ただの（と言ったらいまチームにいるメンバーに失礼ですけど）バックエンドエンジニアに戻るという道もありました。でも本当にそんな言い方は失礼だなと感じるくらい、いま開発に携わってくれているメンバーは良い開発者たちです。もっと人手があれば、とは常々思っていますが（笑）私がそこに戻るだけで、私の経験や力を充分活かせるのかしらん？それでプロダクトはもっといい方向に進めるのかしらん？と。</p>

<p><a href="https://developer.feedforce.jp/entry/2018/12/05/110000">前の記事</a>でも書きましたが、以前から自分はビジネス側と開発側の間に入って緩衝材をやったり、落ち穂拾いをしたりしていました。しかし自分が受ける側の 1on1 で「ここから先どうなりたいですか？」と問われて答えに詰まるような期間を過ごしていました。</p>

<p>そんなとき、ビジネス側のいちメンバーから「（a-know さんみたいな）カスタマーサクセスにコミットするエンジニアというのが合ってるんじゃないか」と言ってもらう機会がありました。単純なんですが、それで「あ、そっか」と目からウロコがぽろり。</p>

<p>いままで「担当する仕事じゃないから」と（はっきりそう言うわけじゃないですが）どこか伝言ゲームのようになっていた、問い合わせなどの仕事を、私自身が担当すれば手っ取り早いじゃないかと。それだけじゃなく、これまでのサポートメンバーが兼任で担当していたがゆえに、どうしてもサポート側の知見などを残す手間をかけづらかったところを、アウトプットに慣れた自分のようなエンジニアがやれば一石二鳥。同じように手が回らなかった仕組み化や、プロダクトへのフィードバックもやってやろうじゃないか、と。</p>

<p>チーム内で互いに助け合う文化ができあがっていたので、自分ひとりが何でも知っていなければならないという過度なプレッシャーはなく、とはいえ自分がこのポジションを担当すればなんかいろいろすっきり組み立てられるのでは？というひらめきがありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408183042.png" alt="f:id:tmd45:20210408183042p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>結局のところ、肩書きが変わっただけとも言えます。肩書きに執着しないと言いながら、行動が肩書きに囚われてしまっていたなぁと。</p>

<p>チーム内外に「ポジションを変えます！エンジニアとしてカスタマーサクセスやります！」と大々的に宣言したことで、やれることの幅が広がりました。広がったというか、しっかりフォーカスする部分を切り替えることができた。そういう意味での肩書きって大切なんだなと思いました。</p>

<h2>やってみてどうだったか</h2>

<p>自分にはめちゃくちゃ合ってたなと、毎日楽しく働いてます。同僚にも、この仕事にシフトしてからの玉田さんめちゃくちゃ充実して楽しそうに見える、と言われました（笑）。これまでなんとなくもやもやしてたものが、自分の手で解決できていく気持ちよさを感じています。</p>

<p>やってみて、いまの仕事にフィットしている自分の強みはこんなところだと思ってます。</p>

<ol>
<li>ソーシャルPLUS を 7 年もやってる（それなりの業務知識量）</li>
<li>開発者なのでシステムの調査にスムーズにとりかかれる</li>
<li>こう見えてお客様とのコミュニケーションは昔とった杵柄がある</li>
<li>ドキュメンテーションや情報整理にこだわりがある</li>
<li>細かいことに気がつくほう</li>
</ol>


<p>前職（もう 7 年も前なわけですが）では頻度は高くないものの、企業のお客様のところへ営業さんといっしょにお話しにいくことがあったり、お客様と日々メールでやりとりしていたりという経験があって、いま役に立っています。SIer という立場で設計開発するときの心配事なんかも少しは知っているので、それも役に立ってるかもしれないなと思う場面があります。</p>

<p>結果として、先に書いたような課題感はどうなったかというと、まだ数値にして改善されたことを確認するなどはできていないのですが</p>

<ul>
<li><b>技術的な調査・質問に以前より素早く答えられる形になった</b>

<ul>
<li>コミュニケーションコストや待ち時間などの削減</li>
<li>ひとりの人間が対応できるので調査とお返事の文章作成を同時にできるなど</li>
</ul>
</li>
<li><b>ナレッジを文章化して残すようになった</b>

<ul>
<li>ものによって esa 記事にしたり GitHub Issue にしたりしています</li>
</ul>
</li>
<li><b>兼業していた他職種のひとが以前より本業に集中できるようになった</b>

<ul>
<li>確認依頼や私でもわからないことを質問して答えてもらったりというのは今もありますが、それでも以前より中断されない時間が作りやすくなったのではないかと思います</li>
<li>しかもこれがプロダクトマネージャだったりするので影響がでかい 😎</li>
</ul>
</li>
</ul>


<p>などなど、いい効果が出てると感じます。</p>

<p>ひとりで対応できてしまう＝属人的になってしまう、という問題も重々承知しているので、そうならないようにナレッジ化したり、やりとりを見える化したりというのは大事にしています。強みとして挙げたような "私だからできる仕事" というのも同じくらい大事にしています。</p>

<h2>他になにやってるの</h2>

<p>カスタマーサポートは私の仕事のうちの１つです。それ以外には Senior Developer として、プロダクトの新しい機能の検証や、機能として組み込むわけではないけどお客様が必要とするような仕様や仕組みを検証するなどしています。</p>

<p>こちらはとくにビジネスメンバーと以前よりたくさん話す機会が増えました。セールスが普段お客様からどのような要望を伺うのか、マーケティングがどういった訴求をしているのか、プロダクトマネージャーはどんな未来を描いているのか。そういうものから何ができそうか、具体的な方法を考えて、開発チームにシステム化してもらうような仕事です。</p>

<p>そこまで明確に切り分けて丸投げしているわけではないですし、開発チーム側からも活発に意見や案が出る環境でもあります。UI 面やお客様に "見せて" 提供する機能はデザイナーが具体案を詰めていくことが多いです。</p>

<p>Senior Developer の仕事は、以前からやっていた落ち穂拾いに近く、それを「私の仕事としてコミットしますね！」と明言して取り組んでるようなイメージです。</p>

<h2>さらにこれから</h2>

<p>Customer Support &amp; Senior Developer をやることで、プロダクトの内情とお客様の困りごとの両方を見ることができています。そこから、これからもっと良く出来そうだなと確度高く考えられるものが増えました。</p>

<p>いまのチームはまさに、この下の図のような感じでメンバーが良い関係で仕事していると思います。</p>

<p><figure class="figure-image figure-image-fotolife" title="私が &quot;望まない&quot; チーム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408192135.png" alt="f:id:tmd45:20210408192135p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>私が &quot;望まない&quot; チーム</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="私が &quot;望む&quot; チーム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408192209.png" alt="f:id:tmd45:20210408192209p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>私が &quot;望む&quot; チーム</figcaption></figure></p>

<p>複数の色を跨ぐような仕事ができているのが、自分の強みであり、プロダクトの役にも立てているなという実感もあります。</p>

<p>溜まったナレッジや分析結果をもとにさらに良い改善、良い進化ができるように引き続きやっていきたいと思います！</p>

<h2>おわりに</h2>

<p>というわけで、他チームに自分の近況報告をするような発表となりました。</p>

<p>これを読んで「おっ じゃあエンジニアにカスタマサポートやらせりゃいいんだ」と思われることは無いと思うんですが、そういう話ではないのでご留意ください。あくまでも私にはこの仕事が合っていて、ちょうどプロダクトのなかでそういう仕事があるといいなという状態に合致できたという話です。</p>

<p>自分はとても恵まれていると思います。日々感謝感謝です。そんな話をすると、それだけじゃないよ、頑張ってるよ、と言ってくれる同僚も居ます。とてもありがたいことです。</p>

<p>感謝の気持ちを力に変えて、ソーシャルPLUS をさらによいプロダクトにしていきたいと思いますので、今後ともよろしくお願いいたします。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニア向けミートアップを開催します！]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/15/113230</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/15/113230"/>
        <updated>2021-03-15T02:32:30.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。人事チームからエンジニアミートアップについてお知らせです。</p>

<p>3月26日（金）19：00から、エンジニア向けのミートアップを開催することになりました！
選考とは関係ないので、純粋に「どんなエンジニアがいるかみてみたい」「会社の雰囲気を知りたい」
という方もぜひご参加いただけたら嬉しいです。</p>

<p>初回のLT登壇者は <a href="https://twitter.com/daido1976">@daido1976</a>です！</br>
詳しくは下記記事をご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn53b8be5eae4a" title="現場エンジニアと気軽に話せる！エンジニアミートアップを開催します｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n53b8be5eae4a">media.feedforce.jp</a></cite></p>

<p>ご参加お待ちしています！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker BuildKit の --secret フラグでイメージビルド時の秘匿情報を環境変数経由で渡せるようになっていた]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/15/102530</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/15/102530"/>
        <updated>2021-03-15T01:25:30.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。入社してもうすぐ 3 年が経ちます。</p>

<p>Docker BuildKit の --secret フラグについて、公式ドキュメントでの説明や関連する日本語記事はすでにいくつかあるのですが、2020/12/08 にリリースされた Docker Engine 20.10.0 で「秘匿情報を環境変数経由で渡せるようになっていたこと」への言及が見当たらなかったので書かせていただきます。<a href="#f-140b8608" name="fn-140b8608" title="BuildKit や --secret フラグってそもそも何？という方は最下部の参考記事に詳しくまとまっておりますのでぜひご覧ください。">*1</a>（個人的にはとても嬉しいアップデートでした…！）</p>

<p>リリースノートの該当箇所は以下です。</p>

<p>See. <a href="https://docs.docker.com/engine/release-notes/#20100">https://docs.docker.com/engine/release-notes/#20100</a></p>

<blockquote><ul>
<li>buildkit: secrets: allow providing secrets with env <a href="https://github.com/moby/moby/pull/41234">moby/moby#41234</a> <a href="https://github.com/docker/cli/pull/2656">docker/cli#2656</a> <a href="https://github.com/moby/buildkit/pull/1534">moby/buildkit#1534</a>

<ul>
<li>Support <code>--secret id=foo,env=MY_ENV</code> as an alternative for storing a secret value to a file.</li>
<li><code>--secret id=GIT_AUTH_TOKEN</code> will load env if it exists and the file does not.</li>
</ul>
</li>
</ul>
</blockquote>

<h2>要点</h2>

<ul>
<li>Docker Engine 20.10.0 までは <code>--secret id=my_secret,src=my_secret.txt</code> のようにファイル経由でしか秘匿情報を渡せなかった</li>
<li>20.10.0 からは <code>--secret id=my_env,env=MY_ENV</code> のように環境変数経由で秘匿情報を渡せるようになった</li>
<li>上記の <code>--secret id=my_env,env=MY_ENV</code> にはショートハンドが用意されており <code>--secret id=MY_ENV</code> とも書ける（この場合 Dockerfile 側でも <code>id</code> は <code>MY_ENV</code> になる）</li>
</ul>


<h2>使い方</h2>

<p>基本的な使い方は <a href="https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information">公式ドキュメント</a> に書いてあるのでそちらに説明を譲ります。</p>

<p>以下は主に上記の <code>要点</code> と公式ドキュメントに記載のない仕様を説明するための最小のサンプルコードです。</p>

<p>こんな Dockerfile があったとして、</p>

<pre class="code lang-dockerfile" data-lang="dockerfile" data-unlink><span class="synComment"># syntax = docker/dockerfile:1.2</span>
<span class="synStatement">FROM </span>alpine

<span class="synComment"># 1. docker build 時に `id` を明示的に指定する場合（例: `--secret id=my_env1,env=MY_ENV1` ）</span>
<span class="synStatement">RUN </span>--mount=type=secret,id=my_env1 cat /run/secrets/my_env1
<span class="synComment"># 2. docker build 時に `id` を明示的に指定しない場合（例: `--secret id=MY_ENV2`） </span>
<span class="synStatement">RUN </span>--mount=type=secret,id=MY_ENV2 cat /run/secrets/MY_ENV2
<span class="synComment"># 3. `dst` を指定した場合（`dst` を指定しないとデフォルトで `/run/secrets{id}` に秘匿情報が入ります）</span>
<span class="synStatement">RUN </span>--mount=type=secret,id=MY_ENV3,dst=/foobar cat /foobar

<span class="synComment"># 補足: key 名の指定は実はいろいろできるらしい</span>
<span class="synComment"># https://github.com/moby/buildkit/blob/v0.8.2/frontend/dockerfile/instructions/commands_runmount.go#L154-L216</span>
</pre>


<p>以下のように <code>docker build</code> すると、環境変数経由で秘匿情報を渡すことができます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">export</span><span class="synIdentifier"> MY_ENV1=</span><span class="synStatement">'</span><span class="synConstant">my_env1!!!</span><span class="synStatement">'</span> &amp;&amp; <span class="synStatement">export</span><span class="synIdentifier"> MY_ENV2=</span><span class="synStatement">'</span><span class="synConstant">my_env2!!!</span><span class="synStatement">'</span> &amp;&amp; <span class="synStatement">export</span><span class="synIdentifier"> MY_ENV3=</span><span class="synStatement">'</span><span class="synConstant">my_env3!!!</span><span class="synStatement">'</span>
<span class="synComment"># 複数の秘匿情報を渡すには --secret フラグを複数使えば良い</span>
$ <span class="synIdentifier">DOCKER_BUILDKIT</span>=<span class="synConstant">1</span> docker build <span class="synSpecial">--secret</span> <span class="synIdentifier">id</span>=<span class="synIdentifier">my_env1,env</span>=MY_ENV1 <span class="synSpecial">--secret</span> <span class="synIdentifier">id</span>=MY_ENV2 <span class="synSpecial">--secret</span> <span class="synIdentifier">id</span>=MY_ENV3 <span class="synSpecial">--no-cache</span> <span class="synSpecial">--progress=plain</span> .

<span class="synComment"># ...</span>
<span class="synComment">#8 [2/4] RUN --mount=type=secret,id=my_env1 cat /run/secrets/my_env1</span>
<span class="synComment">#8 sha256:d32e4958843414fb006b5dbe7c259112f1bd481d17d84098c3d84f499793cb3b</span>
<span class="synComment">#8 0.252 my_env1!!!#8 DONE 0.3s</span>

<span class="synComment">#9 [3/4] RUN --mount=type=secret,id=MY_ENV2 cat /run/secrets/MY_ENV2</span>
<span class="synComment">#9 sha256:4cc22ee3d7f39180f4f4f8167deaa481e852b2fc577c89a234fe88b9852952ba</span>
<span class="synComment">#9 0.301 my_env2!!!#9 DONE 0.4s</span>

<span class="synComment">#10 [4/4] RUN --mount=type=secret,id=MY_ENV3,dst=/foobar cat /foobar</span>
<span class="synComment">#10 sha256:91f97f55e633c8ed675126abefa015110265a7fbd40e4aeaf88204dcb912cb26</span>
<span class="synComment">#10 0.283 my_env3!!!#10 DONE 0.3s</span>
<span class="synComment"># ...</span>
</pre>


<h2>Docker Compose で --secret フラグが使えないことへの対策</h2>

<p>余談ですが、Docker Compose には BuildKit が統合されているものの、2021年3月現在 --secret フラグは利用できません。（<a href="https://github.com/docker/compose/pull/7046">対応中らしき PR</a> はある）</p>

<p>私のチームではワークアラウンドとして、開発環境でも <code>docker-compose build</code> ではなく <code>docker build</code> を使う方法を取りました。</p>

<p>Docker Compose では <code>docker-compose.yml</code> で指定しているイメージと同名のイメージがローカルにあればそちらを使ってくれるので、以下のような <code>docker-compose.yml</code> を書いて、</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">'3'</span>

<span class="synIdentifier">services</span><span class="synSpecial">:</span>
  <span class="synIdentifier">app</span><span class="synSpecial">:</span>
    <span class="synIdentifier">build</span><span class="synSpecial">:</span> .
    <span class="synIdentifier">image</span><span class="synSpecial">:</span> my-app
   <span class="synComment"> # ...</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synIdentifier">DOCKER_BUILDKIT</span>=<span class="synConstant">1</span> docker build <span class="synSpecial">-t</span> my-app <span class="synSpecial">--secret</span> <span class="synIdentifier">id</span>=MY_ENV .
</pre>


<p>上記のように <code>docker build</code> で同名のイメージを事前に作っておいて <code>docker-compose</code> から使う、という流れになります。</p>

<h2>参考記事</h2>

<ul>
<li><a href="https://medium.com/nttlabs/docker-v18-09-%E6%96%B0%E6%A9%9F%E8%83%BD-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%83%93%E3%83%AB%E3%83%89-%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3-9534714c26e2">Docker 18.09 &#x65B0;&#x6A5F;&#x80FD; (&#x30A4;&#x30E1;&#x30FC;&#x30B8;&#x30D3;&#x30EB;&#x30C9;&amp;&#x30BB;&#x30AD;&#x30E5;&#x30EA;&#x30C6;&#x30A3;) | by Akihiro Suda | nttlabs | Medium</a></li>
<li><a href="https://blog.manabusakai.com/2018/12/docker-build-secret/">Docker Engine 18.09 &#x304B;&#x3089;&#x4F7F;&#x3048;&#x308B; Build-time secrets &#x3092;&#x8A66;&#x3057;&#x3066;&#x307F;&#x305F; | &#x306F;&#x3063;&#x305F;&#x308A;&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x306E;&#x5099;&#x5FD8;&#x9332;</a></li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-140b8608" name="f-140b8608" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">BuildKit や --secret フラグってそもそも何？という方は最下部の参考記事に詳しくまとまっておりますのでぜひご覧ください。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-Attentionを用いてGoogle 無料リスティングの「拡張リスティングの不承認」に挑んだ話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/11/101244</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/11/101244"/>
        <updated>2021-03-11T01:12:44.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは
株式会社フィードフォース2020年入社の機械学習エンジニア
<a href="https://twitter.com/feed_yao">&#x516B;&#x767E;&#x4FCA;&#x54C9;@Feedforce (@feed_yao) | Twitter</a>と申します。</p>

<p>最近はロードバイク にはまっており、ロードバイク購入後一ヶ月で一日100km走行に成功しました。</p>

<p>今回、<b>Google無料リスティングで不承認アカウントが発生する要因を調査する分析</b>を行いました。</p>

<ul class="table-of-contents">
    <li><a href="#Google-無料リスティングとは">Google 無料リスティングとは？</a></li>
    <li><a href="#なぜ今回分析が必要とされたのか">なぜ今回分析が必要とされたのか？</a></li>
    <li><a href="#結果と考察">結果と考察</a></li>
    <li><a href="#Self-Attentionを採用した理由">Self-Attentionを採用した理由</a></li>
    <li><a href="#実装手順">実装手順</a><ul>
            <li><a href="#使用データのフォーマット">使用データのフォーマット</a></li>
            <li><a href="#必要ライブラリのインストールインポート">必要ライブラリのインストール・インポート</a></li>
            <li><a href="#データの前処理">データの前処理</a></li>
            <li><a href="#学習">学習</a></li>
            <li><a href="#評価出力">評価・出力</a></li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h1 id="Google-無料リスティングとは">Google 無料リスティングとは？</h1>

<p>2020年10月にGoogleから公開された<b>Googleショッピングタブに無料で商品掲載ができる「無料リスティング」のことです。</b></p>

<p>Google 検索にサイトがインデックス登録されても料金が発生しないのと同様に、EC事業者は無料で利用可能になりました。
Google 無料リスティングについての詳細は以下のサイトが参考になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flab.ecbooster.jp%2Fabout-google-free-listings%2F" title="Googleに無料で自社商品が掲載できる「無料リスティング」とは？" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://lab.ecbooster.jp/about-google-free-listings/">lab.ecbooster.jp</a></cite></p>

<h1 id="なぜ今回分析が必要とされたのか">なぜ今回分析が必要とされたのか？</h1>

<p>無料リスティングでは自社製品を無料でGoogleに掲載できます。
しかしながら、課題として<b>一部商品掲載が不承認となるケースが見受けられました。</b></p>

<p>不承認となってしまうと自社商品の掲載ができていない状況が発生しています。不承認となる理由としては、「Googleが定める基準に対して、登録している商品データの属性数が足りない、内容が仕様に沿っていない場合、商品データの品質が低いため不承認になり、Googleの検索結果に表示させることができません。」とされています。</p>

<p>これらを<b>定量的に分析することで不承認となる理由を見つけ出す試み</b>が始まりました。</p>

<p>そのため今回の分析の目的は、<b>商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する</b>ことです。</p>

<h1 id="結果と考察">結果と考察</h1>

<p>今回の目的である「商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する」は、<b>達成できませんでした。</b></p>

<p>目的が達成できなかった理由として考えられる要因は、<b>承認・不承認は商品のtitle,descriptionだけでは判断されていない</b>ということです。商品ごとのtitle,descriptionのみで承認・不承認が判断されているのではなく、商品データ全体またはアカウント全体のデータを総合的に見て、判断されている可能性が高いということがわかりました。</p>

<p>承認・不承認予測のAccuracyとしては5割〜６割ほどで、承認・不承認を予測するという点でも低い精度となってしまいました。</p>

<h1 id="Self-Attentionを採用した理由">Self-Attentionを採用した理由</h1>

<p>今回はSelf-Attentionという手法を用いてこの課題解決を試みました。</p>

<p>Self-Attentionとは、<b>文章全体で重要とされるキーワードが予測結果と一緒に確認できるようになる</b>手法です。</p>

<p>Self-Attentionの仕組みについては詳しく書かれている方が多くいますので、ここでは割愛します。</p>

<p>最初は、word2vecを用いて文章特徴量を作成し、承認・不承認を予測して終了という一連の流れを想定していました。</p>

<p>しかし、<b>今回の目的は</b>承認・不承認を予測したいわけではなく、<b>どの単語が承認・不承認と関わっているのかを確認し、不承認となっているアカウントを承認にすること</b>です。
もし仮にword2vecを用いた手法を採用すると予測結果の要因や理由が明確にならないので、不承認のアカウントを承認に改善する施策を考えることはできません。</p>

<p>そのため今回は、<b>Self-Attentionを用いて分類モデルを構築することで、承認・不承認の要因が文章内のどこにあるのかを分析する</b>ために、この手法を選択しました。</p>

<h1 id="実装手順">実装手順</h1>

<p>本来の目的は達成できませんでしたが、Self-Attentionでの分類モデルの実装はできましたので、実装方法を記載します。
今回はkerasを用いてSelf-Attention + LSTMで予測を行いました。
検証環境はGoogle Colaboratoryを想定しています。</p>

<h2 id="使用データのフォーマット">使用データのフォーマット</h2>

<p>今回使用できるデータとしては以下のようなデータになっています。</p>

<p>各アカウント・各商品ごとに商品IDが割り振られており、それぞれの商品にtitle,descriptionが割り振られています。</p>

<p><b>承認・不承認のラベルは、アカウントごとに付加されています。
</b></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210224/20210224172435.png" alt="f:id:newton800:20210224172435p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="必要ライブラリのインストールインポート">必要ライブラリのインストール・インポート</h2>

<pre class="code lang-python" data-lang="python" data-unlink>!pip install text_vectorian
!pip install mojimoji
!apt install aptitude
!aptitude install mecab libmecab-dev mecab-ipadic-utf8 git make curl xz-utils <span class="synIdentifier">file</span> -y
!pip install mecab-python3==<span class="synConstant">0.7</span>
</pre>




<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">import</span> pandas <span class="synStatement">as</span> pd
<span class="synPreProc">import</span> numpy <span class="synStatement">as</span> np
<span class="synPreProc">import</span> keras
<span class="synPreProc">import</span> os
<span class="synPreProc">import</span> warnings
warnings.simplefilter(<span class="synConstant">'ignore'</span>)
<span class="synPreProc">import</span> subprocess
<span class="synPreProc">import</span> mojimoji
<span class="synPreProc">import</span> re
<span class="synPreProc">import</span> MeCab
<span class="synPreProc">import</span> matplotlib.pyplot <span class="synStatement">as</span> plt

<span class="synPreProc">from</span> keras.layers <span class="synPreProc">import</span> Dense, Dropout, LSTM, Embedding, BatchNormalization
<span class="synPreProc">from</span> keras.layers.wrappers <span class="synPreProc">import</span> Bidirectional
<span class="synPreProc">from</span> keras.callbacks <span class="synPreProc">import</span> EarlyStopping, ModelCheckpoint
<span class="synPreProc">from</span> keras <span class="synPreProc">import</span> Input, Model, utils
<span class="synPreProc">from</span> keras.preprocessing.sequence <span class="synPreProc">import</span> pad_sequences
<span class="synPreProc">from</span> keras.callbacks <span class="synPreProc">import</span> EarlyStopping

<span class="synPreProc">from</span> text_vectorian <span class="synPreProc">import</span> SentencePieceVectorian
<span class="synPreProc">from</span> keras_self_attention <span class="synPreProc">import</span> SeqSelfAttention
<span class="synPreProc">from</span> sklearn.model_selection <span class="synPreProc">import</span> train_test_split
<span class="synPreProc">from</span> sklearn.metrics <span class="synPreProc">import</span> classification_report
</pre>


<h2 id="データの前処理">データの前処理</h2>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># データの読み込み</span>
app = pd.read_csv(<span class="synConstant">'data/app.csv'</span>) <span class="synComment"># 承認データ</span>
disapp = pd.read_csv(<span class="synConstant">'data/disapp.csv'</span>) <span class="synComment"># 不承認データ</span>

app[<span class="synConstant">'target'</span>] = <span class="synConstant">'app'</span> <span class="synComment"># targetにlabelを代入する</span>
disapp[<span class="synConstant">'target'</span>] = <span class="synConstant">'disapp'</span>

<span class="synComment"># 今回は、titleとdescriptionを用いて予測するので、それら二つの変数を一つにまとめる</span>
app[<span class="synConstant">'sentence'</span>] = app[<span class="synConstant">'title'</span>] + app[<span class="synConstant">'description'</span>] 
disapp[<span class="synConstant">'sentence'</span>] = disapp[<span class="synConstant">'title'</span>] + disapp[<span class="synConstant">'description'</span>]

<span class="synComment"># これまで別々に処理していたappとdisappをまとめてdfとする</span>
df = app.append(disapp)
</pre>


<p>今回のデータは特殊で、承認・不承認は商品ごとについているラベルではなくアカウントと紐づいたラベルとなっています。それらを各商品と承認・不承認が紐づいているとして各商品ごとに予測することを行ってます。</p>

<p>ここで注意が必要なのは、データの分割方法です。<b>アカウントを無視してデータを分割してしまうとリークを起こす可能性があります</b>（リークとは、本来予測では使用できないデータが学習時に入ってしまっていることです）。</p>

<p><b>そのため同じアカウントのデータが訓練データ、検証データ、テストデータに渡って存在しないようにしなければなりません</b>。</p>

<p>例えば、アカウントAの商品データは全て訓練データとする,アカウントBの商品データは全てテストデータにするといったようなことを意味しています。</p>

<p>アカウントごとにデータを分割するには、各アカウントごとの商品数がある程度同じである方がlabelが不均衡にならないと考え、データ数を揃える処理を施しました。
（これらはGroupKFoldを使用すれば解決できると考えられますが、分析実施時はGroupKFoldを知らなかった）</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># アカウントごとに商品数が異なるので50以上商品数がある場合は50までの商品を使用する</span>
<span class="synComment"># アカウントごとに商品数を揃えることで、labelが不均衡になることを緩和している</span>
<span class="synComment"># アカウントごとにlabelがふられるが、商品ごとに予測結果を出す時のみ実施</span>
cutted_df = pd.DataFrame([])
<span class="synStatement">for</span> acc <span class="synStatement">in</span> df.account_name.unique():
  data = df[df.account_name == acc]
  <span class="synStatement">if</span> data.shape[<span class="synConstant">0</span>] &gt; <span class="synConstant">50</span>: 
    data = data[:<span class="synConstant">50</span>]
  cutted_df = pd.concat([cutted_df,data],<span class="synConstant">0</span>)  

df = cutted_df.sample(frac=<span class="synConstant">1</span>,random_state=<span class="synConstant">1</span>).reset_index(drop=<span class="synIdentifier">True</span>)
</pre>


<p>次は、データの前処理についてです。</p>

<p>自然言語処理の前処理で有効と言われている半角->全角、数字は全て0にする、スペース文字の消去を行いました。
また、これまでlabelが'app'または'disapp'だったのでそれらを入力できる形式に変換しています。</p>

<pre class="code lang-python" data-lang="python" data-unlink>
<span class="synStatement">def</span> <span class="synIdentifier">PreprocessData</span>(df,dirname):
  <span class="synComment"># データの前処理関数</span>
  <span class="synComment"># 辞書型を返す</span>

  mecab = MeCab.Tagger(<span class="synConstant">'-Ochasen'</span>)

  <span class="synComment"># textデータの前処理</span>
  df = TextPreprocess(df)

  label2index = {k: i <span class="synStatement">for</span> i, k <span class="synStatement">in</span> <span class="synIdentifier">enumerate</span>(df.target.unique())}
  index2label = {i: k <span class="synStatement">for</span> i, k <span class="synStatement">in</span> <span class="synIdentifier">enumerate</span>(df.target.unique())}

  class_count = <span class="synIdentifier">len</span>(label2index)
  labels = utils.to_categorical([label2index[label] <span class="synStatement">for</span> label <span class="synStatement">in</span> df.target], num_classes=class_count)

  features,sentences,vectorian,account = MakeFeatures(df)

  <span class="synStatement">return</span> {
      <span class="synConstant">'class_count'</span>: class_count,
      <span class="synConstant">'label2index'</span>: label2index,
      <span class="synConstant">'index2label'</span>: index2label,
      <span class="synConstant">'labels'</span>: labels,
      <span class="synConstant">'features'</span>: features,
      <span class="synConstant">'sentences'</span>:sentences,
      <span class="synConstant">'input_len'</span>: vectorian.max_tokens_len,
      <span class="synConstant">'vectorian'</span>:vectorian,
      <span class="synConstant">'account'</span>:account
  }

<span class="synStatement">def</span> <span class="synIdentifier">TextPreprocess</span>(df):
  <span class="synStatement">for</span> i <span class="synStatement">in</span> df.index:
    sen = df.loc[i,<span class="synConstant">'sentence'</span>]
    sen = mojimoji.han_to_zen(sen)
    sen = re.sub(<span class="synConstant">r'\d+'</span>,<span class="synConstant">'0'</span>,sen)
    df.loc[i,<span class="synConstant">'sentence'</span>] = sen.replace(<span class="synConstant">'</span><span class="synSpecial">\u3000</span><span class="synConstant">'</span>,<span class="synConstant">''</span>)
  <span class="synStatement">return</span> df

<span class="synStatement">def</span> <span class="synIdentifier">MakeFeatures</span>(df):
  vectorian = SentencePieceVectorian()

  features = []
  sentences = []
  accounts = []
  <span class="synStatement">for</span> feature,account <span class="synStatement">in</span> <span class="synIdentifier">zip</span>(df[<span class="synConstant">'sentence'</span>],df[<span class="synConstant">'account_name'</span>]):
    f = vectorian.fit(feature).indices
    features.append(f)
    sentences.append(feature)
    accounts.append(account)

  features = pad_sequences(features, maxlen=vectorian.max_tokens_len)

  <span class="synStatement">return</span> features,sentences,vectorian,accounts
</pre>


<p>では、ここまでの前処理を流します。</p>

<pre class="code lang-python" data-lang="python" data-unlink>data = PreprocessData(df,dirname) <span class="synComment"># dirnameは、出力結果などを入れたいpath入れてください</span>
</pre>


<p>次はtrain_test_splitを行いますが、先ほども記述した通り通常の手法ではリークするので、以下のようにしました。
（上述の通りGroupKFoldの実施で回避できる）</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">CollectData</span>(data,account):
  features = []
  sentences = []
  labels = []
  
  <span class="synStatement">for</span> ac <span class="synStatement">in</span> account:
    where_ = np.where(np.array(data[<span class="synConstant">'account'</span>]) == ac)
    features.extend(np.array(data[<span class="synConstant">'features'</span>])[where_])
    sentences.extend(np.array(data[<span class="synConstant">'sentences'</span>])[where_])
    labels.extend(np.array(data[<span class="synConstant">'labels'</span>])[where_])
  <span class="synStatement">return</span> np.array(features),np.array(sentences),np.array(labels)

train_account,test_account = train_test_split(<span class="synIdentifier">list</span>(<span class="synIdentifier">set</span>(data[<span class="synConstant">'account'</span>])),test_size=<span class="synConstant">0.2</span>,random_state=<span class="synConstant">1</span>)
train_account,val_account = train_test_split(train_account,test_size=<span class="synConstant">0.25</span>,random_state=<span class="synConstant">1</span>)

train_features,train_sen,train_labels = CollectData(data,train_account)
val_features,val_sen,val_labels = CollectData(data,val_account)
test_features,test_sen,test_labels = CollectData(data,test_account)
</pre>


<p>通常のデータセットであれば、以下のようにすることでデータの分割が行えます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>(train_features,val_features,
 train_labels,val_labels,
 train_sen,val_sen) = train_test_split(data[<span class="synConstant">'features'</span>], data[<span class="synConstant">'labels'</span>], data[<span class="synConstant">'sentences'</span>], test_size=<span class="synConstant">0.2</span>, random_state=<span class="synConstant">1</span>)

(train_features,test_features,
 train_labels,test_labels,
 train_sen,test_sen) = train_test_split(train_features, train_labels, train_sen, test_size=<span class="synConstant">0.25</span>, random_state=<span class="synConstant">1</span>)
</pre>


<p>ここまででデータの整形が完了です。</p>

<h2 id="学習">学習</h2>

<p>次は、モデルの定義を行います。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">_create_model</span>(input_shape, hidden, class_count,vectorian):
    input_tensor = Input(input_shape)
    common_input = vectorian.get_keras_layer(trainable=<span class="synIdentifier">True</span>)(input_tensor)
    x1 = SeqSelfAttention(name=<span class="synConstant">'attention'</span>)(common_input)
    x1 = Bidirectional(LSTM(hidden))(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    x1 = Dense(<span class="synConstant">32</span>)(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    x1 = Dense(<span class="synConstant">16</span>)(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    output_tensor = Dense(class_count, activation=<span class="synConstant">'softmax'</span>, name=<span class="synConstant">'class'</span>)(x1)

    model = Model(input_tensor, output_tensor)
    model.compile(loss=<span class="synConstant">'categorical_crossentropy'</span>, optimizer=<span class="synConstant">'nadam'</span>, metrics=[<span class="synConstant">'acc'</span>])

    <span class="synStatement">return</span> model

hidden = <span class="synConstant">356</span>
model = _create_model(train_features[<span class="synConstant">0</span>].shape, hidden, data[<span class="synConstant">'class_count'</span>],data[<span class="synConstant">'vectorian'</span>])
model.summary()
</pre>


<p>作成したモデルにデータを流して学習を進めます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>model_filename=<span class="synConstant">'{0}/model.h5'</span>.format(dirname)

history = model.fit(train_features, train_labels,
                    epochs=<span class="synConstant">50</span>,
                    batch_size=<span class="synConstant">32</span>,
                    validation_data=(val_features, val_labels),
                    shuffle=<span class="synIdentifier">False</span>,
                    callbacks = [
                        EarlyStopping(patience=<span class="synConstant">5</span>, monitor=<span class="synConstant">'val_acc'</span>, mode=<span class="synConstant">'max'</span>),
                        ModelCheckpoint(filepath=model_filename, monitor=<span class="synConstant">'val_acc'</span>, mode=<span class="synConstant">'max'</span>, save_best_only=<span class="synIdentifier">True</span>)
                    ])
</pre>


<h2 id="評価出力">評価・出力</h2>

<p>ModelCheckpointで保存したmodelを読み取り、さらにSelf-Attentionの結果を得られるようにします。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> keras.models <span class="synPreProc">import</span> load_model
model = load_model(model_filename, custom_objects=SeqSelfAttention.get_custom_objects())
model = Model(inputs=model.input, outputs=[model.output, model.get_layer(<span class="synConstant">'attention'</span>).output])
</pre>


<p>modelにtest dataを入れて結果を取得します。</p>

<pre class="code lang-python" data-lang="python" data-unlink>out = model.predict(test_features)

y = out[<span class="synConstant">0</span>] <span class="synComment"># 予測labelのsoftmaxが入っている</span>
weight = out[<span class="synConstant">1</span>] <span class="synComment"># Self-Attentionのweighが入っている</span>

pred = np.argmax(y,<span class="synConstant">1</span>) <span class="synComment"># 予測値</span>
<span class="synIdentifier">max</span> = np.max(y,<span class="synConstant">1</span>) <span class="synComment"># 信頼値</span>

df_y = pd.DataFrame(np.array([np.argmax(test_labels,<span class="synConstant">1</span>),pred,<span class="synIdentifier">max</span>*<span class="synConstant">100</span>]).T,columns=[<span class="synConstant">'true'</span>,<span class="synConstant">'pred'</span>,<span class="synConstant">'trust'</span>]) <span class="synComment"># 結果をまとめておくと精度確認に使える</span>
</pre>


<p>精度の確認を行います。</p>

<p>ただ、testを入力し得られた結果を出力するだけでは精度が得られなかったので、信頼値が高いものだけを選別し、出力するようにしました。
信頼値を90~55の間で出力し、<b>最もAccuracyが高い時の信頼値以上のものを出力</b>としました。</p>

<p> 一方で信頼値を上げすぎるとわずかな出力しか得られないので、元のtestデータ数の1/3はデータ数が出力として確保できるような条件を加えました。</p>

<pre class="code lang-python" data-lang="python" data-unlink>report = classification_report(pred, np.argmax(test_labels,<span class="synConstant">1</span>),output_dict=<span class="synIdentifier">True</span>,target_names=[data[<span class="synConstant">'index2label'</span>][i] <span class="synStatement">for</span> i <span class="synStatement">in</span> [<span class="synConstant">0</span>,<span class="synConstant">1</span>]])
FirstReport_df = pd.DataFrame(report).T

<span class="synIdentifier">print</span>(FirstReport_df)
FirstReport_df.to_csv(dirname+<span class="synConstant">'NotCutReport.csv'</span>)

<span class="synComment"># 信頼値が高い予測だけを出力とすることで確からしいものだけをみる</span>
AppSupport = FirstReport_df.loc[<span class="synConstant">'app'</span>,<span class="synConstant">'support'</span>] <span class="synComment"># 予測した数を取得</span>
DisappSupport = FirstReport_df.loc[<span class="synConstant">'disapp'</span>,<span class="synConstant">'support'</span>]

<span class="synStatement">for</span> UpperLimit <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synConstant">90</span>,<span class="synConstant">55</span>,-<span class="synConstant">1</span>):
  max_acc = <span class="synConstant">0</span>
  <span class="synStatement">for</span> i <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synConstant">50</span>,UpperLimit,<span class="synConstant">1</span>):
    df_y_cut = df_y[df_y.trust &gt; i]
    report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class="synIdentifier">True</span>)
    report_df = pd.DataFrame(report).T
    acc = report_df.loc[<span class="synConstant">'accuracy'</span>,<span class="synConstant">'precision'</span>]
    <span class="synStatement">if</span> max_acc &lt; acc:
      max_acc = acc
      max_i = i
  df_y_cut = df_y[df_y.trust &gt; max_i]
  report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class="synIdentifier">True</span>,target_names=[data[<span class="synConstant">'index2label'</span>][i] <span class="synStatement">for</span> i <span class="synStatement">in</span> [<span class="synConstant">0</span>,<span class="synConstant">1</span>]])
  report_df = pd.DataFrame(report).T
  <span class="synStatement">if</span> (report_df.loc[<span class="synConstant">'app'</span>,<span class="synConstant">'support'</span>] &gt; HighSupport/<span class="synConstant">3</span>) <span class="synStatement">and</span> (report_df.loc[<span class="synConstant">'disapp'</span>,<span class="synConstant">'support'</span>] &gt; LowSupport/<span class="synConstant">3</span>):
    <span class="synComment"># 元の予測値の1/3のデータ数が確保できていればクリア</span>
    <span class="synIdentifier">print</span>(<span class="synConstant">'UpperLimit:'</span> + <span class="synIdentifier">str</span>(UpperLimit))
    <span class="synIdentifier">print</span>(<span class="synConstant">'max_i:'</span> + <span class="synIdentifier">str</span>(max_i))
    <span class="synIdentifier">print</span>(report_df)
    report_df.to_csv(dirname+<span class="synConstant">'Report.csv'</span>)
    <span class="synStatement">break</span>
</pre>


<p>最後にSelf-AttentionのWeightをcsvで出力します。</p>

<p>得られた出力結果は、予測値-承認と真値-承認、予測値-承認と真値-不承認、予測値-不承認と真値-承認、予測値-不承認と真値-不承認のように予測値と真値の結果に応じて4つに分けてcsvで出力するようになっています。</p>

<pre class="code lang-python" data-lang="python" data-unlink>app_app = pd.DataFrame([])
app_disapp = pd.DataFrame([])
disapp_app = pd.DataFrame([])
disapp_disapp = pd.DataFrame([])

<span class="synStatement">for</span> i <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synIdentifier">len</span>(test_features)):
  input_text = test_sen[i]
  tokens = data[<span class="synConstant">'vectorian'</span>].tokenizer._tokenizer.encode_as_pieces(input_text)

  conf = out[<span class="synConstant">0</span>][i] * <span class="synConstant">100</span>
  wei = out[<span class="synConstant">1</span>][i]

  <span class="synStatement">if</span> np.max(conf) &lt;= max_i:
    <span class="synStatement">continue</span>

  pred = [data[<span class="synConstant">'index2label'</span>][np.argmax(conf)]]
  labels = [data[<span class="synConstant">'index2label'</span>][np.argmax(test_labels[i])]]

  weights = [w.max() <span class="synStatement">for</span> w <span class="synStatement">in</span> wei[-<span class="synIdentifier">len</span>(tokens):]]

  df = pd.DataFrame([tokens, weights], index=[<span class="synConstant">'token'</span>, <span class="synConstant">'weight'</span>]).T

  mean = np.asarray(weights).mean()
  <span class="synStatement">for</span> j <span class="synStatement">in</span> df.index:
    <span class="synStatement">if</span> df.loc[j,<span class="synConstant">'weight'</span>] - mean &lt;= <span class="synConstant">0</span>:
      df.loc[j,<span class="synConstant">'weight'</span>] = <span class="synConstant">0</span>
    <span class="synStatement">else</span>:
      df.loc[j,<span class="synConstant">'weight'</span>] = df.loc[j,<span class="synConstant">'weight'</span>] - mean
  
  pred += df.token.values.tolist()
  labels += df.weight.values.tolist()

  final = pd.DataFrame(np.array([pred,labels]).T,columns=[<span class="synConstant">'pred'</span>,input_text])

  <span class="synStatement">if</span> (pred[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>):
    app_app = pd.concat([app_app,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'app'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'disapp'</span>):
    app_disapp = pd.concat([app_disapp,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'disapp'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>):
    disapp_app = pd.concat([disapp_app,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'disapp'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'diaspp'</span>):
    disapp_disapp = pd.concat([disapp_disapp,final],<span class="synConstant">1</span>)

app_app.to_csv(dirname+<span class="synConstant">'app_app.csv'</span>,index=<span class="synIdentifier">False</span>)
app_disapp.to_csv(dirname+<span class="synConstant">'app_disapp.csv'</span>,index=<span class="synIdentifier">False</span>)
disapp_app.to_csv(dirname+<span class="synConstant">'disapp_app.csv'</span>,index=<span class="synIdentifier">False</span>)
disapp_disapp.to_csv(dirname+<span class="synConstant">'disapp_disapp.csv'</span>,index=<span class="synIdentifier">False</span>)
</pre>


<h1 id="まとめ">まとめ</h1>

<p>Self-Attentionを用いて無料リスティングの不承認理由を解き明かそうと分析しました。
しかし、<b>title,descriptionのみからは承認と不承認を分類することができず、不承認理由の解明には貢献できせんでした。</b></p>

<p>Self-Attentionとデータセットの相性が悪いという可能性も考えられるので、tfidf+lgbも試みましたが、こちらもうまくいきませんでした。やはりこちらの結果からもtitle,descriptionのみからは承認と不承認を分類することができないということが考えられます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作の gem の名前を考えるのは難しい]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/03/07/202519</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/03/07/202519"/>
        <updated>2021-03-07T11:25:19.000Z</updated>
        <summary type="html"><![CDATA[<h2>自作の gem の名前を変えたい。</h2>

<p><code>my_api_client</code> という自作の gem がありまして、<a href="https://ryz310.hateblo.jp/search?q=my_api_clien">このブログでは何度も紹介している</a> んですが、ニッチすぎるのか宣伝が下手すぎるのか、一向に使ってみた、という噂を聞きません (´・ω・｀)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client" title="ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client">github.com</a></cite></p>

<p>まあ弊社のプロダクトの中ではガッツリ使ってるんで別にそれは良いんですが、もう少しまともな名前にならんのかね、というコメントを頂きます。
いい機会だしちゃんと良い名前付けようと思って考えました。どうせなら自分が好きなゲームからいい名前付けたいな、と思って『Luida（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>）』という名前が浮かびました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8">ドラクエ</a> III のあれです。</p>

<p><figure class="figure-image figure-image-fotolife" title="ここはルイーダの店"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20201004/20201004001621.jpg" alt="f:id:ryz310:20201004001621j:plain:w300" title="" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>ここは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店。旅人たちが仲間を求めてあつまる出会いと別れの酒場よ。</figcaption></figure></p>

<p><code>my_api_client</code> は <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client を簡単に作ったりテストしたりするための gem なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CB%C1%B8%B1%BC%D4">冒険者</a>を登録して一緒に旅する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店のイメージがピッタリだなーと思ったんですよね。とはいえ gem の名前を変えるのって面倒だしそのうちやろう、って思ってたら半年くらい経っちゃいましたけどね。上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店の画像ってわざわざ <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a> 版の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8III">ドラクエIII</a> 買ってスクショ撮ったんですが、その日付が 2020/10/04 でした 😇</p>

<p>多分そのうちやります（フラグ）</p>

<h2>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client v0.20.0 をリリースしました 🚀</h2>

<p>gem の名前は変わらないけどアップデートはされていく。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Freleases%2Ftag%2Fv0.20.0" title="Release v0.20.0 (Mar 07, 2021) · ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.20.0">github.com</a></cite></p>

<p>元々 <code>my_api_client</code> には <code>#pageable_get</code> (alias: <code>#pget</code>) というメソッドがあり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/REST%20API">REST API</a> のレスポンス <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> に含まれる URL を順に辿ってリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トする <code>Enumerator</code> を取得することが出来ます。機能自体は実相してテストもしてあるものの、実際のプロダクトで使う機会がなく長いこと日の目を見なかったんですが、この度ついに弊プロダクトで利用する機会が訪れたのでチームのエンジニアに使ってもらってるんですが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/RSpec">RSpec</a> を書く際のスタブ化が特にサポートされていなくてテストしづらい問題がありました。</p>

<p>今回のアップデートでは、この <code>#pageable_get</code> に対応するスタブ化をサポートしています。 <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md#pageable-option">詳しい解説は README.jp.md にも書いた</a> んですが、せっかくなのでブログにも転記しておきます。まあ文章で説明されても実際に使ってみないとピンと来ないのはわかってますけどね。。。</p>

<hr />

<p><code>#pageable_get</code>  (<code>#pget</code>) を使った実装用に <code>pageable</code> というオプションが利用できます。
<code>pageable</code> に設定する値は <code>Enumerable</code> である必要があります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: [
      { <span class="synConstant">page</span>: <span class="synConstant">1</span> },
      { <span class="synConstant">page</span>: <span class="synConstant">2</span> },
      { <span class="synConstant">page</span>: <span class="synConstant">3</span> },
    ],
  }
)

<span class="synType">MyPaginationApiClient</span>.new.pagination.each <span class="synStatement">do</span> |<span class="synIdentifier">response</span>|
  response.page <span class="synComment">#=&gt; 1, 2, 3</span>
<span class="synStatement">end</span>
</pre>


<p>なお、 <code>Enumerable</code> の各値にはここまで紹介した <code>response</code>, <code>raise</code>, <code>Proc</code> など全てのオプションが利用可能です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: [
      { <span class="synConstant">response</span>: { <span class="synConstant">page</span>: <span class="synConstant">1</span> } },
      { <span class="synConstant">page</span>: <span class="synConstant">2</span> },
      -&gt;(params) { { <span class="synConstant">page</span>: <span class="synConstant">3</span>, <span class="synConstant">user_id</span>: params[<span class="synConstant">:user_id</span>] } },
      { <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>::<span class="synType">IamTeapot</span> },
    ],
  }
)
</pre>


<p>また、 <code>Enumerator</code> を使えば無限に続くページネーションを定義することもできます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: <span class="synType">Enumerator</span>.new <span class="synStatement">do</span> |<span class="synIdentifier">y</span>|
      <span class="synStatement">loop</span>.with_index(<span class="synConstant">1</span>) <span class="synStatement">do</span> |<span class="synIdentifier">_</span>, <span class="synIdentifier">i</span>|
        y &lt;&lt; { <span class="synConstant">page</span>: i }
      <span class="synStatement">end</span>
    <span class="synStatement">end</span>,
  }
)
</pre>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ指向アプリケーションデザイン 第三章 旅行記]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/04/180304</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/04/180304"/>
        <updated>2021-03-04T09:03:04.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="http://blog.hatena.ne.jp/kano-e/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:kano-e</a> です。</p>

<p>先日 <a href="https://developer.feedforce.jp/entry/2021/03/02/172959">データ指向アプリケーションデザイン 第二章 旅行記</a> という記事を公開しました。<br />
今日はその続き、第三章です。</p>

<p>第三章も第二章と同じく、地図への書き込みという形で読書記録を作りました。</p>

<p>第三章の章題は「ストレージと抽出」です。<br />
その旅路は以下の画像の通り。</p>

<p><figure class="figure-image figure-image-fotolife" title="データ指向アプリケーションデザイン 第三章 旅行記"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191216/20191216212951.jpg" alt="f:id:kano-e:20191216212951j:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>データ指向アプリケーションデザイン 第三章 旅行記</figcaption></figure></p>

<p>第三章では分散データ洋に浮かぶ島を舞台に、トランザクション共和国のログストラクチャ、B-Tree領、そして分析王国のデータウェアハウス領まで旅をしました。</p>

<p>この旅の記録が、ツールの選定やチューニングの際の道標になるのでは、と思います。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51T+k4VRzpL.jpg" class="hatena-asin-detail-image" alt="データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理" title="データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/">データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/Martin%20Kleppmann" class="keyword">Martin Kleppmann</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/07/18</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>よろしければ第二章の記録もどうぞ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F03%2F02%2F172959" title="データ指向アプリケーションデザイン 第二章 旅行記 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2021/03/02/172959">developer.feedforce.jp</a></cite></p>

<p>それでは、みなさま、良い旅を！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ指向アプリケーションデザイン 第二章 旅行記]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/02/172959</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/02/172959"/>
        <updated>2021-03-02T08:29:59.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは！
<a href="http://blog.hatena.ne.jp/kano-e/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:kano-e</a> です。</p>

<p>今日は『データ指向アプリケーションデザイン』という本の読書記録を公開しにきました。</p>

<p>こちらの本、章毎にその章を象徴するような地図が挿絵として挿入されています。<br />
地図が描かれている本て良いですよね。主人公たちの物語が進む旅に、地図を眺めに戻って「今この辺りかな」なんて思いを馳せたりするのが楽しくて、好きです。</p>

<p>というわけで、この『データ指向アプリケーションデザイン』でも、そのように「今はこの地図のこの辺りだなあ」なんて思いながら読み進めていました。</p>

<p>その読書記録、あるいは旅の記録が以下の画像です。</p>

<p><figure class="figure-image figure-image-fotolife" title="データ指向アプリケーションデザイン 第二章 旅行記"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191210/20191210215742.jpg" alt="f:id:kano-e:20191210215742j:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>データ指向アプリケーションデザイン 第二章 旅行記</figcaption></figure></p>

<p>第二章の章題は「データモデルとクエリ言語」。<br />
様々なデータモデルを俯瞰して眺めるような旅になりました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51T+k4VRzpL.jpg" class="hatena-asin-detail-image" alt="データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理" title="データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/">データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/Martin%20Kleppmann" class="keyword">Martin Kleppmann</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/07/18</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>アプリケーションは常に変化し続けます。その中で、どのようにデータというものと向き合ってゆくのか。そんな内容が書かれている面白い本です。<br />
ぜひ一緒にこの本を旅しましょう。</p>

<p>旅の記録を書きとめるのに使ったホワイトボードはこちら。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B00V47UVK2/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41AGC8LpKML.jpg" class="hatena-asin-detail-image" alt="nu board (ヌーボード) A4判 NGA403FN08" title="nu board (ヌーボード) A4判 NGA403FN08"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B00V47UVK2/hatena-blog-22/">nu board (ヌーボード) A4判 NGA403FN08</a></p><ul><li><span class="hatena-asin-detail-label">発売日:</span> 2015/04/01</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>このタイプの nu board には透明シートがあるので、そのシートの下に地図のコピーを置いて、文字や旅路を辿った線は透明シートの上に書いています。<br />
大きくてのびのび書き込めて便利です。</p>

<p>それではみなさん、良い旅を！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJob の retry_on に jitter というオプションがあるの知ってますか？]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/03/02/113927</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/03/02/113927"/>
        <updated>2021-03-02T02:39:27.000Z</updated>
        <summary type="html"><![CDATA[<p>僕は知らなかったです (・∀・)</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> で ActiveJob の retry_on が同時に発火されるの何とかしたいなーと思って調べてたら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6 からは jitter というオプションが指定できるようになってて、デフォルトでリトライ間隔を 15% ランダマイズしてくれるとの事。Rate Limit の回避とかで便利。 <a href="https://t.co/kpIx6YVFEq">https://t.co/kpIx6YVFEq</a></p>&mdash; サトウリョウスケ (@ryosuke_sato) <a href="https://twitter.com/ryosuke_sato/status/1365707024357466115?ref_src=twsrc%5Etfw">February 27, 2021</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2>jitter とは</h2>

<p><a href="https://github.com/rails/rails/blob/5aaaa1630a/activejob/CHANGELOG.md#rails-610-december-09-2020">Rails 6.1 から追加されたオプション</a> で、 <code>retry_on</code> の待ち時間に対して任意の割合でバラけさせてくれるようになります（デフォルト 15% ）。</p>

<blockquote><p><a href="https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on">ActiveJob::Exceptions::ClassMethods - retry_on</a></p>

<p><code>:jitter</code> - A random delay of wait time used when calculating backoff. The default is 15% (0.15) which represents the upper bound of possible wait time (expressed as a percentage)</p></blockquote>

<h3>実装を確認してみた</h3>

<p>このバラけさせ方が待ち時間に対して増えるのか減るのかが気になって実装を見てみました。増える方向でバラけるようです。
例えば <code>wait: 60.seconds</code> で <code>jitter: 0.5</code> の場合だと、最大 <code>90</code> 秒の待ち時間となります。</p>

<p>うっかり <code>100.0</code> とか指定すると最大 10000% 待ち時間が加算されちゃいそうです。
間違えて指定しないようにご注意下さい🙏</p>

<pre class="code rb" data-lang="rb" data-unlink>delay = seconds_or_duration_or_algorithm.to_i
delay_jitter = determine_jitter_for_delay(delay, jitter)
delay + delay_jitter</pre>


<p>📝 jitter の計算処理は <a href="https://github.com/rails/rails/blob/35e9812dfcb030d4c986532e7672ad8f8f95286f/activejob/lib/active_job/exceptions.rb#L132-L155">このあたり</a></p>

<h3>どういう場面で使うの？</h3>

<p>この機能が無かった従来だと、リトライ処理が一斉に起動してしまうという問題がありました。</p>

<p>例えば外部のサービスに <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トするような Job を作ったとします。<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Rate Limit 超過の例外をハンドリングして、 <code>retry_on</code> で N 分後にリトライするように実装します。
この時、 1000 件の Job が同時に実行され 900 件が Rate Limit 超過となった場合、N 分後に 900 件の Job が一斉にリトライされてしまい、再び 800 件がエラーとなってしまう。
これが何度も繰り返される、という現象が起こってました。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.1 以前だと回避できないの？</h3>

<p>従来の ActiveJob でも一応回避策はあって、 <code>wait</code> に <code>Proc</code> を与えてランダムな待ち時間を返すような処理を書くことで似たような動作は可能です。</p>

<pre class="code rb" data-lang="rb" data-unlink>retry_on SomeError, wait: -&gt; { rand(60..90).seconds }</pre>


<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> (第4世代) 買っちゃった</h2>

<p><figure class="figure-image figure-image-fotolife" title="iPad Air (第4世代)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210302/20210302102542.jpg" alt="f:id:ryz310:20210302102542j:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption><a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> (第4世代)</figcaption></figure></p>

<p>近日中に <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> Pro の新型が出るとの噂があるが、軽い <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> がほしかったので問題 🍆 （知らなかったけどね）</p>

<p>🔗 <a href="https://iphone-mania.jp/news-350190/">新型iPad Pro搭載A14X/A14Zチップの処理能力はM1チップに匹敵か - iPhone Mania</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[RuboCop で違反してるコードを自動的に修正する PR 作ってくれたら嬉しいやろ。できるでそれ。]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/02/23/222720</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/02/23/222720"/>
        <updated>2021-02-23T13:27:20.000Z</updated>
        <summary type="html"><![CDATA[<p>久々の更新は Rubocop Challenger の話です。</p>

<p>このブログでは触れたこと無かったですが、 <a href="https://github.com/ryz310/rubocop_challenger">そういう gem</a> も作ってます。
自動的に <code>.rubocop_todo.yml</code> から  <code>Cop supports --auto-correct.</code> になってる Cop を拾ってきて PR 作ってくれるやつです。</p>

<p>ちょうど hey 社の CTO の藤村さんが同じ事をやっていてちょっとバズってたんですが、自分の gem 使ってほしかったなーと地味に思ってたりします。自分が世の中に対してアピールが足りてなさすぎましたね 😇</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech.hey.jp%2Fentry%2F2020%2F10%2F23%2F111200" title="たまってしまった .rubocop_todo.yml をGitHub Actionsで継続的かつ自動的に倒す方法 - STORES Tech Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech.hey.jp/entry/2020/10/23/111200">tech.hey.jp</a></cite></p>

<p>何年か前に会社のブログで書いたりはしてたのでリンク貼っておく ✍</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F12%2F05%2F140000" title="まだ .rubocop_todo.yml で消耗してるの？ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/12/05/140000">developer.feedforce.jp</a></cite></p>

<h2>Rubocop Challenger v2.3.0 をリリースしました 🚀</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger%2Freleases%2Ftag%2Fv2.3.0" title="Release v2.3.0 · ryz310/rubocop_challenger" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger/releases/tag/v2.3.0">github.com</a></cite></p>

<p>とはいえ新機能は一つだけで、 auto-correct された Cop が SafeAutocorrect かどうかを教えてくれる、というものです。</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/pull/465">Add description whether the challenge is created by safe autocorrect or not by ryz310 &middot; Pull Request #465 &middot; ryz310/rubocop_challenger &middot; GitHub</a></p>

<p>こんな感じの PR が作成されます。（画像は動作確認で作ったものなので、実際の <code>Style/Alias</code> は常に <code>SafeAutocorrect: true</code> になります）</p>

<p><img src="https://user-images.githubusercontent.com/3985540/108836759-94096800-7614-11eb-8fb9-cb311711e120.png" alt="Add description whether the challenge is created by safe autocorrect or not by ryz310 · Pull Request #465 · ryz310/rubocop_challenger" />
<img src="https://user-images.githubusercontent.com/3985540/108847589-392b3d00-7623-11eb-8c09-e5192edbbd80.png" alt="Add description whether the challenge is created by safe autocorrect or not by ryz310 · Pull Request #465 · ryz310/rubocop_challenger" /></p>

<p>ぜひお試し下さい 👍</p>

<h2>つぎやりたいこと</h2>

<p>先日 <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> が auto-merge 機能をリリースしましたね。自分は即全部の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>で有効化しました ✅</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.blog%2Fchangelog%2F2021-02-04-pull-request-auto-merge-is-now-generally-available%2F" title="Pull request auto-merge is now generally available - GitHub Changelog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.blog/changelog/2021-02-04-pull-request-auto-merge-is-now-generally-available/">github.blog</a></cite></p>

<p>次やりたい機能としては <code>SafeAutocorrect: true</code>  の場合とかは auto-merge を有効化した PR を作るようにしたいんですよね。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> の GraphQL <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> でこの機能を有効化できるらしいです。</p>

<blockquote><p>GraphQL APIs will be rolling out later this week. The pull request webhook event also now includes actions that indicate when auto-merge is enabled or disabled.</p></blockquote>

<p>また時間ある時にでも調べます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI で docker build するときの Empty continuation lines will become errors in a future release. という warning への対処方法]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/17/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/17/110000"/>
        <updated>2021-02-17T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>Dockerfile を読みやすくするために <code>\</code> とコメントを駆使してみたら CircleCI で warning が出て一瞬焦ったので記事を書いてみました。</p>

<ul class="table-of-contents">
    <li><a href="#CircleCI-で-docker-build-する時の-warning">CircleCI で docker build する時の warning</a></li>
    <li><a href="#warning-が出たのは-Docker-のバグ">warning が出たのは Docker のバグ</a></li>
    <li><a href="#CircleCI-の-Docker-のデフォルトバージョンは-17090-ce">CircleCI の Docker のデフォルトバージョンは 17.09.0-ce</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="CircleCI-で-docker-build-する時の-warning">CircleCI で docker build する時の warning</h2>

<p>例えば以下のような Dockerfile があったとします。</p>

<pre class="code lang-dockerfile" data-lang="dockerfile" data-unlink><span class="synStatement">FROM </span>amazonlinux:2

<span class="synStatement">ENV </span>RUBY_VERSION=2.7.2 \
    BUNDLER_VERSION=2.2.9 \
    TZ=/usr/share/zoneinfo/Asia/Tokyo

<span class="synStatement">RUN </span>\
<span class="synComment">    # Install mysql-community-devel</span>
    yum install -y yum-utils &amp;&amp; \
    yum localinstall -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm &amp;&amp; \
    yum-config-manager --enable mysql57-community &amp;&amp; \
    yum-config-manager --disable mysql80-community &amp;&amp; \
    yum install -y mysql-community-devel &amp;&amp; \
    yum remove -y mysql80-community-release yum-utils &amp;&amp; \
    \
<span class="synComment">    # Install ruby</span>
    yum install -y <span class="synConstant">&quot;https://github.com/feedforce/ruby-rpm/releases/download/${RUBY_VERSION}/ruby-${RUBY_VERSION}-1.el7.centos.x86_64.rpm&quot;</span> &amp;&amp; \
    printf <span class="synConstant">&quot;install: --no-document\nupdate: --no-document\n&quot;</span> &gt; /etc/gemrc &amp;&amp; \
    gem install -v <span class="synConstant">&quot;$BUNDLER_VERSION&quot;</span> bundler
</pre>


<p>これを使って CircleCI で docker build すると、<code>Empty continuation lines will become errors in a future release.</code> という warning が出てしまいます。</p>

<p><figure class="figure-image figure-image-fotolife" title="docker build 時の warning"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215173356.png" alt="f:id:tsub511:20210215173356p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>docker build 時の warning</figcaption></figure></p>

<p>普通に読むと、何もコマンドを実行していない <code>\</code> だけの行やコメントだけの行を消した方が良いのかな？と受け取ってしまいがちですが、これは実は Docker 側のバグでした。</p>

<h2 id="warning-が出たのは-Docker-のバグ">warning が出たのは Docker のバグ</h2>

<p>本来はただの空行だけの場合に warning を出したかったようですが、コメントが書かれた行も warning が出てしまっているようです。</p>

<p>以下に書かれているように、Docker 17.10 で修正済みとのことです。</p>

<blockquote><p>Thanks for reporting; this issue was resolved through #35004, which is included in Docker 17.10 and up.</p>

<p>I'll close this issue because this was resolved, but feel free to continue the conversation 👍</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fissues%2F35387" title="False positive &quot;Empty continuation lines will become errors in a future release.&quot; · Issue #35387 · moby/moby" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/moby/moby/issues/35387">github.com</a></cite></p></blockquote>

<p>ただ、Docker 17.10 というと 2017/10 リリースのバージョンですので、2021/02 現在でまだバグが残っているのはおかしいです。</p>

<p>CircleCI の Docker のバージョンを確認してみましょう。</p>

<h2 id="CircleCI-の-Docker-のデフォルトバージョンは-17090-ce">CircleCI の Docker のデフォルトバージョンは 17.09.0-ce</h2>

<p>CircleCI 内で docker build を実行するためには <code>setup_remote_docker</code> が必要です。</p>

<p><code>setup_remote_docker</code> によって CircleCI のジョブのホスト VM で Docker Engine が起動しますが、そこで使われている Docker Engine のバージョンは 17.09.0-ce でした。</p>

<p><figure class="figure-image figure-image-fotolife" title="CircleCI の Docker Engine バージョン"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215175709.png" alt="f:id:tsub511:20210215175709p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>CircleCI の Docker Engine バージョン</figcaption></figure></p>

<p>Docker のバグが修正されたのは 17.10 ですので、確かにまだバグが残っているバージョンです。</p>

<p>さて CircleCI の <code>setup_remote_docker</code> ですが、実はデフォルトでは 17.09.0-ce が使われるようです。</p>

<blockquote><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215174427.png" alt="f:id:tsub511:20210215174427p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://circleci.com/docs/2.0/building-docker-images/#docker-version">https://circleci.com/docs/2.0/building-docker-images/#docker-version</a></p></blockquote>

<h2 id="まとめ">まとめ</h2>

<p>Dockerfile で <code>\</code> だけの行やコメントだけの行がある時に CircleCI で docker build すると <code>Empty continuation lines will become errors in a future release.</code> という warning が出るのは Docker のバグと CircleCI の <code>setup_remote_docker</code> のデフォルトバージョンが古い、という合わせ技によって起きていました。</p>

<p>warning 自体は Docker のバグだったので無視で良いですが、古いバージョンを使い続けるのはあまり良くない気がします。</p>

<p>基本的にはデフォルトを使いたいところですが、17.09.0-ce だと色々な機能が使えないですし、上述したバグもあるので <code>setup_remote_docker</code> を使うときは version を指定することをおすすめします。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker-compose での MySQL の疎通確認で telnet を使う時に自動でコネクションを切る]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/16/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/16/110000"/>
        <updated>2021-02-16T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>TELNET プロトコルには全く馴染みがないのですが、今回たまたま使う機会があり、かつ調べても割と見つけられない情報だったので記事を書いてみました。</p>

<ul class="table-of-contents">
    <li><a href="#curl-で-TELNET-プロトコルを使う">curl で TELNET プロトコルを使う</a></li>
    <li><a href="#ユースケース">ユースケース</a></li>
    <li><a href="#解説">解説</a></li>
</ul>

<h2 id="curl-で-TELNET-プロトコルを使う">curl で TELNET プロトコルを使う</h2>

<p>curl は HTTP/HTTPS 以外のプロトコルも使うことができます。</p>

<p>curl のドキュメントを確認すると、サポートしているプロコトルは <code>DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP</code> のようです。</p>

<pre class="code" data-lang="" data-unlink>$ man curl # in macOS

curl(1)                                                                                                                    Curl Manual                                                                                                                    curl(1)



NAME
       curl - transfer a URL

SYNOPSIS
       curl [options / URLs]

DESCRIPTION
       curl is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The command
       is designed to work without user interaction.

       curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will make your head spin!

       curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.
...</pre>


<p>例えば以下のように指定することで TELNET プロトコルで対象のサーバーに接続することが可能です。</p>

<pre class="code" data-lang="" data-unlink>$ curl telnet://localhost:3306</pre>


<h2 id="ユースケース">ユースケース</h2>

<p>docker-compose ではコンテナ間の依存関係を <code>depends_on</code> で定義できますが、コンテナ内でサーバーなどが立ち上がるまでは待ってくれません。</p>

<p>そこで、以下のドキュメントに書いてあるような方法でコンテナ間で依存しているサーバーに対するヘルスチェックを行うことで解決できます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.docker.com%2Fcompose%2Fstartup-order%2F" title="Control startup and shutdown order in Compose" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.docker.com/compose/startup-order/">docs.docker.com</a></cite></p>

<p>実際には以下のスクリプトで MySQL サーバーの起動を待ってから別のコンテナを実行するような仕組みにしていました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synIdentifier">host</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span>
<span class="synStatement">shift</span>
<span class="synIdentifier">cmd</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>

<span class="synStatement">until mysql -h &quot;</span><span class="synPreProc">$host</span><span class="synStatement">&quot; -u root -e '</span><span class="synConstant">show databases</span><span class="synStatement">' &gt; /dev/null </span><span class="synConstant">2</span><span class="synStatement">&gt;&amp;</span><span class="synConstant">1</span><span class="synStatement">; do</span>
  <span class="synStatement">&gt;&amp;</span><span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is unavailable - sleeping</span><span class="synStatement">&quot;</span>
  <span class="synStatement">sleep</span> <span class="synConstant">1</span>
<span class="synStatement">done</span>

<span class="synStatement">&gt;&amp;2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is up - executing</span><span class="synStatement">&quot;</span>
<span class="synStatement">exec</span> <span class="synPreProc">$cmd</span>
</pre>


<p>ただ、この方法だと mysql コマンドがコンテナ内にインストールされている必要があります。</p>

<p>本番環境でのコンテナの実行を考慮すると、mysql のクライアントはインストールする必要がなかったので mysql コマンド以外の方法で MySQL サーバーの起動を確認する必要がありました。</p>

<p>そこで、ベースイメージの都合でたまたま curl がインストールされていたので curl の TELNET プロトコルを使うことにしました。</p>

<p>変更後のスクリプトが以下になります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synIdentifier">host</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span>
<span class="synStatement">shift</span>
<span class="synIdentifier">cmd</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>

<span class="synStatement">until echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">quit</span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">| curl telnet://</span><span class="synPreProc">$host</span><span class="synStatement">:3306 &gt; /dev/null </span><span class="synConstant">2</span><span class="synStatement">&gt;&amp;</span><span class="synConstant">1</span><span class="synStatement">; do</span>
  <span class="synStatement">&gt;&amp;</span><span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is unavailable - sleeping</span><span class="synStatement">&quot;</span>
  <span class="synStatement">sleep</span> <span class="synConstant">1</span>
<span class="synStatement">done</span>

<span class="synStatement">&gt;&amp;2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is up - executing</span><span class="synStatement">&quot;</span>
<span class="synStatement">exec</span> <span class="synPreProc">$cmd</span>
</pre>


<p>変更したのは 7 行目のみで、mysql コマンドを curl に置き換えています。</p>

<p>こうすることで mysql のクライアントをインストールせずに MySQL サーバーが起動するのを待ってから別のコンテナを実行することができるようになりました。</p>

<h2 id="解説">解説</h2>

<p>例えば以下のように実行すると、TELNET プロトコルを使って疎通確認ができます。</p>

<pre class="code" data-lang="" data-unlink>$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=1 mysql
$ curl -s -o /dev/null telnet://localhost:3306
</pre>


<p>ただしこのままだと Ctrl+C などでコネクションを切るまで curl が実行されたままになります。</p>

<p>TELNET プロトコルは対話型であるため、コネクションを張りっぱなしになるという認識です。</p>

<p>Ctrl+C が必要ということは、上述したスクリプトでは使えません。</p>

<p>ではどうすれば疎通確認後に自動でコネクションを切れるでしょうか。</p>

<p>実は以下のように <code>quit</code> を curl に標準入力で渡すことで解決できます。</p>

<pre class="code" data-lang="" data-unlink>$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=1 mysql
$ echo &#39;quit&#39; | curl -s -o /dev/null telnet://localhost:3306</pre>


<p><code>quit</code> とは何かというと、telnet コマンドでは <code>quit</code> というコマンドを指定することで telnet の接続を切ることができます。</p>

<pre class="code" data-lang="" data-unlink>$ man telnet # in macOS with brew install telnet

TELNET(1)                 BSD General Commands Manual                TELNET(1)

NAME
     telnet -- user interface to the TELNET protocol

SYNOPSIS
     telnet [-468EFKLNacdfruxy] [-S tos] [-X authtype] [-e escapechar] [-k realm] [-l user] [-n tracefile] [-s src_addr] [host [port]]

DESCRIPTION
     The telnet command is used to communicate with another host using the TELNET protocol.  If telnet is invoked without the host argument, it enters command mode, indicated by its prompt (``telnet&gt;&#39;&#39;).  In this mode, it accepts and executes the commands
     listed below.  If it is invoked with arguments, it performs an open command with those arguments.

     Options:

...

quit       Close any open TELNET session and exit telnet.  An end of file (in command mode) will also close a session and exit.</pre>


<p>そして <code>quit</code> を使った telnet コマンドを自動的に終了するための方法が以下の記事で紹介されていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgyoon%2Fitems%2Fdeb7ee62fbe4e9c1a907" title="Telnetの自動化 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/gyoon/items/deb7ee62fbe4e9c1a907">qiita.com</a></cite></p>

<p>上記の記事を参考に、curl でも同様の方法を試してみたら動いた、ということになります。</p>

<p>ただし、curl に標準入力を渡すことで TELNET プロトコルにコマンドを渡すことができる、という挙動自体は curl のドキュメントを確認しても見つけられませんでした。</p>

<p>公式の情報で裏が取れない限りは当記事の事例のように開発環境でのみ使った方が良いかもしれません。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[全ての esa 新着記事を読みきれないので、最近はこの方法を使ってる]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/15/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/15/110000"/>
        <updated>2021-02-15T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。最近好きな YouTuber はシバターです。シバターかわいいよ...。シバター...</p>

<p>フィードフォースでは先日紹介したとおり、ドキュメント共有ツールに <a href="https://esa.io/">esa</a> を使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F02%2F03%2F110000" title="変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>メンバー数は 90、デイリーアクティブメンバーは 69 くらいです。2/10 の新着記事数は 106 でした。情報共有が活発な会社で、体感でもとても多いです。</p>

<p>全ての新着記事と記事へのコメントは Slack の <code>#esa-notify</code> に通知されます。そこを全部読めば追えはしますが、いかんせんこの数です。</p>

<p>真面目に全部読むと、私の場合はかける時間に見合わないなと感じたので、最近は esa の検索を利用した方法を使っています。</p>

<ul class="table-of-contents">
    <li><a href="#使っている方法">使っている方法</a><ul>
            <li><a href="#フォローした人の新着記事を読む">フォローした人の新着記事を読む</a></li>
            <li><a href="#エゴサーチする">エゴサーチする</a></li>
            <li><a href="#気になるキーワードに言及した新着記事を読む">気になるキーワードに言及した新着記事を読む</a></li>
            <li><a href="#日報以外の最近更新された記事を読む">日報以外の最近更新された記事を読む</a></li>
            <li><a href="#直近の記事を読む">直近の記事を読む</a></li>
        </ul>
    </li>
    <li><a href="#公式ドキュメント">公式ドキュメント</a></li>
    <li><a href="#ちょっとした悩み">ちょっとした悩み</a></li>
    <li><a href="#所感">所感</a></li>
    <li><a href="#おまけ-ボツにした方法">おまけ: ボツにした方法</a></li>
</ul>

<h2 id="使っている方法">使っている方法</h2>

<h3 id="フォローした人の新着記事を読む">フォローした人の新着記事を読む</h3>

<p>検索クエリの例:</p>

<pre><code>@alice OR @bob OR @sapp sort:created-desc
</code></pre>

<p>🔖 ブラウザのブックマーク: <a href="https://feedforce.esa.io/posts?q=%40alice+OR+%40bob+OR+%40sapp+sort%3Acreated-desc">Follow</a></p>

<p>上の例では alice, bob, sapp をフォローしているイメージです。</p>

<p>社長やプロダクトオーナーをフォローして、最近の会社の状況を把握するようにしています。他、自分が関心がある人もフォローしています。</p>

<p>メンバーは固定ではなくたまに入れ替えます。現在 16 人をフォローしています。</p>

<h3 id="エゴサーチする">エゴサーチする</h3>

<p>検索クエリの例:</p>

<pre><code>マスタカ -@me OR ますたか -@me OR masutaka -@me OR 増田 -@me sort:created-desc
</code></pre>

<p>🔖 ブラウザのブックマーク: <a href="https://feedforce.esa.io/posts?q=%E3%83%9E%E3%82%B9%E3%82%BF%E3%82%AB+-%40me+OR+%E3%81%BE%E3%81%99%E3%81%9F%E3%81%8B+-%40me+OR+masutaka+-%40me+OR+%E5%A2%97%E7%94%B0+-%40me+sort%3Acreated-desc">Egosearch</a></p>

<p>「マスタカ」「ますたか」「masutaka」「増田」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>

<p>空メンション <code>masutaka</code> やアイコン絵文字 <code>:@masutaka:</code>、<code>&lt;!-- Boku ha masutaka nari. --&gt;</code> のような HTML コメントも捕捉出来ます。👁</p>

<h3 id="気になるキーワードに言及した新着記事を読む">気になるキーワードに言及した新着記事を読む</h3>

<p>検索クエリの例:</p>

<pre><code>looker -@me sort:created-desc
</code></pre>

<p>🔖 ブラウザのブックマーク: <a href="https://feedforce.esa.io/posts?q=looker+-%40me+sort%3Acreated-desc">Search Looker</a></p>

<p>「looker」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>

<h3 id="日報以外の最近更新された記事を読む">日報以外の最近更新された記事を読む</h3>

<p>検索クエリの例:</p>

<pre><code>-category:日報 sort:updated-desc
</code></pre>

<p>🔖 ブラウザのブックマーク: <a href="https://feedforce.esa.io/posts?q=-category%3A%E6%97%A5%E5%A0%B1+sort%3Aupdated-desc">日報以外</a></p>

<p><code>日報/</code> カテゴリ以外で、最近更新された記事をたまに読んでいます。新着記事でないことがポイントです。良さそうな WIP 記事を先取りできることがあります。🤗</p>

<h3 id="直近の記事を読む">直近の記事を読む</h3>

<p>退勤後とかは、新着記事一覧 <code>/posts</code> も見ます。</p>

<h2 id="公式ドキュメント">公式ドキュメント</h2>

<p>ここまで使った検索クエリは、公式ドキュメント「<a href="https://docs.esa.io/posts/104">help/記事の検索方法</a>」に書かれています。</p>

<p>OR 検索よりも AND 検索のほうが優先度が高いとは書かれていないので、行間を読む必要があります。括弧は使えないので、前述の「エゴサーチする」は自分にとって難易度が高かったです。</p>

<p>esa の皆様、その節はサポートありがとうございました。🙏</p>

<h2 id="ちょっとした悩み">ちょっとした悩み</h2>

<p>スマホだと「フォローした人の新着記事を読む」が検索対象のメンバーアイコンで埋まるので、結構スクロールしないと記事にたどり着けません。メンバーアイコンと記事の境界も曖昧で、スクロールしすぎることがあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="スマホだと数スクロールがメンバーアイコンで埋まる"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210211/20210211183124.png" alt="f:id:masutaka26:20210211183124p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>スマホだと数スクロールがメンバーアイコンで埋まる</figcaption></figure></p>

<p>もう少しメンバーアイコンのサイズが小さいと良いと思います。ﾁﾗｯﾁﾗｯ</p>

<h2 id="所感">所感</h2>

<p>全ての新着記事を読む代わりに、テーマを決めた複数の方法で esa 記事を読み、かける時間を減らしました。２ヶ月ほど使っており、なかなか満足しています。</p>

<p>ただ、関心外のことが入って来づらくなることは、特にこのフルリモートワーク下では怖さを感じます。</p>

<p>カッチリやらずに、たまに <code>#esa-notify</code> を覗けばよいのですけどね。記事へのコメントだけを通知する Slack チャンネルでも作れば良いのかしら？</p>

<h2 id="おまけ-ボツにした方法">おまけ: ボツにした方法</h2>

<p>コメントもエゴサーチしようとしましたが、なんか期待通りの振る舞いではなかったです。</p>

<pre><code>comment:マスタカ OR comment:ますたか OR comment:masutaka OR comment:増田 sort:created-desc
</code></pre>

<p>コメント本文はきちんと検索出来ているようですが、検索結果はあくまで（コメント単位ではなく）記事単位なので、すでに読んだ記事のことが多いからかな？</p>

<p>他の方法で網羅できているようなので、まあいいかあと思いました。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform の terraform-provider-datadog で古い source から新しい source に更新する際の Warning を解消する方法]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/09/114110</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/09/114110"/>
        <updated>2021-02-09T02:41:10.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS の開発チーム でインフラエンジニア をしている <a href="http://blog.hatena.ne.jp/mayuki123/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mayuki123/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mayuki123</a> です。</p>

<p>ソーシャルPLUS のインフラ環境は基本的に Terraform を利用して管理をしています。今回は、Terraform の <a href="https://github.com/DataDog/terraform-provider-datadog">terraform-provider-datadog</a> で <code>terraform init</code> を実行時の Warning を解消するのに頭を悩ませたので書き残しておきます。</p>

<h2>発生していた事象</h2>

<p>Datadog Provider を利用している所で <code>terraform init</code> を実行すると、下記のWarning が表示されるようになりました。</p>

<pre class="code" data-lang="" data-unlink>Warning: Additional provider information from registry

The remote registry returned warnings for
registry.terraform.io/terraform-providers/datadog:
- For users on Terraform 0.13 or greater, this provider has moved to
DataDog/datadog. Please update your source in required_providers.</pre>


<p>Datadog Provider を導入した時は、 Source に <code>terraform-providers/datadog</code> を指定する必要がありましたが、現在は <code>DataDog/datadog</code> が推奨との事で変更する必要があるようです。Terraform のコードで Source を変更すればいとも簡単に解決するだろうとこの時の私は思っていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210208/20210208175250.png" alt="f:id:mayuki123:20210208175250p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>Terraform の コードを修正後に <code>terraform init</code> を実行して Provider を更新した後に、 <code>terraform providers</code> を実行してみると State では <code>registry.terraform.io/terraform-providers/datadog</code> を使い続ける事象に陥りました。</p>

<pre class="code" data-lang="" data-unlink>% terraform providers
Providers required by configuration:
.
├── provider[registry.terraform.io/hashicorp/aws] 3.27.0
├── provider[registry.terraform.io/datadog/datadog] 2.20.0

/// 中略 ///

Providers required by state:

    provider[registry.terraform.io/hashicorp/aws]

    provider[registry.terraform.io/terraform-providers/datadog]

    provider[terraform.io/builtin/terraform]</pre>


<p> Terraform v0.14.x で追加されるようになった <code>.terraform.lock.hcl</code> には Provider として <code>registry.terraform.io/datadog/datadog</code> が新しく追加はされますが、 <code>registry.terraform.io/terraform-providers/datadog</code> が残り続けていました。亡霊なのでしょうか。</p>

<h2>解決方法</h2>

<p><code>terraform state replace-provider</code> コマンドを実行する事で、State 上の既存のリソースに対して Terraform の Datadog provider の Source として <code>DataDog/datadog</code> を利用するように変更する必要がありました。</p>

<pre class="code" data-lang="" data-unlink>terraform state replace-provider \
&#39;registry.terraform.io/terraform-providers/datadog&#39; \
&#39;registry.terraform.io/datadog/datadog&#39;</pre>


<p>実行すると下記のような確認が表示されるので、 <code>yes</code> を入力すると更新されます。</p>

<pre class="code" data-lang="" data-unlink>% terraform state replace-provider &#39;registry.terraform.io/terraform-providers/datadog&#39; &#39;registry.terraform.io/datadog/datadog&#39; 
Terraform will perform the following actions:

  ~ Updating provider:
    - registry.terraform.io/terraform-providers/datadog
    + registry.terraform.io/datadog/datadog

Changing 1 resources:

  datadog_integration_aws.xxxx

Do you want to make these changes?
Only &#39;yes&#39; will be accepted to continue.

Enter a value: yes</pre>


<p><code>terraform state replace-provider</code> コマンドを実行後に <code>terraform init</code> を実行すると Warning は解消されました。Terraform provider の Source の変更はあまり発生しない気はしますが、同じような事象にハマった時にはご参考になればと思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/03/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/03/110000"/>
        <updated>2021-02-03T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。夜の散歩（意味深）に勤しむ毎日です。</p>

<p>フィードフォースではドキュメント共有ツールには <a href="https://esa.io/">esa</a> と <a href="https://www.google.com/intl/ja/docs/about/">Google ドキュメント</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を、コミュニケーションツールには <a href="https://slack.com/">Slack</a> を採用しています。</p>

<p>情報共有はかなり活発で、2021/2/1 現在の esa 記事数は 81,324 です<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<ul class="table-of-contents">
    <li><a href="#現在のカテゴリ構成と課題">現在のカテゴリ構成と課題</a></li>
    <li><a href="#チームのスピードを上げるための大原則">チームのスピードを上げるための大原則</a></li>
    <li><a href="#チームのスピードを上げるための情報整理">チームのスピードを上げるための情報整理</a><ul>
            <li><a href="#1-Flow-型と-Stock-型の記事を理解する">1. Flow 型と Stock 型の記事を理解する</a></li>
            <li><a href="#2-基本は-Flow-型の記事にする">2. 基本は Flow 型の記事にする</a></li>
            <li><a href="#3-議事録カテゴリは出来るだけ作らない">3. 議事録カテゴリは出来るだけ作らない</a></li>
            <li><a href="#4-Slack-に流れていく情報も-Flow-型の記事にする">4. Slack に流れていく情報も Flow 型の記事にする</a></li>
            <li><a href="#5-使い続けられる情報を-Stock-記事として引き上げる">5. 使い続けられる情報を Stock 記事として引き上げる</a></li>
            <li><a href="#6-整理を頑張らないことで整理の難易度が低くなった">6. 整理を頑張らないことで整理の難易度が低くなった</a></li>
            <li><a href="#7-esa-を全ての情報の起点にする">7. esa を全ての情報の起点にする</a></li>
        </ul>
    </li>
    <li><a href="#それをチームでやるのは難しすぎない">それをチームでやるのは難しすぎない？</a></li>
    <li><a href="#esa-は難しい">esa は難しい</a></li>
    <li><a href="#esa-の本当の正体">esa の本当の正体</a></li>
    <li><a href="#esa-への要望">esa への要望</a></li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#esa-公式アカウントからのアドバイス">esa 公式アカウントからのアドバイス</a></li>
    <li><a href="#コラム">コラム</a><ul>
            <li><a href="#記事のカテゴリ整理を頑張らない理由">記事のカテゴリ整理を頑張らない理由</a></li>
            <li><a href="#Flow-カテゴリをどこまで許容するか">Flow カテゴリをどこまで許容するか</a></li>
        </ul>
    </li>
</ul>

<h2 id="現在のカテゴリ構成と課題">現在のカテゴリ構成と課題</h2>

<p>トップカテゴリは厳密にルール化されていて、これらの種類以外のカテゴリが増えることはありません。</p>

<ul>
<li><code>日報/</code>

<ul>
<li><code>2021/02/01 (月)/masutaka</code> といった記事が置かれる</li>
<li>曜日がないなど、型から外れた日報は小人さんによって速やかに修正される。Bot 並に早いw</li>
</ul>
</li>
<li><code>プロダクト1/</code>

<ul>
<li>実際には <code>Feedmatic</code> などのプロダクト名が入る</li>
</ul>
</li>
<li>︙</li>
<li><code>プロダクトN/</code></li>
<li><code>プロジェクト/</code>

<ul>
<li>期間が決まっている系のプロジェクトカテゴリが並ぶ</li>
</ul>
</li>
<li><code>チーム/</code>

<ul>
<li>人事や情報セキュリティなどのチーム系カテゴリが並ぶ</li>
</ul>
</li>
<li><code>コミュニティ/</code>

<ul>
<li>技術系や読書会などのコミュニティ系カテゴリが並ぶ</li>
</ul>
</li>
<li><code>ノウハウ/</code>

<ul>
<li>各種ツールのノウハウ系カテゴリが並ぶ</li>
</ul>
</li>
<li><code>Feedforce Inc./</code>

<ul>
<li>会社全体に関係する記事が置かれる</li>
</ul>
</li>
<li><code>Users/</code></li>
<li><code>Templates/</code></li>
<li><code>Archived/</code></li>
</ul>


<p>例えば「プロダクト1」の下は、議事録系を除き基本的に <a href="https://docs.esa.io/posts/298">Stock 型の記事</a>になっており、「マニュアル」カテゴリの下にはさらに 15 の子カテゴリが生えているとします。</p>

<ul>
<li><code>プロダクト1/</code>

<ul>
<li><code>議事録/</code></li>
<li><code>開発/</code></li>
<li><code>コンサルティング/</code></li>
<li><code>マーケティング/</code></li>
<li><code>インシデント/</code></li>
<li><code>ナレッジ/</code></li>
<li><code>マニュアル/</code>

<ul>
<li>子カテゴリ数は 15</li>
</ul>
</li>
<li>︙</li>
<li><code>その他/</code></li>
</ul>
</li>
</ul>


<p>※ 複数のプロダクトから作った架空カテゴリです。</p>

<p>ここまでならよく整理されているように見えますが、実際は古くてメンテナンスされていない記事が多く、言ってしまえばノイズが多い状況です。情報共有されればされるほど、ノイズが増えてしまう悪循環です。</p>

<p>Slack に目を向けると、こちらもオープンではありますが、時にブログ記事並みのメッセージが投稿されることがあります。未読メッセージを読み進めると手が止まり、読み切るのが難しいと想像されます。</p>

<p><figure class="figure-image figure-image-fotolife" title="ブログ記事並みのメッセージ例。これで半分です。"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210202/20210202171748.png" alt="f:id:masutaka26:20210202171748p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>ブログ記事並みのメッセージ例。これで半分です。</figcaption></figure></p>

<p>細切れの情報も多く川の流れのようで、断片化した情報をつなぎ合わせるのは難しいと思います。</p>

<p>世の中には情報共有が足りないことに悩む組織は多いと思いますが、活発になったとしても、適切に整理されていなければその量に溺れてしまいます。</p>

<p>一方で、最近のコロナ禍もあって 10 年前と今とでは変化のスピードは上がっています。変化に強いチーム設計、つまりは変化に強い情報整理設計が重要です。これをやらなければ、チームのスピードは徐々に下がっていくでしょう。</p>

<h2 id="チームのスピードを上げるための大原則">チームのスピードを上げるための大原則</h2>

<p>私が社内で様々なプロダクトを渡り歩いた経験上、チームのスピードを上げるためには以下の 2 点が重要だと感じています。</p>

<ul>
<li>ノイズを減らす</li>
<li>情報を一ヶ所に集める</li>
</ul>


<p>マネージャーはこれらの阻害要因を減らす仕掛けを作る必要があります。</p>

<p>ただ、そういったことが得意な方ばかりではありません。むしろ情報量が一番多く、一番困っているのは彼らかもしれません。マネージャーに余裕がなければ、それがボトルネックとなりチームのスピードが下がります。</p>

<p>これからその対策を考察していきます。</p>

<h2 id="チームのスピードを上げるための情報整理">チームのスピードを上げるための情報整理</h2>

<p>はじめに書いておくと、出来るだけ整理を頑張らないことが重要です。</p>

<h3 id="1-Flow-型と-Stock-型の記事を理解する">1. Flow 型と Stock 型の記事を理解する</h3>

<p>まずは公式ドキュメント「<a href="https://docs.esa.io/posts/298">記事のストック・フローの分類と検索</a>」を読んで、Flow 型と Stock 型の記事の存在を知り、理解します。</p>

<h3 id="2-基本は-Flow-型の記事にする">2. 基本は Flow 型の記事にする</h3>

<p>全て Flow 型にするくらいの気持ちで記事を作ります。記事が多くなっても視界に入りづらいし、整理する必要もないためです。</p>

<p><figure class="figure-image figure-image-fotolife" title="Flow 型記事の例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131224825.png" alt="f:id:masutaka26:20210131224825p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Flow 型記事の例</figcaption></figure></p>

<p>書き捨ての記事であれば <code>プロダクト1/2021/02/01/タイトル</code>、今月中は更新する記事であれば <code>プロダクト1/2021/02/タイトル</code> で良いと思います。ただ、さすがに今年中更新する記事は Stock 型の記事にしたほうが良いと思います。</p>

<h3 id="3-議事録カテゴリは出来るだけ作らない">3. 議事録カテゴリは出来るだけ作らない</h3>

<p><code>プロダクト1/議事録/</code> のような議事録カテゴリはできるだけ作らず、<code>プロダクト1/2021/02/01/〇〇会議 議事録</code> のようなカテゴリとタイトルにします。議事録のような使い続けない記事を視界に入れるのは、どちらかと言えばノイズだからです。</p>

<p>社内で以下のような階層をよく見かけますが<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、一回限りの会議の置き場所に悩んでしまいます。</p>

<ul>
<li><code>プロダクト1/議事録/</code>

<ul>
<li><code>〇〇会議/YYYY/MM/DD/〇〇会議</code></li>
<li><code>プランニング/YYYY/MM/DD/プランニング</code></li>
</ul>
</li>
</ul>


<p><code>プロダクト1/議事録/20210201 〇×会議 議事録</code> のような自由なパターンも現れたりして、さらに悩ましくなります。</p>

<p>過去の議事録をたどる目的でカテゴリを分けたいのであれば、記事の最初に「議事録一覧はこちら」みたいな検索リンクがあれば十分でしょう。</p>

<p><figure class="figure-image figure-image-fotolife" title="「議事録一覧はこちら」の一例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210203/20210203114624.png" alt="f:id:masutaka26:20210203114624p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>「議事録一覧はこちら」の一例</figcaption></figure></p>

<p>それでも作りたい場合は <code>プロダクト1/議事録/〇〇会議/2021/02/01/〇〇会議 議事録</code> のような記事名にして、後から <code>プロダクト1/2021/02/01/〇〇会議 議事録</code> に一括変換して視界から消せるように、設計するのが良いと思います。</p>

<p>一括変換の仕方は公式ドキュメント「<a href="https://docs.esa.io/posts/207">記事のカテゴリを一括変更</a>」が分かりやすいです。</p>

<h3 id="4-Slack-に流れていく情報も-Flow-型の記事にする">4. Slack に流れていく情報も Flow 型の記事にする</h3>

<p>Slack にはブログ記事並みのメッセージが投稿されることがあります。</p>

<p>そうなりそうになったら迷わず <code>プロダクト1/2021/02/01/○○のお願い</code> といった Flow 型の記事を作り、その URL を Slack で共有します。</p>

<p>他の場面で引用したい時は意外とあるものですし、内容をあとで更新したいこともあります。Slack だと特にあとからの更新には不向きです。</p>

<p>何より当該記事をブラウザで開き、残りの Slack 未読メッセージをスイスイと読むことが出来ます。Slack に投稿されてしまうと、その長いメッセージを読みながら、他の channel に移動するのは億劫です。</p>

<h3 id="5-使い続けられる情報を-Stock-記事として引き上げる">5. 使い続けられる情報を Stock 記事として引き上げる</h3>

<p>結局のところ、ほとんどの情報は使い続けることはありません。具体的すぎるからです。そのような具体的な情報は寝かすことで、抽象度の高い情報、例えばカテゴリ名を炙り出せることがあります。</p>

<p>良いカテゴリ名が思いつかない時は、まだ抽象度が高くないと思うので、引き上げないほうが良いでしょう。</p>

<p>いくつかの Flow 記事をしばらく寝かしたら、あとから汎用的な抽象度の高い Stock 記事のアイディアが湧くこともあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="あとで Stock 記事として抽出する"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210201/20210201002905.png" alt="f:id:masutaka26:20210201002905p:plain" title="" class="hatena-fotolife" itemprop="image"></span></figure></p>

<h3 id="6-整理を頑張らないことで整理の難易度が低くなった">6. 整理を頑張らないことで整理の難易度が低くなった</h3>

<p>ここまででほとんどの記事は Flow 型の記事のはずです。冒頭に述べたノイズになるような記事は少なく、情報に溺れる確率は低いと思います。</p>

<p>使い回しが効かない具体的な情報を Flow 型の記事に追いやることで、整理の難易度を低くすることが出来ました。</p>

<h3 id="7-esa-を全ての情報の起点にする">7. esa を全ての情報の起点にする</h3>

<p>では、Google ドキュメントも同じようにしましょう！とは思っていません。esa を全ての情報の起点にする勢いで、適宜 Google ドキュメントにリンクを張ると良いでしょう。</p>

<p>Google ドキュメントのフォルダ整理は出来るだけやらないほうが良いです。時間がいくらあっても足りません。Google Drive はただの情報プールです。Google Drive 内検索も優秀です。</p>

<h2 id="それをチームでやるのは難しすぎない">それをチームでやるのは難しすぎない？</h2>

<p>そう思った方、正しい感覚です。</p>

<p>「チームのスピードを上げるための情報整理」は「私が考える esa 原理主義」に振り切って書きました。情報整理のスキルに関して少数精鋭チームでないと、運用するのは難しいと思います。</p>

<p>現在私は開発者 1 人、ビジネスメンバー 2 人のチームに所属しています。私主導でカテゴリを決めているので、これまで書いた方法で整理し、うまくいっている実感があります。</p>

<p><figure class="figure-image figure-image-fotolife" title="Flow 型の記事に対して、Stock 型の記事を少なく保てている"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231051.png" alt="f:id:masutaka26:20210131231051p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Flow 型の記事に対して、Stock 型の記事を少なく保てている。</figcaption></figure></p>

<p>そういえば初期は Flow 型の記事しか作りませんでした。</p>

<h2 id="esa-は難しい">esa は難しい</h2>

<p>フィードフォースでは 1 年半ほど前まで Qiita:Team を使っていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F08%2F22%2F141055" title="社内の情報共有ツールを Qiita:Team から esa に乗り換えました - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>Qiita:Team はほぼ Flow 型の記事しか書けないため、これまで話した問題は出てきませんでした。いや「表面化しなかった」が正確でしょう。</p>

<p>esa は Stock 型の記事も書けます。ブログと wiki が合体したようなツールなので、難しくないわけがありません。</p>

<p>wiki を書くためには抽象的思考が必要です。私の観測範囲では、半分以上の方は具体的思考に寄り過ぎているため、得意ではないという実感です。意識したことがないかもしれません。</p>

<h2 id="esa-の本当の正体">esa の本当の正体</h2>

<p>正直言って現在の esa は「情報整理のスキルに関して少数精鋭チーム」でないと、乗りこなすのは難しいと思います。</p>

<p>これに気づいた時、Ruby という言語に似ていると思いました。</p>

<p>Ruby は esa で採用されているプログラミング言語です。初心者はにこやかに迎えてくれますが、本番環境で使い続けるためには、コードで表現されていない振る舞いを読み解く必要があるなど、実は少数精鋭チーム向けの言語です。</p>

<p><a href="https://team.esa.io/">esa LLC</a> は少数精鋭チームのようなので、良くも悪くも「コンウェイの法則」が働いて、そのようなサービスになったのだと勝手に想像します。</p>

<h2 id="esa-への要望">esa への要望</h2>

<p>社員数 100 人オーバーが見えてくると、型（制約）の必要性を感じます。</p>

<ul>
<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？

<ul>
<li>例: <code>プロダクト1/</code> 以下での新規作成は、デフォルトカテゴリが <code>プロダクト1/YYYY/MM/DD/</code> になる</li>
</ul>
</li>
<li>フレームワーク的に、何らかのパターン以外のカテゴリを作れないようにする？</li>
<li>第一階層カテゴリ以下で、そのようなパターンを数種類から選べるようにする？</li>
</ul>


<p>どれも難しい話ですかね...？</p>

<p>現在社内で抱えている課題として「記事整理にハードルがある」は間違いなくあると思います。</p>

<ul>
<li>たくさんの記事を移動すると、<code>/posts</code> がその情報で埋まる<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li>
<li>移動しただけなのに、記事に自分の小さなアイコンが付く</li>
<li>そもそも記事を 1 つ 1 つ移動するのが大変</li>
<li>タイトルに入れてしまった日付をカテゴリにして...とかまですると、API を使わざるを得ない</li>
</ul>


<p>出来れば Windows のエクスプローラのようなカジュアルさで、且つ履歴が残るとうれしいです。</p>

<p>あと、要望したことはありますが、現在の「カテゴリ以下の記事全て」に加えて、「カテゴリ直下の記事」「アーカイブした記事」を切り替えるような機能が欲しいです。</p>

<p>イメージとしては、GitHub の UI に「カテゴリ直下の記事」を加えたものです。</p>

<p><figure class="figure-image figure-image-fotolife" title="In, On, Archived を切り替えられるイメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231704.png" alt="f:id:masutaka26:20210131231704p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>In, On, Archived を切り替えられるイメージ</figcaption></figure></p>

<p>「カテゴリ直下の記事」は <code>on:カテゴリ</code> で検索できますが、知っているユーザーはごく僅かです。</p>

<p>アーカイブの認知も怪しくて、古い記事が残る要因かもしれません。一部カテゴリではこんな工夫をしています。</p>

<p><figure class="figure-image figure-image-fotolife" title="アーカイブという手段を認知させている例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131232059.png" alt="f:id:masutaka26:20210131232059p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アーカイブという手段を認知させている例</figcaption></figure></p>

<p>難しいと思いますが、情報整理のスキルがそれほど高くなくても使える UI 設計をお願いしたいところです。🙏</p>

<p>もし、もっと詳しく私にヒアリングしたいなどあれば、masutaka@feedforce.jp または <a href="https://twitter.com/masutaka">@masutaka</a> の DM までお知らせ下さい。</p>

<h2 id="まとめ">まとめ</h2>

<p>私から見える、フィードフォースで抱えている情報整理の課題をまとめ、チームのスピードを上げるための整理方法を提案しました。</p>

<p>ただ、それは「私が考える esa 原理主義」に振り切っているため、チームで採用するのは難しいと思います。</p>

<p>カテゴリがデフォルト Flow 型になるなど、情報整理を頑張らず済む使い勝手になると、とてもうれしいです。</p>

<h2 id="esa-公式アカウントからのアドバイス">esa 公式アカウントからのアドバイス</h2>

<blockquote><ul>
<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？</li>
</ul>
</blockquote>

<p>こちらのアドバイスを頂いたので早速試しました。良さそうです！</p>

<p><blockquote data-conversation="none" class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">あるカテゴリ配下で &quot;Create a new post&quot; ボタンで記事を新規作成するときに、カテゴリが一致するFlowのテンプレートがあれば、そのテンプレートが自動的にプリセットされるという機能があります。（続く→）</p>&mdash; esa_io (@esa_io) <a href="https://twitter.com/esa_io/status/1356808249601712128?ref_src=twsrc%5Etfw">2021年2月3日</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </p>

<p><blockquote data-conversation="none" class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">例えば以下のテンプレートがあったとして<br><br>- Templates/カテゴリ1/YYYY/MM/DD/テンプレートA<br>- Templates/カテゴリ1/サブカテゴリ1/YYYY/MM/DD/テンプレートB<br><br>「カテゴリ1」配下で記事作成→ テンプレートA <br>「カテゴリ1/サブカテゴリ2」配下で記事作成 →テンプレートB <br><br>がそれぞれ自動適用されます</p>&mdash; esa_io (@esa_io) <a href="https://twitter.com/esa_io/status/1356808846379937795?ref_src=twsrc%5Etfw">2021年2月3日</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </p>

<p>後日アンサー記事も頂きました！「所感」にこの記事の感想が書いてあります。
<a href="https://docs.esa.io/posts/394">ProTip/2021/02/03/特定のカテゴリ配下の記事作成時に、テンプレートを適用する - docs.esa.io</a></p>

<h2 id="コラム">コラム</h2>

<p>自分の思いを書ききれないので、コラムに逃しました。(^^;</p>

<h3 id="記事のカテゴリ整理を頑張らない理由">記事のカテゴリ整理を頑張らない理由</h3>

<p>こんな理由からです。</p>

<ol>
<li>歴史が証明している</li>
<li>esa の検索がそこそこ優秀</li>
</ol>


<p>今では信じられないかもしれませんが、1990 年代の Yahoo! JAPAN は、人間のスタッフがウェブサイトの情報を収集してカテゴリ分類して登録する、ディレクトリ型検索サービスでした<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。今はロボット型検索が使われているのは周知のとおりです。</p>

<p>そのため Stock 型の記事だけを作り続けるといずれ破綻することは、<code>1</code> 歴史が証明していると言えます（やや大げさ）。</p>

<p><code>2</code> については、公式ドキュメント「<a href="https://docs.esa.io/posts/104">記事の検索方法</a>」にある検索クエリで、それなりに検索できます（諸説あり）。「<a href="https://docs.esa.io/posts/389">キーワード検索しやすい記事にするコツ</a>」も参考にすると良いでしょう。</p>

<h3 id="Flow-カテゴリをどこまで許容するか">Flow カテゴリをどこまで許容するか</h3>

<p>Flow カテゴリをどこまで許容するかは、悩ましいところです。</p>

<p>(a) 制約をつけずに自由に作ることを許容するか。</p>

<ul>
<li>プロダクト1

<ul>
<li>セールス

<ul>
<li>...</li>
<li>YYYY

<ul>
<li>MM

<ul>
<li>DD</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>開発

<ul>
<li>○○機能

<ul>
<li>YYYY

<ul>
<li>MM

<ul>
<li>DD</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>YYYY

<ul>
<li>MM

<ul>
<li>DD</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>YYYY

<ul>
<li>MM

<ul>
<li>DD</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>(b) 原理主義っぽく、１つの Flow カテゴリしか許容しないか。</p>

<ul>
<li>プロダクト1

<ul>
<li>セールス

<ul>
<li>...</li>
</ul>
</li>
<li>開発

<ul>
<li>...</li>
</ul>
</li>
<li>YYYY

<ul>
<li>MM

<ul>
<li>DD</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>(a) は職種横断的な情報共有を重視しないチームに合うと思います。中規模以上のチームです。</p>

<p>(b) は職種横断的な情報共有を重視するチームに合うと思います。小さなチームです。</p>

<p>はじめは (b) で作ってみて、やりづらくなってきたら (a) にすると良いでしょう。ただし、(a) の <code>プロダクト1/開発/○○機能/YYYY/MM/DD/</code> まで細かく Flow カテゴリを作るのは、把握が難しくなりそうですので、オススメはしません。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://workspace.google.co.jp/intl/ja/">Google Workspace</a>（旧称 G Suite）を契約しています。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>現在のメンバー数は 90、最古の記事は 2014/4/3 です。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>過去に推奨したことあります。ｽﾏﾇｽﾏﾇ&hellip;。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><code>Archived/</code> 以下への移動は更新日時が変わらず <code>/posts</code> に現れないので、<a href="https://docs.esa.io/posts/207">カテゴリ一括変更</a>と組み合わせれば、一応回避はできます。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>今回の件で調べたところ、その<a href="https://jp.techcrunch.com/2017/06/29/yahoo-to-shut-down-directory-search/">「Yahoo!カテゴリ」は2018年3月29日まで動いていた</a>ことを知りびっくりしました<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ruby 3.0 の「キーワード引数の分離」で委譲用のメソッドが壊れた場合の対応方法]]></title>
        <id>https://developer.feedforce.jp/entry/2021/01/29/121252</id>
        <link href="https://developer.feedforce.jp/entry/2021/01/29/121252"/>
        <updated>2021-01-29T03:12:52.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。</p>

<p>Ruby 3.0 の「<a href="https://bugs.ruby-lang.org/issues/14183">キーワード引数の分離</a>」が原因で委譲用のメソッドが壊れた場合、特に Ruby 2.6 ~ 3.0 で互換性を保ちながら対応する場合の日本語記事が見当たらなかったので、書かせていただきます。</p>

<h2>インスタンスメソッドが壊れた場合</h2>

<p>以下のコードは Ruby 3.0 より前のバージョンでは動きますが、3.0 からは <code>MyClass#other_method</code> の実行時に ArgumentError が起きるようになります。（2.7 の時も警告が出ます）</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyClass</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">delegating_method</span>(*args)
    other_method(*args)
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">other_method</span>(<span class="synConstant">value</span>:)
    p value
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synType">MyClass</span>.new.delegating_method(<span class="synConstant">value</span>: <span class="synSpecial">'</span><span class="synConstant">value</span><span class="synSpecial">'</span>)
</pre>


<p>こちらは公式の <a href="https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/#a-compatible-delegation">Separation of positional and keyword arguments in Ruby 3.0#a-compatible-delegation</a> や <a href="https://github.com/ruby/ruby2_keywords/">ruby2_keywords gem</a> や <a href="https://docs.ruby-lang.org/ja/latest/method/Module/i/ruby2_keywords.html">Module#ruby2_keywords</a> を参考に以下のようなコードで対応できます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyClass</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">delegating_method</span>(*args)
    other_method(*args)
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">other_method</span>(<span class="synConstant">value</span>:)
    p value
  <span class="synPreProc">end</span>

  <span class="synComment"># この 1 行を追加する</span>
  ruby2_keywords <span class="synConstant">:delegating_method</span> <span class="synStatement">if</span> respond_to?(<span class="synConstant">:ruby2_keywords</span>, <span class="synConstant">true</span>)
<span class="synPreProc">end</span>

<span class="synType">MyClass</span>.new.delegating_method(<span class="synConstant">value</span>: <span class="synSpecial">'</span><span class="synConstant">value</span><span class="synSpecial">'</span>)
</pre>


<p>ポイントは Ruby 2.7 や 3.0 でも旧来のスタイルで実行できるようにするための <code>Module#ruby2_keywords</code> が Ruby 2.6 以前では定義されてないので、<a href="https://docs.ruby-lang.org/ja/latest/method/Object/i/respond_to=3f.html">Object#respond_to?</a> などでそのケアをしてあげる必要があることです。</p>

<h2>クラスメソッドが壊れた場合</h2>

<p>こちらがこの記事を書いた目的です。</p>

<p>サンプルコードに現実味を持たせるためにインスタンスメソッドの例とは少し変えています。クラスメソッドで引数を受けて、そのまま委譲して初期化するようなコードです。</p>

<p>このコードも Ruby 3.0 からは ArgumentError が発生します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyClass</span>
  <span class="synPreProc">def</span> <span class="synConstant">self</span>.<span class="synIdentifier">delegating_method</span>(*args)
    new(*args)
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(<span class="synConstant">value</span>:)
    p value
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synType">MyClass</span>.delegating_method(<span class="synConstant">value</span>: <span class="synSpecial">'</span><span class="synConstant">value</span><span class="synSpecial">'</span>)
</pre>


<p>こちらはインスタンスメソッドの場合と違い、以下のように <code>class &lt;&lt; self</code> で特異クラスをオープンしてから、<code>Module#ruby2_keywords</code> の対応をしてあげる必要があります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyClass</span>
  <span class="synPreProc">def</span> <span class="synConstant">self</span>.<span class="synIdentifier">delegating_method</span>(*args)
    new(*args)
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(<span class="synConstant">value</span>:)
    p value
  <span class="synPreProc">end</span>

  <span class="synComment"># この 3 行を追加する</span>
  <span class="synPreProc">class</span> &lt;&lt; <span class="synConstant">self</span>
    ruby2_keywords <span class="synConstant">:delegating_method</span> <span class="synStatement">if</span> respond_to?(<span class="synConstant">:ruby2_keywords</span>, <span class="synConstant">true</span>)
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synType">MyClass</span>.delegating_method(<span class="synConstant">value</span>: <span class="synSpecial">'</span><span class="synConstant">value</span><span class="synSpecial">'</span>)
</pre>


<p><i>定義されたクラスメソッドの居場所が分からなくて、久しぶりに『<a href="https://www.oreilly.co.jp/books/9784873117430/">メタプログラミングRuby</a>』の 5 章を開きました。</i></p>

<p>Also see. <a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fdef.html#singleton_class">https://docs.ruby-lang.org/ja/latest/doc/spec=2fdef.html#singleton_class</a></p>

<h2>【おまけ】Ruby 2.6 ~ 3.0 で互換性を保たなくて良い場合</h2>

<p>公式の <a href="https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/#delegation-ruby-3">Separation of positional and keyword arguments in Ruby 3.0#delegation-ruby-3</a> の通りにやれば OK です。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google MyBusiness APIのGoクライアントを生成する]]></title>
        <id>https://developer.feedforce.jp/entry/2021/01/12/120000</id>
        <link href="https://developer.feedforce.jp/entry/2021/01/12/120000"/>
        <updated>2021-01-12T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、 <a href="http://blog.hatena.ne.jp/kogainotdan/">id:kogainotdan</a> です。</p>

<p>現在私は新規事業開発のチームで、飲食店支援のサービスの可能性を探索しています。</p>

<p>飲食店、ひいてはローカルビジネスの運営において、<a href="https://blog.feedmatic.net/2019-04-01-134512">集客施策として重要</a>とされるのがGoogleマイビジネスの活用です。</p>

<p>ナレッジパネルやローカル検索において表示されている情報は、ユーザーとしても見たことがある方が多いと思います。</p>

<p>喫緊の話題としては、緊急事態宣言の前後における営業時間や営業形態の変更の正確な反映が、見込み顧客の取りこぼしを防ぐと共に店舗自体への信頼感の醸成にも役立つものと考えられます。</p>

<p>そんなGoogleマイビジネスですが、Googleの他のサービス同様にAPIが存在します。</p>

<p>ただし、まだGeneral Availableではない様子で、<a href="https://developers.google.com/my-business/content/prereqs">フォームによる利用申請</a>が必要となるのですが、
Googleマイビジネスの管理画面で出来る操作の多くをサポートしており、ローカルビジネス関連のサービスを開発する際に重要なパーツとなり得ると思われます。</p>

<p>さて、そんなGoogle MyBusiness APIですが、公式に提供されているクライアントライブラリが<a href="https://developers.google.com/my-business/samples">Java, PHP, C#</a>の3種となっています。</p>

<p>他のGoogleのサービスと同様にDiscoveryドキュメントが提供されていますので、この3種以外の任意の言語のクライアントライブラリを生成することは可能と思われます。</p>

<p>そこで本稿では、Google MyBusiness APIのGolangクライアントライブラリの生成までのステップを記録したいと思います。</p>

<h2>Google API Discovery Service</h2>

<p><a href="https://developers.google.com/my-business/content/prereqs">公式ガイドの導入ドキュメント</a>に沿ってAPIを有効化し、<code>OAuth 2.0</code> の認証情報を取得すると、APIリクエストが発行出来るようになります。
(認証情報の取得は他のサービスと同様なので割愛します)</p>

<p>なお、APIの利用申請は<code>organization</code>毎に1つだけ許可されるようですのでご注意ください。</p>

<p>さて、前述のようにGoogle MyBusiness APIのクライアントライブラリは、<a href="https://developers.google.com/my-business/samples">Java, PHP, C#</a>の3種のみ提供されています。</p>

<p>この3種のいずれかでアプリケーションを開発する手も無くはないですが、すでに稼働している別の言語のコードがある場合など、APIの利用のためだけに別の言語のランタイムを導入するのは大仰に過ぎるというケースもあるかと思います。
(白状すると、私はこの3種のどれも書いたことがありません)</p>

<p>ところで上記のクライアントライブラリの紹介ページには、以下のようなことも書かれています。</p>

<blockquote><p>Google My Business API Discovery ドキュメントは、この API の個々のバージョンのインターフェースについて解説しています。このドキュメントは Google API Discovery Service とともにご利用ください。</p></blockquote>

<p>Swagger/Open API SpecificationやGraphQLなど、Web APIのクライアントは形式化された仕様から生成するのが一般的になっています。</p>

<p><a href="https://developers.google.com/discovery">Google API Discovery Serviceのサイト</a>に飛ぶと、</p>

<blockquote><p>Use the Google API Discovery Service to build client libraries</p>

<p>The Discovery API provides a list of Google APIs and a machine-readable "Discovery Document" for each API.</p></blockquote>

<p>とあり、これもそういった仕様の一つであることが伺えます。</p>

<h2>Google関連のAPIクライアントライブラリ</h2>

<p>ここでGoogleが提供する<a href="https://github.com/googleapis/google-api-go-client">各種サービスのAPIクライアントライブラリが集積されたレポジトリ</a>を見てみましょう。</p>

<p>何らかの形でこのDiscoveryドキュメントが利用されていることが<a href="https://github.com/googleapis/google-api-go-client/search?l=JSON&amp;q=discovery">見て取れます</a>。
Goほど分かりやすい形ではないですが、<a href="https://github.com/googleapis/google-api-ruby-client/search?l=YAML&amp;q=discovery">Ruby</a>や<a href="https://github.com/googleapis/google-api-dotnet-client/search?q=discovery">.NET</a>でも、同様に利用されていることが伺われます。</p>

<p>Google MyBusiness APIのドキュメントに示されている通り、このレポジトリにはGoogle MyBusiness APIのクライアントライブラリは置かれていません。</p>

<p>ただし<a href="https://github.com/googleapis/google-api-go-client/issues/597">Support for Bussiness Messaging private API? #597</a>に</p>

<blockquote><p>If you want to try out the generator and see if it works for you can.</p>

<p>You would need to clone this repo and generate from within it as the code it generates will rely upon some internal packages here.</p></blockquote>

<p>という回答が付いています。</p>

<p>internal packageを利用する必要があるものの、Discoveryドキュメントさえあれば、個々の開発者がクライアントライブラリを生成する道はありそうです。</p>

<h2>Google MyBusiness API クライアントライブラリの生成</h2>

<p>上述のIssueから参照されている<a href="https://github.com/googleapis/google-api-go-client/issues/283">Add instructions to generate services yourself #283</a>にあるように、同じレポジトリにコードジェネレータも置いてあるようです。</p>

<p>実態としては<a href="https://github.com/googleapis/google-api-go-client/blob/39bc9cc19fcd620129ddffe34a7531784d1dd793/google-api-go-generator/gen.go#L130-L183">Goのmain package</a>のようですので、forkしてGoogle MyBusiness APIのDiscoveryドキュメントを食わせて上げれば良さそうです。
公式に公開されたツールというわけではないようなので、ドキュメントなどは見当たりませんが、<code>--help</code>オプションで実行してあげるとサポートされているオプションが確認出来ます。</p>

<pre class="code" data-lang="" data-unlink>  -api string
        The API ID to generate, like &#39;tasks:v1&#39;. A value of &#39;*&#39; means all. (default &#34;*&#34;)
  -api_json_file string
        If non-empty, the path to a local file on disk containing the API to generate. Exclusive with setting --api.
  -api_pkg_base string
        Go package prefix to use for all generated APIs. (default &#34;google.golang.org/api&#34;)
  -base_url string
        (optional) Override the default service API URL. If empty, the service&#39;s root URL will be used.
  -build
        Compile generated packages.
  -cache
        Use cache of discovered Google API discovery documents. (default true)
  -copyright_year string
        Year for copyright. (default &#34;2021&#34;)
  -discoveryurl string
        URL to root discovery document (default &#34;https://www.googleapis.com/discovery/v1/apis&#34;)
  -gendir string
        Directory to use to write out generated Go files (default &#34;/Users/kogai/.gvm/pkgsets/go1.14/global/src/google.golang.org/api&#34;)
  -gensupport_pkg string
        Go package path of the &#39;api/internal/gensupport&#39; support package. (default &#34;google.golang.org/api/internal/gensupport&#34;)
  -googleapi_pkg string
        Go package path of the &#39;api/googleapi&#39; support package. (default &#34;google.golang.org/api/googleapi&#34;)
  -header_path string
        If non-empty, prepend the contents of this file to generated services.
  -htransport_pkg string
        Go package path of the &#39;api/transport/http&#39; support package. (default &#34;google.golang.org/api/transport/http&#34;)
  -install
        Install generated packages.
  -internaloption_pkg string
        Go package path of the &#39;api/option/internaloption&#39; support package. (default &#34;google.golang.org/api/option/internaloption&#34;)
  -option_pkg string
        Go package path of the &#39;api/option&#39; support package. (default &#34;google.golang.org/api/option&#34;)
  -output string
        (optional) Path to source output file. If not specified, the API name and version are used to construct an output path (e.g. tasks/v1).
  -publiconly
        Only build public, released APIs. Only applicable for Google employees. (default true)</pre>


<p><a href="https://github.com/googleapis/google-api-go-client/issues/283">Add instructions to generate services yourself #283</a>で指摘されている<code>api_json</code>などのオプションも確認出来ます。</p>

<p><a href="https://developer.feedforce.jp/entry/2020/12/04/100000">GitHub Actionsを使ったShopify テーマの自動デプロイ環境構築</a>という記事でも触れたのですが、私の管理しているmonorepoレポジトリはBazelでビルドターゲットを管理していますので、
Google MyBusiness APIのクライアントライブラリも、ビルド単位の一つとして扱っています。</p>

<pre class="code bazel" data-lang="bazel" data-unlink># WORKSPACE

# Discoveryドキュメントを取得する
http_file(
    name = &#34;mybusiness_api_go_schema&#34;,
    downloaded_file_path = &#34;mybusiness.json&#34;,
    sha256 = &#34;084e68d0fc746fe9d0ba105f6878b8eb208181f5ee1288e79c35a11684ec4a13&#34;,
    urls = [&#34;https://developers.google.com/my-business/samples/mybusiness_google_rest_v4p7.json&#34;],
)

# forkしてくる代わりにcloneしておく
new_git_repository(
    name = &#34;google_api_go_client&#34;,
    # non-bazelレポジトリなので、カスタムのビルドファイルを作っておく
    build_file = &#34;//:google_api_go_client.bazel&#34;,
    commit = &#34;074c16e73361434fc3d1f6ef62585d57b70a9d1b&#34;,
    remote = &#34;https://github.com/googleapis/google-api-go-client.git&#34;,
    shallow_since = &#34;1608641643 +0000&#34;,
)</pre>




<pre class="code bazel" data-lang="bazel" data-unlink># google_api_go_client.bazel
# ビルドに必要なのはinternal packageだけ
exports_files(
    [] + glob([&#34;internal/**/*.go&#34;]),
)</pre>




<pre class="code bazel" data-lang="bazel" data-unlink>load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_binary&#34;)
load(&#34;@build_bazel_rules_nodejs//:index.bzl&#34;, &#34;generated_file_test&#34;)

filegroup(
    name = &#34;gensupport&#34;,
    srcs = [
        &#34;@google_api_go_client//:internal/gensupport/buffer.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/doc.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/json.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/jsonfloat.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/media.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/params.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/resumable.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/retryable_linux.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/send.go&#34;,
        &#34;@google_api_go_client//:internal/gensupport/version.go&#34;,
    ],
)

# gazelle:ignore
go_binary(
    name = &#34;codegen&#34;,
    args = [&#34;-api_json_file=$(location @mybusiness_api_go_schema//file:mybusiness.json)&#34;],
    data = [
        &#34;:gensupport&#34;,
        &#34;@mybusiness_api_go_schema//file:mybusiness.json&#34;,
    ],
    embed = [
        &#34;@org_golang_google_api//google-api-go-generator&#34;,
    ],
    visibility = [&#34;//visibility:public&#34;],
)

generated_file_test(
    name = &#34;json&#34;,
    src = &#34;//packages/google-mybusiness-api-go/mybusiness/v4:mybusiness-api.json&#34;,
    generated = &#34;@mybusiness_api_go_schema//file:mybusiness.json&#34;,
)</pre>


<p>当初は単純にMakefileにcurlの実行などを書いていたのですが、Discoveryドキュメントを都度取得・クライアントライブラリを生成しているとCIが重くなるので、で適宜キャッシュさせるためにもBazelが効いています。</p>

<pre class="code makefile" data-lang="makefile" data-unlink>mybusiness/v4:
    npx bazelisk run -- //google-mybusiness-api-go:codegen \
        -gendir=&#34;$(CURDIR)&#34; \
                # internal以下に置かれたpackageではなく、手元に移したpackageを使う
        -gensupport_pkg=&#34;github.com/your-organization/your-repository/packages/google-mybusiness-api-go/mybusiness/gensupport&#34;
    cp -r $(BZL_BIN)/$(PKG)/codegen_/codegen.runfiles/google_api_go_client_internal/internal/gensupport $(CURDIR)/mybusiness</pre>


<p>最後の<code>generated_file_test</code>はクライアントライブラリの生成には直接関係しないのですが、同じレポジトリでTypeScriptのコードも管理している関係でJavaScript関係のBazel Ruleが導入されています。
ついでだったので、Discoveryドキュメントのスナップショットテストのようなこともしています。</p>

<h2>まとめ</h2>

<p>Google MyBusiness APIのGoクライアントライブラリの生成について書いてみました。
何かの参考になれば幸いです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[半期に1度の Engineer’s Principles Award 受賞者を紹介します]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/28/131042</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/28/131042"/>
        <updated>2020-12-28T04:10:42.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。人事の今岡と申します。Developer Blog への投稿は初めてで若干緊張しています。</p>

<p>先日行われたオンライン忘年会にて、半期に一度の「Engineer’s Principles Award 2020 Winter」の受賞者が発表されました。</p>

<p>アワードが始まって3回目となり、そろそろ社外にも発信していきたいなと思いまして、せっかくなのでこちらのブログでアワードを受賞したメンバーと表彰内容をご紹介しようと思います。</p>

<h2>Engineer’s Principles Award とは</h2>

<p>Engineer’s Principles とは、フィードフォースの開発メンバー向けに現場が主体となって設定した、5つの行動指針です。半期に一度、開発メンバー同士で投票を行い、行動指針の項目ごとに最も体現しているメンバーが選ばれ、開発本部長から表彰者が発表されます。</p>

<p>ちなみに、下記の5項目はつい先日アップデートされたばかりで、今年導入されたフルリモートワークという働き方も考慮した内容になりました。この話はまた別の機会に改めて発信しようと思います。</p>

<ul>
<li><b>Stay Humble</b>; 常に謙虚であるべし</li>
<li><b>Be Positive &amp; Proactive</b>; 常に肯定的・主体的であるべし</li>
<li><b>Be Prepared</b>; 常に来るべき機会に備えるべし</li>
<li><b>Share All</b>; 己の知見、試行、失敗、遍く共有すべし</li>
<li><b>Just Do It</b>; 全力でやりきるべし</li>
</ul>


<h2>受賞者紹介</h2>

<p>※表彰コメントは本来社内向けのものであるため一部変更させていただいています。人によって各種アカウントを載せています。</p>

<h3>🏆「Stay Humble; 常に謙虚であるべし」受賞者</h3>

<h4><a href="https://developer.feedforce.jp/archive/author/tmd45">@tmd45</a> さん</h4>

<p>表彰コメント：<br />
顧客への価値を最大化する中でエンジニアとしてカスタマーサクセスに関わるという会社としても新しいポジションを自分で選択し、サービスやチーム、それぞれの顧客の状況を客観的に捉え、自分が何を求められているか、顧客価値の最大化のために自分は何ができるかを考え抜いている姿勢は素敵です。</p>

<h4><a href="https://twitter.com/Azmin">＠azmin</a> さん</h4>

<p>表彰コメント：<br />
DF PLUSという、これまでの歴史や文脈が積み重なった、会社の売上の支えとなるプロダクトチームで日ごろから様々な課題を次々と解決しているなかで、難しい状況にあるときも全方位に対して物腰柔らかく一緒に課題解決していってもらっています。会社にとってとても貴重なメンバーです。</p>

<h3>🏆「Be Positive &amp; Proactive; 常に肯定的・主体的であるべし」受賞者</h3>

<h4><a href="https://github.com/kogai">@kogai</a> さん</h4>

<p>表彰コメント：<br />
新規事業において、顧客価値の最大化を常に見据えつつ、エンジニアとしてのみならず営業やマネージャーの課題も解決するために動くのは、新規事業のプロトタイピング段階では必須です。そういったアクションにハードルの高さを感じるエンジニアも多い中で、率先して全方位的に対応している姿は、まさにプロダクト立ち上げ期にあるべきエンジニアの行動指針そのものです。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/iamchawan">&#x8336;&#x7897; (@iamchawan) | Twitter</a>, <i class="blogicon-entry"></i> <a href="https://k9bookshelf.com/blogs/development">Blog</a></p>

<h4><a href="https://github.com/sukechannnn">@sukechannnn</a> さん</h4>

<p>表彰コメント：<br />
転換期を迎え、変化が激しいプロダクトチームで、どうすればプロダクトのみならずチームが前進できるかを考え抜いています。この先サービスを大きくする展望を持ちつつ、顧客価値を最大化するために今やるべきことを考える姿は、いかなるときも積極的・主体的に動くという行動指針の見本です。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/sukechannnn">sukechannnn (@sukechannnn) | Twitter</a></p>

<h3>🏆「Be Prepared; 常に来るべき機会に備えるべし」受賞者</h3>

<h4><a href="https://github.com/kogai">@kogai</a> さん</h4>

<p>表彰コメント：<br />
これまでフィードフォースでは取り組んでこなかった業態にチャレンジするプロジェクトにおいて、着々と開発を進めている点はまさに必要な準備をしてきた証拠だと思います。単純にコードを書くに留まらず、実際に Shopify でのショップ立ち上げなど、プロジェクト開始後の積み上げも他を圧倒する勢いで、まさに Be Prepared を継続しているのは小飼さんです。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/iamchawan">&#x8336;&#x7897; (@iamchawan) | Twitter</a>, <i class="blogicon-entry"></i> <a href="https://k9bookshelf.com/blogs/development">Blog</a></p>

<h4><a href="https://github.com/namikingsoft">@namikingsoft</a>さん</h4>

<p>表彰コメント：<br />
常に技術検証してよりよい解を追求するというエンジニアとしての本質はもちろん、「タイムキーパーアプリ」や「マンネリ化しないモブプロ担当割当の仕組み化」など、チーム活動に関する課題への解も即座に実現し続ける姿は他のエンジニアのあるべき姿を体現していると思います。</p>

<h3>🏆「Share All; 己の知見、試行、失敗、遍く共有すべし」受賞者</h3>

<h4><a href="https://github.com/masutaka">@masutaka</a> さん</h4>

<p>表彰コメント：<br />
自身の知見や持っている情報を分かりやすく社内に共有するだけでなく、「今ボールを持っているのは誰か」といった次のアクションに繋がる部分についても責任を持って管理している姿が印象的でした。
加えて、自分のみならず会社全体での情報共有を促進するには何をすればいいか、といった観点からもTipsを発信し続けています。まさに、本当の意味での「情報の共有」という観点で全社的なアクションを続けていただいています。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/masutaka">Takashi Masuda (@masutaka) | Twitter</a>, <i class="blogicon-entry"></i> <a href="https://masutaka.net/">Blog</a></p>

<h4><a href="https://github.com/kogai">@kogai</a> さん</h4>

<p>表彰コメント：<br />
自身の職能に閉じない、幅広い情報を集めているのに加え、新規事業の検証を通して学んだ知識・技術を様々な機会を通してエンジニア全体に広く共有してもらっています。また、全社的にShopifyにフォーカスしている現状で、先行して蓄積したShopifyに関する知見を全社的に展開することで、後進のキャッチアップに大きく資している点は、社内でも大きなインパクトを与えています。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/iamchawan">&#x8336;&#x7897; (@iamchawan) | Twitter</a>, <i class="blogicon-entry"></i> <a href="https://k9bookshelf.com/blogs/development">Blog</a></p>

<h3>🏆「Just Do It; 全力でやりきるべし」受賞者</h3>

<h4><a href="https://github.com/ryz310">@ryz310</a>さん</h4>

<p>表彰コメント：<br />
チーム内でこれまではどうしても不足していた決定力・実行力という点で、自身が強力に牽引することで改善させるために努力しています。そのために様々な施策を高速で試し、実行力のあるチームを作り上げるために試行錯誤していた姿は、自分だけでなくチーム全体の実行力の向上を目指す、チームファーストな姿だと思います。<br>
<i class="blogicon-twitter"></i> <a href="https://twitter.com/ryosuke_sato">&#x30B5;&#x30C8;&#x30A6;&#x30EA;&#x30E7;&#x30A6;&#x30B9;&#x30B1; (@ryosuke_sato) | Twitter</a>, <i class="blogicon-entry"></i> <a href="https://ryz310.hateblo.jp/">Blog</a></p>

<h4><a href="https://github.com/koshigoe">@koshigoe</a> さん</h4>

<p>表彰コメント：<br />
最初に合意したリリース日を常に念頭に置き、都度状況の確認・共有をしつつも、何があってもリリース日は絶対に守る姿は、基本とはいえなかなか継続できることではありません。また、dfplus.io 内のみならず社内の別プロジェクトも並行して検証をされており、実行力という意味では社内でもトップクラスです。</p>

<h2>周囲の賞賛・承認を共有するよい機会に</h2>

<p>以上、延べ10名の受賞者でした。なんと3つの項目で表彰されている人もいましたね！</p>

<p>表彰コメントは、開発メンバー同士の投票時に自由記述できるコメントがもとになっているので、周囲からの賞賛・承認の声を全社で共有できるよい機会となっています。なかなか近くで仕事ぶりを見ることがないビジネスサイドのメンバーにとっても開発メンバーの活躍を知ることができ、よい刺激をもらうことができました。このような形で開発チームメンバーの活躍や勉強会の様子なども発信していきたいと思います。</p>

<p>気づけば2020年もあと3日ほど。今年も1年間ありがとうございました。</p>

<p>そして受賞者のみなさん、おめでとうございました！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shopify アプリのリスト設定ポイント]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/23/093000</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/23/093000"/>
        <updated>2020-12-23T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2020/shopify-liquid">Shopify開発を盛り上げる（Liquid, React, Node.js, Graph QL） Advent Calendar 2020</a> の 23 日目の記事です。昨日は <a href="https://qiita.com/hal_256">@hal_256</a> さんの『<a href="https://qiita.com/hal_256/items/07626bb0621bc6c8eef8">Next.js+GrapqhQLでShopifyアプリを開発する</a>』でした！型が用意できるっていいですよね。</p>

<p>ごきげんよう！ <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="id:tmd45" class="hatena-id-icon"></a><a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> と申します。よろしくお願いします。</p>

<p>同僚たちが 4 日目、8 日目と記事を書き、こっそり（？）11 日目も書かれていたので、これで 4 本目の弊社記事になります。がんばります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F04%2F100000" title="GitHub Actionsを使ったShopify テーマの自動デプロイ環境構築 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F08%2F120000" title="Shopify 埋め込みアプリのフォームを @shopify/react-form で作る - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>とはいえ、これまでとても濃い記事がたくさん書かれていたので、ここらで軽めに、アプリのリスト設定で引っかかったポイントなんぞを共有したいと思います。</p>

<h2>アプリのリストとは</h2>

<p>Shopify の公開アプリを<a href="https://apps.shopify.com/?locale=ja">アプリストア</a>に掲載するための情報を、設定する場所です。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリのリスト設定"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222175817.png" alt="f:id:tmd45:20201222175817p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリのリスト設定</figcaption></figure></p>

<p>公開アプリを実際に公開するには、このリストの設定を行ったうえで、Shopify からのレビューを通らなければいけません。</p>

<p>項目もたくさんあるので、ここではひとつひとつの説明はしません。</p>

<h2>アプリ名</h2>

<p>初っ端ですが、エンジニアが対応しているとうっかりしがちなポイント その１。</p>

<p><figure class="figure-image figure-image-fotolife" title="A. Listing information、1. App information の「App name」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181803.png" alt="f:id:tmd45:20201222181803p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>A. Listing information、1. App information の「App name」</figcaption></figure></p>

<p>ここを書き忘れることはまずありませんが、この値は、基本である<b>「アプリ設定」の「アプリ名」</b>と同じ値になっている必要があります。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリ設定の「アプリ名」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222191239.png" alt="f:id:tmd45:20201222191239p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリ設定の「アプリ名」</figcaption></figure></p>

<p>アプリ名に "本番環境" と入れているとか、ストア情報（リストの内容）でかっこいいアプリ名を付け直すとかして、名前が一致していないとレビューの自動チェックで弾かれます。</p>

<h2>アプリアイコン</h2>

<p>初っ端ですが、エンジニアが対応しているとうっかりしがちなポイント その２（笑）</p>

<p><figure class="figure-image figure-image-fotolife" title="A. Listing information の「2. App icon」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181115.png" alt="f:id:tmd45:20201222181115p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>A. Listing information の「2. App icon」</figcaption></figure></p>

<p>リストの設定はしたものの…</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリ設定の「アプリのアイコン」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181257.png" alt="f:id:tmd45:20201222181257p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリ設定の「アプリのアイコン」</figcaption></figure></p>

<p>こちらも「アプリ設定」の「アプリのアイコン」を設定し忘れていた…なんてことがありました。</p>

<p>また、この２つの画像は指定サイズは異なるものの、基本的には同じ内容の画像を設定する必要があります。開発中に適当なアイコンを設定していて、ストア情報にだけリッチなアイコンを後から作った場合なども、差し替えをお忘れなく。</p>

<h2>スクリーンショット</h2>

<p>必須項目のなかにスクリーンショットの添付があります。</p>

<p>ただ画面のスクリーンショットを貼ればいいというものではなく、かなり細かいガイドラインが定められています。リストの設定ページからもリンクされているので確認しましょう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fshopify.dev%2Fconcepts%2Fapp-store%2Fgetting-your-app-approved%2Fapp-requirements%234-screenshots" title="Requirements for public apps on Shopify" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>画像サイズや縦横比率はわかりやすいですね。代替テキストが必要というのも、そもそもリスト設定のページに項目があるのでまず入れ忘れることは無いと思います。</p>

<p>画像そのものの注意点ですと、以下のようなものが引っかかりやすいかなと思います。</p>

<ul>
<li>スクリーンショットにデスクトップの背景や <strong>ブラウザウィンドウを含めないでください</strong> 。画像が乱雑になったり、利用者の気を散らしたりしないように、それらをトリミングしてください</li>
<li>「埋め込みアプリ」（Embedded App）のスクリーンショットに、ストア名、検索バー、ユーザ情報など <b>Shopify 管理画面（ストア管理画面）のヘッダーコンテンツを含めないで</b>ください。左側のナビゲーションは含めることができます</li>
</ul>


<p><figure class="figure-image figure-image-fotolife" title="ストアのヘッダ部分"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222190020.png" alt="f:id:tmd45:20201222190020p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>ストアのヘッダー部分</figcaption></figure></p>

<p>スクリーンショットを丁寧に撮っていても、後者のストアのヘッダー部分は含めてしまいがちだと思いますので、気をつけましょう。</p>

<h2>詳細な説明</h2>

<p>B. App details の「5. Detailed description」の部分です。アプリストアのアプリ詳細ページで、「（アプリ名）の詳細情報」として表示される項目です。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリの詳細情報"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222184230.png" alt="f:id:tmd45:20201222184230p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリの詳細情報</figcaption></figure></p>

<p>こちらでついやってしまいがちなのが、とにかく「アプリの機能の説明」<b>以外のことを書いてしまう</b>こと。<a href="https://shopify.dev/concepts/app-store/getting-your-app-approved/app-requirements#5-detailed-description">ガイドラインでも使用してはいけない内容が事細かに書かれています</a>のでチェックしましょう。</p>

<p>"このアプリで何ができるのか" を書くようにすれば問題ないのですが、日本人気質なのか「困ったことがあったらサポートします」みたいな一文を入れるのも NG です（やりました）。それはこのアプリの "機能" の話ではないですよね！</p>

<p>スクリーンショットにも見えるように、サポートに関してはストアの定型で項目が用意されているので、そちらで我慢（？）しましょう。</p>

<h2>おわりに</h2>

<p>というわけで、リストの設定のなかでもストアに表示される基本的に部分についてポイントをあげてみました。</p>

<p>項目が多くて大変ですが、区分けがしっかりしているおかげで適切な粒度で、アプリ利用者へ必要な情報を届けられるこういった仕組みが、とてもエコだなと思います（エコシステム的な意味で）。</p>

<p>アプリレビューを乗り越えたらついにアプリ公開です！ﾌｧｲﾄｫ･.*:+:(n'∀')η:+:*.･</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020年 買ってよかったもの]]></title>
        <id>https://blog.tmd45.jp/entry/2020/12/14/133631</id>
        <link href="https://blog.tmd45.jp/entry/2020/12/14/133631"/>
        <updated>2020-12-14T04:36:31.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/5560">feedforce Advent Calendar 2020</a> の 14 日目の記事です。</p>

<p>昨日は同じプロダクトチームでマーケティングを担当してくれている、ねこにしさんによる<a href="https://note.com/nekonishi_m/n/n276d286a6dd2">『その文章に、読者はいるか？』</a>でした。お仕事でもねこにしさんらしい自然体の文章と思っていましたが、その裏ではいろいろ考えることがあるんですね。</p>

<p>そんな素敵な記事のあとでナニですが、わたくし <a href="https://twitter.com/tmd45">@tmd45</a> からは個人的な散財の記録をお届けします。通称、散財部活動報告です。</p>

<h3>2020年は生活が激変した年</h3>

<p>もはやテンプレのような話ですが、自分も例にもれず新型コロナウィルス対策の影響で、現在はフルリモート環境で仕事しています。</p>

<p>とはいえ、自宅のパソコン環境はもともと整っていたので、そういう意味で新しく買い揃えたものはありませんでした。<a href="https://blog.tmd45.jp/archive/category/%E6%95%A3%E8%B2%A1%E9%83%A8">過去の散財記録を見ると</a>もう椅子とかディスプレイとか買ってあって、それそのものが「買っておいてよかったなー」と思いました。</p>

<p>とはいえ本格的にミーティングなどを通話でするようになって、マイクとイヤホンは買いました。</p>

<h4>単一指向性USBコンデンサマイク</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085WSSV2V/tmd45-22/"><img src="https://m.media-amazon.com/images/I/41VmUgWMcTL.jpg" class="hatena-asin-detail-image" alt="FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669" title="FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085WSSV2V/tmd45-22/">FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>いきなりゴツいですが、快適なフルリモートワークにはコミュニケーションツールへの投資が欠かせません。</p>

<p>単一指向性で雑音を減らし、アームスタンドで取り回しや位置取りが柔軟にできるようになって、コスパ良かったと思います。ポップガード（風防）は使っていません。会社でも同僚におすすめしまくって 2, 3 人に買ってもらいました（笑）</p>

<p>特別なドライバインストールも不要で、Mac と Windows、あと PS4 にも接続して使ってみましたが、どれもいい感じでした。</p>

<h4>骨伝導イヤホン</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07WH6JVRN/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31B3ROIqHML.jpg" class="hatena-asin-detail-image" alt="AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-" title="AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07WH6JVRN/tmd45-22/">AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>イヤホンはインイヤー（カナル型）派なんですが、嘘か真か長時間使用で難聴とかいう噂を聞いて、実際、長時間付けていると疲れを感じていたので、社内で話題になっていた骨伝導イヤホンを買ってみました。</p>

<p>いまのところ、いい感じです。どんなイヤホンでも長時間つけっぱなしだと疲れるのは変わりないので、こまめに電源切って外してます。</p>

<p>接地面に髪の毛がはさまってると聞こえづらかったり、大きな音がするとちょっと頭がクラっとする気もします。お安くもないので、機会があったら試してみてから買ったほうがいいと思います（このご時世だとそれも難しいですけど…）。</p>

<h4>足置き・足枕</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07TZM9ZWP/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51X2zP4KGXL.jpg" class="hatena-asin-detail-image" alt="足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント" title="足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07TZM9ZWP/tmd45-22/">足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>そういえば地味ですが、リモートワークになってから足置きを買いました。</p>

<p>これまで足元の電源ボックス（電源タップとかをまとめてしまっている箱）に足を乗せていたのですが、通話中に蓋を踏み抜いて大騒ぎすることが何度かあったので（すみません…）これも買ってよかったなと思います。</p>

<h4>キーボードカバー</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085L2M12H/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51FID6GM-3L.jpg" class="hatena-asin-detail-image" alt="moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証" title="moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085L2M12H/tmd45-22/">moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>日本国内で EU キーボード対応商品買うのなかなか選択肢が少なくて大変です。会社で使ってる MacBook が諸事情で EU キーボードでして(；・∀・) ※通常は US か JIS で選べます！</p>

<p>また、いままで幸いやらかしたことはないんですが、自宅で Mac 使っててコーヒーこぼしたりするのが怖いので、キーボードカバーを買いました。ちゃんとサイズが合ってるので、いい感じに使えてます。</p>

<p>ぺたっとくっ付くわけではなく、ふわっと被ってるだけなので、指が汗ばんでくるとちょっと浮いたりはしますが、慣れですね。</p>

<p>Mac そのものをぶっ壊す恐怖からは守ってくれるのでこれも買ってよかったです。</p>

<h3>あとはコロナとかリモートとか関係ないやつ</h3>

<p>ほんとにただ気が向いて買っただけのもの。</p>

<h4>電動歯ブラシ</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B073XF4LK8/tmd45-22/"><img src="https://m.media-amazon.com/images/I/314tQlQL3gL.jpg" class="hatena-asin-detail-image" alt="フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05" title="フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B073XF4LK8/tmd45-22/">フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05</a></p><ul><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/01</li><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>なにかの折に友人が「電動歯ブラシ使ってるよー」という話をしていて、ふと調べてみたら、ソニッケアーが<b>スマホアプリと連動してる</b>…！</p>

<p>というネタ半分で買いました。</p>

<p>結果的に（スマホアプリも面白かったですが）（普通に）買ってよかったなと思ったものランクインです。振動で磨き時間をコントロールしてくれたりして、キレイに磨けて、磨き時間は短縮されました。</p>

<h4>マッサージクッション</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07F6GFYW7/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51D2lIOIXUL.jpg" class="hatena-asin-detail-image" alt="アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br" title="アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07F6GFYW7/tmd45-22/">アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>しゃれおつなファブリックでお部屋に置いてもおっさんな雰囲気漂わないマッサージクッションで有名なルルドのやつです。</p>

<p>古い型のものがお釈迦になったので買いました。</p>

<p>モミ玉が 2 → 4 つに増えてごりごりマッサージしてくれます。小型化されたので普段座ってる椅子でも無理なく使えるようにもなりました。</p>

<p>オフィスにいたときより、休憩時に身体を動かさなくなったので、これでほぐしてます。</p>

<h4>コーヒー淹れる系</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08MCWL3FR/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31dJHzr1T8L.jpg" class="hatena-asin-detail-image" alt="BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]" title="BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08MCWL3FR/tmd45-22/">BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KQWGXRZ/tmd45-22/"><img src="https://m.media-amazon.com/images/I/41AZXvUqcFL.jpg" class="hatena-asin-detail-image" alt="Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)" title="Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KQWGXRZ/tmd45-22/">Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>これまで会社ではインスタントで済ませていたコーヒーですが、自宅にいるようになって <a href="https://postcoffee.co/">PostCoffee®</a> のサブスクリプションなんかも始めました。</p>

<p>だんだん慣れてきたので、最近コーヒーバッグから豆に切り替えて、自分で挽いて淹れるようになりまして。そのために買ったのがこの２つです（計量スプーンとかミル掃除用のブラシとかも買いました）。</p>

<p>朝のおいしいコーヒーで目を覚ましてから仕事にとりかかるのが最近のルーチンです ☕</p>

<h4>スマートリモコン Nature Remo 3</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08BLSLWH4/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31dTYbumS2L.jpg" class="hatena-asin-detail-image" alt="Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応" title="Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08BLSLWH4/tmd45-22/">Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> Tools &amp; Hardware</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>先日 AWS 関連の障害に巻き込まれていた Nature Remo ですが、その障害きっかけで新しい 3 が出たことを知りました。</p>

<p>ずっと mini とか買おうか迷ってたんですが、3 でセンサー類が増えたりしたみたいなので、これも面白そうだと思って勢いで買いました。</p>

<p>いまは "寝る前に部屋の電気とエアコンを消して、Relax Melodies アプリを起動する" みたいなショートカットを活用してます。部屋から出ないのと、猫がいるので人感センサーは扱いようが難しいです。</p>

<p>旧来のリモコンでもまったく困ってなかったですが、同僚曰く「こういうのはロマンですから」とのことで、私もそう思います。</p>

<h3>おわり</h3>

<p>さてさて、雑多にご紹介しましたが、なにかピンとくるものがあったりしたでしょうか。自宅にいる時間が伸びたからこそ、生活を豊かにできるものを揃えて楽しく過ごしたいですね。</p>

<p>ちなみにこの記事を書くために Amazon の購入履歴をみたら 2020 年の注文件数が 259 件もあって腰抜かしました。よく見たら Kindle で漫画を買うようになったからでしたね。やー、びっくりびっくり（棒読み）</p>

<p>明日はアジャイルお兄さん pokotyamu がきっとエモい話をしてくれると思います。</p>

<p>では、皆様良いお年を。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[私の好きなプログラミング動画 10 選]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/13/003657</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/13/003657"/>
        <updated>2020-12-12T15:36:57.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。</p>

<p>この記事は <a href="https://adventar.org/calendars/5560">Feedforce Advent Calendar 2020</a> の 12 日目の記事です！</p>

<p>昨日は <a href="https://twitter.com/sukechannnn">@sukechannnn</a> の <a href="https://developer.feedforce.jp/entry/2020/12/11/172338">モブプロしてたらチームが大きく成長した話</a> でした。社内の技術勉強会でも発表してくれたのですが、みんなの関心が高い話題だったので発表後の議論が大変盛り上がっていました！</p>

<hr />

<p>ちなみにこの記事は <a href="https://zenn.dev/magurotuna/articles/d5621291b8da87">YouTubeにあるライブコーディング動画を見て Rust を学ぼう</a> という記事にインスパイアされて書いています。</p>

<ul class="table-of-contents">
    <li><a href="#はじめに">はじめに</a></li>
    <li><a href="#好きな動画-10-選">好きな動画 10 選</a><ul>
            <li><a href="#George-Hotz-のライブコーディング">George Hotz のライブコーディング</a></li>
            <li><a href="#低レイヤーガール">低レイヤーガール</a></li>
            <li><a href="#High-Engineer">High Engineer</a></li>
            <li><a href="#mayah-氏の実践コーディング面接">mayah 氏の「実践！コーディング面接」</a></li>
            <li><a href="#メルカリ社の開発ライブ実況">メルカリ社の開発ライブ実況</a></li>
            <li><a href="#The-Coding-Train-のソートアルゴリズム解説">The Coding Train のソートアルゴリズム解説</a></li>
            <li><a href="#AWS-Black-Belt-Online-Seminar">AWS Black Belt Online Seminar</a></li>
            <li><a href="#Authlete-社による-OAuth--OIDC-入門">Authlete 社による OAuth &amp; OIDC 入門</a></li>
            <li><a href="#予備校のノリで学ぶ大学の数学物理">予備校のノリで学ぶ「大学の数学・物理」</a></li>
            <li><a href="#t-kihira-氏のテトリスを1時間強で作ってみた">t-kihira 氏の「テトリスを1時間強で作ってみた」</a></li>
        </ul>
    </li>
    <li><a href="#最後に">最後に</a></li>
</ul>

<h2 id="はじめに">はじめに</h2>

<p>私はプログラミングに関する動画を見るのがとても好きです。</p>

<p>集中できる時は手を動かしたり本を読んだりした方が学習効率は良いと思うのですが、動画はご飯食べながら、お酒を飲みながら見られるのがとても良いですね。</p>

<p>また、新しい技術を触る時などは手を動かす・本を読む前に動画でさらっと概要を掴んでから始めると、立ち上がりがスムーズになる気がします。</p>

<h2 id="好きな動画-10-選">好きな動画 10 選</h2>

<h3 id="George-Hotz-のライブコーディング">George Hotz のライブコーディング</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7Hlb8YX2-W8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>Comma.ai のハッカー <a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%9B%E3%83%83%E3%83%84">George Hotz</a> のライブコーディング動画</li>
<li>Vim でプラグインほぼ使わずに print デバッグしながら書き殴る、それでも並の人を凌駕するコーディングの速さ</li>
<li>ハマりまくるけど全部力技でガンガン解決していくのが見ていて気持ちいい、そして公式ドキュメントより Stack Overflow ガンガン見るのが意外でした</li>
<li>動画が 10 時間もあってその間ずっとコーディングしてるのがすごすぎます…！</li>
</ul>


<h3 id="低レイヤーガール">低レイヤーガール</h3>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.youtube.com%2Fchannel%2FUCMsstGhINXdpMqo9tsElCMQ" title="低レイヤーガール - YouTube" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/channel/UCMsstGhINXdpMqo9tsElCMQ">www.youtube.com</a></cite></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZATzfSF3O58" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li><a href="https://twitter.com/d0iasm">@d0iasm</a> 氏、<a href="https://twitter.com/hikalium">@hikalium</a> 氏、<a href="https://twitter.com/saho_bofffff">@saho_bofffff</a> 氏によるライブコーディング &amp; 雑談動画</li>
<li>ゆるふわな語り口でコーディングを進めていますが、内容はゴリゴリの低レイヤープログラミング</li>
<li>少しでも気を抜けば置いてかれてしまうのでいつも正座して見ています</li>
</ul>


<h3 id="High-Engineer">High Engineer</h3>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.youtube.com%2Fchannel%2FUCEM9ImNGpMRsG3MDhctxVtQ" title="High Engineer - YouTube" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/channel/UCEM9ImNGpMRsG3MDhctxVtQ">www.youtube.com</a></cite></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fN7ic3uydaU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li><a href="https://twitter.com/dowanna6">@dowanna6</a> 氏による Web エンジニア経験 2 年目未満の方に向けた各技術の解説動画</li>
<li>「Cookie」や「CORS」など Web プログラミングを行う上で必須となる知識を解説しています</li>
<li>既知の内容もありますが、基本的な概念を他の人にわかりやすく伝えるにはどうすれば良いか？の参考にしたくて見ています</li>
</ul>


<h3 id="mayah-氏の実践コーディング面接">mayah 氏の「実践！コーディング面接」</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/_zfzjnMCmKU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li><a href="https://twitter.com/mayahjp">@mayahjp</a> 氏によるコーディング面接の実践動画</li>
<li>mayah 氏のヒントの出し方と追加質問がとてもリアルで参考になります</li>
<li>今はまだ一つしか実践動画がアップされてないので、今後の更新をとても楽しみにしているチャンネルの一つです</li>
</ul>


<h3 id="メルカリ社の開発ライブ実況">メルカリ社の開発ライブ実況</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cWvAhmfZJZg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>お題は「Go で Todo アプリ用の API を作ってみましょう」と、大変シンプル</li>
<li>カスタマイズしまくりの Vim で高速コーディングする人、Dockerfile から書き始める人、gqlgen 使って GraphQL API を作り始める人、Go Playground で書き始める人など様々で楽しいです</li>
<li>他の実況動画は <a href="https://www.youtube.com/playlist?list=PL5y9uEm8_ypV4pQypp7IGN3b-mq2bf65Z">こちら</a> から見られます</li>
</ul>


<h3 id="The-Coding-Train-のソートアルゴリズム解説">The Coding Train のソートアルゴリズム解説</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/67k3I2GxTH8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/eqo2LxRADhU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>テンション高めにソートアルゴリズムを解説してくれる動画（他にも色んな種類の解説動画があります）</li>
<li>上記の動画ではバブルソート、クイックソートのアルゴリズムを概要〜実際の実装に至るまで大変わかりやすく解説してくれています</li>
<li>丁寧に図を描いて説明してくれるので英語がわからなくても雰囲気で理解できると思います</li>
</ul>


<h3 id="AWS-Black-Belt-Online-Seminar">AWS Black Belt Online Seminar</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/mmRKzzOvJJY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>AWS のサービス別の説明動画（上記は CloudFront の例）</li>
<li>AWS はドキュメントも充実していますが、動画も併用するとさらに理解度が深まります</li>
<li>ちなみにサービスと動画の一覧は <a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/">AWS サービス別資料</a> から探すと良いです</li>
</ul>


<h3 id="Authlete-社による-OAuth--OIDC-入門">Authlete 社による OAuth &amp; OIDC 入門</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/PKPj_MmLq5E" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>今まで見た中で一番わかりやすい OAuth &amp; OIDC（OpenID Connect）の解説動画です</li>
<li>OAuth を学ぶにはこの動画を見た後に <a href="https://www.amazon.co.jp/dp/4798159298">OAuth 徹底入門</a> の 3 章を参考に OAuth クライアントを自分で実装してみるのが一番手っ取り早いと思っています</li>
</ul>


<h3 id="予備校のノリで学ぶ大学の数学物理">予備校のノリで学ぶ「大学の数学・物理」</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/4p1rwfXbCoY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<ul>
<li>数学が苦手なのにプログラマをやっているのがずっとコンプレックスで、少しずつ学習を始めています</li>
<li>高校数学で挫折した自分にもこの動画はものすごく分かりやすくて感動しました…！</li>
</ul>


<h3 id="t-kihira-氏のテトリスを1時間強で作ってみた">t-kihira 氏の「テトリスを1時間強で作ってみた」</h3>

<script type="application/javascript" src="https://embed.nicovideo.jp/watch/sm8517855/script?w=640&h=360"></script>


<p><noscript><a href="https://www.nicovideo.jp/watch/sm8517855">【プログラミング】テトリスを1時間強で作ってみた【実況解説】</a></noscript></p>

<ul>
<li>10 年前の動画ですがライブコーディング系の動画の中ではこれが一番好きです</li>
<li>Windows プログラミングも C++ も全然わからないんですが、そんなの関係ないぐらいテンションの上がる動画です。多分今まで 20 回ぐらい見ています</li>
<li>エディタのインストールから始めるところやペイントでテトリスのブロックを自作する辺り、最高にプログラマだなって感じがします</li>
</ul>


<h2 id="最後に">最後に</h2>

<p>途中から「これはプログラミング動画なのか？」というものも含まれていますが、お気に入りなので外せませんでした。ご容赦ください。</p>

<p>会社の技術ブログなのを忘れて好き勝手に書いてしまいましたが、この記事を読んでくださった方にとってお気に入りの動画が見つかれば幸いです。</p>

<p>最後までお読みいただきありがとうございました＾＾</p>

<hr />

<p>次回は去年のアドベントカレンダーで <a href="https://note.com/nekonishi_m/n/n91df51dce2e4">新卒でベンチャーに行くのは「もったいない」のか</a> という名文を書いてくれた <a href="https://twitter.com/nekonishi_m">ねこにしさん</a> の出番です。お楽しみに！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[半年モブプロしたらチームが大きく成長した話]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/11/172338</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/11/172338"/>
        <updated>2020-12-11T08:23:38.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは！フィードフォースで <a href="https://ecbooster.jp/">EC Booster</a> というプロダクトを作っている <a href="https://twitter.com/sukechannnn">@sukechannnn</a> です。</p>

<p>この記事は <a href="https://adventar.org/calendars/5560">Feedforce Advent Calendar 2020</a> の 11日目の記事です。<br />
昨日は kogai さんの <a href="https://k9bookshelf.com/blogs/development/how-and-why-running-bookstore">趣味の本屋を始めました</a> でした。実際に自分でECサイトを立ち上げて運営するのって、言うは易く行うは難しですよね。すごいです。</p>

<hr />

<p>さて、内容に入っていきます。</p>

<h2>EC Booster チームではメイン開発をモブプログラミングで行っています！</h2>

<p>EC Booster はEC事業者様の集客を支援するサービスで、主に Google ショッピング広告を扱っています。また、<a href="https://ecbooster.jp/news/free-plan-20201109">今年１１月にフリープランをリリース</a>し、より多くのEC担当者様をご支援できるよう機能開発を進めています。</p>

<p>アプリケーションの構成は、フロントエンドが React + Flow (TypeScript 移行中)、サーバーサイドが Ruby on Rails で、API が GraphQL です。また、データフィード広告を扱う関係上、Ruby で書かれたバッチ処理がたくさん動いています。広告領域はなかなかに複雑で、深いドメイン知識が必要です。</p>

<p>そんなプロダクトですが、現在はモブプログラミング（以下モブプロ）で全員がフロントエンド/バックエンドの垣根なく開発をしています。モブプロを導入した当初は試行錯誤の連続でしたが、最近はとても良い感じです。そして、気づいたらチームそのものが成長してきた...と感じています。</p>

<p>この記事では、僕ら開発チームがどのようにモブプロの課題を乗り越え、モブプロの利点を生かして開発できるようになったのかを共有できればと思います。少し長いですが、お付き合いください 🙏</p>

<h2>RSGT でモブプロを知る</h2>

<p>僕がモブプログラミングという概念を知ったきっかけは <a href="https://2018.scrumgatheringtokyo.org/">Regional Scrum Gathering Tokyo 2018 </a> というスクラム開発を題材にしたカンファレンスでした。</p>

<p>モブプロは、ドライバーというコードを書く人が１人、それ以外のナビゲーターと呼ばれる複数の人で行います。ナビゲーターはドライバーに対して、実装する内容を指示します。ドライバーは支持された内容をコードに書いていく、という感じです。ドライバーは適宜交代していきます。</p>

<p>RSGT で発表を聞いた時は、話している内容には説得力があり楽しそうだったものの、「それぞれ個人で開発した方が集中できて進捗も出るんじゃないかなぁ」と半信半疑でした。まさか自分がモブプロをやることになるとは、この時は思ってもいませんでした。</p>

<h2>時は流れ〜開発チームのメンバーが入れ替わることに</h2>

<p>それから２年くらい経ち、今年の４月に EC Booster 開発チームのメンバーが入れ替わることになりました。デザイナー含め８人いた開発メンバーは僕含め４人になり、そのうち２人（当時フロントエンド担当）は入社して日が浅いという状況でした。その時リーダー的な役割を果たせと谷垣さん（<a href="https://media.feedforce.jp/n/n7f4f77f24733">この記事</a>の右側の髪の長い人）に言い渡された僕は、どうしようかなと考え始めました。</p>

<ul>
<li>プロダクトの複雑なドメインをお二人にもしっかりキャッチアップして欲しい

<ul>
<li>広告運用やデータフィードなどのドメイン知識があった方が、主体的に開発できると思ったため</li>
</ul>
</li>
<li>バッチ処理が多いアプリケーションなので、どういう処理をしているかを把握してもらった方がフロントエンドの開発をするにも役立ちそう</li>
<li>フロントエンドだけじゃなくてバックエンドも開発してもらいたいな（彼らも意欲的だった）</li>
</ul>


<p>その時ちょうど、コロナで出社できない日常がスタートし、会社で直に話ができなくなってしまいました。</p>

<h2>そうだ、モブプロしよう！</h2>

<p>そこで思い出したのがモブプロです。以下のような理由から、オフィスで話ができないならずっとZoomを繋いでいればいいのでは？と思い、提案してみました。</p>

<ul>
<li>都度 zoom を繋ぐのだと、どうしても会話するハードルが上がってしまう</li>
<li>ドメインの説明は、直接話せば５分で伝えられることが文字だと３０分かかる、みたいなことが多い

<ul>
<li>相手が理解してそうか？をリアクションから読み取ることで、補足説明できる（文字だとそれが分からない）</li>
</ul>
</li>
<li>以前にも少しモブプロを試していたが、リモートワークとの親和性が高そうだった</li>
</ul>


<p>上記を説明したら、開発メンバーのみんなも「せやな」と同意してくれたので、やってみることになりました。</p>

<h2>モブプロを始めたら情報の非対称性がなくなっていった</h2>

<h4>最初は小さな改修をしながらドメイン知識をキャッチアップ</h4>

<p>最初は大きな開発ではなく、小さな改修を繰り返しながらドメイン知識のキャッチアップを進めていきました。</p>

<p>ドメイン知識が詰まってるのが主にバックエンド（というかバッチ処理）だったので、最初はバックエンドの改修から始めました。キャッチアップして欲しい人にドライバーをお願いし、ナビゲーターが解説しながらコードを書いてもらう感じです。やってみると、実際に手を動かしてもらいながら説明できたので、口頭で説明するよりも知識が染み込んで行く感覚がありました。日々の運用作業も皆に担当してもらい、よく発生するアラートや必要な対応を、裏側の事情も含めて理解してもらうのに役立てました。</p>

<p>ただ、その時はバックエンド担当⇢フロントエンド担当に教える感じが続いてしまいました。</p>

<h4>アプリケーションの全部を全員で開発しよう！</h4>

<p>しばらくやってみて、フロントエンド担当にバックエンドをやってもらうなら、バックエンド担当もフロントエンドやらなあかんやろ、ということでバックエンドとフロントエンドの垣根をなくしました。それにより、フロントエンド担当⇢バックエンド担当の説明も生まれ、お互いの話すバランスがちょうど良い感じになり、双方向のコミュニケーションになりました。</p>

<p>その結果、ドメイン知識だけでなく、技術的にも情報の非対称性が減っていきました。今では技術的な課題をフロントエンド/バックエンド横断で全員が把握してるので、議論がとてもスムーズです。</p>

<h2>メインの開発もモブプロでやってみることに</h2>

<p>最初はドメイン知識のキャッチアップがある程度できたら非同期な開発に戻ろうと思っていましたが、モブプロが予想以上に良かったので新機能のメイン開発も引き続きモブプロでやってみることにしました。その時は、以下の２つを利点と感じていました。</p>

<ul>
<li>"何をどう作るか" という議論がノータイムでできることの価値が思ったより高かった（コンテキストの共有がしやすい）</li>
<li>プランニングでは話しきれない、実際のコードを元にした議論がしやすかった</li>
</ul>


<p>その当時に実装しようとしていたのが冒頭で紹介した「フリープラン」という完全に新規の開発だったので、メンバー間の認識を合わせることが特に重要でした。それに加え、モブプロでも開発スピードが思っていたより落ちなかったのも導入を後押ししてくれました。</p>

<h2>モブプロは良いことずくめ！に感じたが...</h2>

<p>こうしてモブプロでのメイン開発がスタートしました。めっちゃええやん！と思って始めたモブプロでしたが、やっていく中でいくつか課題も見えてきました。</p>

<ul>
<li>めちゃくちゃ疲れる（最初は「これは本当に毎日続けられるのか？」と途方に暮れるレベルで疲れた）</li>
<li>ずっと Zoom 繋いでるけど何を話そう...</li>
<li>開発の進み具合が良くない</li>
<li>議論を進める人に偏りが出る</li>
<li>個人で集中して調査したり開発したりする時間も必要では？</li>
</ul>


<p>特に課題だったのは、思っていたより "疲れる" ということでした。そのせいで一時期は開発スピードが落ち、朝起きるのがつらい状態になってしまいました...。このままではアカン！ということで、これらの課題を解決するために、色々な工夫をしてきました。</p>

<h4>モブプロを上手くやるための工夫</h4>

<ul>
<li>① 休憩する</li>
<li>② 雑談する</li>
<li>③ なるべく毎日同じ時間モブプロする</li>
<li>④ その日やることを朝会で話し合う</li>
<li>⑤ 個人タスクを用意する</li>
<li>⑥ プランニングと開発キックオフ</li>
<li>⑦ 自分から話さない人にも明示的に意見を聞く</li>
</ul>


<p>これらの工夫を繰り返した結果、モブプロが上手くできるようになっただけでなく、チームそのものが成長していきました。</p>

<p>それぞれ詳しく説明していきます。</p>

<h2>工夫① - 休憩する</h2>

<p>休憩するって当たり前のことなんですが、集中してしまうと忘れがちになるし、モブプロをやり始めた最初はみんな探り探りなので「休憩しましょう」とか気軽に言いにくい部分もあったように思います。</p>

<p>そのため、まずは休憩する習慣を付けるために、あえて Zoom の無料プランを使って "40分で強制的に休憩" するようにしました。ポモドーロテクニックとか色々ありますが、これが一番確実でした。本当に強制的に切れるので、タイミングによっては笑いが起きて、和やかな雰囲気が副次的に醸成されていきました。</p>

<p>最近は zoom の有料プランを使ってますが、"適度に休憩を取る" という習慣が根付いているので、適当なタイミングで誰かが休憩入れてくれます。休憩が上手になったので、今は明確なルールは定めてません。ガッと60分やりたい時もあれば、30分で区切りが良い時もありますからね。それでも以前より格段に疲れなくなりました。</p>

<h2>工夫② - 雑談する</h2>

<p>一見すると業務に関係のないような雑談もして良いよ！という雰囲気作りに務めました。特別 "雑談の時間" を作っているわけではなく、突発的な雑談を盛り上げるイメージです。これには、発言のハードルを徹底的に下げて、ちょっとした懸念やアイディアをポンと出せるようなチームにしたいという思いがありました。また、単に "話す" ことで疲れないようにしたいなとも思っていました。</p>

<p>結果、チームメンバーがお互いのことを知るきっかけになり、それぞれの考え方や得手不得手を把握した上で議論ができるようになってきました。時には、エンジニアリングと全く関係ない雑談から実装のアイディアが浮かんだりして面白いです。</p>

<h4>開発メンバーが打ち解けている様子</h4>

<p>エビチリ🍤 をきっかけに、モブプロが解散するとエビのリアクションが飛び交うようになりました。良いですね。
<figure class="figure-image figure-image-fotolife" title="エビチリ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20201210/20201210211734.jpg" alt="f:id:sukechannnn:20201210211734j:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>エビチリ</figcaption></figure></p>

<h2>工夫③ - なるべく毎日同じ時間モブプロする</h2>

<p>以前は、金曜日にまとめてプランニングを行っていたので、モブプロできるのが週４日でした。１日の中で５時間モブプロをやる日と、全くやらない日が混在してる状態です。集中して作業する時間をまとめて確保するためにそうしていたのですが、モブプロは長時間やるとめちゃくちゃ疲れるんですよね。逆に言うと、クリアな脳なら短時間でもめちゃくちゃ進捗します。</p>

<p>ということで、なるべく同じ時間で毎日モブプロした方が良いことが分かったので、プランニングを他の日に移動して、最低２時間はモブプロの時間を確保するようにしました。今では無理なく週の最後まで開発をすることができています。</p>

<p>また、上記の工夫により毎日の進捗が安定するようになったので、プロジェクトマネージメントの難易度がぐっと下がりました。この半年間、ほぼ事前の見積もり通りに開発が進んでいるのは自分でもびっくりです（ガントチャートで記録してます）。</p>

<h2>余談 - モブプロではレビューが要らない</h2>

<p>モブプロを始めてから、以前よりも見積もりが正確になっていることに気づきました。これには "モブプロではレビューがほとんど不要" という特性も関係しているように思います。</p>

<ul>
<li>非同期な開発だと「開発⇢レビュー⇢ (修正⇢レビュー) * n回⇢リリース」だったので、<code>(修正⇢レビュー) * n回</code> の部分も見積もる必要があったが難しかった</li>
<li>モブプロだと「開発⇢リリース」と単純なので、正確に見積もりやすい</li>
</ul>


<p>やってみて分かったことですが、モブプロだと本当にレビューが最低限で済みます。実装の時点で複数人の目が入ってますからね。今のところ大きなバグもありませんし、これに関しては "コストが下がった" と言って良いでしょう。</p>

<h2>工夫④ - その日やることを朝会で話し合う</h2>

<p>朝会は元々、開発メンバーがそれぞれ「昨日やったこと/今日やること」を報告するという、アジャイル開発ではオーソドックスなやり方でした。非同期な開発では、それぞれやってることが違うので報告し合う必要があったのですが、具体的な内容までは分からないので朝会で何か議論が発生することは稀でした。</p>

<p>モブプロでは、昨日やったことは全員が知っているので、個々人が別々に報告する必要がありません。とはいえ昨日やったことの確認はしたいので、日替わりで１人がやったことを振り返り、その後に今日やることを話し合う感じにしてます。</p>

<p>この、"今日やることを話し合う" 時間がとても良くて、昨日の実装の不安な点を話し合ったり（寝て起きると人は閃く）、これから実装するアプリケーションの設計を話し合ったりと、お互いの認識を同期する場になっています。毎日ちょっとしたプランニングをしてる感じですね。</p>

<p>特に話すことがない日でも、すぐに区切るのではなく積極的に雑談するようにしてます。雑談することでそれぞれの体調や気持ち的な浮き沈みもなんとなく分かり、今日のモブプロの進め方とかどこまでやるかを確認できます。あと、単純に雑談は楽しいので、その日１日頑張ろう！という気持ちになります。</p>

<h2>工夫⑤ - 個人タスクを用意する</h2>

<p>モブプロが中心ではあるものの、個人で開発した方が効率的なことも多々ありますよね。</p>

<ul>
<li>新しい技術の調査</li>
<li>リファクタリング</li>
<li>ある程度形になった後の細かい機能/テストの追加</li>
<li>ライブラリーのアップデート</li>
<li>etc...</li>
</ul>


<p>これらは明示的に "個人タスク" と切り出して、個人をアサインして進めるようにしています。当たり前ですが、個人タスクをやる時間は設けていて、良い息抜きになってるみたいです。</p>

<p>何を個人タスクにするかは、モブプロの中で話し合ってサッと決まってしまうことが多いです。個人タスクをやってて詰まってしまった時にはいつでも聞いて良いし、場合によってはモブプロに戻ることもあります。</p>

<p>また、実装していて「気になるから調べてたらできちゃった」みたいな事もエンジニアならあると思うんですが、そういう時は共有してもらった上でマージしちゃいます。ガチガチにモブプロじゃないとダメ！というルールにしているわけではなく、きちんとコンテキストが共有できているなら良いのです。</p>

<h2>工夫⑥ - プランニングと開発キックオフ</h2>

<p>以前は週次のプランニングは重たい行事でした。来週やることがよく分からないまま、各自で実装をしていたからです。プランニングでしっかり決めないと...というプレッシャーが、チーム全体の空気を重くしていたように思います。</p>

<p>今では、朝会 + モブプロにより毎日やることを確認しているので、開発タスクについて週次のプランニングで話し合うことがかなり減りました。今はビジネスサイドへの進捗状況の共有と、メインタスク以外に発生する細かいタスクについて相談することが主になっています。</p>

<p>代わり...というわけではないのですが、月曜の朝に "プチプランニング" と称して、その週に何をどこまで開発するか確認する場を設けています。その後にチーム全体のミーティングがあるので、プチプランニングで話したことを共有し、チーム全体での認識を合わせるようにしています。</p>

<p>そして、大きな開発を始める前には "開発キックオフ" を開催するようになりました。UI/UXデザインとアプリケーション設計の大まかな叩き台を僕が用意しておき、それを元に具体的な実装について話し合うミーティングです。これは１日で終わることもあるし、数日かかることもあります。今開発している機能の開発キックオフは数日かかりましたが、とても良い感じのアーキテクチャになりました。具体的な設計まで行えたので見通しが良く、楽しく開発を進めることができています。</p>

<h2>工夫⑦ - 自分から話さない人にも明示的に意見を聞く</h2>

<p>最後に、これは個人的に意識していたことですが、自分から話さない人にも積極的に意見を聞くようにしてました。</p>

<p>モブプロを始めた当初は議論を進める人に偏りが出やすかったのですが、改めて意見を聞いてみると、頭の中で別の意見を持ってることも多かったのです。"話さない == 意見がない" ではないんですよね。</p>

<p>なので、雑談を通じて話しやすい雰囲気を作るのとセットで、積極的に全員の意見を明示的に聞くようにしていました。その結果、見落としていた懸念点に気づけたり、実は不要な実装だったことに気づけたりして、実利を得ることができました。</p>

<p>最近は、特に僕が聞かなくてもみんな意見を言ってくれますし、大丈夫なときは「大丈夫です」って明示的に言ってくれます（リアクションだいじ）。意見を求める側も、気になる時は全員の意見を明示的に聞く流れができてきました。すごく良いことだなと思っています。</p>

<h2>モブプロを上手くやるための工夫を繰り返していたら開発チームそのものが成長した</h2>

<p>こんな感じで、モブプロを上手くやるための工夫を繰り返してしたら、チームそのものが良い感じになり、大きく成長することができました。</p>

<p>モブプロの何が良かったのでしょうか。僕は、チームメンバー全員が "自分が考えていること/実際にやったこと" を共有することの大切さを理解し、積極的に共有できる状態になったこと、なのかなと思っています。</p>

<p>以前は喋る前に緊張してめちゃくちゃ準備してたメンバーが、今は頭の中にあるものをそのまま話してくれるようになりました。特に取り繕うこともなく、自然とです。</p>

<p>最近では、今後のやりたいことや構想をチームメンバーと話すと、それぞれで良いやり方や設計を考えてモブプロに持ち寄ってくれます。モブプロで各自が考えたことを元に話し合う時間がとても楽しくて、結果としてめっちゃ良いアーキテクチャが生まれています。</p>

<p>今ならモブプロでなくても、非同期で開発を進めることもできると思います。実際に、開発する内容によっては、メイン開発であっても非同期で実装することもあります。それでも今、メイン開発をモブプロで進めているのは、このままモブプロで行くか？を改めて全員で確認し、その方が良いと皆が明示的に選んでいるからです。</p>

<p>全員がコンテキストを共有した状態で考え工夫することで、チームとして成長できたのかなと思っています。ここまで大変なこともありましたが、諦めずに続けてきて良かった！</p>

<p>一緒に工夫しながら開発してくれているメンバーには感謝しかありません。これからもよろしくお願いします！！！</p>

<hr />

<p>明日は daido1976 の「好きな動画の話」です！お楽しみに！（ちなみに僕が好きなユーチューバーは <a href="https://twitter.com/kneko__">かねこ</a> さんです。）</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2020/10/23/190000</id>
        <link href="https://developer.feedforce.jp/entry/2020/10/23/190000"/>
        <updated>2020-10-23T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。最近の趣味はリハビリと YouTube 鑑賞です。</p>

<p>本日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をしました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQWgD1o2eZC69Mt9F9ln3xQL6Wx82W782cHe1YJEIPHWAdqp6tLEH_I29CyrMBbA9Ag0jmkMoQZ0QQp/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>4 月から <a href="https://jp.feedmatic.net/">Feedmatic</a> という弊社フィードフォースの広告運用サービスに BI ツールである <a href="https://ja.looker.com/">Looker</a> を導入すべく、検討と実装をしてきました。</p>

<p>関わっているエンジニアは私一人で、社内の他のエンジニアからは何やってきたか分からないと思っていたので、今までのまとめ的な発表をしました。</p>

<p>ネット上を探しても導入時の具体的な話は見つけられなかったので、誰かの参考になることも期待して、外向けも意識しています。</p>

<p>Looker ユーザ向けには P30 から「Symmetric 集計」を頑張って解説しています。説明が雑なのは認めます。🙏</p>

<p>Looker は学習コストは高いですが、かなりパワフルなツールなので、個人的には非常にやる気を出して燃えています。🔥</p>

<p>それでは！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js の Static HTML Export で生成したファイルを Lambda@Edge を使わずに CloudFront + S3 にデプロイする]]></title>
        <id>https://developer.feedforce.jp/entry/2020/10/21/111537</id>
        <link href="https://developer.feedforce.jp/entry/2020/10/21/111537"/>
        <updated>2020-10-21T02:15:37.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。</p>

<p>今回は Next.js の Static HTML Export で生成したファイルを Lambda@Edge を使わずに CloudFront + S3 にデプロイする方法を紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#前提">前提</a><ul>
            <li><a href="#Nextjs">Next.js</a></li>
            <li><a href="#CloudFront--S3">CloudFront + S3</a></li>
        </ul>
    </li>
    <li><a href="#やり方">やり方</a><ul>
            <li><a href="#1-S3-側での静的ウェブサイトホスティングの設定">1. S3 側での静的ウェブサイトホスティングの設定</a></li>
            <li><a href="#2-CloudFront-の-Origin-Domain-Name-の設定">2. CloudFront の Origin Domain Name の設定</a></li>
            <li><a href="#3-Referer-を使って-CloudFront-から-S3-への直接アクセスを禁止する">3. Referer を使って CloudFront から S3 への直接アクセスを禁止する</a></li>
            <li><a href="#4-Nextjs-側で各ページのファイル名を-indexhtml-にする設定">4. Next.js 側で各ページのファイル名を index.html にする設定</a></li>
        </ul>
    </li>
    <li><a href="#参考">参考</a></li>
</ul>

<h2 id="前提">前提</h2>

<h3 id="Nextjs">Next.js</h3>

<p>Next.js のアプリで SSR を行う場合は Vercel やその他の Node.js 実行環境のあるサーバにデプロイする必要がありますが、そうでない場合は <a href="https://nextjs.org/docs/advanced-features/static-html-export">Static HTML Export</a> 機能を使って静的ページを出力し、任意の Web サーバにデプロイすることもできます。</p>

<p>Static HTML Export 機能では通常 <code>page/about.tsx</code> というファイルから <code>/about.html</code> が生成されますが、これをそのまま S3 にアップロードして CloudFront 経由で <code>/about</code> にアクセスしても上手く動きません。</p>

<p>Next.js 側で生成されるファイルを <code>/about.html</code> から <code>/about/index.html</code> に変える <a href="https://nextjs.org/docs/api-reference/next.config.js/exportPathMap#adding-a-trailing-slash">trailingSlash: true</a> という設定があるのでこれで一件落着と思いきや、CloudFront + S3 側でも課題がありました…。</p>

<h3 id="CloudFront--S3">CloudFront + S3</h3>

<p>Next.js の Static HTML Export 機能（&amp; <code>trailingSlash: true</code>）でビルドされた <code>/index.html</code> と <code>/about/index.html</code> のように、ルートとサブディレクトリにインデックスドキュメントを含むファイル群をデプロイする際には以下の方法が考えられますが、それぞれに問題があります。</p>

<ol>
<li>CloudFront の <a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html">Default Root Object</a> と <a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html">オリジンアクセスアイデンティティ</a> を使う

<ul>
<li>ルートの index.html は表示できるがサブディレクトリの index.html が表示できない</li>
</ul>
</li>
<li>S3 の <a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/WebsiteHosting.html">静的ウェブサイトホスティング</a> 機能を有効にし、<a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/IndexDocumentSupport.html">インデックスドキュメント</a> を設定する

<ul>
<li>ルート、サブディレクトリともに index.html 表示できるが、S3への直接アクセスが禁止できない</li>
</ul>
</li>
</ol>


<p>👆 の解決策として、以下の記事のように Lambda@Edge などを使って「末尾が "/" で終わっているアクセスのパスに index.html を付与する」というものが多いです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdev.classmethod.jp%2Farticles%2Fdirectory-indexes-in-s3-origin-backed-cloudfront%2F" title="できた！S3 オリジンへの直接アクセス制限と、インデックスドキュメント機能を共存させる方法 | Developers.IO" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://dev.classmethod.jp/articles/directory-indexes-in-s3-origin-backed-cloudfront/">dev.classmethod.jp</a></cite></p>

<p>が、管理するリソースはできるだけ増やしたくないのと、CloudFront の <a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html">Behavior</a> を使ってマルチオリジン構成にしている時にはパス書き換えのロジックが複雑になってしまうので、できれば Lambda@Edge を使わず CloudFront + S3 だけでやる方法を見つけたいと考えていました。</p>

<p>結論としては、<code>2. S3 の 静的ウェブサイトホスティング 機能を有効にし、インデックスドキュメント を設定する</code> の方法を使いながら S3 への直接アクセスを禁止することができたので、その方法をご紹介します。</p>

<h2 id="やり方">やり方</h2>

<p>以下の AWS ナレッジセンターの記事を参考にしました。</p>

<p><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/cloudfront-serve-static-website/#Using_a_website_endpoint_as_the_origin.2C_with_access_restricted_by_a_Referer_header">CloudFront を使用して、Amazon S3 でホストされた静的ウェブサイトを公開するにはどうすればよいですか?#アクセスが Referer ヘッダーで制限されたオリジンとして、ウェブサイトのエンドポイントを使用する</a></p>

<p>ざっくりしたアーキテクチャ図は以下になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201021/20201021094707.png" alt="f:id:daido1976:20201021094707p:plain" title="f:id:daido1976:20201021094707p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3 id="1-S3-側での静的ウェブサイトホスティングの設定">1. S3 側での静的ウェブサイトホスティングの設定</h3>

<p>S3 の静的ウェブサイトを有効にして、インデックスドキュメントを index.html にします。</p>

<p>以下のエンドポイントは後ほど CloudFront の Origin Domain Name に設定する必要があるので控えておきましょう。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201020/20201020084312.png" alt="f:id:daido1976:20201020084312p:plain" title="f:id:daido1976:20201020084312p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3 id="2-CloudFront-の-Origin-Domain-Name-の設定">2. CloudFront の Origin Domain Name の設定</h3>

<p>CloudFront の <code>Origins and Origin Groups</code> タブから Origin の Edit を押下し、</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201020/20201020084835.png" alt="f:id:daido1976:20201020084835p:plain" title="f:id:daido1976:20201020084835p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>Origin Domain Name を S3 の Origin ではなく、<code>1</code> で取得した S3 の静的ウェブサイトのエンドポイント（ドメインの指定なので <code>http://</code> は不要）にします。<a href="#f-9be4dc96" name="fn-9be4dc96" title="S3 の Origin は {bucket}.s3.amazonaws.com のような形式で、S3 の静的ウェブサイトのエンドポイントは {bucket}.s3-website-{region}.amazonaws.com のような形式です。間違えやすいので注意。">*1</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201020/20201020085837.png" alt="f:id:daido1976:20201020085837p:plain" title="f:id:daido1976:20201020085837p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ここまでは通常の静的ウェブサイトホスティングの設定と同じです。</p>

<h3 id="3-Referer-を使って-CloudFront-から-S3-への直接アクセスを禁止する">3. Referer を使って CloudFront から S3 への直接アクセスを禁止する</h3>

<blockquote><p>[ヘッダー名] の [Origin カスタムヘッダー] に、[Referer] と入力します。[値] には、オリジンに転送するカスタムヘッダーを入力します (S3 バケット)。オリジンへのアクセスを制限するために、ランダムな値または他の人は知らない秘密の値を入力することができます。</p></blockquote>

<p>ドキュメントに従ってそのまま Origin の編集画面でカスタムヘッダを設定します。</p>

<p>「ランダムな値または他の人は知らない秘密の値を入力することができます」とある通り、この Referer の値は URL ではなく適当な値でも構いません。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201020/20201020090510.png" alt="f:id:daido1976:20201020090510p:plain" title="f:id:daido1976:20201020090510p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>加えて、S3 コンソールから上記のカスタム Referer ヘッダーがリクエストに含まれることを条件として、<code>s3:GetObject</code> を許可するバケットポリシーを追加します。</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-4">バケットポリシーの例#特定の HTTP Referer へのアクセスの制限 - Amazon Simple Storage Service</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20201016/20201016135940.png" alt="f:id:daido1976:20201016135940p:plain" title="f:id:daido1976:20201016135940p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>これで Referer ヘッダーに指定の値が含まれていないアクセスを禁止することができます。<a href="#f-c001d0bd" name="fn-c001d0bd" title="実際は curl などでこの Referer の値をヘッダにセットすると CloudFront 経由でなくともアクセスできるのですが、今回は一般ユーザからの URL 直打ちによるアクセスが禁止できれば良いので、この方法で問題ないと判断しました。">*2</a></p>

<h3 id="4-Nextjs-側で各ページのファイル名を-indexhtml-にする設定">4. Next.js 側で各ページのファイル名を index.html にする設定</h3>

<p>最後に Next.js の設定で <code>trailingSlash: true</code> を指定して、各ページのファイル名を index.html にします。</p>

<p><a href="https://nextjs.org/docs/api-reference/next.config.js/exportPathMap#adding-a-trailing-slash">https://nextjs.org/docs/api-reference/next.config.js/exportPathMap#adding-a-trailing-slash</a></p>

<h2 id="参考">参考</h2>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/cloudfront-serve-static-website/#Using_a_website_endpoint_as_the_origin.2C_with_access_restricted_by_a_Referer_header">CloudFront を使用して、Amazon S3 でホストされた静的ウェブサイトを公開するにはどうすればよいですか?#アクセスが Referer ヘッダーで制限されたオリジンとして、ウェブサイトのエンドポイントを使用する</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-4">バケットポリシーの例#特定の HTTP Referer へのアクセスの制限 - Amazon Simple Storage Service</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html">&#x30AA;&#x30EA;&#x30B8;&#x30F3;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3078;&#x306E;&#x30AB;&#x30B9;&#x30BF;&#x30E0;&#x30D8;&#x30C3;&#x30C0;&#x30FC;&#x306E;&#x8FFD;&#x52A0; - Amazon CloudFront</a></li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-9be4dc96" name="f-9be4dc96" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">S3 の Origin は {bucket}.s3.amazonaws.com のような形式で、S3 の静的ウェブサイトのエンドポイントは {bucket}.s3-website-{region}.amazonaws.com のような形式です。間違えやすいので注意。</span></p>
<p class="footnote"><a href="#fn-c001d0bd" name="f-c001d0bd" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">実際は curl などでこの Referer の値をヘッダにセットすると CloudFront 経由でなくともアクセスできるのですが、今回は一般ユーザからの URL 直打ちによるアクセスが禁止できれば良いので、この方法で問題ないと判断しました。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ソーシャルPLUS を Rails 5.0 にアップグレードしました]]></title>
        <id>https://developer.feedforce.jp/entry/2020/09/08/142913</id>
        <link href="https://developer.feedforce.jp/entry/2020/09/08/142913"/>
        <updated>2020-09-08T05:29:13.000Z</updated>
        <summary type="html"><![CDATA[<p><b>[2021/08 追記]</b></p>

<p>現在は Rails 5.2 にアップグレード済みです。</p>

<hr />

<p>こんにちは。今年の 4 月に EC Booster チームからソーシャルPLUS チームに異動してきた <a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。</p>

<p>今回はソーシャルPLUS の核となるソーシャルログインサービスの Rails アプリを 4.2 から 5.0 にアップグレードした話を書きます。</p>

<p>ソーシャルPLUS のサービスや技術スタックについては以下の記事が詳しいのでご参照ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F11%2F25%2F120000" title="ソーシャルPLUS の技術スタックを整理してみた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2019/11/25/120000">developer.feedforce.jp</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#はじめに">はじめに</a></li>
    <li><a href="#どんな状態の-Rails-アプリか">どんな状態の Rails アプリか</a></li>
    <li><a href="#どれぐらいの期間かかったか">どれぐらいの期間かかったか</a></li>
    <li><a href="#レビューの仕方">レビューの仕方</a></li>
    <li><a href="#アップグレード時の-Tips">アップグレード時の Tips</a><ul>
            <li><a href="#便利な-gem-たち">便利な gem たち</a><ul>
                    <li><a href="#Strong-Parameters-対応に使える-be_strong-gem">Strong Parameters 対応に使える be_strong gem</a></li>
                    <li><a href="#DEPRECATION-WARNING-のテストを変換する-rails5-spec-converter-gem">DEPRECATION WARNING のテストを変換する rails5-spec-converter gem</a></li>
                </ul>
            </li>
            <li><a href="#カナリアリリース時のセッションデータ取得の不具合">カナリアリリース時のセッションデータ取得の不具合</a></li>
        </ul>
    </li>
    <li><a href="#最後に">最後に</a></li>
</ul>

<h2 id="はじめに">はじめに</h2>

<p>Rails 5.0 がリリースされたのは 2016 年、ということでアップグレードガイド的な記事はすでに素晴らしいものがたくさんあり、「rails 5 アップグレード」というキーワードやエラーメッセージをコピペして検索すれば大体の事象が解決できるはずです。</p>

<p>なので、今回はどんな状態の Rails アプリをどれぐらいの期間かけてどのように進めたかに焦点を当てて書いていきたいと思います。（あとは Tips も少々）</p>

<h2 id="どんな状態の-Rails-アプリか">どんな状態の Rails アプリか</h2>

<p><b>アップグレード前の環境: Ruby 2.5.7, Rails 4.2.11.3 </b></p>

<p>2012 年に Rails 3 系からスタートし、2015 年の Rails 4 系へのアップグレードを経て、5 年ぶりにメジャーバージョンのアップグレードを行う Rails アプリです。</p>

<p><code>rails stats</code> コマンドの実行結果は以下の通りで、simplecov によるテストカバレッジは 92 % です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20200907/20200907175904.png" alt="f:id:daido1976:20200907175904p:plain" width="557" height="600" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>技術的負債はそれなりに溜まっているものの、テストカバレッジが高いのが幸いでした。</p>

<h2 id="どれぐらいの期間かかったか">どれぐらいの期間かかったか</h2>

<p>約 1.5 ヶ月かかりました。</p>

<p>担当者の私が、今回アップグレードした Rails アプリをほぼ初めて触る状態ということもあり、コードリーディングや動作確認に手間取り、時間がかかりました。</p>

<p>また、このアプリの技術的負債の一つとして gem をやたらとバージョン固定していたこともあり、Rails のアップグレードを行う前準備として固定された gem をアップデートする必要もありました。</p>

<h2 id="レビューの仕方">レビューの仕方</h2>

<p>コードレビューは Zoom を用いて同期的に行い、私がレビュアーに変更点を説明、動作確認項目を箇条書きにし、抜け漏れがないかチェックしてもらいました。</p>

<p>また他の方がみて、変更の意図がわかりやすいように Commit メッセージの 2 行目以降に補足コメントをつけるなどの工夫をしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20200908/20200908055938.png" alt="f:id:daido1976:20200908055938p:plain" width="1200" height="449" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="アップグレード時の-Tips">アップグレード時の Tips</h2>

<p>ここからはアップグレード前にこれ知りたかった、という Tips を軽く紹介します。</p>

<h3 id="便利な-gem-たち">便利な gem たち</h3>

<h4 id="Strong-Parameters-対応に使える-be_strong-gem">Strong Parameters 対応に使える be_strong gem</h4>

<p>今回のアップグレードの懸念の一つとしてモデルにある大量の <code>attr_accessible</code> を Strong Parameters に移行するという作業があったのですが、その際に以下の gem が役立ちました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmonochromegane%2Fbe_strong" title="GitHub - monochromegane/be_strong: Strong parameter converter." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/monochromegane/be_strong">github.com</a></cite></p>

<p>使い方は以下の記事にわかりやすくまとまっています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech.pepabo.com%2F2015%2F12%2F18%2Fupgrade-to-strong-parameters%2F" title="さくっとStrongParametersへ移行するbe_strongというgemをつくりました - ペパボテックブログ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech.pepabo.com/2015/12/18/upgrade-to-strong-parameters/">tech.pepabo.com</a></cite></p>

<h4 id="DEPRECATION-WARNING-のテストを変換する-rails5-spec-converter-gem">DEPRECATION WARNING のテストを変換する rails5-spec-converter gem</h4>

<pre class="code" data-lang="" data-unlink>DEPRECATION WARNING: Using positional arguments in functional tests has been deprecated, ...

Deprecated style:
get :show, { id: 1 }, nil, { notice: &#34;This is a flash message&#34; }

New keyword style:
get :show, params: { id: 1 }, flash: { notice: &#34;This is a flash message&#34; }, ...</pre>


<p>数ある DEPRECATION WARNING の中でも 👆 は警告文が長く、デバッグの邪魔になるので、Rails 5.0 へのアップグレードと同じ PR で修正しました。その際に以下の gem が大変便利でした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftjgrathwell%2Frails5-spec-converter" title="GitHub - tjgrathwell/rails5-spec-converter: A tool to upgrade Rails 4-style specs to Rails 5-style" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/tjgrathwell/rails5-spec-converter">github.com</a></cite></p>

<h3 id="カナリアリリース時のセッションデータ取得の不具合">カナリアリリース時のセッションデータ取得の不具合</h3>

<p>ソーシャルPLUS では大量のアクセスを捌く必要があるため、常時複数台のアプリケーションサーバが稼働しています。</p>

<p>そのためインパクトのある変更は可能な限りカナリアリリース<a href="#f-df52a8d8" name="fn-df52a8d8" title="複数サーバのうちの一部にだけ新しいバージョンのアプリケーションをリリースするデプロイ手法">*1</a> を行い、バグ混入時の被害を最小限に留めるようにしています。</p>

<p>今回、Rails と一緒にアップデートされた rack gem にて、セッション ID を用いたセッションデータの取得ロジックに前方互換性がなく、カナリアリリース環境の時のみセッションデータが取得できなくなる不具合が見つかりました。</p>

<p>長くなってしまったので、詳細は以下の記事に書きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fdaido1976%2Fitems%2F7a6f4a304d661d98a11b" title="Rails 4.2.x から 5.0.x にアップグレードする際にカナリアリリースすると session が取得できなくなる不具合を回避する - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/daido1976/items/7a6f4a304d661d98a11b">qiita.com</a></cite></p>

<h2 id="最後に">最後に</h2>

<p>時間はかかりましたが、結果的に移行時のエラーも無く Rails 5.0 へのアップグレードを完遂することができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20200907/20200907184707.png" alt="f:id:daido1976:20200907184707p:plain" width="1200" height="386" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>開発チームリーダーからお褒めの Unipos もいただけて嬉しかったです。</p>

<p>この勢いで Rails 5.2 系までは一気に上げてしまいたいと思っているので引き続き頑張ります！</p>

<p>ではまたお会いしましょう＾＾</p>
<div class="footnote">
<p class="footnote"><a href="#fn-df52a8d8" name="f-df52a8d8" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">複数サーバのうちの一部にだけ新しいバージョンのアプリケーションをリリースするデプロイ手法</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[いろんな本でつながった「認知（cognition）のはなし」]]></title>
        <id>https://developer.feedforce.jp/entry/2020/08/28/183637</id>
        <link href="https://developer.feedforce.jp/entry/2020/08/28/183637"/>
        <updated>2020-08-28T09:36:37.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、入社７年目の今年は自分が<a href="https://jp.finalfantasyxiv.com/">光の戦士</a>になってから７年目にもなります、<a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。</p>

<p>社内の技術勉強会（FFTT）での発表内容をざっとお送りします。今回は、自分の中ではよく考えることがあったけどなかなかアウトプット出来なかった「認知」に関する発表をしました。</p>

<p>ちなみにフルリモートが選択可能になった弊社では、週次で続けている FFTT も Zoom でのオンライン開催をしています。</p>

<h2>スライド</h2>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRUxUQCHhkS_J1I52u2rbELFgenLcGaLw5tHjfLUR_OheLf91wNklJq9dpjov0r8znJELfQ9GMOePu0/embed?start=false&loop=false&delayms=3000" frameborder="0" width="700" height="422" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p><a href="https://speakerdeck.com/tmd45/28-fftt-number-407">speakerdeck.com</a></p>

<h2>内容について</h2>

<p>もともと心理学（というかメンタルヘルス）に興味があって知っていた「認知」と、組織づくりやマネジメント、コーチングといった文脈で読んだ本、それから心理的安全性といった話題が自分のなかで噛み合って面白かったので、つらつらと紹介してみました。</p>

<p>『エンジニアリング組織論への招待』という本は以前にも別のエンジニアが FFTT の発表で引用していました（2018年）。いまでも良い書籍だと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F05%2F21%2F150000" title="『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>スライドの中で紹介した書籍はこちら。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/513kY6L-3yL._SL160_.jpg" class="hatena-asin-detail-image" alt="エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング" title="エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/hatena-blog-22/">エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B9%AD%CC%DA%20%C2%E7%C3%CF" class="keyword">広木 大地</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/22</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Y5FF3M4/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41NO8xvWQoL._SL160_.jpg" class="hatena-asin-detail-image" alt="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)" title="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Y5FF3M4/hatena-blog-22/">他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B1%A7%C5%C4%C0%EE%B8%B5%B0%EC" class="keyword">宇田川元一</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/10/02</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B01BDFHKTE/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41FLH0uViXL._SL160_.jpg" class="hatena-asin-detail-image" alt="「やさしさ」という技術――賢い利己主義者になるための7講" title="「やさしさ」という技術――賢い利己主義者になるための7講"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B01BDFHKTE/hatena-blog-22/">「やさしさ」という技術――賢い利己主義者になるための7講</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A5%D5%A5%A1%A5%F3%A1%A6%A5%A2%A5%A4%A5%F3%A5%DB%A5%EB%A5%F3" class="keyword">ステファン・アインホルン</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/02/04</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>認知行動療法に関する書籍と、おすすめ漫画については省きます😇</p>

<p>どれもおすすめですが、やはり『エンジニアリング組織論への招待』は網羅性と読みやすさがあって一番読んでいただきたい本です。</p>

<p>またこの発表ネタを決めたきっかけになり、スライド中にも記載した２つの記事もご紹介したいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fnabeharuj%2Fn%2Fn26cb34a0d2fa" title="心理的安全性は何であって何でないのか｜人事のなべはる｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tinect.jp%2F%3Fp%3D66220" title="世界一のコーチですら「素直じゃない人は放っておけばいい」と思っていた。" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>発表のなかで「コーチャブルなひととは、認知のリフレーミングができるひとである」という話をしました。</p>

<p>私もそろそろ年齢的には<ruby>中堅<rt>おじさん</rt></ruby>ですが、いつまでもそのように、人の間で学びながら成長できる人間でありたいものです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人的に実践している、Slack に振り回されない方法]]></title>
        <id>https://developer.feedforce.jp/entry/2020/06/29/140000</id>
        <link href="https://developer.feedforce.jp/entry/2020/06/29/140000"/>
        <updated>2020-06-29T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。足底筋膜炎は誤診のようでした。リハビリに勤しむ日々です。</p>

<p>今回は社内向けに書いた esa 記事が好評でしたので、少し改変してお届けします。</p>

<p>フィードフォースでは Slack を使っており、リモートワークにおけるコミュニケーションの手段も Slack がメインです。</p>

<p>Slack はチャットツールであるため、ある程度のリアルタイム性を求められますが、ただそれに従っていると振り回されてしまいます。</p>

<p>今回は私が実践しているいくつかの工夫を紹介します。他に良い方法があれば、是非教えてください。</p>

<ul class="table-of-contents">
    <li><a href="#今すぐできないことあとでやるあとで確認するは自分にリマインドする">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</a></li>
    <li><a href="#自分が他の人に依頼した時もリマインドを設定する">自分が他の人に依頼した時もリマインドを設定する</a></li>
    <li><a href="#チャンネルは優先度を付ける">チャンネルは優先度を付ける</a></li>
    <li><a href="#見なくなったチャンネルからはこまめに抜ける">見なくなったチャンネルからはこまめに抜ける</a></li>
    <li><a href="#未読チャンネルはショートカットキーで移動する">未読チャンネルはショートカットキーで移動する</a></li>
</ul>

<h2 id="今すぐできないことあとでやるあとで確認するは自分にリマインドする">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</h2>

<p>自分にリマインドすることで忘れることが出来る。同期的コミュニケーションを非同期に逃がす感じ。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014903.png" alt="f:id:masutaka26:20200627014903p:plain" title="f:id:masutaka26:20200627014903p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>👇 <code>slackbot</code> からの DM で通知される。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013415.jpg" alt="f:id:masutaka26:20200627013415j:plain" title="f:id:masutaka26:20200627013415j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>すぐ出来なくてさらに先延ばししたければ、Snooze する。出来ない時はゆるふわで良いので Snooze することが大事。放置しないようにしている。</p>

<p>👇 たまに <code>slackbot</code> の DM とかで <code>/remind list</code> して確認している。Snooze し忘れたりして、過去のリマインドが残っているとこんな感じになる。→ <code>Past and Incomplete</code></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013716.png" alt="f:id:masutaka26:20200627013716p:plain" title="f:id:masutaka26:20200627013716p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>🌀 本当は Gmail の Inbox（受信トレイ）でリマインド管理したい。Snooze が使いやすいし。</p>

<h2 id="自分が他の人に依頼した時もリマインドを設定する">自分が他の人に依頼した時もリマインドを設定する</h2>

<p>相手が忘れても大丈夫になる。これも同期コミュニケーションから非同期への変換。</p>

<h2 id="チャンネルは優先度を付ける">チャンネルは優先度を付ける</h2>

<p>私の場合は <code>Starred</code> > <code>Low Priority</code> > <code>Channels</code> という優先度にしてます。
（優先度が分からなくなるので、<a href="https://slack.com/intl/ja-jp/help/articles/226410907-%E5%85%A8%E3%81%A6%E3%81%AE%E6%9C%AA%E8%AA%AD%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B">全未読機能</a>は使っていません）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014706.png" alt="f:id:masutaka26:20200627014706p:plain" title="f:id:masutaka26:20200627014706p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><code>Starred</code> と <code>Channels</code> は最初からあるグルーピングです。<code>Low Priority</code> は自分で作りました。</p>

<p>公式ヘルプ: <a href="https://slack.com/intl/ja-jp/help/articles/201331016-%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%82%84%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AB%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B">チャンネルやダイレクトメッセージにスターを付ける | Slack</a></p>

<p>💡 <code>Channels</code> の中には mute しているチャンネルもあります。</p>

<h2 id="見なくなったチャンネルからはこまめに抜ける">見なくなったチャンネルからはこまめに抜ける</h2>

<p>抜けたいチャンネルで <code>/leave</code> と発言すると、一瞬で抜けられるよ。</p>

<h2 id="未読チャンネルはショートカットキーで移動する">未読チャンネルはショートカットキーで移動する</h2>

<ul>
<li>Windows

<ul>
<li>前の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↑</code></li>
<li>次の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↓</code></li>
</ul>
</li>
<li>Mac

<ul>
<li>前の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↑</code></li>
<li>次の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↓</code></li>
</ul>
</li>
</ul>


<p>公式ヘルプ: <a href="https://slack.com/intl/ja-jp/help/articles/201374536-Slack-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88">Slack のキーボードショートカット | Slack</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS Safari を Mac Safari でデバッグするときの注意点]]></title>
        <id>https://developer.feedforce.jp/entry/2020/04/20/201356</id>
        <link href="https://developer.feedforce.jp/entry/2020/04/20/201356"/>
        <updated>2020-04-20T11:13:56.000Z</updated>
        <summary type="html"><![CDATA[<p>ごきげんようございます、<a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。</p>

<p>業務上の必要があって、タイトルのとおり iOS 端末（今回は iPhone XR）の Safari でのデバッグのため、Mac につないで Mac Safari の Web インスペクタを使いました。</p>

<p>このやり方については一般的によく情報が公開されてるので、ここでは割愛します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20200420/20200420201249.png" alt="f:id:tmd45:20200420201249p:plain" title="f:id:tmd45:20200420201249p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3>今回ハマったことと解決法</h3>

<p>iPhone と Mac を USB ケーブルで繋ぎ、iPhone 側で「この Mac を信頼する」許可を行いました。</p>

<p>が、<b>その途端 Mac Safari の開発メニューから、繋げた iPhone デバイスが見つからなくなってしまいました</b>。
どこいったの私の iPhone ちゃん... Mac の Finder にはいるのに… 🤔</p>

<p>結果的に、<b>iPhone 側の Wifi を OFF に</b>したらデバイス表示されるようになりました。</p>

<p>ちなみにこの解にたどり着くまでに、iOS を最新にしたり、macOS を最新にしたり、双方を再起動したりもしています。最新バージョン同士になるように気をつけるのは基本でしょうね…（古いバージョンで確認したい場合は難儀ですが…）</p>

<p>またこの方法、今回の iPhone が Cellular 対応であったため事なきを得ていますが、Cellular 対応でない場合は Safari からインターネットにアクセスできなくなるので、あまり有効な方法とは思えません…</p>

<p>これに関する公式あるいは公式に近しいソース情報を見つけられていません。
なにか情報をお持ちの方がいたらぜひ <a href="https://twitter.com/tmd45">@tmd45</a> に教えてください…</p>

<p>普段から iOS 開発に精通しているわけではないので、超基本的なことだったらすみません！！！ 🙈</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SDK for Ruby で S3 Select を使って S3 にある CSV ファイルからデータを抽出する]]></title>
        <id>https://developer.feedforce.jp/entry/2020/04/06/173701</id>
        <link href="https://developer.feedforce.jp/entry/2020/04/06/173701"/>
        <updated>2020-04-06T08:37:01.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。つい先日 30 歳になりました。</p>

<p>S3 に置いてある大きめの CSV ファイルから特定のデータだけ抽出して取得するのに S3 Select は大変便利です。</p>

<p><a href="https://aws.amazon.com/jp/athena/">Amazon Athena</a> とは違い単一のファイルのみしか対象にできませんが、その分手軽に利用することができます。</p>

<p>Python や Go の日本語記事はあるものの、Ruby の記事がなかったので書かせていただきます。</p>

<h2>実行環境</h2>

<ul>
<li>Ruby 2.7.0</li>
<li>aws-sdk-s3 1.60.2</li>
</ul>


<h2>コード例</h2>

<p>今回は複数の id をキーに CSV ファイルからデータを抽出する例を見てみましょう。</p>

<p>少し長いですが、以下のコードで動きます。</p>

<p><a href="https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Client.html#select_object_content-instance_method">Aws::S3::Client#select_object_content</a> が Ruby から S3 Select を使うためのメソッドです。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">require</span> <span class="synSpecial">'</span><span class="synConstant">aws-sdk-s3</span><span class="synSpecial">'</span>
<span class="synPreProc">require</span> <span class="synSpecial">'</span><span class="synConstant">csv</span><span class="synSpecial">'</span>

s3_client = <span class="synType">Aws</span>::<span class="synType">S3</span>::<span class="synType">Client</span>.new(<span class="synConstant">region</span>: <span class="synSpecial">'</span><span class="synConstant">ap-northeast-1</span><span class="synSpecial">'</span>)

bucket = <span class="synSpecial">'</span><span class="synConstant">s3-select-sample</span><span class="synSpecial">'</span>
key = <span class="synSpecial">'</span><span class="synConstant">target_sample_users.csv</span><span class="synSpecial">'</span>

<span class="synComment"># サンプル用のデータを準備する</span>
s3_client.put_object(<span class="synConstant">bucket</span>: bucket, <span class="synConstant">key</span>: key, <span class="synConstant">body</span>: <span class="synType">File</span>.read(<span class="synSpecial">'</span><span class="synConstant">sample_users.csv</span><span class="synSpecial">'</span>))

<span class="synComment"># 与えられた ids 配列の id で検索し、id と name だけ抽出するクエリを作成する</span>
<span class="synPreProc">def</span> <span class="synIdentifier">build_query</span>(ids)
  &lt;&lt;~<span class="synConstant">QUERY</span>
<span class="synConstant">    SELECT</span>
<span class="synConstant">    s.id</span>
<span class="synConstant">    , s.name</span>
<span class="synConstant">    FROM S3Object s</span>
<span class="synConstant">    WHERE s.id</span>
<span class="synConstant">    IN ('</span><span class="synSpecial">#{</span>ids.join(<span class="synSpecial">&quot;</span><span class="synConstant">', '</span><span class="synSpecial">&quot;</span>)<span class="synSpecial">}</span><span class="synConstant">')</span>
<span class="synConstant">  </span><span class="synSpecial">QUERY</span>
<span class="synPreProc">end</span>

<span class="synComment"># `#select_object_content` に渡すパラメータを作成する</span>
<span class="synPreProc">def</span> <span class="synIdentifier">build_params</span>(bucket, key, query)
  {
    <span class="synConstant">bucket</span>: bucket,
    <span class="synConstant">key</span>: key,
    <span class="synConstant">expression_type</span>: <span class="synSpecial">'</span><span class="synConstant">SQL</span><span class="synSpecial">'</span>,
    <span class="synConstant">expression</span>: query,
    <span class="synConstant">input_serialization</span>: {
      <span class="synComment"># field_delimiter を &quot;\t&quot; にすることでタブ区切りのファイルにも対応可能</span>
      <span class="synConstant">csv</span>: { <span class="synConstant">file_header_info</span>: <span class="synSpecial">'</span><span class="synConstant">USE</span><span class="synSpecial">'</span>, <span class="synConstant">allow_quoted_record_delimiter</span>: <span class="synConstant">true</span>, <span class="synConstant">record_delimiter</span>: <span class="synSpecial">&quot;\n&quot;</span>, <span class="synConstant">field_delimiter</span>: <span class="synSpecial">'</span><span class="synConstant">,</span><span class="synSpecial">'</span> }
    },
    <span class="synConstant">output_serialization</span>: {
      <span class="synConstant">csv</span>: { <span class="synConstant">record_delimiter</span>: <span class="synSpecial">&quot;\n&quot;</span>, <span class="synConstant">field_delimiter</span>: <span class="synSpecial">'</span><span class="synConstant">,</span><span class="synSpecial">'</span> }
    }
  }
<span class="synPreProc">end</span>

<span class="synComment"># id が 1 と 50 のユーザを検索する</span>
query = build_query([<span class="synConstant">1</span>, <span class="synConstant">50</span>])
params = build_params(bucket, key, query)

<span class="synComment"># S3 Select を使ってレスポンスを取得する</span>
response = s3_client.select_object_content(params)

<span class="synComment"># `#event_type == :records` の中にレコード（抽出されたデータ）が含まれる</span>
csv_list = response.payload.select { |<span class="synIdentifier">p</span>| p.event_type == <span class="synConstant">:records</span> }.map(&amp;<span class="synConstant">:payload</span>).map(&amp;<span class="synConstant">:read</span>)
csv = <span class="synType">CSV</span>.parse(csv_list.join)

<span class="synComment"># マルチバイト文字列を扱う場合</span>
csv.map <span class="synStatement">do</span> |<span class="synIdentifier">row</span>|
  row.map { |<span class="synIdentifier">r</span>| r.force_encoding(<span class="synSpecial">'</span><span class="synConstant">UTF-8</span><span class="synSpecial">'</span>) }
<span class="synStatement">end</span>

p csv
</pre>


<p><code>sample_users.csv</code> は以下のような CSV を想定しています。（値は <a href="https://github.com/ffaker/ffaker">ffaker gem</a> を使って作成しました）</p>

<pre class="code" data-lang="" data-unlink>id,name,email,address,job
0,小出整,idell@boyle.us,773-9409 群馬県大府市安芸区福山市0丁目4番4号,運転手
1,坂口昭三,clifford.steuber@walshkutch.name,663-8507 東京都豊島区裾野市842,管理栄養士
2,池間悠希,taunya.kerluke@hellerweimann.ca,898-7832 東京都港区鯖江市8丁目5番3号,理学療法士
3,北野真美,rick.nitzsche@harvey.info,411-8019 静岡県大野市中村区駒ヶ根市9丁目4番9号,テレビディレクター
4,関根京子,francene@cummings.com,809-0176 東京都練馬区夕張市524,クラブDJ
5,熊本とうこ,bo.oconner@bradtkemiller.biz,423-3182 青森県柏原市佐渡市2丁目5番9号,指揮者
...
50,酒向彩香,seema.denesik@fahey.us,481-5386 宮崎県上高井郡にかほ市9丁目1番1号,クラブDJ</pre>


<p>上記コードを実行すると、出力は以下のようになります。</p>

<pre class="code" data-lang="" data-unlink>[[&#34;1&#34;, &#34;坂口昭三&#34;], [&#34;50&#34;, &#34;酒向彩香&#34;]]</pre>


<h2>補足</h2>

<p>レスポンスのサイズが不明な場合、S3 Select はデータを複数のイベントに分割し、ストリームとして返す仕様になっています。</p>

<p>今回は全てのデータが到着するのを待ってから処理するようなコードになっていますが、<a href="https://aws.amazon.com/jp/blogs/developer/introducing-support-for-amazon-s3-select-in-the-aws-sdk-for-ruby/">AWS Developer Blog</a> にはストリームを活かして複数のイベントを非同期に処理する方法も記載されていますので、ご興味のある方はぜひご覧になってください。</p>

<p>ちなみに S3 Select を S3 Management Console から試したい場合は以下の箇所から利用できます。ご参考まで。</p>

<p><figure class="figure-image figure-image-fotolife" title="最初この位置にあるの気づかなかった…"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20200404/20200404205717.png" alt="f:id:daido1976:20200404205717p:plain" title="f:id:daido1976:20200404205717p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>最初この位置にあるの気づかなかった…</figcaption></figure></p>

<h2>結論</h2>

<p>S3 Select めっちゃ便利。</p>

<h2>参考</h2>

<ul>
<li><a href="https://aws.amazon.com/jp/blogs/developer/introducing-support-for-amazon-s3-select-in-the-aws-sdk-for-ruby/">Introducing support for Amazon S3 Select in the AWS SDK for Ruby | AWS Developer Blog</a></li>
<li><a href="https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3/Client.html">Class: Aws::S3::Client &mdash; AWS SDK for Ruby V3</a></li>
<li><a href="https://dev.classmethod.jp/articles/sugano-040-s3-select/">Amazon S3 Select &#x304C;&#x4E00;&#x822C;&#x516C;&#x958B;&#x3055;&#x308C;&#x305F;&#x306E;&#x3067;&#x4F7F;&#x3063;&#x3066;&#x307F;&#x305F;&#xFF08;Python&#xFF09; | Developers.IO</a></li>
<li><a href="https://dev.classmethod.jp/articles/amazon-s3-select-with-aws-sdk-for-go/">AWS SDK for Go &#x3067; Amazon S3 Select &#x3092;&#x8A66;&#x3057;&#x3066;&#x307F;&#x305F; | Developers.IO</a></li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.16.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/03/29/220805</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/03/29/220805"/>
        <updated>2020-03-29T13:08:05.000Z</updated>
        <summary type="html"><![CDATA[<p>前回のリリースから 1 週間ほどですが、今日予定していたライブが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%ED%A5%CA%A5%A6%A5%A4%A5%EB%A5%B9">コロナウイルス</a>の影響で中止になったので暇を持て余しました 😷</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Freleases%2Ftag%2Fv0.16.0" title="Release v0.16.0 · ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.16.0">github.com</a></cite></p>

<h2>v0.16.0 の新機能</h2>

<p>2 つありますが、どちらも若干の Breaking Change です。
とはいえ普通に使っていたら全く影響を受けないと思います。</p>

<h3><a href="https://github.com/ryz310/my_api_client/pull/225([@ryz310](https://github.com/ryz310">新機能 1. エラーハンドラがエラーを検出した際は常に例外を raise するようになりました</a></h3>

<p><code>my_api_client</code> では <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> からのレスポンス内容に応じて例外を発生させる <code>error_handling</code> というメソッドが利用できます。</p>

<p>以下に <code>error_handling</code> を利用した例を示します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">ApplicationApiClient</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">10</span> }

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyErrorClass</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">30</span> }, <span class="synConstant">with</span>: <span class="synConstant">:my_error_handling</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">40</span> } <span class="synStatement">do</span> |<span class="synIdentifier">params</span>, <span class="synIdentifier">logger</span>|
    <span class="synComment"># Do something.</span>
  <span class="synStatement">end</span>

  <span class="synComment"># GET error/:code</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">request</span>
    get <span class="synSpecial">'</span><span class="synConstant">path/to/resouce</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>

  <span class="synStatement">private</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">my_error_handling</span>(params, logger)
    <span class="synComment"># Do something.</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>この例の場合、 <code>ExampleApiClient#request</code> を実行すると <code>GET https://example.com/path/to/resouce</code> に対してリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが実行され、レスポンスボディが <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> 形式だった場合、JSONPath <code>$.error.code</code> の値に応じて以下の処理を実行します。</p>

<ul>
<li><code>10</code> だった場合 <code>MyApiClient::Error</code> を発生させる</li>
<li><code>20</code> だった場合 <code>MyErrorClass</code> を発生させる</li>
<li><code>30</code> だった場合 <code>#my_error_handling</code> を実行する <strong>（例外は発生しない）</strong></li>
<li><code>40</code> だった場合 <code>do ~ end</code> を実行する <strong>（例外は発生しない）</strong></li>
</ul>


<p><code>MyApiClient::Error</code> は <code>raise</code> オプションで例外クラスを指定しなかった場合のデフォルトの例外クラスです。</p>

<p>この時、従来は <code>30</code> と <code>40</code> のように <code>with</code> や <code>block</code> を利用した場合は、処理の中で明示的に <code>raise</code> を実行しない限り、例外は発生しませんでした。
エラー検出時に例外を発生させるかどうかは、 <code>my_api_client</code> の利用者に委ねられていた形になります。</p>

<p>しかしながら、ここに自由度を持たせるよりも、 <strong>エラー検出時には必ず <code>raise</code> させて <code>rescue</code> で異常時の処理を記述する</strong> 、という方式に統一した方が <code>my_api_client</code> の利用方法としても理解しやすく、特に困るケースも想定されなかったことから、以下のように変更することにしました。</p>

<ul>
<li><code>10</code> だった場合 <code>MyApiClient::Error</code> を発生させる <strong>（変更なし）</strong></li>
<li><code>20</code> だった場合 <code>MyErrorClass</code> を発生させる <strong>（変更なし）</strong></li>
<li><code>30</code> だった場合 <code>#my_error_handling</code> を実行し、 <strong><code>MyApiClient::Error</code> を発生させる</strong></li>
<li><code>40</code> だった場合 <code>do ~ end</code> を実行し、 <strong><code>MyApiClient::Error</code> を発生させる</strong></li>
</ul>


<p>今後はエラー検出時には常に何らかの例外が <code>raise</code> されるようになります。
上記の例では <code>MyApiClient::Error</code> が発生しますが、 <code>with</code> や <code>block</code> と同時に <code>raise</code> を指定すれば、任意の例外クラスが発生するようになります。</p>

<p>これにより、 <code>with</code> や <code>block</code> は例外の前処理という位置付けになります。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>としてはログ出力や slack への通知などが考えられます。</p>

<h3><a href="https://github.com/ryz310/my_api_client/pull/226">新機能 2. 標準のエラーハンドラが用意されました</a></h3>

<p><code>my_api_client</code> では <a href="https://github.com/ryz310/my_api_client/blob/e6e4d2265fc834925d45e023c7d43590f98b7171/README.jp.md#installation">generator 機能</a> が用意されており、 <code>$ rails g api_client path/to/resource get:path/to/resource</code> を実行すると以下のファイルが作成されます。</p>

<pre class="code" data-lang="" data-unlink>create  app/api_clients/application_api_client.rb
create  app/api_clients/path/to/resource_api_client.rb
invoke  rspec
create    spec/api_clients/path/to/resource_api_client_spec.rb` </pre>


<p>この時、 <code>application_api_client.rb</code> に標準のエラーハンドラの例がいくつか記載されるのですが、例というより必須のエラーハンドラだよね、ということで、 <code>my_api_client</code> の内部で標準実装するようにしました。
これにより、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a> 4xx と 5xx のレスポンスに対しては標準で例外が発生するようなります。また、ネットワーク系のエラーに対しても標準で <code>300 msec</code> 間隔を空けて 3 回リトライが試行されるようになります。（リトライ処理も従来は明示的な定義が必須でした）</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 従来の `application_api_client.rb` に出力されていた標準のエラーハンドラ例</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">500</span>..<span class="synConstant">599</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ServerError</span>

<span class="synComment"># 従来の `application_api_client.rb` に出力されていた標準のリトライ処理例</span>
retry_on <span class="synType">MyApiClient</span>::<span class="synType">NetworkError</span>, <span class="synConstant">wait</span>: <span class="synConstant">5</span>.seconds, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
</pre>


<p>標準で定義されているエラーハンドラは <a href="https://github.com/ryz310/my_api_client/blob/e6e4d2265fc834925d45e023c7d43590f98b7171/lib/my_api_client/default_error_handlers.rb">my_api_client/default_error_handlers.rb</a> から参照できます。</p>

<p><code>error_handling</code> は後から定義した物が優先されますので、例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a> <code>400</code> に対しては独自の例外クラスを発生させるようにしたい場合、継承先のクラスで <code>error_handling status_code: 400, raise: MyErrorClass</code> のように定義すれば、 <code>MyErrorClass</code> が例外として発生するようになります。</p>

<h2>所感</h2>

<p>社内のプロダクト用に作った gem ですが、少しずつ自分以外のエンジニアも利用してくれるようになってきました。
一方で、自由度が高過ぎると熟知していないと使えない機能が増えてしまう点を課題感として感じるようになってきました。</p>

<p>なるべく自由度の高い gem を意識しつつ、標準の状態でも高度な機能の恩恵を受けられる状態を目指していきたいと思います。</p>

<p>恐らく次の新機能は <code>async/await</code> っぽい機能、または <code>sawyer</code> gem の依存からの脱却なると思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.15.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/03/21/163849</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/03/21/163849"/>
        <updated>2020-03-21T07:38:49.000Z</updated>
        <summary type="html"><![CDATA[<p>その前に <code>v0.14.0</code> もリリースしているのですが、こちらは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0">リファクタリング</a>と Integration Test の実装だけで新機能はありませんでした。
差分が <code>+2,799 -1,246</code> もあるので中身は結構書き換わっています。</p>

<p><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.14.0">Release v0.14.0 &middot; ryz310/my_api_client &middot; GitHub</a></p>

<p>Integration Test では <a href="https://rubyonjets.com/">Ruby on Jets</a> を使って <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> Lambda でサーバーを建てて、CI でのテストで <code>my_api_client</code> を使って実際に HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが成功することを確認しているので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B0%A5%EC">デグレ</a>の心配が随分と緩和されました 😌</p>

<h2>新機能: Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のサポート</h2>

<p>ここからは <code>v0.15.0</code> の話になります。</p>

<p><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.15.0">Release v0.15.0 &middot; ryz310/my_api_client &middot; GitHub</a></p>

<p><code>v0.15.0</code> のメイン機能が Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のサポートになります。<a href="https://jsonapi.org/">JSON:API</a> というしっかりとした仕様もあるようですが、 <code>my_api_client</code> ではそこまで厳密な仕様に則っている訳ではなく、レスポンスに含まれる URL を認識して enumerable に HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行する、というざっくりした機能になります。
レスポンスヘッダの <code>Link</code> などで次のページの URL を返すケースもあるようですが、そちらは現時点では未対応です 🙏</p>

<p>Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> という単語は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a> REST Framework の Pagination 機能の説明で出てきます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.django-rest-framework.org%2Fapi-guide%2Fpagination%2F" title="Pagination - Django REST framework" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.django-rest-framework.org/api-guide/pagination/">www.django-rest-framework.org</a></cite></p>

<p>要するに一度のリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで結果を全件取得させるのではなく、一定の件数を返却し、続きを取得できる Link を一緒に返却する <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のことですね。</p>

<p><strong>Request:</strong></p>

<pre class="code" data-lang="" data-unlink>GET https://api.example.org/accounts/?page=4</pre>


<p><strong>Response:</strong></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synError">HTTP</span> 200 <span class="synError">OK</span>
<span class="synSpecial">{</span>
    &quot;<span class="synStatement">count</span>&quot;: 1023
    &quot;<span class="synStatement">next</span>&quot;: &quot;<span class="synConstant">https://api.example.org/accounts/?page=5</span>&quot;,
    &quot;<span class="synStatement">previous</span>&quot;: &quot;<span class="synConstant">https://api.example.org/accounts/?page=3</span>&quot;,
    &quot;<span class="synStatement">results</span>&quot;: <span class="synSpecial">[</span>
       …
    <span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<h3>使い方</h3>

<p><code>my_api_client</code> での使い方は以下のようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyPaginationApiClient</span> &lt; <span class="synType">ApplicationApiClient</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com/v1</span><span class="synSpecial">'</span>

  <span class="synComment"># GET pagination?page=1</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">pagination</span>
    pageable_get <span class="synSpecial">'</span><span class="synConstant">pagination</span><span class="synSpecial">'</span>, <span class="synConstant">paging</span>: <span class="synSpecial">'</span><span class="synConstant">$.links.next</span><span class="synSpecial">'</span>, <span class="synConstant">headers</span>: headers, <span class="synConstant">query</span>: { <span class="synConstant">page</span>: <span class="synConstant">1</span> }
  <span class="synPreProc">end</span>

  <span class="synStatement">private</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">headers</span>
    { <span class="synSpecial">'</span><span class="synConstant">Content-Type</span><span class="synSpecial">'</span>: <span class="synSpecial">'</span><span class="synConstant">application/json;charset=UTF-8</span><span class="synSpecial">'</span> }
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>通常であれば <code>#get</code> を使って HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行させるのですが、ここでは <code>#pageable_get</code> というメソッドを使用しています。 <code>#pageable_get</code> だと長いので <code>#pget</code> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス</a>も用意しています。
また、 <code>paging</code> というキーワード引数も新たに出てきました。 <code>paging</code> ではレスポンスのどの部分に次のページの URL が含まれるかを JSONPath expression で指定します。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgoessner.net%2Farticles%2FJsonPath%2Findex.html%23e2" title="JSONPath - XPath for JSON" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://goessner.net/articles/JsonPath/index.html#e2">goessner.net</a></cite></p>

<p>以下のような <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> であれば、 <code>$.links.next</code> という JSONPath expression は <code>"https://example.com/pagination?page=3"</code> を取得します。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">links</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">next</span>&quot;: &quot;<span class="synConstant">https://example.com/pagination?page=3</span>&quot;,
    &quot;<span class="synStatement">previous</span>&quot;: &quot;<span class="synConstant">https://example.com/pagination?page=1</span>&quot;<span class="synError">,</span>
<span class="synError">  }</span>,
  &quot;<span class="synStatement">page</span>&quot;: <span class="synConstant">2</span>
}
</pre>


<p>作成した <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client は以下のように使用できます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>api_clinet = <span class="synType">MyPaginationApiClient</span>.new
api_clinet.pagination.each <span class="synStatement">do</span> |<span class="synIdentifier">response</span>|
  <span class="synComment"># Do something.</span>
<span class="synStatement">end</span>

p = api_clinet.pagination
p.next <span class="synComment"># =&gt; 1st page result</span>
p.next <span class="synComment"># =&gt; 2nd page result</span>
p.next <span class="synComment"># =&gt; 3rd page result</span>
</pre>


<h3>結果は <code>Enumerator::Lazy</code> で返却される</h3>

<p><code>#pageable_get</code> は <code>Enumerator::Lazy</code> を返却するので、 <code>Enumerable</code> で定義されているメソッドは一通り利用可能です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.ruby-lang.org%2Fja%2Flatest%2Fclass%2FEnumerator%3D3a%3D3aLazy.html" title="class Enumerator::Lazy (Ruby 2.7.0 リファレンスマニュアル)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.ruby-lang.org/ja/latest/class/Enumerator=3a=3aLazy.html">docs.ruby-lang.org</a></cite></p>

<p><code>Enumerator</code> で返してしまうと <code>#take</code> で 100 ページ目まで結果を取得するような処理を記述したときに、</p>

<ol>
<li>100 ページ分の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を <code>#each</code> で回す</li>
</ol>


<p>という動きになり、 100 回分の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが完了するまで次の処理に移ることができません。</p>

<p><code>Enumerator::Lazy</code> であれば、</p>

<ol>
<li>1 ページ目の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を処理する</li>
<li>2ページ目の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を処理する</li>
<li>...</li>
</ol>


<p>という動きになってくれます。便利ですね ✨</p>

<p><code>Enumerator</code> と <code>Enumerator::Lazy</code> の違いは以下の記事が参考になると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgam0022%2Fitems%2F8acfc0c674b96060c03f" title="EnumeratorとEnumerator::Lazyの違い - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/gam0022/items/8acfc0c674b96060c03f">qiita.com</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『HerokuでSidekiqを監視する方法を確立した』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2020/03/02/140000</id>
        <link href="https://developer.feedforce.jp/entry/2020/03/02/140000"/>
        <updated>2020-03-02T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。最近はドラクエウォークと足底筋膜炎との両立に悩んでいます。</p>

<p>先週の金曜日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『HerokuでSidekiqを監視する方法を確立した』という発表をしました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTZAByBIEhPjehZJ8Jb3atZBJSpu1R371Z3qQZcolE99poCpdYHWfWl5tlH2pQxwBedoCBPYK8rTwoI/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Heroku で Sidekiq を監視する知見を見つけられなかったのが、このお題を選んだ経緯です。どなたかが参考になるとうれしいです。</p>

<p>今回は自宅からのリモート発表でした。物理発表と違って、話した内容よりもリアクションの分からなさによる戸惑いが気になってしまいました。（オイ</p>

<p>※ リアクションはしてくれてたみたいです。🙏</p>

<p>複数モニター必須とか、いろいろ知見がありそうなので、今後蓄積出来ると良さそうです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[駆け込みで Chrome 80 の SameSite=None; Secure の対応をやった🍪]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/02/20/235548</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/02/20/235548"/>
        <updated>2020-02-20T14:55:48.000Z</updated>
        <summary type="html"><![CDATA[<p>ご存知の方も多いかと思いますが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> 80 から 3rd Party <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の取り扱いが厳しくなり、特に指定がないと外部サイトの <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は <strong>POST・iframe・XHR 等のリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト</strong>  で送られなくなります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevelopers-jp.googleblog.com%2F2019%2F11%2Fcookie-samesitenone-secure.html" title="新しい Cookie 設定 SameSite=None; Secure の準備を始めましょう" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developers-jp.googleblog.com/2019/11/cookie-samesitenone-secure.html">developers-jp.googleblog.com</a></cite></p>

<blockquote><p>2 月の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> 80 以降、SameSite 値が宣言されていない <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は SameSite=Lax として扱われます。外部アクセスは、SameSite=None; Secure 設定のある <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> のみ可能になります。ただし、これらが安全な接続からアクセスされることが条件です。</p></blockquote>

<p>とはいえ完全に無効になるわけではなく、 <code>SameSite</code> という属性が宣言されていない <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は <code>Lax</code> という区分がデフォルトで適用されるという物なので、サーバーから返す <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> に対して明示的に <code>SameSite</code> を <code>None</code> に指定して、かつ <code>Secure</code> という属性を付与すれば、従来どおり <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> が送信されます。</p>

<p>去年の秋くらいにもこの <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の対応が必要かどうか、会社で調査していたんですが、その時点では影響を受ける箇所が無くて、特に何も対応せずにスルーしていたんですが、現在開発してる新機能が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BF%A4%DE%A4%BF%A4%DE%A4%B3">たまたまこ</a>の影響を受ける機能だったため、急遽対応することになりました。</p>

<p>結構厳しいな、と思ったのは、これが原因で動かないことに気付くのが結構難しいんですよね。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%B0%A5%EB%A5%B5%A5%A4%A5%F3%A5%AA%A5%F3">シングルサインオン</a>みたいな機能を作ってると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>が異なるので 3rd Party <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の扱いになります。
そして <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> に入っているはずの Session ID が送られてこないので、サーバー側で Session が見つからずにエラー。</p>

<p>自分の手元の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> は 79 で、まだ上記の制限が入っていなかったんですが、以前影響範囲を調査した時に <code>chrome://flags</code> から有効にするフラグを ON にしていたので、他のエンジニアの環境では動作するけど、自分だけ動かないということになり、もしかして、と思って気付いた感じです。</p>

<p>リリース後に気付いてたらヤバかったですね。。</p>

<p>で、こういう問題は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> みたいな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>で対応してくれよって気持ちになるんですが、ちゃんと対応する PR は作られていて、すでに merge もされています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fpull%2F28297" title="Add SameSite to Cookies by cfabianski · Pull Request #28297 · rails/rails" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/rails/rails/pull/28297">github.com</a></cite></p>

<p>ですが、 2020/2/20 現在、これを反映した <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> はまだリリースされていないみたいですね。（最新が 2019/12/19 にリリースされた <code>6.0.2.1</code> ）
また、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 5.2 に反映されるかどうかは微妙な感じになっています。</p>

<p><a href="https://github.com/rails/rails/pull/28297#issuecomment-577414543">https://github.com/rails/rails/pull/28297#issuecomment-577414543</a></p>

<blockquote><p>We will backport to 6.0 as a bug fix, but I don't know this warrants a backport to a security only release like 5.2. <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.0 was released 6 months ago, and upgrading applications could be high, high priority if that problem is so important.</p>

<p>バグ修正として6.0にバックポートしますが、これが5.2のようなセキュリティのみのリリースへのバックポートを保証するかどうかわかりません。 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.0は6か月前にリリースされました。その問題が非常に重要な場合、アプリケーションのアップグレードは優先度が高くなる可能性があります。</p></blockquote>

<p>自分の開発環境は恥ずかしながら <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 4.2 （今年中にアップデートします！）なので、当然反映されるはずもないので、自前で Rack を作成して対応しました。
参考まで以下のようなコードになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># config/initializers/custom_rack_middleware.rb</span>

<span class="synComment"># </span><span class="synTodo">NOTE</span><span class="synComment">: Rails 6.0.x であれば以下の処理は不要となる。</span>
<span class="synType">Rails</span>.application.config.middleware.insert_before(
  <span class="synType">ActionDispatch</span>::<span class="synType">Cookies</span>,
  <span class="synType">CustomRackMiddleware</span>::<span class="synType">SetSameSiteOptionOnCookie</span>
)
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># lib/custom_rack_middleware/set_same_site_option_on_cookie.rb</span>

<span class="synComment"># </span><span class="synTodo">TODO</span><span class="synComment">: Rails 6.0.x にアップデートしたら削除する</span>
<span class="synPreProc">module</span> <span class="synType">CustomRackMiddleware</span>
  <span class="synPreProc">class</span> <span class="synType">SetSameSiteOptionOnCookie</span>
    <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(app)
      <span class="synIdentifier">@app</span> = app
    <span class="synPreProc">end</span>

    <span class="synPreProc">def</span> <span class="synIdentifier">call</span>(env)
      status, headers, body = <span class="synIdentifier">@app</span>.call(env)

      cookies = headers[<span class="synSpecial">'</span><span class="synConstant">Set-Cookie</span><span class="synSpecial">'</span>]
      <span class="synStatement">if</span> cookies.present?
        processed_cookies = cookies.split(<span class="synSpecial">&quot;\n&quot;</span>).map <span class="synStatement">do</span> |<span class="synIdentifier">cookie</span>|
          <span class="synSpecial">&quot;#{</span>cookie<span class="synSpecial">}</span><span class="synConstant">; SameSite=None; Secure</span><span class="synSpecial">&quot;</span>
        <span class="synStatement">end</span>
        headers[<span class="synSpecial">'</span><span class="synConstant">Set-Cookie</span><span class="synSpecial">'</span>] = processed_cookies.join(<span class="synSpecial">&quot;\n&quot;</span>)
      <span class="synStatement">end</span>

      [status, headers, body]
    <span class="synPreProc">end</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p><strong>2020/02/22 追記</strong></p>

<p>ローカルの開発環境など HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トをする環境だと、 <code>SameSite=None</code> の設定を入れると <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> が送られなくなるようです。</p>

<p>ローカルでは上述の Rack を読み込ませないようにするなどの工夫が必要だと思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べた]]></title>
        <id>https://developer.feedforce.jp/entry/2020/02/13/150000</id>
        <link href="https://developer.feedforce.jp/entry/2020/02/13/150000"/>
        <updated>2020-02-13T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>半年くらい前から <a href="https://devcenter.heroku.com/articles/language-runtime-metrics-ruby">Heroku の Ruby Language Metrics</a> (Public Beta) を使い始めました。その時、どのようにメトリクスを収集しているか調べたので、この記事にまとめます。（なぜこのタイミング...）</p>

<p>有効にする方法は前述の公式ドキュメントをどうぞ。<a href="http://blog.hatena.ne.jp/sho7650/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/sho7650/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:sho7650</a> の記事も併せて読むと分かりやすいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsho7650%2Fitems%2F7315e78fa3e6aa75b85b" title="[Ruby] より細かくMetricsを取得したい [Heroku] - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/sho7650/items/7315e78fa3e6aa75b85b">qiita.com</a></cite></p>

<p>ところで、いつから Public Beta だったのですかね？ GA はいつになるのかな...？</p>

<h2>概要</h2>

<p>今回は Rails 前提で説明します。このような仕組みでメトリクスの収集と送信が行われます。</p>

<ol>
<li><a href="https://github.com/heroku/heroku-buildpack-metrics/">heroku/metrics buildpack</a> により、Dyno 起動時に <a href="https://github.com/heroku/agentmon">agentmon</a> がインストールされ、常駐する</li>
<li>Rails が起動すると、<a href="https://github.com/heroku/barnes">barnes</a> gem がメトリクスを収集し始め、定期的に localhost の agentmon に送信する</li>
<li>agentmon は <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> にメトリクスを送信する</li>
<li>エンジニアは Heroku Dashboard から Ruby のメトリクスを閲覧できる</li>
</ol>


<h2>agentmon のインストールと起動</h2>

<p><a href="https://github.com/heroku/heroku-buildpack-metrics/">heroku/metrics buildpack</a> によって、agentmon というデーモンがインストールされます。</p>

<p><a class="embedly-card" href="https://github.com/heroku/agentmon">heroku/agentmon</a></p>

<p>agentmon は後述する barnes gem から受け取ったメトリクスを <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> に送信します。</p>

<p>この URL は環境変数 <code>HEROKU_METRICS_URL</code> の値で、Heroku Dashboard から Enhanced Language Metrics を有効にすると、各 Dyno で定義されます。</p>

<p>面白いのは、Slug 生成時には <a href="https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/bin/compile#L15-L17">/app/.profile.d/heroku-metrics-daemon.sh がインストールされる</a>だけで、Dyno 起動時にこのスクリプトが実行され、<a href="https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/.profile.d/heroku-metrics-daemon.sh">agentmon のインストールと起動が行われる</a>ことです。</p>

<p>Dyno では通常 Puma などのプロセスしか起動されませんが、このような方法を使えばデーモンも起動できることを初めて知りました。</p>

<p>ちなみに <a href="https://devcenter.heroku.com/articles/buildpack-api#profile-d-scripts">Dyno が起動する時 /etc/profile によって <code>/app/.profile.d/*.sh</code> がすべて実行されます</a>。</p>

<h2>barnes gem によるメトリクス収集と送信</h2>

<p><a class="embedly-card" href="https://github.com/heroku/barnes">heroku/barnes</a></p>

<p>Rails が起動すると、<a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L40-L64">Barnes.start</a> から呼ばれる <a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/periodic.rb#L31-L67">Barnes::Periodic.new</a> で Ruby のスレッドが作られます。</p>

<p><code>Barnes.start</code> はすぐに終了しますが、作られたスレッドは非同期で実行されます。無限ループのスレッドなので、Rails が起動している間、起動し続けます。</p>

<p>この無限ループでは 10 秒に 1 回、後述するメトリクスを収集し、localhost の agentmon に送信します。</p>

<p>送信するのはスレッド中のインスタンス変数 <code>@reporter</code> です。これは <a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/reporter.rb">Barnes::Reporter</a> のインスタンスで、<code>statsd_client</code> を介して agentmon に送信します。</p>

<p><code>statsd_client</code> は <code>Barnes::Reporter.new</code> 時に渡されます。
<a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51</a></p>

<h2>収集されるメトリクス</h2>

<p><code>Barnes::ResourceUsage</code> では収集されるメトリクスを一望できます。
<a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63</a></p>

<p>収集されるメトリクスと、収集方法です。</p>

<ul>
<li>Puma のメトリクス（ <code>Barnes::Instruments::PumaInstrument</code> ）

<ul>
<li><a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48</a></li>
</ul>
</li>
<li>CPU 実行時間等のメトリクス（ <code>Barnes::Instruments::Stopwatch</code> ）

<ul>
<li><a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58</a></li>
</ul>
</li>
<li><a href="https://docs.ruby-lang.org/ja/2.7.0/class/ObjectSpace.html#M_COUNT_OBJECTS">ObjectSpace.count_objects</a> の結果（ <code>Barnes::Instruments::ObjectSpaceCounter</code> ）

<ul>
<li><a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30</a></li>
</ul>
</li>
<li><a href="https://docs.ruby-lang.org/ja/2.7.0/method/GC/s/stat.html">GC.stat</a> の結果（ <code>Barnes::Instruments::RubyGC</code> ）

<ul>
<li><a href="https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84</a></li>
</ul>
</li>
</ul>


<h2>まとめ</h2>

<p>Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べました。</p>

<p>ただ有効にするだけだと、他のエンジニアに説明することができなかったことが、今回調べた動機です。</p>

<p>今回に限りませんが、Heroku は完全なブラックボックスではなく、調べると実装が透けて見えるのがとても良いと思います。</p>

<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pusher の Private channels と認証周りの処理を追いかけた]]></title>
        <id>https://developer.feedforce.jp/entry/2020/02/05/172927</id>
        <link href="https://developer.feedforce.jp/entry/2020/02/05/172927"/>
        <updated>2020-02-05T08:29:27.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。もうすぐ 30 歳になります。</p>

<p>Pusher の Private channels と認証周りの処理が公式ドキュメントを読んだだけでは全然わからなかったので、ライブラリの実装を追いかけてみました。</p>

<ul class="table-of-contents">
    <li><a href="#結論">結論</a></li>
    <li><a href="#コード例">コード例</a><ul>
            <li><a href="#クライアントJavaScript">クライアント（JavaScript）</a></li>
            <li><a href="#サーバRails">サーバ（Rails）</a></li>
        </ul>
    </li>
    <li><a href="#ライブラリの実装を追いかけた">ライブラリの実装を追いかけた</a><ul>
            <li><a href="#1-WebSocket-のコネクションを確立する">1. WebSocket のコネクションを確立する</a></li>
            <li><a href="#2-App-Server-の-pusherauth-に-POST-リクエストして認証トークンを取得">2. App Server の /pusher/auth に POST リクエストして認証トークンを取得</a></li>
            <li><a href="#3-認証トークンをライブラリ内でセットして当該チャンネルを-Subscribe-するリクエストを-Pusher-に送る">3. 認証トークンをライブラリ内でセットして当該チャンネルを Subscribe するリクエストを Pusher に送る</a></li>
        </ul>
    </li>
    <li><a href="#参考">参考</a></li>
</ul>

<h2 id="結論">結論</h2>

<p>実装を追っていくと公式ドキュメントに載っている以下の図の通りになっていました。（当たり前）</p>

<blockquote><p><figure class="figure-image figure-image-fotolife" title="https://pusher.com/docs/channels/server_api/authenticating-users"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20200129/20200129205304.png" alt="f:id:daido1976:20200129205304p:plain" title="f:id:daido1976:20200129205304p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption><a href="https://pusher.com/docs/channels/server_api/authenticating-users">https://pusher.com/docs/channels/server_api/authenticating-users</a></figcaption></figure></p></blockquote>

<h2 id="コード例">コード例</h2>

<p>以下のコード例は抜粋ですが、Rails サーバとの通信を仮定しているので、ライブラリは <a href="https://github.com/pusher/pusher-js">pusher-js</a> と <a href="https://github.com/pusher/pusher-http-ruby">pusher-http-ruby</a> を利用する前提です。</p>

<h3 id="クライアントJavaScript">クライアント（JavaScript）</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> pusher = <span class="synStatement">new</span> Pusher(<span class="synConstant">&quot;app_key&quot;</span>, <span class="synIdentifier">{</span>
  auth: <span class="synIdentifier">{</span>
    headers: <span class="synIdentifier">{</span>
      <span class="synComment">// トークンベースで認証を行う場合、ここに何らかの認証情報を載せる</span>
      <span class="synComment">// ...</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

<span class="synComment">// User ごとの Private チャンネルを作成し、Subscribe する場合</span>
<span class="synStatement">const</span> channel = pusher.subscribe(`<span class="synStatement">private</span>-$<span class="synIdentifier">{</span>userId<span class="synIdentifier">}</span>`);

<span class="synComment">// 以下イベントに bind する処理などが続く...</span>
</pre>


<h3 id="サーバRails">サーバ（Rails）</h3>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Routing</span>
<span class="synType">Rails</span>.application.routes.draw <span class="synStatement">do</span>
  <span class="synComment"># ...</span>
  post <span class="synSpecial">'</span><span class="synConstant">/pusher/auth</span><span class="synSpecial">'</span>, <span class="synConstant">to</span>: <span class="synSpecial">'</span><span class="synConstant">pusher_auth#create</span><span class="synSpecial">'</span>
<span class="synStatement">end</span>
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Controller</span>
<span class="synPreProc">class</span> <span class="synType">PusherAuthController</span> &lt; <span class="synType">ApplicationController</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">create</span>
    <span class="synComment"># クライアントから渡ってきた認証情報を使ってユーザを識別するコードは省略</span>
    <span class="synStatement">if</span> current_user
      <span class="synComment"># Pusher のクライアント作成のコードは省略</span>
      response = pusher_client.authenticate(params[<span class="synConstant">:channel_name</span>], params[<span class="synConstant">:socket_id</span>])
      render <span class="synConstant">json</span>: response
    <span class="synStatement">else</span>
      render <span class="synConstant">json</span>: {}, <span class="synConstant">status</span>: <span class="synConstant">403</span>
    <span class="synStatement">end</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<h2 id="ライブラリの実装を追いかけた">ライブラリの実装を追いかけた</h2>

<p>以下、ライブラリのコードを読む際に少しハマったので先にお伝えしておきます。</p>

<p>pusher-js は Web、 React Native など複数のランタイムのビルドを生成できるようになっています。（ビルド時に webpack によって依存関係の解決が切り替わるようになっている）<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>プラットフォームに依存しない共通部分の実装は <code>core/</code> 以下に、プラットフォームに依存する実装は <code>runtimes/</code> 以下に置いてあるのでご留意ください。</p>

<p>それでは、公式ドキュメントの図に沿ってライブラリの実装を追っていきましょう。</p>

<h3 id="1-WebSocket-のコネクションを確立する">1. WebSocket のコネクションを確立する</h3>

<p><strong>公式ドキュメントの図でいうと 1~3 まで。</strong></p>

<p>コネクションの確立は <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/pusher.ts#L268">Runtime.setup</a> の中でやっています。（これは実装者が Pusher オブジェクトを new した時に呼ばれる）</p>

<p>具体的には上記の <code>Runtime.setup</code> の中で <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/runtimes/web/runtime.ts#L46">Pusher.ready が呼ばれ</a>（実装は<a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/pusher.ts#L34-L39">ここ</a>）、その中で <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/pusher.ts#L164-L176">Pusher#connect</a> が呼ばれてコネクションが確立されます。</p>

<p>※ 内部の処理は深かったので省略しますが、最終的には公式ドキュメントの図の通り <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/connection/protocol/protocol.ts#L73-L81"><code>pusher:connection_established</code> イベントが発火して</a>  connected な状態になります。（Web のための <code>Runtime.setup</code> は <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/runtimes/web/runtime.ts#L43-L53">こちら</a> から始まりますので、興味のある方は追ってみてください）</p>

<h3 id="2-App-Server-の-pusherauth-に-POST-リクエストして認証トークンを取得">2. App Server の <code>/pusher/auth</code> に POST リクエストして認証トークンを取得</h3>

<p><strong>公式ドキュメントの図でいうと 4~6 まで。</strong></p>

<p>コネクションが確立されたら <code>Pusher#subscribe</code> の <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/pusher.ts#L225-L230">ここの条件分岐</a> に入り、<a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/channel.ts#L97">*.Channel#authorize</a> が呼ばれて App Server （コード例でいう Rails サーバ）の <code>/pusher/auth</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>に POST リクエスト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>して、App Server 側では <a href="https://github.com/pusher/pusher-http-ruby/blob/v1.3.2/lib/pusher/channel.rb#L169-L175">ここ</a> で認証トークン（<code>authentication_string</code>） を詰めて、 <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/channel.ts#L97-L110">*.Channel#authorize の コールバック</a> に返ってきます。</p>

<p>ちなみにチャンネル名を見て Private かどうかを調べてるのは <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/channels.ts#L64-L80">ここ</a> です。</p>

<p>※ Public channels の場合は <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/channel.ts#L37-L43">ここ</a> で認証をスキップしています。</p>

<h3 id="3-認証トークンをライブラリ内でセットして当該チャンネルを-Subscribe-するリクエストを-Pusher-に送る">3. 認証トークンをライブラリ内でセットして当該チャンネルを Subscribe するリクエストを Pusher に送る</h3>

<p><strong>公式ドキュメントの図でいうと 7。</strong></p>

<p>認証トークンは <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/channel.ts#L106">ここ</a> で勝手にセットされ、 <code>pusher:subscribe</code> のイベントが Pusher に送られます。（最終的には <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/transports/transport_connection.ts#L134">ここ</a> で Pusher にデータが送られている）</p>

<h2 id="参考">参考</h2>

<ul>
<li><a href="https://pusher.com/docs/channels/server_api/authenticating-users">Authenticating users | Pusher docs</a></li>
<li><a href="https://github.com/pusher/pusher-js">GitHub - pusher/pusher-js: Pusher Javascript library | owner=@leesio</a></li>
<li><a href="https://github.com/pusher/pusher-http-ruby">GitHub - pusher/pusher-http-ruby: Ruby library for Pusher Channels HTTP API | owner=@annzenkina</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://github.com/pusher/pusher-js#core-vs-platform-specific-code">https://github.com/pusher/pusher-js#core-vs-platform-specific-code</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><code>authEndpoint</code> は何も指定しなければ <code>/pusher/auth</code> になります。（<a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/defaults.ts#L41">ここでセットされてる</a>）<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>App Server 側に <code>POST /pusher/auth</code> してるのは次のような流れ。Private チャンネルなので、<code>#authorize</code> したら <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/channels/private_channel.ts#L11-L19">PrivateChannel#authorize</a> が呼ばれます。<a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/core/auth/pusher_authorizer.ts#L41-L44">PusherAuthorizer#authorize</a> の中で <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/runtimes/web/runtime.ts#L63-L65">Runtime#getAuthorizers</a> が呼ばれ、 <a href="https://github.com/pusher/pusher-js/blob/v5.0.3/src/runtimes/isomorphic/auth/xhr_auth.ts#L10-L51">この ajax 関数</a> が実行されます。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.13.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/01/21/230012</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/01/21/230012"/>
        <updated>2020-01-21T14:00:12.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://ryz310.hateblo.jp/entry/2020/01/19/152826">つい先日、v0.12.0 をリリースしたばかり</a> ですが、 v0.13.0 をリリースしましたので、含まれる PR の内容について解説していきます。 より詳しい使い方は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">README.jp.md</a> をご参照ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Fblob%2Fmaster%2FCHANGELOG.md%23v0130-jan-21-2020" title="ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/blob/master/CHANGELOG.md#v0130-jan-21-2020">github.com</a></cite></p>

<h2><a href="https://github.com/ryz310/my_api_client/pull/180">#180</a> Stub response on raising error (<a href="https://github.com/ryz310">@ryz310</a>)</h2>

<p>今回はこの PR のみの更新です。
仕事で spec 書いてる最中に「<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで例外が発生した際にレスポンス内容を保存する処理のスタブ化できないじゃん」ってなって作りました。</p>

<p><code>my_api_client</code> では作成した <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client クラスを <code>stub_api_client</code> または <code>stub_api_client_all</code> というメソッドでスタブ化できます。
例えば以下のような <code>ExampleApiClient</code> というクラスを定義した時:</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
  error_handling <span class="synConstant">status_code</span>: <span class="synConstant">500</span>..<span class="synConstant">599</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ServerError</span>

  <span class="synComment"># GET https://example.com/path/to/resouce</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">request</span>
     get <span class="synSpecial">'</span><span class="synConstant">path/to/resouce</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p><code>stub_api_client_all</code> を実行すると <code>ExampleApiClient</code> の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>が全てスタブ化されるようになります。
以下の例だと、 <code>#request</code> を実行した時、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> から <code>{ "message": "Hello world!" }</code> という <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> が返ってきた時と同じ振る舞いをするようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { <span class="synConstant">response</span>: { <span class="synConstant">message</span>: <span class="synSpecial">'</span><span class="synConstant">Hello world!</span><span class="synSpecial">'</span> } }
)

api_client = <span class="synType">ExampleApiClient</span>.new
response = api_client.request
response.message <span class="synComment"># =&gt; 'Hello world!'</span>
</pre>


<p>で、 <code>error_handling</code> で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a>が <code>400..499</code> の時は <code>MyApiClient::ClientError</code> という例外が発生する、という定義になっているのですが、このような例外が発生した時のテストを書くために、 <code>raise</code> のスタブ化も出来るようになっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span> }
)

<span class="synStatement">begin</span>
  api_client = <span class="synType">ExampleApiClient</span>.new
  response = api_client.request
<span class="synStatement">rescue</span> <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
  puts <span class="synSpecial">'</span><span class="synConstant">4xx error!</span><span class="synSpecial">'</span>
<span class="synStatement">end</span>
</pre>


<p>大抵の場合、これらのスタブ化ができれば問題ないのですが、例外発生時のレスポンスを見たい、というケースも無くはないかと思います。
仕様として、例外<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>の <code>#params</code> や <code>#matadata</code> というメソッドからリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トパラメータとレスポンスパラメータを参照できるようになっています。</p>

<p>従来のスタブ化メソッドでも一応指定できなくはなかったんですが、結構手間だったので <code>raise</code> オプションの指定を以下のように拡張しました。
<code>raise</code> と一緒に指定した <code>response</code> が <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のレスポンスとして返されて、それが例外として処理された、というスタブ化になります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { 
    <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>,
    <span class="synConstant">response</span>: { <span class="synConstant">error_code</span>: <span class="synConstant">10</span> }
  }
)

<span class="synStatement">begin</span>
  api_client = <span class="synType">ExampleApiClient</span>.new
  response = api_client.request
<span class="synStatement">rescue</span> <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span> =&gt; e
  e.params.response.data.error_code <span class="synComment">#=&gt; 10</span>
<span class="synStatement">end</span>
</pre>


<p><code>my_api_client</code> は内部で <a href="https://github.com/lostisland/sawyer">Sawyer</a> を使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flostisland%2Fsawyer" title="lostisland/sawyer" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/lostisland/sawyer">github.com</a></cite></p>

<p><code>e.params.response</code> が <code>Sawyer::Response</code> をそのまま返しているので、<code>Sawyer::Response#data</code> からレスポンスボディを参照できます。
<code>Sawyer::Response#data</code> では、レスポンスの <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> を <a href="https://docs.ruby-lang.org/ja/latest/class/OpenStruct.html">OpenStruct)</a> のようにメソッドアクセスできるように変換してくれます。</p>

<p>ただし、 <code>V1.0.0</code> で <code>Sawyer</code> の依存を無くしたいと考えているので、いずれ <code>#data</code> を挟む書き方は変更になるかもしれません。
一応こういう使い方もできますよ、という新機能でした。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.12.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/01/19/152826</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/01/19/152826"/>
        <updated>2020-01-19T06:28:26.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/ryz310/my_api_client">my_api_client v0.12.0</a> に含まれる PR の内容について解説していきます。
より詳しい使い方は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">README.jp.md</a> をご参照ください。</p>

<h2><a href="https://github.com/ryz310/my_api_client/pull/173">#173</a> Avoid sleep on testing</h2>

<p>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client では以下のように書くと、任意の例外を補足して自動的に <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トをリトライしてくれます。
ネットワーク系のエラーとか、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Rate Limit に引っかかった時とかに便利なやつですね。</p>

<p><a href="https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on">ActiveJob の <code>retry_on</code></a> とほぼ同じ使い方になっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>

  <span class="synComment"># GET https://example.com/users</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">get_users</span>
    get <span class="synSpecial">'</span><span class="synConstant">users</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>それは良いんですが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> 上で <code>wait</code> が効いてしまっていたので、上記のコードだとリトライ3回分 wait するので、合計 3 分も待たされてしまっていました。
一応 <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> で <code>sleep</code> を stub するとかやれば回避できますが、そもそもテストでは wait を無視して欲しいですよね。</p>

<p>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client では <code>be_handled_as_an_error</code> という <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> の matcher を用意しているのですが、今回の対応で、この macher を経由してリトライが実行された場合は wait を無視するようになりました。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synType">RSpec</span>.describe <span class="synType">ExampleApiClient</span>, <span class="synConstant">type</span>: <span class="synConstant">:api_client</span> <span class="synStatement">do</span>
  let(<span class="synConstant">:api_client</span>) { described_class.new }

  <span class="synComment"># </span><span class="synTodo">NOTE</span><span class="synComment">: レスポンスで `{ &quot;errors&quot;: { &quot;code&quot;: 20 } }` を受診した際、3 回リトライが実行された後に `MyApiClient::ApiLimitError` として例外処理される。</span>
  it <span class="synStatement">do</span>
    expect { api_request! }
      .to be_handled_as_an_error(<span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>)
      .after_retry(<span class="synConstant">3</span>).times
      .when_receive(<span class="synConstant">body</span>: { <span class="synConstant">errors</span>: { <span class="synConstant">code</span>: <span class="synConstant">20</span> } }.to_json)
  <span class="synStatement">end</span>
<span class="synStatement">end</span>
</pre>


<p>また、 <code>ExampleApiClient</code> は <code>stub_api_client</code> や <code>stub_api_client_all</code> を使用するとスタブ化できます。
スタブ化した状態だと任意の <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> レスポンスを返すか、任意の例外を発生させる、という動作になってリトライが発生しなくなるので、上記の問題はありませんでした。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(<span class="synType">ExampleApiClient</span>, <span class="synConstant">get_users</span>: { <span class="synConstant">users</span>: [{ <span class="synConstant">id</span>: <span class="synConstant">1</span> }, { <span class="synConstant">id</span>: <span class="synConstant">2</span> }, { <span class="synConstant">id</span>: <span class="synConstant">3</span> }] })

response = <span class="synType">ExampleApiClient</span>.new.get_users
response.users <span class="synComment"># =&gt; [{ id: 1 }, { id: 2 }, { id: 3 }]</span>
</pre>


<h2><a href="https://github.com/ryz310/my_api_client/pull/175">#175</a> Verify arguments on error handling definition</h2>

<p><code>error_handling</code> の定義でレスポンスの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a>を指定することができるんですが、このオプション名が <code>status_code</code> なのか <code>status</code> なのかをよく間違える、という問題がありました。<code>$ rails g api_client</code> を使用するとテンプレが作成されるので、そこからエラーハンドリングの定義を行うと間違えにくいのですが、後からエラーハンドリングを追加する時とかにやらかします。作者自身もたまにやらかしてました😇</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 正解</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>

<span class="synComment"># 間違い</span>
error_handling <span class="synConstant">status</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
</pre>


<p>この PR の対応で間違ったオプションを指定すると以下のような例外が発生するようになりました。</p>

<pre class="code" data-lang="" data-unlink>RuntimeError:
  Specified an incorrect option: `status`
  You can use options that: [:response, :status_code, :json, :with, :raise, :block]</pre>


<h2><a href="https://github.com/ryz310/my_api_client/pull/176">#176</a> Provides a syntax sugar of <code>retry_on</code> on <code>error_handling</code></h2>

<p>最初の PR でも出てきた <code>retry_on</code> ですが、 <code>error_handling raise: MyApiClient::ApiLimitError</code> でも同じ例外を指定していて DRY な感じじゃなかったり、<code>retry_on</code> と <code>error_handling</code> をそれぞれ定義してるとお互いの関連が実感しづらい、という不満がありました。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>

  <span class="synComment"># GET https://example.com/users</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">get_users</span>
    get <span class="synSpecial">'</span><span class="synConstant">users</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>この <code>PR</code> では <code>retry</code> というオプションを <code>error_handling</code> に追加しています。これにより、以下の 2 つのコードは等価になります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink>error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, 
                          <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, 
                          <span class="synConstant">retry</span>: { <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span> }
</pre>


<p><code>retry_on</code> にオプションを指定する必要がなければ <code>retry: true</code> と書けば OK です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, 
                          <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, 
                          <span class="synConstant">retry</span>: <span class="synConstant">true</span>
</pre>


<p>ただし、 <code>retry</code> オプションを使用する際は以下の点に注意が必要です。</p>

<ul>
<li><code>error_handling</code> に <code>raise</code> オプションの指定が必須となります。</li>
<li>Block を使った <code>error_handling</code> の定義は禁止されます。</li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[認証認可の情報の追い方みたいな]]></title>
        <id>https://developer.feedforce.jp/entry/2020/01/10/185250</id>
        <link href="https://developer.feedforce.jp/entry/2020/01/10/185250"/>
        <updated>2020-01-10T09:52:50.000Z</updated>
        <summary type="html"><![CDATA[<p>今日の社内勉強会担当だった <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>去年「年が明けたらすぐに勉強会担当だから年末年始連休中にがんばるぞい」と考えていたことを<i>すっかり忘れて</i>、前々日に「今週末の担当やん！」と気づいたので肝が冷えました。今年は Switch 版 脳トレで記憶力を強化していきたい所存。</p>

<p>2019 年後半は認証認可界隈の面白い話がたくさんあったと思っていて、それをざーっと話そうかなとスライドを書き始めたんですが、<b>そういう情報を読むときにどんなことを考えてるのか</b>というのを想像してみたら面白かったのでそっちの話になりました。</p>

<h2>スライド</h2>

<script async class="speakerdeck-embed" data-id="77e81eff04f74f039cc824f0a2f07619" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p><br></p>

<p>p.21 以降の『付録: 認証認可の未来の話』が本編だったかもしれない（発表時間5分）。</p>

<p>「認証認可こわくないよ〜🤗」というのを伝えたかったんですが、登場人物の多さで逆に怖がらせてしまった感が否めなかったですね😇</p>

<p>"エンジニアの情報収集の仕方" 程度になにかの役に立てば幸いです。</p>

<h2>宣伝: ruby-jp Slack</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fruby-jp.github.io%2F" title="ruby-jp.slack.com" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ruby-jp.github.io/">ruby-jp.github.io</a></cite></p>

<p>スライドの中でも紹介していますが <a href="https://ruby-jp.slack.com/archives/CLTCUB934">#authz</a> というチャンネルで認証認可の話をしています。していますというか、自分は聞いているばかりなので :感謝しかない: 。</p>

<p>興味あるかたはぜひ Join してみてくださいね！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[私と gem]]></title>
        <id>https://ryz310.hateblo.jp/entry/2019/12/15/224312</id>
        <link href="https://ryz310.hateblo.jp/entry/2019/12/15/224312"/>
        <updated>2019-12-15T13:43:12.000Z</updated>
        <summary type="html"><![CDATA[<p>どーも、サトウリョウスケです。
<a href="https://ginza-rails.connpass.com/event/155467">金曜日に登壇した勉強会</a> で <del>うっかり</del> ブログ作るって言ってしまったので 10 年ぶりくらいにブログを復活させてみました。ブログのタイトルも 10 年前のタイトルと同じです（元ネタは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a>時代の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8">ドラクエ</a> IV）</p>

<p>勉強会の感想記事は近日中に書こうと思います✍️</p>

<h2>この記事は Feedforce Advent Calendar 2019 の 15 日目です。</h2>

<p>さて、最初の記事からいきなり会社の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>記事になります🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fadventar.org%2Fcalendars%2F4169" title="feedforce Advent Calendar 2019 - Adventar" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://adventar.org/calendars/4169">adventar.org</a></cite></p>

<p>昨日は Yutaka KAWAI さんの「コーヒーは科学である ~抽出器具による味の違い~ <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A1%BC%A5%D1%A1%BC%A5%C9%A5%EA%A5%C3%A5%D7">ペーパードリップ</a>編」でした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Futahca%2Fn%2Fn30594094e406" title="コーヒーは科学である ~抽出器具による味の違い~ ペーパードリップ編｜Yutaka KAWAI｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://note.com/utahca/n/n30594094e406">note.com</a></cite></p>

<p>珈琲屋さんかな？ってくらい凄い記事でしたね☕️
記事に出てきたドリッパーは全種類持ってるってヤバくないですか？？？（もちろん良い意味で）</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A1%BC%A5%D1%A1%BC%A5%C9%A5%EA%A5%C3%A5%D7">ペーパードリップ</a>編ってことは続編もあるのかな？
この感じで記事が量産されたらそのうち書籍化されるかもしれません📚</p>

<h2>本編</h2>

<p>予告通り個人で gem を作る流れについて話そうと思うのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>から流れてくると非エンジニアの方もきっと読まれると思うので、あんまり技術的な話題にせずにフワッとした話でもしようかと思います。</p>

<h3>そもそも gem ってなんだっけ？</h3>

<p>そもそも gem っていうのは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> でできたライブラリの事でして、例えば僕が凄く便利なプログラムを書いて、それを gem として公開すれば、世界中の人が僕のイケてるプログラムを使えるようになる、というものです。まさに <a class="keyword" href="http://d.hatena.ne.jp/keyword/Win-Win">Win-Win</a> しかない仕組み。gem は世界を救います。</p>

<p>一方で、プログラムってのは新機能が追加されたり、不具合が修正されたりして日々アップデートが繰り返されています。
「この機能にはバージョン 1.3 以降でないと使えません」とか「色々イケてない部分が多いからこの機能は廃止します」という変更もあるので、自分のプログラムは一体どのバージョンの gem を使っているのか、という話が物凄く重要だったりします。</p>

<p>gem にはどのバージョンを使っているのか（依存しているのか）という情報を管理する機能も備わっていますので、ある日突然新バージョンで挙動が変わっても「うちは一個前のバージョン使ってます！」という管理ができていれば動かなくなることはないのです。</p>

<p>とはいえ新バージョンでいきなりそんなトンデモ変更されたら困りますけども。</p>

<h3>僕が初めて作った gem</h3>

<p>自分が生まれて初めて作った gem はこの <code>rubocop_challenger</code> という gem です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger" title="ryz310/rubocop_challenger" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger">github.com</a></cite></p>

<p>一般的に gem は他のプログラムと組み合わせて使う事が多いのですが、 <code>rubocop_challenger</code> は単体で動作するやつでして、実行した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ（フォルダ）にあるプログラムの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を少しずつ綺麗に（人間にとって読みやすくしたり、書き方のルールを統一したり）してくれる、という gem です。</p>

<p>というと物凄い神 gem ですが、RuboCop という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を解析してくれる便利な gem を内部で呼び出してプルリク（プルリクが何なのかはググってください）作ってくれる、という仕組みになっているので、「人間が毎日手作業でやらないといけなかった事を自動的にやる」というのが <code>rubocop_challenger</code> の提供する価値になります 🤖</p>

<p>詳しくはちょうど一年くらい前に会社のブログに書いたので、ご興味ありましたら是非。古い内容なので、現在のバージョンからは少しずれてますけど。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F12%2F05%2F140000" title="まだ .rubocop_todo.yml で消耗してるの？ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/12/05/140000">developer.feedforce.jp</a></cite></p>

<p>ちなみにもうすぐ <code>v2.0.0</code> をリリースする予定です。（pre バージョンですが、現時点でもすでに使えます）</p>

<h3>ニッチな gem</h3>

<p>初めて作ったのは <code>rubocop_challenger</code> という「人間が毎日手作業でやらないといけなかった事を自動的にやる」 gem でした。
完全に自分の会社のプロダクト用に作った gem でしたが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> などを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B4%A5%B5">エゴサ</a>してると、ぼちぼち使って頂けているようです。
同じような悩みを抱えている人は世の中にはいるもんですね✨</p>

<p>とはいえ、 gem を公開したら世界中の人たちが使ってくれる、ということには中々ならないです。
一応頑張って英語で説明を書いたりはしていますが、個人の発信力には限界もありますし、何よりニッチです。</p>

<p>というか、個人が作る gem なんて大抵はニッチなものになります。
「あー、こんな gem あったらめっちゃ便利やん？」という gem は大抵世界のどこかの誰かが作ってます。
なので、今までにないような新しいgem を作ろうと思ったら大抵ニッチになります。</p>

<p>じゃあ gem を公開しても大して使ってもらえないし、あんまり意味ないじゃん、って思うかもしれませんが、意味無くはないんですよね👍</p>

<h3>効能 1. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A5%EB%A5%A2%A5%C3%A5%D7">スキルアップ</a></h3>

<p>まず、めっちゃプログラムを書く勉強になります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> で Web 開発をしている人は大抵 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> を使って書いてると思います。ちなみに <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> も gem です。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> は凄くよく出来ているので、Web 開発の難しい部分を 9 割くらいの肩代わりしてくれます。</p>

<p>ところが、自分で一から gem を作ろうとすると、自分の力で解決しないといけないプログラム的な課題がめっちゃあります。
Web 開発はインターネット特有の課題が多いですが、 gem の開発には Web 開発以外の知識も色々要求されたりします。</p>

<p>何より、自分自身で仕様を一から考えないといけないので、普段の開発以上に意思決<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%EA%CE%CC">定量</a>がめっちゃ多いです。
自分は <code>rubocop_challenger</code> 以外にもメンテナンスしている gem が 3 つほどありますが、これらの開発を通して日頃の Web 開発の品質も一段レベルが上がったな、と感じる事が多いです。</p>

<p>なので、gem の開発は自分自身の修行のためだと思ってやると良いかもしれません。誰かに使えてもらえたらラッキー、みたいな。</p>

<p>逆に使ってもらえる事をモチベーションにするとちょっと辛いかもしれないです。思った以上に流行らない。もっと流行れ！</p>

<h3>効能 2. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%C8%A5%D5%A5%A9%A5%EA%A5%AA">ポートフォリオ</a></h3>

<p>gem を公開してるせいか、企業からのスカウトがめっちゃ来るようになります。</p>

<p>自分自身、会社の採用活動に関わる機会が多いのですが、例えばスカウト候補を探す際に候補者の <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> は必ず見るようにしています。
その経験からですが自分で gem 書いて公開しているエンジニアは世の中の 1 割もいないんじゃないかな、って思っています。</p>

<p>自分も gem を作るようになったのはここ 1 ~ 2 年ですし、前職にいた頃だと普段の仕事の帰りが遅かったりもしたので家に帰ってから gem を作るような余裕もありませんでした。なので、本人の熱量や環境が整わないと gem の開発は難しいかもしれません。</p>

<p>しかしながら、自分も採用活動していて「お。この人すごいやん」ってなるのは <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> や Qiita とかで何かしらアウトプットのある方なんですよね。
もちろんアウトプットが無くても実際会ってみたら凄かったって人は沢山いるんですが、採用活動だとその人の仕事でのアウトプットって見えないもんですから。。</p>

<p>別に gem じゃなくても良いんですが、自分自身のキャリア形成を意識するためのアウトプットの一環としてとても有用だと思います。</p>

<h3>効能 3. 魔法のアイテム</h3>

<p>自分が今年作った gem に <code>my_api_client</code> という gem がありまして、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client を作るための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>なんですが、これはプロダクトの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>にも使っています。</p>

<p>自分が携わってるサービスは <a href="https://socialplus.jp/">ソーシャルPLUS</a> というものでして、企業の Web サービスとソーシャルログインプロバイダー（ LINE とか <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> とか）のハブになってるサービスなんですね。そのせいもあって、外部の Web <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> へリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トするという処理が多く、毎回同じようなエラーハンドリングやリトライの処理を何度も書かないといけなくて大変だった訳です。</p>

<p>あと、エラーが発生した際に「ソーシャルPLUS」「ソーシャルPLUSを利用している企業」「ソーシャルログインプロバイダ」の誰が原因なのかを特定するための情報をログに残すとかも都度対応しないといけなくて超大変でした。</p>

<p><code>my_api_client</code> はその辺の処理をすっきり簡単に書けるようにするための gem でして、すっきり簡単なもんだから、チームメイトが <code>my_api_client</code> を活用して自発的にガンガン課題を解決してくれる、という最高にホットな状況を産み出すことに一役買っております。</p>

<p>やっぱエンジニアも人間なので、普段の業務で忙しい中で改善活動も同時にやろうなんてモチベーションは普通は湧いてこない訳です。でも、これを使えばすっきり簡単だよ、っていう魔法のアイテムがあれば、みんなの重い腰を少しだけ軽くする事ができます。</p>

<p><code>my_api_client</code> は自分の中でも割とよくできた gem なので、毎回こんな良い gem が作れる訳じゃないですけど、 gem を作ってチームの生産性が上がるってのはやっぱ魔法のアイテムだなぁって思うんです。gem は世界を救います！（２回目）</p>

<p>なお、 <code>my_api_client</code> については <a href="https://ginza-rails.connpass.com/event/133628/">銀座 Rails #10</a> で登壇したときの資料があるので貼っておきます。これも若干古いので、最新の仕様とは少し異なるかもしれません。
最新の仕様は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">こちら</a> をご覧下さい。</p>

<script async class="speakerdeck-embed" data-id="75d691da45b041deb3db8e6748d81638" data-ratio="1.37081659973226" src="//speakerdeck.com/assets/embed.js"></script>


<h3>効能 4. たのしい</h3>

<p>最後はここに帰ってくるんですが、自分の gem を作るのはやっぱ楽しいのです。いきなり頭悪い文章になりました。いつから頭良い文章書いてると錯覚していた？</p>

<p>以前勉強会で「これまでどういうキャリアを意識してやってきましたか？」って若手のエンジニアから聞かれたのですが、自分みたいな 30 半ばのエンジニアって、エンジニアになった当初は今みたいにエンジニアが持て囃される時代でもなかったので、自分からエンジニアになろうって思った人は少なからず「ただプログラムが好きだった」っていう人が多いんじゃないですかね？わかんないですけど自分はそうでした。</p>

<p>自作の gem を作ってると「やっぱプログラム書くのって楽しい」ってのを思い出させてくれます。
自分は他にも趣味でバンドやったり絵を描いたりしていますが、プログラミングが子供の頃に好きだった工作に一番近いような気がしています。</p>

<p>中々プライベートで時間を作るのは難しいんですが、やはり楽しさが一番根底の原動力になっているのかもしれないですね。</p>

<h2>まとまらないまとめ</h2>

<p>会社の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>向けだし、非エンジニアにも伝わるようなフワッとした文章にしようと思って書いてたら、途中から俺のポエムを書き殴ってただけになった気がしますが、役に立つかどうかは 2 の次にして、とりあえず gem 作ってみると楽しく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A5%EB%A5%A2%A5%C3%A5%D7">スキルアップ</a>できるし、もしかしたら誰かの魔法のアイテムになってるかもしれないよ、というお話でした。</p>

<p>久々にゆる〜い文章書いてて自分的には楽しかったです 笑</p>

<h2>さて、明日の Advent Calendar は？（CV. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%C3%C6%A3%A4%DF%A4%C9%A4%EA">加藤みどり</a>）</h2>

<p><a href="https://adventar.org/calendars/4169">Feedforce Advent Calendar 2019</a>、明日は上岡君が「野球についてor遠隔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>について」書いてくれるみたいです。</p>

<p>最近は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>も遠隔で出来るんですね。野球も遠隔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>も未経験のままおじさんになってしまったので自分には未知の領域です⚾️💨</p>

<p>乞うご期待！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku Meetup #27 で『デプロイで止まらないバッチ処理を求めて』という話をしてきた #herokujp]]></title>
        <id>https://developer.feedforce.jp/entry/2019/12/14/153000</id>
        <link href="https://developer.feedforce.jp/entry/2019/12/14/153000"/>
        <updated>2019-12-14T06:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>土曜日にこんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>この記事は Heroku Advent Calendar 2019 の 14 日目の記事です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2Fheroku" title="Heroku Advent Calendar 2019 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/advent-calendar/2019/heroku">qiita.com</a></cite></p>

<p>昨日は <a href="https://qiita.com/takahito0508">@takahito0508</a> さんの『<a href="https://qiita.com/takahito0508/items/0f30e441dd5fba673560">Salesforce の Org Development 用の Buildpack を作った話</a>』でした。Heroku の Buildpack は割と簡単な仕組みなので、ハードルが低いですよね。</p>

<p>さて、同じ日（2019/12/13）に開催された <a href="https://herokujp.doorkeeper.jp/events/99972">Heroku Meetup #27 "Heroku Vitamin!"</a> で『デプロイで止まらないバッチ処理を求めて』というお題で発表してきました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRVD7Gx345OvUDpoGaRxv5sYQB9uCpvFORJvhgKWySCxNd3WqQQEM4Gfpx0OJYoOyf2sY8GVUKD3spA/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Heroku meetup は<a href="https://herokujp.doorkeeper.jp/events/93092">前々回 #25</a> 以来の参加と登壇です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F07%2F29%2F140000" title="Heroku Meetup #25 &quot;Heroku Ghost&quot; で 2 回話してきた #herokujp - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2019/07/29/140000">developer.feedforce.jp</a></cite></p>

<h2>所感</h2>

<p>世の中では割と多くのバッチ処理が動いていると思います。ですが、Heroku 上でのバッチ処理はあまり情報がないので、今回紹介させて頂きました。技術スタックとしては、Rails の Active Job と Sidekiq です。</p>

<p>今回もニッチな発表ができてとても満足しています。会場にいる一人に刺されば大成功くらいの気持ちで発表していました。</p>

<p>中の人曰く、こんな One-Off Dyno の使い方をする人は初めて見たとのこと。(^^;</p>

<p>使い方としては問題ないそうですが、<a href="https://devcenter.heroku.com/articles/dyno-runtime#private-spaces-runtime">Private Spaces</a> では Dyno の起動が遅いそうなので、そこはやや注意とのこと。</p>

<p>※ <a href="https://ecbooster.jp/">EC Booster</a> では一般向けの <a href="https://devcenter.heroku.com/articles/dyno-runtime#common-runtime">Common Runtime</a> を使っています。</p>

<p>とは言え、<a href="https://devcenter.heroku.com/articles/platform-api-reference#dyno-create">Dyno Create API</a> は Dyno の起動完了を待たずに即座に終了するため、Private Spaces でも大丈夫みたいです。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">.<a href="https://twitter.com/masutaka?ref_src=twsrc%5Etfw">@masutaka</a> さんのお話 <a href="https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw">#herokujp</a> <a href="https://t.co/RZnLFWq9qn">pic.twitter.com/RZnLFWq9qn</a></p>&mdash; Satoshi Nagano (@thisisnagano) <a href="https://twitter.com/thisisnagano/status/1205437869453500416?ref_src=twsrc%5Etfw">2019年12月13日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>明日は <a href="https://qiita.com/seijikohara">@seijikohara</a> さんです。お楽しみに。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[シングルサインオンのひとことで片付けない]]></title>
        <id>https://blog.tmd45.jp/entry/2019/12/09/090000</id>
        <link href="https://blog.tmd45.jp/entry/2019/12/09/090000"/>
        <updated>2019-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2019/identity">認証認可技術 Advent Calendar 2019</a> の 9 日目の記事です。</p>

<p>前日は <del><a href="https://qiita.com/Munchkin">Munchkin</a> さんの『認可機構によるアクセス制御とビジネスロジックによるアクセス制御の使い分け』でした。</del><br/>
<a href="https://qiita.com/kishisuke">kishisuke</a> さんの『<a href="https://qiita.com/kishisuke/items/e83112d06e0d907a956f">Sign in with Apple+Cordovaについて</a>』でした。</p>

<p><a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です、ごきげんよう。</p>

<p>仕事では主に認可の RP 側として toC な認可 IdP（LINE, Google, Yahoo! JAPAN, Facebook, Twitter, など）に接しています、よろしくお願いします。</p>

<p style="text-align:center;">§</p>


<p>認証認可界隈でお仕事していると、社内からもお客様からも「シングルサインオン」（Single Sign-On, 略称 SSO）という便利機能について話題に上がることがあります。</p>

<p>ただこの「シングルサインオン」という単語の定義がちょっとあいまいで、開発者からすると「シングルサインオンをやりたい」と言われて想像するものに認識のズレがあったりします。</p>

<p>たとえば、私が聞いたことがあって「それはシングルサインオンなのか…？」と引っかかったのはこんなところ:</p>

<div style="padding: 1.5em 1.5em 0 1.5em; margin-bottom: 1.5em; border: 1px solid #ddd; border-radius: 5px;">
<p><b>ソーシャルログイン＝シングルサインオン</b></p>
<p>ID/Password による自社会員 DB でのログインしかなかったサービスで、ソーシャルログインが導入されたときにプレスリリースに「SSO 対応！」というウリ文句が 🤔</p>
<p><b>LINE Login v2.1 から SSO 対応</b></p>
<p>ブラウザでの LINE ログインセッションが維持され、v2.0 までは認可フロー中に毎度（LINE ログイン画面上での）ID/Password の入力が必要だったものが、不要になったというもの 🤔</p>
</div>


<p>「シングルサインオン」は Wikipedia でも<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%AA%E3%83%B3">"不十分" な記事としてふわっと書かれて</a>おり、"ユーザがシステムごとにユーザIDとパスワードの組を入力する必要がなくなる" という意味ではこれらは正しそうです。</p>

<p>詳細な実装を見て広義に「これはシングルサインオンだね」と呼ぶのはいいのですが、開発者が困るのは、要望で「シングルサインオンをやりたい」と言われることです。</p>

<p style="text-align:center;">§</p>


<p>というわけで、今回は自分の思いつく範囲で「シングルサインオン」でないものとあるものをいくつか図で整理してみようと思います。</p>

<p><span style="color: #d32f2f">注）このあと添付する図中の URL のドメインやパスはイメージです。わかりやすさのために実在するサービスのドメインも利用していますがパスについては不正確ですのでご了承ください。</span></p>

<p><span style="color: #d32f2f">またその例として挙げているサービスについて批判や毀損を意図しているものではございません（あんまり適当すぎるドメインだと話がわかりづらくて…すみません）。</span></p>

<h3>明らかにシングルサインオンじゃないやつ</h3>

<p>どこに行っても ID と Password の入力を求められるやつ。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応していない単一サービス"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208192628.jpg" alt="f:id:tmd45:20191208192628j:plain" title="f:id:tmd45:20191208192628j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応していない単一サービス</figcaption></figure></p>

<p>単一サービスの場合は、そもそもシングルサインオンそのものが不要。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応していない複数サービス群"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208192803.jpg" alt="f:id:tmd45:20191208192803j:plain" title="f:id:tmd45:20191208192803j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応していない複数サービス群</figcaption></figure></p>

<p>企業から見れば１社内に複数サービス有していなければこの構図にはならないが、ユーザから見るとインターネット上のあらゆるサービスは大きくまとめて「複数サービス群」とも捉えられる。</p>

<p>そういう意味では「単一サービスの場合は、そもそもシングルサインオンそのものが不要」とも言い切れなくなる。</p>

<h3>ソーシャルログインからログインセッションをつくる</h3>

<p>ソーシャルログインを用いると、たいていの場合、ユーザが ID と Password を入力するのは認可プロバイダ（ソーシャルログインプロバイダ）のログインセッションを確立する初回アクセス時のみになる。</p>

<p>ユーザが普段から利用している（＝ログイン済みである）サービスが認可プロバイダとなれば、ユーザは認可フローのなかで「認可する」以外のアクションが不要となるため、手間が減るという利点がある。</p>

<p>サービス側は認可プロバイダから得られた属性情報（プロバイダ側のユーザID など）をもとにして、サービスのログインセッションを確立する。</p>

<p><figure class="figure-image figure-image-fotolife" title="ソーシャルログインに対応したサービス（広義のシングルサインオン）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208193823.jpg" alt="f:id:tmd45:20191208193823j:plain" title="f:id:tmd45:20191208193823j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ソーシャルログインに対応したサービス（広義のシングルサインオン）</figcaption></figure></p>

<p>インターネット上のあらゆるサービスを大きくまとめて「複数サービス群」と捉えた場合、<b>認可プロバイダを介したシングルサインオンになっている</b>と言える。</p>

<p>これが認可プロバイダ側で都度 ID/Password の入力を求める形になっていると、その利点が死んでしまう。</p>

<p><figure class="figure-image figure-image-fotolife" title="残念な例: ソーシャルログインプロバイダがログイン状態を維持しないタイプ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208195524.jpg" alt="f:id:tmd45:20191208195524j:plain" title="f:id:tmd45:20191208195524j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>残念な例: ソーシャルログインプロバイダがログイン状態を維持しないタイプ</figcaption></figure></p>

<p>とはいえ、このケースでも決済前にはあえて再認証を行わせるなど（シングルサインオンとは直接関係しないが）都度認証する手間とセキュリティの向上はケースバイケースでバランスを考える必要がある。</p>

<h3>想像しやすいシングルサインオン</h3>

<p>ここからやっと、シングルサインオンと言われて（自分が）普通に想像するパターン。</p>

<p>ユーザはサービス群のどこか１箇所でログインしていれば、ID/Password 入力の手間をかけずに関連する他のサービスを利用することができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応した複数サービス群（１サービスのログインに依存）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200356.jpg" alt="f:id:tmd45:20191208200356j:plain" title="f:id:tmd45:20191208200356j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応した複数サービス群（１サービスのログインに依存）</figcaption></figure></p>

<p>図中にも書いたが、上記はこんなケースだったりする:</p>

<ul>
<li><code>example.com</code> サービスを作ったあとに <code>example2.com</code> サービスを追加した</li>
<li>ユーザに手間をかけさせることを避けるためにシングルサインオンを導入したい</li>
<li>開発が大変そうなので認証基盤システムを別で作るのは避けたい</li>
</ul>


<p>こういう場合、ユーザはシングルサインオンできて便利かもしれないが、開発者側としては「 <code>example2.com</code> が <code>example.com</code> に依存しており身動きが取りづらい」と感じて、さらなるサービス拡大をしづらくなっている状態だったりする。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応した複数サービス群（認証基盤をはさむ）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200500.jpg" alt="f:id:tmd45:20191208200500j:plain" title="f:id:tmd45:20191208200500j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応した複数サービス群（認証基盤をはさむ）</figcaption></figure></p>

<p>パッと見て健全なのがこの構成。</p>

<p>ただし実質 <code>example.com</code> と <code>example2.com</code> に加えて認証基盤である <code>auth.example.com</code> という３つのシステムを管理することになる。開発事情としては、（それぞれは相当ミニマムでなければ）開発者をそれなりの人数確保したり、チームを分割して運営したいところ。</p>

<p>…というのが前時代的な話で、最近だと IDaaS（Identity as a Service）などを活用することで、認証基盤システムのお守りを自組織からアウトソースするという手もあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="おまけ: シングルサインオンにするかどうかわからないけど備えておく"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200528.jpg" alt="f:id:tmd45:20191208200528j:plain" title="f:id:tmd45:20191208200528j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>おまけ: シングルサインオンにするかどうかわからないけど備えておく</figcaption></figure></p>

<p>IDaaS の台頭で、シングルサインオンにするかどうかはともかく、認証基盤部分を早めにアウトソースするなど選択肢も広がりました。</p>

<p style="text-align:center;">§</p>


<p>はてさて「シングルサインオン」をキーワードに、ソーシャルログインや IDaaS といったものを絡めて書いてみました。</p>

<p>構成を考えるスコープを広めたり狭めたり、必要なセキュリティレベルとのバランスを見たり、開発組織の規模やスキルを加味したり、どんなシステムでもそうですが考えることはたくさんあります。</p>

<p>認証基盤に関わる皆様に置かれましては「シングルサインオン」という定義の曖昧な単語ドーーーン！ではなく、ユーザにどうあって欲しいか、開発をどのようにしていくべきか、などなど具体的なストーリー（要望、仕様）で会話できるといいかなと思う次第にございます。</p>

<p style="text-align:center;">§</p>


<p>明日は <a href="https://qiita.com/olt">olt</a> さんの『<a href="https://qiita.com/olt/items/584f9d1a840d024b2451">TwitterのOAuth1.0 認可用の中間サーバNode.jsで構築する</a>』 お話とのこと。ではでは。</p>

<hr />

<p>編集後記</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2019%2F12%2F10%2F134115" title="『シングルサインオンのひとことで片付けない』を書いて - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2019/12/10/134115">blog.tmd45.jp</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[月末に起動したいバッチを sidekiq-cron で指定し、healthchecks.io で監視する]]></title>
        <id>https://developer.feedforce.jp/entry/2019/12/05/101931</id>
        <link href="https://developer.feedforce.jp/entry/2019/12/05/101931"/>
        <updated>2019-12-05T01:19:31.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>去年の 6/30 からジムに通い始めて、なんとか週に 2~3 のペースで続いています。サプリメントも半信半疑ながら毎日飲んでいますが、ドラッグストアや Amazon で買うと割と高いと思います。</p>

<p>個人的には <a href="https://jp.iherb.com/">iHerb</a> がだいぶオススメです。以前 3.6kg のプロテインを買ったらなぜかキャンペーンが適用されて、30% オフの 6,517 円になりました。</p>

<p>さらにこの<a href="https://www.youtube.com/watch?v=ue0EFA_SxZc">案件動画</a>を見て、プレワークアウトサプリ（C4 SPORT）にも手を出してしまいました。BCAA も飲んでいます。</p>

<p>Twitter とかで検索すると、初回 10% OFF の紹介コードが見つかると思います。さらにお得です。</p>

<p>何の記事でしたっけ...？そうだ、この記事は <a href="https://adventar.org/calendars/4169">Feedforce Advent Calendar 2019</a> の 5 日目の記事です！</p>

<p>昨日は <a href="http://blog.hatena.ne.jp/kano-e/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:kano-e</a> の「2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち」でした。変わらぬボドゲ愛・・・！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fff-boardgame.hatenablog.com%2Fentry%2F2019%2F12%2F04%2F000000" title="2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち - フィードフォース ボドゲ部" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://ff-boardgame.hatenablog.com/entry/2019/12/04/000000">ff-boardgame.hatenablog.com</a></cite></p>

<h2>sidekiq-cron で月末を指定する</h2>

<p>脈絡ありませんが、<a href="https://github.com/ondrejbartas/sidekiq-cron">sidekiq-cron</a> では <code>last</code> で月末を指定することが出来ます。</p>

<p>例えば <code>0 12 last * * Asia/Tokyo</code> の次回実行は <code>2019/12/31 12:00 JST</code> です。<code>2019/11/30 12:00 JST</code> は無事動きました。</p>

<p>このような設定になります。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">sample_job</span><span class="synSpecial">:</span>
  <span class="synIdentifier">active_job</span><span class="synSpecial">:</span> <span class="synConstant">true</span>
  <span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;0 12 last * * Asia/Tokyo&quot;</span>
  <span class="synIdentifier">class</span><span class="synSpecial">:</span> <span class="synConstant">&quot;SampleJob&quot;</span>
  <span class="synIdentifier">queue</span><span class="synSpecial">:</span> default
</pre>


<p>この cron 書式は sidekiq-cron が依存する <a href="https://github.com/floraison/fugit">fugit</a> による実装です。</p>

<p>確認はしていませんが、<code>last</code> の他にも <code>-1</code> や <code>L</code> などが使えるようです。</p>

<p>🔗 <a href="https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747">https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747</a></p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>context <span class="synSpecial">'</span><span class="synConstant">negative monthdays</span><span class="synSpecial">'</span> <span class="synStatement">do</span>

  [
    [ <span class="synSpecial">'</span><span class="synConstant">* * -1 * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * -7--1 * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * -1--27 * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -31,-30,-29,-28,-27,-1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * -7--1/2 * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -7,-5,-3,-1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * L * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * -7-L * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class="synSpecial">'</span> ],
    [ <span class="synSpecial">'</span><span class="synConstant">* * last * *</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">* * -1 * *</span><span class="synSpecial">'</span> ],
  ].each { |<span class="synIdentifier">c</span>, <span class="synIdentifier">e</span>|
    it(<span class="synSpecial">&quot;</span><span class="synConstant">parses </span><span class="synSpecial">#{</span>c<span class="synSpecial">}&quot;</span>) { expect(<span class="synType">Fugit</span>::<span class="synType">Cron</span>.parse(c).to_cron_s).to eq(e) }
  }
<span class="synStatement">end</span>
</pre>


<p><code>negative monthdays</code> って表現は面白い。</p>

<h2>healthchecks.io で月末のバッチを監視する</h2>

<p>バッチが本当に起動したかを監視するのは難しいと思います。月末の監視はさらに難しいと思います。</p>

<p>過度な依存は禁物ですが、<a href="https://healthchecks.io/">healthchecks.io</a> は選択肢に入れても良いかもしれません。以下の記事をどうぞ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F09%2F140000" title="terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/10/09/140000">developer.feedforce.jp</a></cite></p>

<p>前述の cron 設定だと <code>0 12 l * *</code> で監視することが出来ます。<code>l</code> は小文字のエルです。</p>

<p>terraform-provider-healthchecksio の設定例です。</p>

<pre class="code lang-tf" data-lang="tf" data-unlink>resource &quot;<span class="synConstant">healthchecksio_check</span>&quot; &quot;<span class="synConstant">sample_job</span>&quot; <span class="synSpecial">{</span>
  name     <span class="synStatement">=</span> &quot;<span class="synConstant">SampleJob</span>&quot;
  tags     <span class="synStatement">=</span> <span class="synSpecial">[</span>&quot;<span class="synConstant">production</span>&quot;<span class="synSpecial">]</span>
  grace    <span class="synStatement">=</span> &quot;<span class="synConstant">60</span>&quot;
  schedule <span class="synStatement">=</span> &quot;<span class="synConstant">0 12 l * *</span>&quot;
  timezone <span class="synStatement">=</span> &quot;<span class="synConstant">Asia/Tokyo</span>&quot;
  channels <span class="synStatement">=</span> <span class="synSpecial">[</span>data.healthchecksio_channel.slack.id<span class="synSpecial">]</span>
<span class="synSpecial">}</span>

data &quot;<span class="synConstant">healthchecksio_channel</span>&quot; &quot;<span class="synConstant">slack</span>&quot; <span class="synSpecial">{</span>
  kind <span class="synStatement">=</span> &quot;<span class="synConstant">slack</span>&quot;
<span class="synSpecial">}</span>
</pre>


<p>こちらの cron 書式は <a href="https://github.com/healthchecks/healthchecks">healthchecks</a> が依存する <a href="https://github.com/taichino/croniter">croniter</a> による実装です。</p>

<p><code>l</code> 以外の指定は見当たりませんでした。</p>

<p>🔗 <a href="https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223">https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223</a></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">testLastDayOfMonth</span>(self):
    base = datetime(<span class="synConstant">2015</span>, <span class="synConstant">9</span>, <span class="synConstant">4</span>)
    itr = croniter(<span class="synConstant">'0 0 l * *'</span>, base)
    n1 = itr.get_next(datetime)
    self.assertEqual(n1.month, <span class="synConstant">9</span>)
    self.assertEqual(n1.day, <span class="synConstant">30</span>)
    n2 = itr.get_next(datetime)
    self.assertEqual(n2.month, <span class="synConstant">10</span>)
    self.assertEqual(n2.day, <span class="synConstant">31</span>)
    n3 = itr.get_next(datetime)
    self.assertEqual(n3.month, <span class="synConstant">11</span>)
    self.assertEqual(n3.day, <span class="synConstant">30</span>)
    n4 = itr.get_next(datetime)
    self.assertEqual(n4.month, <span class="synConstant">12</span>)
    self.assertEqual(n4.day, <span class="synConstant">31</span>)
</pre>


<p>2019 年もそろそろ終わりです。年末にだけ動くバッチを設定＆監視するのも良いかもしれません。</p>

<p>明日は、こばりゅうの記事です。ひこうきかっけー！？お楽しみに。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ソーシャルPLUS の技術スタックを整理してみた]]></title>
        <id>https://developer.feedforce.jp/entry/2019/11/25/120000</id>
        <link href="https://developer.feedforce.jp/entry/2019/11/25/120000"/>
        <updated>2019-11-25T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS 開発チームリーダーの <a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。ごきげんよう。</p>

<p>ソーシャルPLUS チームではバックエンドエンジニアの絶賛採用活動中なのですが、そのときにまとめた技術スタックについて、採用メディアにだけ使うのももったいないと思ったので、普通にブログ記事に書いてみることにしました。よろしくおねがいします。'`ｨ (ﾟдﾟ)/</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122182928.png" alt="f:id:tmd45:20191122182928p:plain" title="f:id:tmd45:20191122182928p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#ソーシャルPLUS-って">ソーシャルPLUS って？</a></li>
    <li><a href="#システムの役割">システムの役割</a><ul>
            <li><a href="#ソーシャルログインサービス">ソーシャルログインサービス</a></li>
            <li><a href="#LINE-メッセージ配信サービス">LINE メッセージ配信サービス</a></li>
        </ul>
    </li>
    <li><a href="#技術スタックの紹介">技術スタックの紹介</a><ul>
            <li><a href="#バックエンドサーバーサイド">バックエンド（サーバーサイド）</a></li>
            <li><a href="#フロントエンド">フロントエンド</a></li>
            <li><a href="#インフラストラクチャ">インフラストラクチャ</a></li>
            <li><a href="#その他">その他</a></li>
        </ul>
    </li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h1 id="ソーシャルPLUS-って">ソーシャルPLUS って？</h1>

<p>おそらく知らない方が大半だと思うので、かんたんにサービス紹介をば。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsocialplus.jp%2F" title="ソーシャルログイン / ID連携の導入・実装支援サービス「ソーシャルPLUS」" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://socialplus.jp/">socialplus.jp</a></cite></p>

<p>ソーシャルPLUS は、WEB サイトでの会員登録や再ログインがかんたんになる「ソーシャルログイン」を複数プラットフォームまとめて一括で実装できる BtoBtoC の ID 連携サービスです。</p>

<p>対応するプラットフォーム（認可プロバイダ）には LINE、Yahoo! JAPAN、Google、Facebook、Twitter があります。とくに 2016年からは LINE Messaging API によるメッセージ配信や 1to1 トークに対応し、コンシューマー（エンドユーザー）への継続的なリーチや商品購入後のカスタマーサポートなどが可能になりました。ID 連携によりエンドユーザーとのコミュニケーションチャネルが広がり、さらに精度も高められるようになります。</p>

<p>企業の課題を解決するだけでなく、企業が実現したい事の先にいるエンドユーザーにとってメリットがあるかを重要視したユーザーファーストの考え方で、機能追加やサービスの活用提案を行なっています。</p>

<p>2012 年 4 月からサービスを開始し、7 年目となる今年もまだまだ成長しているサービスです。</p>

<h1 id="システムの役割">システムの役割</h1>

<p>ソーシャルPLUS では大きく以下の２つの Rails アプリケーションが中心になっています。</p>

<h2 id="ソーシャルログインサービス">ソーシャルログインサービス</h2>

<ul>
<li>ソーシャルログインの提供</li>
<li>プロバイダからのユーザ情報取得</li>
<li>API 提供</li>
<li>設定管理画面</li>
</ul>


<p>こちらはサービス稼働当初から存在する、コアとなる機能を扱っています。昔ながらの MVC すべてを Rails で構築しているアプリケーションです。</p>

<p>瞬間的なアクセス増加に耐える運用設計や、パフォーマンス改善、プロバイダの仕様変更への追従が、最近の主なタスクでした。</p>

<p>技術スタックは後述しますが、「ソーシャルログインの提供」と「設定管理画面」が１つのアプリケーションとして動いているのは、可用性も保守性もいまいちなので近々分離したいと考えている部分です。</p>

<h2 id="LINE-メッセージ配信サービス">LINE メッセージ配信サービス</h2>

<ul>
<li>スケジュール一括配信</li>
<li>メッセージ（Webhook）受信</li>
<li>1to1 メッセージ（チャットのようにエンドユーザーと対話できる機能）</li>
<li>API 提供</li>
<li>新機能: ステップ配信機能 開発中</li>
</ul>


<p>メッセージ配信サービスは 2017 年 4 月から提供を始めた（このプロダクトのなかでは）比較的新しいサービスです。</p>

<p>フロントエンドを React &amp; Redux で、サーバーサイドを Rails の API モードで構築しています。</p>

<p>これまでエンドユーザーからのメッセージを漏れなく受信するためのアーキテクチャや、メッセージ配信のパフォーマンスを上げる施策に取り組んできました。直近ではデザイナーが参加し、より使いやすい UI や UX を意識しながら新機能の開発を進めています。</p>

<h1 id="技術スタックの紹介">技術スタックの紹介</h1>

<p>現在、ソーシャルPLUS チームには８名の開発者が在籍していますが、メンバーの得意な技術領域によってバックエンド、フロントエンド、インフラのタスクを分けて取り掛かり、相互にフォローしながらチーム開発を進めています。</p>

<p>もちろん本人が希望すればどんな仕事でも関わってもらって構いません。実際、フルスタックを志して手が空けばいろんなタスクを消化しているメンバーもいます。</p>

<h2 id="バックエンドサーバーサイド">バックエンド（サーバーサイド）</h2>

<ul>
<li>ソーシャルログインサービスは <b>Ruby on Rails 4.2</b>（<s>来年中にはバージョンアップ予定</s> <a href="https://developer.feedforce.jp/entry/2020/09/08/142913">2020年9月 バージョンアップしました！</a>）</li>
<li>LINE メッセージ配信サービスは SPA（Single Page Application）として構築しており、サーバーサイドは <b>Ruby on Rails 5.2</b> の API モードを利用</li>
<li>いずれも RDB は <b>MySQL</b>、インメモリデータストアは <b>Redis</b> を利用</li>
<li><b>RSpec</b> による機能テスト（85 〜 91 % のカバレッジ）</li>
<li><b><a href="https://www.bugsnag.com/">Bugsnag</a>, <a href="https://scoutapm.com/">Scout</a></b> によるアプリケーションレイヤーの監視</li>
<li><b>Google BigQuery</b> へのログ集積</li>
<li>システムの一部に <b>AWS Lambda, Amazon DynamoDB, Amazon Kinesis</b> などを利用</li>
</ul>


<h2 id="フロントエンド">フロントエンド</h2>

<ul>
<li><b>React, TypeScript, <a href="https://firebase.google.com/">Firebase</a>, PWA</b> などを用いた BtoB 向け SPA</li>
<li><b>Atomic Design</b> をベースに UI を構造化、<b><a href="https://storybook.js.org/">Storybook</a></b> でコンポーネントを管理</li>
<li><b>Flux アーキテクチャ</b>にはおなじみの <b><a href="https://redux.js.org/">Redux</a></b> を用い、ファイル構造は <b>re-ducks パターン</b>を採用</li>
<li><b>モジュールのテスト</b>、<b>E2E テスト</b>や <b>ビジュアル回帰テスト</b>等にてプロダクトの品質を維持</li>
<li><b><a href="https://www.bugsnag.com/">Bugsnag</a>, <a href="https://logrocket.com/">LogRocket</a></b> によるフロントエンドアプリケーションレイヤーの監視</li>
</ul>


<h2 id="インフラストラクチャ">インフラストラクチャ</h2>

<ul>
<li><b>AWS</b> を中心に構成。<b>Route 53, ALB, EC2, Aurora MySQL</b> ほか</li>
<li><b>複数 AZ（Availability Zone）に冗長化</b>、構成変更は <b>Blue/Green Deployment</b></li>
<li><b>EKS</b> や <b>ECS</b> へのコンテナ化移行を検討中（技術検証や運用コストを踏まえて慎重に検証を重ねています）</li>
<li>Infrastructure as Code に従って <b>Terraform</b> や <b>Chef</b> でコード管理</li>
<li><b>作業の自動化</b>を意識。サーバー台数の増減はほぼ自動で行われる仕組みを実現</li>
<li><b><a href="https://www.datadoghq.com/">Datadog</a></b> を利用した監視、異常は <b>Slack</b> へ通知</li>
</ul>


<h2 id="その他">その他</h2>

<ul>
<li>全体で <b>Slack, GitHub, CircleCI, <a href="https://redash.io/">Redash</a></b> を利用</li>
<li>リリース作業を ChatOps 化（中継に Jenkins を利用）</li>
<li>リモートペアプロも挑戦中（おもに Slack Call と画面共有。方法は模索中）</li>
</ul>


<p>モニタリング内容やアラート、タスクカード（GitHub Project）はチームの席近くにある大型ディスプレイに表示して、朝会やイテレーションミーティングで眺められるようにしています。リモートじゃないモブプログラミングなんかもここでやります。</p>

<p><figure class="figure-image figure-image-fotolife" title="カンバンディスプレイ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122191259.jpg" alt="f:id:tmd45:20191122191259j:plain" title="f:id:tmd45:20191122191259j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>カンバンディスプレイ</figcaption></figure></p>

<h1 id="おわりに">おわりに</h1>

<p>すべての技術スタックについて細かに説明すると相当長くなるので、ざっくりになりました。技術スタックだけでなく、チームの仕事の仕方なんかも今後公開していければと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122212718.png" alt="f:id:tmd45:20191122212718p:plain" title="f:id:tmd45:20191122212718p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>弊社ではカジュアル面談も行っていますが、ビジネスの説明からこういった技術スタックの解説まで、私やチームメンバーからさせていただいてます。</p>

<p>選考というフローに進む前にぜひ会社やプロダクトについて知ってもらえればと思っておりますので、気になる部分があればお気軽にご質問ください〜 (・ω・)ノ</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slack に便利機能 "ワークフロービルダー" が増えたので勇み足で使ってみた]]></title>
        <id>https://developer.feedforce.jp/entry/2019/10/16/140901</id>
        <link href="https://developer.feedforce.jp/entry/2019/10/16/140901"/>
        <updated>2019-10-16T05:09:01.000Z</updated>
        <summary type="html"><![CDATA[<p>Slack に「ワークフロービルダー」という機能ができたので現時点のメモ。</p>

<ul>
<li><a href="https://slackhq.com/intl-ja-jp-automate-tasks-in-slack-with-workflow-builder">ワークフロービルダーが新登場 : Slack で簡単にタスクを合理化 | The Official Slack Blog</a></li>
</ul>


<h2>どこにあるの？</h2>

<p>いまのところ、左上（ワークスペース名）のメニューから使える。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークスペースのメニュー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140418.png" alt="f:id:tmd45:20191016140418p:plain" title="f:id:tmd45:20191016140418p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークスペースのメニュー</figcaption></figure></p>

<h2>ワークフローの編集</h2>

<p>上のメニューをクリックすると別ウィンドウが開いてこういう編集ができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフロービルダーの初期画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140504.png" alt="f:id:tmd45:20191016140504p:plain" title="f:id:tmd45:20191016140504p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフロービルダーの初期画面</figcaption></figure></p>

<p>「ワークフロー」作ってみた例</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローの編集"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140539.png" alt="f:id:tmd45:20191016140539p:plain" title="f:id:tmd45:20191016140539p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローの編集</figcaption></figure></p>

<p>「設定」の内容</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローの設定"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140559.png" alt="f:id:tmd45:20191016140559p:plain" title="f:id:tmd45:20191016140559p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローの設定</figcaption></figure></p>

<h2>Slack チャンネル上でできること</h2>

<p>ワークフローを登録したチャンネルに ⚡ マークが出てきて、そこからアクションが始められる。このトリガーも何種類かあるみたい。</p>

<p><figure class="figure-image figure-image-fotolife" title="&quot;このチャンネルのアクション&quot;"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140643.png" alt="f:id:tmd45:20191016140643p:plain" title="f:id:tmd45:20191016140643p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>&quot;このチャンネルのアクション&quot;</figcaption></figure></p>

<p>ワークフローで作ったフォームが表示された例。セレクトボックスに複数選択タイプは（いまのところ）なかった。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローで作ったフォームの表示"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140745.png" alt="f:id:tmd45:20191016140745p:plain" title="f:id:tmd45:20191016140745p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローで作ったフォームの表示</figcaption></figure></p>

<h2>Slack チャンネルで動いた様子</h2>

<p><figure class="figure-image figure-image-fotolife" title="Slack チャンネルで動くワークフロー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016141406.png" alt="f:id:tmd45:20191016141406p:plain" title="f:id:tmd45:20191016141406p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Slack チャンネルで動くワークフロー</figcaption></figure></p>

<p>なんか上手いこと使えるといいですね！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[「aws-vault loginでChromeのウィンドウをAWSアカウント毎に分離する」を Alfred 用に作った]]></title>
        <id>https://blog.tsub.me/post/create-alfred-aws-vault-workflow/</id>
        <link href="https://blog.tsub.me/post/create-alfred-aws-vault-workflow/"/>
        <updated>2019-10-06T05:35:00.000Z</updated>
        <summary type="html"><![CDATA[<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/alfred-aws-vault-workflow">tsub/alfred-aws-vault-workflow: A Alfred workflow to open the AWS Management Console with aws-vault</a></p>

<p>Chrome 版</p>

<p><img src="https://i.gyazo.com/33341687e0419d3863f913a00997744c.gif" alt="Features for Google Chrome" /></p>

<p>Firefox (<a href="https://addons.mozilla.org/firefox/addon/multi-account-containers/">Multi-Account Container</a> extension) 版</p>

<p><img src="https://i.gyazo.com/a68e0d4cd6f9a80b659cfc1694cd85dd.gif" alt="Features for Firefox" /></p>

<p>aws-vault 自体今回初めて知ったのですが、以下の記事を読んで、複数の AWS アカウント使いには大変便利そうだったので Alfred 用のものをシュッと作りました。</p>

<p><a href="https://qiita.com/minamijoyo/items/f3cbb003a34954a32970">aws-vault loginでChromeのウィンドウをAWSアカウント毎に分離する - Qiita</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2019年版】バックエンドエンジニアが React でモダンなフロントエンド開発を始めるまで]]></title>
        <id>https://developer.feedforce.jp/entry/2019/09/04/140000</id>
        <link href="https://developer.feedforce.jp/entry/2019/09/04/140000"/>
        <updated>2019-09-04T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。入社してからあっという間に1年が経っていました。</p>

<p>直近3ヶ月ほどプライベートでフロントエンド開発の勉強をしていたのですが、ここ数年で CSS の Grid や React の Hooks が新しく導入されたことなどもあり、少し古いコンテンツだと教材として役立たない<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> と感じることが多かったので、本記事では私が実際にやってみた中で <strong>2019年時点で</strong> オススメできると判断した教材や学び方を皆さんにご紹介したいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#はじめに">はじめに</a></li>
    <li><a href="#やったこと">やったこと</a><ul>
            <li><a href="#JavaScript">JavaScript</a><ul>
                    <li><a href="#MDN-の-JavaScript-の部分を読む--手を動かす">MDN の JavaScript の部分を読む &amp; 手を動かす</a></li>
                    <li><a href="#JavaScript-Primer-を読む">JavaScript Primer を読む</a></li>
                    <li><a href="#YouTube-動画で-Promise-を学ぶ">YouTube 動画で Promise を学ぶ</a></li>
                    <li><a href="#デバッグ方法を学ぶ">デバッグ方法を学ぶ</a></li>
                </ul>
            </li>
            <li><a href="#React">React</a><ul>
                    <li><a href="#React-公式のチュートリアルを2周する">React 公式のチュートリアルを2周する</a></li>
                    <li><a href="#eggheadio-の動画で-Redux-を学ぶ">egghead.io の動画で Redux を学ぶ</a></li>
                    <li><a href="#ヘルシンキ大学の-Web-開発カリキュラム-Full-Stack-Open-2019-をやる">ヘルシンキ大学の Web 開発カリキュラム Full Stack Open 2019 をやる</a></li>
                </ul>
            </li>
            <li><a href="#CSS">CSS</a><ul>
                    <li><a href="#CSS-in-Depth-を読む--手を動かす">CSS in Depth を読む &amp; 手を動かす</a></li>
                </ul>
            </li>
            <li><a href="#その他">その他</a><ul>
                    <li><a href="#Atomic-Design-を理解する">Atomic Design を理解する</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#最後に">最後に</a></li>
</ul>

<h2 id="はじめに">はじめに</h2>

<p>今回は実務レベルでフロントエンド開発できるスキルを身につけたい、という目標があったので <strong>JavaScript</strong> はもちろん所属チームである <a href="https://ecbooster.jp/">EC Booster</a> で採用している <strong>React</strong>、さらにフロントエンド開発において避けて通ることのできない <strong>CSS</strong> の学習を前提としています。</p>

<p>参考までに筆者のスペックは 👇 の記事の1年後をご想像ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F18%2F140000" title="弊社の新人エンジニア研修カリキュラムを惜しみなく公開してみる - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/10/18/140000">developer.feedforce.jp</a></cite></p>

<p>具体的にはこの後 Ruby や Rails を使って、SPA のための GraphQL API サーバや Google 広告系の API を利用したバッチ処理の実装など、バックエンド開発をメインに行なっていました。</p>

<h2 id="やったこと">やったこと</h2>

<h3 id="JavaScript">JavaScript</h3>

<h4 id="MDN-の-JavaScript-の部分を読む--手を動かす">MDN の JavaScript の部分を読む &amp; 手を動かす</h4>

<p><strong>所要期間: 約5日</strong></p>

<ul>
<li>Rails 開発をする前に Ruby の基礎をがっつりやったことで早期にキャッチアップできた経験から、まずは JavaScript の言語仕様をしっかり把握しようと思いました。</li>
<li>ここでは React でも頻出の import/export、アロー関数、分割代入に加えて、変数のスコープ（Ruby と違って最初戸惑った）などについて学びました。</li>
<li>数行のスクリプトを書いて実行、をとにかくひたすら繰り返していました。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript" title="JavaScript" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript">developer.mozilla.org</a></cite></p>

<h4 id="JavaScript-Primer-を読む">JavaScript Primer を読む</h4>

<p><strong>所要期間: 約2日</strong></p>

<ul>
<li>こちらは ES2015 を前提とした JavaScript の入門書。</li>
<li>MDN で分かりづらかった部分を補完したり、ES2015 以降の仕様のみを把握したい時に利用しました。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjsprimer.net%2F" title="この書籍について · JavaScript Primer #jsprimer" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jsprimer.net/">jsprimer.net</a></cite></p>

<h4 id="YouTube-動画で-Promise-を学ぶ">YouTube 動画で Promise を学ぶ</h4>

<p><strong>所要期間: 約0.5日</strong></p>

<ul>
<li>Promise、難しいですよね…。</li>
<li>有名な <a href="https://azu.github.io/promises-book/">JavaScript Promiseの本</a> を読んだのですが、自分には難しくて中々理解できませんでした。</li>
<li>色々探し回った結果、以下の YouTube 動画がものすごく分かりやすくて何とか概要を掴むことができました。</li>
</ul>


<p><iframe width="480" height="270" src="https://www.youtube.com/embed/QO4NXhWo_NM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://youtu.be/QO4NXhWo_NM">youtu.be</a></cite></p>

<h4 id="デバッグ方法を学ぶ">デバッグ方法を学ぶ</h4>

<p><strong>所要期間: 約0.5日</strong></p>

<ul>
<li>Ruby には <code>pry</code> という大好きなデバッガー（としても使える）ライブラリがあるのですが、JavaScript にも <code>debugger</code> ステートメントという素晴らしいものがあるのだと知りました。

<ul>
<li><a href="https://postd.cc/how-to-not-hate-javascript-tips-from-the-frontline/">JavaScript&#x306E;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x65B9;&#x6CD5; &ndash; JS&#x3092;&#x5ACC;&#x3044;&#x306B;&#x306A;&#x3089;&#x306A;&#x3044;&#x305F;&#x3081;&#x306E;Tips | POSTD</a></li>
</ul>
</li>
<li>あと Chrome DevTools の使い方も以下の記事を読んで把握しました。

<ul>
<li><a href="https://ics.media/entry/190517/">Chrome&#x306E;&#x30C7;&#x30D9;&#x30ED;&#x30C3;&#x30D1;&#x30FC;&#x30C4;&#x30FC;&#x30EB;&#x3067;JS&#x3092;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#xFF08;2019&#x5E74;&#x7248;&#xFF09; - ICS MEDIA</a></li>
</ul>
</li>
</ul>


<h3 id="React">React</h3>

<h4 id="React-公式のチュートリアルを2周する">React 公式のチュートリアルを2周する</h4>

<p><strong>所要期間: 約2日</strong></p>

<ul>
<li>JS を学ぶ前に一度やり、JS を学んでからもう一度やりました。React の概要を掴むには良かったです。</li>
<li>ただ、このチュートリアル内では Class Components が前提で Hooks については全く触れられてないので、後述の Full Stack Open 2019 で補完しました。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fja.reactjs.org%2Ftutorial%2Ftutorial.html" title="チュートリアル：React の導入 – React" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ja.reactjs.org/tutorial/tutorial.html">ja.reactjs.org</a></cite></p>

<h4 id="eggheadio-の動画で-Redux-を学ぶ">egghead.io の動画で Redux を学ぶ</h4>

<p><strong>所要期間: 約2日</strong></p>

<ul>
<li><a href="https://redux.js.org/">Redux 公式のドキュメント</a> をさっと読んでから Redux の作者である Dan Abramov 氏が作成した以下の動画を観ながら手を動かしました。</li>
<li>序盤で <code>createStore</code> を自分で実装してみようという内容があるのですが、それがとても分かりやすかったです。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fegghead.io%2Fcourses%2Fgetting-started-with-redux" title="Getting Started with Redux" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://egghead.io/courses/getting-started-with-redux">egghead.io</a></cite></p>

<h4 id="ヘルシンキ大学の-Web-開発カリキュラム-Full-Stack-Open-2019-をやる">ヘルシンキ大学の Web 開発カリキュラム Full Stack Open 2019 をやる</h4>

<p><strong>所要期間: 約10日</strong></p>

<ul>
<li>React × Express.js × MongoDB の構成でイチから SPA 作れるようになろうぜ、という趣旨のチュートリアル。</li>
<li>React は Hooks 前提で、さらに Jest を使ったテスト、Redux、GraphQL などのコンテンツもあり、何より説明が半端なく分かりやすい。今だったら React 公式のチュートリアルすっ飛ばしてこっちやった方がいいかも、と思うほど素晴らしい。</li>
<li>今回はフロントエンド技術の習得に注力したかったので、バックエンド開発部分（Part3, 4 辺り）は飛ばしました。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffullstackopen.com%2Fen" title="Full Stack Open 2019" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://fullstackopen.com/en">fullstackopen.com</a></cite></p>

<h3 id="CSS">CSS</h3>

<h4 id="CSS-in-Depth-を読む--手を動かす">CSS in Depth を読む &amp; 手を動かす</h4>

<p><strong>所要期間: 約5日</strong></p>

<ul>
<li>CSS がずっと苦手だった私を助け出してくれた一冊。Flexbox と Grid Layout の章を読んだだけで元を取れた気がします。</li>
<li>タイトルや出版社からしてめちゃくちゃアカデミックな内容を想像していたんですが、全然違いました。一つ一つのプロパティ指定について丁寧に解説してくれるようなとても優しい本です。</li>
<li>出版日が2018年とけっこう新しいのも嬉しい。</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1617293458/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51Plttwa-aL._SL160_.jpg" class="hatena-asin-detail-image" alt="CSS in Depth" title="CSS in Depth"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1617293458/hatena-blog-22/">CSS in Depth</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Keith J. Grant</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Manning Publications</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/04/07</li><li><span class="hatena-asin-detail-label">メディア:</span> ペーパーバック</li><li><a href="http://d.hatena.ne.jp/asin/1617293458/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3 id="その他">その他</h3>

<h4 id="Atomic-Design-を理解する">Atomic Design を理解する</h4>

<p><strong>所要期間: 約10分</strong></p>

<ul>
<li>弊チームでは Atomic Design に則ったディレクトリ構成をしているので、以下の記事を読んで概要を掴みました。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdesign.dena.com%2Fdesign%2Fatomic-design-%25E3%2582%2592%25E5%2588%2586%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25A4%25E3%2582%2582%25E3%2582%258A%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%2F" title="Atomic Design を分かったつもりになる | DeNA DESIGN BLOG" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://design.dena.com/design/atomic-design-%E3%82%92%E5%88%86%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%A4%E3%82%82%E3%82%8A%E3%81%AB%E3%81%AA%E3%82%8B/">design.dena.com</a></cite></p>

<h2 id="最後に">最後に</h2>

<p>以上の教材で学んだことで、Ruby と Rails を使ってのバックエンド開発しかほぼやったことなかった私でもある程度自走してフロントエンドのコードを読んだり書いたりできるようになりました。</p>

<p><strong>個人的には CSS in Depth とヘルシンキ大学の Full Stack Open 2019 が教材として最高でした。</strong></p>

<p>他の会社さまでも Rails 経験のみのエンジニアを採用して React も書けるように教育していく、みたいなケースがあると思います。そんな時にこの記事が参考になれば幸いです。</p>

<p>それではまたお会いしましょう ＾＾</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>例えば <a href="https://github.com/facebook/react/blob/master/CHANGELOG.md#1680-february-6-2019">React の Hooks が正式に導入されたのは2019年2月</a> なので、2018年代のコンテンツでは Hooks について言及されていないものがほとんどです。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内の情報共有ツールを Qiita:Team から esa に乗り換えました]]></title>
        <id>https://developer.feedforce.jp/entry/2019/08/22/141055</id>
        <link href="https://developer.feedforce.jp/entry/2019/08/22/141055"/>
        <updated>2019-08-22T05:10:55.000Z</updated>
        <summary type="html"><![CDATA[<p>猛烈に暑かったり暑くなかったりするなか皆様いかがお過ごしでしょうか。自宅のエアコンが故障して修理待ち半月の <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>先月、5 年間使い続けてきた Qiita:Team から esa へ、情報共有ツールの乗り換えを行いました。80 名ほどの全社移行となかなか大きなプロジェクトだったので、ここに記録を残したいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#なぜ乗り換えに至ったか">なぜ乗り換えに至ったか</a><ul>
            <li><a href="#フィードフォースの情報共有文化">フィードフォースの情報共有文化</a></li>
            <li><a href="#抱えていた課題">抱えていた課題</a></li>
            <li><a href="#動き出した移行プロジェクト">動き出した移行プロジェクト</a></li>
            <li><a href="#検討した情報共有ツール">検討した情報共有ツール</a></li>
            <li><a href="#esa-に決めるまで">esa に決めるまで</a></li>
        </ul>
    </li>
    <li><a href="#社内への働きかけ">社内への働きかけ</a></li>
    <li><a href="#データ移行のノウハウ">データ移行のノウハウ</a><ul>
            <li><a href="#Emoji-の登録">Emoji の登録</a></li>
            <li><a href="#記事データの移行">記事データの移行</a></li>
            <li><a href="#プロジェクトページ記事の扱い">プロジェクトページ記事の扱い</a></li>
            <li><a href="#プライベートグループの記事の扱い">プライベートグループの記事の扱い</a></li>
            <li><a href="#メンバーの移行とデータの移行のタイミング">メンバーの移行とデータの移行のタイミング</a></li>
        </ul>
    </li>
    <li><a href="#esa-と一緒に使っている便利ツール">esa と一緒に使っている便利ツール</a><ul>
            <li><a href="#記事の自動作成自動-esa-やり機">記事の自動作成「自動 esa やり機」</a></li>
            <li><a href="#Slack-に記事-URL-から概要を展開してくれるKujaku">Slack に記事 URL から概要を展開してくれる「Kujaku」</a></li>
            <li><a href="#Emacs-x-esa-利用者におすすめemacs-helm-esa">Emacs x esa 利用者におすすめ「emacs-helm-esa」</a></li>
        </ul>
    </li>
    <li><a href="#QiitaTeam-から移行して-esa-に思ったこといろいろ">Qiita:Team から移行して esa に思ったこといろいろ</a><ul>
            <li><a href="#サポートの対応がフレンドリーかつ早い">サポートの対応がフレンドリーかつ早い！</a></li>
            <li><a href="#導入時に助かったところ">導入時に助かったところ</a></li>
            <li><a href="#導入時に困ったところ">導入時に困ったところ</a></li>
            <li><a href="#QiitaTeam-と-esa-の情報整理思想の違い">Qiita:Team と esa の情報整理思想の違い</a><ul>
                    <li><a href="#QiitaTeam-のトップページのようにすべての記事が流れていくようなものが欲しい情報のザッピングがしたい">Qiita:Team のトップページのように、すべての記事が流れていくようなものが欲しい。情報のザッピングがしたい</a></li>
                    <li><a href="#Recently-Update-が-WIP-も含むすべての記事の更新を-age-てしまう">Recently Update が WIP も含むすべての記事の更新を age てしまう</a></li>
                    <li><a href="#内部-URL-でタイトルが展開されるのは便利だった">内部 URL でタイトルが展開されるのは便利だった…</a></li>
                    <li><a href="#他人の記事をかんたんにいじれてしまう">他人の記事をかんたんにいじれてしまう</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#さいごに">さいごに</a></li>
</ul>

<h1 id="なぜ乗り換えに至ったか">なぜ乗り換えに至ったか</h1>

<h2 id="フィードフォースの情報共有文化">フィードフォースの情報共有文化</h2>

<p>もともと弊社では Qiita:Team 以前にも、Redmine や社内サーバに構築した Wiki システムを利用し、ナレッジの蓄積と共有を習慣化していました。すばらしいですね。</p>

<p>そこにビジネスチャット（当初は HipChat、現在は Slack を利用）を導入、フロー型の情報が増えていきました。Redmine や社内 Wiki のような<strong>ストック型のナレッジだけでなくフロー型の日常をまとめられる場所が欲しくなり、当時台頭してきた "今風" の情報共有ツールとして 2014年4月から Qiita:Team を使いはじめました。</strong></p>

<p>この頃の記事を見てみると、日報をはじめ、これまで Redmine や Wiki には書きづらかった（書かれたとしても個人メモとして閉じていた）「〇〇やってみた」「〇〇読んでみた」などの情報や、ちょっとした振り返りをまとめた記事が並んでいます。</p>

<p>完全なストック型（Wiki 系）と完全なフロー型（チャット系）の中間をツールとして、Qiita:Team はとてもよく機能しました。社内の情報共有文化がこれだけ育っているのも、そういう場を用意できていたことが大きいと思っています。</p>

<p>うれしいことに日報や手順書、ポエム、ノウハウなどさまざまな記事が気軽に投稿される弊社でしたが、社員が 80 名近くになるとその情報の整理に課題を感じるようになりました。</p>

<blockquote><p><em>フロー型の情報とストック型の情報について、参考記事</em></p>

<ul>
<li><a href="https://blogs.itmedia.co.jp/knowledge/2013/04/post-bd33.html">フロー情報とストック情報を分ける～情報過多の時代を生き抜くために：ナレッジ！？情報共有・・・永遠の課題への挑戦：オルタナティブ・ブログ</a></li>
</ul>
</blockquote>

<h2 id="抱えていた課題">抱えていた課題</h2>

<p>このときの課題とは、<strong>大量に増えた記事のなかから必要な記事が見つけられない</strong> ことでした。</p>

<p><figure class="figure-image figure-image-fotolife" title="情報に埋もれる我々"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122258.png" alt="f:id:tmd45:20190822122258p:plain:w380" title="f:id:tmd45:20190822122258p:plain:w380" class="hatena-fotolife" style="width:380px" itemprop="image"></span><figcaption>情報に埋もれる我々</figcaption></figure></p>

<p>記事が埋もれてしまっても検索などでかんたんに見つけられればいいのですが、残念なことに Qiita:Team の機能では <strong>検索ノウハウのある人間であれば頭を使ってなんとか意図した記事を見つけられるものの、そうでなければほとんど目的の記事を見つけられないような状況になりました。</strong> 記事を探すというだけで "頭を使う" 必要があるというのはなかなかヘビーです。</p>

<p>必要な記事が見つからず、似たような内容の記事が量産されてしまいました。埋もれてしまった古い記事はアーカイブをされることもなくときどき情報検索の邪魔をするようになりました。似たようでちょっと違うタグが乱立しました。流れてしまう情報をなんとかしようとグループ機能を試してみたこともありましたが、グループに閉じてしまうと今度はグループを跨いだ情報の流し読みが困難になりました。</p>

<p>ちなみに一時期（2015 年頃）の Qiita:Team は機能として "タグの階層化" が可能でしたが、これに頼ったタグ整理を行ってしまったことも、後々のタグ運用が難しくなる要因であったと思います。いつのまにか（2019 年確認）タグにスラッシュを入れると入力チェックに引っかかって記事が保存できなくなったことにはモヤっとしました…</p>

<p>タイトルに絞った部分一致やタグによる検索は可能でしたが、これが上手く機能するように、あとから膨大な記事やタグを整理するのは、なかなか骨の折れる作業です。</p>

<p>ナレッジマネジメントに特別な興味のないひとも徐々に「なんとなく使いづらいな…」と感じるようになっていました。</p>

<h2 id="動き出した移行プロジェクト">動き出した移行プロジェクト</h2>

<p>社内 Slack に "情報共有ツールをなんとかしたい" チャンネルが生まれたのが 2018/10/18、私がそこに Join したのが 2018/11/13 でした。</p>

<p>他のツールに乗り換える前に、現状のナレッジマネジメントのルールやポリシーを整備したほうがいいのではという議論は何度も発生しました。Qiita:Team のプロジェクトページなどを使って INDEX 記事を作成したり、タグについて議論したり、Slackbot に特定の発言をしたときに記事 URL を返すようにさせたり…</p>

<p>プロジェクトページで INDEX を作ると、今度は "プロダクト用のプロジェクトページ"（紛らわしいですね 😅）が埋もれてしまうということもありました。これは一社内に多くのプロダクトを持っている弊社ならではかもしれません。</p>

<p>このまま「工夫」でなんとかするには、情報整理が得意な人間が「がんばり」続ける必要がありそうでした。情報整理のポリシーなどを定めたとしても、定期的にそれをリマインドし、自警する誰かが必要になるのではないかと思いました。</p>

<p>そのため他の情報共有ツールについて少しずつ調査やトライアルをしていきました。</p>

<h2 id="検討した情報共有ツール">検討した情報共有ツール</h2>

<p>たくさんあるので詳細は割愛しますが、わりと最後まで有力候補だったのが Kibela でした。開発の動きが活発に見えましたし、信頼感のある著名なエンジニアの方が関わっていることも知っていたので強い興味を持っていました。その他、挙がったツールをご紹介しておくと DocBase, marchily, Scrapbox など、そして esa です。</p>

<p>いろんなツールを検討するなかで、解決したいことと求める条件をざっくりと以下のようにまとめました。</p>

<ul>
<li>記事検索のしやすさ</li>
<li>「プロダクト毎のグループ」と「社内活動毎のグループ」の区別（できれば）</li>
<li>「日報」との区別</li>
<li>チームをまたいで誰でも全体を眺められる感じ</li>
<li>ナレッジをマネジメントしたい</li>
<li>エンジニアも総合職も使いやすい</li>
</ul>


<p>何かを区別して分類したいというのは、つまりカテゴリなりディレクトリなりが欲しいということで、DocBase を試したときに「いいな」と思ったポイントでした。</p>

<p>またプロダクトでチームが分かれていても、情報を完全に分断してしまいたくないという思いが以前からあり、他のツールを触るなかでもよく気にしていたポイントでした。この部分は Qiita:Team のトップページのように、すべての情報が流れてザッピングできるものがよかったです。</p>

<p>そんなこんなで仕事の合間にいろいろ試していたら 2019 年も春になっていました。どのツールも一長一短なうえに、80 名近くのメンバーを一度に動かす POWER が必要です。当時の自分の Slack 発言曰く「移行したい、と、移行めんどくさいのはざま」でした。</p>

<h2 id="esa-に決めるまで">esa に決めるまで</h2>

<p>はざまに居る間もどんどん記事は増えていくので、その都度どうしたらその記事が埋もれずに済むか悩んでいました。ここでもまだ「Qiita:Team の記事を一斉に整理する時間をとれば…」みたいな話は出ていました。諦めが悪い（笑）</p>

<p>このへんの時期に他社さんで esa を導入したとか、（Qiita:Team から）esa に乗り換えたという記事を目にすることが増えました。</p>

<ul>
<li><a href="https://techblog.lclco.com/entry/2019/01/28/170000">Qiita:Teamからesa.ioに乗り換えました - LCL Engineers' Blog</a></li>
<li><a href="https://note.mu/naofumit/n/n028df2984256">カルチャー崩壊と再構築。 Goodpatchが取り組んだ組織デザインの2年間 - 前編｜naofumit｜note</a></li>
</ul>


<p>例のチャンネルメンバーのなかで「esa を使うとしたらどうやって使ったらカオスにならずに済むだろう」みたいな話をしていました。個人的にも（元から好きなサービスだったこともあり）なんとなく esa にしたいなぁと思い始めて、他社の事例を積極的に探しに行きました。</p>

<p>esa の中の人 (\( ⁰⊖⁰)/) がまとめている「<a href="https://docs.esa.io/posts?q=in%3A%22esa%E3%83%88%E3%83%BC%E3%82%AF%22+&amp;s=created&amp;o=desc">esa トーク</a>」の記事も穴が開くほど読みました。とくに大人数で利用されているピクシブさんと、カテゴリルールなどかなり具体的なお話をされていた Misoca さんの記事は、その後の移行のときにもとても参考になりました。</p>

<ul>
<li><a href="https://docs.esa.io/posts/256">esaトーク/サービスへの思いをesaに乗せて、ポエム駆動開発が捗る ─ Vol4.ピクシブ株式会社 様 - docs.esa.io</a></li>
<li><a href="https://docs.esa.io/posts/264">esaトーク/日常もesaもハックするリモートワーカー集団 ─ Vol.5 株式会社Misoca様 - docs.esa.io</a></li>
</ul>


<p>結果的に移行先の決め手となったのは、利用事例のわかりやすさと、すでに利用しているひとたちからの評判の良さかもしれません。</p>

<p>運命の 2019/04/24、まだ「移行めんどくさい」のはざまでウゴウゴしていた我々を動かしたのは、これまでナレッジマネジメントに悩んでいたチャンネルメンバー…ではない役員メンバーからのこんなお言葉でした。</p>

<blockquote><p>"いまの情報共有ツールの使いづらさって、だれも問題に感じてないの？"<br/>
"ほかに良いツールがあるなら乗り換えたほうがいいよ！"</p></blockquote>

<p>「ですよね！！？」という衝撃とともに個人的に火もついて、ここでやっと「情報共有ツールの移行、ワイが esa で進めたるでー！（POWER）」となったのでした。</p>

<p><figure class="figure-image figure-image-fotolife" title="※画像はイメージです"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122700.png" alt="f:id:tmd45:20190822122700p:plain:w380" title="f:id:tmd45:20190822122700p:plain:w380" class="hatena-fotolife" style="width:380px" itemprop="image"></span><figcaption>※画像はイメージです</figcaption></figure></p>

<h1 id="社内への働きかけ">社内への働きかけ</h1>

<p>esa 移行を決心してから、社内への働きかけも行っていきました。</p>

<p>一番大切なのは <strong>情報管理ツールを移行したい思いと目的</strong> で、これは前述のようにいろいろ考えてきたので１つの記事を作って社内に共有しました。</p>

<p>また、移行プロジェクトに関わってくれたデザイナー氏が、移行の意欲を高めるために弊社のキャラクターと esa の (\( ⁰⊖⁰)/) を（勝手に）コラボしたイメージを作ってくれて、なかなかに社内の評判もよかったです。こういう「たのしい」工夫も大事だと思います。</p>

<p><figure class="figure-image figure-image-fotolife" title="今も esa の HOME ページを飾る非公式コラボ画像"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122909.png" alt="f:id:tmd45:20190822122909p:plain" title="f:id:tmd45:20190822122909p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>今も esa の HOME ページを飾る非公式コラボ画像</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="移行期間中に社内の士気を上げるため貼っていたポスター"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122947.jpg" alt="f:id:tmd45:20190822122947j:plain:w320" title="f:id:tmd45:20190822122947j:plain:w320" class="hatena-fotolife" style="width:320px" itemprop="image"></span><figcaption>移行期間中に社内の士気を上げるため貼っていたポスター</figcaption></figure></p>

<p>そこからトライアルへの協力と、実際のアカウント移行のお願いなども同様に進めました。とくに新卒の若者たちは新しいツールを使いこなそう(｀・ω・´)+という意欲も高く、積極的に使い方を聞きに来てくれたり、同期で共有したりしていて頼もしかったです。</p>

<p>社長にも「とりあえず１つ何か記事書いてください！」とお願いしたら、もともと Qiita:Team で書いていた週報をシュッと esa で書いてくれました。おかげでそれを読むためにアカウント登録するメンバーも増え、スムーズに移行できました。</p>

<h1 id="データ移行のノウハウ">データ移行のノウハウ</h1>

<p>ここからはデータの移行で得た気づきなどです。
ご紹介しているスクリプトの利用につきましては保証しかねますのでご了承ください！</p>

<h2 id="Emoji-の登録">Emoji の登録</h2>

<p>記事の移行より先にやったのが Emoji の登録でした。</p>

<p><strong>Qiita:Team は Slack と連携して Emoji を同期させる機能がありますが、esa にはその機能はありません。</strong> API で登録することができるので、ひとまず更新のことは考えず、その時点の Slack Emoji を吸い出して、esa に流しこみました。Slack Emoji を取ってくるスクリプトは拾いものなので割愛します、すみません。</p>

<p>流し込んだスクリプトはこちら。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/master/slack_emoji_import.rb">qiita2esa/slack_emoji_import.rb at master · tmd45/qiita2esa</a></li>
</ul>


<p>すでに登録済みの Emoji に重複したキーワードだと <code>400 Bad Request</code> になります。また Slack は日本語キーワードでの Emoji 登録が可能ですが、esa のほうでは日本語キーワードには対応していないので、予め除外するか当該エラーでスキップさせましょう。</p>

<p>余談ですが、一度、Emoji の画像ファイルとキーワードをあべこべに登録してしまってカオスを生んでしまいました。いまはリカバリ済みです:(；ﾞﾟ'ωﾟ'):</p>

<p><figure class="figure-image figure-image-fotolife" title="ありがたさ → からい。からいもの好きなひとか！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123239.png" alt="f:id:tmd45:20190822123239p:plain:w230" title="f:id:tmd45:20190822123239p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>ありがたさ → からい。からいもの好きなひとか！</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="いいとおもう〜 → 却下。真逆！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123310.png" alt="f:id:tmd45:20190822123310p:plain:w230" title="f:id:tmd45:20190822123310p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>いいとおもう〜 → 却下。真逆！</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="ムズい → 輪廻転生。ｿｳﾃﾞｽﾈ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123343.png" alt="f:id:tmd45:20190822123343p:plain:w230" title="f:id:tmd45:20190822123343p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>ムズい → 輪廻転生。ｿｳﾃﾞｽﾈ</figcaption></figure></p>

<h2 id="記事データの移行">記事データの移行</h2>

<p>Qiita:Team の記事エクスポート機能（Owner のみ可能）で得られるデータは１記事＝１JSON ファイルになっていて、メタ情報やコメントも含まれています。</p>

<p>esa に移行するために以下のようにしました。</p>

<p>▼記事作成・更新 API</p>

<table>
<thead>
<tr>
<th> esa パラメータ </th>
<th> 内容 </th>
<th> 注意点 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>name</code> </td>
<td> 記事タイトル </td>
<td> <code>/</code> や <code>#</code> は数値参照に置き換える（カテゴリやタグになってしまうのを避ける） </td>
</tr>
<tr>
<td> <code>category</code> </td>
<td> カテゴリ </td>
<td> <code>(unsorted)/all</code> 移行用に定義 </td>
</tr>
<tr>
<td> <code>body_md</code> </td>
<td> 本文 Markdown </td>
<td> 1. パラメータとして指定できないメタ情報（記事作成日時など）を本文に追加する形で残す<br>2. 本文中の他記事 URL や画像 URL を置換<br>3. 本文中の <code>ユーザID</code> を小文字化（ <code>ScreenName</code> に合わせるため） </td>
</tr>
<tr>
<td> <code>user</code> </td>
<td> 記事作成者 </td>
<td> 記事作成者の <code>ScreenName</code> を指定 </td>
</tr>
<tr>
<td> <code>created_by</code> </td>
<td> 記事作成者（上書き） </td>
<td> 同上。更新時に Owner 権限をもつ token でのみ上書き可能 </td>
</tr>
</tbody>
</table>


<p>▼コメント作成 API</p>

<table>
<thead>
<tr>
<th> esa パラメータ </th>
<th> 内容 </th>
<th> 注意点 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>body_md</code> </td>
<td> コメント本文 Markdown </td>
<td> 記事本文と同様にメタ情報の追加と、他記事 URL、画像 URL、ユーザID の置き換えを行う </td>
</tr>
<tr>
<td> <code>user</code> </td>
<td> コメント作成者 </td>
<td> コメント作成者の <code>ScreenName</code> を指定 </td>
</tr>
</tbody>
</table>


<p>esa API の利用については <a href="https://docs.esa.io/#path=%2Fdev">公式の開発者向けドキュメント</a> を参照ください。</p>

<p><figure class="figure-image figure-image-fotolife" title="記事本文に追加したメタ情報の例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123714.png" alt="f:id:tmd45:20190822123714p:plain" title="f:id:tmd45:20190822123714p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>記事本文に追加したメタ情報の例</figcaption></figure></p>

<p>今回は「タグ」の移行をしませんでした。一度リセットして、混沌としたタグの整理ができればと思ったんですが、タグがなくなったことで意味がわからなくなってしまった記事が意外とあって、メタ情報と一緒に移行しておけばよかったな、と思いました。</p>

<p>インポートの流れとして <strong>先に記事 URL や画像 URL だけ esa 上で作っておいて、記事本文を流し込む段階で記事中の URL の置換</strong> を行いました。先に作った URL たちは中間データとしてテキスト（.tsv）に吐き出しました。口頭だとややこしいので詳しくは拙作のコードで。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/import_articles/article_import.rb">qiita2esa/article_import.rb at import_articles · tmd45/qiita2esa</a></li>
</ul>


<p>使い捨て用に書きなぐったものなのでお恥ずかしいですが、なんか頑張ってるのが伝わればいいかなと思います 🙈</p>

<p>esa の API 利用はもちろんですが、画像取得のために Qiita:Team の API も利用します。</p>

<h2 id="プロジェクトページ記事の扱い">プロジェクトページ記事の扱い</h2>

<p>Qiita:Team のプロジェクトページとなっている記事も１記事＝１ファイルです。ただし通常の記事と、含まれている属性が若干異なるため注意は必要です。</p>

<p>基本的には通常の記事と同じく、渡せるメタ情報は渡して、Markdown の本文を投入するという感じで進めました。</p>

<p>もちろん esa には「プロジェクトページ」という概念はないので、適当に <code>(unsorted)/projects</code> のようなカテゴリを定義してそこにまとめました。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/import_articles/project_import.rb">qiita2esa/project_import.rb at import_articles · tmd45/qiita2esa</a></li>
</ul>


<p>実はメインの記事移行より先に、件数の少ないこちらを試していたため、結果的に URL の置き換え処理などすっかり忘れていました。INDEX の用途で利用していたページではこの置き換えを行わないとツラいと思いますので、お気をつけください。</p>

<h2 id="プライベートグループの記事の扱い">プライベートグループの記事の扱い</h2>

<p>プライベートグループでは、人事や役員会議などで扱う社内にも非公開の情報が含まれていました。これらは esa の決済連結機能を使って、別の esa チームを作成しデータ移行しました。</p>

<p>エクスポートした JSON データは、記事の所属するグループもパラメータとして持っているので、そこを見てファイルごと分別しておきます。</p>

<p>スクリプトが見当たらなくて自分でどうやったんだっけ…と思いましたが、雑に以下のコマンドで分類してました。ご参考まで 😇</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> path/to/export_articles
$ ag <span class="synSpecial">-l</span> <span class="synStatement">'</span><span class="synConstant">&quot;url_name&quot;: &quot;group_name&quot;</span><span class="synStatement">'</span> ./*.json | xargs <span class="synSpecial">-I</span>% <span class="synStatement">mv</span> % ./group_name
</pre>


<h2 id="メンバーの移行とデータの移行のタイミング">メンバーの移行とデータの移行のタイミング</h2>

<p>今回は先にメンバー全員に、あるタイミングから新規記事は esa で作ってもらうよう案内しました（それゆえに Emoji の登録を先にやった）。</p>

<p>Qiita:Team 側に新しい記事が作成されなくなったのを見計らって、告知しつつ、記事データのエクスポートと、esa への投入を開始しました。</p>

<p>記事の参照は一時的に Qiita:Team と esa の双方を見ることになりましたが、"記事を書けない期間" を無くして移行できたのはよかったです。</p>

<h1 id="esa-と一緒に使っている便利ツール">esa と一緒に使っている便利ツール</h1>

<p>事例といえば先駆者たちの <a href="https://docs.esa.io/posts/25">esa 公式の紹介記事まとめ</a> も大変助かりました。弊社でもいくつかの便利なツールを併用しています。</p>

<h2 id="記事の自動作成自動-esa-やり機">記事の自動作成「自動 esa やり機」</h2>

<p>用意したテンプレートを元に、指定した曜日に自動で記事を生成してくれる Heroku アプリです。</p>

<ul>
<li><a href="https://github.com/standfirm/esa_feeder">standfirm/esa_feeder - GitHub</a></li>
<li><a href="https://tech.misoca.jp/entry/2017/12/01/110000">自動esaやり機とクリーンアーキテクチャ - Misoca開発者ブログ</a></li>
</ul>


<p>弊社でも定期的なミーティングの議事録は、まず WIP の空記事を用意して、事前に議題を追記したり、話しながら記録したりということをやっています。Qiita:Team 時代からテンプレートを元に人が WIP 記事を作って共有していましたが、"誰か" がリマインドに気づいて記事を作成するといったことが不要になりました。</p>

<p>記事の作成と同時に指定した Slack チャンネルへの通知も行われることで、議題の追記のリマインドも兼ねていて非常に便利に利用しております！</p>

<h2 id="Slack-に記事-URL-から概要を展開してくれるKujaku">Slack に記事 URL から概要を展開してくれる「Kujaku」</h2>

<p>最近ツールの更新があってコメントURL からコメント内容も展開されるようになった、Slack x esa の情報共有を促進してくれる便利ツール。こちらもバックエンド部分は Heroku アプリです。</p>

<ul>
<li><a href="https://github.com/FromAtom/Kujaku">FromAtom/Kujaku - GitHub</a></li>
<li><a href="https://inside.pixiv.blog/fromatom/5684">Closedなesaの記事URLをSlackに貼ったら展開されるようにした - pixiv inside</a></li>
<li><a href="https://fromatom.hatenablog.com/entry/2019/08/06/173251?_ga=2.83644766.993732209.1566361511-952403895.1555303711">#esa のURLを展開してくれるKujakuで、コメントも展開できるようになりました。 - 文字っぽいの。</a></li>
</ul>


<p>ログインしないと見られないようなクローズドなページの URL は、Slack に流してもその内容が展開されません。それを解決してくれるのが Slack の "Unfurling links in messages" という機能なのですが、その機能をかんたんに使えるようにしてくれたのがこのツールです。</p>

<p>これまでは URL と一緒にタイトルなども投稿してもらわないと「何？この URL…」となっていたのが、URL を貼るだけで手軽に共有できるようになったのはハイパー捗りました！</p>

<h2 id="Emacs-x-esa-利用者におすすめemacs-helm-esa">Emacs x esa 利用者におすすめ「emacs-helm-esa」</h2>

<p>手前味噌ですが、esa 移行をきっかけに弊社の Emacs 使い <a href="http://blog.hatena.ne.jp/masutaka26/">id:masutaka26</a> が作った Emacs-Helm Interface もご紹介。</p>

<ul>
<li><a href="https://github.com/masutaka/emacs-helm-esa">masutaka/emacs-helm-esa - GitHub</a></li>
<li><a href="https://masutaka.net/chalow/2019-06-10-1.html">esa の記事を Emacs から素早く開ける helm-esa.el を作った / マスタカの ChangeLog メモ</a></li>
</ul>


<p>普段利用している環境から手軽に記事が探せるのは強いですね！よろしければお試しください。</p>

<h1 id="QiitaTeam-から移行して-esa-に思ったこといろいろ">Qiita:Team から移行して esa に思ったこといろいろ</h1>

<p>なによりも課題であった「記事検索が上手くいかない」件はすっきり解決しました！
以前は言いづらかった「○○で検索してみてください！」というのが気軽に言えるようになってよかったです。</p>

<p>それ以外の部分を挙げてみたいと思います。</p>

<h2 id="サポートの対応がフレンドリーかつ早い">サポートの対応がフレンドリーかつ早い！</h2>

<ul>
<li>esa のフィードバックフォームから投げたものに対する反応が早い</li>
<li>相談に対する回答も丁寧でとてもありがたい</li>
<li>バグ報告したらすぐ直って <del>社内で２，３人鼻血出した</del> 素敵</li>
<li><a href="https://docs.esa.io/#path=%2Fpolicies">情報セキュリティポリシー、運用ポリシーが公開されている</a>ので社内のPマークチェックもスムーズでした（確認にもご協力いただけて助かりました）</li>
</ul>


<p>移行するデータ量が多いことは分かっていたので、先に esa の人に「たくさんデータ移行する予定なんですが大丈夫ですか…？」と連絡してみました。</p>

<p><strong>移行当時の Qiita:Team メンバー数が 79 人、記事数が 5 万記事以上ありました</strong>（あとで気づきましたが、画像も相当な数とサイズがありましたね…）。esa の深谷さんや越川さん、赤塚さんからすぐにお返事をいただいて、とても助かりました。</p>

<h2 id="導入時に助かったところ">導入時に助かったところ</h2>

<ul>
<li><strong>ドメイン制限が可能な Google ログイン</strong>

<ul>
<li>G Suite 利用のため、ソーシャルログインでアカウント管理が一元化できてハッピーです</li>
</ul>
</li>
<li><strong>「添付ファイルに関するセキュアオプション」→ esaにログイン中のみ添付ファイルへのアクセスを可能にする</strong>

<ul>
<li>esa 記事の外部公開ができなくなってしまうのは残念ですが、これがあると安心して業務情報をまとめられるので非常に助かります</li>
</ul>
</li>
<li><strong>「複数チームの連結決済」</strong>

<ul>
<li>Qiita:Team 利用時から、人事や経営に関わるプライベートグループの運用がありました。これを引き継ぐため、メンバーを限定した esa チームを作り、連結決済の設定をしています</li>
</ul>
</li>
<li><strong>「Webhook・アプリ連携」での Slack 連携</strong>

<ul>
<li>Qiita:Team のころから Slack にフィードを流すという運用をしていたので、同様のものがあり助かりました</li>
</ul>
</li>
</ul>


<h2 id="導入時に困ったところ">導入時に困ったところ</h2>

<p>アカウント登録のとき <strong><code>Name</code> と <code>ScreenName</code> の違いが分かりづらかった</strong>ようです。<code>Name</code> のほうに氏名、<code>ScreenName</code> にユーザID を入れてねー、という説明が必要でした。</p>

<p>また移行ならではですが、esa の <code>ScreenName</code> では、Qiita:Team の <code>ユーザ名</code> で使えた「英大文字」が使えません。そのため Qiita:Team で英大文字を含む <code>ユーザ名</code> を利用していた場合には、すべて小文字に置き換えたものにしてもらいました。</p>

<p>アカウント登録の案内にこのような注意を書きました。どう判定させるかは移行スクリプトの作りに依ります。</p>

<blockquote><p>大文字を小文字に置き換えた場合も「同一のIDである」と判断します :pray:</p>

<ul>
<li>Qiita で <code>ichiro3</code> → esa で <code>ichiro3</code> ⇒ OK ✅ （完全に一致）</li>
<li>Qiita で <code>Taro-san</code> → esa で <code>taro-san</code> ⇒ OK ✅（小文字になっただけ）</li>
<li>Qiita で <code>Hanako99</code> → esa で <code>99hanako</code> ⇒ NG 💥（同一と判断できません）</li>
</ul>


<p>大文字・小文字とは別の話ですが、ハイフンやアンダーバーを使われている方は間違えないようにお気をつけください。</p>

<ul>
<li>Qiita で <code>Taro-san</code> → esa で <code>taro_san</code> ⇒ NG 💥（ハイフンがアンダーバーに。同一と判断できません）</li>
</ul>
</blockquote>

<h2 id="QiitaTeam-と-esa-の情報整理思想の違い">Qiita:Team と esa の情報整理思想の違い</h2>

<p>見出しのとおり、２つのツールは情報整理に対する姿勢が異なります。それゆえに移行して戸惑いの声が挙がったのは事実です。</p>

<p>これらの意見は「esa も Qiita:Team と同じようにすべき」という話ではありません。UI や使い方が変われば戸惑うひとがいるのは当たり前で、いずれ良い方向に慣れるか、悪い方向に慣れるか分かれます。</p>

<p>使い続けて感じる不便な点は、きちんとフィードバックすれば答えてくれるサービスだと思うので、そこは真摯にフィードバックしていきましょう 💪</p>

<h3 id="QiitaTeam-のトップページのようにすべての記事が流れていくようなものが欲しい情報のザッピングがしたい">Qiita:Team のトップページのように、すべての記事が流れていくようなものが欲しい。情報のザッピングがしたい</h3>

<p>esa では "POSTS" のページがそれに当たりますが、Qiita:Team に慣れていたメンバーからすると「トップページ」から１ステップ踏まないとそれが見えないという戸惑いがありました。"POSTS" ページに移動しても、ソート順が意図した順でない（ソート順を変更するというリテラシーも必要になる）ことでも迷いが発生したようでした。</p>

<p>これについては、"HOME" の README 記事に便利リンク集を追加して、周知することでひとまず解決できました。</p>

<p><figure class="figure-image figure-image-fotolife" title="README に作った「オススメ検索リンク」集"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822125138.png" alt="f:id:tmd45:20190822125138p:plain" title="f:id:tmd45:20190822125138p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>README に作った「オススメ検索リンク」集</figcaption></figure></p>

<h3 id="Recently-Update-が-WIP-も含むすべての記事の更新を-age-てしまう">Recently Update が WIP も含むすべての記事の更新を age てしまう</h3>

<p>これについては esa のコンセプトにどうしても馴染めないメンバーがいくらかいるという話でもあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="esa.io より、esa のコンセプト"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822125319.png" alt="f:id:tmd45:20190822125319p:plain:w460" title="f:id:tmd45:20190822125319p:plain:w460" class="hatena-fotolife" style="width:460px" itemprop="image"></span><figcaption>esa.io より、esa のコンセプト</figcaption></figure></p>

<p>まず <strong>「下書き」機能が無いことで、以前より記事が書きづらい、公開もしづらくなった</strong> という声がありました。</p>

<p>不完全な状態では公開したくなく「下書き」のような非公開の状態で推敲を重ねて、キチンとした記事にしてから公開したい、という意見です。これを他人に強制するような人は見かけませんが「自分が記事を書くならそのようにしたい」と思うメンバーは年齢関係なくいる状況です。単純に下書き機能を「個人メモを置く場所」として使っていたという人もいました。</p>

<p>また、<strong>WIP で書いた記事を更新したときに、Recently Update で更新順として上がってきてしまうことに不便を感じる</strong> 声もあります。これは記事を書く方も、見る方もそうで「未完成の間は sage 進行したい」「更新された記事は知りたいけど ShipIt されてから読みたい」という状況です。 <code>[skip notice]</code> しても Recently Update には流れてくるというのも戸惑われているようです。</p>

<p>読む側は、先程のザッピングの検索クエリと同じもので解決できるので、そちらを利用してもらっています。</p>

<p>書く側に対しては、気にせずガンガン更新しちゃいなよ！と意識改革していくしかないかなと思っています（自分は未完成でも気にしない星人）。</p>

<h3 id="内部-URL-でタイトルが展開されるのは便利だった">内部 URL でタイトルが展開されるのは便利だった…</h3>

<p>Qiita:Team では、Qiita:Team 内の URL を貼るだけで、記事の表示時にリンク先記事のタイトル（と作成者のアイコン）が自動で展開されていました。"リンクされた記事" のタイトルを修正したときに、"リンクしている記事" 側を修正しなくてよいのは大変便利でした。</p>

<ul>
<li><a href="https://blog.qiita.com/132008265764-2/">Qiita:Teamで、チーム内記事へのリンクのタイトルが自動で表示されるようになりました - Qiita Blog</a></li>
</ul>


<p>情報整理をしていると、よりわかりやすいタイトルに修正したくなることも多いですし、そういう記事に限っていろんなところから参照されていたりして…</p>

<p>いまでもこの機能は欲しいなーと思います（たしか esa にもフィードバックを送らせていただいたと思う）。</p>

<h3 id="他人の記事をかんたんにいじれてしまう">他人の記事をかんたんにいじれてしまう</h3>

<p>これは最近不安を訴える人が減ってきたので、みんな慣れてきたのかもしれません。</p>

<p>Qiita:Team のときは「共同編集の記事」という区別があったり、「編集リクエスト」の機能があったため、うっかり他人の記事を触ってしまうということがありませんでした。これに慣れていると、逆にどの記事でも誰でもいじれてしまうのは、不安があったようです。</p>

<p>編集履歴から内容をロールバックすることもできるし、（自分のようなおじさんから言わせれば）昔からある Wiki だってそういうものですよ、という感じで、こちらも意識改革をしていくのがよいと思いました。</p>

<p>誰でも触れるおかげで、記事を書いた人に依存せずに情報の整理ができるというのはとても良い点だと感じます。</p>

<p>記事の Delete が出来てしまうことに不安を持つ人は多いかもしれませんが、まず記事の削除自体が２ステップ踏む UI になっていて「うっかり」することは少ないのではないかと思います。</p>

<h1 id="さいごに">さいごに</h1>

<p>情報共有ツールの移行で得られた結果は以下のようなものです。</p>

<ul>
<li>検索で記事が見つけやすくなった</li>
<li>ナレッジの階層化ができるようになった</li>
<li>ナレッジの構造化を意識するようになった</li>
<li>フロー情報とストック情報を区別できるようになった</li>
<li>移行をきっかけに記事の整理が行われた</li>
</ul>


<p>問題を感じることに鈍感にならず、今後も「日々混沌、日々進化<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」のバリューを実践していきたいと思います。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>弊社バリューである FF memes の１つです。詳しくはこちら: <a href="https://recruit.feedforce.jp/">https://recruit.feedforce.jp/</a> <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Dynamoid のスレッドセーフではない実装を直しました]]></title>
        <id>https://developer.feedforce.jp/entry/2019/08/13/183130</id>
        <link href="https://developer.feedforce.jp/entry/2019/08/13/183130"/>
        <updated>2019-08-13T09:31:30.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。インフラエンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>私は Dynamoid のメンテナではないのですが、弊社内で今回それなりに大きい問題が起きて、得た知見も大きかったため記事にしました。</p>

<h2>TL;DR</h2>

<p>Dynamoid にスレッドセーフではない実装があったが <a href="https://github.com/Dynamoid/dynamoid/pull/373">PR をマージしてもらって</a>修正済み。</p>

<p>2019/08/13 時点ではまだリリースされていないようなので、エラーで困っている方は master ブランチをお使いください。</p>

<h2>今回起きた問題</h2>

<p>弊サービスでは Sidekiq 上で Dynamoid を使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDynamoid%2Fdynamoid" title="Dynamoid/dynamoid" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Dynamoid/dynamoid">github.com</a></cite></p>

<p>基本的に問題なく稼働していたのですが、デプロイ時に Sidekiq を再起動した後、Bugsnag に以下のような二種類のエラーが継続的に飛んできました。</p>

<p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;[]&#x27; for nil:NilClass"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182531.png" alt="f:id:tsub511:20190809182531p:plain" title="f:id:tsub511:20190809182531p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;&#x5B;&#x5D;&#x27; for nil:NilClass</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182800.png" alt="f:id:tsub511:20190809182800p:plain" title="f:id:tsub511:20190809182800p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query</figcaption></figure></p>

<p>このエラーが起きると、自然には回復しないため、Sidekiq のワーカーを再起動する必要があります。</p>

<p>また、<code>NoMethodError</code> という一般的な例外クラスのため ActiveJob の <code>retry_on</code> によるリトライ処理の考慮はしておらず、大事なジョブが実行されないままになってしまうのも問題です。</p>

<p>エラーをパッと見ただけでは、キャッシュの実装に考慮漏れがあるのかな？とか、インスタンスが生成されていて<a href="https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb">コード上ではメソッドが実装されている</a>のになんで undefined method エラーが起きるんだ？などと、不思議なエラーが出ていて調査が難航しそうな印象でした。</p>

<h2>何が原因だったのか</h2>

<p>Sidekiq + Dynamoid でピンと来る方もいると思いますが、エラーの原因は Dynamoid にスレッドセーフではない実装があったことでした。</p>

<p>スレッドセーフではない実装がどこにあったのか探すために、ここで発生していたエラーをもう一度見てみます。</p>

<blockquote><p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;<span data-unlink>&#x27; for nil:NilClass"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182531.png" alt="f:id:tsub511:20190809182531p:plain" title="f:id:tsub511:20190809182531p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;</span>&#x27; for nil:NilClass</figcaption></figure></p></blockquote>

<p>まず 1 つ目のエラーは <code>nil</code> に対して <code>#[]</code> を呼び出そうとしてエラーになっていますが、<code>nil</code> になっている変数は <code>table_cache</code> です。</p>

<p><code>table_cache</code> は以下で初期化されています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb#L66-L69</span>
<span class="synPreProc">def</span> <span class="synIdentifier">connect!</span>
  <span class="synIdentifier">@client</span> = <span class="synType">Aws</span>::<span class="synType">DynamoDB</span>::<span class="synType">Client</span>.new(connection_config)
  <span class="synIdentifier">@table_cache</span> = {}
<span class="synPreProc">end</span>
</pre>


<p>そして、この初期化のための <code>Dynamoid::AdapterPlugin::AwsSdkV3#connect!</code> を呼び出しているのは <code>Dynamoid::Adapter#adapter</code> です。</p>

<p><code>adapter.connect!</code> の部分に <code>if adapter.respond_to?(:connect!)</code> という条件がありますが、ここが <code>false</code> になっていて <code>adapter.connect!</code> が実行されていないため、<code>table_cache</code> の初期化処理が動いていないようです。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L29-L37</span>
<span class="synPreProc">def</span> <span class="synIdentifier">adapter</span>
  <span class="synStatement">unless</span> <span class="synIdentifier">@adapter_</span>.value
    adapter = <span class="synConstant">self</span>.class.adapter_plugin_class.new
    adapter.connect! <span class="synStatement">if</span> adapter.respond_to?(<span class="synConstant">:connect!</span>)
    <span class="synIdentifier">@adapter_</span>.compare_and_set(<span class="synConstant">nil</span>, adapter)
    clear_cache!
  <span class="synStatement">end</span>
  <span class="synIdentifier">@adapter_</span>.value
<span class="synPreProc">end</span>
</pre>


<p>2 つ目のエラーも見てみます。</p>

<blockquote><p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182800.png" alt="f:id:tsub511:20190809182800p:plain" title="f:id:tsub511:20190809182800p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query</figcaption></figure></p></blockquote>

<p>こちらは <code>Dynamoid::AdapterPlugin::AwsSdkV3</code> のインスタンス <code>adapter</code> に対して <code>query</code> を実行しようとしてメソッドが定義されていないというエラーです。</p>

<p>しかし、実際のコードにはメソッドが定義されています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>https<span class="synConstant">:/</span>/github.com/<span class="synType">Dynamoid</span>/dynamoid/blob/v3.<span class="synConstant">2.0</span>/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb<span class="synComment">#L489-L500</span>
 <span class="synPreProc">def</span> <span class="synIdentifier">query</span>(table_name, options = {})
  <span class="synType">Enumerator</span>.new <span class="synStatement">do</span> |<span class="synIdentifier">yielder</span>|
    table = describe_table(table_name)

    <span class="synType">Query</span>.new(client, table, options).call.each <span class="synStatement">do</span> |<span class="synIdentifier">page</span>|
      yielder.yield(
        page.items.map { |<span class="synIdentifier">row</span>| result_item_to_hash(row) },
        <span class="synConstant">last_evaluated_key</span>: page.last_evaluated_key
      )
    <span class="synStatement">end</span>
  <span class="synStatement">end</span>
 <span class="synPreProc">end</span>
</pre>


<p>視点を変えて、<code>adapter</code> インスタンスを定義しているコードを見てみると、やはり <code>Dynamoid::Adapter#adapter</code> に行き着きます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L29-L37</span>
<span class="synPreProc">def</span> <span class="synIdentifier">adapter</span>
  <span class="synStatement">unless</span> <span class="synIdentifier">@adapter_</span>.value
    adapter = <span class="synConstant">self</span>.class.adapter_plugin_class.new
    adapter.connect! <span class="synStatement">if</span> adapter.respond_to?(<span class="synConstant">:connect!</span>)
    <span class="synIdentifier">@adapter_</span>.compare_and_set(<span class="synConstant">nil</span>, adapter)
    clear_cache!
  <span class="synStatement">end</span>
  <span class="synIdentifier">@adapter_</span>.value
<span class="synPreProc">end</span>
</pre>


<p><code>self.class.adapter_plugin_class.new</code> で生成したものをメモ化しています。</p>

<p>メモ化には <a href="https://github.com/ruby-concurrency/concurrent-ruby">concurrent-ruby</a> を使っていて、<a href="https://github.com/Dynamoid/dynamoid/commit/ed004b2d53c7500e10bca914ee844957939df2df">過去に対策されたよう</a>なのでそこは問題なさそうです。</p>

<p><code>self.class.adapter_plugin_class.new</code> の先が怪しそうなのでコードを見てみると、なにやら動的に <code>require</code> しています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L181-L187</span>
<span class="synPreProc">def</span> <span class="synConstant">self</span>.<span class="synIdentifier">adapter_plugin_class</span>
  <span class="synStatement">unless</span> <span class="synType">Dynamoid</span>.const_defined?(<span class="synConstant">:AdapterPlugin</span>) &amp;&amp; <span class="synType">Dynamoid</span>::<span class="synType">AdapterPlugin</span>.const_defined?(<span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter.camelcase)
    <span class="synPreProc">require</span> <span class="synSpecial">&quot;</span><span class="synConstant">dynamoid/adapter_plugin/</span><span class="synSpecial">#{</span><span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter<span class="synSpecial">}&quot;</span>
  <span class="synStatement">end</span>

  <span class="synType">Dynamoid</span>::<span class="synType">AdapterPlugin</span>.const_get(<span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter.camelcase)
<span class="synPreProc">end</span>
</pre>


<p>実はスレッドセーフではない実装はこの <code>require</code> する条件の <code>Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)</code> の部分です。</p>

<p>エラーを再現できるコードを Gist に用意しましたのでそちらを使って確認していきます。</p>

<p><a href="https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017">Test codes to reproduce not thread-safe errors of Dynamoid &middot; GitHub</a></p>

<p>Dynamoid に以下のような変更を加えて、<code>unless</code> の中に入らず <code>require</code> が実行されなかった時の状態を見てみます。</p>

<pre class="code lang-diff" data-lang="diff" data-unlink><span class="synType">diff --git a/lib/dynamoid/adapter.rb b/lib/dynamoid/adapter.rb</span>
<span class="synPreProc">index f390ecf..df2a58c 100644</span>
<span class="synType">--- a/lib/dynamoid/adapter.rb</span>
<span class="synType">+++ b/lib/dynamoid/adapter.rb</span>
<span class="synStatement">@@ -181,6 +181,13 @@</span><span class="synPreProc"> module Dynamoid</span>
     def self.adapter_plugin_class
       unless Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)
         require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;
<span class="synIdentifier">+      else</span>
<span class="synIdentifier">+        tmp_adapter = Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase).new</span>
<span class="synIdentifier">+        puts &lt;&lt;~EOS</span>
<span class="synIdentifier">+          respond_to?(:connect!): #{tmp_adapter.respond_to?(:connect!)},</span>
<span class="synIdentifier">+          respond_to?(:query): #{tmp_adapter.respond_to?(:query)},</span>
<span class="synIdentifier">+          require: #{require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;}</span>
<span class="synIdentifier">+        EOS</span>
       end
 
       Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase)
</pre>


<p>すると、スレッドによっては <code>const_defined?</code> の結果が <code>true</code> で、<code>require</code> の結果も <code>false</code> (コードがロード済み) なのに、実際のメソッドが存在しないという現象が起きていることが分かりました。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec ruby main.rb
...
respond_to?(:connect!): false,
respond_to?(:query): false,
require: false
...</pre>


<p>ここからは Ruby の <code>require</code> の実装を知らないため推測になります。</p>

<p>おそらくマルチスレッド環境下で <code>require</code> を実行すると、<code>require</code> を実行したスレッド内では全てのコードがロードされた状態になりますが、別のスレッドではクラス定義などの「ガワ」だけがロードされた状態になっているのではないかと思いました。</p>

<p>そのため、ロードが不十分なスレッドでインスタンスを生成できるが、メソッドが定義されていない、という状態になっているのかと思われます。</p>

<h2>解決方法</h2>

<p>よって、全てのスレッドで確実に <code>require</code> を実行することで今回のエラーが解決するという結論に至りました。</p>

<pre class="code lang-diff" data-lang="diff" data-unlink><span class="synType">diff --git a/lib/dynamoid/adapter.rb b/lib/dynamoid/adapter.rb</span>
<span class="synPreProc">index f390ecf..8449e34 100644</span>
<span class="synType">--- a/lib/dynamoid/adapter.rb</span>
<span class="synType">+++ b/lib/dynamoid/adapter.rb</span>
<span class="synStatement">@@ -179,9 +179,7 @@</span><span class="synPreProc"> module Dynamoid</span>
     end
 
     def self.adapter_plugin_class
<span class="synSpecial">-      unless Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)</span>
<span class="synSpecial">-        require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;</span>
<span class="synSpecial">-      end</span>
<span class="synIdentifier">+      require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;</span>
 
       Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase)
     end
</pre>


<p>エラーの原因と解決方法が判明したため、既に Dynamoid に PR を作りマージまでしてもらいました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDynamoid%2Fdynamoid%2Fpull%2F373" title="Fix threadsafety of Dynamoid::Adapter by tsub · Pull Request #373 · Dynamoid/dynamoid" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Dynamoid/dynamoid/pull/373">github.com</a></cite></p>

<p>2019/08/13 時点ではまだリリースされていないようなので、エラーで困っている方は master ブランチをお使いください。</p>

<h2>調査に苦労した点</h2>

<p>マルチスレッドプログラミングの経験が浅いため、まずスレッドセーフではない実装があるということに気づくまでに時間がかかりました。</p>

<p>そして、エラーを再現しようとした時になかなか再現出来なかったのもハマりポイントでした。</p>

<p><a href="https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017">エラーの再現コード</a>を読むと分かりますが、Dynamoid のメソッドを呼ぶ直前に <code>puts</code> を実行しています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017#file-main-rb</span>
<span class="synConstant">100</span>.times <span class="synStatement">do</span> |<span class="synIdentifier">i</span>|
  safe_thread(i.to_s) <span class="synStatement">do</span>
    puts <span class="synSpecial">'</span><span class="synConstant">debug</span><span class="synSpecial">'</span> <span class="synComment"># To unlock Ruby's GVL</span>
    <span class="synType">Document</span>.where(<span class="synConstant">identifier</span>: <span class="synSpecial">'</span><span class="synConstant">hoge</span><span class="synSpecial">'</span>).first
  <span class="synStatement">end</span>
<span class="synStatement">end</span>
</pre>


<p>この <code>puts</code> が重要で、Ruby は GVL (Giant VM Lock) という仕組みを使って、実行されるネイティブスレッドが 1 つになるように排他制御をしています。</p>

<p>ただし、IO 関連のメソッドを実行する際は GVL が一時的に解放されてスレッドが同時に実行されます。</p>

<blockquote><p>ネイティブスレッドを用いて実装されていますが、 現在の実装では Ruby VM は Giant VM lock (GVL) を有しており、同時に実行される ネイティブスレッドは常にひとつです。 ただし、IO 関連のブロックする可能性があるシステムコールを行う場合には GVL を解放します。その場合にはスレッドは同時に実行され得ます。 また拡張ライブラリから GVL を操作できるので、複数のスレッドを 同時に実行するような拡張ライブラリは作成可能です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.ruby-lang.org%2Fja%2Flatest%2Fdoc%2Fspec%3D2fthread.html" title="スレッド (Ruby 2.6.0)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fthread.html">docs.ruby-lang.org</a></cite></p></blockquote>

<p>つまりスレッドセーフではない実装があった場合に、それを再現させるためには単純にスレッドセーフではないコードを書くだけではダメで、IO 関連のメソッドを実行して GVL を解放しないといけません。</p>

<p>少し古い記事ではありますが、こちらが参考になりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fmoyomot.hatenablog.com%2Fentry%2F2014%2F05%2F04%2F232538" title="Rubyでスレッドセーフでないことを簡単に確認したい - もょもとの技術ノート" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://moyomot.hatenablog.com/entry/2014/05/04/232538">moyomot.hatenablog.com</a></cite></p>

<p>実際の本番環境ではログ出力などにより、IO 関連のメソッドは普通に実行されていることが多いかと思いますので、エラーが起きるのも納得です。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku Meetup #25 "Heroku Ghost" で 2 回話してきた #herokujp]]></title>
        <id>https://developer.feedforce.jp/entry/2019/07/29/140000</id>
        <link href="https://developer.feedforce.jp/entry/2019/07/29/140000"/>
        <updated>2019-07-29T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>先週金曜日（2019/7/26）に開催された <a href="https://herokujp.doorkeeper.jp/events/93092">Heroku Meetup #25 "Heroku Ghost"</a> で『デプロイ元をCircleCIからHerokuに乗り換えた』というお題で発表してきました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRy7z2A77VE4UNCp7EhpFgeQr7fl8XqHolYwsaokN76rGCvoeo1SKh1hkNg3ew2D4pSLoQAz-iefLnR/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>つい先日、現在関わっている <a href="https://app.ecbooster.jp/">EC Booster</a> のデプロイフローを改善し、それなりに知見を得られたためです。</p>

<p>Heroku Meetup の参加は<a href="https://herokujp.doorkeeper.jp/events/91348">前回 #24</a> に引き続き、セッションでの発表は<a href="https://herokujp.doorkeeper.jp/events/82754">前々回 #23</a> 以来です。</p>

<p>前々回 #23 については自分のブログにも書きました。</p>

<p><a href="https://masutaka.net/chalow/2018-11-28-1.html">Heroku Meetup #23 "Heroku Dynamite!!" で話してきた #herokujp / マスタカの ChangeLog メモ</a></p>

<h2>LT でも話した</h2>

<p>LT でも飛び込みで話しました。内容は <a href="https://github.com/heroku/heroku-buildpack-google-chrome">heroku-buildpack-google-chrome</a> と <a href="https://github.com/heroku/heroku-buildpack-chromedriver">heroku-buildpack-chromedriver</a> の細かすぎる話です。動かない Chrome や chromedriver のバイナリが本番環境にデプロイされることを防ぐ方法や、それに関して PR を出した話など。スライドの 41~43 ページ目が相当します。</p>

<p>無駄に元気な 1 日でした。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">今日は会社で LT 1 本やって、Heroku meetup で通常セッション 1 本、その後に飛び込み（？）で LT 1 本やった。さすがにもうこの数をやることないかな？ <a href="https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw">#herokujp</a></p>&mdash; Takashi MASUDA (@masutaka) <a href="https://twitter.com/masutaka/status/1154719579374936065?ref_src=twsrc%5Etfw">2019年7月26日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>※ 44~45 ページ目は、尺の関係で削ったブランチ戦略のメモです。ベストな戦略ではないので改善予定。</p>

<h2>雑感</h2>

<p>初心者向けの知見に比べて、一歩進んだ Heroku 知見はあまり Web 上に存在しない印象です。</p>

<p>ここ 1 年近く、それなりに Heroku を学習してきて「かなりの規模まで Heroku で十分では？」「デプロイや Dyno の再起動で中断されるため苦手とされがちなバッチ処理も、簡単に克服できるのでは？」などと、考えが変わってきています。</p>

<p>これからもブログや登壇などで、コミュニティに還元していきます。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">本日の頂き物。キャップはスピーカー特典 <a href="https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw">#herokujp</a> <a href="https://t.co/Whc3UVJrbg">pic.twitter.com/Whc3UVJrbg</a></p>&mdash; Takashi MASUDA (@masutaka) <a href="https://twitter.com/masutaka/status/1154746086814150658?ref_src=twsrc%5Etfw">2019年7月26日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[esa をネタに Emacs Lisp と Elm を無理やり繋げた発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2019/07/01/140000</id>
        <link href="https://developer.feedforce.jp/entry/2019/07/01/140000"/>
        <updated>2019-07-01T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。今回はネタ探しに特に苦労しました。</p>

<p>週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『esaを支えたい技術』という発表をしました。</p>

<p><a href="https://esa.io/">esa</a> をネタに Emacs Lisp と <a href="https://elm-lang.org/">Elm</a> を無理やり繋げた内容です。ちょっと強引だった。</p>

<h2>発表の内容</h2>

<script async class="speakerdeck-embed" data-id="61df048e1aec4413bd797af156bc5f21" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>流れとしては、↓ こんな感じです。</p>

<ul>
<li>先月 <a href="https://github.com/masutaka/emacs-helm-esa">emacs-helm-esa</a> というツールを作ったよ</li>
<li>Elm を学んだら、Emacs Lisp と Syntax が似ていたよ</li>
<li><a href="https://github.com/masutaka/sandbox-elm-esa">esa の検索をするだけの簡単なツール</a>を作ったよ</li>
</ul>


<h2>発表の感想</h2>

<p>付箋紙に感想を書いてくれました。<i class="blogicon-comment" aria-hidden="true"></i> は私からのコメントです。</p>

<ul>
<li>関数型言語について学んでみたいと思っていたので、おすすめの順序を提示してくださり、参考になりました！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 良かったです。Elm はだいぶ学びやすかったです</li>
</ul>
</li>
<li>Elm、こうして見てみると Haskell にめっちゃ似てますね！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうなんですね</li>
</ul>
</li>
<li>発表の流れで Elm の話になると思わなかった

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 強引でしたね (^^;</li>
</ul>
</li>
<li>Elm ならふだんバックエンドのコード書いている人でもモダンなフロントエンド書けるって聞いたので勉強がんばる（決意）

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 刺激になってよかったです</li>
</ul>
</li>
<li>良かったです！規模が大きくなってきても同じノリで書けるのも Elm は良い

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そういう感じなんですね。コンパイルが通ればだいたい動くのが楽でした</li>
</ul>
</li>
<li>Elm の HTML を作るのがすごいですね！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ですよね。<a href="https://github.com/masutaka/sandbox-elm-esa/blob/b46bb8d405030a96ab3049a8aac1450decf0adf9/src/Main.elm#L93">この辺りの div や i</a> は全部関数ですからね</li>
</ul>
</li>
<li>ネタバレに慎重になりすぎでは！？

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 自分でも全く理解できません</li>
</ul>
</li>
<li>来週にはこれが Chrome 拡張になっているんですかね？

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> はい、次回以降の当番の方が必ず・・・！</li>
</ul>
</li>
<li>Elm おもしろそう 🏃‍♀️🚶‍♂️ emacs ってすごいんですね

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> とは言え、今の時代は emacs の他に優先順位の高いものがたくさんありますね 💦</li>
</ul>
</li>
<li>まさかの Elm とは！？

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 考えに考えた末の Elm です...</li>
</ul>
</li>
<li>これで EC Booster Front 開発できますね

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 見ててくださいよ！これからのマスタカを！！１</li>
</ul>
</li>
</ul>


<h2>所感</h2>

<p>正直、外したかな？と思いながら発表してましたが、感想を読むと良い刺激を与えられたようで良かったです。</p>

<p>一方で新しい言語の説明は難しいうえ、皆さんに馴染みがない Emacs Lisp との比較をしたので、余計に分かりづらかったという...。</p>

<p>こうするとあまり盛り上がらないという学びを得たことと、個人的には大変満足のいく内容だったので、結果的には良かったです。</p>

<p>さて、次回の勉強会のネタはどうするかな...。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51G32HC7rSL.jpg" class="hatena-asin-detail-image" alt="基礎からわかる Elm" title="基礎からわかる Elm"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/">基礎からわかる Elm</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C4%BB%B5%EF%20%CD%DB%B2%F0" class="keyword">鳥居 陽介</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/02/27</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku で Chrome を使ったクローラの IP アドレスを固定する]]></title>
        <id>https://developer.feedforce.jp/entry/2019/04/26/154540</id>
        <link href="https://developer.feedforce.jp/entry/2019/04/26/154540"/>
        <updated>2019-04-26T06:45:40.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>少し前に、Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化出来ないか調査しました。</p>

<p>実装は見送られましたが、想定よりも難しく調査に時間がかかったので、この記事に残しておきます。</p>

<p>方法だけ知りたい方は、下の方にある「手順」をご覧ください。</p>

<ul class="table-of-contents">
    <li><a href="#Heroku-Add-on-を比較する">Heroku Add-on を比較する</a><ul>
            <li><a href="#開発組織">開発組織</a></li>
            <li><a href="#実装">実装</a></li>
            <li><a href="#プラン">プラン</a></li>
            <li><a href="#CLI-のインストール">CLI のインストール</a></li>
            <li><a href="#Heroku-Buildpack">Heroku Buildpack</a></li>
        </ul>
    </li>
    <li><a href="#コラム-固定-IP-アドレスへの私見">[コラム] 固定 IP アドレスへの私見</a></li>
    <li><a href="#Chrome-のクローラで-IP-アドレスを固定化する">Chrome のクローラで IP アドレスを固定化する</a><ul>
            <li><a href="#試行錯誤の日々">試行錯誤の日々</a></li>
            <li><a href="#ついに成功">ついに成功</a></li>
            <li><a href="#手順">手順</a></li>
        </ul>
    </li>
    <li><a href="#QuotaGuard-Static-の注意事項">QuotaGuard Static の注意事項</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="Heroku-Add-on-を比較する">Heroku Add-on を比較する</h2>

<p>今回は <a href="https://elements.heroku.com/addons/proximo">Proximo</a> と <a href="https://elements.heroku.com/addons/quotaguardstatic">QuotaGuard Static</a> を検討し、最終的に QuotaGuard Static を採用しました。</p>

<p>💡 他に <a href="https://elements.heroku.com/addons/fixie">Fixie</a>, <a href="https://elements.heroku.com/addons/fixie-socks">Fixie Socks</a>, <a href="https://elements.heroku.com/addons/guru301">Guru301</a> などがあるようです。</p>

<p>以下、その理由です。</p>

<h3 id="開発組織">開発組織</h3>

<p>Proximo は <a href="https://github.com/pirateradio">https://github.com/pirateradio</a> を見た感じ <a href="https://github.com/ddollar">@ddollar</a> の個人開発のようです。この方は <a href="https://github.com/ddollar/foreman">foreman</a> などを作っており、多分すごい人です。</p>

<p>QuotaGuard Static は <a href="https://www.quotaguard.com/">https://www.quotaguard.com/</a> によると <a href="https://www.alpineshark.com/">Alpine Shark, LLC</a> のようです。会社のほうがちょっとだけ安心できます。</p>

<h3 id="実装">実装</h3>

<p>Proximo は 1 つのようですが、QuotaGuard Static は 2 つの Proxy サーバで冗長化されているようです。Proxy サーバが落ちる確率は低いかもしれませんが、冗長化されているに越したことはありません。</p>

<p>🔗 <a href="https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on">https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on</a></p>

<pre class="code" data-lang="" data-unlink>$ heroku addons:create proximo:development
Adding proximo to sharp-mountain-4005... done, v18 ($5/mo)
Your static IP address is 10.9.8.7</pre>


<p>🔗 <a href="https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on">https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on</a></p>

<pre class="code" data-lang="" data-unlink>$ heroku addons:create quotaguardstatic:starter
-----&gt; Adding quotaguardstatic:starter to sharp-mountain-4005... done, v18 (free)
-----&gt; Your static IPs are [10.11.12.13, 14.15.16.17]</pre>


<h3 id="プラン">プラン</h3>

<p>QuotaGuard Static は無料プランがあるので始めやすいです。Proximo のプランは <code>$5/mo</code> からです。</p>

<p>ちなみにどちらも <code>PROXIMO_MASK</code> や <code>QUOTAGUARDSTATIC_MASK</code> という環境変数を設定すると、一部のレンジの送信だけこれらのサービス経由にすることができ、料金を節約できます。</p>

<p>💡 正確に書くと <code>QUOTAGUARDSTATIC_MASK</code> は後述する qgsocksify 用の環境変数です。</p>

<h3 id="CLI-のインストール">CLI のインストール</h3>

<p>どちらも CLI が提供されており、必要に応じてインストールします。</p>

<p>Proximo はインストール元が http なのがイマイチでした。https に変えてもアクセス不可です。</p>

<pre class="code" data-lang="" data-unlink>$ curl http://downloads.proximo.io/proximo-stacklet.tgz | tar xz</pre>


<p>QuotaGuard Static は普通に https でインストール出来ます。</p>

<pre class="code" data-lang="" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz
$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xz</pre>


<h3 id="Heroku-Buildpack">Heroku Buildpack</h3>

<p>今回の調査の過程で Heroku Buildpack を作りました。バイナリファイルをリポジトリに commit せずに済みます。よかったらどうぞ。</p>

<ul>
<li><a href="https://github.com/masutaka/heroku-buildpack-proximo">https://github.com/masutaka/heroku-buildpack-proximo</a></li>
<li><a href="https://github.com/masutaka/heroku-buildpack-qgtunnel">https://github.com/masutaka/heroku-buildpack-qgtunnel</a></li>
<li><a href="https://github.com/masutaka/heroku-buildpack-qgsocksify">https://github.com/masutaka/heroku-buildpack-qgsocksify</a></li>
</ul>


<h2 id="コラム-固定-IP-アドレスへの私見">[コラム] 固定 IP アドレスへの私見</h2>

<p>IP アドレスを固定化したいのは、どんなケースでしょうか。</p>

<p>多くはセキュリティ要件だと思いますが、私はあまり賛同できないです。</p>

<p>そもそも当該 IP アドレスは認証されておらず、所有者が変わることがあります。仕組み上それに気づくことは難しいため、逆にセキュリティリスクを増やすことになります。そういう意味では電話番号とよく似ています。</p>

<p>サービスのスケールの観点からもデメリットがあります。例えば Heroku から AWS に引っ越す時、固定 IP アドレスは変わってしまうでしょう。顧客との調整が必要ですし、間に開発会社が入っていると、より時間がかかります。</p>

<h2 id="Chrome-のクローラで-IP-アドレスを固定化する">Chrome のクローラで IP アドレスを固定化する</h2>

<p>今回のケースでは Heroku の worker Dyno 上に <a href="https://rubygems.org/gems/sidekiq">sidekiq</a> が起動しており、<a href="https://rubygems.org/gems/selenium-webdriver">selenium-webdriver</a> 経由で Chrome が子プロセスとして起動し、クロールします。</p>

<pre><code>sidekiq
└ Chrome
   ↓
   クロール先
</code></pre>

<h3 id="試行錯誤の日々">試行錯誤の日々</h3>

<p>当初は sidekiq 自体に qgtunnel や qgsocksify をラップしましたが、うまくいきませんでした。よく考えたら納得です。</p>

<p>Chrome に <code>--proxy-server=http://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;</code> や <code>--proxy-auth=&lt;USERNAME&gt;:&lt;PASSWORD&gt;</code> を指定してもダメ。</p>

<p>どうやら少なくとも Chrome 73 ではセキュリティ上の理由から、コマンドラインオプションから認証情報を設定できないようです。認証なしプロクシなら大丈夫ですが、QuotaGuard Static は商用サービスなので認証は必須です。</p>

<h3 id="ついに成功">ついに成功</h3>

<p>ダメ元で QuotaGuard Static のサポートに聞いたら、方法を知っており、無事クロール先にアクセスすることが出来ました。</p>

<p>👇 Dyno とクロール先を SOCKS5 トンネルで繋ぎ、それ経由でアクセスします。</p>

<pre><code>sidekiq
└ Chrome (4443 port)
   ↓ (SOCKS5 tunnel)
   QuotaGuard Static
   ↓ (SOCKS5 tunnel)
   クロール先 (443 port)
</code></pre>

<p>TCP アクセスならなんでも IP アドレスを固定化出来そうです。</p>

<h3 id="手順">手順</h3>

<p>(1) 当該 Heroku App に QuotaGuard Static Add-on をインストールします。</p>

<p>(2) qgtunnel CLI もインストールします。前述の heroku-buildpack-qgtunnel を使うとお手軽です。</p>

<pre class="code" data-lang="" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz</pre>


<p>(3) Heroku のダッシュボードから、QuotaGuard Static のダッシュボードに進み、<code>Settings</code> → <code>Setup</code> とクリックします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193848.png" alt="f:id:masutaka26:20190425193848p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>(4) さらに <code>Tunnel</code> → <code>Create Tunnel</code> とクリックします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425192905.png" alt="f:id:masutaka26:20190425192905p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>(5) <code>Remote Destination</code> にクロール先を、<code>Local Port</code> は 4443、<code>Transparent</code> は true に設定します。<code>Encrypted</code> は設定しません。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193342.png" alt="f:id:masutaka26:20190425193342p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>(6) トンネルが出来ました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193614.png" alt="f:id:masutaka26:20190425193614p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<ul>
<li>127.0.0.1:4443 へのアクセスは destination.example.com:443 へのトンネルになります</li>
<li><code>Transparent</code> を有効したことにより、destination.example.com の DNS が 127.0.0.1 に上書きされました。destination.example.com:4443 へのアクセスは destination.example.com:443 と等価になります</li>
<li>すでに HTTPS を使っているため、<code>Encrypted</code> は必要ありません</li>
</ul>


<p>(7) selenium-webdriver に与える Chrome のバイナリを qgtunnel でラッピングします。今回は以下のようなシェルスクリプト bin/google-chrome-qgtunnel を作り、selenium-webdriver に指定しました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/sh -eu</span>

<span class="synStatement">exec</span> bin/qgtunnel <span class="synStatement">&quot;</span><span class="synPreProc">$GOOGLE_CHROME_SHIM</span><span class="synStatement">&quot;</span> <span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>
</pre>


<p>💡 <a href="https://github.com/heroku/heroku-buildpack-google-chrome">heroku-buildpack-google-chrome</a> と <a href="https://github.com/heroku/heroku-buildpack-chromedriver.git">heroku-buildpack-chromedriver</a> を使っています。環境変数 <code>GOOGLE_CHROME_SHIM</code> は <code>/app/.apt/usr/bin/google-chrome</code> です。</p>

<p>(8) 左側の <code>Outbound</code> をクリックし、SOCKS5 url を Heroku の環境変数 <code>QUOTAGUARDSTATIC_URL</code> に上書きします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425191501.png" alt="f:id:masutaka26:20190425191501p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>(9) 左側の <code>Tunnel</code> から <code>Download Configuration</code> をクリックし、<code>.qgtunnel</code> ファイルをリポジトリに commit します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425203447.png" alt="f:id:masutaka26:20190425203447p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>(10) 以上の設定により、destination.example.com:4443 へのアクセスが destination.example.com:443 に変換され、且つ IP アドレスも固定されます。</p>

<p>なにかトラブルがあったら Heroku の環境変数 <code>QGTUNNEL_DEBUG</code> に true をセットして、ログを確認すると良いと思います。</p>

<h2 id="QuotaGuard-Static-の注意事項">QuotaGuard Static の注意事項</h2>

<p>app.json の addons に <code>quotaguardstatic</code> を追加して、Review App を作ると Micro plan <code>$19/mo</code> で作られてしまいます。<code>quotaguardstatic:starter</code> とかにしても同じです。</p>

<p>QuotaGuard Static のサポートに聞いたところ、Heroku のアカウント単位で設定を変える必要があるそう。問い合わせが必要です。</p>

<h2 id="まとめ">まとめ</h2>

<p>Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化しました。</p>

<p>固定 IP アドレス対応は出来るだけ避けたほうが良いと思いますが、どうしても必要な時にこの記事が参考になれば幸いです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『OAuth 2.0 の代表的な利用パターンを仕様から理解しよう』を読んだ話]]></title>
        <id>https://developer.feedforce.jp/entry/2019/04/12/184013</id>
        <link href="https://developer.feedforce.jp/entry/2019/04/12/184013"/>
        <updated>2019-04-12T09:40:13.000Z</updated>
        <summary type="html"><![CDATA[<p>社内勉強会の担当でひさびさに認可の話をしました、 <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>ご存知ないかたもいらっしゃると思うので改めて書いておくと、弊社では毎週末 金曜 夕方にエンジニア全員で集まって行う社内勉強会、通称 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> を続けています。</p>

<p>今回はこちらの記事を読んでまとめた内容（ほとんどそのまま🙇）で、ちょっと <a href="https://tools.ietf.org/html/rfc8252">RFC8252 - OAuth 2.0 for Native Apps</a> の話題なんかを追加してみました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.buildinsider.net%2Fenterprise%2Fopenid%2Foauth20" title="OAuth 2.0の代表的な利用パターンを仕様から理解しよう" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>シリーズ記事で<a href="https://www.buildinsider.net/enterprise/openid/connect">第二回は OpenID Connect について扱われてる</a>ので、ぜひ読んでみてください。</p>

<h2>スライド</h2>

<p><iframe id="talk_frame_509835" src="//speakerdeck.com/player/4e9a55ff6b734f41bf8925571bad873a" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe> <cite class="hatena-citation"><a href="https://speakerdeck.com/tmd45/12-fftt-number-352">speakerdeck.com</a></cite></p>

<h2>過去に勉強したこと</h2>

<ul>
<li><a href="https://blog.tmd45.jp/entry/2015/09/09/013720">OpenID TechNight で OpenID Connect とはなんぞやというのを聞いてきた - TMD45'β'LOG!!!</a></li>
<li><a href="https://blog.tmd45.jp/entry/2017/08/02/011504">OpenID BizDay で金融 API の動向について聞いてきた - TMD45'β'LOG!!!</a></li>
<li><a href="https://www.slideshare.net/tmd45/fapi-security-20170818">FAPI Security について聞いてきた話（2017/08/18 社内勉強会）</a></li>
</ul>


<h2>きっかけになった書籍</h2>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51CaA7dryjL._SL500_.jpg" class="hatena-asin-detail-image" alt="OAuth徹底入門 セキュアな認可システムを適用するための原則と実践" title="OAuth徹底入門 セキュアな認可システムを適用するための原則と実践"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" target="_blank" rel="noopener">OAuth徹底入門 セキュアな認可システムを適用するための原則と実践</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/Justin%20Richer" class="keyword">Justin Richer</a>,<a href="http://d.hatena.ne.jp/keyword/Antonio%20Sanso" class="keyword">Antonio Sanso</a></li><li>翔泳社</li></ul><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<p>原著は『OAuth 2 in Action』ですね。会社の本棚に入ったのでちょっと読みました。まだ全部は網羅できてないです(；´∀｀)</p>

<p>ひきつづき仕事でも活かしていきます(๑•̀ㅂ•́)و✧</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[沼 Advent Calendar 2018 総括]]></title>
        <id>https://blog.tmd45.jp/entry/2018/12/25/143619</id>
        <link href="https://blog.tmd45.jp/entry/2018/12/25/143619"/>
        <updated>2018-12-25T05:36:19.000Z</updated>
        <summary type="html"><![CDATA[<p>メリークリスマス、皆様。各 Advent Calendar も最終日、クリスマスでございます。</p>

<p>この記事は <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> の 25 日目の記事です。昨日は <a href="https://adventar.org/users/11676">aini_bellwood</a> さんの『<a href="https://bellwood-works.hatenablog.com/entry/2018/12/24/000000">ベイブレードの話 - Bellwood Works</a>』でした。回転吸収かっこいい！見た目も性能も！心が中３男子なのでぐっと来ます。</p>

<p>さてそんなわけで、沼 Advent Calendar へご参加いただいた皆様ありがとうございました。</p>

<p><b>総勢 19 個の沼記事が集まりました</b>。ちゃんと全部読ませていただいてます。いや〜 どれも面白かった。人の沼は楽しいなぁ。非常に俺得な Advent Calendar を作ってしまったなぁと思った次第でございます(ﾟ∀ﾟ)ﾌﾊﾊﾊﾊ</p>

<p><span style="color: #cccccc">23:22 追記： asonas さんが 8 日目の記事を書いてくれて「総勢 18 個」から「総勢 19 個」の記事になりました！師走の忙しいなかありがとう！！まとめ一覧のなかにもコメント追加済みです。</span></p>

<p><figure class="figure-image figure-image-fotolife" title="沼 Advent Calendar 2018 - Adventar"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181225/20181225135311.png" alt="f:id:tmd45:20181225135311p:plain" title="f:id:tmd45:20181225135311p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>沼 Advent Calendar 2018 - Adventar</figcaption></figure></p>

<ul class="table-of-contents">
    <li><a href="#まとめ">まとめ</a><ul>
            <li><a href="#インク沼に足首らへんまで浸かっている話---TMD45βLOG">インク沼に足首らへん？まで浸かっている話 - TMD45'β'LOG!!!</a></li>
            <li><a href="#リアル脱出ゲームという沼---真夜中の色彩">リアル脱出ゲームという沼 - 真夜中の色彩</a></li>
            <li><a href="#ミュージカルと私---SHOIs-blog">ミュージカルと私 - SHOI’s blog</a></li>
            <li><a href="#私は沼にハマっていないということを主張しておきたい---はのちゃ爆発">私は沼にハマっていないということを主張しておきたい - はのちゃ爆発</a></li>
            <li><a href="#ボドゲ沼に辿り着くまでの紆余曲折---kano-e-no-memo">ボドゲ沼に辿り着くまでの紆余曲折 - kano-e no memo</a></li>
            <li><a href="#アドベンチャーゲームはいいぞ核心ネタバレなし---よもやま話β版">アドベンチャーゲームはいいぞ(核心ネタバレなし) - よもやま話β版</a></li>
            <li><a href="#2018年に関西で観た歌舞伎の感想--ごひいきに">2018年に関西で観た歌舞伎の感想 | ごひいきに</a></li>
            <li><a href="#沼完全攻略ガイド---良いあそなすちゃん">沼完全攻略ガイド - 良いあそなすちゃん</a></li>
            <li><a href="#中古ガジェット沼について---どくぴーの備忘録">中古ガジェット沼について - どくぴーの備忘録</a></li>
            <li><a href="#オールドレンズのはなし---タイトルがないとトップページに戻りにくいことに気がついた">オールドレンズのはなし - タイトルがないとトップページに戻りにくいことに気がついた</a></li>
            <li><a href="#女児アニメを楽しむ---mizukmb">女児アニメを楽しむ - mizukmb</a></li>
            <li><a href="#2018ベスト--jgs---Self-Made-Keyboards-in-Japan">2018ベスト | jgs - Self-Made Keyboards in Japan</a></li>
            <li><a href="#沼の三種盛り合わせレシピ---自転車カメラキャンプ---Infinito-Nirone-7">沼の三種盛り合わせレシピ - 自転車、カメラ、キャンプ - Infinito Nirone 7</a></li>
            <li><a href="#ゲーム音楽の沼---兄貴の伝説---hatena-edition--">ゲーム音楽の沼 - 兄貴の伝説 - hatena edition -</a></li>
            <li><a href="#標準ズームがすき---azmins-diary">標準ズームがすき - azmin's diary</a></li>
            <li><a href="#キーボード沼マップぬまっぷ">キーボード沼マップ(ぬまっぷ)</a></li>
            <li><a href="#将太の寿司について---kasei_sanのブログ">将太の寿司について - kasei_sanのブログ</a></li>
            <li><a href="#漫画と私kysnnote">漫画と私｜kysn｜note</a></li>
            <li><a href="#ベイブレードの話---Bellwood-Works">ベイブレードの話 - Bellwood Works</a></li>
        </ul>
    </li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h3 id="まとめ">まとめ</h3>

<p>私のコメントは読まなくていいんで、みんなお互いの沼をのぞきにいってくれよな！<span style="color: #cccccc">（そしてうっかり足を踏み外せ！）</span></p>

<h4 id="インク沼に足首らへんまで浸かっている話---TMD45βLOG"><a href="https://blog.tmd45.jp/entry/2018/12/01/000000">インク沼に足首らへん？まで浸かっている話 - TMD45'β'LOG!!!</a></h4>

<p>このあと大きめのボトル 10 本ほど増えました。やだこわい</p>

<h4 id="リアル脱出ゲームという沼---真夜中の色彩"><a href="https://blog.midnightblue.jp/entry/2018/12/02/120838">リアル脱出ゲームという沼 - 真夜中の色彩</a></h4>

<p>私も一度参加したことがありますが、リアル脱出ゲームは参加体験型エンタテイメントとして最高だと思います。また参加したいな〜</p>

<h4 id="ミュージカルと私---SHOIs-blog"><a href="https://shoi.hatenadiary.jp/entry/2018/12/03/000000">ミュージカルと私 - SHOI’s blog</a></h4>

<p>好きが詰まってて、自分もミュージカル見に行きたくなりました。諸事情で映画館とか劇場とかに居られない質なのですが、なんとか近いうちに見に行けたらなぁ！</p>

<h4 id="私は沼にハマっていないということを主張しておきたい---はのちゃ爆発"><a href="http://hanocha.hateblo.jp/entry/2018/12/06/011401">私は沼にハマっていないということを主張しておきたい - はのちゃ爆発</a></h4>

<p>沼の住人には二種類いる。沼に浸かっていることを認めている人間と、認めていない人間だ( ｰ`дｰ´)ｷﾘｯ カメラ・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>、オーディオ沼、自作キーボード沼。Tech な沼ですね。</p>

<h4 id="ボドゲ沼に辿り着くまでの紆余曲折---kano-e-no-memo"><a href="http://kano-e.hatenablog.com/entry/2018/12/08/150745">ボドゲ沼に辿り着くまでの紆余曲折 - kano-e no memo</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A1%BC%A5%C9%A5%B2%A1%BC%A5%E0">ボードゲーム</a>は気づいたら増えてるというのがこわいですねー。ホラーですねー。なんでだろー。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B3%A5%F3">マイコン</a>が入り口っていうのがイイですね。世代を感じます。</p>

<h4 id="アドベンチャーゲームはいいぞ核心ネタバレなし---よもやま話β版"><a href="http://beta-chelsea.hatenadiary.jp/entry/2018/12/06/022545">アドベンチャーゲームはいいぞ(核心ネタバレなし) - よもやま話β版</a></h4>

<p>私も "Ib" 大好きなので、サムネ見た瞬間に「あっ！！！」ってなりました。インディーズの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%A5%B2%A1%BC%A5%E0">アドベンチャーゲーム</a>は、（比較的）短時間で面白いストーリーが楽しめるのがいいと思ってます。</p>

<h4 id="2018年に関西で観た歌舞伎の感想--ごひいきに"><a href="https://gohiiki.emma-design.net/2018-kabukireport/">2018年に関西で観た歌舞伎の感想 | ごひいきに</a></h4>

<p>観劇沼二本目、歌舞伎。こちらも各感想から愛を感じました。うちは<a href="https://www.meijiza.co.jp/">明治座</a>が近いのですが、歌舞伎や日本芸能の舞台も一度は見ておきたいものです。</p>

<h4 id="沼完全攻略ガイド---良いあそなすちゃん"><a href="http://asonas.hatenablog.com/entry/2018/12/25/201606">沼完全攻略ガイド - 良いあそなすちゃん</a></h4>

<p>12月8日428時28分に書いてくれました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%BB%B0%B8%B5">大三元</a>とか、エンドゲームの話から、すっごく深くて狭い穴（沼）が大量に点在してる情景が浮かびました。たのしそうですね。</p>

<h4 id="中古ガジェット沼について---どくぴーの備忘録"><a href="http://e10dokup.hateblo.jp/entry/2018/12/09/021901">中古ガジェット沼について - どくぴーの備忘録</a></h4>

<p>同僚のガジェット好き・電子工作好きの人たちから「わかる」「あるある」ってめっちゃ感想もらいました。わかる。</p>

<h4 id="オールドレンズのはなし---タイトルがないとトップページに戻りにくいことに気がついた"><a href="https://uvb-76.hatenablog.com/entry/2018/12/07/172537">オールドレンズのはなし - タイトルがないとトップページに戻りにくいことに気がついた</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>二本目、オールドレンズ。味のあるレンズっていいですよね。昔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%A4%A5%AB%A5%E1%A5%E9">トイカメラ</a>にハマってましたが、ガチのカメラ持ちでこっちのレンズに興味持ち出したら沼に沈んでたかもしれないと思います。</p>

<h4 id="女児アニメを楽しむ---mizukmb"><a href="https://scrapbox.io/mizukmb/%E5%A5%B3%E5%85%90%E3%82%A2%E3%83%8B%E3%83%A1%E3%82%92%E6%A5%BD%E3%81%97%E3%82%80">女児アニメを楽しむ - mizukmb</a></h4>

<p>女児アニメ沼。なぜか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EA%A5%AD%A5%E5%A5%A2">プリキュア</a>とか？と思ってましたが プリ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>シリーズのお話でした。幼女おじさん（なんか並べただけで犯罪臭がする…）の配慮、おつかれさまです。</p>

<h4 id="2018ベスト--jgs---Self-Made-Keyboards-in-Japan"><a href="https://scrapbox.io/self-made-kbds-ja/2018%E3%83%99%E3%82%B9%E3%83%88_%7C_jgs">2018ベスト | jgs - Self-Made Keyboards in Japan</a></h4>

<p>自作キーボード沼二本目。そもそもが "Self-Made Keyboards in Japan"（日本自作キーボード）の <a class="keyword" href="http://d.hatena.ne.jp/keyword/scrapbox">scrapbox</a> での参加…沼感増しますね。TOFU の画像が犯行予告みたいで（？）かっこいい。</p>

<h4 id="沼の三種盛り合わせレシピ---自転車カメラキャンプ---Infinito-Nirone-7"><a href="https://keithyokoma.hatenablog.com/entry/2018/12/15/100000">沼の三種盛り合わせレシピ - 自転車、カメラ、キャンプ - Infinito Nirone 7</a></h4>

<p>沼の相乗効果、あると思います。とくにこの３つの組み合わせはヤバいですね…わかりみ。同じ組み合わせでハマってるひと、自分の近くでも見かけます。</p>

<h4 id="ゲーム音楽の沼---兄貴の伝説---hatena-edition--"><a href="http://mmorita.hatenablog.com/entry/2018/12/16/003805">ゲーム音楽の沼 - 兄貴の伝説 - hatena edition -</a></h4>

<p>目次<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし</a>てすごく沼感ある記事でした。私も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%B2%BB%B3%DA">ゲーム音楽</a>のクラシックコンサートとかライブとか時々聞きに行きます。ゲーム体験と相まって大変良い。自分で演奏までしてるのすごい。</p>

<h4 id="標準ズームがすき---azmins-diary"><a href="http://azmin.hatenablog.com/entry/2018/12/25/072337">標準ズームがすき - azmin's diary</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>三本目。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>は数あれど標準ズームの沼って初めて聞いたかもしれないです。写真かっこいいなぁ。自分も仕舞い込んでる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%A4%A5%C1">デジイチ</a>ひっぱりだしたくなりました。</p>

<h4 id="キーボード沼マップぬまっぷ"><a href="https://blog.ikejima.org/make/keyboard/2018/12/23/keyboard-numa.html">キーボード沼マップ(ぬまっぷ)</a></h4>

<p>ほんとに今年はエンジニア界隈で自作キーボードが一気に広まった年でしたね。自分の身の回りもすごいです。ぬまっぷ見ただけでも広く深いのがよく分かる、おもしろいまとめでした。</p>

<h4 id="将太の寿司について---kasei_sanのブログ"><a href="https://blog.kasei-san.com/entry/2018/12/23/014815">将太の寿司について - kasei_sanのブログ</a></h4>

<p>内容は「ニンジャスレイヤーの動く沼」。忍殺ファン胡乱界隈の皆様が、集団でいろんな沼に浸かりに行く様を私も遠くからたのしく拝見しています。</p>

<h4 id="漫画と私kysnnote"><a href="https://note.mu/kysn/n/n25e0b2765b94">漫画と私｜kysn｜note</a></h4>

<p>漫画沼。実際お仕事でも漫画に関わってるという沼っぷり。エモくてちょっと感動しました。</p>

<h4 id="ベイブレードの話---Bellwood-Works"><a href="https://bellwood-works.hatenablog.com/entry/2018/12/24/000000">ベイブレードの話 - Bellwood Works</a></h4>

<p>冒頭でも触れましたが、いまのおもちゃって進化してますよねぇ。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%A4%A5%D6%A5%EC%A1%BC%A5%C9">ベイブレード</a>は出た当初からベーゴマの進化系として男の子たちの心を鷲掴みにしていたと思いますが、昨今はまたすごいことになってるんですね。</p>

<h3 id="おわりに">おわりに</h3>

<p>はい、というわけで沼をまとめる沼の記事でした。</p>

<p>そろそろ社会人のみなさまはボーナスなんてものの支給もあったのではないかとご推察いたします。楽しい沼クリスマスを。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『オブジェクト指向設計実践ガイド』の読書会をやっています]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/22/191620</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/22/191620"/>
        <updated>2018-12-22T10:16:20.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。入社してからあっという間に8ヶ月が経ちました。</p>

<p>この記事は <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a> の16日目の記事です。(遅くなってごめんなさい…)</p>

<p>15日目は <a href="http://blog.hatena.ne.jp/pokotyamu/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/pokotyamu/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:pokotyamu</a> が <a href="https://pokotyamu.hatenablog.com/entry/2018/12/15/161234">障害対応に強くなりたいのでレポートの書き方について考えてみた</a> を書いてくれました！私も障害対応に強いエンジニアを目指して頑張りやす。</p>

<p>さて、今回は現在弊社で行っている『オブジェクト指向設計実践ガイド』の読書会の紹介をしたいと思います。</p>

<p>ちなみに昨年も読書会は開催されていたようですね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F10%2F27%2F183338" title="『オブジェクト指向設計実践ガイド』を読んで - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2017/10/27/183338">developer.feedforce.jp</a></cite></p>

<p>私個人としては前回の『メタプログラミングRuby』の読書会以来2度目の読書会です！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F07%2F19%2F000000" title="新人エンジニア達がメタプログラミング Ruby の読書感想会をやった話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/07/19/000000">developer.feedforce.jp</a></cite></p>

<h2>で、どんな感じ？</h2>

<h3>ざっくり進め方</h3>

<p>週に一度、参加したいメンバーが集まって毎回1章ずつ進めていきます。(現在第3章まで終了)</p>

<p>その日やる章は読んできている前提で、事前に『気になったこと』『役立ちそうなこと』『疑問に思ったこと』『その他諸々話したいこと』などを付箋に書いてきてもらいます。</p>

<p>それをホワイトボードに貼りながら、みんなであれこれ話し合います。その日の読書会の振り返りも含めて所要時間は1〜1.5時間ぐらいです。</p>

<h3>『オブジェクト指向設計実践ガイド』読書会のホワイトボード</h3>

<p><figure class="figure-image figure-image-fotolife" title="第3章のホワイトボード"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20181220/20181220211224.jpg" alt="f:id:daido1976:20181220211224j:plain" title="f:id:daido1976:20181220211224j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>個人的にすごく好きな第3章のホワイトボード</figcaption></figure></p>

<h3>出てきた話題に個人的な感想を添えて</h3>

<p>先日やって記憶に新しい第3章の話が中心ですが、、、</p>

<h4>なんでもかんでも DI すればいいってもんでもない</h4>

<p>こういう本で出てきたテクニックってすぐプロダクトのコードで使いたくなるけど、何も考えずに DI しまくると、逆に読みづらいコードになるよね、というお話。</p>

<p>本書内でも依存を減らす別解として DI ではなく、以下の <code>Gear#wheel</code> のようにクラス内の別メソッドにインスタンスの作成を切り出す方法も紹介されていましたね。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">Gear</span>
  <span class="synStatement">attr_reader</span> <span class="synConstant">:chainring</span>, <span class="synConstant">:cog</span>, <span class="synConstant">:rim</span>, <span class="synConstant">:tire</span>, <span class="synConstant">:wheel</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(chainring, cog, rim, tire)
    <span class="synIdentifier">@chainring</span> = chainring
    <span class="synIdentifier">@cog</span>       = cog
    <span class="synIdentifier">@rim</span>       = rim
    <span class="synIdentifier">@tire</span>      = tire
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">gear_inches</span>
    ratio * wheel.diameter
  <span class="synPreProc">end</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">wheel</span>
    <span class="synIdentifier">@wheel</span> ||= <span class="synType">Wheel</span>.new(rim, tire)
  <span class="synPreProc">end</span>
<span class="synComment"># ...</span>
</pre>


<p>ちなみに私は DI について Wikipedia で <a href="https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5">依存性の注入</a> のページを10回ぐらい読んでも全然意味がわからなかったのですが、この本を読んですんなり理解が出来ました。</p>

<p>個人的には「Dependency injection (DI)」とか「依存性の注入」とか仰々しい名前があまり好きでないので、初学者に教える機会があれば「インスタンスの作成をクラスの外に切り出すと依存が減っていい感じに書けるよ」と言ってあげようと思います。</p>

<h4>キーワード引数と net/http の話</h4>

<p>第3章の中盤は「引数の順番への依存を取り除く」ための話が数ページに渡って続けられていたのですが、Ruby 2.4 ぐらいからプログラミングを始めたゆとりの私にとっては「ここに書いてあること全部、キーワード引数でよくないすか？？？」という感想でした。</p>

<p>実際大抵の場合はキーワード引数で代替できるという話でしたが、例えば Ruby の標準ライブラリである <a href="https://docs.ruby-lang.org/ja/latest/library/net=2fhttp.html">net/http</a> の <a href="https://docs.ruby-lang.org/ja/latest/class/Net=3a=3aHTTP.html">Net::HTTP クラス</a> だと、引数の数がむちゃくちゃ多いので全部キーワード引数になると辛いよねという話をしていただき、なるほどなーと思いました。</p>

<h4>「知っている」と「依存」は同義</h4>

<p>本書内では「○○を知っているオブジェクト」という言い回しがよく使われますが、オブジェクトが他のオブジェクトについて「知っている」ということは同時にオブジェクト同士が「依存関係にある」ことだ、と明言されており、これはわかりやすいねという話をしました。</p>

<p>よくアプリケーションを開発している時でも、「このクラス (モジュール) が○○を知ってるのって自然かな？」みたいな話が上がるのですが、その観点って大事なんだなと腹落ちしました。</p>

<h3>結論</h3>

<p><strong>『オブジェクト指向設計実践ガイド』めっちゃ勉強になります！！！</strong></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51-TCt0H4UL._SL160_.jpg" class="hatena-asin-detail-image" alt="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方" title="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/">オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Sandi Metz,?山泰基</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/09/02</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/477418361X/hatena-blog-22" target="_blank">この商品を含むブログ (6件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>最後に</h2>

<p>今回は弊社で行っている『オブジェクト指向設計実践ガイド』の読書会の紹介をしました！</p>

<p>それにしても、『オブジェクト指向設計実践ガイド』がたまにプードル本って呼ばれる理由が全然わからなかったのですが、原題が『Practical Object-Oriented Design in Ruby』だから頭文字を取って POODR (プードル) なんですね…！</p>

<p><a href="https://www.poodr.com/">Practical Object-Oriented Design in Ruby</a></p>

<p> <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a>  の17日目は <a href="http://blog.hatena.ne.jp/daikiki/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daikiki/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daikiki</a> の <a href="http://omatsu-daichaso.hatenablog.com/entry/2018/12/17/003212">情熱と強引さが人を巻き込む ~ゴルフで感じた身になる教訓~</a> です！ゴルフの記事かと思ったら公私ともに活かせる「巻き込み力」のお話でした。ゴルフ好きな方もそうでない方もぜひご覧ください！</p>

<p>それでは、またお会いしましょう ＾＾</p>

<p><figure class="figure-image figure-image-fotolife" title="みんなのオブジェクト指向設計実践ガイド (POODR本)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20181220/20181220211616.jpg" alt="f:id:daido1976:20181220211616j:plain" title="f:id:daido1976:20181220211616j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>みんなのオブジェクト指向設計実践ガイド (POODR本)</figcaption></figure></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku の Preboot 機能を深掘りした]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/12/120000</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/12/120000"/>
        <updated>2018-12-12T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>この記事は Heroku Advent Calendar 2018 の 12 日目の記事です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2018%2Fheroku" title="heroku Advent Calendar 2018 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/advent-calendar/2018/heroku">qiita.com</a></cite></p>

<p>昨日は <a href="https://qiita.com/takuchalle">@takuchalle</a> さんの『<a href="https://blog.takuchalle.me/post/2018/12/11/heroku_use_wkhtmltoimage/">Heroku で wkhtmltoimage を使う方法</a>』でした。似たツールの <a href="http://www.paulhammond.org/webkit2png/">webkit2png</a> は使ったことがあります。webkit2png が動作するのは macOS だけですが、<a href="https://wkhtmltopdf.org/">wkhtmltoimage</a> は Windows と Linux でも動作するのですね。へぇー。</p>

<p>先月、Heroku の Preboot 機能を調べる機会がありました。Web 上の日本語記事は Preboot が GA になった 2014 年頃の情報が多く、若干情報が古かったため、2018 年時点の最新の情報をまとめます。</p>

<ul class="table-of-contents">
    <li><a href="#Preboot-機能とは何か">Preboot 機能とは何か</a></li>
    <li><a href="#どのように有効にするのか">どのように有効にするのか</a></li>
    <li><a href="#使用する-Procfile">使用する Procfile</a></li>
    <li><a href="#デプロイによる-heroku-ps-の変化">デプロイによる heroku ps の変化</a></li>
    <li><a href="#デプロイ時の挙動">デプロイ時の挙動</a></li>
    <li><a href="#デプロイ時のログ">デプロイ時のログ</a></li>
    <li><a href="#再起動時の挙動">再起動時の挙動</a></li>
    <li><a href="#再起動時のログ">再起動時のログ</a><ul>
            <li><a href="#Web-dyno-1-台目">Web dyno 1 台目</a></li>
            <li><a href="#Web-dyno-2-台目">Web dyno 2 台目</a></li>
        </ul>
    </li>
    <li><a href="#注意事項">注意事項</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="Preboot-機能とは何か">Preboot 機能とは何か</h2>

<p><a href="https://devcenter.heroku.com/articles/production-check#dyno-redundancy">Production Check > Dyno redundancy</a> に書いてあるとおり、Heroku では冗長性確保のため、本番環境の Web Dyno は 2 台以上が奨励されています。</p>

<blockquote><p>Running at least 2 web dynos for any mission-critical app increases the probability that the app will remain available during a catastrophic event. Multiple dynos are also more likely to run on different physical infrastructure (for example, separate AWS Availability Zones), further increasing redundancy.</p></blockquote>

<p>ただし、それだけだとデプロイや 1 日 1 回の自動再起動で、処理の遅延（<a href="https://devcenter.heroku.com/articles/error-codes#h27-client-request-interrupted">H27 - Client Request Interrupted</a>）や <a href="https://devcenter.heroku.com/articles/error-codes#h28-client-connection-idle">H28 - Client Connection Idle</a> が発生することがあります。</p>

<p>以下のグラフは Dyno Restart のタイミングで H27 と H28 Error が発生している様子です。このグラフはダッシュボードの Metrics から確認できます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181210/20181210191451.png" alt="f:id:masutaka26:20181210191451p:plain" title="f:id:masutaka26:20181210191451p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>これを回避できるのが <a href="https://devcenter.heroku.com/articles/preboot">Preboot</a> 機能です。</p>

<h2 id="どのように有効にするのか">どのように有効にするのか</h2>

<p>Heroku CLI で有効にできます。</p>

<pre class="code console" data-lang="console" data-unlink>$ heroku features:enable preboot -a YOUR_APP_NAME</pre>


<p>有効になりました。簡単ですね。</p>

<pre class="code console" data-lang="console" data-unlink>$ heroku features:info preboot -a YOUR_APP_NAME
=== preboot
Description: Provide seamless web dyno deploys [general]
Docs:        https://devcenter.heroku.com/articles/preboot
Enabled:     true</pre>


<h2 id="使用する-Procfile">使用する Procfile</h2>

<p>今回はこの Procfile を使います。</p>

<pre class="code lang-apache" data-lang="apache" data-unlink>release: bin/rails <span class="synConstant">db</span>:migrate <span class="synConstant">db</span>:seed

<span class="synComment"># Web app</span>
web: bin/rails s -p $PORT -e $RAILS_ENV
worker: PROCESS_TYPE=worker bundle exec sidekiq -C config/sidekiq.yml

<span class="synComment"># Ad app</span>
ad_worker: PROCESS_TYPE=ad_worker bundle exec sidekiq -C config/sidekiq.yml
</pre>


<p><code>web</code>, <code>worker</code>, <code>ad_worker</code> という 3 つの process type を定義しています。今回注目する process type は <code>web</code> だけです。</p>

<p>1 行目で <code>release</code> も定義しているため、デプロイ時には One-Off Dyno<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> で release 処理をしたあと、生成した Slug が Dyno に展開されていきます。</p>

<h2 id="デプロイによる-heroku-ps-の変化">デプロイによる heroku ps の変化</h2>

<p>それでは <code>$ watch 'heroku ps -a YOUR_APP_NAME'</code> しつつ、デプロイの様子を観察していきましょう。macOS では watch コマンドは <code>$ brew install watch</code> 等でインストール出来ます。</p>

<p>Web Dyno 1 台の場合、release Dyno の実行が終わると、web.1 Dyno のステータスが up → starting → up と変化します。starting 中にリクエストがあると、クライアントは待たされ、前述の H27 や H28 Error が発生します。</p>

<p><figure class="figure-image figure-image-fotolife" title="Web Dyno 1 台でデプロイした様子"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131034.gif" alt="f:id:masutaka26:20181211131034g:plain" title="f:id:masutaka26:20181211131034g:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Web Dyno 1 台でデプロイした様子</figcaption></figure></p>

<p>Web Dyno 2 台かつ Preboot 無効でも、基本的に同じです。2 台同時に up → starting → up と変化します。</p>

<p><figure class="figure-image figure-image-fotolife" title="Web Dyno 2 台かつ Preboot 無効でデプロイした様子"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131128.gif" alt="f:id:masutaka26:20181211131128g:plain" title="f:id:masutaka26:20181211131128g:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Web Dyno 2 台かつ Preboot 無効でデプロイした様子</figcaption></figure></p>

<p>Web Dyno 2 台かつ Preboot を有効にすると、期待した通り、1 台ずつ up → starting → up に<strong>なりませんでした・・・！あれ？</strong></p>

<p><figure class="figure-image figure-image-fotolife" title="Web Dyno 2 台かつ Preboot 有効でデプロイした様子"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211133556.gif" alt="f:id:masutaka26:20181211133556g:plain" title="f:id:masutaka26:20181211133556g:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Web Dyno 2 台かつ Preboot 有効でデプロイした様子</figcaption></figure></p>

<blockquote><ul>
<li>Logs will show new dynos starting soon after the slug compile is finished. The output of <code>heroku ps</code> will immediately show the state (for example, <code>starting</code> or <code>up</code>) of the new dynos. Old dynos are still running but won’t appear in <code>heroku ps</code>.</li>
</ul>
</blockquote>

<p><a href="https://devcenter.heroku.com/articles/preboot">Preboot のドキュメント</a>によると、heroku ps では確認できないようです。ただしログでは確認できるそう。</p>

<h2 id="デプロイ時の挙動">デプロイ時の挙動</h2>

<blockquote><ul>
<li>Approximately 3 minutes after the deploy completes (or 2 minutes after your app’s boot timeout limit, which defaults to 1 minute), HTTP requests will start routing to the new dynos and simultaneously stop routing to the old dynos.</li>
</ul>
</blockquote>

<p>遅くともデプロイ完了から約 3 分後、もしくはアプリケーションの起動タイムアウトリミット 2 分（デフォルトは 1 分）後、HTTP リクエストは新 Dyno に Routing されるそうです。</p>

<blockquote><ul>
<li>Shortly after the new dynos are fully live and serving user requests, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</li>
</ul>
</blockquote>

<p>新 Dyno が完全に起動し、ユーザリクエストを処理するとすぐに、旧 Dyno はシャットダウンされるようです。これもログで確認可能とのこと。</p>

<p>では実際にログを見てみましょう。</p>

<h2 id="デプロイ時のログ">デプロイ時のログ</h2>

<p>git push 後まもなく、Web dyno の状態が <code>up</code> から <code>starting</code> に変わりました。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 14:58:51 heroku[web] notice Restarting
Nov 28 14:58:51 heroku[web] notice State changed from up to starting
Nov 28 14:58:51 heroku[web] notice Restarting
Nov 28 14:58:51 heroku[web] notice State changed from up to starting</pre>


<p>新 Web dyno 2 台で Puma (Web server) がそれぞれ起動を開始しました。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 14:59:17 heroku[web] notice Starting process with command `bin/rails s -p 24256 -e production`
Nov 28 14:59:19 heroku[web] notice Starting process with command `bin/rails s -p 15417 -e production`
Nov 28 14:59:21 app[web] info [heroku-exec] Starting
Nov 28 14:59:22 app[web] info [heroku-exec] Starting
Nov 28 14:59:31 app[web] info =&gt; Booting Puma
Nov 28 14:59:31 app[web] info =&gt; Rails 5.2.1 application starting in production
Nov 28 14:59:31 app[web] info =&gt; Run `rails server -h` for more startup options
Nov 28 14:59:32 app[web] info =&gt; Booting Puma
Nov 28 14:59:32 app[web] info =&gt; Rails 5.2.1 application starting in production
Nov 28 14:59:32 app[web] info =&gt; Run `rails server -h` for more startup options</pre>


<p>Web dyno の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 14:59:33 heroku[web] notice State changed from starting to up
Nov 28 14:59:34 heroku[web] notice State changed from starting to up</pre>


<p>新 Web dyno 1 台で Puma が起動しきりました。問題はありませんが、手元で起動するよりずいぶん遅い気がします。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 15:02:03 app[web] info Puma starting in single mode...
Nov 28 15:02:03 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas
Nov 28 15:02:03 app[web] info * Min threads: 11, max threads: 11
Nov 28 15:02:03 app[web] info * Environment: production
Nov 28 15:02:03 app[web] info * Listening on tcp://0.0.0.0:24256
Nov 28 15:02:03 app[web] info Use Ctrl-C to stop</pre>


<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 3 分とあるため合っています。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 15:02:19 heroku[web] notice Stopping all processes with SIGTERM
Nov 28 15:02:19 app[web] info Gracefully stopping, waiting for requests to finish
Nov 28 15:02:19 app[web] info === puma shutdown: 2018-11-28 06:02:19 +0000 ===
Nov 28 15:02:19 app[web] info Goodbye!
Nov 28 15:02:19 app[web] info Exiting
Nov 28 15:02:19 heroku[web] notice Process exited with status 143</pre>


<p>もうひとつの旧 Web dyno 1 台で Puma が終了しました。これも意訳のとおりです。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 15:03:25 heroku[web] notice Stopping all processes with SIGTERM
Nov 28 15:03:25 app[web] info Gracefully stopping, waiting for requests to finish
Nov 28 15:03:25 app[web] info === puma shutdown: 2018-11-28 06:03:25 +0000 ===
Nov 28 15:03:25 app[web] info Goodbye!
Nov 28 15:03:25 app[web] info Exiting
Nov 28 15:03:25 heroku[web] notice Process exited with status 143</pre>


<p>もうひとつの新 Web dyno 1 台で Puma が起動しきりました。<code>Booting Puma</code> からずいぶんと時間がかかりました。</p>

<pre class="code" data-lang="" data-unlink>Nov 28 15:05:08 app[web] info Puma starting in single mode...
Nov 28 15:05:08 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas
Nov 28 15:05:08 app[web] info * Min threads: 11, max threads: 11
Nov 28 15:05:08 app[web] info * Environment: production
Nov 28 15:05:08 app[web] info * Listening on tcp://0.0.0.0:15417
Nov 28 15:05:08 app[web] info Use Ctrl-C to stop</pre>


<p>Puma の起動に時間がかかるのは謎ですが、Preboot のドキュメントと相違ないと理解しました。</p>

<h2 id="再起動時の挙動">再起動時の挙動</h2>

<p>再起動時の挙動も確認します。</p>

<p>Heroku ではアプリケーションの健全性を維持するため、<a href="https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts">Dyno は 1 日に 1 回、自動的に再起動します</a>。Dyno は差し替えられるため、ローカルファイルシステムの変更はすべて破棄されます。</p>

<blockquote><p>The new dynos will start receiving requests as soon as it binds to its assigned port. At this point, both the old and new dynos are receiving requests.</p></blockquote>

<p>新 Dyno は割り当てられたポートにバインドされると、すぐにリクエストを受信し始めます。この時点で、新旧の Dyno がリクエストを受信するそう。</p>

<blockquote><p>Approximately 4 to 6 minutes after the restart is invoked, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</p></blockquote>

<p>再起動が行われてから、約 4~6 分後に旧 Dyno がシャットダウンされるようです。これもログで確認可能とのこと。</p>

<p>Preboot が GA になった 2014 年頃は、まだ 1 日 1 回の再起動には対応していないようでした。現在は対応しているようです。</p>

<h2 id="再起動時のログ">再起動時のログ</h2>

<p>結論から書くと、1 台目が再起動し終えてから 2 台目が再起動していました。再起動においても、ドキュメントの通りに Preboot が機能しているようです。</p>

<h3 id="Web-dyno-1-台目">Web dyno 1 台目</h3>

<p>Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 11:41:22 heroku[web] notice Cycling
Nov 30 11:41:22 heroku[web] notice State changed from up to starting</pre>


<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 11:41:42 heroku[web] notice Starting process with command `bin/rails s -p 32434 -e production`
Nov 30 11:41:44 app[web] info [heroku-exec] Starting
Nov 30 11:41:50 app[web] info =&gt; Booting Puma
Nov 30 11:41:50 app[web] info =&gt; Rails 5.2.1.1 application starting in production
Nov 30 11:41:50 app[web] info =&gt; Run `rails server -h` for more startup options</pre>


<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 11:41:51 heroku[web] notice State changed from starting to up</pre>


<p>新 Web dyno 1 台で Puma が起動しきりました。相変わらず時間がかかります。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 11:45:45 app[web] info Puma starting in single mode...
Nov 30 11:45:45 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas
Nov 30 11:45:45 app[web] info * Min threads: 11, max threads: 11
Nov 30 11:45:45 app[web] info * Environment: production
Nov 30 11:45:45 app[web] info * Listening on tcp://0.0.0.0:32434
Nov 30 11:45:45 app[web] info Use Ctrl-C to stop</pre>


<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 4~6 分後とありましたが、間を置かずに終了しました。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 11:45:55 heroku[web] notice Stopping all processes with SIGTERM
Nov 30 11:45:56 app[web] info Gracefully stopping, waiting for requests to finish
Nov 30 11:45:56 app[web] info === puma shutdown: 2018-11-30 02:45:55 +0000 ===
Nov 30 11:45:56 app[web] info Goodbye!
Nov 30 11:45:56 app[web] info Exiting
Nov 30 11:45:56 heroku[web] notice Process exited with status 143</pre>


<h3 id="Web-dyno-2-台目">Web dyno 2 台目</h3>

<p>もうひとつの Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。14 分くらい差があります。<a href="https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts">最大 216 分のランダムな差がある</a>ようなので、記載通りです。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 12:00:41 heroku[web] notice Cycling
Nov 30 12:00:41 heroku[web] notice State changed from up to starting</pre>


<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 12:00:59 heroku[web] notice Starting process with command `bin/rails s -p 16965 -e production`
Nov 30 12:01:01 app[web] info [heroku-exec] Starting
Nov 30 12:01:08 app[web] info =&gt; Booting Puma
Nov 30 12:01:08 app[web] info =&gt; Rails 5.2.1.1 application starting in production
Nov 30 12:01:08 app[web] info =&gt; Run `rails server -h` for more startup options</pre>


<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 12:01:10 heroku[web] notice State changed from starting to up</pre>


<p>新 Web dyno 1 台で Puma が起動しきりました。今回は時間がかかりませんでした。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 12:01:15 app[web] info Puma starting in single mode...
Nov 30 12:01:15 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas
Nov 30 12:01:15 app[web] info * Min threads: 11, max threads: 11
Nov 30 12:01:15 app[web] info * Environment: production
Nov 30 12:01:15 app[web] info * Listening on tcp://0.0.0.0:16965
Nov 30 12:01:15 app[web] info Use Ctrl-C to stop</pre>


<p>旧 Web dyno 1 台で Puma が終了しました。今度は時間がかかりました。前述の意訳では約 4~6 分後とあるため合っています。</p>

<pre class="code" data-lang="" data-unlink>Nov 30 12:05:14 heroku[web] notice Stopping all processes with SIGTERM
Nov 30 12:05:14 app[web] info Gracefully stopping, waiting for requests to finish
Nov 30 12:05:14 app[web] info === puma shutdown: 2018-11-30 03:05:14 +0000 ===
Nov 30 12:05:14 app[web] info Goodbye!
Nov 30 12:05:14 app[web] info Exiting
Nov 30 12:05:14 heroku[web] notice Process exited with status 143</pre>


<h2 id="注意事項">注意事項</h2>

<p>Preboot を有効にしてデプロイすると、無効時よりも時間をかけて Dyno が差し替わります。全ての Dyno に反映されるまで数分かかることもあるようです。この点はチームで把握しておく必要があります。</p>

<p>最大 3 分間、新旧の Dyno が重複するため、Add-on の同時接続数の制限に達する可能性があります。Heroku Postgres の場合は <a href="https://github.com/heroku/heroku-buildpack-pgbouncer">pgbouncer buildpack</a> を使うことが奨励されています。</p>

<p>新旧の Dyno が混在することにより、一度のデプロイで DB schema とアプリケーションコードを変更すると、不具合が発生する可能性があります。Preboot 機能を一旦無効にすることを勧めています。でも、Procfile に <code>release</code> process type を定義していれば同じなので、個人的には気にならないですね。</p>

<p>Preboot 機能を使うためには、<strong>Dyno type が Standard-1X 以上</strong>である必要があります。Dyno type が <code>Free</code> と <code>Hobby</code> では Preboot を有効に出来ません。</p>

<p><strong>Preboot が適用されるのは Web Dyno だけ</strong>です。自分で定義した <code>worker</code> Dyno 等は対象外です。</p>

<h2 id="まとめ">まとめ</h2>

<p>Heroku の Preboot 機能を深掘りし、有効にする必要性を理解しました。</p>

<ul>
<li>Web Dyno を 2 台以上にしたら Preboot を有効にすると良さそう</li>
<li>前述の「注意事項」には留意したほうが良い</li>
</ul>


<p>しかし、こんなに長い記事になるとは...。</p>

<p>明日の <a href="https://qiita.com/advent-calendar/2018/heroku">heroku Advent Calendar 2018</a> はまたまた <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。Bitbar の便利な Heroku plugin を紹介してくれるみたいです。お楽しみに。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>このような使い捨ての Dyno を <a href="https://devcenter.heroku.com/articles/one-off-dynos">One-Off Dyno</a> と呼びます。heroku run で使われる Dyno もそうです。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[まだ .rubocop_todo.yml で消耗してるの？]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/05/140000</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/05/140000"/>
        <updated>2018-12-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>若干釣り臭いタイトルですが、先日 <a href="https://github.com/ryz310/rubocop_challenger">RubocopChallenger</a> という gem の <code>v1.0.0</code> をリリースしたので紹介させて頂きます 🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger" title="ryz310/rubocop_challenger" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger">github.com</a></cite></p>

<h2>経緯</h2>

<p>僕が所属している <a href="https://socialplus.jp/">ソーシャルPLUS</a> は 2012 年頃から開発が始まりました。Rails のプロダクトとしては古株の方だと思います。</p>

<p>ソーシャルPLUS に <a href="https://github.com/rubocop-hq/rubocop">RuboCop</a> が導入されたのは 2017/02 頃 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> で、それまで特に RuboCop を意識したコードで開発を進めてこなかったので、巨大な .rubocop_todo.yml が出力され、それが手付かずのままになってしまっていました。ちなみに当初は <strong>1669 行 195 種類</strong> の違反ルールがありました。</p>

<p>このままでは RuboCop の恩恵が受けられないので、 RuboCop Challenge と称して (以前 <a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%A4%E3%82%B9%E3%83%BB%E3%83%90%E3%82%B1%E3%83%84%E3%83%BB%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8">Ice Bucket Challenge</a> が流行っていたので) 週イチで <code>.rubocop_todo.yml</code> から違反ルールを一つ消して、 auto-correct で修正する、という事をやっていたのですが、数ヶ月（数週間だったかも）ですっかりやるのを忘れてしまいました 😇</p>

<p>最近また RuboCop Challenge を再開しよう、という流れになったのですが、手動でコツコツやるのも精神的にしんどくなって来たので、なんとか自動化したいな、という気持ちになり、手動でやっていた Rubocop Challenge を Ruby スクリプトで動かせるようにしました。
最初は単純な Ruby スクリプトだったのですが、せっかくなので gem 化しよう、という事になり、作成したのが RubocopChallenger です。</p>

<p>ところで、弊社エンジニアの <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> が circleci-bundle-update-pr という CI を利用した Bundle Update の自動更新 gem を作成しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmasutaka%2Fcircleci-bundle-update-pr" title="masutaka/circleci-bundle-update-pr" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/masutaka/circleci-bundle-update-pr">github.com</a></cite></p>

<p>これに感銘を受けて (？) 自分の RubocopChallenger も CI から<code>$ rubocop --auto-correct</code> を実行した結果が PR として届くような仕組みになっています。</p>

<h2>使い方</h2>

<h3>1. Gemfile に <code>rubocop_challenger</code> を追加</h3>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>gem <span class="synSpecial">'</span><span class="synConstant">rubocop_challenger</span><span class="synSpecial">'</span>, <span class="synConstant">group</span>: <span class="synConstant">:development</span>, <span class="synConstant">require</span>: <span class="synConstant">false</span>
</pre>


<h3>2. GitHub personal access token の作成</h3>

<p>RubocopChallenger が PR を作成するために GitHub personal access token が必要になります。
<a href="https://github.com/settings/tokens">Settings</a> から <a href="https://github.com/settings/tokens/new">Generate new token</a> をクリックして access token を作成します。
<strong>Select Scopes</strong> では <code>repo</code> にチェック ✅ を入れて下さい。</p>

<p><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/generate_token.png" alt="Generate new token" /></p>

<h3>3. CircleCI で環境変数の設定</h3>

<p>今回は <a href="https://circleci.com/">CircleCI</a> での利用例を紹介します 🙏</p>

<p><a href="https://circleci.com/dashboard">ダッシュボード画面</a> に移動し、 RubocopChallenger を適用したいアプリケーションの <strong>Project Settings</strong> -> <strong>Environment Variables</strong> へと移動します。
<strong>Add Variable</strong> をクリックして <code>GITHUB_ACCESS_TOKEN</code> という Key で先程作成した GitHub personal access token を設定します。</p>

<p><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/circleci_environment_variables.png" alt="Environment Variables" /></p>

<h3>4. <code>.circleci/config.yml</code> の編集</h3>

<p>以下に設定例を紹介します。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .circleci/config.yml</span>
<span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">rubocop_challenge</span><span class="synSpecial">:</span>
    <span class="synIdentifier">docker</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">image</span><span class="synSpecial">:</span> circleci/ruby:2.5-node-browsers
    <span class="synIdentifier">working_directory</span><span class="synSpecial">:</span> ~/repo
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>checkout
      <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span>
          <span class="synIdentifier">name</span><span class="synSpecial">:</span> Rubocop Challenge
          <span class="synIdentifier">command</span><span class="synSpecial">:</span> |
            bundle install
            bundle exec rubocop_challenger go \
              --email={RubocopChallenger が commit する際の user email} \
              --name=&quot;{RubocopChallenger が commit する際の user name}&quot;

<span class="synIdentifier">workflows</span><span class="synSpecial">:</span>
  <span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

  <span class="synIdentifier">nightly</span><span class="synSpecial">:</span>
    <span class="synIdentifier">triggers</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">schedule</span><span class="synSpecial">:</span>
          <span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;30 23 * * 1,2,3&quot;</span><span class="synComment"> # この設定の場合、火水木 の毎朝 8:30 に RubocopChallnger の PR が届きます</span>
          <span class="synIdentifier">filters</span><span class="synSpecial">:</span>
            <span class="synIdentifier">branches</span><span class="synSpecial">:</span>
              <span class="synIdentifier">only</span><span class="synSpecial">:</span>
                <span class="synStatement">- </span>master
    <span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>rubocop_challenge
</pre>


<h3>5. 作成された PR の確認</h3>

<p>ここまでの手順を終えると、 CircleCI に指定したスケジュールで PR がされるようになると思います。
後は auto-correct の内容を確認して、 merge するだけです。</p>

<p>中には適用したくないルールも出てくると思いますが、その場合は <code>.rubocop.yml</code> にルールを再定義して auto-correct されないようにします。</p>

<h2>どんな PR が作成されるのか？</h2>

<p>ちょっと RubocopChallenger のバージョンが古い頃の物ですが、 <a href="https://github.com/ryz310/rubocop_challenger/pull/97">以下のような PR</a> が自動的に作成されます。</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/pull/97"><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/rubocop_challenge.png" alt="RubocopChallnge" /></a></p>

<p>デフォルトの設定では、 <code>.rubocop_todo.yml</code> の中から <strong>Cop supports --auto-correct</strong> かつ <strong>Offense count が最大</strong> のルールを消して、 auto-correct した結果が PR として作成されます。</p>

<p>また、 auto-correct の後で <code>$ rubocop --auto-gen-config</code> を実行して <code>.rubocop_todo.yml</code> を再作成しています。 RuboCop のバージョンが変わった時とかに <code>.rubocop_todo.yml</code> に出力される内容も若干変わっていたりするのですが、毎回最新の状態に作り直してくれるのがちょっと便利だったりします。</p>

<p>ちなみに PR の <strong>Description</strong> に表示されている内容は <a href="https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/AlignHash">本家 RuboCop の RubyDoc</a> に記載されている内容と同じものです。これを表示するのに地味に苦労しました 😓</p>

<h2>高度な設定</h2>

<p>RubocopChallnger にはいくつかオプションが用意されているので、ご紹介します。</p>

<h3><code>--mode</code></h3>

<p>上述の通り、デフォルトでは auto-correct の対象は <strong>Cop supports --auto-correct</strong> かつ <strong>Offense count が最大</strong> のルールが選択されますが、 <code>mode</code> に渡す値によって対象を変更することが出来ます。</p>

<ul>
<li><code>most_occurrence</code> (デフォルト)

<ul>
<li><strong>Offense count が最大</strong> のルールを選択する</li>
</ul>
</li>
<li><code>least_occurrence</code>

<ul>
<li><strong>Offense count が最小</strong> のルールを選択する</li>
</ul>
</li>
<li><code>random</code>

<ul>
<li>全体からランダムに選択する</li>
</ul>
</li>
</ul>


<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--mode=random</span> 
</pre>


<h3><code>--labels</code></h3>

<p>RubocopChallnger が作成する PR に付与される label を指定します。デフォルトでは <strong>rubocop challenge</strong> というラベルが付与されます。
ソーシャルPLUS では <a href="https://waffle.io/">waffle.io</a> を利用していたりするのですが、レビュー待ち状態の label を付与するようにすると見落としがなくて便利です。</p>

<p><strong>スペース区切り</strong>で複数指定することが出来ます。</p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--labels=</span><span class="synStatement">&quot;</span><span class="synConstant">rubocop challenge</span><span class="synStatement">&quot;</span> <span class="synStatement">&quot;</span><span class="synConstant">in progress</span><span class="synStatement">&quot;</span>
</pre>


<h3><code>--template</code></h3>

<p>作成される PR をカスタマイズしたい場合などあるかと思います。
その場合は template に erb ファイルのパスを指定することが可能です。</p>

<p>デフォルトでは以下のテンプレートが使用されるので、必要に応じてカスタマイズしてご利用下さい 🙏</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/blob/master/lib/templates/default.md.erb">https://github.com/ryz310/rubocop_challenger/blob/master/lib/templates/default.md.erb</a></p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--template=./path/to/template.md.erb</span>
</pre>


<h3><code>--no-regenerate-rubocop-todo</code></h3>

<p>上述の通り、デフォルトでは auto-correct の後で <code>$ rubocop --auto-gen-config</code> を実行して .rubocop_todo.yml を再作成しています。これが不要な場合は no-regenerate-rubocop-todo オプションを指定します。</p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--no-regenerate-rubocop-todo</span>
</pre>


<h2>既知の不具合 <strong>(v1.2.0 で解消済み)</strong></h2>

<p>RuboCop のルールの中には <strong>Cop supports --auto-correct</strong> と表記されているにも関わらず、部分的にしか auto-correct してくれないものがあります。
例えば <code>Style/Semicolon</code> が auto-correct できるのは行末に <code>;</code> が存在する場合だけのようです。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>puts <span class="synSpecial">'</span><span class="synConstant">hoge</span><span class="synSpecial">'</span>; <span class="synComment"># =&gt; auto-correct される</span>
puts <span class="synSpecial">'</span><span class="synConstant">fuga</span><span class="synSpecial">'</span>; puts <span class="synSpecial">'</span><span class="synConstant">piyo</span><span class="synSpecial">'</span> <span class="synComment"># =&gt; auto-correct されない</span>
</pre>


<p>このようなルールが auto-correct 対象に選ばれると、RubocopChallenger を実行した後も違反が解決されず、後続の <code>$ rubocop --auto-gen-config</code> で再度 <code>.rubocop_todo.yml</code> に対象ルールが出てきてしまうので、 RubocopChallenger が機能しない状態になってしまいます。
現状では <code>Style/Semicolon</code> のようなルールに遭遇した場合は、手動で <code>.rubocop.yml</code> にルールを移動させる必要があります。
<del>今のところ RubocopChallenger 側での対策を思い付いていないので、もし良いアイデアがありましたら教えて下さい 🙏</del></p>

<p><strong>2019/03/26 追記</strong></p>

<p>RubocopChallenger v1.2.0 で Ignore リスト機能が追加されました。
RubocopChallenger を実行した後も違反が解決されず、後続の <code>$ rubocop --auto-gen-config</code> で再度 <code>.rubocop_todo.yml</code> に対象ルールが出てきてしまった場合、 <code>.rubocop_challenger.yml</code> というファイルが作成され、対象ルールが Ignore リストに追加されます。
Ignore リストに追加されたルールは次回以降、 RubocopChallenger の対象ルールとして選択されなくなるので、特に何もしなくとも運用を続けることが可能となります。</p>

<h2>最後に</h2>

<p>当初は <strong>1669 行 195 種類</strong> の違反ルールが .rubocop_todo.yml に存在していましたが、 RubocopChallenger を導入してから 3 ヶ月で <strong>1187 行 132 種類</strong> まで減らすことが出来ました。 auto-correct 可能な違反ルールはあと 62 種類残っているので、あと半分くらいまでは減らすことができそうです。</p>

<p>本記事では肥大化してしまった .rubocop_todo.yml を自動的に修正していく RubocopChallnger を紹介し、導入方法について解説させて頂きました。 .rubocop_todo.yml が肥大化して困っているプロジェクトで役立てて頂ければ幸いです 🙏</p>

<p>また、利用してみてフィードバックなどあれば <a href="https://github.com/ryz310/rubocop_challenger/issues">Issue</a> にてご連絡下さい。 GitHub では頑張って拙い英語を書くようにしていますが、日本語でも大丈夫です 🙆 PR も大歓迎です。どうぞ宜しくお願い致します 🙇</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>ちなみに導入したのは自分です<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内では開発チームマネージャーを名乗っています]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/05/110000</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/05/110000"/>
        <updated>2018-12-05T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんばんちわ、 <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>こと玉田です。</p>

<p>この記事は <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a> の 5 日目の記事です。昨日は dfplus.io ブログ担当 1 号こと <a href="https://adventar.org/users/21688">id:tgacky</a> さんによる『<a href="https://blog.dfplus.io/entry/news/20181204">2歳になった dfplus.io 成長の記録</a>』でした。<a href="https://dfplus.io/">dfplus.io</a> 3 年目突入おめでとうございます🎉</p>

<p>さて今回は予告どおり、たまには真面目に自分の仕事について書いてみたいと思います。</p>

<h2>所属と経歴</h2>

<p>インターネット上では本業：光の戦士<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、散財部風紀取り乱し委員わいわい係として、おおむね tmd45 という ID で存在しています。</p>

<p>ふざけたプロフィール（気に入ってます）ですが、現実のフィードフォース社内ではプロダクト『<a href="https://socialplus.jp/">ソーシャルPLUS®</a>』の "<b>開発チームマネージャー</b>" を名乗っています。<br>
<span style="color: #cccccc">注追記: 自分の場合、役職ではないので外向けにはマネージャーではなくリーダーとなっています。</span></p>

<p>フィードフォースは社歴 2 社目で今年で勤続 5 年になりました。プロダクトが複数ある弊社内では珍しく（？）この 5 年間ずっとソーシャルPLUS 一筋にやっています。あんまりひとつのプロダクトに古参が長くいるのも良くはないんですが、今回そこは置いておいてもらって…</p>

<h2>フィードフォースの組織とマネジメント</h2>

<p>弊社の組織としての取り組みは、以下の記事が詳しいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.hito-link.jp%2Fmedia%2Finterview%2Ffeedforce" title="1on1、OKR、ノーレイティング…なぜ、フィードフォースは新しい施策に挑戦し続けられるのか？" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.hito-link.jp/media/interview/feedforce">www.hito-link.jp</a></cite></p>

<p>また、以前このブログでも取り上げた「キャリアパス」という仕組みを用いているのですが</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F24%2F180000" title="デザイナーのキャリアパスを見直している話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/10/24/180000">developer.feedforce.jp</a></cite></p>

<p>現在エンジニアのキャリアパスは以下の３つに分けられています。</p>

<ul>
<li>エンジニアリング志向エンジニア（技術プロフェッショナル志向）</li>
<li>マネジメント志向エンジニア</li>
<li>ビジネス志向エンジニア</li>
</ul>


<p>各エンジニアがどの志向であっても、その価値が認められるよう それぞれに ジュニア ～ エキスパート の 4 段階（さらに内側で 2 段階に分かれるので実際には 8 段階ある）をもって、求められるスキルと行動特性を定義しています。</p>

<p>キャリアパスが定められる前、所属 4 年目くらいでいわゆる「リーダー職」として（端的に言えば管理職手当が付く）開発チームリーダーをやっていました。キャリアパスが作られてからは「マネジメント志向エンジニア」を選び、それを基準に目標を定めたり評価してもらったりしています。</p>

<h2>ソーシャルPLUS チームの構成</h2>

<p>いまこの記事を書きながら初めてきちんと調べましたが、<a href="https://www.feedforce.jp/release/637/">ソーシャルPLUS のリリースは 2012 年 4 月 17 日</a>とのことで、6 年半も続いているサービスです。自分が参加してからの 5 年でも、チームメンバーや人数、その構成は様々に変化してきました。</p>

<p>現在は非エンジニアのプロダクトマネージャーが統括し、ビジネスチームと開発チームがそれぞれに仕事をしています。</p>

<p><figure class="figure-image figure-image-fotolife" title="ソーシャルPLUSチーム構成（概要）図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181204/20181204224143.png" alt="&#x30BD;&#x30FC;&#x30B7;&#x30E3;&#x30EB;PLUS&#x30C1;&#x30FC;&#x30E0;&#x69CB;&#x6210;&#xFF08;&#x6982;&#x8981;&#xFF09;&#x56F3;" title="f:id:tmd45:20181204224143p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ソーシャルPLUSチーム構成（概要）図</figcaption></figure></p>

<p>自分（水色の人影）は開発チームの一員ですが、プロダクトの経験年数が長いことや、マネジメント志向であることで「チームマネジメント」を担っています。</p>

<p>現在のエンジニアの人数は自分を含め８名です。自分が "チームマネージャー" を名乗って意識しているのは、8 人のメンバーが<strong>チームとしてより良く力を発揮しながらイイ雰囲気で仕事をしたい</strong>、ということです。技術ももちろん好きですし、ソーシャルPLUS というプロダクトに強い思い入れも理想もありますが、それでも自分が一番放っておけないのがソコだったという感じです。</p>

<h2>開発チームマネージャーとしてやっていること</h2>

<p>かんたんにまとめると以下のようなことをやってます。すべてが上手くいってるわけじゃなくて、試行錯誤しながらだけど、自分のお気持ちを中心に書いてます。</p>

<h3>プロダクトマネージャーとエンジニアメンバー間の緩衝材</h3>

<p>衝突というと語弊がありますが「あ、ちょっと説明足りないな」みたいなところを双方に補足したりしてます。</p>

<p>エンジニアメンバー同士でもそういうことはあるので、心理的安全性の確保とも言えるかも。</p>

<h3>プロダクト開発の優先度の最終決定</h3>

<p>たいていのものはプロダクトオーナーとチームで話し合って決めますが、これといった決め手に欠けるものには自分が <del>経験と勘で</del> 決めたりします。</p>

<h3>プロダクト開発チームメンバーとの 1on1</h3>

<p>月初に 1 回、チームのエンジニア全員（7 名）と 30 分ずつ話しています。社内の 1on1 のなかでは頻度は低いほうですね。</p>

<p>事前に以下の項目をアンケートで答えてもらい、それを確認しながら雑談しています。</p>

<ul>
<li>前月でやったこと・わかったこと（YW）</li>
<li>前月の自分のパフォーマンス（1 ～ 5 選択＋コメント）</li>
<li>今月やろうと思うこと（T）</li>
<li>チームやプロダクトについて（1 ～ 5 選択＋コメント）</li>
<li>会社について（1 ～ 5 選択＋コメント）</li>
<li>その他 自由欄</li>
</ul>


<p>「プロダクトの開発」に関することを中心に、会社のことも含め割と広範囲に話しています。チームメンバーのお気持ち確認とか、各々の体調だったり生活だったりの少しプライベートなことを聞かせてもらうこともあります。個別に相談されることでも、コトによっては「You それチームに言ってみな Yo! (σゝ∀・)σ」とチームの問題にしてもらったり（たいていは週一でやっている振り返りKPTで出してもらいます）。開発マネジメント定例というマネージャーが集まる定例にエスカレーションして、もっと広い範囲で解決を試みたりもします。</p>

<p>気をつけてるつもりでも、自分がおしゃべりな質なのでこちらが喋りすぎている気はします。毎度反省。けど 1on1 やってよかった、というフィードバックをちょくちょくもらえてるので私もありがたいです。</p>

<h3>プロダクト開発チームミーティングの司会進行</h3>

<p>上の緩衝材の話とも関連してますが、ミーティングの雰囲気づくりも兼ねてるので司会進行業は自分がやることが多いです。</p>

<p>とはいえ、自分が居ないと定例が進まないというのも問題なので、ここは逆になんとかしておきたい状況です。</p>

<h3>プロダクト開発の落ち穂拾い</h3>

<p>計画しているタスク以外にも、毎日いろんなことが起こります。</p>

<p>落ち穂拾いといっても、全部私が片付けているというわけではなく、メンバーの状況を見てタスクとしてお願いするということもします。</p>

<p>拾いにくい落ち穂を拾う、というのが正しいかも。拾いやすいもの（それも人によって違う）は自主的に拾ってくれるメンバーなので、助かってます。</p>

<h2>おわり</h2>

<p>他にもいろいろやってることがあるんですが、なかなか文章にするのが難しいですね。今回はこのへんで。</p>

<p>明日の <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a> は <a href="https://adventar.org/users/21767">id:funesan2</a> による『煮る！』お話です。いったい何を煮たのか…おたのしみに！</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>オンラインMMORPG『<a href="https://jp.finalfantasyxiv.com/">FINAL FANTASY XIV</a>』のプレイヤーの意<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[インク沼に足首らへん？まで浸かっている話]]></title>
        <id>https://blog.tmd45.jp/entry/2018/12/01/000000</id>
        <link href="https://blog.tmd45.jp/entry/2018/12/01/000000"/>
        <updated>2018-11-30T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> の 1 日目の記事です。ご参加予定の皆さまありがとうございます。</p>

<p>こちらは自分が浸かってる沼について語りつつ、他の沼を覗いてみようみたいな趣旨のゆるい Advent Calendar です。まだ空きもたくさんありますので、お気軽にご参加ください。</p>

<p>ここで言う「沼」とは、以下のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%E9%A5%F3%A5%B0">スラング</a>としての沼を指します。</p>

<blockquote><p>あるジャンルが好きになり過ぎてハマってしまい抜け出せなくなること。沼落ち。</p></blockquote>

<p>さっそく私が最近ハマり始めた沼のお話です。</p>

<ul class="table-of-contents">
    <li><a href="#万年筆インク沼">万年筆インク沼</a><ul>
            <li><a href="#これから始めてみたい人へのおすすめ万年筆">これから始めてみたい人へのおすすめ万年筆</a><ul>
                    <li><a href="#PILOT-カクノ">PILOT カクノ</a></li>
                    <li><a href="#PILOT-プレラ-色彩逢い">PILOT プレラ 色彩逢い</a></li>
                    <li><a href="#TWSBI-ECO--TWSBI-ECO-T">TWSBI ECO / TWSBI ECO-T</a></li>
                </ul>
            </li>
            <li><a href="#これから始めてみたい人へのおすすめインク">これから始めてみたい人へのおすすめインク</a></li>
        </ul>
    </li>
    <li><a href="#インクがたくさん増えてきたら">インクがたくさん増えてきたら</a></li>
    <li><a href="#さらに沼へ">さらに沼へ</a></li>
    <li><a href="#インク沼っていうか文房具沼が深い">インク沼っていうか文房具沼が深い</a></li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h2 id="万年筆インク沼">万年筆インク沼</h2>

<p>すでに過去の記事に書いてますが、9月から紙のシステム手帳を日記代わりに使い始め、それをきっかけに 10 月頃から万年筆を使うようになりました。</p>

<p>以下がこれまでの成果です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F10%2F20%2F205348" title="万年筆とインクに入門してみた - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/10/20/205348">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F10%2F28%2F205014" title="入れたインクの色が見える &quot;スケルトンな万年筆&quot; をまとめてみた - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/10/28/205014">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F11%2F06%2F000636" title="BUNGUBOX オリジナルインク TOKYO METRO COLOR - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/11/06/000636">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F11%2F11%2F121605" title="インクを &quot;タミヤして&quot; いただく初体験 - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/11/11/121605">blog.tmd45.jp</a></cite></p>

<p>現時点で持っているインクを一覧にしてみました。</p>

<p><figure class="figure-image figure-image-fotolife" title="自分だけのインク手帳を作る愉しみ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181129/20181129235754.jpg" alt="&#x81EA;&#x5206;&#x3060;&#x3051;&#x306E;&#x30A4;&#x30F3;&#x30AF;&#x624B;&#x5E33;&#x3092;&#x4F5C;&#x308B;&#x305F;&#x306E;&#x3057;&#x307F;" title="f:id:tmd45:20181129235754j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>自分だけのインク手帳を作る愉しみ</figcaption></figure></p>

<p>こういうものを作ること自体が楽しい(*´ｪ`*)</p>

<p>似たような色でも、濃く重ねたり、水で伸ばしたり、時間が経ったりすると違う味が出てくるのと<br/>
一色一色に素敵な名前が付けられていたり、ユニークなシリーズが出ていたりと、ほんとに沼だなぁと思う世界です。</p>

<h3 id="これから始めてみたい人へのおすすめ万年筆">これから始めてみたい人へのおすすめ万年筆</h3>

<p>最近、万年筆やインク自体の流行りが来てるそうです。その流れもあってか、国内メーカーのサイトには万年筆の入門・紹介ページがあったりします。</p>

<p>私も最初は PILOT の万年筆入門記事を読んでました。</p>

<ul>
<li><a href="http://www.pilot.co.jp/promotion/library/001/">万年筆は「書く為の道具」 | 特集記事一覧 | PILOT LIBRARY | PILOT</a></li>
</ul>


<p>インクの入れ方や、お手入れの仕方などが動画になっていてわかりやすいと思います。</p>

<h4 id="PILOT-カクノ">PILOT カクノ</h4>

<p>文房具屋さんでの取扱いも多く、そもそも入門用として作られているので、どこでもおすすめされているのが <strong>PILOT カクノ</strong>。<strong>1,000円程度</strong> で購入することができ、カートリッジインクとかんたんな説明書が同封されています。</p>

<p>他の廉価万年筆に比べて、ペン先の太さのバリエーションが多いのも魅力でしょうか。手帳など細かく書くのに使うなら EF（極細字）や F（細字）、それ以外でインクの色をしっかり楽しみたいなら M（中字）以上の太さが良いかと思います。</p>

<p>ボトルインクを楽しむときには、別売りの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D0%A1%BC%A5%BF%A1%BC">コンバーター</a>を購入する必要があります。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0744C76MG/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41Y9g7e5lEL._SL160_.jpg" class="hatena-asin-detail-image" alt="kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF" title="kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0744C76MG/tmd45-22/">kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%A4%A5%ED">パイロ</a>ット</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B0744C76MG/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h4 id="PILOT-プレラ-色彩逢い">PILOT プレラ 色彩逢い</h4>

<p><strong>3,000円台</strong> でおすすめなのは <strong>PILOT プレラ 色彩逢い</strong>。全長が短く小ぶりなボディが可愛らしく、クリアカラーで中に入れるインクと色を合わせるのも楽しいです。</p>

<p>ペン先のバリエーションは F（細字）と CM（カリグラフィ）というちょっと変わった組み合わせ。本格的なカリグラフィには向かないですが、太い線と細い線の両方を表現できる（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>のような感じ）のが面白くて、私は普段から使っています。</p>

<p>こちらは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D0%A1%BC%A5%BF%A1%BC">コンバーター</a>が付属しているので、インクがあればそれを補充して使うことができます。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VWMN94/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51lBvw4E6oL._SL160_.jpg" class="hatena-asin-detail-image" alt="【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー" title="【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VWMN94/tmd45-22/">【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> PILOT</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B009VWMN94/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VVBRJM/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41Ns%2B6ToXxL._SL160_.jpg" class="hatena-asin-detail-image" alt="Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ" title="Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VVBRJM/tmd45-22/">Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Pilot</li><li><span class="hatena-asin-detail-label">発売日:</span> 2014/10/01</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B009VVBRJM/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h4 id="TWSBI-ECO--TWSBI-ECO-T">TWSBI ECO / TWSBI ECO-T</h4>

<p>最近自分で使いはじめて気に入ってるのが、<strong>5,000円台</strong> で入手可能な <strong>TWSBI ECO</strong>。TWSBI は台湾の万年筆メーカーです。</p>

<p>こちらもペン先の種類が豊富です。珍しいところでは STUB 1.1 という極太のペン先が存在しています。プレラのカリグラフィと同様に、太い線と細い線を表現することができます。</p>

<p>1,000円、3,000円 のものよりしっかりした感触で「万年筆を使ってるゼ」という満足感が得られる気がします（笑）</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B011M8HXQ2/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31cn5R1ZtJL._SL160_.jpg" class="hatena-asin-detail-image" alt="TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340" title="TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B011M8HXQ2/tmd45-22/">TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> TWSBI</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B011M8HXQ2/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3 id="これから始めてみたい人へのおすすめインク">これから始めてみたい人へのおすすめインク</h3>

<p>手に入りやすく、色も豊富、名前も素敵で、ミニボトルの価格帯もお財布に優しいということで、やっぱり PILOT <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%A7%BA%CC%BC%B6">色彩雫</a>はおすすめです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B012ESIIGS/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41KXd2193wL._SL160_.jpg" class="hatena-asin-detail-image" alt="PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます" title="PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B012ESIIGS/tmd45-22/">PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> PILOT</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B012ESIIGS/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>同様に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A1%BC%A5%E9%A1%BC%CB%FC%C7%AF%C9%AE">セーラー万年筆</a>の四季織シリーズも。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B075ZWB2PQ/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51jSZeJix9L._SL160_.jpg" class="hatena-asin-detail-image" alt="セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210" title="セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B075ZWB2PQ/tmd45-22/">セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A1%BC%A5%E9%A1%BC%CB%FC%C7%AF%C9%AE">セーラー万年筆</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/29</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B075ZWB2PQ/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>こういったメジャーなインク以外にも、以前の記事でも紹介しましたが、<a href="http://happyinkdays.hatenablog.com/">HAPPY INK DAYS archives</a> というブログで毎日いろいろなインクが紹介されています。</p>

<p>見てるだけでも楽しいですし、物欲も刺激されます。自分の手で、この色で、好きなものを書いてみたいな～と妄想するのがたまりません。</p>

<h2 id="インクがたくさん増えてきたら">インクがたくさん増えてきたら</h2>

<p>すべてを万年筆に入れておくのは難しいです。万年筆は普段から使っていないと、ペン先のインクが乾いたりしてしまいます。万年筆の一番のメンテナンスは「毎日使うこと」とのことです。</p>

<p>なので、普段使う万年筆には使いやすい色とか、とくにお気に入りの色とかを入れて持ち歩きます。</p>

<p>そうでないインクは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>やガラスペンなどを使って楽しむようにしています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B010D2PAWW/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41%2BcEYACmXL._SL160_.jpg" class="hatena-asin-detail-image" alt="ルビナート ガラスペン NOV/D アメジスト#6" title="ルビナート ガラスペン NOV/D アメジスト#6"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B010D2PAWW/tmd45-22/">ルビナート ガラスペン NOV/D アメジスト#6</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> ルビナート(Rubinato)</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B010D2PAWW/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>インク沼として楽しむのであれば、万年筆ではなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>だけでもいいかもしれませんね。</p>

<h2 id="さらに沼へ">さらに沼へ</h2>

<p>このように、インクの魅力に惹かれていった結果、万年筆が何本も増えたり（まだお高いものには手を出していないですが^^;）、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>が増えたり…</p>

<p>さらには「万年筆インクで書きやすい紙」についてもこだわりはじめます。</p>

<p>もともと文房具そのものが好きということもあって、「万年筆インクで書きやすい紙」もいろいろな種類を買って試してみています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07B2ZJYD6/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41LmZ862uwL._SL160_.jpg" class="hatena-asin-detail-image" alt="ミドリ メモ MDペーパーパッド A5 無罫 15235006" title="ミドリ メモ MDペーパーパッド A5 無罫 15235006"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07B2ZJYD6/tmd45-22/">ミドリ メモ MDペーパーパッド A5 無罫 15235006</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> デザインフィル</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/28</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B07B2ZJYD6/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0177ONZHG/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/21SabU9xmoL._SL160_.jpg" class="hatena-asin-detail-image" alt="神戸派計画 GRAPHILO paper A5" title="神戸派計画 GRAPHILO paper A5"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0177ONZHG/tmd45-22/">神戸派計画 GRAPHILO paper A5</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 神戸派計画</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B0177ONZHG/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>これ以外にもいろいろ買いましたが、それはまた別の機会にまとめたいと思います。</p>

<h2 id="インク沼っていうか文房具沼が深い">インク沼っていうか文房具沼が深い</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Instagram">Instagram</a> などあらゆる場所で文房具に関する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a>やグループが盛り上がっています。</p>

<p>そういうのを眺めるのも楽しみのひとつです。</p>

<ul>
<li><a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88?f=tweets&amp;vertical=default&amp;src=hash">#手書きツイート - Twitter</a></li>
<li><a href="https://twitter.com/hashtag/%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%99?f=tweets&amp;vertical=default&amp;src=hash">#ゆる書写 - Twitter</a></li>
<li><a href="https://twitter.com/hashtag/%E4%B8%87%E5%B9%B4%E7%AD%86%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E9%83%A8?f=tweets&amp;vertical=default&amp;src=hash">#万年筆イラスト部 - Twitter</a></li>
</ul>


<p>ハ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DA%A5%F3">コペン</a>さんの書写ツイートがとても美しくて好きです。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ゆる書写を書きました。<br><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%BE%B8%CD%C0%EE%CD%F0%CA%E2">江戸川乱歩</a> 「鏡地獄」より。<br>ブラックライトで光らせてみました。<br><br>使用インク : Organics studio Nitrogen、Walden pond 、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%A7%BA%CC%BC%B6">色彩雫</a> 山葡萄<br><br> <a href="https://twitter.com/hashtag/%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%99?src=hash&amp;ref_src=twsrc%5Etfw">#ゆる書写</a> <a href="https://twitter.com/hashtag/%E6%9B%B8%E5%86%99?src=hash&amp;ref_src=twsrc%5Etfw">#書写</a> <a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88?src=hash&amp;ref_src=twsrc%5Etfw">#手書きツイート</a> <a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D?src=hash&amp;ref_src=twsrc%5Etfw">#手書き</a> <a href="https://twitter.com/hashtag/%E3%82%A4%E3%83%B3%E3%82%AF%E6%B2%BC?src=hash&amp;ref_src=twsrc%5Etfw">#インク沼</a> <a href="https://twitter.com/hashtag/%E8%89%B2%E5%BD%A9%E9%9B%AB?src=hash&amp;ref_src=twsrc%5Etfw">#色彩雫</a> <a href="https://twitter.com/hashtag/Organicsstudio?src=hash&amp;ref_src=twsrc%5Etfw">#Organicsstudio</a> <a href="https://twitter.com/hashtag/%E6%BF%83%E6%B7%A1%E8%90%8C%E3%81%88?src=hash&amp;ref_src=twsrc%5Etfw">#濃淡萌え</a><a href="https://twitter.com/hashtag/%E6%B7%B1%E5%A4%9C%E3%81%AE%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%9960%E5%88%86%E4%B8%80%E6%9C%AC%E5%8B%9D%E8%B2%A0?src=hash&amp;ref_src=twsrc%5Etfw">#深夜のゆる書写60分一本勝負</a> <a href="https://t.co/plAwlgkLDk">pic.twitter.com/plAwlgkLDk</a></p>&mdash; ハ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DA%A5%F3">コペン</a> (@hakoppen2018) <a href="https://twitter.com/hakoppen2018/status/1061549929263321088?ref_src=twsrc%5Etfw">2018年11月11日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>ほぼ同様の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a>が <a class="keyword" href="http://d.hatena.ne.jp/keyword/Instagram">Instagram</a> にもあります。</p>

<h2 id="おわりに">おわりに</h2>

<p>まだまだ紹介したいものがたくさんありますが、一記事にするにはいろいろありすぎるのでこのへんで。</p>

<p>というか参加ハードルを下げるためにさらっと書いて終わろうと思ってたのに、めっちゃ書いてしまった。沼だわぁ。</p>

<p>明日は <a href="https://adventar.org/users/20291">maccha418</a> さんが『リアル脱出ゲーム（SCRAP）沼』について書いてくれるとのこと。私もリアル脱出ゲームは一度参加したことがありますが、素敵なエンタテイメントですよね！</p>

<p>引き続き <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> をよろしくおねがいします☺</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2018/11/14/140000</id>
        <link href="https://developer.feedforce.jp/entry/2018/11/14/140000"/>
        <updated>2018-11-14T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。以前住んだ街を訪れるのが趣味です。</p>

<p>週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をしました。</p>

<p>まさかのダブルタイトル・・・！ スライドを作っていたら別々の話のような気がして、こうなりました。</p>

<h2>発表の内容</h2>

<script async class="speakerdeck-embed" data-id="868618a13fbb4e8d8baf8f00c1f2e962" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>『Heroku と EC Booster と私』は主に社内向けの話です。最近の EC Booster のインフラを紹介する機会がなかったので、今回の発表の場を借りました。</p>

<p>『Heroku ちょこっと Deep Dive』では Heroku の Slug について、ちょこっと調べました。</p>

<p>Heroku では <a href="https://jp.heroku.com/dynos">Dyno</a> という軽量コンテナ上で、アプリケーションが動作します。アプリケーションは <a href="https://devcenter.heroku.com/articles/slug-compiler">Slug というパッケージに固められて</a>います。Slug にはアプリケーションコードの他に Buildpack や、Ruby なら bundle install されたライブラリ等が含められています。</p>

<p>最近 Heroku を Terraform で管理し始めた時に、<a href="https://www.terraform.io/docs/providers/heroku/r/slug.html">heroku_slug</a> というリソースを見つけました。使いはしなかったのですが、自分で Slug を変更できる感覚がよく分からなくて調べたことが始まりでした。</p>

<p>まさか Scratch から作れるとは思いませんでしたし、Slug の中身やサイズの増減を把握する方法が分かったことは大きな収穫でした。</p>

<p>発表では話し忘れたのですが、Heroku は Stack に日々セキュリティパッチが当たって、24 時間以内に適用されることは大きなメリットです。小さなチームで当てるべきパッチの把握や適用をするのは、相当しんどいですからね。</p>

<p>それでは、発表後に書いてくれた付箋への返信です。</p>

<h2>発表の感想</h2>

<p>付箋紙に感想を書いてくれました。<i class="blogicon-comment" aria-hidden="true"></i> は私からのコメントです。</p>

<ul>
<li><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181112/20181112233219.jpg" alt="Heroku by yousuke?" title="f:id:masutaka26:20181112233219j:plain" class="hatena-fotolife" itemprop="image"></span>

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> いつもありがとうございます</li>
</ul>
</li>
<li>ふだん Heroku Review App しか使ってなかったんですが、興味を持ちました

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> Rails アプリの公開にも、小さなスクリプトの定期実行にも使えるので便利ですよ</li>
</ul>
</li>
<li>マッスル マスタカ！💪

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> マッスル マッスル！💪</li>
</ul>
</li>
<li>Heroku 未だに HTTP 1.1 なんですよね

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうなんですよねー 💦 さすがにそろそろ...</li>
</ul>
</li>
<li>早く AWS + CloudFront 使いたい

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> assets は CDN に逃したいですねー</li>
</ul>
</li>
<li>(dfplus.)io はいまだにフロントは Heroku 使ってマスタカ

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうでありマスタカ</li>
</ul>
</li>
<li>Push された tar ball に build された file が入るんですか

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そんな感じですー</li>
</ul>
</li>
<li>EC Booster のリリース時に Heroku を徹底的につかいたおすことを目標にしていたので、この発表もマスタカさんのふだんの仕事もとても感謝しています

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> もったいないお言葉、ありがとうございます！</li>
</ul>
</li>
<li>「Heroku は良いサービス」めっちゃわかる

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> だよねー</li>
</ul>
</li>
<li>Heroku は良しなにやってくれるけど、その「良しなに」部分もちゃんとオープンになっているのすばらしい

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ですねー。ずっと謎だった Slug の正体が分かってよかったです</li>
</ul>
</li>
<li>プロダクション環境での Heroku 運用、勉強になりました

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> まだまだ小さなサービスですからね。これから大きくなると、問題がたくさん出てきそうです</li>
</ul>
</li>
<li>なんか push したら動かしてくれる Heroku が裏で何やってるか知れてよかったです！ 最近便利な機能知って Heroku いいなーってなってます！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ありがとうございます。他にも <a href="https://www.heroku.com/continuous-integration">Heroku CI</a> や <a href="https://devcenter.heroku.com/articles/pipelines#promoting">Promoting</a> など、まだ試せていない機能がありますねー</li>
</ul>
</li>
<li>資料が分かりやすいです

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 安心安全な資料作りを心がけて参ります</li>
</ul>
</li>
<li>資料の文字数がちょうど良くてとても見やすいと思いました

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 本当はもっと減らしたいのですが、あとから読める資料としても作ったので、今回の長さになりました</li>
</ul>
</li>
<li>ボトルネックがないようなら Heroku 便利そう

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> とは言え、パフォーマンスを突き詰めると厳しいと感じています。現在は割とバックグラウンド＆バッチ処理にフォーカスしています</li>
</ul>
</li>
<li>さすが弊社で Heroku に一番詳しい男！！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 引き続きニッチな領域を攻めていきます</li>
</ul>
</li>
<li>マスタカさんは説明が上手だなと思いました（こなみ）

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ありがとうございます！</li>
</ul>
</li>
<li>Heroku..... なんだかんだ、難しいイメージがあります...

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 私も最初はそうでしたねー</li>
</ul>
</li>
<li>身近に仕事で Heroku 使ってる人だー

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> いえす！</li>
</ul>
</li>
<li>初心者でも使えるけど奥が深い Heroku

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ですねー</li>
</ul>
</li>
</ul>


<h2>発表の感想の感想</h2>

<p>Heroku はバックエンドエンジニアには概ね好評ですが、フロントエンドエンジニアには割と不評な印象を受けました。</p>

<p>HTTP/3 という話が出てきた今、未だに HTTP/1.1 なのはだいぶ遅れてますし、パフォーマンスを突き詰めると、どうしてもレイテンシー問題に直面してしまいます。逆に言えば、この辺どうにかなれば最強だと思うのですが。🌀</p>

<p>Heroku の先を見据えてやっていきます。💪</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI Orbs 入門]]></title>
        <id>https://blog.tsub.me/post/introducing-to-circleci-orbs/</id>
        <link href="https://blog.tsub.me/post/introducing-to-circleci-orbs/"/>
        <updated>2018-11-10T08:47:00.000Z</updated>
        <summary type="html"><![CDATA[<p>とうとう待望の CircleCI Orbs がリリースされたので一通り触ってみました。</p>

<p><a href="https://circleci.com/blog/announcing-orbs-technology-partner-program/">Announcing CircleCI Orbs and our new Technology Partner Program</a></p>

<p>今回作ったサンプルは以下のリポジトリにありますので手っ取り早く知りたい人は以下のコードを見ると良いかと思います。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/circleci-orbs-sandbox">tsub/circleci-orbs-sandbox</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Albert で GitHub リポジトリを開ける拡張を作った]]></title>
        <id>https://blog.tsub.me/post/create-albert-github/</id>
        <link href="https://blog.tsub.me/post/create-albert-github/"/>
        <updated>2018-10-28T09:35:00.000Z</updated>
        <summary type="html"><![CDATA[<p>先日プライベートの開発マシンを Linux にしたのですが、macOS の時に一番重宝していたものがなにかというと、実は <a href="https://www.alfredapp.com/">Alfred</a> だったことに気づきました。</p>

<p>Alfred がないとストレスフルです。</p>

<p>ただ Linux には Alternative Alfred がいくつかあり、その中でも Albert が比較的良さそうだったので Albert を使っていますが、Alfred で言う Workflow にあたるものが全然充実していませんでした。</p>

<p>特に Alfred から GitHub を開く操作が一番多い気がするので、まずはそれを Albert でもできるようにするために、今回拡張を作りました。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/albert-github">tsub/albert-github: Open GitHub repository in browser with Albert</a></p>

<p><img src="https://gyazo.com/fff7125ea22e33c863f6fd535d7f2b8b.png" alt="image" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[弊社の新人エンジニア研修カリキュラムを惜しみなく公開してみる]]></title>
        <id>https://developer.feedforce.jp/entry/2018/10/18/140000</id>
        <link href="https://developer.feedforce.jp/entry/2018/10/18/140000"/>
        <updated>2018-10-18T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは！今年の4月にポテンシャル枠で入社した <a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です！引き続き Rails に弄ばれる日々を過ごしています。</p>

<p>さて、今回は約4ヶ月間の新人エンジニア研修を受け終えた私が弊社の研修カリキュラムを公開し、まとめや実際に受けてみての感想を書いていきたいと思います。</p>

<h2>前提として</h2>

<p>フィードフォースでは今年4月〜5月のほぼ同時期に <a href="https://e-navigator.feedforce.jp/">e-Navigator</a> というプログラムを通じて、私を含む3名の実務未経験エンジニアが入社しています。</p>

<p>今回の研修は、e-Navigator でもレビュアーだった <a href="https://twitter.com/sukechannnn">@sukechannnn</a> がメンターとして上記3名の新人エンジニアをフォローする体制で進めました！</p>

<h2>研修の成果を3行で</h2>

<ul>
<li><strong>入社時に「プログラミング歴3ヶ月の超初心者エンジニア」だった私が</strong></li>
<li><strong>フィードフォースで約4ヶ月間の新人エンジニア研修を受けて</strong></li>
<li><strong>配属後にある程度自走してコードが書けるぐらいのスキルを身につけることが出来ました！</strong></li>
</ul>


<h2>ざっくりスケジュール</h2>

<h3>4月</h3>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774193976/hatena-blog-22/">プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで</a> の例題を解く &amp; 読む</li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4863542178/hatena-blog-22/">わかばちゃんと学ぶ Git使い方入門</a> を読む</li>
<li>Vim 研修（vimtutor を2周する）</li>
</ul>


<h3>5月〜6月</h3>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774165166/hatena-blog-22/">パーフェクトRuby on Rails</a> の1章〜5章を読む &amp; 6章〜7章のアプリ作成</li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873117437/hatena-blog-22/">メタプログラミングRuby 第2版</a> を読む</li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774142042/hatena-blog-22/">Webを支える技術</a> を読む</li>
<li>社内スクラム研修</li>
</ul>


<h3>7月</h3>

<ul>
<li>ローテーション配属研修（2チーム）</li>
<li>シンプルな Todo アプリの API 開発</li>
<li>社内フロントエンド研修</li>
<li>社内インフラ研修</li>
</ul>


<h2>各研修についてのまとめや感想</h2>

<h3>『プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで』の例題を解く &amp; 読む</h3>

<p><strong>所要期間: 約1ヶ月</strong></p>

<ul>
<li>表紙の <strong>「Rails をやる前に、 Ruby を知ろう」</strong> の通り、Rails での開発を意識しながらピュアな Ruby の基礎を学び直せる良書。</li>
<li>クラスやモジュールはふんわり知ってる程度でしたが、この本を読んで初めて自分で定義しました。</li>
<li>各章の例題を GitHub の PR ベースでレビューしてもらったり、本書内の Minitest を RSpec に変えてテスト書いたり、 RuboCop 導入したり、とメンターである <a href="https://twitter.com/sukechannnn">@sukechannnn</a> のファインプレーが光りました。</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774193976/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51nY-YLt2ZL._SL160_.jpg" class="hatena-asin-detail-image" alt="プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで (Software Design plusシリーズ)" title="プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで (Software Design plusシリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774193976/hatena-blog-22/">プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで (Software Design plusシリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 伊藤淳一</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/11/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/4774193976/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>『わかばちゃんと学ぶ Git使い方入門』 を読む</h3>

<p><strong>所要期間: 約3日</strong></p>

<ul>
<li>入門書の名の通り、Git の概要を掴むにはよかったです。</li>
<li>ただ、研修としてはもう少し SourceTree に特化していない内容も知れるといいなと思いました。</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4863542178/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51Mj8x5RpZL._SL160_.jpg" class="hatena-asin-detail-image" alt="わかばちゃんと学ぶ Git使い方入門〈GitHub、Bitbucket、SourceTree〉" title="わかばちゃんと学ぶ Git使い方入門〈GitHub、Bitbucket、SourceTree〉"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4863542178/hatena-blog-22/">わかばちゃんと学ぶ Git使い方入門〈GitHub、Bitbucket、SourceTree〉</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 湊川あい,DQNEO</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> シーアンドアール研究所</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/04/21</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4863542178/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>Vim 研修（vimtutor を2周する）</h3>

<p><strong>所要期間: 約2日</strong></p>

<ul>
<li>vimtutor がナイス教材過ぎました…（しかも無料 &amp; インストール不要）</li>
<li>Vim への恐怖心がなくなったのはだいぶ大きかったです。（vimtutor やるまでは Vim 怖かった…）</li>
</ul>


<h3>『パーフェクトRuby on Rails』の1章〜5章を読む &amp; 6章〜7章のアプリ作成</h3>

<p><strong>所要期間: 約1.5ヶ月</strong></p>

<ul>
<li>所要期間的に今回の新人エンジニア研修のメインだったように思います、 <code>rails new</code> のところからがっつりレビューしてもらい、ログイン、CRUD、多対多の関連、E2E のテストまで、一通りの Rails アプリケーション開発を学べました。</li>
<li>プロダクトのコードはほぼ写経だったこともあり、RSpec でいい感じのテストを書くことに一番頭を使いました。このタイミングで当たり前にテストを書く習慣が身についたのはとても良かったです。</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774165166/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51gltg0grAL._SL160_.jpg" class="hatena-asin-detail-image" alt="パーフェクト Ruby on Rails" title="パーフェクト Ruby on Rails"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774165166/hatena-blog-22/">パーフェクト Ruby on Rails</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> すがわらまさのり,前島真一,近藤宇智朗,橋立友宏</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2014/06/06</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/4774165166/hatena-blog-22" target="_blank">この商品を含むブログ (8件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>『メタプログラミングRuby 第2版』 を読む</h3>

<p><strong>所要期間: 約2週間</strong></p>

<ul>
<li>メタプログラミングについて学ぶというよりも、基礎を学び終えた初学者がより深く Ruby 内部の構造について学ぶ書という意味合いが強かったような気がします。</li>
<li>オブジェクトモデル、メソッド、ブロック、スコープ、クラス &amp; モジュール定義について学び、この頃から <code>irb</code> や <code>pry</code> 上で出てくる Ruby 組み込みのエラーメッセージが怖くなくなりました。</li>
<li>あと読書感想会は本当にやってよかったです。

<ul>
<li><a href="https://developer.feedforce.jp/entry/2018/07/19/000000">新人エンジニア達がメタプログラミング Ruby の読書感想会をやった話</a></li>
</ul>
</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/5102wwx0VzL._SL160_.jpg" class="hatena-asin-detail-image" alt="メタプログラミングRuby 第2版" title="メタプログラミングRuby 第2版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/hatena-blog-22/">メタプログラミングRuby 第2版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Paolo Perrotta,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2015/10/10</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/4873117437/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>『Webを支える技術』 を読む</h3>

<p><strong>所要期間: 約1週間</strong></p>

<ul>
<li>実は入社前に一度読んだことがあったのですが、『パーフェクトRuby on Rails』のアプリ作成と並行して進めることで、より理解が深まりました。</li>
<li>2部の URI と 3部の HTTP がものすごく勉強になりました。特に HTTP のところは RSpec や cURL で値をいじって、返ってくる値も覗きながら読むと、ものすごく捗りました。</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51qo6pgjaSL._SL160_.jpg" class="hatena-asin-detail-image" alt="Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)" title="Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/hatena-blog-22/">Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 山本陽平</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2010/04/08</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 143人 <span class="hatena-asin-detail-label">クリック</span>: 4,320回</li><li><a href="http://d.hatena.ne.jp/asin/4774142042/hatena-blog-22" target="_blank">この商品を含むブログ (183件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>社内スクラム研修</h3>

<p><strong>所要期間: 約0.5日</strong></p>

<ul>
<li>社内随一のアジャイルお兄さん <a href="http://blog.hatena.ne.jp/pokotyamu/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/pokotyamu/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:pokotyamu</a> によるスクラム研修。</li>
<li>座学パート1時間弱、レゴスクラムによる実践パート2時間強の研修で、スクラムの「守」の部分をがっつり学ぶことができました！</li>
<li>一緒に研修を受けた人事インターンの方が感想記事を書いてくれています。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn51c711939059" title="人事インターンがスクラム研修に参加してみた 〜非エンジニアも使える早く細かく改善する仕組み〜｜Feedforceのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n51c711939059">media.feedforce.jp</a></cite></p>

<h3>ローテーション配属研修（2チーム）</h3>

<p><strong>所要期間: 各1週間ずつ</strong></p>

<ul>
<li>各チームに1週間ずつ、お試し配属のような形で実際のプロダクトのコードを触りながら、軽めの改修や新機能の一部を実装しました！</li>
<li>当時の雰囲気は以下の記事をご参照ください。</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F07%2F06%2F185249" title="ペアプロならぬシェアプロが良かった話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/07/06/185249">developer.feedforce.jp</a></cite></p>

<h3>シンプルな Todo アプリの API 開発</h3>

<p><strong>所要期間: 約1週間</strong></p>

<ul>
<li><a href="https://twitter.com/sukechannnn">@sukechannnn</a> が鬼のようなスピードで Swagger で書いてくれた仕様書をもとにゼロから Rails の API サーバを作りました。</li>
<li>後述するフロントエンド研修、インフラ研修と併せて、API の実装〜React で SPA 作成〜AWS でデプロイまで一貫して経験することで、イマドキの Web アプリケーション開発の全体像を掴むことが出来ました。</li>
<li>超シンプルなアプリケーションでしたが、『パーフェクトRuby on Rails』がほぼ写経だったこともあり、自分の頭を使って開発を進められて楽しかったです。</li>
</ul>


<h3>社内フロントエンド研修</h3>

<p><strong>所要期間: 約0.5日</strong></p>

<ul>
<li><a href="http://blog.hatena.ne.jp/hano_tea/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/hano_tea/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:hano_tea</a> に基礎編、<a href="http://blog.hatena.ne.jp/otofu-square/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/otofu-square/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:otofu-square</a> に実践編を担当していただきました！</li>
<li>基礎編では SPA 作成に必要最低限の ES6、JSX の書き方を教えていただき、実践編では自作した Todo アプリ API を使った SPA を React で実装しました。</li>
<li>React を触るのは初めてで JS もほとんど書いたことがなかったので、途中ちょっと取り残されそうになりましたが、なんとか食らいついて完成まで持っていくことができました！</li>
</ul>


<h3>社内インフラ研修</h3>

<p><strong>所要期間: 約0.5日</strong></p>

<ul>
<li>『Amazon Web Services 基礎からのネットワーク&amp;サーバー構築』 を教本に自分で開発した Todo アプリ API を手動デプロイしてみようという研修です。</li>
<li>事前の知識として EC2 と S3 ぐらいは聞いたことあったものの、VPC？Internet Gateway？Route Table？みたいな状態でした…が、諸先輩方に一つ一つ丁寧に教えていただきデプロイまで持っていくことができました。</li>
<li>翌日 React で実装した SPA も Heroku にデプロイし、Web の世界に自作アプリが羽ばたいた時にはとても感動しました…！</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822237443/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51KpOuWyhYL._SL160_.jpg" class="hatena-asin-detail-image" alt="Amazon Web Services 基礎からのネットワーク&サーバー構築 改訂版" title="Amazon Web Services 基礎からのネットワーク&サーバー構築 改訂版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822237443/hatena-blog-22/">Amazon Web Services 基礎からのネットワーク&サーバー構築 改訂版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 玉川憲,片山暁雄,今井雄太,大澤文孝</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 日経BP</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/04/13</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4822237443/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>そして研修は続く…</h2>

<p>上記の研修に加えて、チーム配属後の研修図書として以下の本をプレゼントしていただきました！</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51MgH8Jmr3L._SL160_.jpg" class="hatena-asin-detail-image" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Dustin Boswell,Trevor Foucher,須藤功平,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 68人 <span class="hatena-asin-detail-label">クリック</span>: 1,802回</li><li><a href="http://d.hatena.ne.jp/asin/4873115655/hatena-blog-22" target="_blank">この商品を含むブログ (140件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51-TCt0H4UL._SL160_.jpg" class="hatena-asin-detail-image" alt="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方" title="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/">オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Sandi Metz,?山泰基</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/09/02</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/477418361X/hatena-blog-22" target="_blank">この商品を含むブログ (6件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798144452/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51sf73NhVTL._SL160_.jpg" class="hatena-asin-detail-image" alt="SQL 第2版 ゼロからはじめるデータベース操作 (プログラミング学習シリーズ)" title="SQL 第2版 ゼロからはじめるデータベース操作 (プログラミング学習シリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798144452/hatena-blog-22/">SQL 第2版 ゼロからはじめるデータベース操作 (プログラミング学習シリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> ミック</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 翔泳社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/06/17</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4798144452/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51P7Lxl0cKL._SL160_.jpg" class="hatena-asin-detail-image" alt="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道" title="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/">ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 青木峰郎</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4797386479/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797393165/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/513hw-04L8L._SL160_.jpg" class="hatena-asin-detail-image" alt="体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践" title="体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797393165/hatena-blog-22/">体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 徳丸浩</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/06/21</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4797393165/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>ちなみに私は『リーダブルコード』『オブジェクト指向設計実践ガイド』『SQL ゼロからはじめるデータベース操作』を読み終えて、今は『ふつうのLinuxプログラミング』を読んでいるところです。</p>

<p>『オブジェクト指向設計実践ガイド』についてはとても良い本だったので、また社内で読書会を開催しようと思っています！</p>

<h2>最後に</h2>

<p>今回は弊社の新人エンジニア研修カリキュラムをご紹介しました！</p>

<p>来年以降の新人エンジニア研修には自分自身が積極的に関わっていきたいという考えもあり、カリキュラムをよりブラッシュアップさせていくためにも記事としてまとめ、研修の振り返りを行いました。</p>

<p>この記事をきっかけに、もっとこうした方がいい、うちの会社ではこんなことやっている、みたいな情報が集まるといいなと思っています。</p>

<p>それでは、またお会いしましょう ＾＾</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内勉強会で『Markdown と学ぶ HTML 基礎』を発表しました]]></title>
        <id>https://developer.feedforce.jp/entry/2018/10/12/184014</id>
        <link href="https://developer.feedforce.jp/entry/2018/10/12/184014"/>
        <updated>2018-10-12T09:40:14.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://ff14wiki.info/?%E8%99%9A%E6%A7%8B%E8%A3%85%E5%82%99">虚構</a>集めてますか？
こんにちは、白魔の <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です。</p>

<p>社内勉強会の担当で『<a href="https://speakerdeck.com/tmd45/12-fftt-number-331">Markdown と学ぶ HTML 基礎</a>』という発表をしました。</p>

<p>タイトルの通りごくごく基本的な内容ですが、ちょっとした部分で「知らなかった！」みたいなのが結構あったみたいで盛り上がりましたv(￣Д￣)v</p>

<p><iframe id="talk_frame_469478" src="//speakerdeck.com/player/3db5b73226054f189a530dad5746e973" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/tmd45/12-fftt-number-331">speakerdeck.com</a></cite></p>

<p>スライドはほぼ初学者向けに書いていますが、これは 8 月末に開催した <a href="https://e-navigator.connpass.com/event/96656/">e-Navigator 勉強会#4</a> 向けに作成したスライドの焼き増し（第二版）だからだったりします。</p>

<p>一部 HTML の間違いを修正し、Markdown parser や linter の情報を追記しております。</p>

<p>以下、FFTT 恒例の感想付せん返信です。</p>

<h3>感想付せん返信</h3>

<ul>
<li>Markdown にまだ慣れてない感があるので警察こわい</li>
<li>警察👮こわい

<ul>
<li>こわくないよ〜 勉強会で発散したから <del>しばらく</del> こわくないよ〜</li>
<li>ぜひこれを機会に文章構造と HTML を意識してみてください！</li>
</ul>
</li>
<li>HTML 使いこなすためにはまず文章構造をですね…

<ul>
<li><strong>それな</strong></li>
</ul>
</li>
<li>勉強になりました！捕まらないように気をつけます…

<ul>
<li>(ΦωΦ)ﾌﾌﾌ…</li>
</ul>
</li>
<li><code>ul</code> タグと <code>ol</code> タグの意味を理解できました

<ul>
<li>やったね！</li>
</ul>
</li>
<li>はじめてプログラミングに触れた日、<a href="https://dotinstall.com/">ドットインストール</a>で HTML から始めた時を思い出しました！

<ul>
<li>(　；∀；) ｲｲﾊﾅｼﾀﾞﾅｰ</li>
</ul>
</li>
<li>tmd45 さんが楽しそうに話されていて楽しかったです！！

<ul>
<li>照れる〜 🤑</li>
</ul>
</li>
<li><a href="https://html.spec.whatwg.org/">WHATWG HTML Living Standard</a> もよろしくオネシャス！

<ul>
<li>これは知らなかった！へ〜</li>
</ul>
</li>
</ul>


<blockquote><p>HTML5 や HTML 5.1 は W3C が標準化を進めていますが、W3C とは別に、Apple, Chrome, Opera が設立した WHATWG という団体が独自に策定を進めている HTML 仕様です。HTML Living Standard と呼ばれ、バージョン番号や、何年何月何日版という概念もなく、毎日改版、修正、強化が進められています。</p>

<p><a href="http://www.tohoho-web.com/html/memo/htmlls.htm">HTML Living Standard - とほほのWWW入門</a></p></blockquote>

<ul>
<li>奥深き Markdown …

<ul>
<li>GitHub Flavor とか方言や拡張がいろいろあるので、あっちでは上手く書けたのがこっちでは崩れるとか</li>
<li>文章構造をシンプルにすれば、あまり悩まなくて済んだりもします 😇</li>
</ul>
</li>
<li>リストに <code>- [ ]</code> を混ぜるのによく困ってますね

<ul>
<li>これも HTML がどうなって「意図どおりでない」表示なってしまうのか把握できるといいですね 😇</li>
<li>もしかしたら、インデントのスペースの数が合ってないとかも影響してるかも？</li>
</ul>
</li>
<li>基礎的な内容だと思ったけど知らないこともあって良かった！！

<ul>
<li>そう言ってもらえるとありがたいです！😊</li>
</ul>
</li>
<li>総合職向け勉強会で話してもいい内容だと思いました

<ul>
<li>たしかに 🦀</li>
</ul>
</li>
<li>リストの中の複数行コードという積年の悩みが消えました。ありがとうございます！

<ul>
<li>この質問に答えてくれたのは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> ですけど</li>
<li>これもやっぱり Markdown の拡張と、文章構造／HTML の話の絡み合いですねー</li>
</ul>
</li>
<li>Markdown のリンク記法はめんどいから Alfred Workflow に頑張ってもらってます

<ul>
<li>私は Chrome 拡張の <a href="https://chrome.google.com/webstore/detail/create-link/gcmghdmnkfdbncmnmlkkglmnnhagajbm">Create Link</a> を使ってます！</li>
</ul>
</li>
<li><a href="http://hatenadiary.g.hatena.ne.jp/keyword/%E3%81%AF%E3%81%A6%E3%81%AA%E8%A8%98%E6%B3%95%E4%B8%80%E8%A6%A7">はてな記法</a>に触れるやさしさ

<ul>
<li>やさしさなんだろうか（笑）</li>
<li>Markdown が台頭してくる前は、世の中の文章構造は全部はてな記法で書ければいいのにと思ってた時期もありました😏</li>
</ul>
</li>
<li>font color を <span style="color: red">red</span> にするにはどうしたらよいですか？

<ul>
<li>( ＾ω＾) おっ？</li>
<li>マジレスすると「文字を赤色にする」のは文章構造ではないので、たとえば「強調」の構造に対して Style（CSS）に <code>color: red</code> を定義するなど、文章構造とスタイルは分けるほうが良いですね 😇</li>
</ul>
</li>
</ul>


<p>気づいたら社内の派閥投票がされていた！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181012/20181012170816.jpg" alt="f:id:tmd45:20181012170816j:plain:w400" title="f:id:tmd45:20181012170816j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>私は「Shift キー押さなくて済むので <code>-</code> リスト派」です。</p>

<p><a href="https://spec.commonmark.org/0.28/#list-items">CommonMark（0.28）の仕様</a>でも、どちらかに制限されているわけではないので、どちらがジャスティスってことも無いみたいですね。</p>

<p>勉強会後の雑談で「 <code>-</code> リストを書いてる途中で、リアルタイムプレビューがせっかちで一瞬 見出し 記法（レベル 2 見出し）として扱われる」ことに気がついて <code>*</code> リストに宗旨変えしてる人がいました！</p>

<p>変換される HTML（というか文章構造）が把握できるとそんな気づきもあったりします！ぜひみなさんも Markdown から HTML、そして文章構造について知ってみてくださいね。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた]]></title>
        <id>https://developer.feedforce.jp/entry/2018/10/09/140000</id>
        <link href="https://developer.feedforce.jp/entry/2018/10/09/140000"/>
        <updated>2018-10-09T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。秋は体が急に冷え、一年で一番体調を崩しやすいので、意識して風呂に浸かっています。元気です。</p>

<p><a href="http://blog.hatena.ne.jp/critical_alert/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/critical_alert/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:critical_alert</a> から <a href="https://healthchecks.io/">https://healthchecks.io/</a> を教えてもらいました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181007/20181007221520.png" alt="f:id:masutaka26:20181007221520p:plain" title="f:id:masutaka26:20181007221520p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>cron 系の定期実行ジョブが本当に実行されたかを監視してくれるサービスです。</p>

<p>以前、<a href="https://github.com/ondrejbartas/sidekiq-cron">sidekiq-cron</a> のバグで定期実行ジョブが実行されないことがあったので、なんらかの方法でお手軽に監視したいモチベーションがありました。</p>

<h2>terraform-provider-healthchecksio を発見</h2>

<p>コード化したいなーと思って調べたら、非公式の Terraform provider を発見。</p>

<p><a class="embedly-card" href="https://github.com/kristofferahl/terraform-provider-healthchecksio">kristofferahl/terraform-provider-healthchecksio</a></p>

<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<p>こういった設定は属人化しやすいため、Terraform でコード化できるのは助かります。</p>

<p>ただ、この時点では schedule や timezone などに対応していなかったため、採用は断念しました。</p>

<p>healthchecks.io 上でポチポチと監視用のエンドポイントを作成し、ビジネスロジックにも ping するコードを埋め込み、いい感じに動作していました。</p>

<h2>実装開始</h2>

<p>悶々とした日を送り続けたある日、調べてみたら意外と簡単に機能が実装できそうなことが分かりました。</p>

<p>👇 それで送ったのがこの PR。可能な限りのパラメータを使えるようになりました。</p>

<ul>
<li><a href="https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/1">Add parameters by masutaka · Pull Request #1</a></li>
</ul>


<p>terraform import もしたいなーと調べたら、たったの 3 行で対応出来ることが判明。👇 2 つ目の PR を出して無事マージされました。</p>

<ul>
<li><a href="https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/2">Introduce terraform import by masutaka · Pull Request #2</a></li>
</ul>


<p>ついでにしれっとコラボレータに招待してくれて、commit 権を頂けました。やったぜ！</p>

<p>👇 先ほど 3 つ目の PR を出しました。非公式の Terraform provider なので、自分でバイナリを設置する必要があるのですよね。参考になりそうな Makefile を作りました。</p>

<ul>
<li><a href="https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/3">Add examples/Makefile by masutaka · Pull Request #3</a></li>
</ul>


<h2>今後の予定</h2>

<blockquote><p>The database failover process is manual, and the ops team consists of a single person, so multi-hour or even multi-day outages are possible!</p>

<p>While we can only guarantee a best effort availability, in practice the availability has exceeded 99.9% since the service publicly launched in July 2015.</p>

<p><a href="https://healthchecks.io/about/">https://healthchecks.io/about/</a></p></blockquote>

<p>healthchecks.io は安定稼働しており、2015 年 7 月のサービス開始以来、稼働率は 99.9% を超えているそうです。ただあくまでベストエフォート型の可用性しか保証していないので、過信は禁物です。いわゆる 1 人開発プロジェクトでもあります。</p>

<p>今後は Datadog で同じ監視が出来るか調査して、healthchecks.io と併用したいなーと思っています。<a href="https://cronitor.io/">Cronitor</a> も頭の片隅にあるけど、少しオーバースペック感があります。</p>

<h2>おまけ</h2>

<p>healthchecks.io は OSS でもあり、GitHub 上にコードが公開されています。Django で実装されています。</p>

<p><a class="embedly-card" href="https://github.com/healthchecks/healthchecks">healthchecks/healthchecks</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 1.11 の Modules (vgo) を CircleCI で使う]]></title>
        <id>https://blog.tsub.me/post/go111-modules-in-circleci/</id>
        <link href="https://blog.tsub.me/post/go111-modules-in-circleci/"/>
        <updated>2018-08-30T05:33:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/tsub/s3-edit">個人プロジェクト</a>にて、先日リリースされた Go 1.11 の Modules (vgo) を使ってみました。</p>

<p>移行自体はスムーズにできたのですが、CircleCI でのキャッシュのやり方がそこそこ重要かも？と思ったので記事を書きました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes.rb に講師役として参加してきました]]></title>
        <id>https://developer.feedforce.jp/entry/2018/07/23/140133</id>
        <link href="https://developer.feedforce.jp/entry/2018/07/23/140133"/>
        <updated>2018-07-23T05:01:33.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>先日 Kubernetes.rb という勉強会があり、そちらの講師役として参加してきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flocalhost.connpass.com%2Fevent%2F90340%2F" title="Kubernetes.rb (2018/07/21 13:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://localhost.connpass.com/event/90340/">localhost.connpass.com</a></cite></p>

<p><code>.rb</code> と言いつつ Ruby の話は一切ありませんでした。タイトルの伏線は回収されず 😁</p>

<h2>参加の経緯</h2>

<p>さて、今回自分としては初の勉強会の主催側 (?) としてお手伝いすることとなったのですが、その経緯について軽くご紹介します。</p>

<p>もともと一からイベントを企画したわけではなく、主催の <a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんが講師役を募集していたところに応募した形になります。</p>

<p>ただ、応募の経緯としては先日ご退職された元フィードフォースの <a href="https://twitter.com/284km">@284km</a> さんから、「講師役やってくれる人を1名探しているんですが、tsub 氏どうですか？」というお誘いを貰い、やってみたいと思ったので繋いでいただいた感じです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180723/20180723125903.png" alt="f:id:tsub511:20180723125903p:plain" title="f:id:tsub511:20180723125903p:plain" class="hatena-fotolife" itemprop="image"></span>
<em>ちなみに社内で Kubernetes について勉強していくぞ！！的なチャンネルが最近できました。</em></p>

<h2>実際の準備</h2>

<p>やると決まってからは当日まで 1 ヶ月半ぐらいあったのですが、そこからは Twitter でグループ DM しながら準備を進めていきました。</p>

<p>とはいえ、お互い顔も分からず会ったことのない中で Twitter の DM オンリーで準備を進めていったので少々不安を感じながらも、<a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんやサポート役の <a href="https://twitter.com/katsuhisa__">@katsuhisa__</a> さんから優しくして頂けたので問題なく進められました。</p>

<p>準備に際しては以下のリポジトリのコミット権を貰い、そこにサンプルを自分が足していきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flocalhost9292%2Fkubernetes.rb" title="localhost9292/kubernetes.rb" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/localhost9292/kubernetes.rb">github.com</a></cite></p>

<p>また、Rails のサンプルアプリについては以下のリポジトリも用意してもらいました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fyhirano55%2Freact-redux-jwt-authentication-example" title="yhirano55/react-redux-jwt-authentication-example" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/yhirano55/react-redux-jwt-authentication-example">github.com</a></cite></p>

<p>あとは当日までひたすら YAML を書く... 😇 という感じになります。</p>

<p>最初に作った Rails 用の YAML には結構時間がかかったものの、残りのアプリはほとんどコピペでサクサク進んでいきました。</p>

<p>ただ、Sentry などは自分で動かしたことがなかったので、Kubernetes で動かすというよりはアプリそのもののセットアップ手順や構成などを理解するのに時間がかかったように思います。</p>

<p>また、Discourse と GitLab については Docker イメージの使い方が独特で、<a href="https://github.com/discourse/discourse_docker">Discourse</a> の方は独自のシェルスクリプトを使っていて読み解くのがが大変そうで、<a href="https://hub.docker.com/r/gitlab/gitlab-ce/">GitLab</a> の方はコンテナを動かしたら Chef が動き始めて色々インストールしだしたので諦めました。</p>

<p>代わりに Mastodon を動かすことになりました。動かし始めたらいけそうだったので、勢いで当日の朝も準備をしてました..</p>

<h2>勉強会当日の様子</h2>

<p>会場は<a href="https://everyleaf.com/">株式会社万葉</a>さんのオフィスをお借りしました (自分がその辺りを手配したわけではないです)。</p>

<p>とても快適でした。万葉さんありがとうございました 🤗</p>

<p>特に、Chrome Cast に繋がったプロジェクターが設置してあり、各自何か言いたいことがある時にサクッと画面共有できて良かったかと思います。</p>

<p>全体としては 12:30 ぐらいからゆるっと始まり、17:30 ぐらいに解散しました。</p>

<p>最初に <a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんから流れの説明があり、各自簡単に自己紹介をした後はそれぞれ<a href="https://github.com/localhost9292/kubernetes.rb">資料</a>を見ながらもくもくやっていました。</p>

<p>ただ、最初に Minikube で躓く人が多かったようです。</p>

<p>以下の Issue を参考に、最終的に <code>$ minikube start --vm-driver=hyperkit --bootstrapper=localkube</code> で動いたようです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fkubernetes%2Fminikube%2Fissues%2F2765" title="minikube start hangs forever on mac · Issue #2765 · kubernetes/minikube" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/kubernetes/minikube/issues/2765">github.com</a></cite></p>

<p>ちなみに自分は <code>$ minikube start --vm-driver=hyperkit</code> だけで動きました。</p>

<p>Minikube が動かないので GKE で進める方も多かったようです (サンプルは Minikube と GKE 両方の手順を用意していました)。</p>

<p>後は、イメージの Pull や DB のマイグレーションジョブの実行など、待ち時間が多かったためか、それなりにわいわい話しながら皆で進めてました。</p>

<p>自分は講師役という立ち位置でしたが、感覚的にはどちらかというと大学の講義で手伝いをしていた感じです。</p>

<p>質問があったら近くに行って答えるのを繰り返しつつ、何もない時は Mastodon の GKE 版のサンプル資料を作っていました。</p>

<p>最終的には Mastodon まで動かせた方も多く、サンプルを用意した自分としては非常に嬉しかったです ✨</p>

<p>また、最後に KPT 方式の振り返りをやったのですが、Trello を使ったやり方が個人的にはすごく良かったです。</p>

<p>会社でもやってみたいなと思いました。</p>

<p>振り返りの様子。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180723/20180723125937.png" alt="f:id:tsub511:20180723125937p:plain" title="f:id:tsub511:20180723125937p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>なお、どうやら弊社で月一でやっているもくもく会がたまたま同日開催で場所も<a href="https://basispoint.tokyo/coworking/jimbocho/">神保町</a>と、会場のすぐ側でやっていたようです。</p>

<p><a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> がひっそりとリモートで参加していました 😎</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">02_nginx でこんなエラーが出た <a href="https://twitter.com/hashtag/localhost9292?src=hash&amp;ref_src=twsrc%5Etfw">#localhost9292</a><br><br>$ kubectl apply -f k8s/deployment.yaml<br>Error from server (BadRequest): error when creating &quot;k8s/deployment.yaml&quot;: Deployment in version &quot;v1&quot; cannot be handled as a Deployment: no kind &quot;Deployment&quot; is registered for version &quot;apps/v1&quot;</p>&mdash; Takashi Masuda (@masutaka) <a href="https://twitter.com/masutaka/status/1020547692378783744?ref_src=twsrc%5Etfw">2018年7月21日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">minikube のアップデートで直った！</p>&mdash; Takashi Masuda (@masutaka) <a href="https://twitter.com/masutaka/status/1020553958337605634?ref_src=twsrc%5Etfw">2018年7月21日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>資料の補足</h2>

<p>KPT の P にも上がっていましたが、途中実行待ちが長いときに「これは上手くいっていて単純に時間のかかる処理なのか、そもそも上手く動いていないのか」というお声を頂きました。</p>

<p>それについてはログを見る方法についても明示しておけば良かったと思っています。</p>

<p>Kubernetes でログを見るには <code>$ kubectl logs</code> コマンドを使います。</p>

<pre class="code" data-lang="" data-unlink>$ kubectl logs -f &lt;Pod Name&gt;</pre>


<p>(<code>tail</code> と同じように <code>-f</code> でストリーミングができます)</p>

<p>Job の実行時などにはログを見ながら今何が動いているのかを見るとより分かりやすかったと思います。</p>

<p>また、今回は Pod, Deployment, Service などの概念についての説明をせずにとりあえず手を動かしてみるという会でしたが、その辺りについては Kubernetes.rb #2 が開催されるようなので、興味のある方はぜひご参加ください！ (自分は次回は参加しないですが 🙇)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flocalhost.connpass.com%2Fevent%2F95578%2F" title="Kubernetes.rb #2 (2018/09/01 11:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://localhost.connpass.com/event/95578/">localhost.connpass.com</a></cite></p>

<h2>やってみた感想など</h2>

<p>今回初めて勉強会の主催側として参加したわけですが、感想としてはやって良かった！！と思っています。</p>

<p>そもそも Kubernetes についてはまだ仕事で使っているわけでもなく導入の検討段階ですし、個人で趣味レベルで動かした程度だったので今回の資料作成の中でかなり理解が深まったと思っています。</p>

<p>また、メンタル的にも成長できた気がします。</p>

<p>会ったことのない社外の人たちがいる場に飛び込むのは個人的にはなかなかハードルが高く、今まで勉強会に参加する際は懇親会にはあまり出ないタイプだったのですが、今回の体験で「あ、なんだ。こんな感じなのか」みたいな感覚を得られたので今後は懇親会などに参加して社外の人とも交流する勇気が少し出ました。</p>

<p>それでは最後に改めて、<a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんや <a href="https://twitter.com/katsuhisa__">@katsuhisa__</a> さん、会場を提供してくださった万葉さん、参加してくださった皆様、ありがとうございました  👋</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[新人エンジニア達がメタプログラミング Ruby の読書感想会をやった話]]></title>
        <id>https://developer.feedforce.jp/entry/2018/07/19/000000</id>
        <link href="https://developer.feedforce.jp/entry/2018/07/19/000000"/>
        <updated>2018-07-18T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>はじめまして！今年の4月にフィードフォースに入社した <a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です！Rails に弄ばれる日々を過ごしています。</p>

<p>フィードフォースでは今年の4月と5月に私を含む計3名の新人エンジニア（開発実務未経験者）が入社をし、現在研修を受けている真っ最中です。</p>

<p>研修の一環として、『メタプログラミングRuby』を読んでいたのですが、初心者にはかなり難しい内容の本ということもあり、各自きちんと理解ができているかどうかチェックする意味も込めて社内で読書感想会を開催しました！</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/5102wwx0VzL._SL160_.jpg" class="hatena-asin-detail-image" alt="メタプログラミングRuby 第2版" title="メタプログラミングRuby 第2版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/hatena-blog-22/">メタプログラミングRuby 第2版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Paolo Perrotta,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2015/10/10</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/4873117437/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>もちろん新人エンジニア達にとって技術書の読書感想会など初めてなので、過去社内で行われていた以下の記事を参考に。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F21%2F191055" title="第一回社内読書感想会(テスト駆動開発)を実施しました - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2017/11/21/191055">developer.feedforce.jp</a></cite></p>

<h2>で、どうだったの？</h2>

<h3>結論</h3>

<p><b>めっちゃよかったです。</b></p>

<h3>今回の進め方</h3>

<p>まず、1日でやるには文量的に難しいと判断し、5日に分けて毎日1時間、1章ずつ進めていくことに。（それでも時間をオーバーしてしまうことが稀によくありました）</p>

<p>当日は以下のような進め方をしました。</p>

<ol>
<li>事前に書いてきた付箋を全員で貼る</li>
<li>カテゴライズする</li>
<li>各自書いてきた付箋の内容を説明していく</li>
<li>議題の優先度を決める</li>
<li>ディスカッションする</li>
<li>まとめをする</li>
</ol>


<h3>『メタプログラミングRuby』読書感想会のホワイトボード</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20180719/20180719113422.jpg" alt="f:id:daido1976:20180719113422j:plain" title="f:id:daido1976:20180719113422j:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">個人的に一番盛り上がった3章（メソッド）のホワイトボード</span></p>

<h3>良かった点</h3>

<h4>理解が曖昧な部分が明確になった</h4>

<p>本を読んで自分では理解できたと思っていても、それを言語化して他人に伝えようとするといかに理解できていないかわかるもの。今回の読書感想会でもまさにその経験ができ、自分が曖昧に理解していた部分が明確になり、今後どこを学んでいくべきかをはっきりさせられたように思います。</p>

<h4>他メンバーの感想や見解を聞けた</h4>

<p>新人エンジニアとはいえ数ヶ月の研修を経て、それぞれの考え方や興味を持つポイントにも個性が出始めてきています。同じ『メタプログラミングRuby』という本を読んでも、Ruby の内部処理に興味津々なメンバー、用語の意味に執着するメンバー（私です）、具体的なコード例を知りたがるメンバー、などそれぞれ違った観点の感想や見解が出てきてとても面白かったです。</p>

<h4>先輩エンジニアの方々に知見を共有してもらえた</h4>

<p>読書感想会を開催する前週に社内向けに「ご興味ある方は覗きに来てください」と呼びかけたところ、当日先輩エンジニアの方々が参加してくださり、我々新人エンジニア達の疑問点を図や具体的なコード例を用いてどんどん解消してくれました。<b>正直これが一番のメリットだったように思います。</b></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20180719/20180719140749.png" alt="f:id:daido1976:20180719140749p:plain" title="f:id:daido1976:20180719140749p:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">Qiita:Team で呼びかけてる様子</span></p>

<h3>反省点</h3>

<ul>
<li>最初の頃はだいぶ時間をオーバーしてしまった（ちなみに初回は1時間予定のところ、2.5時間もかかってしまいました…）</li>
<li>本を読んでから読書感想会を開催するまで少し期間が空いてしまい、読んだ内容をすっかり忘れてしまっていた（主に私の話ですが…）</li>
</ul>


<p>ただ、基本的には良いことずくめの会だと感じたので、今後も機会があれば積極的に開催していきたいと思います！</p>

<h3>最後に</h3>

<p>今回は入社したばかりの新人エンジニア達が主体となって開催された『メタプログラミングRuby』読書感想会のご紹介をしました！</p>

<p>最後に私が本書を読んで一番感銘を受けた一文を引用して終わりたいと思います。</p>

<blockquote><p>「（前略）メタプログラミングというものは存在しない。すべてはただのプログラミングじゃ。（後略）」p. 171</p></blockquote>

<p>それでは、またお会いしましょう ＾＾</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20180719/20180719142700.jpg" alt="f:id:daido1976:20180719142700j:plain" title="f:id:daido1976:20180719142700j:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">新人エンジニア達のメタプロRuby </span></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 分でわかる Ruby Guild]]></title>
        <id>https://developer.feedforce.jp/entry/2018/06/25/100000</id>
        <link href="https://developer.feedforce.jp/entry/2018/06/25/100000"/>
        <updated>2018-06-25T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>RubyKaigi 2018 から早 3 週間。この記事を読んでいる方でも参加された方が沢山いるのではないかと思います。
個人的な感想ですが、今年は例年以上に充実していたんじゃないかな、と大満足です✨</p>

<p>感想記事はこちらの記事に詳しくまとめられています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F06%2F22%2F141314" title="RubyKaigi 2018 に行ってきたので今更所感などをまとめました - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/06/22/141314">developer.feedforce.jp</a></cite></p>

<p>さて、今回の RubyKaigi の発表では笹田さんから Guild の進捗についての発表がありました。</p>

<p><a href="http://www.atdot.net/~ko1/activities/2018_rubykaigi2018.pdf"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621190557.png" alt="Guild Prototype" /></a></p>

<p>この Guild の概要について社内のメンバーに解説したところ中々に好評だったので、今回の記事では Guild とはどういうものなのかを超ざっくりですがご紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#そもそも論なぜ-Guild-が必要なのか">そもそも論。なぜ Guild が必要なのか？</a></li>
    <li><a href="#Guild-と-Thread-の関係">Guild と Thread の関係</a></li>
    <li><a href="#Guild-間のデータの受け渡し">Guild 間のデータの受け渡し</a></li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h1 id="そもそも論なぜ-Guild-が必要なのか">そもそも論。なぜ Guild が必要なのか？</h1>

<p>ご存知の方も多いかと思いますが、現在の Ruby のスレッド処理はマルチコアに対応していません。
最近の PC の殆どにはマルチコア CPU が搭載されていると思いますが、１つの Ruby プロセスが利用できるコアは１つだけです。つまり、並列処理と言っても複数の処理を時間分割して実行しているだけという事になります。 Guild は Ruby でマルチコアを使った並列処理を実現するために必要な機能となります。</p>

<p>ちなみに Guild という名称はあくまでコードネームであるため、リリース時には別の名称になると思われます。</p>

<h1 id="Guild-と-Thread-の関係">Guild と Thread の関係</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621191002.png" alt="f:id:ryz310:20180621191002p:plain" title="f:id:ryz310:20180621191002p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>上図のように Guild に Thread が内包される関係になり、プロセス全体でいうと <code>RubyVM → Guild → Thread → Fiber</code> という関係になります。
これを踏まえて、 Guild 導入の前後を図に起こすと以下のようになります（雑な図で恐縮です。。🙇）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621183710.jpg" alt="f:id:ryz310:20180621183710j:plain" title="f:id:ryz310:20180621183710j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>同一 Guild 内の Thread は従来どおりシングルコアで動作します。しかし、 Guild を複数定義することで、それぞれの Guild に所属する Thread は並列に動作するようになります。
Guild が実装されていない現在の Ruby は <code>RubyVM → Thread → Fiber</code> という関係になりますが、言い換えればこれは単一の Guild で作られた Ruby プログラムとみなせると思います。
このことから、Guild が実装されても後方互換性は保たれるのではないか予想されます。</p>

<h1 id="Guild-間のデータの受け渡し">Guild 間のデータの受け渡し</h1>

<p>Guild 間でのデータ受け渡しについて、 Shareable Object と Non-Shareable Object という概念が出てきます。
詳細は <a href="http://www.atdot.net/~ko1/activities/2018_rubykaigi2018.pdf">発表スライド</a> を見てもらうとして、大雑把に両者の違いを説明すると以下のようになります。</p>

<ul>
<li>Shareable Object

<ul>
<li>Guild 間でデータ共有が可能なオブジェクト</li>
<li>基本的に値が変化しない Immutable なデータがこれに該当する

<ul>
<li>Const や Freeze したデータのこと</li>
<li>ただし Array や Hash は Freeze しても内側のデータまで Freeze されないので、 Shareable とはならないので注意

<ul>
<li>これについては Deep Freeze を実装するかも、とのこと。</li>
</ul>
</li>
</ul>
</li>
<li>他にも Isolated Proc という、ブロックの外側の変数へのアクセスを禁止した Proc もこれに該当しますが、詳細は割愛</li>
</ul>
</li>
<li>Non-Shareable Object

<ul>
<li>Guild 間でデータ共有が禁止されているオブジェクト

<ul>
<li>データの受け渡しができない訳ではない（詳しくは後述）</li>
</ul>
</li>
<li>主に一般的な変数のこと</li>
<li>単一の Guild にのみ所属する</li>
</ul>
</li>
</ul>


<p>Shareable Object は Immutable (値が変化しない)オブジェクトなので、並列処理中にデータを共有しても問題ないことはイメージしやすいかと思います。
重要なのは Non-Shareable Object の受け渡しで、以下に示す 2 つの方法があります。</p>

<ul>
<li>COPY

<ul>
<li>データを Guild 間で共有するのではなく、別の Guild にコピーして渡す</li>
</ul>
</li>
<li>MOVE

<ul>
<li>別の Guild にデータを渡すと、元の Guild からは見えなくなる</li>
</ul>
</li>
</ul>


<p>COPY は参照渡しではなく実体渡しなので、１つのデータに対して同時アクセスすることにはならず、 Thread-Safe なやりとりになります。
一方の MOVE は、データを別の Guild に渡すと元の Guild からはアクセスできなくなる、カットアンドペーストのような振る舞いになります。
こちらも同時アクセスが発生しないため、 Thread-Safe なやりとりになります。</p>

<p>ちなみに MOVE より COPY が利用されるケースが多いだろうとのことでした。</p>

<h1 id="おわりに">おわりに</h1>

<p>RubyKaigi 2018 で発表された Guild について超ざっくりと説明してみました。間違ってるところがあればご指摘頂けますと幸いです🙏
なお、開発中の仕様なので実装までにいくつかの変更があるかもしれません。</p>

<p>想像ですが、 Sidekiq とか Puma のような Thread ベースのサービスは Guild が導入されたら劇的にパフォーンスが良くなるかもしれませんね。
これからの Ruby の可能性に期待が高まります✨</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[先期の MVP に選ばれた]]></title>
        <id>https://developer.feedforce.jp/entry/2018/06/15/130000</id>
        <link href="https://developer.feedforce.jp/entry/2018/06/15/130000"/>
        <updated>2018-06-15T04:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>お元気にしてますか。増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。</p>

<p>先週の金曜日にフィードフォースにおける 2017 年度（2017年6月 〜 2018年5月）の納会が行われ、その中で初の MVP を受賞することができました。🎉</p>

<p><figure class="figure-image figure-image-fotolife" title="喜びのコメントを表明中のしがないますたか"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180608/20180608194920.jpg" alt="f:id:masutaka26:20180608194920j:plain" title="f:id:masutaka26:20180608194920j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>喜びのコメントを表明中のしがないますたか</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="チーム賞ももらったヨ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180614/20180614005507.jpg" alt="f:id:masutaka26:20180614005507j:plain" title="f:id:masutaka26:20180614005507j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>チーム賞ももらったヨ</figcaption></figure></p>

<p>会社で賞を頂いたのは 4 年前のルーキー賞以来です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2014-06-13-1.html" title="会社でルーキー賞に選ばれた" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://masutaka.net/chalow/2014-06-13-1.html">masutaka.net</a></cite></p>

<p><del>四年寝太郎としては、取るべくして取った賞だと思いました（ｷﾘｯ</del></p>

<p>正直なところ、頑張ったで賞くらいはもらえたりして？とボンヤリ思っていましたが<a href="#f-3841f537" name="fn-3841f537" title="そのような賞はありません">*1</a>、まさか MVP とは思いもよらず、発表の瞬間は素で驚きました。</p>

<p>2017 年度は以下のチームに所属していました。</p>

<ul>
<li>2017 年 6 月 〜 2018 年 3 月

<ul>
<li><a href="https://dfplus.feedforce.jp/">DF PLUS</a>（社内では DF Maker と呼ばれる）</li>
</ul>
</li>
<li>2018 年 4 月 〜 2018 年 5 月

<ul>
<li><a href="https://ecbooster.jp/">EC Booster</a></li>
</ul>
</li>
</ul>


<p>DF Maker ではサービスの信頼性向上にひたすら努める毎日でした。ECS でとんでもない量のエラーが発生して、３連休の間は暇を見つけてエラーログを確認してたなー（遠い目）。</p>

<p>EC Booster ではチームビルディングから始めました。👇️以下の記事にまとまっています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F05%2F21%2F150000" title="『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/05/21/150000">developer.feedforce.jp</a></cite></p>

<p>どちらにも共通することが、2 年目の優秀な若者と仕事ができたことです。私が若者を引っ張っていくぜーという感じではなくむしろ逆で、すでにサービスを知り尽くした若者から学ぶ日々でした（今もそうです）。</p>

<p>その中で、「こうすればチーム開発がドライブするだろう」や「こうすればサービスの質を高められるだろう」というアイディアを出し、実践し、小さな改善と失敗を繰り返したことが、結果としてチームの状況を良くしたりサービスの質を高めることが出来たのだと思います（現在進行系）。</p>

<p>もちろん、一緒に働くことができたチームの皆さんの協力があっての賞です。ありがとうございます。🙏</p>

<p>それではまた 4 年後にお会いしましょう💤</p>
<div class="footnote">
<p class="footnote"><a href="#fn-3841f537" name="f-3841f537" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">そのような賞はありません</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2018/05/21/150000</id>
        <link href="https://developer.feedforce.jp/entry/2018/05/21/150000"/>
        <updated>2018-05-21T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。発表が無事終わり、何かゲームでも買おうかなと思ってます。</p>

<p>さて、フィードフォースでは毎週金曜日 16:00 から、社内技術勉強会を開催しています。当番制の持ち回りで技術に関連したことを発表します。</p>

<p>先週金曜日は私の当番で『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をしました。</p>

<p>技術チーム以外の方もたくさん聞きに来てくれて、ありがたかったです。🙏</p>

<h2>発表の内容</h2>

<script async class="speakerdeck-embed" data-id="978c7016bb7b473693f547116e8e704f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p><a href="http://developer.feedforce.jp/entry/2017/10/16/150000">前回</a>含めて、これまでの発表は全てコードが登場していました。今回のようなコードが登場しないマネジメントの話は、内容が拡散しがちで難しかったです。結局まとまりませんでした...。</p>

<p>今回は敢えて後から読めるプレゼン資料にしました。なのでプレゼン資料としては冗長な書き方になっています。</p>

<p>まとめるとこんな内容です。</p>

<ul>
<li>コミュニケーションの不確実性を解消することが、マネジメント（やチームビルディング）に必要なはず</li>
<li>そのため自ら場に飛び込んで、情報の非対称性を解消していった</li>
<li>これからもソフトウェアを書くこと以外に課題解決の手段があればやっていく</li>
<li>そして徐々にマネジメントにかける時間を減らし、コードを書く時間を増やしていく</li>
</ul>


<p>今思えば、話し忘れたことがポロポロと出てきます。</p>

<ul>
<li>そもそもチームメンバーは自走できる方々で、ホワイトボード整理の時も方針だけ話したら勝手に整理されていった

<ul>
<li>私は方向性を決めただけ</li>
</ul>
</li>
<li>チームに入りたてのときは少々オーバーリアクションを心がけ、徐々に普通に戻していく。

<ul>
<li>何考えている人か分かってもらうことで、その後のコミュニケーションをスムーズにする</li>
</ul>
</li>
</ul>


<p>完璧な発表などありませんね。</p>

<h2>発表の感想</h2>

<p>付箋紙に感想を書いてくれました。<i class="blogicon-comment" aria-hidden="true"></i> は私からのコメントです。</p>

<ul>
<li>ジョハリの窓の紹介ありがとうございます。勉強になります！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 私も『<a href="https://www.amazon.co.jp/dp/B079TLW41L/">エンジニアリング組織論への招待</a>』で初めて知りました。数年前にプロダクトオーナーの学習をした以来ですから...</li>
</ul>
</li>
<li>自分はまだマネジメントからは程遠い存在なのですが、話しかけやすいオーラを出すことや、くだらないと思うことも質問することなどは、今すぐにでも実行出来るし、目指すことだと思いました。ありがとうございました！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> はい、個々が意識することが自走するチームや、個々のリーダーシップに繋がると思います</li>
</ul>
</li>
<li>共感できる良い話でした

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> あざす！</li>
</ul>
</li>
<li>初公開の画像が見られて良かったです

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> お粗末さまでした...</li>
</ul>
</li>
<li>早くインフラ朝会にもどって来てください

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 今回の件が落ち着いたらインフラ朝会にもどりますよ。待っていてくださいね！</li>
</ul>
</li>
<li>必要な情報とそうでもない情報の整理はものすごい HP/MP を消費しそう

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうですね...</li>
</ul>
</li>
<li>マネジメントの成果はすぐには結果に現れないかも？どの位の頻度で振り返るべきなのか？

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> イテレーションごとの振り返りで、チームを観察すれば良いです。マネジメントの成果かどうかは重要ではないと思います</li>
</ul>
</li>
<li>◯◯を支える技術

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 次回はコードの話をしよう...</li>
</ul>
</li>
<li>知識科学やり直さなきゃ・・・

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 私は今回で終了ですw</li>
</ul>
</li>
<li>チームの問題点を発見して、それを解決する手段を選ばないスタンスがすごい

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> もう必死ですよ（笑）</li>
</ul>
</li>
<li>「内心ではなく行動に注目する」は、認知行動療法などでも使われていますね（最近のトレンド？）

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> へぇ〜</li>
</ul>
</li>
<li>なかなかボリュームある資料でしたが、作るのにどれくらいかかったのか気になります

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 先週土曜日の夜に草稿を作り「これでいけそう」という感触を得て、今週は平日の夜２日くらいで整理をしました。話す内容については一ヶ月くらい前から頭の中で考えたり、『<a href="https://www.amazon.co.jp/dp/B079TLW41L/">エンジニアリング組織論への招待</a>』を全部読んだりしてました</li>
</ul>
</li>
<li>最近疲弊してそうで心配でしたが、今日の発表で色々アウトプットしてもらって安心しました

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 気にかけて頂いてありがとうございます。これからも安心安全のマスタカをお届けして参ります</li>
</ul>
</li>
<li>うなずきすぎて首もげる

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ありがとうございます。参考になったことが各チームに還元されるとうれしいです</li>
</ul>
</li>
<li>マスタカさん自体はマネジメントよりコード書く方が好きなんでしょうか？

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうですね。引き篭もってコードを書きたいです</li>
</ul>
</li>
<li>ますたかさんのおかげでチームがちゃんと回りはじめた気がします

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そう言って頂けるとうれしいです。今がスタート地点だと捉え、精進してまいります</li>
</ul>
</li>
<li>増田さんが参加されてから何かがスムーズになった実感があります（情報や知識だけでなく）

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> うれしいですね。マネジメントは空気のような存在が良いと考えています</li>
</ul>
</li>
<li>マネジメントってどうやるか？のテクニックの面もあるけど、誰がやるか？の面も大きい気がしてます

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうですね。例えば入ったばかりの職場だと、信頼関係を築くことから始まると思います。今回は同じ会社ということと、過去に一緒に働いたメンバーがいたことに助けられました</li>
</ul>
</li>
<li>EC Booster のこれからに期待しています！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 💪</li>
</ul>
</li>
<li>「場に飛び込む」「正しく伝わったと思わない」肝に銘じます！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> よろしくお願いします！</li>
</ul>
</li>
<li>「エンジニアが発見した課題の解決フロー」読みたいです

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> Slack で書いたとおり、割と普通のフローです。発表で話したエンジニア以外の方からの依頼と整合性を合わせてこうしました。まだ始めて間もなく 1 イテレーションも回してない状態ですがね...

<ol>
<li> Issue を作ると EC Booster waffle.io の Planning カラムに入る</li>
<li> 次の開発ミーティングで Planning カラムを空にする</li>
<li> スプリントでは Sprint Backlog に集中する</li>
</ol>
</li>
</ul>
</li>
<li>feedforce だとマネジメントオンリーじゃなくて、開発+マネジメントが最強という話を昨日クリストフとした

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 最強かは分かりませんが、コードも分かったほうが捗ると思います</li>
</ul>
</li>
<li>仕事でもプライベートでも、コミュニティ内でオープンな発信をする人が多いと、円滑に物事が進みやすいなと考えられました。その逆もまた然りだったので...。かつ、人に伝えるときは具体的にするというのも大切かと思いました

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 他人は自分でないので、分かりやすく具体的なコミュニケーションが大事ですね</li>
</ul>
</li>
<li><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180519/20180519155210.jpg" alt="masutaka by yousuke" title="f:id:masutaka26:20180519155210j:plain" class="hatena-fotolife" itemprop="image"></span>

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> え、誰？（困惑）</li>
</ul>
</li>
</ul>


<h2>最後に</h2>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51zMvVL4MeL._SL160_.jpg" class="hatena-asin-detail-image" alt="エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング" title="エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/">エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 広木大地</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4774196053/hatena-blog-22" target="_blank">この商品を含むブログ (2件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>良かったぞ。「エンジニア組織論」ではないことに注目。プロダクトオーナーやエンジニア以外の職種の方にも是非読んでもらいたいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Datadog で dd-agent に root 権限を与えずにプロセスがオープンしているファイルディスクリプタ数のメトリクスを取得する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/05/11/190000</id>
        <link href="https://developer.feedforce.jp/entry/2018/05/11/190000"/>
        <updated>2018-05-11T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。
ここ数日気温の寒暖差が凄いですね。昨日あまりにも寒すぎて一度しまった冬用の布団を引っ張りだしたら、また気温が上がってきたので片付けることになりそうです。</p>

<p>最近、Datadog でプロセスがオープンしているファイルディスクリプタ数のメトリクスを取る必要があり、色々と考えた結果良い方法を思いついたため、今回ご紹介します。</p>

<h2>Datadog 標準の <code>system.processes.open_file_descriptors</code> メトリクスを取るには root 権限が必要</h2>

<p>Datadog では標準で、Process Check という機能を使うことで <code>system.processes.open_file_descriptors</code> メトリクスを取ることができます。</p>

<blockquote><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180511/20180511150551.png" alt="f:id:tsub511:20180511150551p:plain" title="f:id:tsub511:20180511150551p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://docs.datadoghq.com/integrations/process/#metrics">https://docs.datadoghq.com/integrations/process/#metrics</a></p></blockquote>

<p>ただし、説明文にも書いてある通り <code>dd-agent</code> ユーザーが実行したプロセスしかこのメトリクスを取得することが出来ません。</p>

<p>そのため、例えば Rails アプリケーションを動かすために <code>puma</code> プロセスを <code>dev</code> ユーザーで動かしていた場合、以下のような設定を書いても <code>system.processes.open_file_descriptors</code> メトリクスを取得することが出来ません。</p>

<pre class="code" data-lang="" data-unlink>init_config:

instances:
  - name: puma_worker
    search_string: [&#34;puma: cluster worker&#34;]
    exact_match: False</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180511/20180511151024.png" alt="f:id:tsub511:20180511151024p:plain" title="f:id:tsub511:20180511151024p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>これは何故かというと、プロセスがオープンしているファイルディスクリプタ数を取得するためには <code>/proc/&lt;PID&gt;/fd</code> 以下にアクセスする必要があるためです。</p>

<p><code>/proc/&lt;PID&gt;/fd</code> ディレクトリはそのプロセスを実行したユーザーにしか read 権限がありません。</p>

<pre class="code" data-lang="" data-unlink>$ ls -al /proc/1/fd
ls: cannot open directory /proc/1/fd: Permission denied

$ sudo ls -al /proc/1 | grep fd
dr-x------.   2 root root 0 Apr 18 06:58 fd
dr-x------.   2 root root 0 May 11 06:12 fdinfo</pre>


<p>そのため、<code>dd-agent</code> はそのメトリクスを取得できないというわけです。</p>

<p>ただし、<code>dd-agent</code> に root 権限を与えることで、閲覧は可能になります。
公式ドキュメントではそのやり方が提示されていますが、セキュリティ的にリスクがあるため、推奨はされていません。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.datadoghq.com%2Fagent%2Ffaq%2Fwhy-don-t-i-see-the-system-processes-open-file-descriptors-metric" title="Why don&#39;t I see the &#39;system.processes.open_file_descriptors&#39; metric?" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.datadoghq.com/agent/faq/why-don-t-i-see-the-system-processes-open-file-descriptors-metric">docs.datadoghq.com</a></cite></p>

<p>さて、この記事の内容は <code>dd-agent</code> に root 権限を与えずに <code>system.processes.open_file_descriptors</code> メトリクスを取得するということでしたが、どうやれば良いのでしょう？</p>

<h2>DogStatsD を使う</h2>

<p>Datadog には DogStatsD という仕組みがあります。</p>

<p>DogStatsD は任意のカスタムメトリクスを Datadog に送る方法の一つです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.datadoghq.com%2Fdevelopers%2Fdogstatsd%2F" title="DogStatsD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.datadoghq.com/developers/dogstatsd/">docs.datadoghq.com</a></cite></p>

<p>通常は以下のような言語毎のライブラリを公式が提供してくれているため、こちらを使うことで任意のカスタムメトリクスを送ることができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDataDog%2Fdatadog-go" title="DataDog/datadog-go" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/DataDog/datadog-go">github.com</a></cite></p>

<p>DogStatsD を通してメトリクスを送る際は、その送り側のプロセスは任意のユーザーで実行できます。</p>

<p>そのため、上記の例にあったように <code>dev</code> ユーザーが <code>puma</code> プロセスを実行している場合は <code>dev</code> ユーザーで DogStatsD にメトリクスを送るプロセスを実行すれば、
同じ <code>dev</code> ユーザーのため <code>/proc/&lt;PID&gt;/fd</code> への read 権限があります。</p>

<p>思いついてみれば簡単なことでしたね。</p>

<h2>でもプログラミング言語で実装するのは面倒じゃない？</h2>

<p>少し本題とは反れますが、もう少しお手軽に DogStatsD にカスタムメトリクスを送りたいな、とも思います。</p>

<p>そこで、調べてみたところ「DogStatsD には単純に専用のフォーマットで UDP パケットを送るだけで良い」ということを知りました。</p>

<blockquote><p>On Linux:</p>

<p><code>
vagrant@vagrant-ubuntu-14-04:~$ echo -n "custom_metric:60|g|#shell" &gt;/dev/udp/localhost/8125
</code></p>

<p>or</p>

<p><code>
vagrant@vagrant-ubuntu-14-04:~$ echo -n "custom_metric:60|g|#shell" | nc -4u -w0 127.0.0.1 8125
</code></p>

<p><a href="https://docs.datadoghq.com/developers/dogstatsd/#sending-metrics">https://docs.datadoghq.com/developers/dogstatsd/#sending-metrics</a></p></blockquote>

<p>上記のように、DogStatsD のエンドポイントである <code>localhost:8125</code> に <code>custom_metric:60|g|#shell</code> のようなフォーマットで UDP パケットを送ってやれば良いです。</p>

<p>そのため、プロセスがオープンしているファイルディスクリプタ数のカスタムメトリクスを送るには、以下のコマンドを実行すれば良いです。</p>

<pre class="code" data-lang="" data-unlink>$ echo -n &#34;open_file_descriptors.puma_worker:$(ls /proc/$(pgrep -f -u dev &#39;puma: cluster worker&#39; | head -1)/fd/ | wc -l):g&#34; | nc -u -4 localhost 8125</pre>


<p>上記のコマンドを <code>crontab</code> などで毎分実行してやれば <code>open_file_descriptors.puma_worker</code> メトリクスを送ることができます。</p>

<p>ただし、実際に本番で利用しているコマンドはそこまで単純ではなく、以下のようなシェルスクリプトを書いて実行しています。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/sh</span>

<span class="synStatement">if [</span> <span class="synPreProc">$#</span> <span class="synStatement">-ne</span> <span class="synConstant">2</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Require 2 arguments</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synIdentifier">PROCESS_NAME</span>=<span class="synPreProc">$1</span>
<span class="synIdentifier">USER</span>=<span class="synPreProc">$2</span>

<span class="synComment"># pgrep でシェルスクリプト自身のプロセスがマッチしてしまうため `grep -v` で除外する</span>
<span class="synComment"># CentOS 6 では pgrep に -a オプションがないため注意</span>
<span class="synComment">#</span>
<span class="synComment"># 複数のプロセスが見つかっても無視する</span>
<span class="synIdentifier">PROCESS</span>=<span class="synPreProc">$(</span><span class="synSpecial">pgrep -f -a -u </span><span class="synStatement">&quot;</span><span class="synPreProc">${USER}</span><span class="synStatement">&quot;</span><span class="synSpecial"> </span><span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS_NAME}</span><span class="synStatement">&quot;</span><span class="synSpecial"> | </span><span class="synStatement">grep</span><span class="synSpecial"> -v </span><span class="synStatement">&quot;</span><span class="synPreProc">$0</span><span class="synStatement">&quot;</span><span class="synSpecial"> | head </span><span class="synConstant">-1</span><span class="synSpecial"> | cut -f </span><span class="synConstant">1</span><span class="synSpecial"> -d </span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synPreProc">)</span>

<span class="synStatement">if [</span> <span class="synStatement">-z</span> <span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS}</span><span class="synStatement">&quot;</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS_NAME}</span><span class="synConstant"> does not exists</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synStatement">ls</span> /proc/<span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS}</span><span class="synStatement">&quot;</span>/fd/ | wc <span class="synSpecial">-l</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synStatement">if [</span> <span class="synPreProc">$#</span> <span class="synStatement">-ne</span> <span class="synConstant">3</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Require 3 arguments</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synIdentifier">METRIC_NAME</span>=<span class="synPreProc">$1</span>
<span class="synIdentifier">VARUE</span>=<span class="synPreProc">$2</span>
<span class="synIdentifier">METRIC_TYPE</span>=<span class="synPreProc">$3</span>

<span class="synStatement">echo</span><span class="synConstant"> -n </span><span class="synStatement">&quot;</span><span class="synPreProc">${METRIC_NAME}</span><span class="synConstant">:</span><span class="synPreProc">${VARUE}</span><span class="synConstant">|</span><span class="synPreProc">${METRIC_TYPE}</span><span class="synStatement">&quot;</span><span class="synConstant"> </span>| nc <span class="synSpecial">-u</span> <span class="synConstant">-4</span> localhost <span class="synConstant">8125</span>
</pre>




<pre class="code" data-lang="" data-unlink>$ crontab -l
* * * * * /path/to/send-to-dogstatsd.sh open_file_descriptors.puma_cluster_worker $(/path/to/get-open-fd.sh &#34;puma: cluster worker&#34; dev) g &gt; /dev/null</pre>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAWS DAYS 2018 に行ってきた]]></title>
        <id>https://blog.tsub.me/post/jaws-days-2018/</id>
        <link href="https://blog.tsub.me/post/jaws-days-2018/"/>
        <updated>2018-03-17T06:16:55.000Z</updated>
        <summary type="html"><![CDATA[<p>社内勉強会の準備などで忙しく、レポートを書くのが遅れてしまいましたが、先週の 03/10 (土) に <a href="https://jawsdays2018.jaws-ug.jp/">JAWS DAYS 2018</a> へ行ってきました。</p>

<p><img src="https://gyazo.com/5dafdbb66c5c6fd5a78aafeb83bd49c8.png" alt="image" /></p>

<p>今回が初参加でしたが、AWS ユーザーグループのお祭りという感じですごく盛り上がっていて楽しいイベントでした。</p>

<p>会社の同僚も 4 人ぐらい参加してました。</p>

<p>自分が参加したセッションと聞いた感想やメモをつらつら書いていきます。</p>

<p>(ただし Keynote は省きます)</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[m3.medium のインスタンスの CPU 負荷が高かったため t2.medium へ移行した]]></title>
        <id>https://developer.feedforce.jp/entry/2018/03/02/155020</id>
        <link href="https://developer.feedforce.jp/entry/2018/03/02/155020"/>
        <updated>2018-03-02T06:50:20.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。
最近頭痛がするのでヨガを始めましたが、効果が出ているのかよく分かりません。</p>

<p>今回は m3.medium のインスタンスの CPU 負荷が高かったため t2.medium へ移行したら解決した話をします。</p>

<h2>m3.medium のインスタンスの CPU 負荷が高かった</h2>

<p>年始あたりから、週に数回ほど決まった時間に Mackerel でアラートが出ていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302143106.png" alt="f:id:tsub511:20180302143106p:plain" title="f:id:tsub511:20180302143106p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>CPU の Steal 値が異常に高く、全体としての使用率が 90 % を超えていました。</p>

<p>ずっと原因が分からず、最初は Meltdown と Spectre のパッチを適用した関係で性能が低下したんじゃないか、などを疑っていました。</p>

<p>しかし、ある時全く別の作業をしていたときに別のロールのインスタンスで同様に CPU 負荷が上がり、どちらも <code>m3.medium</code> というインスタンスタイプが共通していたことからなんとなくググってみたところ、以下の記事に辿り着きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftoritori0318.hatenadiary.jp%2Fentry%2F20140312%2F1394634304" title="microインスタンスはlimitかけると大きくパフォーマンスが向上する（※再追記あり） - アルパカDiary Pro" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://toritori0318.hatenadiary.jp/entry/20140312/1394634304">toritori0318.hatenadiary.jp</a></cite></p>

<p>どうやら、<code>m3.medium</code> というインスタンスタイプのみ CPU の Steal が発生しやすいようです。</p>

<p>他にも同様の報告をしている記事をいくつか見つけました。</p>

<ul>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=146585">https://forums.aws.amazon.com/thread.jspa?threadID=146585</a></li>
<li><a href="http://techblog.bonobos.com/ec2/sysadmin/devops/2014/10/02/the-m3.medium-is-terrible.html">High CPU steal on EC2 m3.medium &ndash; Bonobos Tech Blog</a></li>
</ul>


<p>情報が 2014 年と古いですが、現に同様の事象が発生しているため、当時と変わっていない可能性が高いです。</p>

<p>そのため、インスタンスタイプを変更することを検討しました。</p>

<h2>他のインスタンスタイプを検討</h2>

<p><code>m3.medium</code> から別のインスタンスタイプに変更するに辺り、どのインスタンスタイプを選択するか、まずはコスト面で比較しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302145249.png" alt="f:id:tsub511:20180302145249p:plain" title="f:id:tsub511:20180302145249p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcalculator.s3.amazonaws.com%2Findex.html" title="Amazon Web Services Simple Monthly Calculator" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://calculator.s3.amazonaws.com/index.html">calculator.s3.amazonaws.com</a></cite></p>

<p>順当に行けば <code>m4</code> ファミリーが妥当なところですが、<code>m4</code> ファミリーは medium サイズは提供していないため、費用がそれなりに増えてしまいます。</p>

<p>この中で、<code>m3.medium</code> よりも安い <code>t2.medium</code> に目を付けました。</p>

<p><code>t2.medium</code> は <code>m3.medium</code> に比べると、 vCPU が 1 コア増え、メモリも 0.25 GB 増える上に料金が安くなるというかなりお得なインスタンスタイプです。</p>

<p><strong><code>m3.medium</code></strong></p>

<blockquote><table>
<thead>
<tr>
<th>インスタンスファミリー </th>
<th> インスタンスタイプ </th>
<th> プロセッサアーキテクチャ </th>
<th> vCPU </th>
<th> メモリ (GiB) </th>
<th> インスタンスストレージ（GB） </th>
<th> EBS 最適化利用 </th>
<th> ネットワークパフォーマンス</th>
</tr>
</thead>
<tbody>
<tr>
<td>汎用 </td>
<td> m3.medium </td>
<td> 64 ビット </td>
<td> 1 </td>
<td> 3.75 </td>
<td> 1 x 4 </td>
<td> - </td>
<td> 中</td>
</tr>
</tbody>
</table>


<p><a href="https://aws.amazon.com/jp/ec2/previous-generation/">https://aws.amazon.com/jp/ec2/previous-generation/</a></p></blockquote>

<p><strong><code>t2.medium</code></strong></p>

<blockquote><table>
<thead>
<tr>
<th>モデル </th>
<th> vCPU </th>
<th> CPU クレジット/時 </th>
<th> メモリ (GiB) </th>
<th> ストレージ</th>
</tr>
</thead>
<tbody>
<tr>
<td>t2.medium </td>
<td> 2 </td>
<td> 24 </td>
<td> 4 </td>
<td> EBS のみ</td>
</tr>
</tbody>
</table>


<p><a href="https://aws.amazon.com/jp/ec2/instance-types/">https://aws.amazon.com/jp/ec2/instance-types/</a></p></blockquote>

<p>ただ、ここで安易に <code>t2.medium</code> を選択してはいけません。
<code>t2</code> ファミリーは「バースト可能パフォーマンスインスタンス」という特別な性質があります。</p>

<h2>T2 インスタンスについて</h2>

<p>T2 インスタンスについて、今までふわっとした理解しかなかったため、この機会に AWS のドキュメントをちゃんと読んでみました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-instances.html" title="T2 インスタンス - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-instances.html">docs.aws.amazon.com</a></cite></p>

<p>結論から言うと、弊社のサービスの性質上、決まった時間に Sidekiq のジョブがまとまって大量に実行されるため、普段は CPU 使用率は低く、ある時間だけ CPU 使用率が高くなるというまさに T2 インスタンスがピッタリなケースでした。</p>

<h4>CPU クレジット</h4>

<p>T2 インスタンスには <a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html">CPU クレジット</a>という概念があります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-credits-baseline-concepts.html" title="CPU クレジットおよびベースラインパフォーマンス - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html">docs.aws.amazon.com</a></cite></p>

<p>1 CPU クレジットは 100 % の CPU 使用率を 1 分間稼働させることができます。</p>

<p><code>t2.medium</code> は CPU クレジットが 1 時間あたり 24 なので、100 % の CPU 使用率を 24 分間、あるいは 50 % の CPU 使用率を 48 分間、40 % の CPU 使用率なら 60 分間稼稼働させることができることになります。(ただし、<code>t2.medium</code> は vCPU が 2 コアなので、実際には 20 % の CPU 使用率で 60 分間の稼働)</p>

<p>実際の CPU 使用率は平均で 20 % 以下に収まっていることが多い (たまにスパイクはする) ので、CPU クレジットが 24 ならまず問題ないです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302150357.png" alt="f:id:tsub511:20180302150357p:plain" title="f:id:tsub511:20180302150357p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>この 40 % (20 %) という値を<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html#baseline_performance">ベースラインパフォーマンス</a>と呼び、これを超えて CPU を使用することを「バースト」と呼びます。</p>

<p>また、ベースラインパフォーマンスよりも CPU 使用率が下回っていた場合、クレジットバランスというものに余分な CPU クレジットが保存されます。
クレジットバランスに保存された CPU クレジットは、CPU 負荷がベースラインパフォーマンスを上回った時に消費されます。</p>

<p>つまり、余分な CPU クレジットは蓄積されて後で使うことができるということになります (ただし <code>t2.medium</code> の最大クレジットバランスは 576)。</p>

<p>注意点としてはインスタンスを停止するとクレジットバランスに貯まった CPU クレジットは破棄されるというところでしょうか。</p>

<h4>T2 Unlimited</h4>

<p>ただ、T2 インスタンスを使う以上、気にしなければいけないのは CPU クレジットがなくなった場合は CPU のバーストができなくなるということです。</p>

<p>CPU のバーストができないということはつまり、ベースラインパフォーマンス (<code>t2.medium</code> の場合は 20 %) 以上の CPU が使えなくなるということになります。</p>

<p>ただし、去年の Re:Invent にて発表された <a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html">T2 Unlimited</a> という機能を有効にすることで CPU クレジットがなくなった場合でも自動的に CPU クレジットを追加され、CPU 使用に制限がかからなくなります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-unlimited.html" title="T2 無制限 - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html">docs.aws.amazon.com</a></cite></p>

<p>具体的には、T2 Unlimited を有効にすると、CPU クレジット及びクレジットバランスがなくなった場合、余剰クレジットというものから消費されるようになります。</p>

<p>最初の余剰クレジットは 24 時間で獲得できるクレジットの合計値となります。</p>

<p>例えば <code>t2.medium</code> の場合、1 時間辺りの獲得クレジットは 24 なので 24 時間で 576 のクレジットが余剰クレジットになります。</p>

<p>この 24 時間分の余剰クレジットは前借りのようなもので、消費した分だけ次のクレジット獲得時に余剰クレジットの支払いに使用されます。</p>

<p>24 時間分の余剰クレジットまで全て使い切ってしまった場合でも、その後に消費した余剰クレジット分は追加で課金され、CPU のバーストは継続することが可能です。</p>

<p>つまり、T2 Unlimited を有効にすれば T2 インスタンス特有の CPU クレジットの枯渇による CPU 使用制限の問題が解決されることになります。</p>

<p>ただし、常にバーストし続けて追加でお金が発生し続けるような場合は、T2 インスタンスでなく普通にインスタンスタイプを利用したほうが懸命ですね。</p>

<h4>CPU クレジットの監視</h4>

<p>T2 Standard (非 T2 Unlimited) であっても、T2 Unlimited であっても、普段からどの程度 CPU がバーストしているかは監視しておいたほうが良いです。</p>

<p>そのために、CloudWatch で <code>CPUCreditUsage</code>, <code>CPUCreditBalance</code>, <code>CPUSurplusCreditBalance</code>, <code>CPUSurplusCreditsCharged</code> という 4 つのメトリクスが提供されています。</p>

<p>個人的には T2 Unlimited の場合、基本的には <code>CPUSurplusCreditBalance</code> と <code>CPUSurplusCreditsCharged</code> を監視しておけば良いと思います。</p>

<ul>
<li><code>CPUSurplusCreditBalance</code> は消費された 24 時間分の余剰クレジット数</li>
<li><code>CPUSurplusCreditsCharged</code> は 24 時間分の余剰クレジットを使い切った後で更に消費される余剰クレジット数</li>
</ul>


<p>実際の監視には Datadog を利用しました (現在監視ツールを Datadog へ移行途中なため)。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302153003.png" alt="f:id:tsub511:20180302153003p:plain" title="f:id:tsub511:20180302153003p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>閾値はまだ感覚を掴めていないため、とりあえず厳しめにしてあります。</p>

<h2><code>m3.medium</code> から <code>t2.medium</code> へインスタンスタイプを変更する</h2>

<p>弊社のサービスのインフラでは、Blue Green Deployment が可能な体制が整っているため、インスタンスタイプの変更は非常に簡単です。</p>

<p>新しい環境のインスタンスは <code>t2.medium</code> で作成し、ELB からコネクションが流れるようになったら、古い環境のインスタンスを削除するだけです。</p>

<p>ただ、EC2 の Launch Configuration + Auto Scaling Group を使っていたため、少し工夫が必要でした。</p>

<p>T2 Unlimited の有効化は Launch Configuration ではサポートされていませんでした。</p>

<blockquote><p>Auto Scaling グループで T2 インスタンスを無制限に設定して起動するには起動テンプレートを使用する必要があります。起動設定では、T2 インスタンスを無制限として起動することがサポートされていません。</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html#t2-auto-scaling-grp">https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html#t2-auto-scaling-grp</a></p></blockquote>

<p>Launch Template ならサポートされているものの、今から移行するのも大変ですし、何より Terraform がまだ Launch Template をサポートしていませんでした (2018/03/02 時点)。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fterraform-providers%2Fterraform-provider-aws%2Fissues%2F2505" title="Add support for EC2 Launch Templates · Issue #2505 · terraform-providers/terraform-provider-aws" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/terraform-providers/terraform-provider-aws/issues/2505">github.com</a></cite></p>

<p>どうしようと困っていたところ、以下の記事に助けられました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdev.classmethod.jp%2Fcloud%2Faws%2Fautoscale-t2-unlimited%2F" title="T2 Unlimited(T2無制限)オプションをオートスケール環境で利用してみた | Developers.IO" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://dev.classmethod.jp/cloud/aws/autoscale-t2-unlimited/">dev.classmethod.jp</a></cite></p>

<p>EC2 User Data を使って、インスタンス起動時に自身に対して T2 Unlimited を有効化する、という方法です。</p>

<p>自分では全く思いつきませんでしたが、User Data も Terraform を使って管理できるのでかなりシンプルに実現できました。</p>

<p>実際には以下の User Data を利用しました (CentOS を使っているため <code>$ yum install aws-cli</code> ができない)。</p>

<pre class="code" data-lang="" data-unlink>#!/bin/bash

set -x

# Install aws-cli

curl -L https://bootstrap.pypa.io/get-pip.py | python
pip install awscli --upgrade

# Enable T2 Unlimited

INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &#39;s/.$//&#39;)

aws --region &#34;${REGION}&#34; ec2 describe-instance-credit-specifications --instance-id &#34;${INSTANCE_ID}&#34;
aws --region &#34;${REGION}&#34; ec2 modify-instance-credit-specification --instance-credit-specification InstanceId=&#34;${INSTANCE_ID}&#34;,CpuCredits=unlimited
aws --region &#34;${REGION}&#34; ec2 describe-instance-credit-specifications --instance-id &#34;${INSTANCE_ID}&#34;</pre>


<p>これで、Auto Scaling Group によって起動したインスタンスに対して自動的に T2 Unlimited が有効になりました。</p>

<h2>インスタンスタイプを <code>t2.medium</code> に変更した結果</h2>

<p>実際に <code>t2.medium</code> のインスタンスを稼働させた結果、同程度の負荷がかかった際の CPU の Steal 値はほぼ 0 になりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302152028.png" alt="f:id:tsub511:20180302152028p:plain" title="f:id:tsub511:20180302152028p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ちなみに <code>t2.medium</code> は vCPU が 2 つあるため、グラフの最大値は 200 % になっています。</p>

<p>user 値が 90 % 程度なので、実質 CPU 使用率は 45 % 程度で、<code>m3.medium</code> の頃とほとんど性能は変わっていません。</p>

<p>また、その他にも 5 分間のロードアベレージも全体的に下がっていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302153619.png" alt="f:id:tsub511:20180302153619p:plain" title="f:id:tsub511:20180302153619p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h2>まとめ</h2>

<ul>
<li><code>m3.medium</code> のインスタンスを使っていて CPU 負荷に悩まされている場合はインスタンスタイプを変更すると解決するかも</li>
<li>T2 インスタンスは適材適所で使えば費用を安く抑えられて非常に良い</li>
<li>T2 Unlimited によって CPU クレジットがなくなる問題が解決されて安心して T2 インスタンスを使用できるようになった</li>
<li>T2 Unlimited を Launch Configuration で有効化したい場合は User Data を使うと良い</li>
</ul>


<p><code>m3.medium</code> が原因だったようで、解決して良かったです。日々のアラートに悩まされなくて良くなりました。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[続・Rails 5.2 開発環境を Docker で構築する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/25/234556</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/25/234556"/>
        <updated>2018-02-25T14:45:56.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>前回の記事では Docker を使って Rails 5.2 の環境構築をしました。
現在も引き続き Docker についてのお話をします。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F02%2F11%2F140012" title="Rails 5.2 開発環境を Docker で構築する - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2018/02/11/140012">developer.feedforce.jp</a></cite></p>

<p>その後も幾つか手を加え続けておりまして、現在この記事を書いている時点で <code>v1.3.0</code> になりました 🎉
明らかに初回のナンバリングを間違えていた感がありますが、少しずつインクリメントさせていく楽しみを実感できて良いです 笑</p>

<h2>前回からの変更点について</h2>

<p>さて、前回の記事は <code>v1.0.0</code> 時点のものでしたが、ここで <code>v1.3.0</code> になった現在の <code>Dockerfile</code> を見てみましょう。</p>

<pre class="code" data-lang="" data-unlink># Dockerfile
FROM ryz310/rails-on-docker</pre>


<p>なんと！たったの１行ぽっちです！＼＼\٩( 'ω' )و //／／</p>

<p>何言ってんだコイツと思われそうですが、これはどういう事かというと、大部分を <code>base/Dockerfile</code> に移動したためです。</p>

<pre class="code" data-lang="" data-unlink># base/Dockerfile
FROM ruby:2.5
MAINTAINER ryz310@gmail.com

RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs

WORKDIR /myapp
ENV BUNDLE_JOBS=32

ONBUILD ADD Gemfile /myapp/Gemfile
ONBUILD ADD Gemfile.lock /myapp/Gemfile.lock
ONBUILD RUN bundle install
ONBUILD ADD . /myapp</pre>


<p>この <code>base/Dockerfile</code> のイメージは <a href="https://hub.docker.com/r/ryz310/rails-on-docker/">僕のDocker Hub</a> に置いてあります。</p>

<p><code>ONBUILD</code> が付いたコマンドはこのイメージを継承したイメージで実行されるため、先ほどの <code>Dockerfile</code> には <code>FROM</code> しかありませんが、ビルドの際には以下の 4 つのコマンドが実行される事になります。</p>

<pre class="code" data-lang="" data-unlink>ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN bundle install
ADD . /myapp</pre>


<p>感覚としては、 <code>base/Dockerfile</code> で Rails の起動に必要なサーバー環境を構築して、 <code>Dockerfile</code> で Rails そのものを構築していくような感じです。
Rails の構築には RDS イメージなども必須となってきますので、それについては <code>docker-compose.yml</code> と組み合わせて構築していきます。</p>

<pre class="code" data-lang="" data-unlink># docker-compose.yml
version: &#39;3&#39;
services:
  db:
    image: mysql:5.7
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: &#39;yes&#39;
    ports:
      - &#34;3306:3306&#34;
  web:
    build: .
    image: web_image
    command: bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;
    volumes:
      - .:/myapp
      - bundle:/usr/local/bundle
    ports:
      - &#34;3000:3000&#34;
    depends_on:
      - db
    environment:
      DB_HOST: db
  spring:
    image: web_image
    command: bundle exec spring server
    volumes:
      - .:/myapp
      - bundle:/usr/local/bundle
    tty: false
    stdin_open: false
    environment:
      DB_HOST: db
volumes:
  mysql_data:
  bundle:</pre>


<p>ここも <code>v1.0.0</code> の頃からいくつか変更がありまして、例えば <code>web</code> と <code>spring</code> で同じ内容になるように <code>v1.0.0</code> では YAML のエイリアスを使っていたのですが、 docker image で共有する方法に変えました。この定義の記述について少し補足します。</p>

<p><code>web</code> の定義で <code>build: .</code> と <code>image: web_image</code> と言う記述がありますが、これは Dockerfile をビルドして <code>web_image</code> というタグをつける、と言う振る舞いになります。一方、 <code>spring</code> の定義の <code>image: web_image</code> では <code>web_image</code> というタグが付いたイメージを使用する、という振る舞いになります。この辺はなんだかややこしいですね 😓</p>

<p>また、 <code>bundle:/usr/local/bundle</code> を volume に指定する事で、<code>bundle install</code> の内容を永続化するようにしてあります。これにより、<code>$ docker-compose run --rm web bundle install</code> というコマンドが有効になってくるので、Gemfile を更新した際に一から Build する必要がなくなります。
同様に、 MySQL も <code>mysql_data:/var/lib/mysql</code> を volume に指定する事で、テーブルの内容を永続化するようにしています。</p>

<h2>まとめ</h2>

<p><code>ONBUILD</code> を使用する事で、他の Rails アプリでも同じイメージを転用できるようになったのが一番の改善点ではないかと思います。</p>

<p>ただ、Rails アプリ側の事情で何か <code>$ apt-get install</code> を加えたくなった場合にどうするのか、という課題感があります。<code>base/Dockerfile</code> は汎用的な環境構築を意識しているので、あまり一般的でないインストールは行いたくありません。理想としては「子イメージ」で <code>$ apt-get install</code> させて、「孫イメージ」で今回のように Rails の構築をする構成が実現できれば良いのではないかと思いますが、 <code>ONBUILD</code> を「子イメージ」でスキップさせるとか出来るんでしょうか？</p>

<p>次回はこの辺について少し調べていければ、と思っています。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[201802 Twitter ポリシー変更]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/22/210931</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/22/210931"/>
        <updated>2018-02-22T12:09:31.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS 開発チーム <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。本日こんなニュースが Twitter 上で話題になっていました。</p>

<ul>
<li><a href="http://news.livedoor.com/article/detail/14336587/">ツイッター社、複数アカウントから同じ内容の投稿禁止 - ライブドアニュース</a></li>
</ul>


<p>公式発表は現地時間 2018/2/21 の開発者向けブログの記事のようです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.twitter.com%2Fdeveloper%2Fen_us%2Ftopics%2Ftips%2F2018%2Fautomation-and-the-use-of-multiple-accounts.html" title="Automation and the use of multiple accounts" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.twitter.com/developer/en_us/topics/tips/2018/automation-and-the-use-of-multiple-accounts.html">blog.twitter.com</a></cite></p>

<p>国内ニュースでは一般のユーザアカウント（そのユーザが spammer であるかどうかは区別せず）の発言がただ対象になるかのように見えますが、実際には <strong>Twitter App を介して複数アカウントにツイートや Retweets、Like などの拡散を実行させることを禁止する</strong> ようです。</p>

<p><u>ざっくり読み下してるので、もし読み違えている部分があればご指摘いただけると助かりますm(__)m</u></p>

<blockquote><p><strong>Do not (and do not allow your users to) simultaneously post identical or substantially similar content to multiple accounts.</strong> For example, your service should not permit a user to select several accounts they control from which to publish a given Tweet.</p></blockquote>

<p>たとえば、あなたのサービスのなかから何かシェアさせたいときに、シェア対象に複数の Twitter アカウントを指定できるような実装は許可されません。代わりに１つのアカウントで Tweet させ、それ以外のアカウントは Retweet を利用してシェアすることが推奨されます。</p>

<blockquote><p>Please note that bulk, aggressive, or very high-volume automated Retweeting is not permitted under the Automation Rules, and may be subject to enforcement actions.</p></blockquote>

<p>ただし自動化された異常に大量な Retweets も、Twitter 側の自動検知ルールにひっかかって執行対象になることがあるので注意とのこと。</p>

<blockquote><p><strong>Do not (and do not allow your users to) simultaneously perform actions such as Likes, Retweets, or follows from multiple accounts.</strong> For example, your service should not permit a user to select several accounts they control to follow a specified account.</p></blockquote>

<p>複数のユーザアカウントに Like, Retweets をさせるようにアプリケーションがユーザ（アカウント）を制御するのも禁止です。</p>

<blockquote><p><strong>The use of any form of automation (including scheduling) to post identical or substantially similar content, or to perform actions such as Likes or Retweets, across many accounts that have authorized your app (whether or not you created or directly control those accounts) is not permitted.</strong> For example, applications that coordinate activity across multiple accounts to simultaneously post Tweets with a specific hashtag (e.g. in an attempt to cause that topic to trend) are prohibited.</p></blockquote>

<p>Twitter App を、同一または類似したコンテンツを投稿するため、あるいは Like や Retweet などのアクションを実行するための自動化（スケジューリングを含む）に用いるのは許可されていません。その Twitter App を認可したユーザが App の作成者と関係あるかどうかにかかわらずです。</p>

<p>つまり拡散のために大量のユーザアカウントを用意し、拡散の自動化のために Twitter App で開発をすることは禁止されます。</p>

<p>このケースの例外として、以下のパターンが挙げられています。</p>

<blockquote><ul>
<li>While we continue to permit cross-posting outside information (such as weather alerts or RSS feeds) to Twitter using automation, you should only post this content to one account you control.</li>
<li>As a sole exception to this rule, applications that broadcast or share weather, emergency, or other public service announcements of broad community interest (for example, earthquake or tsunami alerts) are permitted to post this content across multiple accounts who have authorized an app.</li>
</ul>
</blockquote>

<ul>
<li>天気予報や RSS フィードなどを自動的に投稿するような利用は許可される。ただし自分で管理する１つのアカウントにのみ投稿すること</li>
<li>このルールの唯一の例外として、天気、緊急事態、地震・津波など広く公開されるべき公的な通知をするアプリケーションは、複数のアカウントに投稿することが許可されます</li>
</ul>


<p>アプリが複数のアカウントを選択して投稿、Like、Retweet など出来るようになっている場合は <strong>2018/3/23 までに新しいポリシーに準拠するよう変更する必要</strong> があります。これを守らない場合、Twitter App とアカウントを一時停止されます。</p>

<p>…ということで、普段気軽に拡散させるようなアプリを作っている開発者の方も、きちんと Twitter のアプリ開発ポリシーに目を通し、準拠するようにしましょう。</p>

<ul>
<li><a href="https://help.twitter.com/en/rules-and-policies/twitter-rules">The Twitter Rules</a></li>
<li><a href="https://help.twitter.com/en/rules-and-policies/twitter-automation">Automation rules</a></li>
</ul>


<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/158350039@N03/39031868345/in/photolist-22t7wBk-8LWciB-8LWbAc-VfJ6pq-UDofTg-io6XBu-bWbZFg-UW9FCr-boWxMe-Tyt6MS-pDHKLN-QPfuGA-wRS2iH-UACxC9-ZuCAMp-TbtXL7-PMiB5y-6jDjYC-8LZfx3-TeftSd-8LZdYJ-UTfxtJ-UDo5kx-pUS7z8-VdcMpV-D4Zjwy-UQgpcd-TVE4M7-6jDj1f-VoZPn1-UDocWK-UQUVvz-VhtKwa-UvEnyR-VboQx4-WmUBDj-TCRpVK-W1LF3V-VfozFR-USB1UL-UW8E84-pCGL7s-UDo1HT-TGDcJH-GzwSag-SX2w3X-SUgDrL-Tef91j-TytNLq-UAC6bA" title="the bird in the moon"><img src="https://farm5.staticflickr.com/4769/39031868345_8caf6bf7ea_b.jpg" width="1024" height="768" alt="the bird in the moon"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails 5.2 開発環境を Docker で構築する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/11/140012</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/11/140012"/>
        <updated>2018-02-11T05:00:12.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>僕が所属している <a href="https://socialplus.jp/">ソーシャルPLUS</a> チームでは Rails の開発環境を Docker で構築しています。
自分も日々お世話になっている Docker ですが、イチから Dockerfile 書いた事が無かったので、やってみました。</p>

<p>こちらのチュートリアルを参考にしています。</p>

<p><a href="http://docs.docker.jp/compose/rails.html">&#x30AF;&#x30A4;&#x30C3;&#x30AF;&#x30B9;&#x30BF;&#x30FC;&#x30C8;&#x30FB;&#x30AC;&#x30A4;&#x30C9;&#xFF1A;Docker Compose &#x3068; Rails &mdash; Docker-docs-ja 17.06.Beta &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<h1>やってみた✨</h1>

<p>早速ですがこちらが完成品の GitHub リポジトリになります。
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frails-on-docker%2Ftree%2Fv1.0.0" title="ryz310/rails-on-docker" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rails-on-docker/tree/v1.0.0">github.com</a></cite></p>

<p>この記事は <code>v1.0.0</code> 時点で書いていますが、リポジトリは今後も更新されていく可能性があります。</p>

<h2>環境</h2>

<ul>
<li>Debian Stretch</li>
<li>Ruby 2.5.0</li>
<li>Rails 5.2.0.rc1</li>
<li>MySQL 5.7</li>
</ul>


<h2>つかいかた</h2>

<p>Rails 5.2 で環境構築したと言いましたが、リポジトリには Rails のソースコードが一切含まれていません。
これは <code>rails new</code> から Docker でやっていくためです。
以下に手順を示しますので、興味ある方はぜひ記事を読みながら一緒にやってみて下さい 🙏</p>

<h3>0. リポジトリをローカルにクローンする</h3>

<pre class="code" data-lang="" data-unlink>$ git clone https://github.com/ryz310/rails-on-docker.git</pre>


<h3>1. 以下のコマンドを実行する</h3>

<pre class="code" data-lang="" data-unlink>$ docker-compose run web rails new . --force --database=mysql --skip-bundle --skip-git</pre>


<p><code>rails new</code> によって必要なファイルがインストールされます。同時に Gemfile も Rails 用に更新されます。
残念ながらアプリ名は指定できないので、必要に応じて変更して下さい。</p>

<p>なお、後述の MySQL データの永続化のため MySQL のデータファイルを含めないようにリポジトリの方で <code>.gitignore</code> を用意しています。
そのため <code>--skip-git</code> を付けて Rails に <code>.gitignore</code> ファイルを作成させないようにしていますが、永続化が不用な場合はオプションを外して下さい。</p>

<h3>2. 更新された <code>Gemfile</code> で以下のコメントアウトを外す</h3>

<pre class="code" data-lang="" data-unlink># gem &#39;mini_racer&#39;, platforms: :ruby</pre>


<p>以前であれば <code>therubyracer</code> だったのですが、いつの間にか <code>mini_racer</code> に変わっていたのですね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechracho.bpsinc.jp%2Fhachi8833%2F2017_06_09%2F41039" title="週刊Railsウォッチ（20170609）ついにtherubyracerからmini_racerへ、注意しないとハマるgem、5.1でのVue.jsとTurbolinksの共存ほか" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://techracho.bpsinc.jp/hachi8833/2017_06_09/41039">techracho.bpsinc.jp</a></cite></p>

<p>TechRacho さんの週刊Railsウォッチにはいつもお世話になっております 🙏</p>

<h3>3. <code>$ docker-compose build</code> を実行する</h3>

<p>Gemfile を変更したので再読イメージを作り直します。</p>

<h3>4. <code>config/database.yml</code> を以下のように変更する</h3>

<pre class="code" data-lang="" data-unlink>default: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch(&#34;RAILS_MAX_THREADS&#34;) { 5 } %&gt;
  username: root
  password: xxxxxx # &lt;- ここを変更
  host: db # &lt;- ここを変更</pre>


<p>あくまでローカルの開発環境構築なのでパスワードを隠したりとかはしません。本番運用とかでやっちゃダメですよ！
MySQL の Root ユーザーのパスワードは <code>docker-compose.yml</code> で指定しています。必要に応じて書き換えて下さい。</p>

<pre class="code" data-lang="" data-unlink>  db:
    image: mysql:5.7
    volumes:
      - .mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: xxxxxx # &lt;- ここ！</pre>


<h3>5. <code>$ docker-compose up</code> を実行する</h3>

<p>コンテナを起動させます。</p>

<h3>6. <code>$ docker-compose exec spring spring rake db:create</code> を実行する</h3>

<p>コンテナは起動していますが、Rails で使用する DB テーブルはまだ作成されていないので作成します。
何気に <code>spring</code> を使っている点に注目です。</p>

<h3>7. <a href="http://localhost:3000/">http://localhost:3000/</a> にアクセスして Rails が動いていることを確認</h3>

<p>ここまでの操作で Rails が正しく動作しているはずです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180211/20180211110115.png" alt="f:id:ryz310:20180211110115p:plain" title="f:id:ryz310:20180211110115p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Yay! You’re on Rails!</figcaption></figure></p>

<h1>ポイント</h1>

<h2><code>bundle install</code> が毎回走らないように工夫している</h2>

<p>Dockerfile で WORKDIR に <code>/tmp</code> ディレクトリを指定しているところがポイントです。
これをせずに <code>WORKDIR /myapp</code> からの <code>ADD . /myapp</code> をやってしまうと、 Rails のコードに変更がある度に <code>bundle install</code> が最初から実行されてしまいます。
Gemfile と Gemfile.lock を <code>/tmp</code> に格納することで、これらのファイルに変更がない限り <code>bundle install</code> が実行されないようになっています。</p>

<pre class="code" data-lang="" data-unlink>WORKDIR /tmp
ADD Gemfile Gemfile
ADD Gemfile.lock Gemfile.lock
RUN bundle install
WORKDIR /myapp
ADD . /myapp</pre>


<p>参考: <a href="https://easyramble.com/rails-development-on-docker.html#crayon-5a7fa9761d5ba051809395">Docker&#x3067;Rails + MySQL&#x306E;&#x958B;&#x767A;&#x74B0;&#x5883;&#x3092;&#x69CB;&#x7BC9; | EasyRamble</a></p>

<h2><code>spring</code> に対応</h2>

<p>Rails で開発する上で欠かせない <code>spring</code> も利用できるようにしてあります。
前述の <code>rake db:create</code> の時にも出てきましたが、<code>$ docker-compose exec spring spring rails console</code> のようにして使います。
<code>spring</code> が 2 回出てくるところがポイントです。一つ目はコンテナのサービス名です。</p>

<p>毎回書くのはだるいので僕は alias にしています。fish shell 用なので良いように読み替えて下さい 🙏</p>

<pre class="code" data-lang="" data-unlink># ~/.config/fish/config.fish

# docker-compose aliases
function fig
  docker-compose $argv
end

function figspring
  docker-compose exec spring spring $argv
end</pre>




<pre class="code" data-lang="" data-unlink># USAGE
$ figspring rails c</pre>


<p>参考: <a href="https://qiita.com/kawasin73/items/2253523be18e5afd994f">&#x9AD8;&#x901F;&#x306B;&#x958B;&#x767A;&#x3067;&#x304D;&#x308B; Docker + Rails&#x958B;&#x767A;&#x74B0;&#x5883;&#x306E;&#x30C6;&#x30F3;&#x30D7;&#x30EC;&#x30FC;&#x30C8;&#x3092;&#x4F5C;&#x3063;&#x305F; - Qiita</a></p>

<h2>MySQL データの永続化</h2>

<p>イメージを作り直した時に MySQL のデータが失われてしまうのは辛いものがあります。
毎回テスト用のデータを一から作り直したくないので、 <code>docker-compose.yml</code> で以下のように指定してMySQL のデータを永続化させています。</p>

<pre class="code" data-lang="" data-unlink>  db:
    image: mysql:5.7
    volumes:
      - .mysql_data:/var/lib/mysql # &lt;- これ！
    environment:
      MYSQL_ROOT_PASSWORD: xxxxxx</pre>


<p><code>.mysql_data</code> ディレクトリ以下に MySQL のデータが格納されています。リポジトリの <code>.gitignore</code> で無視させています。
試していませんが、参考にさせて頂いた記事によると Docker for Mac 以外の環境では問題が発生するようですのでご注意下さい。
対応方法も記事内で紹介されています 🙏</p>

<p>参考: <a href="https://blog.leko.jp/post/how-to-mount-data-volume-to-local-with-docker-compose/">docker compose&#x3067;MySQL&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x9818;&#x57DF;&#x3092;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306B;&#x30DE;&#x30A6;&#x30F3;&#x30C8;&#x3059;&#x308B; | WEB EGG</a></p>

<h1>まとめ</h1>

<p>週末に何かアプリでも書こうかと思った時に、ついでに Docker で環境構築もやっちゃうか、と思い立って書きました。
そうこうしてるうちに週末の半分くらいが過ぎ去っていますが、きっと今後は捗るはず。。 😇
何度も確認していますが、もし間違っている点、不便な点などありましたらそっと教えて頂けますと幸いです 🙏
Fork も大歓迎ですし、誰かに使ってもらえると嬉しいです 😁</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda with Golang と SAM に入門した]]></title>
        <id>https://blog.tsub.me/post/introduce-aws-lambda-with-golang-and-sam/</id>
        <link href="https://blog.tsub.me/post/introduce-aws-lambda-with-golang-and-sam/"/>
        <updated>2018-01-31T14:15:00.000Z</updated>
        <summary type="html"><![CDATA[<p>先日 AWS Lambda の Golang サポートがリリースされました。</p>

<p><a href="https://aws.amazon.com/jp/blogs/compute/announcing-go-support-for-aws-lambda/">Announcing Go Support for AWS Lambda | AWS Compute Blog</a></p>

<p>今回は AWS Lambda を Golang で書きつつ、<a href="https://github.com/awslabs/serverless-application-model">SAM</a> へも入門したのでその辺りの知見とか作ったものについて紹介します。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[mackerel のカスタムメトリックを echo でワンライナーしたった]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/31/143611</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/31/143611"/>
        <updated>2017-12-31T05:36:11.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>突然ですがワテクシ、 Rails アプリはそこそこ書ける方なんですが、インフラはからきしだったりします。 <a href="https://dic.pixiv.net/a/%E3%82%AD%E3%83%A2%E3%83%BC%E3%82%A4%E3%82%AC%E3%83%BC%E3%83%AB%E3%82%BA">フルスタックじゃないエンジニアが許されるのは小学生までだよねー</a>、というちょっと懐かしみのある煽りが社内のからも聞こえてきそうなので、最近インフラを少しずつ触るようにしています。触ってみるとインフラも色々楽しいですね ✌︎('ω')✌︎</p>

<p>とはいえ、インフラエンジニアレベル 1 の自分があれこれやっても障害に繋がるだけなので、まずはお手軽な雑用タスクから始めることにしました。</p>

<p>さて、少し話は変わって、最近、弊社サービスで Sidekiq プロセスのファイルディスクリプタが急騰してサーバーがダウンする、という障害が何度か発生しました。
現象としては Sidekiq プロセスのファイルディスクリプタが上限値 (初期値は <code>1024</code> ) に達すると、サーバーの CPU 使用率が 100 % 付近まで達してしまう、というものだったので、ファイルディスクリプタの上限を <code>65536</code> まで上げる、というワークアラウンドな対応で凌いでいました。</p>

<p>現在は解決済み（この原因については、別途記事にします）ですが、当時はなぜファイルディスクリプタの数が上昇し続けてしまうのか原因が全くわからず、チームのエンジニアは安眠できない日々が続いていました。とりあえず Sidekiq のプロセスをリスタートすればファイルディスクリプタの数は一旦リセットされるので、監視してやばくなったらアラートを飛ばして再起動させる、という方法で一旦は凌ます。また、継続して監視することで、原因の解明にも繋がるかもしれません。</p>

<p>弊社のサービスでは監視に <a href="https://mackerel.io/">mackerel</a> を利用しているので、カスタムメトリックを使ってお手軽に監視させよう、ということになりました。
mackerel のカスタムメトリックの投稿方法は <a href="https://mackerel.io/ja/docs/entry/advanced/custom-metrics">こちらの記事</a> にまとまっています。
要点だけ抜粋しますと、 <a href="https://mackerel.io/ja/docs/entry/spec/agent#config-file">mackerel-agent の設定ファイル</a> に <strong>以下の書式で標準出力を実行するコマンドを記述</strong> すれば OK です。</p>

<blockquote><p>設定ファイルで指定するコマンドは、標準出力の各行に以下のフォーマットの出力をすることが期待されます（<code>\t</code> はタブ文字です）:</p></blockquote>

<pre class="code" data-lang="" data-unlink>{metric name}\t{metric value}\t{epoch seconds}</pre>


<p>そして以下がファイルディスクリプタを監視するための設定です（完成品がレンジから出てくるパティーン）</p>

<pre class="code" data-lang="" data-unlink>[plugin.metrics.file_descriptor_count]
command = &#39;&#39;&#39;
  echo -e &#34;file_descriptor.sidekiq\\t$(sudo ls /proc/$(pgrep -f -u {user_name} sidekiq | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
&#39;&#39;&#39;</pre>


<p>標準出力されれば OK なので、 <code>echo</code> で任意の文字列を出力するような方法でも実現可能です。内部で <code>pgrep -f -u {user_name} sidekiq</code> と書いて、プロセス ID を取得していますが、 <code>-u</code> でプロセスを実行しているユーザーを指定しないと、 <code>pgrep</code> のプロセス ID を取得してしまうケースがあるので注意が必要です。(mackerel-agent は <code>root</code> で実行される)
同じ要領で、他にも以下のように書けば <code>puma</code> のファイルディスクリプタも取ることができます。</p>

<pre class="code" data-lang="" data-unlink>[plugin.metrics.file_descriptor_count]
command = &#39;&#39;&#39;
  echo -e &#34;file_descriptor.puma\\t$(sudo ls /proc/$(pgrep -f -u {user_name} puma.sock | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
  echo -e &#34;file_descriptor.puma_cluster_worker\\t$(sudo ls /proc/$(pgrep -f -u {user_name} &#39;puma: cluster worker&#39; | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
&#39;&#39;&#39;</pre>


<p>ちなみにこの記事を書くときに、もしやと思って調べてみたら、 <code>mackerel-agent-plugins</code> の中に <a href="https://github.com/mackerelio/mackerel-agent-plugins/tree/master/mackerel-plugin-proc-fd">任意のプロセスのファイルディスクリプタを監視する奴</a> がありました 😓
試していませんが、こっちを使った方が良いと思います 😇</p>

<p>そんな感じで監視できたグラフが以下になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20171231/20171231142049.png" alt="f:id:ryz310:20171231142049p:plain" title="f:id:ryz310:20171231142049p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ファイルディスクリプタ数がファイナルファンタジーの HP みたいになってますね。。。
とりあえず <code>10,000</code> を超えたらアラートを飛ばすように設定しましたが、デプロイする度にリセットされるので、結局アラートが飛ぶことも障害が発生することもなく、問題は解決しました。</p>

<p>本稿では <code>echo</code> を使ったワンライナーでカスタムメトリックを投稿する方法を紹介しました。
<code>mackerel-agent-plugins</code> に載っていないけどワークアラウンドでとりあえず監視させたい、という時は便利だと思うので、どこかでご活用ください 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub 上でコミットハッシュにもとづく URL を得る]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/20/141220</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/20/141220"/>
        <updated>2017-12-20T05:12:20.000Z</updated>
        <summary type="html"><![CDATA[<p>ご存知のかたも多いかと思いますが、GitHub で管理しているコードについて、コードの "ある部分" を示したいときに貼り付ける URL には注意が必要です。</p>

<h3>ソースコードの参照リンクを貼るときに気をつけたいこと</h3>

<p>たとえばこんなリンクを貼り付けた場合</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16</a></li>
</ul>


<p>これは <code>source</code> ブランチの最新の <code>Gemfile</code> ファイルの 16 行目を参照します。</p>

<p>いま（記事執筆時点で）このリンクを開くと <code>gem 'slim', '~&gt; 3.0.2'</code> が書かれている行を参照してることがわかりますが、この先 <code>source</code> ブランチのコードに変更があった場合「最新の」コードでは別のものを指してしまう可能性があります。</p>

<p>なので "ある行" を参照する場合にはコミットハッシュを特定した URL を貼るのがベストです。</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16</a></li>
</ul>


<p>この URL はコミットハッシュ <code>de6fb7dd0309465b936817e8452948084c8d7c76</code> の <code>Gemfile</code> ファイルの 16 行目を参照しているので、コードに変更があってもリンク先の内容が変わってしまうことはありません。</p>

<p>コードの "ある部分" を示したいときにはこの違いに気をつけましょう。</p>

<h3>GitHub の便利なショートカット</h3>

<p>というわけで、ここまでは自分も当たり前のように実践していたのですが、この「コミットハッシュにもとづく URL」取得のためにいちいち <em>History などから最新のコミットハッシュを辿る</em>ということをしていました。面倒。</p>

<p>最近同僚に教えてもらったのですが（そして感動してこの記事を書いているのですが）</p>

<p>GitHub ページ上のショートカット機能により <strong><kbd><code>y</code></kbd> キーを押すことで、現在見ているファイルのコミットハッシュにもとづく URL を簡単に得る</strong>ことができます。</p>

<p>以下のページを開いているときに <kbd><code>y</code></kbd> キーを押すと</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16</a></li>
</ul>


<p>アドレスバーで以下の URL に変わるのがわかります（コミットハッシュ部分は最新のものに変わります）。</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16</a></li>
</ul>


<p>一発で便利！( ﾟДﾟﾉﾉ"☆ﾊﾟﾁﾊﾟﾁﾊﾟﾁﾊﾟﾁ</p>

<h3>ちなみに</h3>

<p>GitHub 上で利用できる便利なショートカット機能は <kbd><code>?</code></kbd> キーを押すことで GitHub ページ上のどこでも確認できます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171220/20171220134401.png" alt="f:id:tmd45:20171220134401p:plain" title="f:id:tmd45:20171220134401p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<blockquote><p>Expand URL to its canonical form</p></blockquote>

<p>というのが今回のそれですね。<code>t</code> と <code>l</code> はよく使ってたんですが、これは気づいていませんでした(；´∀｀)</p>

<p>"Source code browsing" にあるショートカットは、GitHub 上でコードブラウジングを行う上で非常に便利なので、ぜひ試してみて下さい。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[結婚して半年が経ったので工夫していることとか]]></title>
        <id>https://blog.tsub.me/post/half-a-year-after-married/</id>
        <link href="https://blog.tsub.me/post/half-a-year-after-married/"/>
        <updated>2017-12-09T12:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2155">feedforce Advent Calendar 2017</a> の 9 日目の記事です。</p>

<p>昨日の記事は tmd45 さんの <a href="http://developer.feedforce.jp/entry/2017/12/08/090000">TypeScript 社内勉強会 完遂報告 - Feedforce Developer Blog</a> でした。<br />
TypeScript 社内勉強会には自分も参加していましたが、プロダクションのコードを書いているフロントエンドエンジニアの方から色々とアドバイスを頂いたり、他の言語の観点で議論が出来たりとても有意義な会でした！</p>

<p>さて、本題ですがワタクシ今年の 4 月に結婚をしました。</p>

<p>妻は Web コーダーで、割と Web サービスなどにも抵抗がなく普段から Slack や Kibela などを夫婦間で活用しています。</p>

<p>今回はその辺りで色々と工夫している部分を紹介できればと思います。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript 社内勉強会 完遂報告]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/08/090000</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/08/090000"/>
        <updated>2017-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2155">feedforce Advent Calendar 2017</a> の
 8 日目の記事です。昨日は <a href="http://blog.hatena.ne.jp/phiitakes/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/phiitakes/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:phiitakes</a> の『<a href="http://phiitakes.hatenablog.com/entry/2017/12/07/143958">フィードフォースのスポーツ系活動紹介 - phiitakesのなにか</a>』でした。弊社こんなに運動部あったんだ！？ｗ</p>

<p>こにゃにゃちわ（世代）<a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>ちょうど今週、社内で開催していた TypeScript 勉強会が一段落したので、それについて書きたいと思います。TypeScript の話というよりは社内勉強会のやりかたのひとつという話になりますのでご了承ください。</p>

<h3>きっかけ</h3>

<p>今年の夏頃から担当プロダクトで AWS Lambda を利用するようになりました。当初開発に取り組んでくれたサーバサイドメンバーが JavaScript 学んでいたり、強力なフロントエンド開発メンバーがいたりということで実装に Node.js を選択しています<a href="#f-bfc4d7a1" name="fn-bfc4d7a1" title="隣のチームでは Python を利用していますね。開発のメインは Ruby ですが、それ以外の言語はチームによって検討している感じです">*1</a>。</p>

<p>フロントエンドチームでは静的型付け（と関数型）の導入が進んでおり、とくに新しいプロダクトでは <a href="https://flow.org/">Flow</a> を用いた開発が行われています。</p>

<p>そんなこんなで Lambda function の実装でも静的型付けの可能な言語で開発したいという向きがあり、とはいえ JavaScript の基礎もあやふやなチームメンバー（主に私）がいる状況でしたので Pure JavaScript から大きく逸脱することがなく最新の仕様にも触れられる
 <a href="https://www.typescriptlang.org/">TypeScript</a> でやってみようという選択になりました。</p>

<p>仕事でやるからにはしっかり勉強せねばと思いつつ、自力だけで学ぶことになると最初に開発に取り組んでくれたメンバー以外（主に私）は意識が下がりがちになると思い、社内勉強会という名目で取り組むことにしました。</p>

<h3>やりかた</h3>

<p>仕事ですぐに使う技術を学ぶという名目でしたので、週一でゆっくりというよりは、短時間で刻んでどんどんやっていこうという気持ちでセッティングしました。</p>

<p>導入を決めた自分のチーム（のサーバサイドメンバー）の参加は必須として、ミーティングの日程を避けて 1 イテレーション＝ 2 週間のなかでミーティングの無い日を中心にスケジュールしました。</p>

<table>
<thead>
<tr>
<th> 曜日 </th>
<th> 予定 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 月 </td>
<td> スプリントプランニング </td>
</tr>
<tr>
<td> 火 </td>
<td> なし </td>
</tr>
<tr>
<td> 水 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 木 </td>
<td> なし </td>
</tr>
<tr>
<td> 金 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td> 月 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 火 </td>
<td> なし </td>
</tr>
<tr>
<td> 水 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 木 </td>
<td> なし </td>
</tr>
<tr>
<td> 金 </td>
<td> スプリントレビュー、レトロスペクティブ、KPT </td>
</tr>
</tbody>
</table>


<p>回数を増やしたぶん、<strong>1 回の実施時間を短めに 30 分〜 45 分</strong> としました（それでも後半は白熱して 1 時間いっぱい使ってしまいましたが）。</p>

<p>開催時間は毎朝の <strong>デイリースクラムを終えたあとの、午前中</strong> にしました。夕方は日によって早く帰りたいこともありますが、朝は普段からチームで集まることが決まっているので時間確保がしやすかったためです。</p>

<p>そんな感じでスケジューリングしつつ、参加したいひとはお気軽にご参加ください、というスタンスで進めました。結果、参加人数は 3 〜 7 人と幅がありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207132757.png" alt="f:id:tmd45:20171207132757p:plain" title="f:id:tmd45:20171207132757p:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">はじめるまえにお気持ちを表明してみた</span></p>

<p>教材は市販の書籍も検討しましたが <strong>  <a href="https://basarat.gitbooks.io/typescript/">TypeScript Deep Dive</a> というオンラインドキュメント</strong> を利用しました。浅すぎず深すぎず、最新の JavaScript のことも学べる適度な教材はなんだろう？と投げかけたところ、<a href="http://developer.feedforce.jp/archive/author/otofu-square">先に TypeScript を自主学習していたメンバー</a>や<a href="http://developer.feedforce.jp/archive/author/kogainotdan">フロントエンドの元老院の方</a>からオススメしてもらいました。英語だけど、みんなで読むならこわくない。</p>

<p>また <code>Promise</code> の部分では追加で   <a href="http://azu.github.io/promises-book/">JavaScript Promiseの本</a> の前半も読みました。どちらのドキュメントでもこの勉強会では基礎部分だけ実施しました。仕事で使いながら、あとは自分で応用編も読み進めていく予定です。</p>

<h3>よかったこと</h3>

<p>学習した内容からとくに思ったのは、言語の設計思想を理解して学ぶと納得感が違うなということです。 Deep Dive の冒頭には TypeScript がどういうスタンスの JavaScript
Transpiler であるか？という解説がありました<a href="#f-a4dddcf6" name="fn-a4dddcf6" title="あくまでも Pure JavaScript がそのまま記述できる（ように設定できる）ように設計され、既存の JavaScript コードを部分的に移行していけるものである、とか">*2</a>。</p>

<p>また、参加メンバーは普段主に Ruby を書いているひとが多いので「Ruby ではここはこういうやりかたになってるね」という話をしたり、いろんな言語を触ってよく学んでいるメンバーから「別の言語ではこういう思想でこういう実装がされているよ」とか、たとえば「Flow では（思想が違うので）ここは勝手に推論してくれるんですよ」みたいな話をしてもらったりしました。</p>

<p>Slack で疑問点を共有しながら進めていると「先生」になるような社内メンバーたちが説明をくれたり議事録<a href="#f-140fefc7" name="fn-140fefc7" title="業務時間中にやっている勉強会だったので「真面目に勉強してますよ〜」と報告する理由で書いていたのですが（笑）あとで見返すこともできて良かった">*3</a>にもコメントをもらったり、とても助かりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207133707.png" alt="f:id:tmd45:20171207133707p:plain" title="f:id:tmd45:20171207133707p:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">Qiita:Team でかんたんな議事録を作っていました</span></p>

<p>「先生」レベルの人たちが毎回勉強会に参加するのは、どうしても（お互いに）無駄に感じてしまうこともあると思います。興味のある章だったり時間のあるときには気軽に参加してもらって、そうでないときも助けてもらうことができて大感謝でした 🙏</p>

<h3>まとめ</h3>

<p>勉強会を実施した成果として、実際に TypeScript で書いているリポジトリが最低限読めるようになりましたし、他のフロントエンドのリポジトリでも「呪文かコレ」って思うことがなくなりました！開発の入り口に立つことが出来たように思います。大成功 😊</p>

<p>年明けには業務で利用している外部の JS SDK の TypeScript ソースコード・リーディング会をやってみたいと考えています(๑•̀ㅂ•́)و✧</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207151404.jpg" alt="f:id:tmd45:20171207151404j:plain" title="f:id:tmd45:20171207151404j:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">最終回の参加メンバー！おつかれさまでした！！</span></p>

<div style="text-align: center; color: #ccc;">〜〜〜</div>


<p>さて、明日は弊社には結構多い（！）既婚者勢の <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> による <a href="https://adventar.org/calendars/2155#list-2017-12-09">結婚して半年が経ったので工夫していることとか</a> です。おたのしみに〜</p>
<div class="footnote">
<p class="footnote"><a href="#fn-bfc4d7a1" name="f-bfc4d7a1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">隣のチームでは Python を利用していますね。開発のメインは Ruby ですが、それ以外の言語はチームによって検討している感じです</span></p>
<p class="footnote"><a href="#fn-a4dddcf6" name="f-a4dddcf6" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">あくまでも Pure JavaScript がそのまま記述できる（ように設定できる）ように設計され、既存の JavaScript コードを部分的に移行していけるものである、とか</span></p>
<p class="footnote"><a href="#fn-140fefc7" name="f-140fefc7" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">業務時間中にやっている勉強会だったので「真面目に勉強してますよ〜」と報告する理由で書いていたのですが（笑）あとで見返すこともできて良かった</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS でコンテナを動かすためのサービスまとめ]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/30/133525</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/30/133525"/>
        <updated>2017-11-30T04:35:25.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、バックエンドエンジニアの tsub (<a href="http://blog.hatena.ne.jp/tsub511/">id:tsub511</a>) です。</p>

<p>本日 AWS Re:Invent 2017 でコンテナ実行環境として新たに AWS Fargate と Amazon Elastic Container Service for Kubernetes (EKS) が発表されました。</p>

<p>昨日は発表が待ち遠しくて気が気じゃなかったですが、無事に予想通りマネージド Kubernetes サービスが発表されて大喜びです。</p>

<p>今回は AWS でコンテナを扱う上で、今までのサービスと合わせて選択肢がいくつかあって混乱すると思うので簡単にまとめました。</p>

<h2>AWS でコンテナを動かすためのサービス</h2>

<p>新しく 2 つのサービスが追加されたことで、これだけあります。
(見落としがなければ)</p>

<ul>
<li>Amazon Elastic Beanstalk (EB)</li>
<li>Amazon Elastic Container Service (ECS)</li>
<li>AWS Batch</li>
<li><a href="https://aws.amazon.com/jp/eks/">Amazon Elastic Container Service for Kubernetes (EKS)</a> <strong><font color="red">new!</font></strong></li>
<li><a href="https://aws.amazon.com/jp/fargate/">AWS Fargate</a> <strong><font color="red">new!</font></strong></li>
</ul>


<p>それぞれの特徴について説明していきます。</p>

<h2>Amazon Elastic Beanstalk (EB)</h2>

<p>※ EB については自分は全く触ったことがないので分からないままで書きます。</p>

<p>EB は Heroku のような PaaS です。
本来は Heroku と同じようにアプリケーションのコードをそのままデプロイして動かしますが、Docker もサポートしていて、コンテナとしてデプロイして動かすことができます。</p>

<p>小規模なサービス、チームなどでインフラの管理をしたくないというユースケースで使うことが多いと思います。</p>

<h2>Amazon Elastic Container Service (ECS)</h2>

<p>ECS は AWS が独自に開発しているマネージドなコンテナのオーケストレーションサービスです。
(コンテナのオーケストレーションについては <a href="#%E3%81%8A%E3%81%BE%E3%81%91:%20%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">おまけ: コンテナのオーケストレーションについて</a> を参照)</p>

<p>EC2 の上で ecs-agent を動かすことで、ECS のクラスタとして認識させることができるため、非常にシンプルです。
ecs-agent が動いていれば、ECS を通して EC2 の上でコンテナを簡単に動かすことができます。</p>

<p>ECS 向けに awslogs という Docker 用の logging driver を提供していて、CloudWatch Logs との連携も簡単に行えます。</p>

<p>ECS 上でのコンテナは、ECS Task や ECS Service として動かします。
ECS Task には IAM Role を使った権限管理や VPC ネットワーク上で直接 Task を動かすことができ、セキュリティグループなどを利用することもできます。</p>

<p>ECS Service は ELB との連携があり、コンテナが起動したら自動的に ELB に紐付けたり、コンテナが終了したら ELB から外したり、といったことをやってくれます。</p>

<p>上記のように、他の AWS サービスとの連携がスムーズにできる点は非常に魅力的です。</p>

<h2>AWS Batch</h2>

<p>Batch はコンテナを使ったバッチコンピューティングに特化したサービスです。</p>

<p>バッチコンピューティングと言っても、決まった時間に決まった処理をするという cron のようなものではなく、
機械学習やスーパーコンピュータなどで利用するような大量の計算処理を必要とする場合に利用されるような基盤となります。</p>

<p>そういう背景もあり、主に CPU ベースでのコンテナの割り振り、ホストのオートスケーリングなどに強いです。</p>

<p>また、Batch はバックエンドで ECS を使っており、ジョブを動かすと実際に ECS Cluster が作られその上で Task が動いている様子を見ることもできます。
ECS を使っていることもあり、ログは自動的に awslogs logging driver によって CloudWatch Logs に送られたり、CloudWatch による ECS のメトリクスを見ることが可能です。</p>

<p>また、ECS と違って Job Queue も提供されていて、ジョブの状態管理なども可能となっています。
CloudWatch Events によりジョブの状態変化によるイベントドリブンな処理も可能です。</p>

<h2><a href="https://aws.amazon.com/jp/eks/">Amazon Elastic Container Service for Kubernetes (EKS)</a> <strong><font color="red">new!</font></strong></h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Faws.amazon.com%2Fjp%2Feks%2F" title="Amazon EKS – マネージド型 Kubernetes サービス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://aws.amazon.com/jp/eks/">aws.amazon.com</a></cite></p>

<p>EKS はマネージドな Kubernetes を提供してくれるサービスです。
(現在はプレビュー版のみの提供)</p>

<p>ECS は AWS が独自に開発しているコンテナのオーケストレーションサービスでしたが、Kubernetes は Google が開発している OSS プロジェクトのコンテナのオーケストレーションツールです。
(コンテナのオーケストレーションについては <a href="#%E3%81%8A%E3%81%BE%E3%81%91:%20%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">おまけ: コンテナのオーケストレーションについて</a> を参照)</p>

<p>Kubernetes は OSS ということもあり、コミュニティが非常に活発で多くの開発者・企業が開発に協力しています。</p>

<p>Kubernetes を動かすための基盤はかなりたくさんの選択肢があり、あくまで EKS はそのうちの一つです。</p>

<p>特に、今まで AWS 上で Kubernetes 環境を構築するために様々なツールがありました (私が知っている範囲で)。</p>

<ul>
<li><a href="https://github.com/kubernetes-incubator/kubespray">kubespray</a></li>
<li><a href="https://github.com/kubernetes-incubator/kube-aws">kube-aws</a></li>
<li><a href="https://github.com/kubernetes/kops">kops</a></li>
<li><a href="https://kubernetes.io/docs/reference/generated/kubeadm/">kubeadm</a></li>
<li><a href="https://coreos.com/tectonic/">Tectonic</a></li>
<li><a href="http://rancher.com/rancher-os/">Rancher</a></li>
</ul>


<p>実際、今まで AWS 上で Kubernetes を利用していた人が多いようで、おそらくその方々は何らかのツールを用いて自前で構築していたと思います。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/amazon-elastic-container-service-for-kubernetes/">https://aws.amazon.com/jp/blogs/news/amazon-elastic-container-service-for-kubernetes/</a></p>

<blockquote><p>AWS 上で Kubernetes を利用している多くのお客様がいます。実際、Cloud Native Computing Foundationによると、Kubernetes のワークロードの63％が AWS 上で動作しています。AWS は Kubernetes を実行するうえで人気の場所</p></blockquote>

<p>これらのツールを使って、Kubernetes クラスタの構築・管理を簡単にすることができますが、やはりマスターノードを管理する必要はでてくると思います。</p>

<p>そこを AWS 側で管理・提供してくれるのが EKS となります。</p>

<p>EKS としては Kubernetes クラスタの管理だけでなく、ELB や IAM、VPC、Private Link、CloudTrail などとの連携も提供してくれているため、自前で Kubernetes クラスタを構築するよりも便利になっています。
後述の Fargate との連携も今後できるようになるとのことです。</p>

<p>また、既存の Kubernetes 用ツール群を使えるのも大きな強みです。</p>

<h2><a href="https://aws.amazon.com/jp/fargate/">AWS Fargate</a> <strong><font color="red">new!</font></strong></h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Faws.amazon.com%2Fjp%2Ffargate%2F" title="AWS Fargate – サーバーやクラスターの管理が不要なコンテナの実行" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://aws.amazon.com/jp/fargate/">aws.amazon.com</a></cite></p>

<p>Fargate は単体のサービスではなく ECS や EKS の上で使うことのできるサービスです。
(現在は北部バージニアリージョンのみの提供)</p>

<p>前述した ECS や EKS と違い、コンテナを動かすホストについて意識せず、コンテナそのものを動かすことだけに集中することができます。</p>

<p>どういうことかと言うと、Fargate では事前にホストを動かしておく必要はありません。</p>

<p>AWS VPC 環境と ECS のクラスター (名前空間的な意味で) を作っておけば、後はコンテナを起動するだけで自動的にホストを用意し、コンテナを実行してくれます。</p>

<p>また、ECS の上に乗っかっているので、使い方は簡単で ECS Task として起動する時に launch type として Fargate を指定するだけです。
その他、ECS Service でも使うことができます。
(EKS との連携についてはまだ情報が公開されていないため不明です)</p>

<p>ホストをこちら側で管理しないため、ホストの監視の方法などは気になるところですが、CloudWatch を通してホストのメトリクスは取れるようです。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/aws-fargate-a-product-overview">https://aws.amazon.com/jp/blogs/news/aws-fargate-a-product-overview</a></p>

<blockquote><p>FargateではアプリケーションのログをCloudWatch Logsに送ることができます。サービスのメトリクス(CPUとメモリの利用率)もCloudWatchメトリクスとして利用可能です。可視化や監視、アプリケーションパフォーマンスの領域での我々のパートナーである、DataDog、Aquasec、Splunk、Twistlock、そしてNew RelicもFargateタスクをサポートしています。</p></blockquote>

<p>また、Fargate に似たサービスとして <a href="https://azure.microsoft.com/ja-jp/services/container-instances/">Azure Container Instances (ACI)</a> や <a href="https://hyper.sh/">Hyper.sh</a> といったサービスも AWS 以外で提供されています。</p>

<h2>おまけ: コンテナのオーケストレーションについて</h2>

<p>コンテナを本番環境で動かそうとした時、コンテナをどのインスタンスで動かすか、どのインスタンスでコンテナが動いているのか、などコンテナの管理方法でいくつか問題が出てきます (あくまで一例です)。</p>

<p>そういった問題を解決するため、コンテナのスケジューリングやマネージングをするツールを用意する必要がありますが、それらを解決するためのツールが ECS や Kubernetes, Docker Swarm などと言ったオーケストレーションツールとなります。</p>

<p>ただし、どこにコンテナのスケジューリングやマネージングをする人が必要になってきます。
その人をマスターノードなどと呼び、次はこれを管理・冗長化などしなければいけないという問題がでてきます。</p>

<p>そのマスターノードの管理までマネージドで提供してくれているのが、ECS や EKS, <a href="https://cloud.google.com/kubernetes-engine/?hl=ja">GKE (Google Kubernetes Engine)</a>, <a href="https://azure.microsoft.com/ja-jp/services/container-service/">AKS (Azure Container Service)</a> などになります。</p>

<h2>まとめ</h2>

<ul>
<li>EB

<ul>
<li>小規模なサービス・チームで使うと良さそう</li>
</ul>
</li>
<li>ECS

<ul>
<li>AWS 独自のコンテナのオーケストレーションサービス</li>
</ul>
</li>
<li>Batch

<ul>
<li>バッチコンピューティング基盤として使う</li>
</ul>
</li>
<li>EKS

<ul>
<li>Kubernetes を使ったコンテナのオーケストレーションサービス</li>
</ul>
</li>
<li>Fargate

<ul>
<li>検証環境・本番環境・ちょっとした処理など幅広く使える</li>
</ul>
</li>
</ul>


<p>機能的に ECS と EKS の使い分けは難しいですが、学習コスト・導入コストの面で ECS に軍配は上がると思います。
ただ、コンテナを使う以上コミュニティが巨大な Kubernetes を使うことも大きなメリットです。</p>

<p>個人的には EKS を推していきたいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamoid の使い方【global_secondary_index 編】]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/26/195509</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/26/195509"/>
        <updated>2017-11-26T10:55:09.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">前回</a>に引き続き、 Dynamoid 第3弾です ✌︎('ω')✌︎</p>

<p>Rails で DynamoDB を利用する際の ORM として <code>dynamoid</code> があります。
今回は <code>dynamoid</code> から Global Secondary Index (GSI) を利用する方法について紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#Global-Secondary-Index-GSI-ってなんぞ">Global Secondary Index (GSI) ってなんぞ</a><ul>
            <li><a href="#今回も名称の整理をしておきます">今回も名称の整理をしておきます</a></li>
            <li><a href="#GSI-は検索のためのインデックス">GSI は検索のためのインデックス</a></li>
            <li><a href="#Local-Secondary-Index-LSI-もあるやで">Local Secondary Index (LSI) もあるやで</a></li>
            <li><a href="#どういう用途で便利なのか">どういう用途で便利なのか</a></li>
        </ul>
    </li>
    <li><a href="#Dynamoid-での利用方法">Dynamoid での利用方法</a><ul>
            <li><a href="#テーブル定義">テーブル定義</a><ul>
                    <li><a href="#where-を使えば-GSI-を使って自動的にクエリで検索してくれる">#where を使えば GSI を使って自動的にクエリで検索してくれる</a></li>
                    <li><a href="#昇順降順を入れ替えたい場合">昇順・降順を入れ替えたい場合</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<p><code>dynamoid</code> の導入方法については以前書いたこちらの記事を参考にしてみて下さい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.feedforce.jp%2Fdynamodb-setup-on-rails.html" title="DynamoDB を Rails で使えるようにするためのあれこれ | feedforce Engineers&#39; blog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tech.feedforce.jp/dynamodb-setup-on-rails.html">tech.feedforce.jp</a></cite></p>

<h1 id="Global-Secondary-Index-GSI-ってなんぞ">Global Secondary Index (GSI) ってなんぞ</h1>

<h2 id="今回も名称の整理をしておきます">今回も名称の整理をしておきます</h2>

<p>文中に Hash Key やら Range Key という名称が出てきますが、現在は名称が異なります。
しかし、 <code>dyanmoid</code> では相変わらず旧名称のまま (<code>hash_key</code>, <code>range_key</code>) でパラメータを指定するので、今回も最初に対応表を記載しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 旧名称 </th>
<th style="text-align:center;"> 現名称 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Hash Key </td>
<td style="text-align:center;"> Partition Key </td>
</tr>
<tr>
<td style="text-align:center;"> Range Key </td>
<td style="text-align:center;"> Sort Key </td>
</tr>
</tbody>
</table>


<h2 id="GSI-は検索のためのインデックス">GSI は検索のためのインデックス</h2>

<p>DynamoDB にはプライマリキーの指定方法として、単一の Partition Key を使用する方法と、Partition Key と Sort Key を組み合わせて使用する方法があります。
これについては前回の【range 編】の記事でも触れました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F04%2F235323" title="Dynamoid の使い方【range 編】 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">developer.feedforce.jp</a></cite></p>

<p>プライマリキーに指定されたカラムに対してであれば、レコードの抽出や範囲検索などが実行可能となる訳ですが、プライマリキーに指定されていないカラムに対しては検索が実行できず、テーブルのフルスキャンを実行することになってしまい非効率です。そこで、別のカラムに対しても検索を行いたい場合は GSI を設定して、フルスキャンすることなく効率的にデータを抽出できるようにします。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=47" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<p>GSI もプライマリキーの指定と同様に、単一の Partition Key のみで指定することも、 Partition Key と  Sort Key の組み合わせで指定することも可能です。
ただし、 <strong>プライマリキーにはユニーク制約が設定されますが、 GSI にはユニーク制約が存在しない</strong> ので、その点には注意が必要です。</p>

<h2 id="Local-Secondary-Index-LSI-もあるやで">Local Secondary Index (LSI) もあるやで</h2>

<p>LSI の Partition Key はプライマリキーと共通です。Sort Key の部分だけ別に設定したい場合に使用します。その点を除けば GSI とよく似ていますが、こちらはテーブルの作成時にしか定義することができないようです。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=46" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<p>なお、LSI も<code>dynamoid</code> から指定することは可能 (<code>local_secondary_index</code> を使用する) ですが、本稿では触れません。</p>

<h2 id="どういう用途で便利なのか">どういう用途で便利なのか</h2>

<p>あまり複雑なテーブル設計が推奨されない DynamoDB ですが、簡単なテーブル間の関連付けを行いたいシーンが出てきます。親テーブルの ID を結合キーとして子テーブルに設定したい場合などに GSI は便利です。
以下に User Table と User Comment Table の例を示します。User Comment Table には親テーブルである User Table の ID が GSI の Partition Key として設定してあります。また、コメントの投稿日時 (Posted at) を GSI の Sort Key として設定しています。これで User 毎に投稿日時順にソートしたコメントを取得することができるようになります。</p>

<p><strong>User Table</strong></p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ID </th>
<th> name </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 1 </td>
<td> John </td>
</tr>
<tr>
<td style="text-align:center;"> 2 </td>
<td> Marry </td>
</tr>
<tr>
<td style="text-align:center;"> 3 </td>
<td> Taro </td>
</tr>
</tbody>
</table>


<p><strong>User Comment Table</strong></p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ID (Primary Partition Key) </th>
<th style="text-align:center;"> User ID (GSI Partition Key) </th>
<th> Posted at (GSI Sort Key) </th>
<th style="text-align:center;"> Comment </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 1 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509529916 </td>
<td style="text-align:center;"> Hello </td>
</tr>
<tr>
<td style="text-align:center;"> 2 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509530052 </td>
<td style="text-align:center;"> I am John </td>
</tr>
<tr>
<td style="text-align:center;"> 3 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509530085 </td>
<td style="text-align:center;"> How do you do? </td>
</tr>
<tr>
<td style="text-align:center;"> 4 </td>
<td style="text-align:center;"> 2 </td>
<td> 1509523925 </td>
<td style="text-align:center;"> Thanks a lot! </td>
</tr>
<tr>
<td style="text-align:center;"> 5 </td>
<td style="text-align:center;"> 3 </td>
<td> 1509527628 </td>
<td style="text-align:center;"> こんにちは </td>
</tr>
<tr>
<td style="text-align:center;"> 6 </td>
<td style="text-align:center;"> 3 </td>
<td> 1509527101 </td>
<td style="text-align:center;"> どうも </td>
</tr>
</tbody>
</table>


<p>ちなみに、プライマリキーと GSI を逆に設定してもほぼ成立するのですが、前述したように GSI にはユニーク制約が存在しないので、User Comment Table では ID をプライマリキーとして、重複が生じないように設定してあります。</p>

<h1 id="Dynamoid-での利用方法">Dynamoid での利用方法</h1>

<h2 id="テーブル定義">テーブル定義</h2>

<p>ここからは前述の User Table と User Comment Table を <code>dynamoid</code> から利用する例を示していきます。</p>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :id

  field :name, :string

  # 現在のユーザーに紐付くコメントを作成する
  def create_comment!(attributes = {})
    attributes[:user_id] = id
    UserComment.new(attributes).tap(&amp;:save!)
  end

  # 現在のユーザーのコメント一覧を取得する
  def comments
    UserComment.where(user_id: id)
  end

  # 現在のユーザーの最終コメントを取得する
  def latest_comment
    comments.scan_index_forward(false).scan_limit(1).all.first
  end
end</pre>




<pre class="code" data-lang="" data-unlink>class UserComment
  include Dynamoid::Document

  table name: :user_comments, key: :id

  field :user_id, :string
  field :posted_at, :datetime

  global_secondary_index hash_key: :user_id, 
                         range_key: :posted_at, 
                         projected_attributes: :all
end</pre>


<p>※ ちなみに <code>dynamoid</code> には <code>has_many</code> を利用して関連テーブルを実現する方法があるのですが、結合キーを親テーブルに持つ設計になるのがあまり好ましくなかったので、自前で実装しています。</p>

<p>いくつか注意する点があって、 <code>global_secondary_index</code> で使用する <code>hash_key</code> と <code>range_key</code> は <code>field</code> で定義されている必要があります。
また、 <code>projected_attributes: :all</code> というオプションをつけないと後述の <code>#where</code> でインデックスを利用した検索が行われません。一旦これが無い状態でリリースとしてしまうと、射影される属性が限定された GSI が作成されてしまい、実行時にエラーになります。その場合は AWS マネジメントコンソールから直接 GSI を作り直す羽目になりますのでご注意ください 🙏</p>

<pre class="code" data-lang="" data-unlink>One or more parameter values were invalid: Select type ALL_ATTRIBUTES is not supported for global secondary index</pre>


<h3 id="where-を使えば-GSI-を使って自動的にクエリで検索してくれる"><code>#where</code> を使えば GSI を使って自動的にクエリで検索してくれる</h3>

<p><code>#comments</code> というメソッドの中で <code>#where</code> を使用した検索が登場しますが、 GSI が設定されていれば特別な記述がなくとも自動的にクエリ検索が行われます。</p>

<pre class="code" data-lang="" data-unlink>UserComment.where(user_id: id)
# =&gt; [#&lt;UserComment:0x00007f44c86183e8&gt;, ...]</pre>


<p>前述の通り <code>projected_attributes: :all</code> が指定されていないとフルスキャンされてしまうのでご注意ください。</p>

<h3 id="昇順降順を入れ替えたい場合">昇順・降順を入れ替えたい場合</h3>

<p><code>#latest_comment</code> というメソッド内で使用していますが、 <code>#scan_index_forward(false)</code> と指定すると降順でソートされた状態で結果が返ってきます。未指定の場合は昇順でソートされます。
また、 <code>#scan_limit(n)</code> と指定することで、先頭から <code>n</code> 件の結果に限定して取得が可能です。<code>#latest_comment</code> ではこれらを組み合わせて最終のコメントを取得しています。</p>

<h1 id="まとめ">まとめ</h1>

<p>本稿では GSI と LSI とプライマリキーの違い、具体的な利用用途を紹介しました。<a href="http://developer.feedforce.jp/entry/2017/11/04/235323">前回の記事</a>でも触れましたが、 <code>dynamoid</code> は初回実行時にテーブルや GSI が存在していないと作成する、という挙動になるため、後で設計を変えたくなった場合に GSI や最悪テーブルを作り直す羽目になります。特に初めて利用する場合は設計の勘所を掴むのが難しいので、リリース前に入念に設計を見直すことをお勧めします。その点では RDS 以上に慎重な設計が求められるように感じています。
色々と気を付けなければならない点も多いですが、並列動作性は非常に高いので、利用したくなるシーンが必ず出てくると思います。その際に本稿が少しでもお役に立てば幸いです 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go で Datadog の Alfred Workflow を作った]]></title>
        <id>https://blog.tsub.me/post/create-alfred-workflow/</id>
        <link href="https://blog.tsub.me/post/create-alfred-workflow/"/>
        <updated>2017-11-26T07:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>最近会社の同僚が <a href="http://developer.feedforce.jp/entry/2017/11/13/085404">Alfred Workflow を Go で書いたという LT を発表していて</a>面白そうだったので、自分も書いてみました。</p>

<p>以下のリポジトリで配布しています。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/alfred-datadog-workflow">tsub/alfred-datadog-workflow: A Alfred workflow to open Datadog pages</a></p>

<p>Workflow のダウンロードリンクは<a href="https://github.com/tsub/alfred-datadog-workflow/releases">こちら</a>から最新バージョンのものをどうぞ。</p>

<p><img src="https://gyazo.com/378dfd74e772c2d48776c5edd8ce6833.png" alt="image" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode ファイル検索の除外設定]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/24/195644</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/24/195644"/>
        <updated>2017-11-24T10:56:44.000Z</updated>
        <summary type="html"><![CDATA[<div style="border-radius: 5px; padding:1.3rem; margin-bottom: 2.3rem; background: #e0efe0;">
<strong>2019/10/15 追記</strong> 現在（Version 1.39.1）の VSCode では詳細検索オプションの内容が異なっております。詳しくは <a href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" >公式ドキュメントをご参照ください</a>。本文記事中の VS Code バージョンはもっと古いです。
</div>


<p><a href="https://ac-pocketcamp.com/ja-JP/site">ポケ森</a> ⛺キャンパーレベル
 18 の引きこもり <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です。鉱石掘りのお手伝いはお気軽にお申し付けください。</p>

<p>VSCode のファイル検索の恒久的な除外条件は「基本設定」から行います。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synError">// 検索でファイルとフォルダーを除外するために glob パターンを構成します。</span>
<span class="synError">// files.exclude 設定からすべての glob パターンを継承します。</span>
&quot;<span class="synStatement">search.exclude</span>&quot;: <span class="synSpecial">{</span>
  &quot;<span class="synStatement">**/node_modules</span>&quot;: <span class="synConstant">true</span>,
  &quot;<span class="synStatement">**/bower_components</span>&quot;: <span class="synConstant">true</span>
<span class="synSpecial">}</span>,

<span class="synError">// 新しいワークスペースでテキストを検索するときに、</span>
<span class="synError">// 既定で .gitignore ファイルと .ignore ファイルを使用するかどうかを制御します。</span>
&quot;<span class="synStatement">search.useIgnoreFilesByDefault</span>&quot;: <span class="synConstant">false</span>,
</pre>


<p>この設定をすると <code>Cmd + P</code> によるファイル移動の候補から、指定したものを除外することができます。</p>

<p>後者の <code>.gitignore</code> <code>.ignore</code> による除外を有効にしておけば、<code>search.exclude</code> を個別に書かなくてもいい感じに除外されてハッピーです。</p>

<p>この設定を Explorer の「検索」 <code>Cmd + Shift + F</code> でも有効にするには「詳細検索の切り替え」（検索ボックス右下の <i class="fa fa-ellipsis-h"></i> マーク）で詳細検索オプションを開き「無視設定ファイルを使用します」を ON にします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171124/20171124195104.png" alt="f:id:tmd45:20171124195104p:plain:w300" title="f:id:tmd45:20171124195104p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>このボタンに気づくまでに時間がかかってしまいました…( ´・ω・`)</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode の Multi-root workspace]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/14/121634</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/14/121634"/>
        <updated>2017-11-14T03:16:34.000Z</updated>
        <summary type="html"><![CDATA[<p>元 Vim 使いの <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn1.www.st-hatena.com/users/tm/tmd45/profile.gif" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。<a href="http://blog.tmd45.jp/entry/2017/08/05/132028">今年諸事情で VSCode に乗り換えた</a>ばかり。</p>

<p>Version 1.18.0 の新機能 Multi-root workspace が仕事で便利というだけのお話。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_18" title="Visual Studio Code October 2017" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://code.visualstudio.com/updates/v1_18">code.visualstudio.com</a></cite></p>

<p>関わってるプロダクトの関連するリポジトリがたくさんあるので（バックエンド、フロント、インフラ、その他…）まとめられるのはありがたい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171114/20171114120408.png" alt="f:id:tmd45:20171114120408p:plain:h230" title="f:id:tmd45:20171114120408p:plain:h230" class="hatena-fotolife" style="height:230px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171114/20171114120955.png" alt="f:id:tmd45:20171114120955p:plain:h230" title="f:id:tmd45:20171114120955p:plain:h230" class="hatena-fotolife" style="height:230px" itemprop="image"></span></p>

<p>git 関連の拡張をいろいろ入れてるので、どこまで標準機能か分からなくなってますが、このソース管理タブもいい感じですね。</p>

<p>最近さわってないリポジトリが一目瞭然だずぇ…</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2017/11/16 に訂正を追記しました】 社内 LT 大会で「ここがつらいよ ECS」というタイトルで発表しました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/13/183623</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/13/183623"/>
        <updated>2017-11-13T09:36:23.000Z</updated>
        <summary type="html"><![CDATA[<h2>[追記] この記事の内容について訂正</h2>

<p>この記事内、及び Speaker Deck に投稿したスライドの中で誤っていた箇所があったため、訂正致します。</p>

<p>「ECS Optimized AMI では ecs-agent のバージョンが固定されない」という内容ですが、そういった問題はありませんでした。</p>

<p>AWS の方から直接アドバイスを頂いたところ、弊社が使用していた User Data のスクリプト内で <code>$ yum update</code> を実行していたことが原因となっていました。
<code>$ yum update</code> によりインスタンスを新規に立てた際に常に最新の ecs-agent や Docker がインストールされていました。</p>

<p>そのため、ECS Optimized AMI によってインストールされる ecs-agent と Docker のバージョンは以下のドキュメントで提示されているバージョンが常にインストールされることになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdocs.aws.amazon.com%2FAmazonECS%2Flatest%2Fdeveloperguide%2Fcontainer_agent_versions.html" title="Amazon ECS Container Agent Versions - Amazon EC2 Container Service" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_agent_versions.html">docs.aws.amazon.com</a></cite></p>

<p>スライド中でも紹介しているように、一番困っていた問題が解消されたため AWS のサポートの方には非常に感謝をしております。</p>

<p>誤った情報を公開してしまい、申し訳ありませんでした。</p>

<hr />

<p>こんにちは、バックエンドエンジニアの tsub (<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn1.www.st-hatena.com/users/ts/tsub511/profile.gif" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a>) です。</p>

<p>先日の社内 LT 大会にて、「ここがつらいよ ECS」というタイトルで発表してきました。</p>

<p>社内 LT 大会の記事についてはこちらをご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F11%2F205600" title="FFLT開催しました！ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/11/205600">developer.feedforce.jp</a></cite></p>

<p>私が発表したスライドはこちらです。</p>

<script async class="speakerdeck-embed" data-id="4b214465b598443dbb55cfa35cd56aa3" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>せっかくですので、スライドにて紹介している「第一位 ecs-agent と Docker のバージョンが勝手に上がる」についてもう少し詳しく解説をしたいと思います。</p>

<h2>ECS を用いたバッチシステムの運用について</h2>

<p>弊社では Amazon ECS を用いたバッチシステムを運用しています。</p>

<p>Amazon ECS を用いたバッチシステムについての詳細は以前弊社の新卒エンジニアが書いてくれたので、こちらの記事をご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Ffeedforce%2Fpost_articles%2F59811" title="新卒１年目がバッチサーバーにECSを使ってDockerを導入した話 | feedforce Story" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.wantedly.com/companies/feedforce/post_articles/59811">www.wantedly.com</a></cite></p>

<h2>ecs-agent について</h2>

<p><a href="https://github.com/aws/amazon-ecs-agent">ecs-agent</a> とは、Amazon ECS にインスタンスを認識させるために動かす必要のあるエージェントです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Faws%2Famazon-ecs-agent" title="aws/amazon-ecs-agent" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/aws/amazon-ecs-agent">github.com</a></cite></p>

<p><a href="https://hub.docker.com/r/amazon/amazon-ecs-agent/">Docker イメージが配布されていて</a>、通常はコンテナとして立ち上げます。</p>

<p><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">ECS Optimized AMI</a> を利用していれば、インスタンスを起動したタイミングで勝手に立ち上げてくれるので、特に意識せずとも ECS を使えると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdocs.aws.amazon.com%2FAmazonECS%2Flatest%2Fdeveloperguide%2Fecs-optimized_AMI.html" title="Amazon ECS-Optimized AMI - Amazon EC2 Container Service" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">docs.aws.amazon.com</a></cite></p>

<p>ただし、ECS においてはこの ecs-agent がコンテナの配置、監視などを行っているため、かなり重要な役割となりますので、無視してはいけない存在です。</p>

<h2>ecs-agent のバグによりいくつかのタスクが起動しなかった</h2>

<p>以前、以下の Issue で取り上げられている ecs-agent v1.14.2 のバグにより ECS でいくつかのタスクが起動しなくなっていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Faws%2Famazon-ecs-agent%2Fissues%2F833" title="1.14.2 causing container instances to grind to a halt · Issue #833 · aws/amazon-ecs-agent" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/aws/amazon-ecs-agent/issues/833">github.com</a></cite></p>

<p>2017/06/08 に ecs-agent を全コンテナインスタンスで v1.14.2 にアップデートしたことにより、06/08 から 06/13 にかけて 6 つのタスクが PENDING 状態のまま止まっていてインシデントが起きてしまいました。</p>

<p>この時は、上記 Issue でも書かれているように、一旦 <code>amazon/amazon-ecs-agent:latest</code> イメージにバグが発生する以前の v1.14.1 を Push し直してくれたことで、バージョンをロールバックすることはできました。</p>

<p>ただ、このような問題を再度起こさないためにも ecs-agent のバージョンは固定したいところですが、固定はできないという問題がここで発覚しました。</p>

<h2>ECS Optimized AMI では ecs-agent のバージョンが固定されない</h2>

<p>ECS Optimized AMI を使っていれば ecs-agent を自動的に立ち上げてくれますが、これが少々曲者です。</p>

<p>ECS Optimized AMI を使ってインスタンスを立ち上げた時、起動する ecs-agent のバージョンは常に最新のものが使われるのです。</p>

<p>しかも、AMI の中に ecs-agent がパッケージングされているかと思ったら、AMI をアップデートせずとも、インスタンスを新しく起動したら最新の ecs-agent が自動的に使用されます。</p>

<p>更に言うと、この ecs-agent のバージョンをユーザーが固定することはできず、最新バージョンしか選択肢がありません。</p>

<p>そのため、上述したようなバグが ecs-agent に含まれてしまった場合に回避不可能になります。</p>

<p>新たにインスタンスを立ち上げず、手動で ecs-agent をアップデートしなければ今動いてるもののバージョンが変わることはありませんが、オートスケーリングの設定をしていた場合、スケールアウトしたらそのインスタンスからは最新の ecs-agent が使われてしまう、という状況です。</p>

<p>この回避不可能な仕様に日々悩まされています。</p>

<p>ちなみに、Docker のバージョンも ecs-agent と同じようにバージョンが固定されていません。</p>

<h2>どう運用しているか</h2>

<p>では、弊社ではどう運用しているかというと、一部のコンテナインスタンスにカナリアリリース的にアップデートし、しばらく最新バージョンの ecs-agent をクラスタの中に紛れ込ませて稼働させておきます。</p>

<p>例えば 10 台のコンテナインスタンスを動かしていたとして、その内の 2, 3 台だけ ecs-agent をアップデートします。</p>

<p>アップデート自体は AWS コンソールから可能ですので簡単です。</p>

<p>数台だけアップデートした後 1, 2 週間ほど経ってから <a href="https://github.com/aws/amazon-ecs-agent/issues">ecs-agent の Issue</a> を確認して、特に大きな問題が起きてなさそうなら全台アップデートする、というような運用をしています。</p>

<p>これで今のところ ecs-agent のバグを踏む確率は多少減ったかな、という印象です。</p>

<h2>まとめ</h2>

<ul>
<li>ecs-agent のアップデートによりバグが入り込む可能性がある</li>
<li>ECS Optimized AMI における ecs-agent と Docker のバージョン固定はできず、新しいインスタンスを起動すると最新が使われる</li>
<li>一部のコンテナインスタンスだけアップデートし、しばらく経って問題なければ全台アップデートする、という運用をしている</li>
</ul>


<p>というわけで、今後も ECS による運用を続けていきますが、何か良いソリューションがあれば教えていただきたい次第です。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverlessconf Tokyo 2017 に参加してきました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/05/111553</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/05/111553"/>
        <updated>2017-11-05T02:15:53.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>先日のおとうふ先生の記事にもあったように、<a href="http://tokyo.serverlessconf.io/">Serverlessconf Tokyo 2017</a> というイベントが都内で開催されておりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F02%2F221452" title="Serverlessconf Tokyo 2017 で IBM Cloud Functions のアツい話を聞いてきた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/02/221452">developer.feedforce.jp</a></cite></p>

<p>11/3(金) のメインカンファレンスには弊社からも5名ほど参加しており、みんな大学生の頃の100倍くらい意識高く勉強して参りました ✌︎('ω')✌︎
お昼ご飯に弁当出たのが嬉しかったです ✌︎('ω')✌︎
あと、馴染みあるメンツでカンファレンス行くと、終わってから飲みに行けるのも良いですね ✌︎('ω')✌︎</p>

<p>さて、今回の記事では当日の発表内容についていくつかダイジェストと感想を書いていきたいと思います。</p>

<p>スライドはこちらのサイトでまとめられているようで大変助かります 🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.n-novice.com%2Fentry%2F2017%2F11%2F03%2F240000" title="Serverlessconf Tokyo 2017 公開資料 - にわかエンジニア好きなことを書く備忘録" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.n-novice.com/entry/2017/11/03/240000">www.n-novice.com</a></cite></p>

<h1>サーバレスアーキテクチャによる時系列データベースの構築と監視</h1>

<script async class="speakerdeck-embed" data-id="c1e5e041140945188ca5b0de4ee32f34" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Mackerel という監視サービスをどのように監視・管理しているのか、というお話</li>
<li>時系列データベースの構成

<ul>
<li>Kinesis Streams へ保存</li>
<li>Lambda で Redis へ保存</li>
<li>Redis に一定件数溜まったら DynamoDB へ保存

<ul>
<li>一度 Redis を挟んでいるのは書き込みコストを抑えるため</li>
</ul>
</li>
<li>DyanmoDB の TTL を超えるデータは S3 へ保存</li>
</ul>
</li>
<li>データの参照性に合わせて書き込み先を変更しているのはナルホド</li>
<li>監視についてまとめ

<ul>
<li>メトリックを可視化して眺めよう</li>
<li>監視の基礎は平常状態を知ること</li>
<li>系全体の可用性を監視しよう</li>
</ul>
</li>
</ul>


<p>Serverless を使った具体的な設計例として、とても参考になります。
時系列データベースの実装として、複数のストレージを上手く組み合わせて設計されているのは色々なシーンで応用できる設計例ではないでしょうか。</p>

<h1>Java チームが選択したTypeScript による AWS Lambda 開発</h1>

<p><a href="http://riotz.works/slides/?2017-serverless-conf">Slides | Riotz Works</a></p>

<ul>
<li>固定 IP を実現するには VPC lambda が必要

<ul>
<li>VPC の lambda はすごく遅い</li>
<li>固定 IP に対する需要は現在も一定数あるようなので。。。（日本では特に）</li>
</ul>
</li>
<li>マイクロ化が過剰で複雑になった

<ul>
<li>どの程度の粒度でサービスを切り分けていくか、というのは相変わらずセンスが問われるな、という印象</li>
</ul>
</li>
<li>言語毎に実行速度がずいぶん違う

<ul>
<li>一度 Java で実装して、スピードが出ずに TypeScript で実装し直した

<ul>
<li>Java は初回実行時はオーバーヘッドが大きい</li>
<li>バッチ処理のように計算量が多い処理であれば Java の方が速いようです</li>
<li>AWS Lambdaの処理性能を言語毎に測ってみた

<ul>
<li><a href="http://acro-engineer.hatenablog.com/entry/2016/08/02/120000">http://acro-engineer.hatenablog.com/entry/2016/08/02/120000</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>Serverlessの世界に特別なことなんて何もなかった</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fslideship.com%2Fusers%2F%40marcy-terui%2Fpresentations%2F2017%2F11%2F5vUYExsSUrPbyjyjKA7J99%2F" title="The mind of Serverless as a Software - Serverlessの世界に特別なことなんて何もなかった -" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://slideship.com/users/@marcy-terui/presentations/2017/11/5vUYExsSUrPbyjyjKA7J99/">slideship.com</a></cite></p>

<ul>
<li>Serverless でよくある課題と解決

<ul>
<li>Functionの適切な分割・統合</li>
<li>Functionやサービス間のデータの受け渡し</li>
<li>外部サービスの呼び出しとエラーハンドリング</li>
<li>テスト</li>
</ul>
</li>
<li>スライドに色々な Tips が詳しく書かれているので一読すると吉

<ul>
<li>ただ、紹介されている方法だと Lambda Function の粒度がかなり細かくなるので、その辺の管理は大丈夫なのか気になりました</li>
<li>マイクロ化しすぎ問題とかは大丈夫でしょうか？</li>
</ul>
</li>
<li>どういうサービスが Serverless に向いているのか、という話も出てくるので参考になります

<ul>
<li>個人的には特性を押さえた上で、従来の Rails のようなアプリケーションと Serverless をハイブリッドに組み合わせて使うのが良いと考えています</li>
</ul>
</li>
</ul>


<h1>Serverlessとか言う前に知ってほしいDBのこと</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fslideship.com%2Fusers%2F%40marcy-terui%2Fpresentations%2F2017%2F11%2FNV8cP63mxs1tLw4qkct7Xd%2F" title="Serverlessとか言う前に知ってほしいDBのこと" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://slideship.com/users/@marcy-terui/presentations/2017/11/NV8cP63mxs1tLw4qkct7Xd/">slideship.com</a></cite></p>

<ul>
<li>一個前のと同じ登壇者の方

<ul>
<li>こちらは DB についての tips</li>
<li>いい感じに煽られていたので、来週弊社で開催される <a href="http://developer.feedforce.jp/entry/2017/11/02/190000">LT大会</a> でもこんな感じのノリを期待しています ✌︎('ω')✌︎

<ul>
<li><a href="http://developer.feedforce.jp/entry/2017/11/02/190000">&#x793E;&#x5185;LT&#x5927;&#x4F1A;&#x6E96;&#x5099;&#x4E2D; - Feedforce Developer Blog</a></li>
</ul>
</li>
</ul>
</li>
<li>非同期で並列数を制限すれば RDS を Lambda から利用しても問題ない

<ul>
<li>同時接続数が爆発しないように調整して使えば OK

<ul>
<li>Lambda から RDS を使ってはいけない、というのがセオリーだったので、使えると言い切る人がいたのはインパクトあった</li>
<li>まあ確かに。例えば AWS Aurora の db.r3.large だと 最大接続数が 1,000 ある

<ul>
<li><a href="http://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.MaxConnections">http://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.MaxConnections</a></li>
</ul>
</li>
<li>同時に 1,000 を超える Lambda が実行されなければ理屈の上では大丈夫なはず</li>
<li>用法用量を守って正しくお使いください、というやつか。。</li>
</ul>
</li>
</ul>
</li>
<li>DynamoDB でフルスキャンしたら負け

<ul>
<li>この辺は最近自分でも勉強していたので再確認しながら聞いていました（宣伝）</li>
</ul>
</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F04%2F235323" title="Dynamoid の使い方【range 編】 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">developer.feedforce.jp</a></cite></p>

<h1>真のサーバレスアーキテクトとサーバレス時代のゲーム開発・運用</h1>

<script async class="speakerdeck-embed" data-id="100ed8972466451a8fab9450e51bb0c6" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>他の発表と被ってしまったので、当日の講演は見られなかったのですが、ブログの方を見たらとても興味深い内容だったのでご紹介しておきます🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fgs2.hatenablog.com%2Fentry%2F2017%2F11%2F04%2F013215" title="Serverlessconf Tokyo 2017 に登壇しました。そのほか雑感 - GS2 Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://gs2.hatenablog.com/entry/2017/11/04/013215">gs2.hatenablog.com</a></cite></p>

<blockquote><p>実は、私もSaaSはサーバレスなのか？という事に対しては、ちょっと思うところがあります。
私はフルマネージドサービスはサーバレスだと思いますが、マネージドサービスはサーバレスではない。と思っているためです。
また、別の言い方をすると、スケールに限界があるモノはサーバレスではない。と思っています。
つまり、使用方法さえ間違えなければ《勝手に》《無限に》スケールするフルマネージドサービスこそがサーバレス。と言えるのではないか。と思っています。</p></blockquote>

<p>SaaS の運用・開発してる人だと結構重要なテーマなのではないか、と思います。
SaaS なんだからリクエストどんだけ送っても向こう側で良きに計らってくれるやろ。そう思ってた時期が俺にもありました 😇
とは言え、SaaS 利用者からそう見えるようなサービスにしたい、という思いはあります。SaaS 利用者としても SaaS の裏側のことは一切考えずに利用したいと思うので。。
弊社の <a href="https://socialplus.jp/">ソーシャル PLUS</a> も SaaS ですが、利用して頂いているサイトがイベントなどでアクセスが急騰するケースがありますので、開発・運用ではそういう点に気を遣っています。</p>

<ul>
<li>コールドスタート対策

<ul>
<li>コールドスタートとは

<ul>
<li>Lambda は初回呼び出し時やしばらく呼ばれなかった後に呼ばれたときは response time が長くなる</li>
</ul>
</li>
<li>1 つの Lambda Function に全ロジックを入れる

<ul>
<li>API Gateway のエンドポイント毎にどのロジックを実行するかパラメータで渡している</li>
<li>コール比率の低いエンドポイントでもコールドスタートを回避できる</li>
</ul>
</li>
<li>パラメータで動作が変わる

<ul>
<li>Rails の Routing のようなものと佐藤は解釈しました</li>
</ul>
</li>
<li>一定間隔で Lambda を起こすように Invoke させる方法もあるが、個人的には Routing やらせる方式の方が良いのではないか、という気がする

<ul>
<li>Lambda Function が大量に作られてしまう（マイクロ化しすぎ問題）と管理が難しくなるのではないか、という思いもあって</li>
<li>この方法は実際に試してみたいです</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>所感</h1>

<p>Serverless に限ったことではありませんが、近年登場する新技術はトレードオフな側面が強いように感じています。
一昔前は今までは解の無かった技術的課題を解決する形で新しい技術が登場する、というケースが多かったのではないでしょうか？
対して今は、既存の技術でもできなくはないけど、特定のケースで困るから、それを解決する新しい技術が登場する、というケースが多いような。
そして、その特定のケースを解決するために、一部のことは許容しなければならない、という印象です。
（まあ単純に僕も歳をとって、保守的な考え方が強くなってきただけなのかもしれません。。）</p>

<p>今回のカンファレンスは実際の開発者からどういうトレードオフがあるか、という話が出てきたことで、自分の中で改めて Serverless と向き合う覚悟というか、モチベーションが出てきたように思います。</p>

<p>とはいえ、個人的には、従来の Rails アプリと Serverless をハイブリッドに使った設計に取り組んでいくのが現時点での最適解ではないかと感じています。
もちろん、設計を考えた上で Full-Serverless が最適となれば、そういうアプリを作って行くつもりですが、それなりに複雑なロジックを考えるにはまだ Full-Serverless は早いのではないかな、と思います。
やはり並列性の高さが Serverless の魅力なので、アプリケーションの基本的な部分は従来通り Rails で作成して、アクセス数が急にスパイクするような場所を局所的に Serverless にするような設計をこれから色々試していこうと考えています。</p>

<p>ただ、Serverless のコンセプトとしては、ソフトウェア開発の生産性そのものを向上させることが目的とのことだったので、将来的にはハイブリッドよりも Serverless に振り切った設計がベストになっていくかもしれません。今後の発展に期待しています。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamoid の使い方【range 編】]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/04/235323</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/04/235323"/>
        <updated>2017-11-04T14:53:23.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>最近こうして <a href="http://developer.feedforce.jp/entry/2017/10/12/100000">弊社の tech ブログが移転した</a> 訳ですが、自社で管理してるブログだと投稿フローがめんどくさいと僕がボヤいたのが移転理由の一端だったりします 😎
でも移転作業したのは僕じゃなくて、球だけ投げてどっか行きました 😎
移転ありがとうございます 🙇</p>

<p>移転して一発目の投稿なので張り切って参ります 💪</p>

<p>さて、Rails で DynamoDB を利用する際の ORM として <code>dynamoid</code> があります。
今回は <code>dynamoid</code> から Hash-Range Table (Partition Key と Sort Key の複合) を利用する方法について紹介します。</p>

<p><code>dynamoid</code> の導入方法については以前書いたこちらの記事を参考にしてみて下さい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.feedforce.jp%2Fdynamodb-setup-on-rails.html" title="DynamoDB を Rails で使えるようにするためのあれこれ | feedforce Engineers&#39; blog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tech.feedforce.jp/dynamodb-setup-on-rails.html">tech.feedforce.jp</a></cite></p>

<h1>Hash-Range Table ってなんぞ</h1>

<h2>その前に名称の整理をしておきます</h2>

<p>タイトルに 【range 編】と書いているのですが、これは Sort Key の事を指します。
どうやら DynamoDB は初期の頃と現在で一部の名称が変化したようです。
しかし、 <code>Dyanmoid</code> では相変わらず旧名称のまま (<code>hash_key</code>, <code>range_key</code>) でパラメータを指定するので、対応表を記載しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 旧名称 </th>
<th style="text-align:center;"> 現名称 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Hash Key </td>
<td style="text-align:center;"> Partition Key </td>
</tr>
<tr>
<td style="text-align:center;"> Range Key </td>
<td style="text-align:center;"> Sort Key </td>
</tr>
</tbody>
</table>


<h2>DyanmoDB には 2 種類のプライマリキーがある</h2>

<p>こちらのスライドが分かりやすいのですが、 DynamoDB のテーブル定義として Hash Table と Hash-Range Table というものがあります。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=24" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>




<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=26" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<ul>
<li>Hash Table

<ul>
<li>Hash Key (Partition Key) という一つのカラムの値でプライマリキーを表現するテーブル</li>
<li>この構成だと Hash Key は <strong>重複させることができない</strong></li>
</ul>
</li>
<li>Hash-Range Table

<ul>
<li>Hash Key と Range Key (Partition Key,  Sort Key) の二つの値でプライマリキーを表現する</li>
<li>Range Key が異なっていれば、同一の Hash Key を持つレコードが複数存在しても良い</li>
<li>スキャンより高速なクエリ <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> で複数のレコードを取得することが可能

<ul>
<li>スキャンだと物凄くコストが高いので、基本的にクエリだけでデータ取得できるように設計すべき</li>
</ul>
</li>
<li>Range Key での昇順・降順でのソートが可能</li>
<li>Range Key に対しての <a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Query.html#Query.KeyConditionExpressions">範囲検索</a> も可能</li>
</ul>
</li>
</ul>


<h1><code>dynamoid</code> での利用方法</h1>

<h2>テーブル定義</h2>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  range :range_key, :string # &lt;= これ
end</pre>


<p><code>range :(フィールド名), :(データ型)</code> で Range Key の定義が可能です。
ちょっと試せていないのですが、AWS コンソールからだとテーブル作成時にしか Range Key (ソートキー) を定義できないので、既に存在しているテーブルに途中で <code>range</code> の定義を加えても動作しないと思います。</p>

<h2>使い方</h2>

<p>Dynamoid にも ActiveRecord と同じように <code>#where</code> というメソッドが実装されています。
ドキュメントでは内部でどのような動きをするのかが見当たらなかったので、実装から確認したのですが、検索条件に Hash Key や Range Key が含まれているかどうかを判断して、クエリが使える場合はクエリで検索してくれるようです。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;) # クエリで検索される
User.where(hash_key: &#39;hash_key&#39;, range_key: &#39;range_key&#39;) # クエリで検索される
User.where(name: &#39;name&#39;) # Hash Key が無いのでスキャンが実行される</pre>


<p>ただし、引数の指定方法や定義の仕方が少しでも間違っていると <code>#where</code> でスキャンが実行されてしまっているケースがあります。本当にクエリ検索されているか、念のため Rails のログ出力を確認し、スキャンが実行されていないかどうか確認するようにして下さい ⚠️</p>

<p><code>#where</code> の使い方は ActiveRecord とほぼ同じです。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;).all # =&gt; [#&lt;User:0x000000076ed848&gt;, #&lt;User:0x0000000779abb0&gt;, ...]
User.where(hash_key: &#39;hash_key&#39;).each do |user|
  user # =&gt; #&lt;User:0x000000076ed848&gt;
end
User.where(hash_key: &#39;hash_key&#39;).first # =&gt; #&lt;User:0x000000048cb050&gt;
User.where(hash_key: &#39;hash_key&#39;).last # =&gt; #&lt;User:0x000000048cb050&gt;</pre>


<p>そして、 <code>range_key</code> に対して <code>gt</code>, <code>lt</code>, <code>gte</code>, <code>lte</code>, <code>begins_with</code>, <code>between</code> の演算子が使用できます。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.gt&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.lt&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.gte&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.lte&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.begins_with&#39;: &#39;range_&#39;)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.between&#39;: [100, 200])</pre>


<h2>ハマりポイント</h2>

<p>ここからは Range Key を <code>dyanmoid</code> を使っていてハマった点をいくつか紹介したいと思います。</p>

<h3><code>range</code> を定義していると <code>#find_by_id</code> の動作が変わる</h3>

<pre class="code" data-lang="" data-unlink># Hash Table として利用
class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
end

# OK!
User.find_by_id(&#39;hash_key&#39;)
# =&gt; #&lt;User:0x000000048cb050&gt;</pre>




<pre class="code" data-lang="" data-unlink># Hash-Range Table として利用
class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  range :range_key, :string
end

# Error!
User.find_by_id(&#39;hash_key&#39;)
# =&gt; Aws::DynamoDB::Errors::ValidationException: The provided key element does not match the schema</pre>


<p>んん？？ってなったのですが、こういう事らしいです。</p>

<ul>
<li><code>#find_by_id</code> は内部的には <code>Aws::DynamoDB::Client#get_item</code> を呼び出している</li>
<li><code>#get_item</code> は結果が一意に定まる検索条件を指定しないとエラーになる

<ul>
<li>つまり <code>range_key (primary sort key)</code> を定義している場合は引数一つだとエラー</li>
<li>引数に <code>range_key</code> を指定すれば OK</li>
</ul>
</li>
</ul>


<pre class="code" data-lang="" data-unlink>Line::User.find_by_id(&#39;hash_key&#39;, range_key: &#39;range_key&#39;)
# =&gt; #&lt;User:0x000000048cb050&gt;
# OK!</pre>


<h3><code>has_many</code> は Hash-Range Table に対応していない</h3>

<p><code>dynamoid</code> では ActiveRecord のような <code>has_many</code> <code>has_one</code> <code>belongs_to</code> が定義されているのですが、 Hash-Range Table だと上手く動作しません。
内部の実装を見てみましたが、 Hash Table の状態で利用することが前提となっているようでした。</p>

<p>Hash Table であればこんな感じで利用することができます。</p>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  has_many :talks, class: Talk
end

class Talk
  include Dynamoid::Document

  table name: :talks, key: :hash_key
  belongs_to :user, class: User
end

user = User.create(name: &#39;Taro&#39;)
user.talks.create(content: &#39;Hello world&#39;)</pre>


<h1>まとめ</h1>

<p>Hash Table と Hash-Range Table の違いから、 Dynamoid における実装方法についてを紹介しました。
Dynamoid を利用した場合は migration を明示的に実行する訳ではないため、Rails のソースコードと DyanmoDB のテーブルの実態が必ずしも一致していないケースがある点がハマりどころのような気がします。
本稿で紹介した Hash-Range Table が DynamoDB と Dynamoid 両方で正しく設定されているかをリリース前に入念にチェックした方が良いでしょう。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/QueryAndScanGuidelines.html">クエリとスキャンのベストプラクティクス</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[github-nippou という gem を golang で書き直したという発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2017/10/16/150000</id>
        <link href="https://developer.feedforce.jp/entry/2017/10/16/150000"/>
        <updated>2017-10-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。増田（<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn1.www.st-hatena.com/users/ma/masutaka26/profile.gif" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>）です。社内勉強会の順番が来ると、２ヶ月前くらいからソワソワしてきます。</p>

<p>そんなわけで今回は『日報を golang で支える技術』というお題で発表しました。</p>

<h2>発表の内容</h2>

<script async class="speakerdeck-embed" data-id="b96e99d03504492f85e58bff0c8d1171" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>以下、スライドからの抜粋です。</p>

<ul>
<li>背景など

<ul>
<li><a href="https://masutaka.net/chalow/2016-04-09-1.html">以前の社内勉強会で github-nippou という gem を紹介した</a></li>
<li>ひとつの ruby スクリプトからそこそこ作り込み、毎日便利に使っている</li>
<li>先日も同僚の <a href="https://github.com/ryz310">@ryz310</a> から pull request をもらって、さらに便利になった</li>
<li>からの、golang への書き換えをした。その場でライブリリース</li>
</ul>
</li>
<li>モチベーション

<ul>
<li>以前 <a href="https://github.com/github/hub/releases/tag/v2.2.0">hub コマンドが ruby から golang に移行した</a>のを見て、一度やってみたかった</li>
<li>rubygems の CLI を Dockerize してポータビリティを高めるのは何かが違うという気持ち</li>
<li><a href="https://github.com/ryz310">@ryz310</a> からもらった元気</li>
</ul>
</li>
<li>当たり前だけど、全て代わりの方法を調べて実装しなければいけなかった

<ul>
<li>octokit → go-github, thor → cobra など。Assets の取り扱いも変わる</li>
</ul>
</li>
<li>良かったこと

<ul>
<li>１バイナリになったのでインストールやアップデートが容易になった</li>
<li>パフォーマンスも予想外に上がった（当社比約２倍）

<ul>
<li>以前調べた時は GitHub への API アクセスがボトルネックだったので、そこまで変わらないと思っていた</li>
</ul>
</li>
<li>結果的にいろんなライブラリを使えて、良い素振りになった</li>
</ul>
</li>
<li>困ったこと

<ul>
<li>とにかく関数が長くなりがち</li>
<li>getXXX() 多くなりすぎ</li>
<li>ファイル分割の意味</li>
<li>書けば書くほど golang っぽい書き方が分からなくなる</li>
<li>OOP ではないことへの戸惑い</li>
<li>ruby が柔軟すぎて移植は難しかった。オススメはしない</li>
</ul>
</li>
<li>疑問など

<ul>
<li>class設計で便利だった、private method の代わり

<ul>
<li>設計し直すべきか</li>
<li>classを 使わなかった頃の JS の知見を知りたい</li>
</ul>
</li>
<li>ビジネスロジックのパッケージ名はどうすれば

<ul>
<li>今回は lib にした</li>
</ul>
</li>
</ul>
</li>
<li>感想

<ul>
<li>今後、rubygems で CLI ツールを作ることはないと思う。継続利用を考えると勧めづらい</li>
<li>golang は単一ファイルでの実装と実行に一番ハードルが低い気がしている

<ul>
<li>もっと楽な言語あったら教えて</li>
</ul>
</li>
</ul>
</li>
<li>今後の予定

<ul>
<li>golang っぽい書き方にする</li>
<li>もっとテストを書く</li>
<li>golang on Lambda や API サーバも学習する</li>
<li>『<a href="https://www.amazon.co.jp/dp/B01FH3KRTI">スターティングGo言語</a>』を読み切る</li>
</ul>
</li>
</ul>


<h2>結果</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163806.png" alt="f:id:masutaka26:20171014163806p:plain" title="f:id:masutaka26:20171014163806p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>↓</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163802.png" alt="f:id:masutaka26:20171014163802p:plain" title="f:id:masutaka26:20171014163802p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://github.com/masutaka/github-nippou">https://github.com/masutaka/github-nippou</a></p>

<h2>発表の感想</h2>

<p>付箋紙に感想を書いてくれました。<i class="blogicon-comment" aria-hidden="true"></i> は私からのコメントです。</p>

<ul>
<li>クラス設計周りの話は自分も悩んでいます

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ライブラリとか読んで学習します！</li>
</ul>
</li>
<li>GraphQL 対応の PR 出すぞ

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> お待ちしております！</li>
</ul>
</li>
<li>Go の GraphQL のクライアント側はまだなさそう

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> <a href="https://github.com/graphql-go/graphql">github.com/graphql-go/graphql</a> を見つけました。API リクエストを 1 回に出来るのかな？</li>
</ul>
</li>
<li>CLI は ruby &lt; golang わかる。mruby も良いかも

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> mruby はエコシステムが大変そうで...</li>
</ul>
</li>
<li>Makefile 参考にします

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> あざす！</li>
</ul>
</li>
<li>Makefile 全く分からない... 勉強しないと！！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 基本だったら１日くらいで分かりますよ。make はビルドを必要な時だけに抑えられるので良いです</li>
</ul>
</li>
<li>流石ますたかさん とても面白く熱量ある発表でした

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ありがとうございます。熱量は大事にしてます</li>
</ul>
</li>
<li>神回ですね

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> もっと技術レベル上げていきます！</li>
</ul>
</li>
<li>刺激を受けるいい話だった

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 刺激を与えるのがエンジニアとして使命のひとつだと思っています</li>
</ul>
</li>
<li>スピード up は nice 発見

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ですね</li>
</ul>
</li>
<li><p>やっぱりはやくなるものなんだなー</p>

<p>  <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160652.jpg" alt="f:id:masutaka26:20171014160652j:plain" title="f:id:masutaka26:20171014160652j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 速いだけでテンションが上がります</li>
</ul>
</li>
<li>golang 熱の高まり・・・！！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> やりましょう！</li>
</ul>
</li>
<li>go モチベーションの高さの理由が分かりました！！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> もう必死ですよ</li>
</ul>
</li>
<li>ずっと Go 書いてたのはこれだったのかー（棒）

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> そうなんですよー（棒）</li>
</ul>
</li>
<li>Go 書きたい

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 今書きましょう！</li>
</ul>
</li>
<li><p>ゴー書いてく！！</p>

<p>  <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160710.jpg" alt="f:id:masutaka26:20171014160710j:plain" title="f:id:masutaka26:20171014160710j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ｱ､ﾊｲ</li>
</ul>
</li>
<li>ざんねん！！わたし（@ryz310）の PR はここでおわってしまった！！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> またお待ちしております！（笑）</li>
</ul>
</li>
<li>バイナリ配布うれしい！

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> ユーザの皆様のことを第一に考えております</li>
</ul>
</li>
<li>CLI は golang <del>Web やる気にはなら…</del>

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> 配布を考えるとそうですねー。今は GitHub でリリースしておけば、Homebrew や zplug など配布手段はいろいろありますし</li>
</ul>
</li>
<li>ディストリビューション大変だなー

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> gox で簡単に並列ビルドできるので、それほど大変ではなかったですね</li>
</ul>
</li>
<li>知見 ライブデプロイ is つらい

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> もうハラハラドキドキですよ</li>
</ul>
</li>
<li>ライブデプロイメント

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> やはり初回の CI は絶対失敗しますね...</li>
</ul>
</li>
<li>（社内 Slack の）#golang を今後ともよろしくお願いします

<ul>
<li><i class="blogicon-comment" aria-hidden="true"></i> こちらこそ！</li>
</ul>
</li>
</ul>


<h2>最後に</h2>

<p>とにかく設計が目下の悩みです。良い情報があれば教えてください！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[開発者ブログを移行しました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/10/12/100000</id>
        <link href="https://developer.feedforce.jp/entry/2017/10/12/100000"/>
        <updated>2017-10-12T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>これまで Middleman Blog + GitHub Pages で運営していた弊社開発者ブログを、はてなブログに移行しました。</p>

<p>過去の記事は移行前のアドレス <a href="http://tech.feedforce.jp">http://tech.feedforce.jp</a> からご覧いただけます。</p>

<ul>
<li><a href="http://b.hatena.ne.jp/entrylist?url=http://tech.feedforce.jp&amp;sort=hot">旧ブログのホットエントリー</a></li>
</ul>


<p>移行をきっかけに心機一転、これまでよりカジュアルな情報公開を目指していきます。<br/>
フォードフォース【新生】開発者ブログを、どうぞよろしくお願いします！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go で s3-edit という CLI アプリケーションを作った]]></title>
        <id>https://blog.tsub.me/post/create-s3-edit/</id>
        <link href="https://blog.tsub.me/post/create-s3-edit/"/>
        <updated>2017-09-05T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>最近 Rust を少し学んでいたが、難しくて少し挫折しかけたのと、結局仕事への導入を考えるなら Go のほうが既に書ける人が何人かいる、というのもあり Go を書き始めた。</p>

<p>手初めてに欲しい CLI アプリケーションがあったのでそれをサクッと Go で書いてみた。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/s3-edit">tsub/s3-edit: Edit directly a file on Amazon S3</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[pecoからfzfに移行した]]></title>
        <id>https://blog.tsub.me/post/move-from-peco-to-fzf/</id>
        <link href="https://blog.tsub.me/post/move-from-peco-to-fzf/"/>
        <updated>2017-05-03T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>今までずっと <a href="https://github.com/peco/peco">peco</a> を使ってきたが、そろそろ別のツールに変えてみるか&hellip;と思い立ったので <a href="https://github.com/junegunn/fzf">fzf</a> に移行した。</p>

<p><a href="https://github.com/junegunn/fzf">junegunn/fzf: A command-line fuzzy finder written in Go</a></p>

<p>自分は基本的に飽き性なので、定期的に環境を変えたくなる時期が来るのだが fzf が思ってたより良かったので紹介したい。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブログをGKEでの運用に移行した]]></title>
        <id>https://blog.tsub.me/post/operate-blog-server-on-gke/</id>
        <link href="https://blog.tsub.me/post/operate-blog-server-on-gke/"/>
        <updated>2017-04-16T05:29:33.000Z</updated>
        <summary type="html"><![CDATA[<p>このブログはGitHub pagesを使って公開していたが、GKEに移行することにした。</p>

<p><a href="https://blog.tsub.me/post/created-blog-by-hugo/">はてなブログからHugo on Github Pagesに移行しました</a></p>

<p>これを聞いて、99%の人が、HugoでHTMLファイルを生成して公開しているならわざわざサーバーなんて必要ないんじゃないか？金の無駄じゃないか？と思うかもしれない。</p>

<p>自分もそう思う。</p>

<p>今回GKEを使ったのはGKEとk8sでのコンテナ運用を経験したかったことが非常に大きい。</p>

<p>会社ではECSを本番運用しているが、ECSに比べてk8sの方が良さそうな雰囲気しかないのでGKEの方も触っておこうかと思って移行した。</p>

<p>また、今のところブログ以外に個人で運用しているWebサービス等はないため、ブログがちょうどいい題材だった。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくの情報収集方法]]></title>
        <id>https://blog.tsub.me/post/how-i-collect-information/</id>
        <link href="https://blog.tsub.me/post/how-i-collect-information/"/>
        <updated>2016-12-17T07:50:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/1427">feedforce Advent Calender 2016</a>の17日目の記事です。</p>

<p>前回の記事はpokotyamuによる<a href="http://pokotyamu.hatenablog.com/entry/2016/12/16/095524">HHKBを掃除した話</a>でした</p>

<p>無刻印のキーだからといってどのキーでも当てはまると思って適当にやるとものすごい罠に引っかかっちゃうんですね。</p>

<p>さて、今回は多くのエンジニアにとって重要なキーワードである情報収集についてです。</p>

<p>自分は多分社内ではわりと情報収集よくやってる方だと思っているのですが、自分が普段どんな方法で情報収集してるかを共有したかったので今回まとめてみました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[フトらない話]]></title>
        <id>https://blog.tmd45.jp/entry/2016/12/10/135046</id>
        <link href="https://blog.tmd45.jp/entry/2016/12/10/135046"/>
        <updated>2016-12-10T04:50:46.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/1427">feedforce Advent Calendar 2016</a> の 10 日目の記事です。</p>

<p>昨日は弊社営業チームから初めて Advent Calendar に参加してくれた黒い伝道師・喜多の『<a href="http://lineblog.me/kosukekita/archives/62812.html">クリスマスまでまだ間に合う！日焼けマシンを使えば誰でも黒くモテ肌を手に入れる事ができる</a>』でした。クリスマスに向けた Advent Calendar にぴったり（？）の記事。日焼けマシーンってサイ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A1%BC">バー</a>な感じしますね（・∀・）</p>

<p>今年の弊社 Advent Calendar は "エンジニア" に限らない、ということで「健康オタク」枠として、去年参加した <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> のその後の話を書きます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2015%2F12%2F23%2F130639" title="さらに3ヶ月経過 - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2015/12/23/130639">blog.tmd45.jp</a></cite></p>

<p>ダイエットではない。断じて。</p>

<h3>昨年のあらすじ</h3>

<table>
<thead>
<tr>
<th> 時期 </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2015年3月 </td>
<td> 一人暮らし再開。人生最重量 58 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 32 %。体重記録開始 </td>
</tr>
<tr>
<td> 2015年4月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/04/07/012713">"カロリー記録を始めて 19 日で 2.8 kg 落ちた"</a><a href="#f-f5eed0df" name="fn-f5eed0df" title="ちなみにカロリー記録は iOS アプリの『MyFitnessPal』を使っていました。">*1</a> </td>
</tr>
<tr>
<td> 同頃 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/04/18/163328">Withings Activité（活動量・睡眠計測）利用開始</a><a href="#f-377be23b" name="fn-377be23b" title="その前は『fitbit one』ユーザでした。">*2</a> </td>
</tr>
<tr>
<td> 2015年5月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/05/13/203200">糖質制限に興味を持ちはじめて「糖質軽減」をはじめる</a> </td>
</tr>
<tr>
<td>  </td>
<td> だいたい 1kg/月 で体重が減り続けて <del>調子に乗る</del> </td>
</tr>
<tr>
<td> 2015年9月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/09/23/131225">約半年の結果</a>。体重 50.7 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 24.4 % 🎉 </td>
</tr>
<tr>
<td> 2015年12月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/12/23/130639">さらに3ヶ月経過</a>。体重 51.1 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 25.4 %。冬ゆえの微増 </td>
</tr>
</tbody>
</table>


<p>そういえば、その後 社内で『<a href="http://d.hatena.ne.jp/asin/4478039674/tmd45-22">シリコンバレー式 自分を変える最強の食事</a>』が一斉を風靡してました。実際に社長が体質改善に成功してました。
人それぞれ体質的・性格的に合うものを選ぶのが一番良いですね（感想）。</p>

<p>以前の記事でも書きましたが、カロリー記録は続けていません。だいたい普段食べるもののカロリーや成分（炭水化物／糖質）の傾向が見えてきたとこで終わりにしました。</p>

<p>カロリーの制限もしていません。むしろカロリーオフの商品とか困る。活動エネルギーはとりつつ、糖質を控えたい。ただ糖質（炭水化物）の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1">コスパ</a>が良すぎるんですよね。食事に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1">コスパ</a>を求めると必然的に糖質メインに摂取することになるかと思います。</p>

<p>ゆえにこの二年、食費は以前よりかかってる気がしますヽ(；´Д｀)ノ</p>

<h3>一年ぶりの報告記事です</h3>

<p>さて前置きが長くなりましたが、その後のご報告です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20161210/20161210130424.png" alt="f:id:tmd45:20161210130424p:plain" title="f:id:tmd45:20161210130424p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20161210/20161210130435.png" alt="f:id:tmd45:20161210130435p:plain" title="f:id:tmd45:20161210130435p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">【祝】リバウンドなし【維持】</span></p>

<p>褒めてくれていいのよ( ･´ｰ･｀)＋</p>

<p>去年サボった健康診断を、今年はちゃんと行ってきたんですが、看護師さんたちに「この体重は意図して減らしたんですか…？」「なにかありました…？（心配」「これ以上減らさないでくださいね（叱」って言われました。わーい（？）</p>

<p>安心してください、ブラックじゃないです（意味深）</p>

<p>なにより血液検査（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E5%BC%D5">代謝</a>）の結果、脂質の項目がすごく良くなった。2年前との比較ですが</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C3%E6%C0%AD%BB%E9%CB%C3">中性脂肪</a>: 143 mg/dL → 40 mg/dL（むしろ減りすぎ）</li>
<li>HDL-<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>: 59 mg/dL → 67 mg/dL（善玉<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>微増👍）</li>
<li>LDL-<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>: 156 mg/dL → 89 mg/dL（悪玉<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>大幅減🎉）</li>
</ul>


<p>これはびっくりした。あと糖質軽減してても血糖値はほとんど変わりなしでした。意外。</p>

<p>健康診断は毎年受けましょうね( ◠ ◡ ◠ )</p>

<h3>考察</h3>

<p>糖質軽減で自分が成功したのは、もともとの体重増加の原因が、不必要な糖質の取りすぎによるものであったからだと思います。</p>

<p>先にも書きましたが、体質は人それぞれなので、太っていると感じるならその太っている原因も人それぞれ。原因に対する対策も人それぞれです。</p>

<p><del>ダイエット</del> 体質改善は流行り廃りに乗ってやっても、当たりハズレに振り回されるだけになりかねないので、自分の体質をよく観察して自分に合うものを選びましょう（真面目）</p>

<h3>最近のこと</h3>

<p>体重の減少があまりなくなって、維持の時期になってからは去年よりも多少糖質摂取量は増えました。</p>

<p>ガンガン減ってるときはそれが楽しくて「せっかく体重減ってるのにいまここで食べちゃったらもったいないな」みたいに思って、あまり「食べたい！」みたいな気分にもならなかったですし。</p>

<p>最近はご飯とか甘いものとかも食べたくて食べるようになってきました。そこで気をつけているのは、とにかく先に野菜をお腹にいれておくということです。まず野菜。野菜。野菜。ここ最近は「糖質警察」より「野菜先に食えババア」になりつつあります。</p>

<p>野菜ジュースでもいいけど、砂糖や果実で味を整えてるために糖質の高いものもあるので気をつけて😉</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/forever5yearsold/2808759067/in/photolist-5hcCdt-8JeSZ1-grmZLz-ossY4u-7AMHBe-cc1SbW-oo8Tak-7H2G4A-7SzJtP-4zorqE-8UFrgv-5p5yds-5ucmeb-52pKAr-9JYMkV-7SzJW4-9JYLWB-ossXWf-bVsnSX-as23tS-bymSS8-o9otzg-5xgaYM-cvv6y9-8d37Tg-bvS4Qd-9WeDfm-9WeDbu-2tN1Vw-cW5sVb-hnhr83-4Uqxfi-8ijb8Q-kALMMF-9K2Bc5-oY8vf9-7SzKck-8arAwJ-ozK9Sx-oJDVvn-9BjQQz-qu1PXg-969ph6-qSW4YB-AurF2q-9aRtLF-7HgeNW-amLgHC-9yLjbY-6YnLS5" title="Vegetables in Whole Foods Market"><img src="https://c4.staticflickr.com/4/3290/2808759067_de40a54f47_b.jpg" width="1024" height="768" alt="Vegetables in Whole Foods Market"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>筋トレも暇な時にやるような習慣になりつつあります。まぁ真面目にはやってないので筋肉がつくほどではないですが… 通勤で歩く距離を伸ばしたり、地味にやっております。</p>

<h3>おわりに</h3>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">よくあんな仕様が曖昧でログ出力も無くて運用で回避している箇所がたくさんあるシステムの面倒を見てくれているよなって思いますよね…</p>&mdash; <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%BB%A4%A4">かせい</a>さん (@kasei_san) <a href="https://twitter.com/kasei_san/status/807403160734007296?ref_src=twsrc%5Etfw">2016年12月10日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>健康診断は定期的に受けましょうね（2度目）。</p>

<p>いかがでしたでしょうか。明日は <span style="color: #aaaaaa"><del><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> アカウントは持ってるけど発言数が少なくて基本的に「おもしろいこと」しか公開しないタイプの</del></span> @Lorentzca による 2 記事目『分散惑星間データセンター(Grid Interplanetary Data Center)時代のデータ通信技術』の話だそうです。</p>

<p>真面目か…？！乞うご期待。</p>

<p><ins datetime="2016-12-13T11:47:25+09:00"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%C9%B5%AD">追記</a></ins></p>

<p>こやつｗｗｗｗｗｗｗ（いい話でした ☺）</p>

<ul>
<li><a href="https://ghost.ponpokopon.me/blogs-heart/">去年より個人ブログのポスト数を2倍くらい増やせたのでなぜなのか書く</a></li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-f5eed0df" name="f-f5eed0df" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">ちなみにカロリー記録は <a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a> アプリの『MyFitnessPal』を使っていました。</span></p>
<p class="footnote"><a href="#fn-377be23b" name="f-377be23b" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">その前は『fitbit one』ユーザでした。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blox Introduction]]></title>
        <id>https://blog.tsub.me/post/blox-introduction/</id>
        <link href="https://blog.tsub.me/post/blox-introduction/"/>
        <updated>2016-12-08T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2016/docker">Docker Advent Calendar 2016</a>の9日目の記事です。</p>

<p>先日AWSのre:Invent 2016で<a href="https://blox.github.io/">Blox</a>が発表されました。</p>

<p>BloxはEC2 Container Service(ECS)関連のオープンソースのツール群のことです。</p>

<p>そしてそのツールとは主にECSのカスタムスケジューラを指します</p>

<p>ECSはマネージドなスケジューラとマネージャを標準で備えていますが、Bloxはそれとは別に自分でホスティングする必要があります。</p>

<p>しかし、ECSに足りない機能を補ってくれるため導入するメリットは大きいでしょう。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/monitor-cluster-state-with-amazon-ecs-event-stream/">先日リリースされた、CloudWatchEventsのECSイベントストリーム</a>を利用することで、よりスムーズにECSのクラスタの状態を監視してカスタムスケジューラを作ることができるようになりました。</p>

<p>Bloxはこれを使った一例と言えます</p>

<p>この記事ではBloxについて試してみて分かった内容や所感について書いていきます</p>

<p><img src="https://i.gyazo.com/4c00e85fca7b228d7aa0d5f1e6dd1d27.png" alt="Blox thumbnail" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[はてなブログからHugo on Github Pagesに移行しました]]></title>
        <id>https://blog.tsub.me/post/created-blog-by-hugo/</id>
        <link href="https://blog.tsub.me/post/created-blog-by-hugo/"/>
        <updated>2016-08-11T16:01:16.000Z</updated>
        <summary type="html"><![CDATA[<p>はてなブログをやめて、Hugo on Github Pagesに移行しました。</p>

<p>といっても、走りだしのブログであまり記事は多くないんですが..</p>

<p>移行した理由は、以前のブログを構築した際に、調子に乗ってはてなブログProに登録して独自ドメインを使っていたのですが、思ったよりも記事を書かずお金がちょっと勿体無いなーと思い始めてきたのでGithub Pagesに移行しました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovimのterminal emulatorが便利すぎた]]></title>
        <id>https://blog.tsub.me/post/neovim-on-terminal-emulator/</id>
        <link href="https://blog.tsub.me/post/neovim-on-terminal-emulator/"/>
        <updated>2016-07-02T13:08:23.000Z</updated>
        <summary type="html"><![CDATA[<p>少し前にvimからneovimに移行したのですが、vimよりさくさくな気がする、程度でneovimの機能を特に活用していませんでした。</p>

<p>実はneovimにはterminal emulatorという機能があり、vimの中でshellを起動することができます。</p>

<p>例えばコードを書きつつ、rspecを実行したりpryやtigを使ったりなど、非常に便利です。</p>

<p><a href="https://gyazo.com/ca4b9ef1599801f1948721befe274654.png"><img src="https://i.gyazo.com/ca4b9ef1599801f1948721befe274654.png" alt="" /></a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[tokyo.ex #3 参加してきた]]></title>
        <id>https://blog.tsub.me/post/tokyo-ex-3-entry-report/</id>
        <link href="https://blog.tsub.me/post/tokyo-ex-3-entry-report/"/>
        <updated>2016-06-30T14:56:16.000Z</updated>
        <summary type="html"><![CDATA[<p>tokyo.ex #3 に参加してきました。</p>

<p><a href="http://beam-lang.connpass.com/event/32704/">tokyo.ex #3</a></p>

<p>前々からtokyo.ex #1, #2と気にはなっていたんですが、気づいた時には定員が埋まってまして今回やっと参加できました。</p>

<p>と思ってたらわりと席空いてたりキャンセル多かったり、定員超えてるからといって諦めなくても良かったみたいですね</p>

<p>参加してみての全体的な感想ですが、正直最近elixirを触ってなかったのでいい刺激になりました。</p>

<p>話の内容は非常にレベルが高く、大半は理解できませんでしたが、その分elixirの勢いとコミュニティの熱さは十分伝わってきました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[serverspecで複数のdocker containerに対してテストしたい]]></title>
        <id>https://blog.tsub.me/post/serverspec-for-several-container/</id>
        <link href="https://blog.tsub.me/post/serverspec-for-several-container/"/>
        <updated>2016-06-25T14:36:05.000Z</updated>
        <summary type="html"><![CDATA[<p>前回の記事でdocker containerに対してserverspecでテストができるようになりました。</p>

<p><a href="https://blog.tsub.me/post/serverspec-for-docker/">serverspecでdocker containerに対してテストしたい</a></p>

<p>dockerを扱う以上、containerは複数立てるのが普通です。</p>

<p>今回は複数のcontainerを立てた時にそれぞれのcontainerに対してテストする方法について書いていきます。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[serverspecでdocker containerに対してテストしたい]]></title>
        <id>https://blog.tsub.me/post/serverspec-for-docker/</id>
        <link href="https://blog.tsub.me/post/serverspec-for-docker/"/>
        <updated>2016-06-25T13:25:08.000Z</updated>
        <summary type="html"><![CDATA[<p>仕事でこれからdockerを使い始めるので、dockerを触りつつメモがてら記事に残していきます。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[goshiTKG]]></title>
        <id>https://blog.tmd45.jp/entry/2015/12/23/153236</id>
        <link href="https://blog.tmd45.jp/entry/2015/12/23/153236"/>
        <updated>2015-12-23T06:32:36.000Z</updated>
        <summary type="html"><![CDATA[<p>本日3本目の更新になります。この記事は <a href="http://www.adventar.org/calendars/720">TKG Advent Calendar 2015</a> の 23 日目です。昨日は <a href="http://www.adventar.org/users/2729">daruyanagi</a> さんの『<a href="http://daruyanagi.jp/entry/2015/12/22/000000">文明の利器をフル活用して oTKG に挑戦する</a>』でした。</p>

<p>温玉おいしそうでした。かくいう私は最近毎日お弁当に固茹で玉子を入れておりまして、それはフライパンで茹でて 10 分くらい（＋お湯にいれたまま放置 10 分くらい）です。半熟も嫌いじゃないのですが作るの難しいですね。製造機素敵です。</p>

<p>さてさて、それではアラサー毒女の普通の TKG をどうぞ。</p>

<h3>材料</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142039.jpg" alt="f:id:tmd45:20151223142039j:plain:w400" title="f:id:tmd45:20151223142039j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>うちに炊飯器はありません。<a href="http://blog.tmd45.jp/entry/2015/12/23/130639">諸般の事情で普段あまり白米を食べません</a>ので。胡麻と塩昆布は正義です。</p>

<h3>構築</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142824.jpg" alt="f:id:tmd45:20151223142824j:plain:w400" title="f:id:tmd45:20151223142824j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>レンジで温めた直後の輝くご飯と、ミックスサイズの卵です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142954.jpg" alt="f:id:tmd45:20151223142954j:plain:w400" title="f:id:tmd45:20151223142954j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>お茶碗でいい感じにご飯を崩して、卵を割り入れました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223143050.jpg" alt="f:id:tmd45:20151223143050j:plain:w400" title="f:id:tmd45:20151223143050j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>軽くご飯と混ぜつつ醤油をかけます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223143245.jpg" alt="f:id:tmd45:20151223143245j:plain:w400" title="f:id:tmd45:20151223143245j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>用意した薬味類を盛り付けます。あと隠し味的にごま油をすこーーーしだけたらしました。胡麻のいい香りです。</p>

<h3>実食</h3>

<p>いつもどおりの美味しいお味です。醤油が多少古くても、塩昆布の風味のおかげで美味しい醤油っぽい味になります。胡麻の香りも最高。胡麻と塩昆布は正義です（2回目）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144141.jpg" alt="f:id:tmd45:20151223144141j:plain:w400" title="f:id:tmd45:20151223144141j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>おそまつさまでした。</p>

<h3>おわりに（おまけ）</h3>

<p>普段は朝ごはんか晩ごはんにしか TKG しないので、昼 TKG はちょっと新鮮でした。また子供の頃に食べていた TKG はこんなにいろいろ乗せたりしておらず、この辺は大人になって自分で工夫し始めた点かなと思います。</p>

<p>胡麻と塩昆布は正義です（３回目）。普段は木綿豆腐をレンジで温めたものに、これらの薬味を乗せて食べることが多いです。というわけでタイトルは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Goma">Goma</a> と Shio-konbu の TKG でした。ひねりなし。</p>

<p>TKG 自体、だいぶ久しぶりに食べましたが、やはり美味しいですね。</p>

<p>おまけとして、ちょっと食べ足りなかったので酒のつまみに作ったベーコンチーズも載せておきますね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144412.jpg" alt="f:id:tmd45:20151223144412j:plain:w400" title="f:id:tmd45:20151223144412j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>厚切りベーコン 100g（三割引）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144446.jpg" alt="f:id:tmd45:20151223144446j:plain:w400" title="f:id:tmd45:20151223144446j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>チーズ on the ベーコン and レンジで温め</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144713.jpg" alt="f:id:tmd45:20151223144713j:plain:w400" title="f:id:tmd45:20151223144713j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>バジルと粗挽き胡椒 on the hot ベーコン</p>

<p>大変美味しゅうございます。オーブンで焼いたほうがきっともっと美味しいです、が面倒なのでレンチンで済ます。</p>

<p>明日は <a href="http://www.adventar.org/users/5462">osapon</a> さんが<a href="http://diary.osa-p.net/2015/12/tkg.html">極々普通の TKG</a> について書いてくださるようです。というか毎日違う Advent Calendar に参加・更新されててすごい。</p>

<p>ではでは。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[さらに3ヶ月経過]]></title>
        <id>https://blog.tmd45.jp/entry/2015/12/23/130639</id>
        <link href="https://blog.tmd45.jp/entry/2015/12/23/130639"/>
        <updated>2015-12-23T04:06:39.000Z</updated>
        <summary type="html"><![CDATA[<p>本日2本目の更新。この記事は <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> の 23 日目です。前の回は <a href="http://www.adventar.org/users/6667">Miki Shoji</a> さんのはずですが、その前の記事は <a href="http://www.adventar.org/users/1795">yancya</a> さんの『<a href="http://upec.jp/archives/705">yancya の糖質制限日記</a>』でした。</p>

<p>理性に完全に従う強い心がないと<a href="https://gist.github.com/a-suenami/30b51e90278df694ee61">糖質警察</a>にはなれないな、と思いました。素人（？）には 1日 40g 制限でもかなりキツイです。私は以前とりすぎていた糖質<a href="#f-f4a8f135" name="fn-f4a8f135" title="主にじゃがいもとパスタと菓子類。あと白米の常食はやめましたけど、たまに食べてます。">*1</a>を減らしているだけなので、つらい思いはしていません。<br/>
ちなみに今日はこれから <a href="http://www.adventar.org/calendars/720">TKG Advent Calendar 2015</a> の記事執筆のためにひさびさに TKG（たまごかけごはん）を食べる予定です。</p>

<p>前回の報告からさらに3ヶ月が経過しました。時が経つのは早いですね。</p>

<ul>
<li><a href="http://blog.tmd45.jp/entry/2015/09/23/131225">約半年の結果 - TMD45'β'LOG!!!</a></li>
</ul>


<h3>近況報告</h3>

<p>さて現在どうなってるかといいますと</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223123855.png" alt="f:id:tmd45:20151223123855p:plain" title="f:id:tmd45:20151223123855p:plain" class="hatena-fotolife" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223123904.png" alt="f:id:tmd45:20151223123904p:plain" title="f:id:tmd45:20151223123904p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">【悲報】冬眠準備【微増】</span></p>

<p>目標値はキープしてるので、季節的にもとりあえず増加分はあまり気にしないことにします。できれば体重 50kg 切りたかった＆<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 22 % 達成したかったですが、忘年会だー年末進行だーオフィス移転だーってね。</p>

<p>オフィス移転が、何の関係があるのかとお思いでしょうが、<i>引っ越し祝いで良いお菓子をたくさんいただいているのです</i>。ありがたいです。お土産の糖質はカウントしません。ありがたくいただきます<a href="#f-6f9a1c45" name="fn-6f9a1c45" title="以前、人様からいただいたものに「糖質だ糖質だ」と言ってましたが大変失礼だったと反省しております。まぁいまも言うだけは言うんですが（大変失礼）">*2</a>。</p>

<p>あと体重が増えてきたのは若干の筋肉増があったからとも考えられます。前回宣言したとおり、少しずつ筋トレ的なことも始めました。</p>

<h3>筋トレ的な話</h3>

<p>通っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>院の先生曰く、運動は歩く量を増やすのが一番健康に良いとのこと。早歩きで1日20分くらい歩きまわるのがいいそうです。そのへんは通退勤で意識しています。体重が減ったおかげか、いつしか辛くなっていた階段の利用も苦じゃなくなっておりまして、駅では階段を使うようにしたりと初歩的なことをやってます。</p>

<p>あと同じく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>の先生に言われたのが、腰痛などを防止するために脚〜お尻の筋肉をつけるとよいという話。なのでお尻の筋トレをやってます。<a class="keyword" href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a> アプリで週に2,3回。</p>

<ul>
<li><a href="https://www.runtastic.com/ja/apps/butttrainer">Runtastic Butt Trainer- Runtastic</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223130027.png" alt="f:id:tmd45:20151223130027p:plain:w270" title="f:id:tmd45:20151223130027p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223130257.png" alt="f:id:tmd45:20151223130257p:plain:w270" title="f:id:tmd45:20151223130257p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span></p>

<p>これが短時間でできるわりに、軽く筋肉痛になるくらいで自分にはちょうどよかったです。室内で出来る程度の動きなのもありがたい。飛んだりはねたり、単身者の賃貸で出来ないですからね…</p>

<p><blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">あ、先生といえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>の先生に「筋肉少ししっかりしてきましたね」って褒められた！まだまだ頑張るぞ！</p>&mdash; たま●2日目東ウのどこか (@tmd45) <a href="https://twitter.com/tmd45/status/665479504274440193">2015, 11月 14</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">あとお腹の筋肉も良い感じになってきてると褒められた_(:3 」∠)_</p>&mdash; たま●2日目東ウのどこか (@tmd45) <a href="https://twitter.com/tmd45/status/670479955315159040">2015, 11月 28</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>他人からフィードバックを貰えるのは励みになります。隔週で通ってるのですが、もう先生に褒めてもらうために続けているようなものです。</p>

<h3>おわりに</h3>

<p>はい、そんなわけで。まとまり無いですが、自分の「糖質制限」は無理なく続けていきたいと思います。</p>

<p>冬になったのでまた「きのこ＋葉物野菜＋もやし＋豚肉」アンド「豆腐」の日替わり出汁鍋習慣が始められそう。簡単だし美味いしいっぱい食べられるのでおすすめです。</p>

<p>明日は…あれもう終わり？まだ明日・明後日（それ以外にも…）空きがありますので、興味持たれたかたは参加してみてはいかがでしょうか！</p>

<ul>
<li><a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015 - Adventar</a></li>
</ul>


<p>ではでは。</p>

<p><ins>追記</ins></p>

<p>24 日目 <a href="http://www.adventar.org/users/10505">snaga</a> さんが更新してくださいました！『<a href="http://snaga1024.tumblr.com/post/135763588739/%E6%B8%9B%E9%87%8F%E7%94%9F%E6%B4%BB2015">A Hacker's Memorandum — 減量生活2015</a>』です。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-f4a8f135" name="f-f4a8f135" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">主にじゃがいもとパスタと菓子類。あと白米の常食はやめましたけど、たまに食べてます。</span></p>
<p class="footnote"><a href="#fn-6f9a1c45" name="f-6f9a1c45" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">以前、人様からいただいたものに「糖質だ糖質だ」と言ってましたが大変失礼だったと反省しております。まぁいまも言うだけは言うんですが（大変失礼）</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[受付システムつくってみた（仮）]]></title>
        <id>https://blog.tmd45.jp/entry/2015/12/23/112220</id>
        <link href="https://blog.tmd45.jp/entry/2015/12/23/112220"/>
        <updated>2015-12-23T02:22:20.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/906">フィードフォースエンジニア Advent Calendar 2015</a> の 23 日目の記事です。昨日は <a href="http://www.adventar.org/users/1332">kano-e </a> さんの３本目の記事で『<a href="https://gist.github.com/kano-e/f80ab651aa31f60a49c4">自分が文章を書く時と、開発してる時って、実は同じようなこと考えて作業を進めてる</a>』というお話でした！わかる（迫真）</p>

<p>「半年で約8kg痩せて筋肉ムキムキ(予定)になった話 OR (運用されていれば)受付システムの話」という予定でしたが、前者は後ほど <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> に寄せる記事で書こうと思いますので、ここでは後者の話をすることにします。</p>

<p>ただ残念なことにまだ運用は始められていないので、とりあえず作ることにした経緯などエモーショナルい話をしたいと思います。</p>

<h3>オフィス移転するで（したで！）</h3>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fblog.feedforce.jp%2Farchives%2F13833" title="祝！湯島移転！ | フィードフォース全力ブログ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://blog.feedforce.jp/archives/13833">blog.feedforce.jp</a></cite></p>

<p>今年の 10 月下旬、オフィスの移転の話がはっきりしてきた頃にこんなメモをガーッと書いて、社内の Slack に URL を放流。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223101522.png" alt="f:id:tmd45:20151223101522p:plain" title="f:id:tmd45:20151223101522p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>弊社には社内のエンジニア有志が続けている『<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>』<a href="#f-82d5bb38" name="fn-82d5bb38" title="“FFもくもく会” のご紹介！ | feedforce Engineers' blog">*1</a>がありまして、自分もそこで作ってみよう (๑•̀ㅂ•́)و✧ と先のメモをもって宣言してみました。</p>

<p>Qiita のメモを公開した日（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>開催の木曜日）は「とりあえず <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> で作ろうかなー」「まずは Heroku で動けばいいや」「社員を管理するモデルとー」みたいな感じで想像を膨らませていただけだったのですが、<strong>その翌日</strong> 。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223102524.png" alt="f:id:tmd45:20151223102524p:plain" title="f:id:tmd45:20151223102524p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">できてる…だと…？！</span> (； ･`д･´)</p>

<p>ゆるふわ銃殺系フロントエンド芸人 @habu0104 兄貴により、だいたいの実装が出来上がっていました。なんということでしょう。スクショが無いんですが、ちゃんと画面側もいい感じに出来上がっていました。</p>

<p>いやー、ほんとフロントエンドすごい。<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a> 界隈すごい。自分の手が遅いのは多分にあるんですが、このスピード感はほんとすごいなぁ。…と関心するとともに、ちょっと心が折れた（笑）</p>

<h3>わたしのかんがえる さいきょうの</h3>

<p>スピード感は完全に負けたわけですが、いろいろと細かいところで「わたしのかんがえる（ry」イメージがありまして、それを叶えるために遅ればせながら自分でも実装を開始。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> セットアップして〜 URL とモデル設計して〜…なんてちまちまこっそり、private repository で作り続けていたのです。が。</p>

<ul>
<li><a href="https://kitayon.co/">Kitayon | オフィス向け受付アプリ Kitayon（キタヨン）</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223105805.png" alt="f:id:tmd45:20151223105805p:plain" title="f:id:tmd45:20151223105805p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">ぎゃああああああああああああああ</span> :(；ﾞﾟ'ωﾟ'):</p>

<p>風呂グラマー masuidrive 氏のプロダクトβ発表…なんというタイミング…<a href="#f-5a8c428f" name="fn-5a8c428f" title="ちなみに弊社もβ応募中だったと思う…運用のこと考えたら自前で作るより外部サービス利用したほうが後が楽なんですよねー。私もその後のメンテのこと考えると、こっち使いたい（ぇ">*2</a></p>

<p>これはもう私個人がひとりで作ってるヘボ受付システムなんていらないじゃん。もうこれでいいじゃん。心が折れた（2回目）</p>

<h3>わたしのかんがえる…さい…きょうの…（涙）</h3>

<p>スピード感、大事。</p>

<p>でもでも「わたしのか（ry」イメージを叶えたい一心で実装を続けました。俺得…俺得でいいんや…</p>

<p>というわけで、移転には間に合いませんでしたが、現在なんとか「受付システム」っぽい感じには仕上がっております。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223103923.png" alt="f:id:tmd45:20151223103923p:plain:w270" title="f:id:tmd45:20151223103923p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104203.png" alt="f:id:tmd45:20151223104203p:plain:w270" title="f:id:tmd45:20151223104203p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104458.png" alt="f:id:tmd45:20151223104458p:plain:w270" title="f:id:tmd45:20151223104458p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104510.png" alt="f:id:tmd45:20151223104510p:plain:w270" title="f:id:tmd45:20151223104510p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span></p>

<p>まだまだ思い描いている機能の半分もできてないのですが、とりあえず受付できるレベル。恥ずかしながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>も公開プレイ始めました。</p>

<ul>
<li><a href="https://github.com/tmd45/knock-on">tmd45/knock-on</a></li>
</ul>


<p>年明けくらいには本番環境を作って、社内でテストを始めたいなと思っております。 <del>その前にはやく Kitayon のβ運用始まらないかな。</del></p>

<p>目下の悩みはいま社内に転がってる <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> が初代で <a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS%205">iOS 5</a>.1.1 からバージョンアップできないことですかね。とりあえず動きはしましたが <a class="keyword" href="http://d.hatena.ne.jp/keyword/Safari">Safari</a> で <a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a> Animation が動かなくて悲しい気持ちになりました。<br/>
この受付システムをアピールして、新しい <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> を買ってもらえるように頑張りたいと思います (๑•̀ㅂ•́)و✧</p>

<h3>おわりに</h3>

<p>システムのつくりの話には全く触れませんでしたが、いかがでしたでしょうか。</p>

<p>明日はフィードフォースの年中サンタクロース <a href="http://www.adventar.org/users/7217">hoshinotsuyoshi（@hoppiestar）</a>が<a href="http://qiita.com/hoshino/items/7f41d996b66eebd897a0">書いてくれるみたいです</a>。ではでは。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-82d5bb38" name="f-82d5bb38" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://tech.feedforce.jp/ff-mokumoku.html">“FFもくもく会” のご紹介！ | feedforce Engineers' blog</a></span></p>
<p class="footnote"><a href="#fn-5a8c428f" name="f-5a8c428f" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">ちなみに弊社もβ応募中だったと思う…運用のこと考えたら自前で作るより外部サービス利用したほうが後が楽なんですよねー。私もその後のメンテのこと考えると、こっち使いたい（ぇ</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ドラ娘論]]></title>
        <id>https://blog.tmd45.jp/entry/2015/12/13/000000</id>
        <link href="https://blog.tmd45.jp/entry/2015/12/13/000000"/>
        <updated>2015-12-12T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/1248">Kosen Advent Calendar 2015 - Adventar</a> の 13 日目の記事です。昨日のカレンダーは空白だったようですが、前回の記事は <a href="http://www.adventar.org/users/7773">Kosuke Ohmura</a> さんの『<a href="http://bnpb.hatenablog.com/entry/2015/12/12/001714">高専をだらだら堕落しながら６年かけて卒業した話</a>』でした。</p>

<p>ボン・ソワール みなさま、@tmd45 です。今日は 4, 5年前に数回ドラ娘を勤めただけ<a href="#f-008eb7d8" name="fn-008eb7d8" title="参考記事:「ドラ娘」て知ってる？ | 非モテタイムズ http://himo2.jp/4338000 まだこの記事残ってる(^q^) 山本ユウカ先生その節は記事ありがとうございましたフヒヒ">*1</a>で、いまは「娘」ですらなくなったアラサー独女の私が思う「ドラ娘」について書き散らしたいと思います。いつか LT か何かで話そうと思って数年経ってしまったのでこの辺で消費しておこうかという感じです<a href="#f-84b535d7" name="fn-84b535d7" title="一部界隈で「ドラ娘」の存在がハラスメント問題として取り沙汰されているようですが、本記事では「LT（ライトニングトーク）の制限時間が来たら大きな音を出してトークを終了させる係のひと」という意味で伝わりやすい名詞として「ドラ娘」と表記しているとご認識ください。「ドラ娘」という存在が気に入らない場合はそっとブラウザを閉じるか、適宜お好きな表現に脳内変換してお読みください。っていうかアドベントカレンダーにそんなヘビーな世論持ちだされても困るでござるよニンニン。">*2</a>。</p>

<h3>銅鑼は権力</h3>

<p>イベントが始まる前に事前に依頼される場合もあるだろう、会場でボァー…っと発表と聞いてたら突然スカウトされることもあるだろう。やりたいと思ってたんだ！と意気込んで銅鑼を握ることもあれば、なんで自分は発表もしないのに壇上に上がらされてるんだ…と思うこともあるだろう。</p>

<p>LT で一番重要なルールは、とにかくどんなにイイ話でも、どんなに本人がまだ話したくても、制限時間がきたらその発表を中止しなければならないという部分である。昨今は少し余裕を持って終えたり、時間ピッタリで綺麗に終わる発表がやたら増えてきているような気がする。それはそれで素晴らしいかもしれないが、「なんか最後までよくわからんかったがガンバったな…っ」とか「言いたいことが／聞きたいことがいっぱいあるのに無情の銅鑼…！」という空気が LT の醍醐味だと、私は思う。</p>

<p>その無情の銅鑼を鳴らすのは他ならぬドラ娘である。</p>

<p>発表者はどんな権力や身分を持っていようと、銅鑼が鳴ったら発表を切り上げなければならない。たとえそれが先輩であろうと、校長であろうと、著名な講演者であろうと、LTの銅鑼の音の前で彼らは等しく平等であり、（タイマーと）銅鑼の音が権力を持つのだ。</p>

<h3>発表者の息の根を止める</h3>

<p>気の抜けた銅鑼の音では、発表者や聴衆の "情熱" は止められない。そんな屁のような銅鑼より、この発表をやりきりたい！面白い話を聞きたい！…そんな彼らの思いが勝ってしまう。</p>

<p>しかし LT はテンポが重要である。それはイベントのタイムスケジュールにも影響するし、次に次にと控えている発表者たちのリズムを崩し、結果的になぁなぁな雰囲気の原因となってしまう。</p>

<p>ドラ娘は、発表を中断するために発表者の息の根を止める、次の発表に向けるために聴衆の息の根を止める、この一打で仕留める…！そんな気持ちで銅鑼を叩くのだ。</p>

<h3>ドラ娘は楽しい</h3>

<p>権力と殺意を秘めつつ、LT はやはりその発表を楽しむ場だ。ドラ娘として壇上に上げられて緊張するだろうが、タイマーを見るのに気を取られすぎて全く発表を聞いていなかった…ということではやはり勿体無い。</p>

<p>タイマーを忘れて本末転倒になるのはまずいが、発表自体を楽しむことはドラ娘にも許されることだ。ラスト30秒くらいから少し気を張り、10秒前になったら静かに構えに入り、時間になったら殺意を込めて打ち鳴らせばよい。</p>

<p>また、壇上は発表者の（だいたいは）一番近くで発表を聞ける特等席である。発表を存分に楽しんで聞こう。</p>

<h3>おわりに</h3>

<p>以上が、ドラ娘を経験し、他のドラ娘たちを見てきた私の「ドラ娘論」である。今後、銅鑼を握る諸君に何か伝わるものがあれば嬉しい。</p>

<p>…なんてね〜〜<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A3%A5%EB%A5%AD%A5%F3%A5%BD%A5%F3">ウィルキンソン</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%F3%A5%B8%A5%E3%A1%BC%A5%A8%A1%BC%A5%EB">ジンジャーエール</a>ウォッカとさけるチーズうめぇ〜〜〜。うへへぇ。</p>

<p>というわけで明日は <a href="http://www.adventar.org/users/4958">myu_mx</a> さんが<a href="http://myumx.blog135.fc2.com/blog-entry-172.html">就職して感じたことというテーマで書いてくれる</a>そうです。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-008eb7d8" name="f-008eb7d8" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">参考記事:「ドラ娘」て知ってる？ | <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%F3%A5%E2%A5%C6">非モテ</a>タイムズ <a href="http://himo2.jp/4338000">http://himo2.jp/4338000</a> まだこの記事残ってる(^q^) 山本ユウカ先生その節は記事ありがとうございましたフヒヒ</span></p>
<p class="footnote"><a href="#fn-84b535d7" name="f-84b535d7" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">一部界隈で「ドラ娘」の存在がハラスメント問題として取り沙汰されているようですが、本記事では「LT（ライトニングトーク）の制限時間が来たら大きな音を出してトークを終了させる係のひと」という意味で伝わりやすい名詞として「ドラ娘」と表記しているとご認識ください。「ドラ娘」という存在が気に入らない場合はそっとブラウザを閉じるか、適宜お好きな表現に脳内変換してお読みください。っていうか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>にそんなヘビーな世論持ちだされても困るでござるよニンニン。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sphero と遊ぼう！にゃんこ編～僕にペットはいないけど #sphero #gosphero]]></title>
        <id>https://blog.tmd45.jp/entry/2013/12/08/135230</id>
        <link href="https://blog.tmd45.jp/entry/2013/12/08/135230"/>
        <updated>2013-12-08T04:52:30.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/142">Sphero Advent Calendar 2013</a> のエントリーです。前回は 12 月 5 日、<a href="http://blog.champierre.com/1031">jishiha &#x3055;&#x3093;&#x306E;&#x300E;Sphero&#x306E;&#x30A4;&#x30B1;&#x3066;&#x308B;PV&#x52D5;&#x753B;7&#x9023;&#x767A;&#x300F;</a> でした。</p>

<p>jishiha さんにはその前日2日間も、Scratch から Sphero を動かす記事を投稿していただいてます！ありがとうございました。</p>

<ul>
<li><a href="http://blog.champierre.com/1029">Sphero &#x3092; Scratch(&#x30B9;&#x30AF;&#x30E9;&#x30C3;&#x30C1;)&#x304B;&#x3089;&#x52D5;&#x304B;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x305F;&#x306E;&#x3067;&#x3053;&#x3069;&#x3082;&#x3067;&#x3082;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x3067;&#x304D;&#x308B;&#x3088; - &#x50D5;&#x306F;&#x767A;&#x5C55;&#x9014;&#x4E0A;&#x6280;&#x8853;&#x8005;</a></li>
<li><a href="http://blog.champierre.com/1030">&#x30B9;&#x30AF;&#x30E9;&#x30C3;&#x30C1;&#x304B;&#x3089;Sphero&#x3092;&#x30D6;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x3067;&#x304D;&#x308B;Scratch2Sphero&#x3092;&#x6539;&#x826F;&#x3057;&#x307E;&#x3057;&#x305F; - &#x50D5;&#x306F;&#x767A;&#x5C55;&#x9014;&#x4E0A;&#x6280;&#x8853;&#x8005;</a></li>
</ul>


<p>さて今回は、せっかくの休日担当ですし Sphero を持ってピクニックにでもと思ったのですが、肝心の Sphero を会社に忘れてくるという大失態をやらかしましたので、撮ってくるはずだった動画をネット上から探してお茶を濁したいと思います。やだ苦～い。</p>

<p>ちなみに「わんこ編」はありませんヨ、猫派だから。犬動画は犬派な方がまとめてくれればいいと思う。</p>



<h3>まずは公式から</h3>

<iframe src="//youtube.googleapis.com/v/_cgKRUNvwDU&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><a href="http://www.youtube.com/watch?v=_cgKRUNvwDU">Sphero + Cats - YouTube</a></p>

<p>＼にゃうぉー／</p>

<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1226267957">ウカカカ</a>してる子もいますね。Sphero 本体これはプロトタイプ版か何かなんでしょうか、全部透明ですね。<br/>
中身が動くことに興味を持ってる子もいたようなので、<a href="http://store.apple.com/jp/product/HD162LL/A/orbotix-sphero-20-%E3%83%AD%E3%83%9C%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%9C%E3%83%BC%E3%83%AB?fnode=39">やっぱりスケルトンは面白そう</a>です。</p>

<h3>世界の猫たち</h3>

<iframe src="//youtube.googleapis.com/v/XPfaY6EUYgQ&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><a href="http://www.youtube.com/watch?v=XPfaY6EUYgQ">Schnurrli and the Sphero - YouTube</a></p>

<p>だらーん…ケリケリケリケリ…だらーん。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/D_XGD3_dNYc" frameborder="0" allowfullscreen></iframe>


<p><a href="http://www.youtube.com/watch?v=D_XGD3_dNYc">Kittens playing with Sphero! - YouTube</a></p>

<p>子猫も夢中。<br/>
この Sphero は公式動画と同じく紐がつけてありますね。猫まっしぐら。</p>

<p>You Tube で <code>sphero cat</code> で検索して癒やされよう。癒やされた。</p>

<p>ちょっと絞り込みが難しいのでここに貼るのは断念しましたが、instagram でもたくさんの Sphero 動画が上がってます。猫動画もちらほら。<br/>
以下にご紹介するサイトは instagram の写真をタイル形式で見たりタグで検索できる <a href="http://ink361.com/">INK361</a> というサイトです。</p>

<ul>
<li><a href="http://ink361.com/app/tag/sphero">tags #sphero photos</a></li>
</ul>


<h3>さらにふたたび公式から…Nyan！</h3>

<iframe width="560" height="315" src="//www.youtube.com/embed/cjllV3_Ns7Y" frameborder="0" allowfullscreen></iframe>


<p><a href="http://www.youtube.com/embed/cjllV3_Ns7Y">Sphero Nyan Cat SpaceParty - YouTube</a></p>

<p>NYAN-CAT…いったい何者なんだ…！</p>

<ul>
<li><a href="http://www.nyan.cat/original.php">NON-STOP NYAN CAT!</a></li>
</ul>


<p>猫だけど、ペットではないな。動画にもあるとおり、Sphero のゲームで NYAN-CAT を使ったものがありますよ。</p>

<ul>
<li><a href="https://itunes.apple.com/us/app/nyan-cat-space-party!/id584287063?mt=8">Nyan Cat - Space Party! on the App Store</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.orbotix.spaceparty">Sphero Nyan Cat &#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x30D1;&#x30FC;&#x30C6;&#x30A3;! - Google Play &#x306E; Android &#x30A2;&#x30D7;&#x30EA;</a></li>
</ul>


<p>さて次回は、1日空いて() kenji.horie さん、かな？</p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ころころ可愛い♡なのに高性能！Orbotix Sphero 2.0 が面白い #sphero #gosphero]]></title>
        <id>https://blog.tmd45.jp/entry/2013/12/01/001418</id>
        <link href="https://blog.tmd45.jp/entry/2013/12/01/001418"/>
        <updated>2013-11-30T15:14:18.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/142">Sphero Advent Calendar 2013</a> の1日目のエントリーです！</p>

<p>最初の一日目<s>そしてこれで最後になるかもしれない一日目</s>は、Spheroについてご紹介をしたいと思います。念のため言っておきますがステマ記事では無いですよ～。個人的なガチマです。</p>

<h2>Sphero ってなに？</h2>

<p>Orbotix社製、ポケットに入るボール状のモバイルゲームロボットです。<br/>
「スフィーロ」と読みます。名前からしてカッコイイですね。</p>

<ul>
<li><a href="http://www.gosphero.com/">&#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;&#xFF08;&#x82F1;&#x8A9E;&#xFF09;</a></li>
<li><a href="http://www.gosphero.com/ja/">&#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;&#xFF08;&#x65E5;&#x672C;&#x8A9E;&#xFF09;</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20131130/20131130181312.png" alt="f:id:tmd45:20131130181312p:plain" title="f:id:tmd45:20131130181312p:plain" class="hatena-fotolife" itemprop="image"></span></p>


<p>キャプチャは日本語サイトのトップから。見た目にも未来を感じます。<br/>
<s>…英語のキャッチコピー、日本語にするとすごく胡散臭くなるのはなんででしょうか。英語でも胡散臭いのかな。</s></p>



<p>無断階で変化するカラーLED。非接触式充電。階段から落ちたり、水の中に入れても大丈夫な衝撃・防水対応。Bluetoothで接続してiOS/Androidアプリから操作が可能です。</p>

<p>2.0 は旧Spheroに比べてスピードアップ・機能性アップがされたとのこと。手に入れる前は、どうせ停止動作とかぐだぐだで、自転に負けてすぐに止まったりはしないだろうとゆるく考えていたのですが、これがなかなかピタッと止まってびっくりしました。</p>

<p>スピードもかなり出せる（ゆっくりもできる）ので、おもいっきり遊ぶには広い室内や公園などの外がおすすめかも。ペットを飼っているひとには、ペットのいい遊び相手になってくれるかもしれません（そんな動画もいっぱいあります）。</p>

<p>ちなみに、<b>手に入れるきっかけ</b>は。</p>

<p><a href="http://tech.feedforce.jp/">自社の勉強会</a>でちょこっと名前が出てきた程度だったのですが、真っ白でカッコイイ見た目が気になって、PVを見て、気づいたら買ってました٩(๑❛ᴗ❛๑)۶</p>

<h2>どんなふうに遊べるの？</h2>

<p>公式PVもカッコイイのですが、こちらのレビュー動画のほうが機能などはわかりやすいかも。</p>

<p><a href="http://www.macworld.com/article/2047002/review-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html">Review: Sphero 2.0 is a brighter, faster, smartphone-controlled ball of fun | Macworld</a></p>

<object id="flashObj" width="480" height="270" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,47,0"><param name="movie" value="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" /><param name="bgcolor" value="#FFFFFF" /><param name="flashVars" value="videoId=2622920079001&linkBaseURL=http%3A%2F%2Fwww.macworld.com%2Farticle%2F2047002%2Freview-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html&playerID=2577467285001&playerKey=AQ~~,AAACV85RErE~,AhFpv0ECqwFfthhmRu5jnOs8FUs2r9mP&domain=embed&dynamicStreaming=true" /><param name="base" value="http://admin.brightcove.com" /><param name="seamlesstabbing" value="false" /><param name="allowFullScreen" value="true" /><param name="swLiveConnect" value="true" /><param name="allowScriptAccess" value="always" /><embed src="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" bgcolor="#FFFFFF" flashVars="videoId=2622920079001&linkBaseURL=http%3A%2F%2Fwww.macworld.com%2Farticle%2F2047002%2Freview-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html&playerID=2577467285001&playerKey=AQ~~,AAACV85RErE~,AhFpv0ECqwFfthhmRu5jnOs8FUs2r9mP&domain=embed&dynamicStreaming=true" base="http://admin.brightcove.com" name="flashObj" width="480" height="270" seamlesstabbing="false" type="application/x-shockwave-flash" allowFullScreen="true" allowScriptAccess="always" swLiveConnect="true" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></embed></object>


<p>公式アプリはiOSのもので25種類あります。Andoroid版は見れてないのでわかりませんが、同じだけあるはず。</p>

<p>単なるコントローラーだけでなく、画面に線を書いてそのとおりに走らせたり、画面内でAR（仮想現実）と組み合わせたり、Sphero自体をコントローラーにしてシューティングゲームをしたりできるアプリが揃っています。</p>

<ul>
<li><a href="http://www.gosphero.com/ja/games/">Sphero&#x516C;&#x5F0F;&#x30A2;&#x30D7;&#x30EA;&#x4E00;&#x89A7;</a></li>
</ul>


<p>この中で『<b>orbBasic for Sphero</b>』というアプリはスマートフォン上で orbBasic という言語を使ってSpheroの動きをプログラミングできます。<br/>
もっとかんたんに動きをカスタマイズしたい場合は『<b>Sphero MacroLab</b>』を使いましょう。こちらは「用意されている定型文を組み合わせる」だけで好きな動きに調整することができます。</p>

<h4>さらにカスタマイズしたい人は！</h4>

<p><a href="http://orbotixinc.github.io/Sphero-Docs/">&#x958B;&#x767A;&#x8005;&#x5411;&#x3051;&#x30DA;&#x30FC;&#x30B8;</a>から Sphero の SDK が入手できます。公式で iOS, Android, Unity, Windows 8.1。非公式のもので Node や Windows Phone、Ruby や Python のライブラリもあります。</p>

<p>Bluetooth接続できる環境があればよく、私も十数分で MacBook Air から Ruby のコードをポチポチして動かすことができました！<s>その辺については次の記事で先輩が書いてくれるはず…！</s></p>

<p>いろいろ夢がひろがりんぐガジェットです。</p>

<h2>どこで手に入るの？</h2>

<p>日本では<a href="http://www.amazon.co.jp/dp/B00F91XFJS">Amazon</a>や<a href="http://www.softbankselection.jp/cart/ProductDetail.aspx?sku=0851897003083">Softbank Selection</a>、<a href="http://www.appbankstore.jp/products/detail.php?product_id=3870">AppBank Srore</a>から購入できます。その他は<a href="http://www.gosphero.com/ja/retail-partners/">&#x8CA9;&#x58F2;&#x5E97;&#x8217;&#x306E;&#x30DA;&#x30FC;&#x30B8;</a>からチェックしてみてください。お値段、約1万5千円…<b>高い</b>と取るかはひとそれぞれ…。さらに<a href="http://store.apple.com/jp/product/HD162LL/A/orbotix-sphero-20-%E3%83%AD%E3%83%9C%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%9C%E3%83%BC%E3%83%AB?fnode=39">Apple Store</a>では<b>Apple限定バージョン</b>として、<b>本体（と充電クレードル）の一部が<span style="color: #0000cc">スケルトン</span>になっているモデル</b>が販売されています。</p>

<p>AppleモデルのPVはなんかズルい！</p>

<iframe src="https://youtube.googleapis.com/v/reXJnYvJ5M8&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><br><a href="http://www.youtube.com/watch?v=reXJnYvJ5M8">Sphero 2.0 Revealed: Exclusively at Apple - YouTube</a></p>

<p>お子様をお持ちのお父さま・お母さま、息子さんがギークに育ちますよ。どうですか。</p>

<p>私はAmazonで購入しましたが、会社の先輩がApple版を買っていて、大変悔しい思いをしました。<b>中身のモーターなどが見えるので面白い！</b></p>

<p>つい最近、日本でもSphero用のゴム製カバー <a href="http://www.amazon.co.jp/dp/B00GRSMRVY">Nubby Cover</a> が発売されました。室内で遊ぶときにカーペットのシワに負けて（ツルツルすべってしまって）進まないことがあるのですが、でこぼこのついたカバーでそういう心配もなくなりますね。屋外で遊ぶときの傷防止にも！</p>

<h2>最後に</h2>

<p>いかがでしょうか。みなさん欲しくなってきたんじゃありません？<br/>
ひとりで一個だけ持ってても楽しくないので、みなさんいっぱい買って持ち寄って遊べたらいいですね。持ち寄って遊べたらいいですね。</p>

<p><a href="http://qiita.com/kano-e/items/876bf0cadc3056f7588f">2日目の記事は kano-e さんの『Ruby - Sphero gem で Sphero を操作してみる』</a>です。おたのしみに。</p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[超速！『FuelPHP Advent Calender 2012』が電子書籍化されました！ #FuelPHP]]></title>
        <id>https://blog.tmd45.jp/entry/2012/12/26/152345</id>
        <link href="https://blog.tmd45.jp/entry/2012/12/26/152345"/>
        <updated>2012-12-26T06:23:45.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://blog.tmd45.jp/entry/2012/12/18/101053">前回の記事</a>で参加させていただいた『<a href="http://atnd.org/events/33753">FuelPHP Advent Calender 2012</a>』が昨日、12月25日に無事完走しました！参加されたみなさまお疲れさまでした。</p>
<p>そんな昨日の今日というすごいスピードで、達人出版会から電子書籍化までしていただきました！</p>
<div class="amazlet-box" style="margin-bottom: 0px;">
<div class="amazlet-image" style="float: left; margin: 0px 12px 1px 0px;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191212/20191212124744.jpg" alt="FuelPHP Advent Calendar 2012" style="border: none;" /></a></div>
<div class="amazlet-info" style="line-height: 120%; margin-bottom: 10px;">
<div class="amazlet-name" style="margin-bottom: 10px; line-height: 120%;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank">FuelPHP Advent Calendar 2012【電子書籍】</a></div>
<div class="amazlet-detail">FuelPHP Advent Calendar 2012参加有志<br />達人出版会<br />発行日: 2012-12-26<br />対応フォーマット: EPUB, PDF</div>
<div class="amazlet-sub-info" style="float: left;">
<div class="amazlet-link" style="margin-top: 5px;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank">詳細を見る</a></div>
</div>
</div>
<div class="amazlet-footer" style="clear: left;"> </div>
</div>
<p>取りまとめをされていた @<a class="twitter-user-screen-name" href="http://twitter.com/kenji_s">kenji_s</a> さん、達人出版会の高橋さん、本当に有難うございました！</p>
<p>この書籍は、ブログの記事を Markdown 化、Markdown からツールで ReVIEW（電子書籍のためのマークアップの１つ<a href="#f1" name="fn1" title="参考：『書籍制作フローを変える。「ReVIEW」という解。〜マークアップと自動組版と、時々、電子書籍〜』 http://kmuto.jp/events/page2012/page2012.pdf">*1</a>）化して、GitHub 上で原稿を取りまとめて作業するという方法で作成されました。各執筆者は GitHub 上で pull request を利用して原稿の修正が可能です。私も記事の一部に修正があったのでその方法で反映していただいています。<br /> 興味があるかたは、GitHub 上の原稿リポジトリを眺めてみても面白いかもです。</p>
<ul>
<li><a href="https://github.com/kenjis/fuelphp-advent-calendar-2012">kenjis/fuelphp-advent-calendar-2012 · GitHub</a></li>
</ul>
<p><br /> 主題の FuelPHP の記事も、いい感じの Tips がたくさん詰まっていて使い手あります。去年よりも、実際に動かして云々系の記事が多い気がします。無料です。DL して損はないです！</p>
<p>ちなみに去年の『FuelPHP Advent Calendar 2011』は技術評論社から電子書籍化されています。こちらは EPUB のみですがやっぱり無料です。</p>
<ul>
<li><a href="https://gihyo.jp/dp/sp/advent2011/G11C13">FuelPHP Advent Calendar 2011 | Gihyo Digital Publishing</a></li>
</ul>
<p><br /> まだまだ継続してる Advent Calendar もあるようですが（笑）クリスマスも過ぎてもうすぐ年の瀬です。みなさまお風邪など召されませんように、良いお年をお過ごしください！</p>
<p> </p>
<p>('ω`)ノ</p>
<div class="section">
<h4>関連記事</h4>
<ul>
<li><a href="http://d.hatena.ne.jp/Kenji_s/20121226/fuelphp_advent_2012_ebook">電子書籍『FuelPHP Advent Calendar 2012』が達人出版会より出版されました！ - A Day in Serenity @ kenjis</a></li>
<li><a href="http://ounziw.com/2012/12/26/fuelphp-advent-calendar-2012/">FuelPHP Advent Calendar 2012 が出版されました</a></li>
<li><a href="http://h2o-space.com/news/262/">『FuelPHP Advent Calendar 2012』が無料電子書籍になりました | H2O Space.</a></li>
</ul>
</div>
<div class="footnote">
<p class="footnote"><a href="#fn1" name="f1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">参考：『書籍制作フローを変える。「ReVIEW」という解。〜マークアップと自動組版と、時々、電子書籍〜』 <a href="http://kmuto.jp/events/page2012/page2012.pdf">http://kmuto.jp/events/page2012/page2012.pdf</a></span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[さくらのレンタルサーバで FuelPHP を使ってはてなハイクブログを作る－ViewModel を使ってみる編 #FuelPHPAdvent2012]]></title>
        <id>https://blog.tmd45.jp/entry/2012/12/18/101053</id>
        <link href="https://blog.tmd45.jp/entry/2012/12/18/101053"/>
        <updated>2012-12-18T01:10:53.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/33753">FuelPHP Advent Calendar 2012</a> の 18 日目の記事です。昨日は @<a class="twitter-user-screen-name" href="http://twitter.com/ootatter">ootatter</a> さんによる『<a href="http://blog.milds.net/2012/12/fuelphpdb.html">fuelphp&#x3067;&#x65E2;&#x5B58;DB&#x3092;&#x3042;&#x3064;&#x304B;&#x3046;&#x3068;&#x304B;</a>』でした。</p><p>本日の担当は、毎年クリスマスには仕事で問題が起こりクルシミマス恒例になりつつあります、@<a class="twitter-user-screen-name" href="http://twitter.com/tmd45">tmd45</a> です。</p><p>FuelPHP 標準のサーバキャッシュと「<a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest">&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;API</a>」、ViewModel を利用したブログのようなものを作ってみましたので、その全貌を公開したいと思います。</p>

<ul>
<li>さくらのレンタルサーバーで FuelPHP を動かす</li>
<li>ViewModel を含めて MVC をひととおり使ってみる</li>
<li>はてなの API を使ってみる</li>
</ul><p>などを行っています。</p><p>長いですが、マイナーな組み合わせすぎて需要が無いことをひそかに期待してます（笑）。<br />
なお、使う人がいらっしゃるか分かりませんが記事中のソースコードは MIT ライセンスです。</p><p>では、よろしくお願いします。</p>

    <blockquote>
        <p>【修正履歴】<br />
・本記事について、即座に脆弱性とまでは（おそらく）なりえないまでも、セキュリティ的に好ましくない点が在ることをご指摘いただきましたので一部内容を修正しました。記事内容のご利用の際にはご留意ください。（2012-12-25）</p>

    </blockquote>



<div class="section">
    <h3>1. さくらのレンタルサーバで FuelPHP を準備する</h3>
    <p>利用しているのは<em>スタンダードプラン</em>です。なおスタンダードより下のライトプランだと SFTP や SCP が使えなくてちょっと不便なので、動的なサイトを作りたい場合はスタンダードプラン以上で契約されるのがオススメです。さらに言えば、レンサバより VPS や Cloud なんちゃら系のホスティングサービスを使ったほうが利便性は良いです。</p><p>さくらのレンサバを使った理由は「そこに放置中のレンサバがあったから」以外のなにものでもないのであしからず。</p>

<div class="section">
    <h4>PHP のバージョンを確認する</h4>
    <p>お使いのレンサバで動く PHP のバージョンを確認します。FuelPHP を動作させるために PHP 5.3 以上を利用しましょう。必要であれば下記の画面で設定を変更してください。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121212/20121212110543.png" alt="f:id:tmd45:20121212110543p:plain" title="f:id:tmd45:20121212110543p:plain" class="hatena-fotolife" itemprop="image"></span></p>

</div>
<div class="section">
    <h4>php.ini の編集</h4>
    <p>さくらのレンサバはコントロールパネルから php.ini の編集が可能です。<br />
FuelPHP を正常に動作させるには <code>cgi.fix_pathinfo = 1</code> の記述が必要です。リクエスト URL の取得に、cgi 版 PHP ではこの設定を行って <code>$_SERVER["ORIG_PATH_INFO"]</code> の利用を有効にする必要があるためです。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121212/20121212113953.png" alt="f:id:tmd45:20121212113953p:plain" title="f:id:tmd45:20121212113953p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>と、説明しておきますが、FuelPHP Core 内で <code>$_SERVER["ORIG_PATH_INFO"]</code> を利用しているのは私が見た限りでは <a href="https://github.com/fuel/core/blob/1.4/master/classes/input.php#L128">Input &#x30AF;&#x30E9;&#x30B9;&#x3060;&#x3051;&#x307F;&#x305F;&#x3044;</a>です。とりあえずこの設定はやっておきましょう。</p><p>以下の記事を参考にさせていただきました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/good-speed/20121002/1349148273">&#x3055;&#x304F;&#x3089;&#x30EC;&#x30F3;&#x30BF;&#x30EB;&#x30B5;&#x30FC;&#x30D0;&#x30FC;&#x306B;FuelPHP&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB; - 2hours</a></li>
<li><a href="http://d.hatena.ne.jp/localdisk/20090524/1243149438">PHP&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x30EF;&#x30FC;&#x30AF;&#x306F;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x305F;URL&#x3092;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;? - localdisk</a></li>
</ul>
</div>
<div class="section">
    <h4>FuelPHP を用意する</h4>
    <p><a href="http://fuelphp.com/">FuelPHP &#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;</a>から最新版（執筆時点でv1.4）の FuelPHP アーカイブ（zip）をダウンロードします。アーカイブを展開して、ドキュメントルート内の構成を以下のようにしました。</p>

<pre>アーカイブ内（変更前）のディレクトリ構成
/fuelphp-1.4
  |-- /docs
  |-- /fuel
  |-- /public
  |  |-- /assets
  |  |-- .htaccess
  |  `-- index.php
  |-- oil
  |-- README.md
  `-- ...
</pre><p>ドキュメントや README、使わない oil などを削除します。また、public ディレクトリの中身をレンサバのドキュメントルートに合わせるため、www/hhblog フォルダを作ってそこへ移動します。</p>

<pre>変更後のディレクトリ構成
/hhblog
  |-- /fuel
  `-- /www
     `-- / hhblog
        |-- /assets
        |-- .htaccess
        `-- index.php
</pre><p>ディレクトリ構成を変更したので、index.php に記述されているパスも修正します。diff だとわかりにくいですが、<code>/../fuel</code> から始まるパスが <code>/../../fuel</code> になります。</p>
<pre class="code lang-diff" data-lang="diff" data-unlink>$ diff fuelphp-1.4/public/index.php hhblog/www/hhblog/index.php
<span class="synStatement">16c16</span>
<span class="synSpecial">&lt; define('APPPATH', realpath(__DIR__.'/../fuel/app/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('APPPATH', realpath(__DIR__.'/../../fuel/app/').DIRECTORY_SEPARATOR);</span>
<span class="synStatement">21c21</span>
<span class="synSpecial">&lt; define('PKGPATH', realpath(__DIR__.'/../fuel/packages/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('PKGPATH', realpath(__DIR__.'/../../fuel/packages/').DIRECTORY_SEPARATOR);</span>
<span class="synStatement">26c26</span>
<span class="synSpecial">&lt; define('COREPATH', realpath(__DIR__.'/../fuel/core/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('COREPATH', realpath(__DIR__.'/../../fuel/core/').DIRECTORY_SEPARATOR);</span>
</pre><p><br />
Web API を使用する際にはタイムスタンプなどが重要になってくる場合もあるので、タイムゾーンの設定もしておきました。役に立っているのかはいまいち分かりませんが･･･</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/config/config.php
<span class="synSpecial">&lt;?php</span>
<span class="synComment">/* 中略 */</span>

<span class="synStatement">return</span> <span class="synType">array</span><span class="synSpecial">(</span>
  '<span class="synConstant">default_timezone</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">Asia/Tokyo</span>'    <span class="synComment">// タイムゾーンを設定</span>
<span class="synSpecial">)</span>;
</pre><p><br />
またセキュリティの観点から、Web から見えてしまう FuelPHP のエラー表示は OFF にしておくほうが良いです（参考：<a href="http://d.hatena.ne.jp/Kenji_s/20111224/1324731427">FuelPHP &#x3067;&#x306E;&#x30BB;&#x30AD;&#x30E5;&#x30EA;&#x30C6;&#x30A3;&#x5BFE;&#x7B56;(3) - A Day in Serenity @ kenjis</a>）。自分の場合は開発環境と公開環境を一緒くたにするという危険極まりない遊びをしていたのでエラーは出しっぱなしです･･･(;^_^)</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/www/hhblog/index.php
<span class="synSpecial">&lt;?php</span>
<span class="synComment">/**</span>
<span class="synComment"> * Set error reporting and display errors settings.  You will want to change these when in production.</span>
<span class="synComment"> */</span>
<span class="synIdentifier">error_reporting</span><span class="synSpecial">(</span><span class="synConstant">-1</span><span class="synSpecial">)</span>;
<span class="synIdentifier">ini_set</span><span class="synSpecial">(</span>'<span class="synConstant">display_errors</span>', <span class="synConstant">1</span><span class="synSpecial">)</span>;    <span class="synComment">// この引数を 0 にする。</span>
</pre><p><br />
レンタルサーバへの配置ですが、今回はレンサバのアカウントホーム <code>/home/{user-id}</code> 直下に fuel ディレクトリを、レンサバのドキュメントルート <code>/home/{account-id}/www</code> 直下に www ディレクトリの中身（hhblog ディレクトリ）を配置します。公開ディレクトリは <code>/home/{user-id}/www/hhblog</code> です。アクセス時の URL は <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/</span></code> になります。</p><p>この配置であれば、.htaccess ファイルを修正する必要はありません。アーカイブに在ったものをそのまま使用すれば Mod_Rewrite が仕事してくれます。</p><p>私は動作環境を本番（production）にするため、以下の部分だけ変更（コメント化を解除）しました。</p>
<pre class="code lang-diff" data-lang="diff" data-unlink>$ diff fuelphp-1.4/public/.htaccess hhblog/.htaccess
<span class="synStatement">2c2</span>
<span class="synSpecial">&lt; # SetEnv FUEL_ENV production</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; SetEnv FUEL_ENV production</span>
</pre>
</div>
<div class="section">
    <h4>FuelPHP を放り込む</h4>
    <p>準備したFuelPHP 一式を、SFTP でも SCP でも好きな方法で、レンタルサーバに放り込みましょう。fuel ディレクトリは <code>/home/{user-id}</code> へ、www/hhblog ディレクトリは <code>/home/{user-id}/www/hhblog</code> となるように配置します。</p><p>手動インストール（oil を使わないで配置する）を行ったので、ディレクトリのパーミッションの変更も自分で行います（参考：<a href="http://fuelphp.com/docs/installation/instructions.html">Instruction - Installation - FuelPHP Documentation</a>）。</p><p>以下の４つのディレクトリのパーミッションを 755（rwxr-xr-x）にします。「所有者」に書込み（w）権限があればよいので、700（rwx------）のほうが安心です<a href="#f1" name="fn1" title="自分の環境では、他のディレクトリのレベルと合わせて 755 にしました。">*1</a>。FTP/SCP ツールで変更しても良いですし、さくらのコントロールパネルからファイルマネージャーを使用して変更することも可能です（ディレクトリを 右クリック → プロパティ で属性の変更が可能）。</p>

<pre>以下の４つのディレクトリを書込み可にする
/home/{account-id}
  |-- /fuel
  |  |-- /app
  |  |  |-- /cache
  |  |  |-- /config
  |  |  |-- /logs
  |  |  |-- /tmp
  ...
</pre><p>これでインストールは完了です。<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/</span></code> にアクセスすれば、おなじみの Welcome ページが表示されます。おめでとうありがとう。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214170600.png" alt="f:id:tmd45:20121214170600p:plain" title="f:id:tmd45:20121214170600p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>やることが多く見えますが、結構単純です。さくらのレンタルサーバでも FuelPHP は（とりあえず）簡単に動作します。</p><p></p>

</div>
</div>
<div class="section">
    <h3>2. はてなハイク API の利用</h3>
    <p>フレームワークの準備が出来ましたので、ここから実装に入ります。コードはとくに省略せずに貼り付けてますので、長いです。</p>

    <blockquote>
        <p>補足：<br />
本来は開発環境で作って、テストして、完成したものを公開環境へアップロードしますよね（苦笑）<br />
今回ちょっと不便な場所で開発を行っていたため、公開環境で動作確認などを行っていました･･･<br />
この辺りはツッコミ無用でございます／(^o^)＼</p><p>また、筆者は Java 屋なので、PHP 的におかしな書き方をしているところがあったらごめんなさい。<br />
そちらはツッコミいただけたら嬉しいです＼(^o^)／</p>

    </blockquote>
<p>はてなハイクの API を利用して記事を取得する処理を Model に作成します。<br />
ちなみに今回利用した API では、認証を必要としません。なので認証部分の実装も考えません。</p><p>API は以下の２種類を使うことにしました。詳しくは API のドキュメントをご確認ください。</p>

<ol>
<li><a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#public_timeline">&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;&#x306E;&#x30C8;&#x30C3;&#x30D7;&#x30DA;&#x30FC;&#x30B8;&#xFF08;&#x30D1;&#x30D6;&#x30EA;&#x30C3;&#x30AF;&#x30FB;&#x30BF;&#x30A4;&#x30E0;&#x30E9;&#x30A4;&#x30F3;&#xFF09;</a>
<ul>
<li>引数はとくに無く、はてなハイクのトップページに表示されるタイムラインを取得します。</li>
</ul></li>
<li><a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#keyword_timeline">&#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30FC;&#x30DA;&#x30FC;&#x30B8;&#xFF08;&#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x30FB;&#x30BF;&#x30A4;&#x30E0;&#x30E9;&#x30A4;&#x30F3;&#xFF09;</a>
<ul>
<li>引数にキーワードを指定（必須）し、そのキーワードのタイムラインを取得します。</li>
</ul></li>
</ol><p><br />
以下が実装です。<b>ちなみにテストはありません（!!?）。</b>また、一部の引数は API に合わせて定義しているだけで、利用していないです（汗）</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/model/api/hatena/haiku.php
<span class="synSpecial">&lt;?php</span>

<span class="synType">class</span> Model_Api_Hatena_Haiku <span class="synType">extends</span> Model
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Using statuses/public_timeline (Japanese Domain).</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * AUTHORIZATION : no</span>
<span class="synComment">	 * HTTP METHOD   : GET</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @link http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#public_timeline</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @param string  $body_formats reaponse text format, see default value</span>
<span class="synComment">	 * @param integer $count        getting entries number, API default 20 max 200</span>
<span class="synComment">	 * @param integer $page         getting page number, API default 1 max 100</span>
<span class="synComment">	 * @param string  $since        no getting older than rfc1123-date(&quot;Mon, 26 Nov 2012 15:53:43 GMT&quot;)</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @return string JSON</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synType">static</span> <span class="synPreProc">function</span> getPublicTimeLine<span class="synSpecial">(</span>
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> &quot;<span class="synConstant">api,haiku,html,html_mobile,html_touch</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">count</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">20</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">page</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">1</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">since</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">Mon, 26 Nov 2012 15:53:43 GMT</span>&quot;
	<span class="synSpecial">)</span> <span class="synSpecial">{</span>

		<span class="synComment">// リクエストURL</span>
		<span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">=</span> &quot;<span class="synConstant">http://h.hatena.ne.jp/api/statuses/public_timeline.json</span>&quot;;

		<span class="synComment">// Option（UTF-8で符号化必要）</span>
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">body_formats</span><span class="synSpecial">)</span>;

		<span class="synComment">// URL 組み立て</span>
		<span class="synStatement">$</span><span class="synIdentifier">filename</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">.</span> '<span class="synConstant">?body_formats=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">body_formats</span>;

		<span class="synComment">// file_getコンテキストのオプション</span>
		<span class="synStatement">$</span><span class="synIdentifier">opts</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">(</span>
			'<span class="synConstant">http</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>
				'<span class="synConstant">method</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">GET</span>&quot;,
				'<span class="synConstant">header</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">Host: hoge.sakura.ne.jp</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">Accept-language: ja</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">User-Agent: </span>&quot; <span class="synStatement">.</span> Input<span class="synStatement">::</span>user_agent<span class="synSpecial">()</span> <span class="synStatement">.</span> &quot;<span class="synSpecial">\r\n</span>&quot;
			<span class="synSpecial">)</span>
		<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">context</span> <span class="synStatement">=</span> <span class="synIdentifier">stream_context_create</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">opts</span><span class="synSpecial">)</span>;

		<span class="synComment">// API の結果を json で取得</span>
		<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> <span class="synIdentifier">file_get_contents</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">filename</span>, <span class="synConstant">false</span>, <span class="synStatement">$</span><span class="synIdentifier">context</span><span class="synSpecial">)</span>;

		<span class="synComment">// 取得した json 文字列をそのまま返却</span>
		<span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">!=</span> <span class="synConstant">false</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">json</span>;
		<span class="synSpecial">}</span>
		<span class="synComment">// 取得失敗したら空文字を返却</span>
		<span class="synStatement">else</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> '';
		<span class="synSpecial">}</span>

	<span class="synSpecial">}</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Using statuses/keyword_timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * AUTHORIZATION : no</span>
<span class="synComment">	 * HTTP METHOD   : GET</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @link http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#keyword_timeline</span>
<span class="synComment">	 *</span>
<span class="synComment">	 * @param string  $keyword      seatch keyword [required]</span>
<span class="synComment">	 * @param string  $body_formats reaponse text format, see default value</span>
<span class="synComment">	 * @param integer $count        getting entries number, API default 20 max 200</span>
<span class="synComment">	 * @param integer $page         getting page number, API default 1 max 100</span>
<span class="synComment">	 * @param string  $sort         getting entries sort, API default &quot;new&quot; is newer, &quot;hot&quot; is populer</span>
<span class="synComment">	 * @param string  $since        no getting older than rfc1123-date(&quot;Mon, 26 Nov 2012 15:53:43 GMT&quot;)</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @return string JSON</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synType">static</span> <span class="synPreProc">function</span> getKeywordTimeLine<span class="synSpecial">(</span>
		<span class="synStatement">$</span><span class="synIdentifier">keyword</span>
		, <span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> &quot;<span class="synConstant">api,haiku,html,html_mobile,html_touch</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">count</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">20</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">page</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">1</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">sort</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">new</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">since</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">Mon, 26 Nov 2012 15:53:43 GMT</span>&quot;
	<span class="synSpecial">)</span> <span class="synSpecial">{</span>

		<span class="synComment">// リクエストURL</span>
		<span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">=</span> &quot;<span class="synConstant">http://h.hatena.ne.jp/api/statuses/keyword_timeline.json</span>&quot;;

		<span class="synComment">// Option（UTF-8で符号化必要）</span>
		<span class="synStatement">$</span><span class="synIdentifier">word</span>         <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">body_formats</span><span class="synSpecial">)</span>;

		<span class="synComment">// URL 組み立て</span>
		<span class="synStatement">$</span><span class="synIdentifier">filename</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">.</span> '<span class="synConstant">?word=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">word</span> <span class="synStatement">.</span> '<span class="synConstant">&amp;body_formats=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">body_formats</span>;

		<span class="synComment">// file_getコンテキストのオプション</span>
		<span class="synStatement">$</span><span class="synIdentifier">opts</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">(</span>
			'<span class="synConstant">http</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>
				'<span class="synConstant">method</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">GET</span>&quot;,
				'<span class="synConstant">header</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">Host: hoge.sakura.ne.jp</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">Accept-language: ja</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">User-Agent: </span>&quot; <span class="synStatement">.</span> Input<span class="synStatement">::</span>user_agent<span class="synSpecial">()</span> <span class="synStatement">.</span> &quot;<span class="synSpecial">\r\n</span>&quot;
			<span class="synSpecial">)</span>
		<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">context</span> <span class="synStatement">=</span> <span class="synIdentifier">stream_context_create</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">opts</span><span class="synSpecial">)</span>;

		<span class="synComment">// API の結果を json で取得</span>
		<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> <span class="synIdentifier">file_get_contents</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">filename</span>, <span class="synConstant">false</span>, <span class="synStatement">$</span><span class="synIdentifier">context</span><span class="synSpecial">)</span>;

		<span class="synComment">// 取得した json 文字列をそのまま返却</span>
		<span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">!=</span> <span class="synConstant">false</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">json</span>;
		<span class="synSpecial">}</span>
		<span class="synComment">// 取得失敗したら空文字を返却</span>
		<span class="synStatement">else</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> '';
		<span class="synSpecial">}</span>

	<span class="synSpecial">}</span>

<span class="synSpecial">}</span>

<span class="synComment">/* End of file haiku.php */</span>
<span class="synComment">/* Location: app/classes/model/api/hatena/haiku.php */</span>
</pre><p>file_getコンテキストのオプションに指定する Host 名は、ご自分の環境にあわせて修正してください。</p>

    <blockquote>
        <p>重要（2012-12-25）：<br />
以降の処理では、この Model クラスで取得した外部からの入力データを検証せずにそのままブラウザに表示させています。はてなハイク API の応答結果には html を含めることが可能です。セキュリティ上好ましくありませんので画面出力前にデータのフィルタリングを行うようにしましょう。今回は説明の都合上、検証処理については割愛します。</p>

    </blockquote>

</div>
<div class="section">
    <h3>3. ViewModel を使ってブログ（表示部分のみ）を作る</h3>
    <p>ここからやっとブログ（っぽく）表示する実装を行っていきます。</p><p>View は贅沢（？）に Template を使ってみます。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214175736.png" alt="f:id:tmd45:20121214175736p:plain" title="f:id:tmd45:20121214175736p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>さきに書いてしまいますが、最終的なディレクトリ構成は以下のようになりました。</p>

<pre>実装のディレクトリ構成
/home/{user-id}
    |-- /fuel
    |    |-- /app
    |    |    |-- /classes
    |    |    |    |-- /controller
    |    |    |    |    `-- hhblog.php
    |    |    |    |-- /model
    |    |    |    |    `-- ･･･
    |    |    |    `-- /view
    |    |    |         `-- /hhblog
    |    |    |              `-- /article
    |    |    |                   |-- keyword.php    (1)'
    |    |    |                   `-- public.php     (2)'
    |    |    |-- /views
    |    |    |    |-- /hhblog
    |    |    |    |    |-- /article
    |    |    |    |    |    |-- keyword.php    (1)
    |    |    |    |    |    `-- public.php     (2)
    |    |    |    |    `-- template.php
    ･･･
</pre><p>うーん、機能名失敗したな･･･（hhblog の hhblog コントローラ･･･orz）。</p>

<div class="section">
    <h4>View と Controller</h4>
    <p>では、どんどんコードを晒していきます。<br />
まずはコントローラー。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/controller/hhblog.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Controller.</span>
<span class="synComment"> * </span>
<span class="synComment"> * hhblog's root controller.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends Controller</span>
<span class="synComment"> */</span>
<span class="synType">class</span> Controller_Hhblog <span class="synType">extends</span> Controller_Template
<span class="synSpecial">{</span>

	<span class="synType">public</span> <span class="synStatement">$</span><span class="synIdentifier">template</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog/template</span>';
	
	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Public Timeline in ViewModel</span>
<span class="synComment">	 * and show blog style page.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> action_public_timeline<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">title</span>',       '<span class="synConstant">Hatena-Haiku Public Timeline</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">description</span>', '<span class="synConstant">はてなハイク Public Timeline を取得してブログっぽく表示させます。</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">active_api</span>',  <span class="synConstant">1</span><span class="synSpecial">)</span>;
		
		<span class="synComment">// 本文部分に ViewModel を利用</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article <span class="synStatement">=</span> ViewModel<span class="synStatement">::</span>forge<span class="synSpecial">(</span>'<span class="synConstant">hhblog/article/public</span>'<span class="synSpecial">)</span>;
		
	<span class="synSpecial">}</span>
	
	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Keyword Timeline in ViewModel</span>
<span class="synComment">	 * and show blog style page.</span>
<span class="synComment">	 * Now 'keyword' is Hatena user id 'id:hoge' style.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> action_keyword_timeline<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">keyword</span> <span class="synStatement">=</span> '<span class="synConstant">id:tmd45</span>';
		
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">title</span>',       '<span class="synConstant">Hatena-Haiku Keyword Timeline</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">description</span>', '<span class="synConstant">はてなハイク Keyword Timeline からキーワード「</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">keyword</span> <span class="synStatement">.</span> '<span class="synConstant">」の結果を取得してブログっぽく表示させます。</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">keyword</span>', <span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">active_api</span>',  <span class="synConstant">2</span><span class="synSpecial">)</span>;
		
		<span class="synComment">// 本文部分に ViewModel を利用</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article <span class="synStatement">=</span> ViewModel<span class="synStatement">::</span>forge<span class="synSpecial">(</span>'<span class="synConstant">hhblog/article/keyword</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">keyword</span>', <span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		
	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file hhblog.php */</span>
<span class="synComment">/* Location: app/classes/controller/hhblog.php */</span>
</pre><p>キーワード・タイムラインで指定するキーワードは、コントローラーに直書きしています。</p>

<ul>
<li><code>$keyword = 'id:tmd45';</code></li>
</ul><p>この文字列を変更すれば好きなキーワードを指定することができます。</p><p>指定したキーワードはビューモデルでも利用したいので、以下のように値を渡しています。</p>

<ul>
<li><code>$this->template->article->set('keyword', $keyword);</code></li>
</ul><p><br />
そして View 側のコードですが、全部載せると大変なので Gist に置いておきます。</p>

<ul>
<li><a href="https://gist.github.com/4283992#file-template-php">template.php on Gist</a></li>
<li><a href="https://gist.github.com/4283992#file-public-php">public.php on Gist</a></li>
<li><a href="https://gist.github.com/4283992#file-keyword-php">keyword.php on Gist</a></li>
</ul><p>テンプレートのソースコード（template.php）の中で、コントローラーで ViewModel を forge した <code>$article</code> 変数を利用して記事を埋め込みます。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/views/hhblog/template.php の一部
<span class="synComment">&lt;!-- CONTENT --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;span9&quot;</span><span class="synIdentifier">&gt;</span>
			
<span class="synSpecial">&lt;?php</span> <span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">article</span>; <span class="synSpecial">?&gt;</span>
			
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span><span class="synComment">&lt;!-- /span9 --&gt;</span>
<span class="synComment">&lt;!-- /CONTENT --&gt;</span>
</pre><p>記事側のソースコード（public.php, keyword.php）では、API で取得した記事の配列を繰り返し表示させています。これがテンプレートの <code>$article</code> 部分に展開されます。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/views/hhblog/article/public.php の一部
<span class="synSpecial">&lt;?php</span>
	<span class="synStatement">foreach</span> <span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">a</span><span class="synSpecial">)</span>
	<span class="synSpecial">{</span>
<span class="synSpecial">?&gt;</span>
		<span class="synIdentifier">&lt;</span>section<span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;hhblog-section&quot;</span><span class="synIdentifier">&gt;</span>
			<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;page-main&quot;</span><span class="synIdentifier">&gt;</span>
				<span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span><span class="synSpecial">&lt;?php</span> <span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">a</span><span class="synSpecial">[</span>&quot;<span class="synConstant">html</span>&quot;<span class="synSpecial">]</span>; <span class="synSpecial">?&gt;</span><span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
			<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
		<span class="synIdentifier">&lt;/</span>section<span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span>
	<span class="synSpecial">}</span> <span class="synComment">/* end foreach($articles) */</span>
	<span class="synStatement">unset</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">articles</span><span class="synSpecial">)</span>;
<span class="synSpecial">?&gt;</span>
</pre><p>これらをサイトのトップページに表示させるために、ルーティングの設定も修正します。<br />
サイトのトップにアクセスすると、キーワード・タイムラインが表示されます(1)。また <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/public_timeline</span></code> にアクセスするとパブリック・タイムラインが、<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/keyword_timeline</span></code> にアクセスするとキーワード・タイムラインが表示されるようにしました(2)。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/config/routes.php
<span class="synSpecial">&lt;?php</span>
<span class="synStatement">return</span> <span class="synType">array</span><span class="synSpecial">(</span>
<span class="synComment">//	'_root_'  =&gt; 'welcome/index',              // コメント化</span>
	'<span class="synConstant">_root_</span>'  <span class="synStatement">=&gt;</span> '<span class="synConstant">hhblog/keyword_timeline</span>',    <span class="synComment">// 追加(1)</span>
	'<span class="synConstant">_404_</span>'   <span class="synStatement">=&gt;</span> '<span class="synConstant">welcome/404</span>',
	
	'<span class="synConstant">(:segment)</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hhblog/$1</span>',               <span class="synComment">// 追加(2)</span>
	
	'<span class="synConstant">hello(/:name)?</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>'<span class="synConstant">welcome/hello</span>', '<span class="synConstant">name</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hello</span>'<span class="synSpecial">)</span>,
<span class="synSpecial">)</span>;
</pre>
</div>
<div class="section">
    <h4>ViewModel！ViewModel！！</h4>
    <p>では、最後にお待ちかねのビューモデルです。</p><p>まずはパブリック・タイムライン用のビューモデル。API 制限を考慮して、新しいデータは 30 分に 1 回だけ取得するようにして、それ以外はキャッシュからデータを取得します。API の実行は Model を呼び出すだけです。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/view/hhblog/article/public.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Public Timeline ViewModel.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends ViewModel</span>
<span class="synComment"> */</span>
<span class="synType">class</span> View_Hhblog_Article_Public <span class="synType">extends</span> ViewModel
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Public Timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * Data cache to make Access-control, </span>
<span class="synComment">	 * and get data from cache in a time.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> view<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">cache_id</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog_public_timeline_json</span>';
		
		<span class="synStatement">try</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// キャッシュにあればキャッシュから取得</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Cache<span class="synStatement">::</span>get<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		<span class="synStatement">catch</span> <span class="synSpecial">(</span>\CacheNotFoundException <span class="synStatement">$</span><span class="synIdentifier">e</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// タイムライン取得(json)</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Model_Api_Hatena_Haiku<span class="synStatement">::</span>getPublicTimeline<span class="synSpecial">()</span>;
			
			<span class="synComment">// キャッシュに保存（0.5時間）</span>
			Cache<span class="synStatement">::</span>set<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span>, <span class="synStatement">$</span><span class="synIdentifier">json</span>, <span class="synConstant">3600</span> <span class="synStatement">*</span> <span class="synConstant">0.5</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		
		<span class="synComment">// jsonデータの配列化</span>
		<span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">=</span> Format<span class="synStatement">::</span>forge<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span>, '<span class="synConstant">json</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>to_array<span class="synSpecial">()</span>;
		
		<span class="synComment">// Viewにセット</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">articles</span>', <span class="synStatement">$</span><span class="synIdentifier">articles</span>, <span class="synConstant">false</span><span class="synSpecial">)</span>;

	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file public.php */</span>
<span class="synComment">/* Location: app/classes/view/hhblog/article/public.php */</span>
</pre><p>次にキーワード・タイムライン用のビューモデルです。パブリック・タイムラインと同じです。Model の実行時に引数にキーワードを渡しています。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/view/hhblog/article/keyword.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Keyword Timeline ViewModel.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends ViewModel</span>
<span class="synComment"> */</span>
<span class="synType">class</span> View_Hhblog_Article_Keyword <span class="synType">extends</span> ViewModel
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku keyword timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * Data cache to make Access-control, </span>
<span class="synComment">	 * and get data from cache in a time.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> view<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">cache_id</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog_keyword_timeline_json</span>';
		
		<span class="synStatement">try</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// キャッシュにあればキャッシュから取得</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Cache<span class="synStatement">::</span>get<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		<span class="synStatement">catch</span> <span class="synSpecial">(</span>\CacheNotFoundException <span class="synStatement">$</span><span class="synIdentifier">e</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// タイムライン取得(json)</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Model_Api_Hatena_Haiku<span class="synStatement">::</span>getKeywordTimeline<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>keyword<span class="synSpecial">)</span>;
			
			<span class="synComment">// キャッシュに保存（0.5時間）</span>
			Cache<span class="synStatement">::</span>set<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span>, <span class="synStatement">$</span><span class="synIdentifier">json</span>, <span class="synConstant">3600</span> <span class="synStatement">*</span> <span class="synConstant">0.5</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		
		<span class="synComment">// jsonデータの配列化</span>
		<span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">=</span> Format<span class="synStatement">::</span>forge<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span>, '<span class="synConstant">json</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>to_array<span class="synSpecial">()</span>;
		
		<span class="synComment">// Viewにセット</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">articles</span>', <span class="synStatement">$</span><span class="synIdentifier">articles</span>, <span class="synConstant">false</span><span class="synSpecial">)</span>;

	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file keyword.php */</span>
<span class="synComment">/* Location: app/classes/view/hhblog/article/keyword.php */</span>
</pre><p>ここまで内容が一緒だと、あまり分けた意味がなさそうですが、応用編では表示内容を整形するという ViewModel 本来の処理を組み込んでいくのでこんな感じかな、と思います。</p><p>ちなみに応用編の記事はありません（笑）</p><p>取得したタイムラインのデータを View にセットする際に false を指定しています。</p>

<ul>
<li><code>$this->set('articles', $articles, false);</code></li>
</ul><p>これは API の応答結果より HTML でマークアップ済みのハイク記事本文（key='html'）を、そのまま表示に利用しているためです。</p><p></p>

</div>
</div>
<div class="section">
    <h3>4. 公開環境で動かそう</h3>
    <p>実装が完了して、テストが出来たら（苦笑）、用意してあったレンサバのフレームワーク上に変更分をアップロードします。<br />
<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog</span></code> や <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/public_timeline</span></code> にアクセスして、はてなハイクブログを表示してみましょう！</p><p>ちなみに自分で作成したものは以下で動いています。</p>

<ul>
<li><a href="http://ytmd.sakura.ne.jp/hhblog/">tmd45 &#x306E;&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;&#x30D6;&#x30ED;&#x30B0;</a></li>
</ul><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214190855.png" alt="f:id:tmd45:20121214190855p:plain" title="f:id:tmd45:20121214190855p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>見た目は <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> と <a href="http://bootswatch.com/">Bootswatch</a> 様様です。タイムライン部分以外は、ブログっぽ～く見えるように適当に捏造しています。</p>

</div>
<div class="section">
    <h3>まとめ</h3>
    <p>いかがでしたでしょうか。コードを載せているのでだいぶ記事が長くなってしまいました。準備から実装まで通して記事にできたので自分の復習用には良かったと思うのですが、Advent Calendar としてどうなんでしょう（苦笑）</p><br />
<p>明日は @<a class="twitter-user-screen-name" href="http://twitter.com/ttikitt">ttikitt</a> さんの『<a href="http://www.cry-kit.com/?p=53">FuelPHP&#x3078;&#x306E;Doctrine2&#x7D44;&#x307F;&#x8FBC;&#x307F;</a>』です！('ω`)ｼ</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn1" name="f1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">自分の環境では、他のディレクトリのレベルと合わせて 755 にしました。</span></p>
</div>]]></summary>
    </entry>
</feed>