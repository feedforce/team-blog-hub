<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://engineers.feedforce.jp</id>
    <title>Feedforce Engineers' Blogs</title>
    <updated>2023-04-10T01:30:32.066Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://engineers.feedforce.jp"/>
    <subtitle>フィードフォースグループに所属するエンジニアのブログ記事をまとめています。</subtitle>
    <logo>https://engineers.feedforce.jp/logo.png</logo>
    <rights>© Feedforce Inc.</rights>
    <entry>
        <title type="html"><![CDATA[【約 50 回】2022 年、家族で毎週ふりかえりをした話]]></title>
        <id>https://developer.feedforce.jp/entry/2022/12/16/235731</id>
        <link href="https://developer.feedforce.jp/entry/2022/12/16/235731"/>
        <updated>2022-12-16T14:57:31.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は、Feedforce Group Advent Calendar 2022 の16日目の記事です。</p>

<iframe src="https://adventar.org/calendars/7898/embed" width="620" height="450" frameborder="0" loading="lazy"></iframe>


<p>昨日は、アナグラム田中さんによる「クラス制のキャラ育成ができるRPGってキャリア形成のそれと似ているな...って思っただけの話」でした！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fhyroki1980%2Fn%2Fn2f4ff15b1848" title="クラス制のキャラ育成ができるRPGってキャリア形成のそれと似ているな...って思っただけの話｜Hiroki Tanaka｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://note.com/hyroki1980/n/n2f4ff15b1848">note.com</a></cite></p>

<p>私はつい最近、フロントエンドエンジニアからスクラムマスターに社内で「転職（ドラクエ的表現）」したところでして、学生時代のアルバイトで貯めていた経験なんかが意外なところで活きたなぁと感じていたところがあったため、とてもしっくりくる内容でした！</p>

<p>また、運用型広告というジョブのアビリティの豊富さ・プレイスタイルの幅広さが視覚的に表現されており、運用型広告というジョブの魅力がガッツリ伝わってきました。<br/>
余談ですが、自分も赤魔道士大好きです。</p>

<p>何の話なんだろう？と思った未読の方、是非本文を楽しんでください！</p>

<h2 id="まえがき">まえがき</h2>

<p>本記事では、この 1 年間家族でやってきたふりかえりについて書きます。<br/>
まずは 3 行で記事を紹介します。</p>

<ul>
<li>2022 年、家族で毎週ふりかえりをした</li>
<li>ふりかえりをすると、たくさんいいことがあった</li>
<li>たくさんの課題があり、工夫して乗り越えた</li>
</ul>


<p>この記事は「家族のふりかえり」にフォーカスしたものですが、家族以外の親密な人とのふりかえりや、自分ひとりのふりかえりをしたい方にも届けたいと思って書きました。<br/>
個人のふりかえりとしても適用できます（「よかったこと」の「問題を共有できる」は軽く読み流してください）ので、よかったら読んでみてください。</p>

<h2 id="はじめに">はじめに</h2>

<h3 id="自己紹介">自己紹介</h3>

<p>こんにちは、はじめまして。 @zomysan と申します。<br/>
ソーシャル PLUS のスクラムマスターです。</p>

<p>弊社は東京にオフィスのある会社ですが、私は関西からフルリモートで勤務しています。<br/>
フルリモートもスクラムマスターも初めての経験ですが、チームの方々に支えられ、毎日楽しく働いています！</p>

<h3 id="家族について">家族について</h3>

<p>二人暮らしです。同い年で、ゲーム、絵を描く、お菓子を食べるなど共通の趣味が多く仲良しです。<br/>
一緒に暮らし始めて今年で 9 年目になります。犬と猫が飼えるところへ引っ越すことがいまの一番の目標です。</p>

<ul>
<li>自分: <a href="https://twitter.com/zomysan">@zomysan</a>

<ul>
<li>犬好き</li>
<li>個人開発プロダクトを開発中</li>
</ul>
</li>
<li>家族

<ul>
<li>猫好き</li>
<li>Web エンジニアを目指し勉強中</li>
</ul>
</li>
</ul>


<h3 id="ふりかえりのきっかけ">ふりかえりのきっかけ</h3>

<p>2022 年 1 月、それぞれの 1 年の目標を立てました。<br/>
2021 年までも目標を立ててはいたのですが、毎年毎年日常を過ごすうちに目標について忘れてしまっていました。今年はなにかしら成し遂げたいと思い、私から毎週のふりかえりの実施を提案したところ家族も快諾してくれたため、実施することにしました。</p>

<h2 id="ふりかえりの内容">ふりかえりの内容</h2>

<p>実施しているふりかえりについて紹介します。</p>

<h3 id="いつどれくらいやるか">いつどれくらいやるか</h3>

<p>毎週土曜日午前、2 時間の開催としています。<br/>
毎週 2 時間と表現すると重たく感じますが、雑談やコミュニケーションを兼ねた時間なので、いまのところ家族間での合意はできています。</p>

<h3 id="ふりかえりの目的">ふりかえりの目的</h3>

<p>わが家では、ふりかえりの目的を下記のとおり定めています。</p>

<ul>
<li>ありたい姿に向かって、自分がどれくらい進んだのか？</li>
<li>ありたい姿に向かって、正しい方向に進めているのか？</li>
</ul>


<p>「ありたい姿」というと何やら大袈裟な感じがしますが、大層なものでなくても構わないです。<br/>
たとえば、「できるだけ健康で、美味しいものを食べる自分」「スプラトゥーンがうまい自分」「できる限りしんどいことはしたくない」みたいなものは、全部「ありたい姿」のひとつです。<br/>
こういう感じなら、誰しも「ありたい姿」を持っているのではないでしょうか？</p>

<p>ふりかえりをすることで、自分の生活と「ありたい姿」のギャップを確認し、そこを目指すための軌道修正ができます。
わが家では週に 1 度ふりかえりをしているので、「ありたい姿」を目指すための軌道修正が毎週できているということになります。</p>

<h3 id="YKPT--ファイブフィンガー">YKPT + ファイブフィンガー</h3>

<p>いわゆる「YKPT」という方法を少しアレンジし、ふりかえりをおこなっています。</p>

<p>YKPT の詳細は省きますが、客観的事実のみから成る「やったこと(Y)」、「やったこと」に基づく「よかったこと（Keep）」、「改善したいこと（Problem）」を書き出し、それに基づいて「次やること（Try）」を決めるという手法です。</p>

<p>また、ファイブフィンガーという手法で、ふりかえりのふりかえりをおこなっています。<br/>
ふりかえりについてもカイゼンを繰り返し、次の週はもっとよいふりかえりができるようにしたいと考えています。</p>

<p>これらと併せて、家計簿等を見返す「お金のふりかえり」、アプリの利用時間やゲームのプレイ時間等を見返す「時間のふりかえり」もやっているのですが、今回はこれらについての詳細は省きます。</p>

<h3 id="実際の様子">実際の様子</h3>

<p>実際のふりかえりの様子をスクリーンショットですこし紹介します。これは「やったこと」「よかったこと」「改善したいこと」の一部が見えています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/z/zomysan/20221217/20221217004703.png" width="1200" height="900" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="ふりかえりをしてよかったこと">ふりかえりをしてよかったこと</h2>

<p>さて、ここまではふりかえりの概要を紹介してきました。ここからいよいよ、約50回のふりかえりから得た経験について紹介していきます！<br/>
まずは、ふりかえりをしてよかったことについて挙げます。</p>

<h3 id="問題を共有できる">問題を共有できる</h3>

<p>一緒に暮らしていると、ちょっとした困りごとや、変えてもらうようお願いしたいことが出てくるものですよね。<br/>
わが家ではふりかえりの場がそういった「問題」を共有する場所として機能しています。</p>

<p>「いまは改善したいことを挙げる時間ですよ」と区切られていることで、ちょっと言い出しにくいことも表現しやすいです。「発生した課題と解決方法」で詳しくお話ししますが、言い出しにくいことを言い出すための工夫もしています。</p>

<p>1 年のふりかえりを通して、どういう課題であっても、「相手を責めたり押し付けたりするのではなく、解決方法について一緒に真剣に考える」ことで解決することを信じ、安心して話せるようになりました。このことで、さらに「改善したいこと」が出てきやすくなり、カイゼンにつながっています。</p>

<h3 id="課題が解決する">課題が解決する</h3>

<p>ふりかえりをせずに過ごしていると、困っていることがあってもなんとなくそのまま過ごしてしまいます。ふりかえりで「改善したいこと」「困っていること」をあらためて書き出すことで、すぐに対応できます。<br/>
たとえば、「寒くて目が覚める」という課題を数年間見過ごしてきたのですが、今年は敷く毛布を買って対応できました。</p>

<p>そのほかには、「本を読む時間が 0 分だった」という客観的事実から、「寝る前に本を読む時間をとる」という改善すべきことが見つかりました。<br/>
これに対し、「自由時間を就寝時間ギリギリまでではなく、30 分前までとする」という行動をとり、無事に 1 週間に数時間の読書時間を確保できるようになりました。</p>

<h3 id="悩まなくていい悩みを捨てられる">悩まなくていい悩みを捨てられる</h3>

<p>「課題が解決する」では、本を読む時間を確保できるようになったことについてお話ししました。<br/>
じつはその後私に起きたことなのですが、個人開発の時間が膨らんで読書時間が減っていってしまいました。個人開発の時間を削ることについても考えたのですが、「いまは読書よりも開発の時間をとることを優先したい」と考えている自分に気づきました。読書できていないことで悩まなくていいのだと、漠然と持っていた「できていない気持ち」を捨てることができました。</p>

<p>日常を過ごしていると、ついあれもこれもと考えてしまいがちです。ふりかえりの場で自分の優先順位を確認することで、自分が本当に集中したいこととそうでないことを振り分け、優先度の低いことに心を煩わされないようにしたいですね。</p>

<p>それはそうとして、なんとかして読書の時間は確保したいものです。明日の家族会議で話してもいいかもしれません。</p>

<h3 id="出来事が蓄積される">出来事が蓄積される</h3>

<p>「やったこと」でその週にあったことを客観的事実として挙げます。これは、「よかったこと」「改善したいこと」につなげるための思い出しなのですが、挙げた「やったこと」自体にも価値があると感じます。</p>

<p>書いたカードは、すべてとっておき、ふりかえりをした順番に蓄積していきます。そうすると、楽しかったお出かけや、美味しかった自炊、外食、達成したことや困ったことなど、さまざまな「今年 1 年あったこと」のまとめになります。</p>

<p>もうすぐ年末休みなので、我が家でも家族で 1 年分の「あったこと」をまとめて見返す予定です。とても楽しみです！</p>

<h2 id="発生した課題と解決方法">発生した課題と解決方法</h2>

<p>ここまでふりかえりの良かったところについて書きましたが、楽にこれらを得たわけではありませんでした。</p>

<p>ふりかえりをやっていくと、大小さまざまな課題が発生します。<br/>
その中でもインパクトが大きかったものについて、どういう課題だったか、どのように解決したのかを紹介します。</p>

<h3 id="決めた次やることを忘れてしまう">決めた「次やること」を忘れてしまう</h3>

<p>せっかく「次やること」を決めてリストにしたのに、すっかり忘れたまま 1 週間を過ごす。<br/>
そして、次週のふりかえりの開始時「こんなのあったな……」と呆然とリストを眺める、ということがありました。</p>

<h4 id="-解決方法-朝会を実施">→ 解決方法: 朝会を実施</h4>

<p>「次やること」で決めたことを守れているか、やると決めたタスクはこなせているかを確認するため、朝にも短い家族会議をすることに決めました。わが家ではそのまま朝会と呼んでいます。</p>

<p>朝会で「次やること」を確認することで、日常のなにかを変えるような取り組み（「水をしっかり飲むためにお湯を 10 時に沸かす」など）についてあらためて認識できます。また、タスク的な取り組み（「敷き毛布を買う」「保温ケトルを買う」など）についても、その日の TODO に落とし込むなどして 1 週間のうちに確実に消化しきることができるようになりました。</p>

<p>余談ではありますが、朝会ではふりかえりの「次やること」の確認に加え、以下のような取り組みもやっています。</p>

<ul>
<li>直近の家族の目標を確認</li>
<li>当日・直近のスケジュール確認</li>
<li>それぞれの「今日の TODO」を付箋に書く</li>
</ul>


<p>これも朝会をやっていく過程で試行錯誤があり、ふりかえりを通して今の形になりました。</p>

<h3 id="改善したいことの話し合いが精神的につらくなる">「改善したいこと」の話し合いが精神的につらくなる</h3>

<p>「改善したいこと」の深掘りではお互いにマイナスのフィードバックをするような場面も多く、「えっ」「いやいや」と言いたい気持ちになる場面もあります。<br/>
もちろん「改善したいこと」について話すわけだから、重たい話になって当然です。しかしあまりにも重いムードが続くと、ふりかえり自体に悪いイメージ・忌避感を持ち、ふりかえり自体から遠ざかってしまいます。</p>

<h4 id="-解決方法-おやつ休憩を挟む">→ 解決方法: おやつ休憩を挟む</h4>

<p>現在、わが家の「改善したいこと」を話す流れは以下のようになりました。<br/>
まず「改善したいこと」を各々がカードに書いたら、お互いにコメントをテキストで書きます。そして「おやつ休憩」を挟み、そのあと深掘りの会話をします。</p>

<p>おやつは血糖値を上げて脳の栄養になってくれそうな甘いものを選びます。紅茶やコーヒーなど、用意していたおやつに合いそうな飲み物もふたりで一緒に用意します。</p>

<p>まず文章で見て、自分なりに受け止める時間があり、楽しいおやつの時間も挟むので、反射的に言い返すことから喧嘩になる可能性が大幅に下がります。そのころには、最初に感じた「えっ」という衝撃はずいぶん和らいでいます。</p>

<p>余談ですが、元気なうちに「改善したいこと」の話を済ませてしまうという解決方法もあるかもしれません。わが家では「その週のふりかえりで食べるお菓子を選ぶ」という楽しいイベントが一つ加わり、ふりかえりの時間が楽しみになるという嬉しい副作用もあったので、今のやり方を続けています。</p>

<h3 id="ふりかえりへの取り組み方に差が出てしまう">ふりかえりへの取り組み方に差が出てしまう</h3>

<p>一緒にやると決めたふりかえりですが、お互いがずっと高いモチベーションで取り組めていたわけではありません。<br/>
やりたいことがあるときや、ちょっと気になってることがあるとき、単純に疲れているときなど、ふりかえりの場に集中できていないこともありました。</p>

<p>「ちゃんとやってよ」と言い合うのは簡単ですが、集中できないのは集中できないなりの理由があるということです。ただ、これではせっかくのふりかえりの質が保てませんし、最悪ふりかえりのせいで言い争いが起きてしまいます。</p>

<h4 id="-解決方法-ふりかえりについてふりかえりあらためてふりかえりの意義を共有する">→ 解決方法: ふりかえりについてふりかえり、あらためてふりかえりの意義を共有する</h4>

<p>どうすべきなのか、一旦休んだほうがいいのかな、と思っていたところ、2022 年に開催された<a href="https://www.scrumosaka.org/">スクラムフェス大阪</a>で、とてもタイムリーなセッションに出会いました。</p>

<blockquote><p><a href="https://confengine.com/conferences/scrum-fest-osaka-2022/proposal/16535">ふりかえりをふりかえるための「ふりかえりチェックシート」を使ってふりかえろう！</a></p></blockquote>

<p>このセッションで紹介されたのは、ふりかえりがうまくいっているのかをさまざまな観点からチェックし、話し合うためのチェックシートです。ぜひ一度<a href="https://miro.com/miroverse/retrospective-check-sheet-japanese/">こちら</a>からシートの現物をごらんいただきたいです。</p>

<p>わが家でも、このチェックシートにふたりで取り組みました。<br/>
まずは各自でチェックシートを埋めていきます。書き終わったら、ひとつずつ結果を共有していきました。一致しているものもあれば、そうでないものもありました。お互いの抱えていた課題感を共有し、議論し、解決のためにいくつかのアクションが決まりました。ふりかえりに感じていたモヤモヤが解消され、より雰囲気よくふりかえりに取り組めるようになりました。</p>

<p>しかし、シートの効果はそれだけではありませんでした。このシートのチェック項目は、場づくり、アイデア出し、思い出しといった「ふりかえりの要素」ごとに整理されています。<br/>
そして、「なぜその要素がふりかえりに重要なのか」「その要素がふりかえりにどう影響をあたえるのか」といった解説が併記されています。<br/>
この解説を読みながら自分たちのふりかえりをふりかえり、議論したことで、二人のあいだで「質の高いふりかえりに何が重要なのか」についての共通認識を持てたことが一番の収穫だったように思います。</p>

<h2 id="まとめ">まとめ</h2>

<p>ふりかえりをしてよかったことをまとめます。</p>

<ul>
<li>問題を家族で共有できる</li>
<li>課題が解決する</li>
<li>悩まなくていい悩みを捨てられる</li>
<li>出来事が蓄積される</li>
</ul>


<p>また、ふりかえりをよいものにするために取り組んだことは以下のとおりです。</p>

<ul>
<li>ふりかえったことは、毎日確認する機会をつくる</li>
<li>ふりかえり自体のふりかえりもする</li>
<li>ごきげんでいるために、おやつ休憩を挟む</li>
<li>ありたい姿を認識する</li>
<li>ふりかえりの意義を共有する</li>
</ul>


<p>長い記事を読んでいただき、感謝しかありません。<br/>
今思い返すと、家族でやってきたことが、この冬からはじめたスクラムマスターとしての仕事にも活かせているのではないかと思っています。</p>

<p>2023 年、プライベートについてもふりかえりをはじめてみませんか？</p>

<p>Twitter でもふりかえりのことなど発信していきたいと思っていますので、興味があれば是非そちらもチェックしていただければと思います！</p>

<p><a href="https://twitter.com/zomysan">https://twitter.com/zomysan</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker のレイヤー化を本番環境に導入してみた]]></title>
        <id>https://developer.feedforce.jp/entry/2022/12/05/110000</id>
        <link href="https://developer.feedforce.jp/entry/2022/12/05/110000"/>
        <updated>2022-12-05T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="https://twitter.com/masutaka/status/1550357627779284992">自称 Looker エバンジェリスト</a>の <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>この記事は Looker Advent Calendar 2022 の 5 日目の記事です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2022%2Flooker" title="Calendar for Looker | Advent Calendar 2022 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://qiita.com/advent-calendar/2022/looker">qiita.com</a></cite></p>

<p>昨日と一昨日は記事がなくて、その前は BASE 永野さん (<a href="https://twitter.com/glassmonekey">@glassmonekey</a>) の「<a href="https://devblog.thebase.in/entry/2022/12/02/110000">アジリティを保ってデータ基盤を作る取り組み</a>」でした。使用した技術そのものよりも、どのように合意形成してこのような体制に出来たのかが気になりました。👀</p>

<p>今回は奇しくも去年の Advent Calendar その後の話になります。全然狙っていませんでした。たまたまです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F12%2F13%2F110000" title="LookML 開発で使っているディレクトリ構造を紹介する - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2021/12/13/110000">developer.feedforce.jp</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#LookML-のレイヤー化とは">LookML のレイヤー化とは</a></li>
    <li><a href="#導入戦略">導入戦略</a></li>
    <li><a href="#実際の導入方法">実際の導入方法</a><ul>
            <li><a href="#_baselayerlkml">/_base.layer.lkml</a></li>
            <li><a href="#_basiclayerlkml">/_basic.layer.lkml</a></li>
            <li><a href="#layerslayerlkml">/layers/*.layer.lkml</a></li>
            <li><a href="#modellkml">/*.model.lkml</a></li>
            <li><a href="#コラム-複数レイヤーで共通するロジックの置き場所">[コラム] 複数レイヤーで共通するロジックの置き場所</a></li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="LookML-のレイヤー化とは">LookML のレイヤー化とは</h2>

<p>LookML には <a href="https://cloud.google.com/looker/docs/lookml-refinements">Refinements</a> という <a href="https://cloud.google.com/looker/docs/reusing-code-with-extends">Extends</a> に似た機能があり、explore や view の定義を分散させたり、元のコードを変更せずに機能を追加することが出来ます。</p>

<p>この Refinements を応用することで LookML に「レイヤー化」という概念を導入することが出来ます。まずはこちらの記事をどうぞ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2F%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%25A0-103%2Frefinements%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6lookml%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B-18809" title="Refinementsを使ってLookMLのコードを整理する | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://community.looker.com/%E3%82%B3%E3%83%A9%E3%83%A0-103/refinements%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6lookml%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%95%B4%E7%90%86%E3%81%99%E3%82%8B-18809">community.looker.com</a></cite></p>

<p>このような責務だと理解しました。</p>

<ul>
<li>/_base.layer.lkml

<ul>
<li>スキーマと Explore の定義に徹する。Join はしない</li>
</ul>
</li>
<li>/_basic.layer.lkml

<ul>
<li>データ構造に着目した Join と、primary_key の定義に徹する。ビジネスロジックは定義しない</li>
</ul>
</li>
<li>/layers/*.layer.lkml

<ul>
<li>ビジネスロジックの論理レイヤーをここに定義する</li>
</ul>
</li>
</ul>


<p>💭 <code>_base</code> と <code>_basic</code> はもっと良い命名はあるかもしれません。</p>

<h2 id="導入戦略">導入戦略</h2>

<p>既存のプロジェクトを全部書き換えるのはリスクが大きいので、新規で Join する view からレイヤー化を試すことにしました。</p>

<p>ただ、責務はこのように再定義しました。特に <code>/_basic.layer.lkml</code> を変えました。</p>

<ul>
<li>/_base.layer.lkml

<ul>
<li>スキーマ定義に徹する</li>
</ul>
</li>
<li>/_basic.layer.lkml

<ul>
<li>primary_key のテストを書ける定義を書く。Join はしない。ビジネスロジックは知らない</li>
</ul>
</li>
<li>/layers/*.layer.lkml

<ul>
<li>Join 含めて、ビジネスロジックの論理レイヤーをここに定義する</li>
</ul>
</li>
</ul>


<p>というのも、今回は「データ構造に着目した Join」と同じ Join を論理レイヤーにも定義する必要があり、実装が分散するからです。後述します。</p>

<h2 id="実際の導入方法">実際の導入方法</h2>

<h3 id="_baselayerlkml">/_base.layer.lkml</h3>

<p>このようなスキーマ定義を、1 つのファイルに書いていきます。</p>

<pre class="code" data-lang="" data-unlink>view: ad_budget {
  sql_table_name: @{table_ad_budget} ;;

  dimension: month        { type: string }
  dimension: client_name  { type: string }
  dimension: site_name    { type: string }
  dimension: media        { type: string }
  dimension: budget_gross { type: number }
}</pre>


<p>💡 <code>sql: ${TABLE}.date ;;</code> 等がなくて違和感があるかも知れませんが、以下のとおり問題ありません。</p>

<p>🔗 <a href="https://cloud.google.com/looker/docs/reference/param-field-sql#sql_for_dimensions">sql (for fields) > Definition > sql for Dimensions</a></p>

<blockquote><p>If <code>sql</code> is left unspecified, then Looker assumes that there is a column in the underlying table with the same name as the field. For example, selecting a field called <code>city</code> without a <code>sql</code> parameter would be equivalent to specifying <code>sql: ${TABLE}.city</code>.</p>

<p><code>sql</code> が指定されていない場合、Looker はそのフィールドと同じ名前のカラムが基礎となるテーブルに存在すると仮定します。例えば、<code>sql</code> パラメータを指定せずに <code>city</code> というフィールドを選択すると、<code>sql: ${TABLE}.city</code> と指定したのと同じことになります。</p></blockquote>

<h3 id="_basiclayerlkml">/_basic.layer.lkml</h3>

<p>このような定義を書きます。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;/_base.layer&#34;

# Define for tests
explore: ad_budget {
  required_access_grants: [can_view_explores_for_tests]
  hidden: yes
}

view: +ad_budget {
  dimension: pk {
    primary_key: yes
    type: string
    sql: CONCAT(${month}, ${client_name}, ${site_name}, ${media}) ;;
    hidden: yes
  }

  measure: count {
    type: count
    description: &#34;Row Count&#34;
    filters: {
      field: &#34;pk&#34;
      value: &#34;-NULL&#34;
    }
  }
}</pre>


<p>💡 ad_budget view は直接使われず、他の Explore から Join して使うので、ad_budget explore はテストだけで使うように隠しています。</p>

<p>関連記事です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F08%2F30%2F150000" title="Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2021/08/30/150000">developer.feedforce.jp</a></cite></p>

<h3 id="layerslayerlkml">/layers/*.layer.lkml</h3>

<p>ad_budget view を 2 つの Explore から Join します。<code>join</code> 内容はほとんど同じで、<code>sql_on</code> の view 名が違うだけです。</p>

<p>似た実装を 1 つにまとめられるメリットがあります。corp_name1 という名前から推測できるとおり、corp_nameN explore は複数存在しており、その数数十にもなります。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;/_basic.layer&#34;
include: &#34;/explores/all_media.explore&#34;

explore: +all_media {
  join: ad_budget {
    view_label: &#34;広告予算&#34;
    relationship: many_to_many
    sql_on: ${all_media.date_month} = ${ad_budget.month}
            AND ${all_media.corporate_name} = ${ad_budget.client_name}
            AND ${all_media.proposition_name} = ${ad_budget.site_name} ;;
  }
}

explore: +corp_name1 {
  join: ad_budget {
    view_label: &#34;広告予算&#34;
    relationship: many_to_many
    sql_on: ${corp_name1.date_month} = ${ad_budget.month}
            AND ${corp_name1.corporate_name} = ${ad_budget.client_name}
            AND ${corp_name1.proposition_name} = ${ad_budget.site_name} ;;
  }
}

view: +ad_budget {
  dimension: budget_gross { hidden: yes }

  measure: total_budget_gross {
    type: sum
    sql: ${budget_gross} ;;
    label: &#34;広告予算 (Gross)&#34;
    value_format_name: jpy_0
  }
}</pre>


<h3 id="modellkml">/*.model.lkml</h3>

<p><code>/model_name.model.lkml</code> のようなファイルに、レイヤーファイルの include を追加しました。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;/layers/**/*.layer&#34;</pre>


<h3 id="コラム-複数レイヤーで共通するロジックの置き場所">[コラム] 複数レイヤーで共通するロジックの置き場所</h3>

<p>少し脱線。複数レイヤーで共通するロジックをどう書けばよいか？の話はあると思います。</p>

<p>今まで通り <code>extends</code> パラメーターを使えば良いです。Refinements と Extends は共存できます。詳しくは <a href="https://help.looker.com/hc/en-us/articles/5043112335891-Lookml-refinements-compared-to-extends">Lookml refinements compared to extends</a> をどうぞ。</p>

<p>まだ試行錯誤中ですが、私は <code>/modules/*.module.lkml</code> に共通ロジックをまとめています。</p>

<h2 id="まとめ">まとめ</h2>

<p>LookML のレイヤー化を紹介しました。今回の例以外にもガッツリと使っています。</p>

<p>記事を書いていて、具体的な例を出してもピンと来ないだろうし、抽象的な例にするとボンヤリするしで、いろんな意味で難易度が高かったです。どなたか 1 人にでも参考になれば十分です。</p>

<p>レイヤー化は LookML の到達点ではなく、1 つの選択肢に過ぎません。素朴なデータ構造であれば、<code>/views</code> や <code>/explores</code> で実装したほうが良いと思います。</p>

<p>というのも、レイヤー化を導入すると、スキーマ定義と Dimension&amp;Measure 定義の距離が離れるので、その view で何が使えるのか、コードから理解するのが難しくなるからです。</p>

<p>今回紹介した例も、記事を書いていてもっと良い方法があるような気がしました。Explore をうまいこと Extends して Join を 1 つにまとめれば、レイヤー化を使わなくてよいのでは？とか。でも以前検討した時はうまくいかなかったんですよね...。</p>

<p>正解はないと思うので、他の試行錯誤も是非教えて下さい。</p>

<p>🔗 <a href="https://community.looker.com/lookml-5/what-is-the-looker-recommended-folder-structure-for-lookml-development-28826">What is the looker recommended folder structure for LookML development ? | Looker Community</a></p>

<blockquote><p>I used different approaches in the last few years and found it that I always have to have some kind of a hybrid system.
(snip)
But to be honest, I am still experimenting with what’s the best physical split versus logical</p>

<p>私は過去数年間、さまざまなアプローチを使用し、私は常にいくつかの種類のハイブリッドシステムを持たなければならないことを発見した。
（省略）
しかし、正直なところ、物理的な分割と論理的な分割のどちらが良いのか、まだ試行錯誤の段階です。</p></blockquote>

<p>以前、Looker Community のこちらのコメントを紹介したことがあります。<a href="https://community.looker.com/members/dawid-5902">Dawid</a> さんはよくお見かけする方で、かなりの熟練者のはずです。そんな彼も、未だに試行錯誤しているようです。</p>

<p>始めは <code>/views</code> や <code>/explores</code> のような素朴な実装から始めて、必要に応じてレイヤー化を取り入れれば良いと思います。いつか公式から、データの複雑度に応じたベストプラクティスが出てくることを期待します。🙃</p>

<p><a href="https://qiita.com/advent-calendar/2022/looker">Looker Advent Calendar 2022</a> の明日、明後日は書く人はまだいなくて、その次は @saenakano さんの「System Activity入門」です。お楽しみに。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub の issue をまるっと複製する GitHub Action「Issue Duplicator」を自作した]]></title>
        <id>https://developer.feedforce.jp/entry/2022/12/04/235514</id>
        <link href="https://developer.feedforce.jp/entry/2022/12/04/235514"/>
        <updated>2022-12-04T14:55:14.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="https://socialplus.jp/">ソーシャルPLUS</a> でフロントエンド開発をしている <a href="http://blog.hatena.ne.jp/mashabow/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mashabow/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mashabow</a> です。</p>

<p>ここ最近「issue の複製めんどくさいなー。もっと楽にできればいいのに」と思うことが多かったので、issue をまるっと複製してくれる GitHub Action「Issue Duplicator」を個人で作ってみました。というわけで、今回はこの Issue Duplicator の紹介です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmarketplace%2Factions%2Fissue-duplicator" title="Issue Duplicator - GitHub Marketplace" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://github.com/marketplace/actions/issue-duplicator">github.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmashabow%2Fissue-duplicator-action" title="GitHub - mashabow/issue-duplicator-action: GitHub Action to duplicate an issue with assignees, labels, milestone, and GitHub project custom fields" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://github.com/mashabow/issue-duplicator-action">github.com</a></cite></p>

<p>ちなみにこの記事は、<a href="https://adventar.org/calendars/7898">Feedforce Group Advent Calendar 2022</a>の 4 日目の記事です。3 日目は、かくさんの『<a href="https://note.com/shigey/n/n359732ae92be">セロペギアボッセリに学ぶ、鈴木さんとの接し方</a>』でした。子育て 1 年目な自分にとっては「変数多すぎな。」がとても印象的でした。わかる。（そういう話じゃない？）</p>

<h2 id="Issue-Duplicator-でできること">Issue Duplicator でできること</h2>

<p>複製したい issue に <code>/duplicate</code> とだけ書いたコメントをつけると、</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204232213.png" width="2610" height="1760" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>その issue を<strong>まるっと複製した新しい issue</strong> を、同じリポジトリに作ってくれます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204232003.png" width="2610" height="1760" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>GitHub projects のカスタムフィールドも複製するので、project 上で見るとこんな感じ。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204232724.png" width="2632" height="1324" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>複製される項目の詳細は、以下のとおりです。</p>

<ul>
<li>Title（issue のタイトル）</li>
<li>Body（issue の本文）<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>Assignees</li>
<li>Labels</li>
<li>Milestone</li>
<li>その issue が紐付けられている GitHub projects

<ul>
<li>project のカスタムフィールドの値も、すべてコピーされます</li>
</ul>
</li>
</ul>


<p>なお、以下の項目は複製されません。</p>

<ul>
<li>issue についているコメント</li>
<li>Author（アクションに設定する personal access token を発行したユーザーが Author になります）</li>
<li>issue が open か closed か（常に open で作成されます）</li>
<li>issue がロックされているか否か（非ロック状態で作成されます）</li>
</ul>


<h2 id="Issue-Duplicator-の使い方">Issue Duplicator の使い方</h2>

<p>Issue Duplicator を動かしたいリポジトリに、以下のワークフローを作成します。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .github/workflows/issue-duplicator.yml</span>

<span class="synIdentifier">name</span><span class="synSpecial">:</span> Issue Duplicator

<span class="synIdentifier">on</span><span class="synSpecial">:</span>
  <span class="synIdentifier">issue_comment</span><span class="synSpecial">:</span>
    <span class="synIdentifier">types</span><span class="synSpecial">:</span> <span class="synSpecial">[</span>created, edited<span class="synSpecial">]</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">run</span><span class="synSpecial">:</span>
    <span class="synIdentifier">runs-on</span><span class="synSpecial">:</span> ubuntu-latest
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">uses</span><span class="synSpecial">:</span> mashabow/issue-duplicator-action@v1
        <span class="synIdentifier">with</span><span class="synSpecial">:</span>
          <span class="synIdentifier">github-token</span><span class="synSpecial">:</span> ${{ secrets.ISSUE_DUPLICATOR_PAT }}
</pre>


<p>次に、<code>repo</code> スコープと <code>project</code> スコープを持つ <a href="https://github.com/settings/tokens/new">personal access token を発行</a>しましょう。そして、その personal access token を、<code>ISSUE_DUPLICATOR_PAT</code> という名前で<a href="https://docs.github.com/ja/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">リポジトリのシークレットに登録</a>すれば準備完了です。</p>

<p>適当な issue に <code>/duplicate</code> というコメントを付けて、ちゃんと複製されるか確認しましょう！ 複製に成功すると、新しい issue へのリンクが追加されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204233024.png" width="1842" height="268" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>ログを確認したい場合は、リポジトリの Actions タブから。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204233238.png" width="2222" height="1314" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="Issue-Duplicator-を作った経緯">Issue Duplicator を作った経緯</h2>

<p>わたしの所属するソーシャル PLUS 開発チームでは、メンバーが増えてきたこともあって先月から大規模スクラム <a href="https://less.works/jp/less/rules">Large-Scale Scrum（LeSS）</a> を導入しています。これを機に、今までのスクラムのやり方を見直し、改善することになりました。プロダクトバックログはもともと issue と GitHub projects で管理しており、それは引き続き使っていくんですが、</p>

<ul>
<li>1 スプリントでプロダクトバックログアイテムを 4 つほど消化できるように、アイテムの粒度をもっと細かくしたい</li>
<li>リファインメントやプランニングの場で、どんどんプロダクトバックログアイテムを分割したい</li>
</ul>


<p>というのが変化点でした。LeSS を導入するにあたって『大規模スクラム Large-Scale Scrum（LeSS）―アジャイルとスクラムを大規模に実装する方法]』という本を読んだんですが、プロダクトバックログアイテムの分割については、9 章と 11 章で 20 ページほどを割いて、詳しく解説されています。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/462130366X?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51+igEK3VPL._SL500_.jpg" class="hatena-asin-detail-image" alt="大規模スクラム Large-Scale Scrum(LeSS) アジャイルとスクラムを大規模に実装する方法" title="大規模スクラム Large-Scale Scrum(LeSS) アジャイルとスクラムを大規模に実装する方法"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/462130366X?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">大規模スクラム Large-Scale Scrum(LeSS) アジャイルとスクラムを大規模に実装する方法</a></p><ul class="hatena-asin-detail-meta"><li>丸善出版</li></ul><a href="https://www.amazon.co.jp/dp/462130366X?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<p>さて、このプロダクトバックログアイテム（1つのアイテムを1つの issue として管理しています）をいざ分割しようとすると、次の手順を踏むことになります。</p>

<ol>
<li>分割元の issue とは別に、新しい issue を作る</li>
<li>元の issue の本文を新しい issue の本文にコピペして、適宜編集する</li>
<li>新しい issue にラベルやマイルストーンをつける</li>
<li>新しい issue をプロダクトバックログの project に追加する</li>
<li>新しい issue の、project のカスタムフィールド（優先度・ポイント・担当チームなど）を埋める</li>
</ol>


<p>……面倒ですよね。実際に何度か分割してみましたが、やっぱり面倒です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20221204/20221204230453.png" width="1218" height="157" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>分割元の issue と、新しく作った issue とでは、ラベル・マイルストーン・Project のカスタムフィールドなどはだいたいが共通になるでしょう。もちろん、分割して別々のアイテムになったわけですから、細部は異なりますが。というわけで、「issue をまるっと複製してくれる便利ツールがあれば助かるのでは…？」と考えました。とりあえず複製して、変えたい箇所は手で編集すればいいか、と。</p>

<p>調べてみたら <a href="https://github.com/marketplace/actions/duplicate-issue">Duplicate Issue</a> という GitHub Action がありましたが、残念ながら GitHub projects には対応していません。じゃあいい機会だし作ってみるか、と自作することにしました。</p>

<h2 id="アクションを自作する">アクションを自作する</h2>

<p>アクションの作り方には何種類かありますが、普段 TypeScript を書いている身にとっては、JavaScript アクションというものを開発するのがとっつきやすそうでした。</p>

<ul>
<li><a href="https://docs.github.com/ja/actions/creating-actions/creating-a-javascript-action">Creating a JavaScript action - GitHub Docs</a></li>
</ul>


<p>TypeScript で開発するためのテンプレートが公式で用意されていたので、今回はこちらを使ってみました。が、README に詳しいことが書かれていなかったり、ビルド済みのファイルをコミットする必要があったり、使い勝手は正直微妙です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Factions%2Ftypescript-action" title="GitHub - actions/typescript-action: Create a TypeScript Action with tests, linting, workflow, publishing, and versioning" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://github.com/actions/typescript-action">github.com</a></cite></p>

<p>スクリプトの書き方はいたってシンプルで、入出力に <a href="https://github.com/actions/toolkit/tree/main/packages/core"><code>@actions/core</code></a> の関数を使う以外は、基本的には普通の Node.js のスクリプトと同じです。詳しい書き方については、公式のドキュメントもネット上の日本語記事も充実しているので、ここでは割愛します。</p>

<p>今回は issue の複製をしたいので、GitHub の Web API を利用します。<a href="https://github.com/actions/toolkit/tree/main/packages/github"><code>@actions/github</code></a> を使うと、Octokit で簡単に API を叩くことができます。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// Octokit を使って issue を複製する</span>

<span class="synStatement">import</span> * <span class="synStatement">as</span> github <span class="synStatement">from</span> <span class="synConstant">&quot;@actions/github&quot;</span><span class="synStatement">;</span>

<span class="synType">const</span> octokit <span class="synStatement">=</span> github.getOctokit<span class="synStatement">(</span>token<span class="synStatement">);</span>

<span class="synComment">// https://docs.github.com/en/rest/issues/issues#create-an-issue</span>
<span class="synType">const</span> <span class="synIdentifier">{</span> data: createdIssue <span class="synIdentifier">}</span> <span class="synStatement">=</span> <span class="synStatement">await</span> octokit.rest.issues.create<span class="synStatement">(</span><span class="synIdentifier">{</span>
  owner: repository.owner.login<span class="synStatement">,</span>
  repo: repository.name<span class="synStatement">,</span>
  title: originalIssue.title<span class="synStatement">,</span>
  body: originalIssue.body ?? <span class="synType">undefined</span><span class="synStatement">,</span>
  milestone: originalIssue.milestone?.<span class="synType">number</span><span class="synStatement">,</span>
  labels: originalIssue.labels<span class="synStatement">,</span>
  assignees: originalIssue.assignees.map<span class="synStatement">((</span><span class="synIdentifier">{</span> login <span class="synIdentifier">}</span><span class="synStatement">)</span> <span class="synStatement">=&gt;</span> login<span class="synStatement">),</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>次に、新しく作った issue を GitHub project に追加したいわけですが、project 関連の API は REST では提供されていません。そのため、GraphQL の方を使う必要があります。<a href="https://docs.github.com/ja/graphql/reference/objects">オブジェクトの一覧</a>を見ると、<code>Project</code>・<code>ProjectV2</code>・<code>ProjectNext</code> と似たようなオブジェクトが 3 つもありますが、今回使うのは <code>ProjectV2</code> です。ややこしいですね。</p>

<ul>
<li><code>Project</code>: 古いバージョンの <a href="https://docs.github.com/ja/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards">project (classic)</a></li>
<li><strong><code>ProjectV2</code>: 新しい高機能な <a href="https://docs.github.com/ja/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">project</a></strong></li>
<li><code>ProjectNext</code>: <code>ProjectV2</code> の以前の名前。廃止予定</li>
</ul>


<p>また、<code>ProjectV2</code> の中のそれぞれのアイテム（issue・PR・ドラフト）は、<code>ProjectV2Item</code> という名前になっています。以下は Octokit で GraphQL API を叩く例です。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// issue を project に追加する</span>
<span class="synType">const</span> data <span class="synStatement">=</span> <span class="synStatement">await</span> octokit.graphql<span class="synStatement">(</span>
  <span class="synConstant">`</span>
<span class="synConstant">  mutation addIssueToProject($input: AddProjectV2ItemByIdInput!) {</span>
<span class="synConstant">    addProjectV2ItemById(input: $input) {</span>
<span class="synConstant">      item {</span>
<span class="synConstant">        id</span>
<span class="synConstant">      }</span>
<span class="synConstant">    }</span>
<span class="synConstant">  }</span>
<span class="synConstant">`</span><span class="synStatement">,</span>
  <span class="synIdentifier">{</span> input: <span class="synIdentifier">{</span> projectId<span class="synStatement">,</span> contentId: issueId <span class="synIdentifier">}</span> <span class="synIdentifier">}</span>
<span class="synStatement">);</span>
</pre>


<p>特にハマりどころもなく素直に使えますが、残念なことに、そのままでは引数や戻り値の型がつきません。</p>

<h2 id="octokitgraphql-に型をつける"><code>octokit.graphql</code> に型をつける</h2>

<p>せっかく TypeScript で開発しているんですから、やっぱり型が欲しい。ということで、<a href="https://the-guild.dev/graphql/codegen">GraphQL Code Generator</a> を使って型をつけてみました<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>GraphQL Code Generator を以下のように設定して、</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// codegen.ts</span>

<span class="synStatement">import</span> <span class="synStatement">type</span> <span class="synIdentifier">{</span>CodegenConfig<span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">'@graphql-codegen/cli'</span>

<span class="synType">const</span> config: CodegenConfig <span class="synStatement">=</span> <span class="synIdentifier">{</span>
  overwrite: <span class="synConstant">true</span><span class="synStatement">,</span>
  schema: <span class="synConstant">'https://docs.github.com/public/schema.docs.graphql'</span><span class="synStatement">,</span>
  documents: <span class="synConstant">'src/**/*.graphql'</span><span class="synStatement">,</span>
  generates: <span class="synIdentifier">{</span>
    <span class="synConstant">'src/graphql/index.ts'</span>: <span class="synIdentifier">{</span>
      plugins: <span class="synIdentifier">[</span>
        <span class="synConstant">'typescript'</span><span class="synStatement">,</span>
        <span class="synConstant">'typescript-operations'</span><span class="synStatement">,</span> <span class="synComment">// 各 operation から型を生成する</span>
        <span class="synConstant">'typescript-generic-sdk'</span> <span class="synComment">// SDK（各 operation を実行する関数群）を生成する</span>
      <span class="synIdentifier">]</span><span class="synStatement">,</span>
      config: <span class="synIdentifier">{</span>
        documentMode: <span class="synConstant">'string'</span> <span class="synComment">// operation の中身を文字列としてリクエスト関数に渡す</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> config
</pre>


<p>GraphQL の operation のファイルを用意します。</p>

<pre class="code lang-graphql" data-lang="graphql" data-unlink><span class="synComment"># src/graphql/addIssueToProject.graphql</span>

<span class="synType">mutation</span> <span class="synIdentifier">addIssueToProject</span>($<span class="synType">input</span>: <span class="synType">AddProjectV2ItemByIdInput</span><span class="synStatement">!</span>) <span class="synSpecial">{</span>
  <span class="synIdentifier">addProjectV2ItemById</span>(<span class="synIdentifier">input</span>: $<span class="synIdentifier">input</span>) <span class="synSpecial">{</span>
    <span class="synIdentifier">item</span> <span class="synSpecial">{</span>
      <span class="synIdentifier">id</span>
    <span class="synSpecial">}</span>
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>そして GraphQL Code Generator を実行。</p>

<pre class="code console" data-lang="console" data-unlink>$ yarn graphql-codegen --config codegen.ts</pre>


<p>すると、以下のようなファイルが生成されます。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// src/graphql/index.ts</span>

<span class="synComment">// この上にはスキーマから生成された型定義がひたすら書かれている（省略）</span>

<span class="synComment">// operation の変数の型</span>
<span class="synStatement">export</span> <span class="synStatement">type</span> AddIssueToProjectMutationVariables <span class="synStatement">=</span> Exact<span class="synStatement">&lt;</span><span class="synIdentifier">{</span>
  input: AddProjectV2ItemByIdInput<span class="synStatement">;</span>
<span class="synIdentifier">}</span><span class="synStatement">&gt;;</span>

<span class="synComment">// operation の結果の型</span>
<span class="synStatement">export</span> <span class="synStatement">type</span> AddIssueToProjectMutation <span class="synStatement">=</span> <span class="synIdentifier">{</span> __typename?: <span class="synConstant">'Mutation'</span><span class="synStatement">,</span> addProjectV2ItemById?: <span class="synIdentifier">{</span> __typename?: <span class="synConstant">'AddProjectV2ItemByIdPayload'</span><span class="synStatement">,</span> item?: <span class="synIdentifier">{</span> __typename?: <span class="synConstant">'ProjectV2Item'</span><span class="synStatement">,</span> id: <span class="synType">string</span> <span class="synIdentifier">}</span> | <span class="synType">null</span> <span class="synIdentifier">}</span> | <span class="synType">null</span> <span class="synIdentifier">}</span><span class="synStatement">;</span>

<span class="synComment">// operation の中身そのもの</span>
<span class="synStatement">export</span> <span class="synType">const</span> AddIssueToProjectDocument <span class="synStatement">=</span> <span class="synConstant">`</span>
<span class="synConstant">    mutation addIssueToProject($input: AddProjectV2ItemByIdInput!) {</span>
<span class="synConstant">  addProjectV2ItemById(input: $input) {</span>
<span class="synConstant">    item {</span>
<span class="synConstant">      id</span>
<span class="synConstant">    }</span>
<span class="synConstant">  }</span>
<span class="synConstant">}</span>
<span class="synConstant">    `</span><span class="synStatement">;</span>

<span class="synComment">// リクエスト関数の型</span>
<span class="synStatement">export</span> <span class="synStatement">type</span> Requester<span class="synStatement">&lt;</span>C <span class="synStatement">=</span> <span class="synIdentifier">{}</span><span class="synStatement">,</span> E <span class="synStatement">=</span> <span class="synType">unknown</span><span class="synStatement">&gt;</span> <span class="synStatement">=</span> <span class="synStatement">&lt;</span>R<span class="synStatement">,</span> V<span class="synStatement">&gt;(</span>doc: <span class="synType">string</span><span class="synStatement">,</span> vars?: V<span class="synStatement">,</span> options?: C<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synSpecial">Promise</span><span class="synStatement">&lt;</span>R<span class="synStatement">&gt;</span> | AsyncIterable<span class="synStatement">&lt;</span>R<span class="synStatement">&gt;</span>
<span class="synComment">// リクエスト関数から SDK（各 operation を実行する関数群）を作る関数</span>
<span class="synStatement">export</span> <span class="synStatement">function</span> getSdk<span class="synStatement">&lt;</span>C<span class="synStatement">,</span> E<span class="synStatement">&gt;(</span>requester: Requester<span class="synStatement">&lt;</span>C<span class="synStatement">,</span> E<span class="synStatement">&gt;)</span> <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    addIssueToProject<span class="synStatement">(</span>variables: AddIssueToProjectMutationVariables<span class="synStatement">,</span> options?: C<span class="synStatement">)</span>: <span class="synSpecial">Promise</span><span class="synStatement">&lt;</span>AddIssueToProjectMutation<span class="synStatement">&gt;</span> <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> requester<span class="synStatement">&lt;</span>AddIssueToProjectMutation<span class="synStatement">,</span> AddIssueToProjectMutationVariables<span class="synStatement">&gt;(</span>AddIssueToProjectDocument<span class="synStatement">,</span> variables<span class="synStatement">,</span> options<span class="synStatement">)</span> <span class="synStatement">as</span> <span class="synSpecial">Promise</span><span class="synStatement">&lt;</span>AddIssueToProjectMutation<span class="synStatement">&gt;;</span>
    <span class="synIdentifier">}</span>
    <span class="synComment">// この例では operation が1つだけだが、複数の operation があれば、関数がここに並ぶ</span>
  <span class="synIdentifier">}</span><span class="synStatement">;</span>
<span class="synIdentifier">}</span>
<span class="synComment">// SDK の型</span>
<span class="synStatement">export</span> <span class="synStatement">type</span> Sdk <span class="synStatement">=</span> ReturnType<span class="synStatement">&lt;typeof</span> getSdk<span class="synStatement">&gt;;</span>
</pre>


<p>これだけだとどう使うのかわかりにくいかもしれませんが、以下の使用例を見ればイメージが付くんじゃないでしょうか。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> getSdk <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;./graphql&quot;</span><span class="synStatement">;</span>

<span class="synComment">// octokit.graphql をリクエスト関数として利用する SDK を作る</span>
<span class="synType">const</span> sdk <span class="synStatement">=</span> getSdk<span class="synStatement">(</span>octokit.graphql<span class="synStatement">);</span>

<span class="synComment">// addIssueToProject を実行</span>
<span class="synType">const</span> data <span class="synStatement">=</span> <span class="synStatement">await</span> sdk.addIssueToProject<span class="synStatement">(</span><span class="synIdentifier">{</span>
  input: <span class="synIdentifier">{</span> projectId<span class="synStatement">,</span> contentId: issueId <span class="synIdentifier">}</span><span class="synStatement">,</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>もちろん、<code>sdk.addIssueToProject</code> の引数と戻り値にはちゃんと型が付きます！</p>

<h2 id="アクションを公開する">アクションを公開する</h2>

<p>今回は TypeScript で開発したので、公開する前にビルド（JavaScript へのトランスパイル）を行う必要があります。<a href="https://docs.github.com/ja/actions/creating-actions/releasing-and-maintaining-actions#setting-up-github-actions-workflows">公式ドキュメント</a>で紹介されていた <a href="https://github.com/JasonEtco/build-and-tag-action">JasonEtco/build-and-tag-action</a> を使ってみましたが、以下のような少し癖のある動作をします。</p>

<ol>
<li>GitHub の Web UI から、ビルドしたいコミットを指定してリリースを作成する</li>
<li>リリースが作成されると、JasonEtco/build-and-tag-action によって以下の処理が実行される

<ol>
<li>そのコミットのソースコードをビルドする</li>
<li>ビルドされた <code>dist/index.js</code> と <code>action.yml</code> <strong>だけ</strong> のコミットを、何のブランチにも属していない状態で新しく作る</li>
<li>1 で作成したリリースを、その<strong>新しいコミットで置き換える</strong></li>
<li>1 で作成したリリースのバージョンに応じて、<code>v1.2.3</code>, <code>v1.2</code>, <code>v1</code> などのタグを打つ（もしくは移動させる）</li>
</ol>
</li>
</ol>


<p>これがドキュメントからは読み取りづらく、最初戸惑いました。ビルド後の新しいコミットに <code>README.md</code> が入っていないのも、いまいちな点です。</p>

<p>作成したアクションは、審査不要で GitHub Marketplace に掲載することができます。こちらについては、ドキュメントと UI 上の案内に従っていけば、とても簡単に公開できました。</p>

<ul>
<li><a href="https://docs.github.com/ja/actions/creating-actions/publishing-actions-in-github-marketplace">GitHub Marketplaceでのアクションの公開 - GitHub Docs</a></li>
</ul>


<h2 id="おわりに">おわりに</h2>

<p>というわけで、<a href="https://adventar.org/calendars/7898">Feedforce Group Advent Calendar 2022</a>の 4 日目は Issue Duplicator を自作した話でした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmarketplace%2Factions%2Fissue-duplicator" title="Issue Duplicator - GitHub Marketplace" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://github.com/marketplace/actions/issue-duplicator">github.com</a></cite></p>

<p>書いてから気づいたんですが、こんな真面目な記事じゃなくて、3 月に生まれた息子のかわいさをひたすら語る記事にすればよかったですね。</p>

<p>明日はサラリーマン会計士のあの方が、テントサウナについて語ってくださるそうです。楽しみですね！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fshigi1230%2Fn%2Fn64082e0f47cc" title="足柄のテントサウナに行ってきた話。｜サラリーマン会計士｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://note.com/shigi1230/n/n64082e0f47cc">note.com</a></cite></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
社内では、issue の本文をなぜか「0 コメ」と呼んでいます。ローカル用語だと思いますが、ニコニコ動画全盛期にできた呼び方なんでしょうか…？<a href="#fnref:1" rev="footnote">&#8617;</a></li>
<li id="fn:2">
<code>octokit.graphql</code> に型をつける方法、需要は多いはずなんですが、調べ方が悪かったのか検索してもあまり出てきませんでした。定番の方法をご存じの方がいればぜひご教示ください。<a href="#fnref:2" rev="footnote">&#8617;</a></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker のキャッシュの仕組みを思い出して実装を整理した]]></title>
        <id>https://developer.feedforce.jp/entry/2022/11/11/111100</id>
        <link href="https://developer.feedforce.jp/entry/2022/11/11/111100"/>
        <updated>2022-11-11T02:11:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="https://twitter.com/masutaka/status/1550357627779284992">自称 Looker エバンジェリスト</a>の <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>フィードフォースで Looker を使っているサービスで最近 BigQuery の料金が上がってきました。</p>

<p>本当に使われているのならとても良いことですが、Looker のキャッシュが有効に使われずに BigQuery 料金が増えていたら嫌だなと思い、キャッシュの仕組みを思い出しつつ実装を整理してみました。</p>

<ul class="table-of-contents">
    <li><a href="#Looker-のキャッシュおさらい">Looker のキャッシュおさらい</a></li>
    <li><a href="#今回のサービスでのキャッシュ設定">今回のサービスでのキャッシュ設定</a></li>
    <li><a href="#変更後のキャッシュ設定">変更後のキャッシュ設定</a></li>
    <li><a href="#さらなる足掻きからの失敗">さらなる足掻きからの失敗</a></li>
    <li><a href="#もっと足掻いてからの困惑">もっと足掻いてからの困惑</a></li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#さらなるキャッシュへの理解">さらなるキャッシュへの理解</a></li>
</ul>

<h2 id="Looker-のキャッシュおさらい">Looker のキャッシュおさらい</h2>

<p>Looker にはキャッシュの仕組みがあり、LookML 開発者が適切に設定することで、データベースのクエリ実行を減らすことができます。</p>

<p>全く同じ SQL の実行結果がキャッシュされていれば、データベースにクエリ実行せずにキャッシュを返します。</p>

<p>Looker ユーザーとしてはダッシュボードの表示速度向上のメリットがあり、LookML 開発者としては（BigQuery 等であれば）料金削減に繋がります。</p>

<p>キャッシュの有効期限はデフォルトで 1 時間です。これは <a href="https://cloud.google.com/looker/docs/reference/param-model-persist-for">persist_for (for models)</a> のデフォルト値です。</p>

<h2 id="今回のサービスでのキャッシュ設定">今回のサービスでのキャッシュ設定</h2>

<p>良くも悪くも設定は最小限で、PDT（永続的派生テーブル）の実装箇所だけでした。</p>

<p>例えば Google や Criteo などの広告媒体数値が入ったテーブルを参照する、all_media explore があります。このようなキャッシュ設定でした。</p>

<pre class="code" data-lang="" data-unlink>datagroup: cache_all_media {
  # 最新の日付か総レコード数に変化があったら検知する。
  sql_trigger: SELECT CONCAT(MAX(date), &#39;_&#39;, COUNT(*)) FROM @{table_all_media} ;;
  max_cache_age: &#34;1 hour&#34;
}

explore: all_media {
  persist_with: cache_all_media # (1)

  # ...
}

view: all_media {
  derived_table: {
    # めちゃめちゃ長い SQL
    sql: SELECT
           ...
         FROM @{table_all_media}
         GROUP BY ... ;;
    datagroup_trigger: cache_all_media # (2)
    partition_keys: [&#34;date&#34;]
  }

  # ...
}</pre>


<p>(1) で <code>cache_all_media</code> datagroup と <code>all_media</code> explore が <a href="https://cloud.google.com/looker/docs/reference/param-explore-persist-with">persist_with (for Explores)</a> で紐付くことで、以下の振る舞いが生まれます。</p>

<ul>
<li><code>sql_trigger</code> によりテーブルの変更が検知されると、キャッシュが破棄される</li>
<li><code>max_cache_age</code> を超えたキャッシュは破棄される</li>
</ul>


<p>つまりキャッシュの生存期間は最長でも 1 時間です。その前に PDT が再作成されればもっと短くなります。</p>

<p>どちらかと言えば、データベースを優先する設定です。このテーブルは 1 日に 3 回しか更新されないため、最適化の余地がありそうです。</p>

<p>(2) で <code>cache_all_media</code> datagroup と <code>all_media</code> view も <a href="https://cloud.google.com/looker/docs/reference/param-view-datagroup-trigger">datagroup_trigger</a> で紐付いていますが、これは derived_table を永続化するための設定です。<code>sql_trigger</code> によりテーブルの変更が検知されると、PDT が再作成されるとともに、キャッシュが破棄されます。</p>

<p>※ 余談: <code>persist_with</code> を設定していたことをすっかり忘れていたこともあり、調査前は (1) の理解が出来ていませんでした。😇</p>

<h2 id="変更後のキャッシュ設定">変更後のキャッシュ設定</h2>

<p>紆余曲折あり、<code>max_cache_age</code> を少し増やしただけにしました。</p>

<pre class="code" data-lang="" data-unlink>datagroup: cache_all_media {
  # 最新の日付か総レコード数に変化があったら検知する。
  sql_trigger: SELECT CONCAT(MAX(date), &#39;_&#39;, COUNT(*)) FROM @{table_all_media} ;;
  max_cache_age: &#34;2 hours&#34;
}</pre>


<p>本当は "24 hours" にして「PDT 再作成のタイミングでのみキャッシュを破棄」したかったのですが、他の Explore でも参照される関係で、<code>max_cache_age</code> を思い切って増やせませんでした。</p>

<h2 id="さらなる足掻きからの失敗">さらなる足掻きからの失敗</h2>

<p><code>max_cache_age</code> を 1 時間から 2 時間に増やした程度では、BigQuery 料金を抑えられたように見えませんでした。</p>

<p>仕方がないので、all_media explore 以外の Explore で <code>cache_all_media</code> datagroup を使うのを止めて、専用 persist_with + datagroup を設定しました。</p>

<p>このような LookML を 40 個書きました。😱</p>

<pre class="code" data-lang="" data-unlink>datagroup: cache_corp_xxx {
  sql_trigger:  SELECT
                  STRING_AGG(CONCAT(table, &#39;_&#39;, date, &#39;_&#39;, count) ORDER BY table)
                FROM (
                  SELECT &#39;all_media&#39; AS table, MAX(date) AS date, COUNT(*) AS count FROM @{table_all_media} UNION ALL
                  SELECT &#39;UA_1&#39;, MAX(date), COUNT(*) FROM @{table_ga_xxx} UNION ALL
                  SELECT &#39;UA_2&#39;, MAX(date), COUNT(*) FROM @{table_ga_xxx2}
                ) ;;
  max_cache_age: &#34;24 hours&#34; # テーブル更新のタイミングでのみ、キャッシュを破棄する。
}

explore: corp_xxx {
  persist_with: cache_corp_xxx

  # ...
}</pre>


<p>結果的には大失敗。40 個の datagroup が 5 分に 1 回トリガーされる関係で、Looker を使わない土日でも BigQuery 料金が変わらなくなってしまいました。</p>

<p>※ 補足: 「可能な限り Explore を少なくする」が Looker のベストプラクティスなので、40 個もの Explore は本来はアンチパターンです。ですが、今回のサービスはお客様にダッシュボードを提供する上に、やむを得ず個別実装が発生することもあります。そのような経緯で結果的にこの数になっています。</p>

<h2 id="もっと足掻いてからの困惑">もっと足掻いてからの困惑</h2>

<p>それならばと、利用頻度が高い Explore だけに、専用 persist_with + datagroup を設定すれば良いのでは？と思いました。<a href="https://cloud.google.com/looker/docs/usage-reports-with-system-activity-explores">System Activity の History Explore</a> から、このようなフィールドを選択すれば利用頻度の高い Explore が分かります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20221110/20221110171713.png" width="1200" height="692" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>設定してから一週間。BigQuery 料金はあまり変わりませんでした。😇</p>

<p><a href="https://cloud.google.com/looker/docs/system-activity-dashboards#dashboard_performance_dashboard">Database Performance ダッシュボード</a>の Results from Cache<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>は 18% から 20% に向上しました。もっと高いほうが良いのか、どうなのか...。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20221110/20221110165849.png" width="390" height="388" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>System Activity の History Explore からダッシュボードを作ってもみましたが、設定変更とキャッシュヒット率の相関性は見いだせませんでした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20221110/20221110171721.png" width="1200" height="763" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>とはいえ、BigQuery 料金はそこまで増えなかったので、とりあえず続けています。</p>

<h2 id="まとめ">まとめ</h2>

<p>BigQuery 料金が増えたことをきっかけにして、Looker のキャッシュ設定を見直しました。</p>

<p>実装は整理できましたが、BigQuery 料金の変化はなく、キャッシュ難しい...という気持ちです。</p>

<h2 id="さらなるキャッシュへの理解">さらなるキャッシュへの理解</h2>

<p>中の人が翻訳して下さった記事がとても良いです。</p>

<p><a href="https://community.looker.com/%E3%82%B3%E3%83%A9%E3%83%A0-103/%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E3%83%AD%E3%82%B0%E3%81%8B%E3%82%89%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B-28549">クエリのログからキャッシュを理解する | Looker Community</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>キャッシュから返されたクエリの割合<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitとDeepLabv3を用いて物体切り抜きができるか検証したという話をした]]></title>
        <id>https://developer.feedforce.jp/entry/2022/10/11/095230</id>
        <link href="https://developer.feedforce.jp/entry/2022/10/11/095230"/>
        <updated>2022-10-11T00:52:30.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/newton800/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/newton800/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:newton800</a> です。</p>

<p>先週末に社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a>で「StreamlitとDeepLabv3を用いて物体切り抜きができるか検証した」という話をしました。</p>

<p>最近個人的に使用頻度が増加している<a href="https://streamlit.io/">Streamlit</a>というフロントエンドの知識なしに実装ができるPythonのWebフレームワークの紹介をしてみたかったというのが背景です。ただし、Streamlitに触れている部分は本当に一部だけで、ほとんどはどんな感じで試行錯誤しながら試作を作っていくのかみたいな話になってしまいました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQ6P2ZVvWxk_ZKgfgKVVQRSH1w1rZVfDojE0Khj2ZSp1Mrn9TKaz4n4-pDhHUr7s4Wg9xWbLpfJlv59/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>年に1~2度ほど回ってくるFFTTの発表のために考えたネタなので、社内で何か活用したりする機会はないですが、自分的にはなかなか気に入っている自由研究です。</p>

<p>次のFFTTではどんなネタを発表しようかな。。。</p>

<p>P.S. Feedforce Developer Blogが <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a>の記事ばかりになっているので、負けじと記事を書いていきたいです</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[自分のブログを CloudFront + Heroku から Cloud Run に移行した話をした]]></title>
        <id>https://developer.feedforce.jp/entry/2022/09/30/180000</id>
        <link href="https://developer.feedforce.jp/entry/2022/09/30/180000"/>
        <updated>2022-09-30T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>本日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『引っ越ししたら家賃が3分の1になったかも』というタイトルで、実際は Amazon CloudFront + Heroku で動いていた<a href="https://masutaka.net/">自分のブログ</a>を GCP の <a href="https://cloud.google.com/run">Cloud Run</a> に移行した話をしました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTucSlV9z4czouHd-hIOiDBwaeh1a7CMbEm2mmx5kGDTijuRKJF4ID3blnnKz1nhG6rvMfMBLyTSFMM/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="410" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>モチベーションはスライドにつらつら書きつつも、実際はこの FFTT の発表当番だったからではあります。結果的に満足行く結果にはなったので、これからコード管理などもう少し作り込んでいきます。<s>今後ネタに困ったらまた引っ越せばよいし。</s></p>

<p>Cloud Run もそうですが、<a href="https://domains.google/intl/ja_jp/">Google Domains</a> や <a href="https://cloud.google.com/monitoring">Cloud Monitoring</a> の外形監視（稼働時間チェック）など、便利でライトに使える GCP を知ることが出来たことも収穫でした。</p>

<p>それでは良い週末を！(^^)/</p>

<p><strong>2022-11-04 追記：</strong>
個人ブログにオチを書きました。
<a href="https://masutaka.net/2022-11-04-1/">Heroku から Cloud Run に移行して、料金は本当に3分の1になったのか | マスタカの ChangeLog メモ</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[OSS 版 Spectacles を使って、LookML の data tests や validation などを GitHub Actions で継続的に実行させてみた]]></title>
        <id>https://developer.feedforce.jp/entry/2022/09/16/130000</id>
        <link href="https://developer.feedforce.jp/entry/2022/09/16/130000"/>
        <updated>2022-09-16T04:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。<a href="https://twitter.com/masutaka/status/1550357627779284992">自称 Looker エバンジェリスト</a>の <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>今日は Spectacles というツールを導入して、Looker インスタンスの健全性を高められた話を紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#Spectacles-とは">Spectacles とは</a><ul>
            <li><a href="#4-種類のテスト">4 種類のテスト</a></li>
            <li><a href="#基本的な振る舞い">基本的な振る舞い</a></li>
        </ul>
    </li>
    <li><a href="#どのテストを採用しどのような課題を解決したのか">どのテストを採用し、どのような課題を解決したのか</a><ul>
            <li><a href="#SQL-validation">SQL validation</a></li>
            <li><a href="#Assert-validation">Assert validation</a></li>
            <li><a href="#Content-validation">Content validation</a></li>
            <li><a href="#LookML-validation">LookML validation</a></li>
        </ul>
    </li>
    <li><a href="#どのような-GitHub-Actions-にしたのか">どのような GitHub Actions にしたのか</a><ul>
            <li><a href="#CI-workflow">CI workflow</a></li>
            <li><a href="#Schedule-workflow">Schedule workflow</a></li>
        </ul>
    </li>
    <li><a href="#落ち穂拾い">落ち穂拾い</a><ul>
            <li><a href="#作業ブランチのゴミが残ることがある">作業ブランチのゴミが残ることがある</a></li>
            <li><a href="#マシンユーザーを作るか作らないか">マシンユーザーを作るか作らないか</a></li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="Spectacles-とは">Spectacles とは</h2>

<p>Spectacles は Looker のサードパーティ CI ツールです。継続的に各種テストを実行し、Looker インスタンスを健全に保つことが出来ます。</p>

<p><a href="https://www.spectacles.dev/">クラウド版</a>と OSS 版があり、それぞれ過去にクラスメソッドや、Zenn の記事で紹介されたことがあります。</p>

<ul>
<li><a href="https://dev.classmethod.jp/articles/spectacles-looker-validation/">SpectaclesでLooker（LookML）のテストをやってみた | DevelopersIO</a></li>
<li><a href="https://zenn.dev/skryo/articles/4f060327da2bf6">LookerのCIツールであるSpectaclesを導入した話</a></li>
</ul>


<p>今回は OSS 版を使いました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fspectacles-ci%2Fspectacles" title="GitHub - spectacles-ci/spectacles: A continuous integration tool for Looker and LookML." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://github.com/spectacles-ci/spectacles">github.com</a></cite></p>

<h3 id="4-種類のテスト">4 種類のテスト</h3>

<p>2022 年 9 月時点で 4 種類のテストが実装されています。</p>

<ul>
<li><a href="https://docs.spectacles.dev/cli/tutorials/validators#the-sql-validator">SQL validation</a>

<ul>
<li>全ての Dimension の <a href="https://cloud.google.com/looker/docs/reference/param-field-sql">sql</a> パラメーターについて、実際にクエリを実行し、その有効性を検証する</li>
<li>data warehouse のリソースを過剰に使わないよう工夫されている。例えば BigQuery の料金は発生しない<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ul>
</li>
<li><a href="https://docs.spectacles.dev/cli/tutorials/validators#the-assert-validator">Assert validation</a>

<ul>
<li>LookML IDE 上でも実行できる LookML data tests を実行する</li>
</ul>
</li>
<li><a href="https://docs.spectacles.dev/cli/tutorials/validators#the-content-validator">Content validation</a>

<ul>
<li>開発メニューの Content Validator 相当の検証を行い、エラーのある Dashboard や Look を特定する</li>
</ul>
</li>
<li><a href="https://docs.spectacles.dev/cli/tutorials/validators/#the-lookml-validator">LookML validation</a>

<ul>
<li>LookML IDE 上でも実行できる LookML validation を実行する</li>
</ul>
</li>
</ul>


<h3 id="基本的な振る舞い">基本的な振る舞い</h3>

<p>Spectacles は Looker API を使用し、指定した Looker インスタンス上で、LookML data tests や validation などを実行します。</p>

<pre class="code" data-lang="" data-unlink>Spectacles -(Looker API)-&gt; Your Looker Instance</pre>


<p>いわゆるユニットテストでは、テスト環境でソースコードを checkout し、そこでテストを実行しますが、Spectacles はその点は全く違います。</p>

<p>つまり GitHub Actions 等の CI で動かす場合、LookML コードの checkout は不要ということです。</p>

<h2 id="どのテストを採用しどのような課題を解決したのか">どのテストを採用し、どのような課題を解決したのか</h2>

<h3 id="SQL-validation">SQL validation</h3>

<p>いきなりですが、こちらは今回採用出来ませんでした。</p>

<p>我々の環境で全ての Explore をテスト対象にすると、かなりの数のテストが失敗します。<code>hidden: yes</code> な Dimension がおそらく全てです。想定内です。</p>

<pre class="code" data-lang="" data-unlink>$ spectacles sql --project my_project_name --profile -v</pre>


<p>それならばと、<code>--ignore-hidden</code> オプションを付けると、今度はこんなエラーが発生します。どうやら 1 つも Dimension が表示されない Explore があるようです。こちらも想定内です。</p>

<pre class="code" data-lang="" data-unlink>Explore object is missing dimensions, meaning this query won&#39;t have fields and will error. Often this happens because you didn&#39;t include dimensions when you built the project.</pre>


<p><code>--explore</code> オプションでエラーが発生しない Explore を指定すればよいのですが、Explore が 150 個以上ある関係で、切り分けができていません。</p>

<p>sql パラメーターは壊れていても、実際に Explore で当該 Dimension が使われないとエラーにならないのと、そのエラーが報告されるとも限らないので、いずれは再挑戦したいです。</p>

<h3 id="Assert-validation">Assert validation</h3>

<p>我々の Looker インスタンスでは、BigQuery の外部テーブルに Google スプレッドシートを指定したテーブルを数多く参照しています。つまり人間が編集するデータです。このようなデータはオペミスにより壊れることがあり、primary_key も芋づる式に壊れることがあります。</p>

<p>primary_key はほぼ全てテストを書いています<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>が、約 250 個と数が多いです。一方で LookML IDE 上での data tests は同時実行数が 1 に制限されているようで、テストに 10 分以上かかります。commit 前のテストを必須にできない状態でした。そのため、時々テストを手動実行しないと、壊れたことに気づけない課題がありました。</p>

<p>以上の課題を解決するために、定期的に LookML data tests を実行し、手動実行せずに気付けるようになりました。</p>

<h3 id="Content-validation">Content validation</h3>

<p>今までは私の注意力で Dashboard 約 140 個と Look 約 30 個のエラー数ゼロを継続できていましたが、まさに属人的でした。</p>

<p>これも定期的に実行し、Content Validator を手動実行することなく気付けるようになりました。</p>

<h3 id="LookML-validation">LookML validation</h3>

<p>時々 LookML IDE を介さず、ローカル環境で git commit してデプロイすることがあります。そのケースで大きな変更をすることはないものの、validation が通らない LookML がデプロイされる確率はゼロではありません。</p>

<p>こちらは git push のタイミングで実行することで、健全性を高めることが出来ました。</p>

<h2 id="どのような-GitHub-Actions-にしたのか">どのような GitHub Actions にしたのか</h2>

<p>git push のタイミングで実行する CI workflow と、定期的に実行する Schedule workflow を作りました。</p>

<h3 id="CI-workflow">CI workflow</h3>

<p>git push のたびに、当該 commit のブランチに対して、LookML validation のテストをしています<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">name</span><span class="synSpecial">:</span> CI

<span class="synIdentifier">on</span><span class="synSpecial">:</span>
  <span class="synIdentifier">push</span><span class="synSpecial">:</span>
    <span class="synIdentifier">branches-ignore</span><span class="synSpecial">:</span><span class="synComment"> # ①</span>
      <span class="synStatement">- </span><span class="synConstant">'dev-**'</span>           <span class="synComment"> # LookML IDE の個人用開発ブランチ</span>
      <span class="synStatement">- </span><span class="synConstant">'tmp_spectacles_**'</span><span class="synComment"> # spectacles の --commit-ref オプションが作るブランチ</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">validate_lookml</span><span class="synSpecial">:</span>
    <span class="synIdentifier">name</span><span class="synSpecial">:</span> Validate LookML files
    <span class="synIdentifier">runs-on</span><span class="synSpecial">:</span> ubuntu-latest
    <span class="synIdentifier">timeout-minutes</span><span class="synSpecial">:</span> <span class="synConstant">5</span><span class="synComment"> # デフォルトは 360 分。料金のスパイクを防ぐ</span>
    <span class="synIdentifier">concurrency</span><span class="synSpecial">:</span><span class="synComment"> # ② spectacles が複数同時に実行しないようにする</span>
      spectacles_should_be_run_in_series
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
    <span class="synStatement">- </span><span class="synIdentifier">uses</span><span class="synSpecial">:</span> actions/setup-python@v4
      <span class="synIdentifier">with</span><span class="synSpecial">:</span>
        <span class="synIdentifier">python-version</span><span class="synSpecial">:</span> <span class="synConstant">'3.x'</span>
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Install Spectacles
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> pip install spectacles
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Run LookML Validator
      <span class="synIdentifier">env</span><span class="synSpecial">:</span>
        <span class="synIdentifier">LOOKER_BASE_URL</span><span class="synSpecial">:</span> <span class="synConstant">&quot;https://my_instance_name.looker.com&quot;</span>
        <span class="synIdentifier">LOOKER_CLIENT_ID</span><span class="synSpecial">:</span> ${{ secrets.SPECTACLES_LOOKER_CLIENT_ID }}<span class="synComment"> # ③</span>
        <span class="synIdentifier">LOOKER_CLIENT_SECRET</span><span class="synSpecial">:</span> ${{ secrets.SPECTACLES_LOOKER_CLIENT_SECRET }}<span class="synComment"> # ③</span>
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> spectacles lookml --project my_project_name --commit-ref <span class="synConstant">&quot;$GITHUB_SHA&quot;</span> -v
</pre>


<p>①で特定のブランチを除外しています。特に今回のケースでは、<code>tmp_spectacles_**</code> を設定しないと <code>validate_lookml</code> ジョブが無限に起動し続けるため、絶対に必要です。</p>

<p>②も結構重要で、CI workflow と次に示す Schedule workflow から起動される spectacles プロセスの同時実行数を 1 に制限しています。</p>

<p>Spectacles は③と紐づく Looker ユーザーが実際に開発モードで <code>tmp_spectacles_**</code> というブランチを作り、切り替えます。Looker では 1 人のユーザーが同時に利用できるブランチは 1 つだけです。Spectacles の複数起動は問題が発生するため、今回の制限を設定しました。<a href="https://docs.spectacles.dev/cli/guides/how-to-deploy-spectacles/">公式ドキュメント</a>でも言及されています。</p>

<h3 id="Schedule-workflow">Schedule workflow</h3>

<p>早朝と夕方に master（デフォルト）ブランチ上で、Content validation と LookML data tests を実行しています。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">name</span><span class="synSpecial">:</span> Schedule

<span class="synIdentifier">on</span><span class="synSpecial">:</span>
  <span class="synIdentifier">schedule</span><span class="synSpecial">:</span>
    <span class="synStatement">- </span><span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;00 21 * * 0-4&quot;</span><span class="synComment"> # 平日の  6:00 JST</span>
    <span class="synStatement">- </span><span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;30  7 * * 1-5&quot;</span><span class="synComment"> # 平日の 16:30 JST</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">schedule</span><span class="synSpecial">:</span>
    <span class="synIdentifier">name</span><span class="synSpecial">:</span> Scheduled job
    <span class="synIdentifier">runs-on</span><span class="synSpecial">:</span> ubuntu-latest
    <span class="synIdentifier">timeout-minutes</span><span class="synSpecial">:</span> <span class="synConstant">30</span><span class="synComment"> # デフォルトは 360 分。料金のスパイクを防ぐ</span>
    <span class="synIdentifier">concurrency</span><span class="synSpecial">:</span><span class="synComment"> # ① spectacles が複数同時に実行しないようにする</span>
      spectacles_should_be_run_in_series
    <span class="synIdentifier">env</span><span class="synSpecial">:</span>
      <span class="synIdentifier">LOOKER_BASE_URL</span><span class="synSpecial">:</span> <span class="synConstant">&quot;https://my_instance_name.looker.com&quot;</span>
      <span class="synIdentifier">LOOKER_CLIENT_ID</span><span class="synSpecial">:</span> ${{ secrets.SPECTACLES_LOOKER_CLIENT_ID }}
      <span class="synIdentifier">LOOKER_CLIENT_SECRET</span><span class="synSpecial">:</span> ${{ secrets.SPECTACLES_LOOKER_CLIENT_SECRET }}
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
    <span class="synStatement">- </span><span class="synIdentifier">uses</span><span class="synSpecial">:</span> actions/setup-python@v4
      <span class="synIdentifier">with</span><span class="synSpecial">:</span>
        <span class="synIdentifier">python-version</span><span class="synSpecial">:</span> <span class="synConstant">'3.x'</span>
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Install Spectacles
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> pip install spectacles
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Run Content Validator
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> spectacles content --project my_project_name -v
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Run LookML data tests
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> spectacles assert --project my_project_name -v
</pre>


<p>ブランチの時や、master ブランチへのマージ直後ではまだ Dashboard や Look がエラーになることがあるため、Content validation はこのタイミングにしています。</p>

<p>LookML data tests も 10 分以上かかることと、git push の粒度でやらないと不安というわけではないため、このタイミングにしています。BigQuery の料金もかかりますからね。</p>

<h2 id="落ち穂拾い">落ち穂拾い</h2>

<h3 id="作業ブランチのゴミが残ることがある">作業ブランチのゴミが残ることがある</h3>

<p>Spectacles が途中で異常終了すると、LookML IDE と GitHub に <code>tmp_spectacles_b016c8a4dd</code> といった、Spectacles が作る作業ブランチが残ることがあります。気づいたら削除してあげましょう。</p>

<p>正常終了の場合は残りません。</p>

<h3 id="マシンユーザーを作るか作らないか">マシンユーザーを作るか作らないか</h3>

<p>Looker はユーザー課金モデルであるため、Spectacles のためにユーザーを作ることに躊躇するかもしれません。私もそうでした。おまけに Developer 相当の権限が必要なため、そこそこの料金です。</p>

<p><a href="https://docs.spectacles.dev/app/guides/how-to-create-an-api-key">Create a Looker API Key | Spectacles Docs</a></p>

<blockquote><p>We strongly recommend creating <strong>a dedicated Spectacles user in Looker</strong> to ensure a human user doesn't accidentally change the Git branch or turn off development mode in the middle of a validation.</p></blockquote>

<p>ですが、公式ドキュメントで強く奨励されているとおり、Spectacles 専用のユーザーを作って下さい。</p>

<p>人間のユーザーは権限が大きすぎますし、前述のとおり Spectacles は実際に開発モードでブランチを作って切り替えるため、人間の作業とコンフリクトします。</p>

<h2 id="まとめ">まとめ</h2>

<p>Spectacles というツールを導入して、Looker インスタンスの健全性を高められた話をしました。</p>

<p>導入したのは先月ですが、導入の翌日にタイミング良く Schedule workflow のテストが落ち、primary_key が壊れたことに気づけたことにはニッコリしました。</p>

<p>私のようなボッチ LookML 開発者は、いかに作業を機械に任せるかが重要だと思います。心の平穏も大事です。また、あとから CI を導入するのは結構大変なので、始めから開発計画に組み込むことをオススメします。</p>

<p>それでは良い Looker ライフを！(^^)/</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://docs.spectacles.dev/app/explanation/limiting-resource-consumption/">Limiting Resource Consumption | Spectacles Docs</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://developer.feedforce.jp/entry/2021/08/30/150000">Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた - Feedforce Developer Blog</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>実際には他のジョブや、失敗時の Slack 通知ジョブもありますが、分かりやすくするために省略しています。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker User Meetup Online #8 で『BigQuery経由で使うGoogleスプレッドシートのスキーマ管理』の話をした]]></title>
        <id>https://developer.feedforce.jp/entry/2022/07/21/210000</id>
        <link href="https://developer.feedforce.jp/entry/2022/07/21/210000"/>
        <updated>2022-07-21T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんばんは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>本日、<a href="https://looker-japan-user-group.connpass.com/event/253923/">Looker User Meetup Online #8</a> で『BigQuery経由で使うGoogleスプレッドシートのスキーマ管理』の話をしてきました。Looker User Meetup は 5 回目の参加、発表は初めてです。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTlQkD3R2OS415gr51ieTs1pyy3cK0ck8By1PYJ8SZtrFDjWyLP1eD_s7Q4UDH_yvmTDNdHFpZQf0IU/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="410" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>いくつかネタはあったのですが、今回のテーマは「Lookerまでのデータデリバリー、みんなどうしてる？」ということもあり、この 2 年で確立した方法を紹介することとなりました。</p>

<p>bq CLI ではなく、terraform で管理している方もいらっしゃいました。terraform の更新に追随するのはそれなりに大変だと思いますが、これならスキーマ定義と、実際のスキーマの差異検知は出来そうですね。</p>

<p>「dbt seed」を使っている方もいらっしゃるようでした。今回 2 つの発表があった dbt ですが、全く触ったことがありません。😇</p>

<p>あと、P24 で「BigQueryは一番左のシートしか参照できない」と書きましたが、誤りでした。範囲にでシート名も指定すれば出来ることを確認しました。P10 で華麗に「シート範囲」を無視してますね。💦</p>

<p><a href="https://gist.github.com/masutaka/142ca20b802401d12012fe952f2ea1f3">P18 の Gist</a> との差分は以下になります。</p>

<pre class="code lang-diff" data-lang="diff" data-unlink><span class="synType">diff --git a/define.json b/define.json</span>
<span class="synPreProc">index 9429e16..11d391c 100644</span>
<span class="synType">--- a/define.json</span>
<span class="synType">+++ b/define.json</span>
<span class="synStatement">@@ -1,7 +1,8 @@</span>
 {
   &quot;autodetect&quot;: false,
   &quot;googleSheetsOptions&quot;: {
<span class="synSpecial">-    &quot;skipLeadingRows&quot;: 1</span>
<span class="synIdentifier">+    &quot;skipLeadingRows&quot;: 1,</span>
<span class="synIdentifier">+    &quot;range&quot;: &quot;マスターデータ!A:E&quot;</span>
   },
   &quot;ignoreUnknownValues&quot;: false,
   &quot;maxBadRecords&quot;: 0,
</pre>


<p>一人開発の弊害ではありますが、こうやってアウトプットすることでこそ得られるフィードバックとも言えます。ある意味期待通りです。😄</p>

<p>次回以降も需要があれば発表したいと思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[LAMS を導入して、LookML の再利用性を高められた]]></title>
        <id>https://developer.feedforce.jp/entry/2022/06/21/130000</id>
        <link href="https://developer.feedforce.jp/entry/2022/06/21/130000"/>
        <updated>2022-06-21T04:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。<a href="https://developer.feedforce.jp/entry/2022/06/17/110000">先週</a>に引き続いてのブログ更新です。</p>

<p>Ruby や JavaScript などのプログラミング言語では、依存関係を管理することでコードの再利用性を高めるとともに、バグの少ないコードを書くことが出来ます。ただ、<a href="https://docs.looker.com/ja/data-modeling/learning-lookml/what-is-lookml">LookML</a> はプログラミング言語ではないため、同じ方法が使えません。</p>

<p>今回は LAMS という LookML Linter を導入することで、LookML の再利用性を高める糸口を見つけました。LAMS を紹介しつつ、その知見を共有します。</p>

<ul class="table-of-contents">
    <li><a href="#LAMS-とは">LAMS とは</a></li>
    <li><a href="#導入方法">導入方法</a></li>
    <li><a href="#ルールの免除">ルールの免除</a></li>
    <li><a href="#LookML-の再利用性を高められた-F1-ルール">LookML の再利用性を高められた F1 ルール</a></li>
    <li><a href="#注意事項">注意事項</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="LAMS-とは">LAMS とは</h2>

<p>LAMS (Look At Me Sideways) は LookML のスタイルガイドと Linter がセットになったツールです。準公式のツールなのかな？</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flooker-open-source%2Flook-at-me-sideways" title="GitHub - looker-open-source/look-at-me-sideways: A style guide and linter for Looker&#39;s LookML data modeling language" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/looker-open-source/look-at-me-sideways">github.com</a></cite></p>

<p>LookML IDE に付属する LookML validator が文法的な誤りを検出するのに対して、LAMS はメンテナンス性の高い、もう一歩進んだ LookML を提案します。</p>

<p>2022-06-21 現在、4 グループ、32 個のルールが定義されています。</p>

<p>🔗 <a href="https://looker-open-source.github.io/look-at-me-sideways/rules.html">LAMS Style Guide</a></p>

<ul>
<li>Key Dimensions (K1 ~ K6)</li>
<li>Other Fields (F1 ~ F6)</li>
<li>Derived Tables (T1 ~ T15)</li>
<li>Explores (E1 ~ E5)</li>
</ul>


<h2 id="導入方法">導入方法</h2>

<p>Linter を後から導入するのは辛いので、可能ならリポジトリを作るタイミングで導入するのが良いと思います。</p>

<p><a href="https://github.com/looker-open-source/look-at-me-sideways#deployment-examples">README の Deployment Examples</a> には、ローカルマシンで実行する方法や、GitHub Actions や CircleCI などで CI する方法がまとまっています。</p>

<p>今回は GitHub Actions を採用しました。git push するたびに LAMS が実行され、結果を Pull request 上で確認出来ます。参考までにコードを貼っておきます。</p>

<p><strong>.github/workflows/ci.yml</strong></p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">name</span><span class="synSpecial">:</span> CI

<span class="synIdentifier">on</span><span class="synSpecial">:</span> push

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">lams</span><span class="synSpecial">:</span>
    <span class="synIdentifier">name</span><span class="synSpecial">:</span> LAMS LookML Linter
    <span class="synIdentifier">runs-on</span><span class="synSpecial">:</span> ubuntu-latest
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
    <span class="synStatement">- </span><span class="synIdentifier">uses</span><span class="synSpecial">:</span> actions/checkout@v3
    <span class="synStatement">- </span><span class="synIdentifier">uses</span><span class="synSpecial">:</span> actions/setup-node@v3
      <span class="synIdentifier">with</span><span class="synSpecial">:</span>
        <span class="synIdentifier">node-version</span><span class="synSpecial">:</span> <span class="synConstant">'16'</span><span class="synComment"> # Use LTS https://nodejs.org/en/</span>
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Install LAMS
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> npm install -g @looker/look-at-me-sideways@2
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Run LAMS
      <span class="synIdentifier">env</span><span class="synSpecial">:</span>
        <span class="synIdentifier">LOOKER_LICENSE_KEY</span><span class="synSpecial">:</span> ${{ secrets.LOOKER_LICENSE_KEY }}
      <span class="synIdentifier">run</span><span class="synSpecial">:</span> make lams
</pre>


<p><strong>Makefile</strong> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<pre class="code makefile" data-lang="makefile" data-unlink>LAMS := lams
LOOKER_LICENSE_KEY := ${LOOKER_LICENSE_KEY}
REPORT_USER := feedmatic_report@example.com
SOURCE := **/{*.model,*.explore,*.view,*.layer,manifest}.lkml

.PHONY: lams
lams:
    @$(LAMS) --reporting=yes --report-license-key=$(LOOKER_LICENSE_KEY) --report-user=$(REPORT_USER) --source=&#39;$(SOURCE)&#39;</pre>


<h2 id="ルールの免除">ルールの免除</h2>

<p>manifest.lkml にこのように書くと、プロジェクト全体で任意のルールを免除することが出来ます。</p>

<pre class="code" data-lang="" data-unlink># LAMS
# rule_exemptions: {
#  F2: &#34;Any explanatory message you would like&#34;
#  F3: &#34;Another explanatory message for a different rule&#34;
# }</pre>


<p>dimension, measure, derived_table 単位でも免除することが出来ます。基本はこちらで免除し、無理そうなら manifest.lkml で免除すると良いでしょう。</p>

<p>初めから全てのルールをパスすることは少ないと思うので、必要に応じて免除すると良いでしょう。また、LAMS はあくまでスタイルガイドなので、必ずしも全てのルールに対応する必要はありません。</p>

<h2 id="LookML-の再利用性を高められた-F1-ルール">LookML の再利用性を高められた F1 ルール</h2>

<p>32 個のルールのうち、今回は個人的に一番意義というか、感心した <a href="https://looker-open-source.github.io/look-at-me-sideways/rules.html#f1">F1</a> ルールを紹介します。</p>

<p>例えば orders.view から users.view の <code>count</code> measure を参照する、以下のような LookML があったとします。</p>

<p>LookML 書き始めの頃はこのように書きがちかと思いますが、F1 ルールでは NG です。orders.view が users.view に依存してしまうことで、orders.view の再利用がし辛くなるからです。そもそもこのケースでは LookML validation もエラーになるはずです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<pre class="code" data-lang="" data-unlink>view: users {...}

view: orders {
  ...
  measure: orders_per_user {
    sql: ${count} / NULLIF(${users.count},0)
  }
}

explore: orders {} # Errors :(

explore: users {
  join: orders {...}
}</pre>


<p>解決方法がこちらです。まず、依存フィールドだけを抽出した users_orders.view を作ります。この view では sql_table_name や derived_table を設定しません。</p>

<pre class="code" data-lang="" data-unlink>view: users {...}
view: orders {...}

view: users_orders {
  # No need for a sql_table_name or derived_table
  measure: orders_per_user {
    sql: ${orders.count} / NULLIF(${users.count},0)
  }
}</pre>


<p>こうすることで少なくとも orders.explore は users.view に依存しないクリーンな LookML になりました。</p>

<pre class="code" data-lang="" data-unlink>explore: orders {} # Doesn&#39;t break like before!</pre>


<p>次に users.explore で魔法を使います。users.view と users_orders.view の Join で通常指定するはずの <code>sql_on ... ;;</code> の代わりに、空の SQL <code>sql: ;;</code> を指定します。</p>

<pre class="code" data-lang="" data-unlink>explore: users {
  join: orders {...}
  join: users_orders {
    sql: ;;
    # Use `sql` instead of `sql_on` and put some whitespace in it
    relationship: one_to_one
    view_label: &#34;Orders&#34; # For cleaner explore UI
  }
}</pre>


<p>え？と思うかもしれませんが、これは妥当な LookML です。</p>

<p>Users explore が生成する SQL を確認すると分かりますが、<code>orders_per_user</code> measure を選択しても Join 句は増えません。しかしこの measure が参照するテーブルは既存の users と orders だけなので、構文エラーになりません。</p>

<p>初見での理解は難しくなりますが、orders.view の再利用性が高まるのは大きなメリットです。</p>

<h2 id="注意事項">注意事項</h2>

<p><a href="https://looker-open-source.github.io/look-at-me-sideways/rules.html#k1">K1</a> と <a href="https://looker-open-source.github.io/look-at-me-sideways/rules.html#k2">K2</a> のように、一部のルールには依存関係があり、一方を免除するためには両方免除する必要があります。</p>

<p>あと、まだ <a href="https://docs.looker.com/reference/view-params/extension-for-view">Extension</a> と <a href="https://docs.looker.com/ja/data-modeling/learning-lookml/refinements">Refinements</a> に対応していません。Issue <a href="https://github.com/looker-open-source/look-at-me-sideways/issues/46">#46</a> によると、<a href="https://github.com/fabio-looker/node-lookml-parser">パーサー</a>側は対応したそうで、あとは LAMS 本体を対応するだけだそうです。割と致命的な課題...。</p>

<h2 id="まとめ">まとめ</h2>

<p>LookML の Linter である LAMS を紹介しました。うまく使うことで、再利用性やメンテナンス性の高い LookML を書くことが出来るかもしれません。</p>

<p>それでは良い Looker ライフを！(^^)/</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Makefile を作ったのは、ローカルで実行しやすくするためです。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://help.looker.com/hc/en-us/articles/360023586293-Error-Unknown-or-Inaccessible-Field">F1 ルールに従わずにエラーを回避する方法はあります。</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker で困った時の解決手段まとめ]]></title>
        <id>https://developer.feedforce.jp/entry/2022/06/17/110000</id>
        <link href="https://developer.feedforce.jp/entry/2022/06/17/110000"/>
        <updated>2022-06-17T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>今回は少し前に社内に共有した記事を、このブログでも共有します。Looker は Ruby や Python 等のプログラミング言語よりはユーザーが少ないはずで、質問相手がいないと本当に困ります。この記事がその一助になれば幸いです。</p>

<ul class="table-of-contents">
    <li><a href="#ググる">ググる</a></li>
    <li><a href="#チャット">チャット</a></li>
    <li><a href="#問い合わせフォーム">問い合わせフォーム</a></li>
    <li><a href="#Looker-Community-en">Looker Community (en)</a></li>
    <li><a href="#Looker-Community-ja">Looker Community (ja)</a></li>
    <li><a href="#Slack-Looker-User-Group---Japan">Slack Looker User Group - Japan</a></li>
    <li><a href="#番外編-製品についてのアイディアがありますか">番外編: 製品についてのアイディアがありますか？</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="ググる">ググる</h2>

<p>さすがにこれは基本ですね。💦</p>

<p><a href="https://docs.looker.com/ja">公式ドキュメント</a> に誘導されることもしばしばです。これが結構よく出来ています。<code>looker table calculation</code> などと英語でググると、解決にたどり着きやすいかもしれません。</p>

<p>マニアックなテクニックとして、ググった URL の後ろに <code>&amp;gl=us&amp;hl=en&amp;gws_rd=cr</code> を付け、検索対象を英語にして、日本語のノイズを減らす方法もあります。</p>

<p><a href="https://www.google.com/search?q=looker+table+calculation&oq=looker+table+calculation&aqs=chrome..69i57.26j0j7&sourceid=chrome&ie=UTF-8">https://www.google.com/search?q=looker+table+calculation&oq=looker+table+calculation&aqs=chrome..69i57.26j0j7&sourceid=chrome&ie=UTF-8</a></p>

<p>↓</p>

<p><a href="https://www.google.com/search?q=looker+table+calculation&oq=looker+table+calculation&aqs=chrome..69i57.26j0j7&sourceid=chrome&ie=UTF-8&gl=us&hl=en&gws_rd=cr">https://www.google.com/search?q=looker+table+calculation&oq=looker+table+calculation&aqs=chrome..69i57.26j0j7&sourceid=chrome&ie=UTF-8&gl=us&hl=en&gws_rd=cr</a></p>

<p>私はこんなブックマークレットを使っています。ちなみに名前は <code>en</code> です。</p>

<pre class="code" data-lang="" data-unlink>javascript:location.href=location.href+&#39;&amp;gl=us&amp;hl=en&amp;gws_rd=cr&#39;</pre>


<h2 id="チャット">チャット</h2>

<p>Admin 権限を持ったユーザーだけが使用できます。</p>

<p>日本語可ですが、日々混んでいるので急ぎでなければ次の「問い合わせフォーム」が良いと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616165108.png" width="313" height="400" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="問い合わせフォーム">問い合わせフォーム</h2>

<p><a href="https://help.looker.com/hc/en-us/requests">https://help.looker.com/hc/en-us/requests</a> から <code>Create a New Request</code> をクリックします。Looker ユーザーなら誰でも利用可能なのかな？日本語可です。</p>

<p>このフォームは割と最近知ったのですが、問い合わせてみたら翌日返信が来て、速やかに解決できました。急がない時はチャットより良いと思います。サポートの方も時間に追われなくて良さそうです。</p>

<p>今までのチャット履歴もここで確認出来ます。これは知らなかった。</p>

<h2 id="Looker-Community-en">Looker Community (en)</h2>

<p>誰でも利用可能です。日本語不可。頻繁に投稿があります。</p>

<p><a href="https://community.looker.com/">https://community.looker.com/</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616173918.png" width="1200" height="489" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="Looker-Community-ja">Looker Community (ja)</h2>

<p>誰でも利用可能な日本語コミュニティです。稀に投稿があります。</p>

<p><a href="https://community.looker.com/%E3%83%98%E3%83%AB%E3%83%97%E3%81%A8%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88-101">コミュニティフォーラム (Japanese) > ヘルプとサポート</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616174114.png" width="1200" height="458" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>⚠️ <a href="https://community.looker.com/%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0-japanese-161">コミュニティフォーラム (Japanese) のトップ</a> で <code>Ask question / Create topic</code> ボタンをクリックすると en のほうにトピックが作られてしまいます。注意です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616174411.png" width="1116" height="774" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>このフォームが正解です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616174446.png" width="1200" height="690" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="Slack-Looker-User-Group---Japan">Slack Looker User Group - Japan</h2>

<p>日本語の Slack コミュニティもあります。<a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E4%BC%9Aslack%E3%81%AE%E3%81%94%E6%A1%88%E5%86%85-28903">今年の初め (2022-01-14) に作られました</a>。</p>

<p><a href="https://join.slack.com/t/lookerusergroup-japan/shared_invite/zt-1auagto9i-cT2lV~cejC7MgxMrzvveow">この招待リンク</a>から参加出来ます。</p>

<h2 id="番外編-製品についてのアイディアがありますか">番外編: 製品についてのアイディアがありますか？</h2>

<p>新しい機能のアイディアを POST 出来る場所です。Admin 権限を持ったユーザーだけが使用できます。日本語不可です。</p>

<p>不具合も報告されることがあり、たまに 前述の「問い合わせフォーム」に誘導されています。それで知りました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20220616/20220616175411.png" width="391" height="500" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="まとめ">まとめ</h2>

<p>私が知る限りの「Looker で困った時の解決手段」をまとめました。</p>

<p>以前紹介した情報収集も日々継続すれば、Looker のスキルはかなり高まる実感があります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F08%2F16%2F150000" title="私が１年かけて辿り着いた Looker の情報収集方法を紹介する - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>それでは良い Looker ライフを！(^^)/</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[LookML Validation を 20 秒から 11 秒に高速化出来た]]></title>
        <id>https://developer.feedforce.jp/entry/2022/05/30/110000</id>
        <link href="https://developer.feedforce.jp/entry/2022/05/30/110000"/>
        <updated>2022-05-30T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p><a href="https://www.looker.com/">Looker</a> を使い始めて 3 年目に突入しました。変わらず <a href="https://feedmatic.net/">Feedmatic</a> という広告運用コンサルティングのデータ整備をする毎日です。</p>

<p>今回はここ 1 年の懸案だった LookML Validation の堪え難い遅さを改善出来たので、共有します。</p>

<ul class="table-of-contents">
    <li><a href="#2-年間でコード量が肥大化した">2 年間でコード量が肥大化した</a></li>
    <li><a href="#LookML-Validation-が堪え難いほど遅くなった">LookML Validation が堪え難いほど遅くなった</a></li>
    <li><a href="#My-LookML-Validator-is-slow">My LookML Validator is slow!</a><ul>
            <li><a href="#TLDR">TL;DR</a></li>
            <li><a href="#Quick-wins">Quick wins</a></li>
            <li><a href="#Long-answer">Long answer</a></li>
            <li><a href="#Bonus-note">Bonus note</a></li>
        </ul>
    </li>
    <li><a href="#include-を最適化したら半分弱の時間になった">include を最適化したら半分弱の時間になった</a></li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#余談">余談</a></li>
    <li><a href="#追記-LAMS-を使って-wildcard-include-を禁止する">追記: LAMS を使って wildcard include を禁止する</a></li>
</ul>

<h2 id="2-年間でコード量が肥大化した">2 年間でコード量が肥大化した</h2>

<p>2 年前と比べて Feedmatic プロジェクトの <code>.lkml</code> ファイルがものすごく増え、440 個、23,217 行<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>にもなりました。Explore は 62 個、<a href="/entry/2021/08/30/150000">テスト用</a>も含めると 150 個もあります。相変わらず<a href="/entry/2022/02/04/180000">ボッチ LookML 開発者</a>ではあるのですが。💦</p>

<p>さて、<a href="/entry/2020/10/23/190000">Looker の JumpStart</a> で教えて頂いた「モデル編成のベストプラクティス」のうちの 1 つにこちらがありました。</p>

<blockquote><p>ユーザーが必要とする答えに簡単にアクセスできる、可能な限り少ない数の explore を使用する。</p></blockquote>

<p>しかし、広告運用の文脈だと、クライアントごとに独自実装が必要なケースが多く、このコード量になってしまいました。💦</p>

<h2 id="LookML-Validation-が堪え難いほど遅くなった">LookML Validation が堪え難いほど遅くなった</h2>

<p>そんな LookML 開発に使用する Looker IDE には LookML Validator が付属しており、git commit 前に強制する設定をしています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.looker.com%2Fja%2Fdata-modeling%2Fgetting-started%2Flookml-validation%23validating_your_lookml" title="Editing and validating LookML" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.looker.com/ja/data-modeling/getting-started/lookml-validation#validating_your_lookml">docs.looker.com</a></cite></p>

<p>以前は一瞬で完了していましたが、最近は 20 秒以上かかります。ちょっとコメントを書き換えただけでこれだけ待たされるのは、なかなかの苦行です。</p>

<p>試作した別プロジェクト（41 ファイル、1999 行）はそんなにかからないため、単純にコード量に比例していると思いました。</p>

<p>念のため Looker のサポートに質問したところ、やはりコード量（プロジェクトのサイズ）が影響しているそう。そして Looker インスタンスの CPU やメモリ使用量に問題はないとのこと。</p>

<p>さらに、こちらの記事を紹介して頂きました。🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Ftechnical-tips-tricks-1021%2Fmy-lookml-validator-is-slow-23592" title="My LookML Validator is slow! | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://community.looker.com/technical-tips-tricks-1021/my-lookml-validator-is-slow-23592">community.looker.com</a></cite></p>

<h2 id="My-LookML-Validator-is-slow">My LookML Validator is slow!</h2>

<p>長い記事ではないので、ざっと翻訳します。</p>

<h3 id="TLDR">TL;DR</h3>

<p>プロジェクトが大きければ大きいほど、検証には時間がかかります。</p>

<h3 id="Quick-wins">Quick wins</h3>

<ol>
<li>戦略的に "includes" する

<ol>
<li>常に他のすべてのビューをインクルードすることは開発上簡単かもしれないが、命名規則を使って必要なファイルだけを戦略的にインクルードすることで、パフォーマンスを向上させることができる</li>
</ol>
</li>
<li>使用しない explore（および join、field など）をコメントアウトまたは削除する</li>
<li>プロジェクトを複数のプロジェクトに分割することを検討する</li>
</ol>


<p>LookML のベストプラクティスについては、<a href="https://community.looker.com/lookml-5/lookml-best-practices-1636">こちらの記事</a>をご覧ください。</p>

<h3 id="Long-answer">Long answer</h3>

<p>LookML のプロジェクトサイズ（総行数）と不要な <code>include</code> の両方が LookML Validator の性能に影響を及ぼします。</p>

<p>Validation は 2 段階のプロセスで行われます。</p>

<p>1) 1 回目の検証では、プロジェクト内のすべてのファイルを読み込み、どこにも参照されていないファイルも含めて、メモリに読み込み、ソースコードを 1 モデルずつ完全に翻訳して、「コンパイル」エラーを探します。</p>

<p>2) 2 回目の検証は、各モデルで開始し、そのモデルから参照されるファイルのみを解析します。そして、そのモデルに基づいてクエリーを構築し、クエリーエラーや「実行時」エラーを探します。また、これらのパスは、すべての検証で行われることも重要です。</p>

<p>結論として、1 回目の検証は LookML プロジェクトのサイズに、2 回目の検証は不要な <code>include</code> 文に影響されます。したがって、LookML プロジェクトのサイズを適切に保つと同時に、より選択的かつ戦略的な <code>include</code> を推奨するのが良いでしょう。</p>

<h3 id="Bonus-note">Bonus note</h3>

<p>Explore ごとのフィールド数は、検証時間という点で非常に重要です。これはしばしばモデルのパースよりも時間がかかります。</p>

<h2 id="include-を最適化したら半分弱の時間になった">include を最適化したら半分弱の時間になった</h2>

<p>今回は「戦略的に "includes" する」をやってみました。</p>

<p>具体的には 56 個の <code>.explore.lkml</code> ファイルを以下のように変更しました。ワイルドカード付きの <code>include</code> を出来るだけ減らしました。</p>

<pre class="code" data-lang="" data-unlink># 変更前
include: &#34;/views/**/*.view&#34;

↓

# 変更後
include: &#34;/views/view1.view&#34;
include: &#34;/views/view2.view&#34;
include: &#34;/views/view3.view&#34;
include: &#34;/views/view4.view&#34;
include: &#34;/views/view5.view&#34;</pre>


<p>結果がこちら。たったこれだけで、20 秒かかっていた LookML validation が 12 秒弱にまで縮まりました。期待以上です！👏😂🎉</p>

<table>
<thead>
<tr>
<th style="text-align:right;"> </th>
<th style="text-align:right;"> 変更前（秒） </th>
<th style="text-align:right;"> 変更後（秒） </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;"> 1 </td>
<td style="text-align:right;"> 20.46 </td>
<td style="text-align:right;"> 12.39 </td>
</tr>
<tr>
<td style="text-align:right;"> 2 </td>
<td style="text-align:right;"> 20.44 </td>
<td style="text-align:right;"> 11.89 </td>
</tr>
<tr>
<td style="text-align:right;"> 3 </td>
<td style="text-align:right;"> 20.05 </td>
<td style="text-align:right;"> 11.69 </td>
</tr>
<tr>
<td style="text-align:right;"> 3 </td>
<td style="text-align:right;"> 20.61 </td>
<td style="text-align:right;"> 11.65 </td>
</tr>
<tr>
<td style="text-align:right;"> 5 </td>
<td style="text-align:right;"> 20.48 </td>
<td style="text-align:right;"> 11.95 </td>
</tr>
<tr>
<td style="text-align:right;"> 平均 </td>
<td style="text-align:right;"> 20.41 </td>
<td style="text-align:right;"> 11.91 </td>
</tr>
</tbody>
</table>


<p>ついでに、事情があって隠している Explore 10 個<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>の削除を確認してみたら、さらに速くなり、9 秒程度まで縮まりました。なるほど。</p>

<h2 id="まとめ">まとめ</h2>

<p>ここ 1 年の懸案だった LookML Validation のパフォーマンスを改善しました。</p>

<p>include を最適化するだけで、ここまで速くなるとは驚きでした。おまけに LookML Validation のプロセスも理解することもできました。</p>

<p>💭 コンパイラ側で良しなにするのは難しいのかな、<a href="https://github.com/looker-open-source/look-at-me-sideways">LAMS</a> で警告してくれれば良いのかな。</p>

<p>引き続き、LookML 開発を妨げる課題があれば、解決していきます。💪</p>

<h2 id="余談">余談</h2>

<p><code>Validate LookML</code> をクリックすると、すぐ <code>Validate LookML</code> に戻ることがあるのですが、なんででしょう...？ファイル保存直後だとほぼ発生します。</p>

<p><img src="https://user-images.githubusercontent.com/170014/170627597-55819ca6-7394-4900-9e33-9ed0c1ce2492.gif" alt="looker" /></p>

<p>Validation が終わる時間くらいまで待つと 2 回クリックしなくて良いみたいです。🙄</p>

<p><img src="https://user-images.githubusercontent.com/170014/170627672-f1bf212b-ab73-48f3-9feb-4e8f751984b6.gif" alt="looker2" /></p>

<h2 id="追記-LAMS-を使って-wildcard-include-を禁止する">追記: LAMS を使って wildcard include を禁止する</h2>

<p>LookML の Linter として LAMS というものがあります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2022%2F06%2F21%2F130000" title="LAMS を導入して、LookML の再利用性を高められた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2022/06/21/130000">developer.feedforce.jp</a></cite></p>

<p>このカスタムルールを定義することで、今回のようなワイルドカード付きの <code>include</code> を禁止することが出来ます。</p>

<p>manifest.lkml にこのように書くだけです。</p>

<pre class="code" data-lang="" data-unlink># LAMS
# rule: NO_WINC {
#  description: &#34;Prohibit wildcard include to avoid increasing LookML verification time&#34;
#  match: &#34;$.files.*.include.*&#34;
#  expr_rule: ($let file_path ($get ::project files ::path:2 $file_path))
#             ($if ($match &#34;\\*&#34; ::match)
#                 ($concat &#34;Found wildcard include &#39;&#34; ::match &#34;&#39; in &#34; ::file_path &#34;&#34;)
#               true) ;;
# }</pre>


<p><a href="https://looker-open-source.github.io/look-at-me-sideways/customizing-lams">Customizing LAMS</a> にさらりと書いてありますが、指摘されたファイル名を出す方法が分からなかったので、Issue <a href="https://github.com/looker-open-source/look-at-me-sideways/issues/95">#95</a> で質問したら分かりました。これは分からない。💦</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>コメントと空行を除く<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><code>.explore.lkml</code> 10 個、<code>.view.lkml</code> 10 個、<code>.layer.lkml</code> 31 個<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[画像上の文字を自動削除する仕組みを作ってみた]]></title>
        <id>https://developer.feedforce.jp/entry/2022/05/09/114054</id>
        <link href="https://developer.feedforce.jp/entry/2022/05/09/114054"/>
        <updated>2022-05-09T02:40:54.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　 データサイエンティストの八百俊哉です。</p>

<p><strong>今回は画像上に存在する文字を自動的に削除し、背景を補完する仕組みを作成しました。</strong>ただ、弊社のプロダクトに実装される可能性が極めて低いので、自由研究の結果としてここに残そうと思います。</p>

<p>弊社のサービスはインターネット広告と深く関わりがあり、インターネット広告に関する分析を実施することが多いです。今回はインターネット広告の画像に関する調査を実施したので、その結果を共有します。</p>

<h1>背景</h1>

<p>インターネット広告では、商品画像上にプロモーションのロゴや行動を促すフレーズが入っている場合、不承認とされ広告表示されなくなる可能性があります。</p>

<p><figure class="figure-image figure-image-fotolife" title="プロモーションが入った商品画像の例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220330/20220330091344.png" width="496" height="426" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>プロモーションが入った商品画像の例</figcaption></figure></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsupport.ecbooster.jp%2Fja%2Farticles%2F4666716-google-merchant-center%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25AC%25E3%2582%25A4%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E7%2594%25BB%25E5%2583%258F%25E4%25B8%258D%25E6%2589%25BF%25E8%25AA%258D%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D" title="Google Merchant Centerでオーバーレイによる画像不承認に対応したいとき" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://support.ecbooster.jp/ja/articles/4666716-google-merchant-center%E3%81%A7%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4%E3%81%AB%E3%82%88%E3%82%8B%E7%94%BB%E5%83%8F%E4%B8%8D%E6%89%BF%E8%AA%8D%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D">support.ecbooster.jp</a></cite></p>

<p>商品数が少ない場合や再度商品の写真を用意できる場合は、商品画像の差し替えが可能ですが、そうではない場合はプロモーションが入っていない画像をいちから用意するのは非常に困難です。</p>

<p>一部画像においては、<a href="https://support.google.com/merchants/answer/9242973">Googleが公開している画像の自動改善</a>を用いることで、プロモーションを削除することができますが、例には背景が白のもののみになっています。一方で商品画像は何らかの背景（机の上・壁紙）が写真に写り込んでいることが多く、白い背景以外にも対応したプロモーション削除方法が必要です。</p>

<p>そこで今回は背景ありのプロモーションが掲載されている商品画像から自動的にプロモーションを削除する機能が必要ではないかと考え検証を行いました。</p>

<h1>全体の流れ</h1>

<p>サンプルとして以下の画像を用意しました。（自作なのでクオリティは低いです）</p>

<p><figure class="figure-image figure-image-fotolife" title="サンプル画像"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220330/20220330092012.png" width="551" height="551" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>サンプル画像</figcaption></figure></p>

<p>今回はこのサンプル画像にある送料無料という文字を消すことを目的にしたいと思います。</p>

<p>以下に示すフローで文字を消し、背景を補完します。</p>

<p><figure class="figure-image figure-image-fotolife" title="全体のフロー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220330/20220330100726.png" width="742" height="306" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>全体のフロー</figcaption></figure></p>

<p>最終的には以下のような文字除去ができました。
<figure class="figure-image figure-image-fotolife" title="実行することで文字除去に成功した例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220509/20220509105601.png" width="1200" height="568" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>実行することで文字除去に成功した例</figcaption></figure></p>

<p>では実際にどのように文字を除去したのかを紹介します。</p>

<h1>画像上のどこに文字があるか判定する・文字の部分だけ黒い画像を用意</h1>

<p>まずはじめに画像の上のどこに文字があるかを判定します。今回はOCRを用いて文字を見つけていきます。</p>

<blockquote><p>OCR（Optical Character Recognition/Reader、オーシーアール、光学的文字認識）とは、手書きや印刷された文字を、イメージスキャナやデジタルカメラによって読みとり、コンピュータが利用できるデジタルの文字コードに変換する技術です。
<cite><a href="https://mediadrive.jp/technology/ocr">https://mediadrive.jp/technology/ocr</a></cite></p></blockquote>

<p>まずpythonでOCRを使用するために必要なライブリラリをインストールします。（今回はColabを用いた実行を想定しています。）</p>

<pre class="code" data-lang="" data-unlink>!pip install --upgrade opencv-contrib-python
!apt install tesseract-ocr libtesseract-dev tesseract-ocr-jpn
!pip install pyocr</pre>


<p>以下がOCRを用いて、文字を検知する関数になります。</p>

<pre class="code lang-python" data-lang="python" data-unlink>tools = pyocr.get_available_tools()
tool = tools[<span class="synConstant">0</span>]

<span class="synStatement">def</span> <span class="synIdentifier">get_box</span>(img, tool, show=<span class="synIdentifier">True</span>):
    <span class="synConstant">&quot;&quot;&quot;</span>
<span class="synConstant">    img:PIL.Image.Image</span>
<span class="synConstant">    &quot;&quot;&quot;</span>

    results = tool.image_to_string(
        img,
        lang=<span class="synConstant">'jpn'</span>,
        builder=pyocr.builders.LineBoxBuilder(tesseract_layout=<span class="synConstant">6</span>)
    )

    img_np = np.array(img)

    w, h = img_np.shape[<span class="synConstant">0</span>], img_np.shape[<span class="synConstant">1</span>]

    <span class="synStatement">for</span> box <span class="synStatement">in</span> results:
        <span class="synStatement">if</span> box.content == <span class="synConstant">' '</span> <span class="synStatement">or</span> box.content == <span class="synConstant">''</span>:
            <span class="synStatement">continue</span>
        <span class="synStatement">if</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">0</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">1</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">0</span>] == w) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">1</span>] == h):
            <span class="synStatement">continue</span>
        cv2.rectangle(img_np, box.position[<span class="synConstant">0</span>], box.position[<span class="synConstant">1</span>], (<span class="synConstant">0</span>, <span class="synConstant">255</span>, <span class="synConstant">0</span>), <span class="synConstant">1</span>)
    <span class="synStatement">if</span> show:
        display(Image.fromarray(img_np))
    <span class="synStatement">return</span> img_np, results
</pre>


<p>しかし、ただ画像を上記の関数に渡すだけでは文字を認識できる精度が低いという課題がありました。そこで以下のようにすることで文字認識の精度向上を行いました。</p>

<ol>
<li>画像を拡大する</li>
<li>拡大した画像を5×5に分割する</li>
<li>分割後の画像をそれぞれOCRにかける</li>
<li>分割前の拡大した画像をOCRにかける</li>
<li>3,4で文字と判定され部分（OR）を文字がある場所とする</li>
</ol>


<p>図で示すと以下のようになっています。</p>

<p><figure class="figure-image figure-image-fotolife" title="文字検知の精度向上のための取り組み"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220405/20220405122649.png" width="932" height="403" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>文字検知の精度向上のための取り組み</figcaption></figure></p>

<p>実際には以下のようにして求めます。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">split_images</span>(img, h_split, w_split):
    <span class="synConstant">&quot;&quot;&quot;</span>
<span class="synConstant">    画像を分割し、分割後の画像と元画像における座標を返す</span>
<span class="synConstant">    img:numpy</span>
<span class="synConstant">    &quot;&quot;&quot;</span>

    h,w = img.shape[<span class="synConstant">0</span>],img.shape[<span class="synConstant">1</span>]
    images = []

    new_h = <span class="synIdentifier">int</span>(h / h_split)
    new_w = <span class="synIdentifier">int</span>(w / w_split)

    start_coordinates = []

    <span class="synStatement">for</span> _h <span class="synStatement">in</span> <span class="synIdentifier">range</span>(h_split):
        h_start = _h * new_h
        h_end = h_start + new_h

        <span class="synStatement">for</span> _w <span class="synStatement">in</span> <span class="synIdentifier">range</span>(w_split):
            w_start = _w * new_w
            w_end = w_start + new_w
            images.append(img[h_start:h_end, w_start:w_end, :])

            coordinate = {}
            coordinate[<span class="synConstant">'h_start'</span>] = h_start
            coordinate[<span class="synConstant">'h_end'</span>] = h_end
            coordinate[<span class="synConstant">'w_start'</span>] = w_start
            coordinate[<span class="synConstant">'w_end'</span>] = w_end

            start_coordinates.append(coordinate)
    
    <span class="synStatement">return</span> images, start_coordinates

<span class="synStatement">def</span> <span class="synIdentifier">get_splitImages2originalPositins</span>(images, img_resize, start_coordinates, show=<span class="synIdentifier">True</span>):
    <span class="synConstant">&quot;&quot;&quot;</span>
<span class="synConstant">    分割後の画像それぞれのどこに文字があるかどうかを識別する</span>
<span class="synConstant">    また、それらの結果を元の座標系に戻してpositionsとして返す</span>
<span class="synConstant">    images:list</span>
<span class="synConstant">    img_resize:numpy</span>
<span class="synConstant">    start_coordinates:list</span>
<span class="synConstant">    &quot;&quot;&quot;</span>
    positions = []
    <span class="synStatement">for</span> i, (img, coordinate)  <span class="synStatement">in</span> <span class="synIdentifier">enumerate</span>(<span class="synIdentifier">zip</span>(images, start_coordinates)):

        bb,results = get_box(Image.fromarray(img), tool, show=<span class="synIdentifier">False</span>)
        w,h = img.shape[<span class="synConstant">0</span>],img.shape[<span class="synConstant">1</span>]

        <span class="synStatement">for</span> box <span class="synStatement">in</span> results:
            <span class="synStatement">if</span> box.content == <span class="synConstant">' '</span> <span class="synStatement">or</span> box.content == <span class="synConstant">''</span>:
                <span class="synStatement">continue</span>
            <span class="synStatement">if</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">0</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">1</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">0</span>] == w) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">1</span>] == h):
                <span class="synStatement">continue</span>
            
            position = [[p[<span class="synConstant">0</span>],p[<span class="synConstant">1</span>]] <span class="synStatement">for</span> p <span class="synStatement">in</span> box.position]
            position[<span class="synConstant">0</span>][<span class="synConstant">0</span>] += coordinate[<span class="synConstant">'w_start'</span>]
            position[<span class="synConstant">0</span>][<span class="synConstant">1</span>] += coordinate[<span class="synConstant">'h_start'</span>]
            position[<span class="synConstant">1</span>][<span class="synConstant">0</span>] += coordinate[<span class="synConstant">'w_start'</span>]
            position[<span class="synConstant">1</span>][<span class="synConstant">1</span>] += coordinate[<span class="synConstant">'h_start'</span>]
            cv2.rectangle(img_resize, position[<span class="synConstant">0</span>], position[<span class="synConstant">1</span>], (<span class="synConstant">0</span>, <span class="synConstant">255</span>, <span class="synConstant">0</span>), <span class="synConstant">1</span>)
            positions.append(position)
    <span class="synStatement">if</span> show:
        display(Image.fromarray(img_resize))
    <span class="synStatement">return</span> positions

<span class="synStatement">def</span> <span class="synIdentifier">get_mask</span>(img, positions):
    mask = np.zeros_like(img)
    <span class="synStatement">for</span> p <span class="synStatement">in</span> positions:
        cv2.rectangle(mask, p[<span class="synConstant">0</span>], p[<span class="synConstant">1</span>], (<span class="synConstant">255</span>, <span class="synConstant">255</span>, <span class="synConstant">255</span>), thickness=-<span class="synConstant">1</span>)
    <span class="synStatement">return</span> mask

<span class="synStatement">def</span> <span class="synIdentifier">results2positions</span>(results):
    positions = []
    <span class="synStatement">for</span> box <span class="synStatement">in</span> results:
        <span class="synStatement">if</span> box.content == <span class="synConstant">' '</span> <span class="synStatement">or</span> box.content == <span class="synConstant">''</span>:
            <span class="synStatement">continue</span>
        <span class="synStatement">if</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">0</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">0</span>][<span class="synConstant">1</span>] == <span class="synConstant">0</span>) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">0</span>] == w) <span class="synStatement">and</span> (box.position[<span class="synConstant">1</span>][<span class="synConstant">1</span>] == h):
            <span class="synStatement">continue</span>
        positions.append([box.position[<span class="synConstant">0</span>], box.position[<span class="synConstant">1</span>]])
    <span class="synStatement">return</span> positions

<span class="synComment"># 画像の拡大</span>
img_resize = cv2.resize(img_np, (<span class="synIdentifier">int</span>(img_np.shape[<span class="synConstant">0</span>] * <span class="synConstant">4</span>), <span class="synIdentifier">int</span>(img_np.shape[<span class="synConstant">1</span>] * <span class="synConstant">4</span>)), interpolation=cv2.INTER_CUBIC)

<span class="synComment"># 画像を分割する</span>
images, start_coordinates = split_images(np.array(img_resize), <span class="synConstant">5</span>, <span class="synConstant">5</span>)
<span class="synComment"># 分割画像のそれぞれをOCRに入れ、どこに文字が有るか判定する</span>
<span class="synComment"># また、このときに返ってくるpositionsには、分割前の座標系でどこに文字があったのかが示されている</span>
positions = get_splitImages2originalPositins(images, img_resize, start_coordinates, show=<span class="synIdentifier">False</span>)
<span class="synComment"># 分割画像から特定された文字の位置がマスクになるようにする</span>
mask_resize = get_mask(img_resize, positions)
<span class="synComment"># 元の画像サイズに戻す</span>
mask_resize = cv2.resize(mask_resize, (img_np.shape[<span class="synConstant">0</span>],img_np.shape[<span class="synConstant">1</span>]))

<span class="synComment"># リサイズ画像を分割せずに、どこに文字が有るかを求める</span>
img_np, results = get_box(img1, tool, show=<span class="synIdentifier">False</span>)
positions = results2positions(results)
<span class="synComment"># リサイズ画像から特定された文字の位置がマスクになるようにする</span>
original_mask = get_mask(img_np, positions)

<span class="synComment"># mask_resize（分割画像）とoriginal_mask（リサイズ画像）のORを求める</span>
bitwise_or = cv2.bitwise_or(original_mask[:,:,<span class="synConstant">0</span>], mask_resize[:,:,<span class="synConstant">0</span>])
</pre>


<p>上記を実行することで、画像上に文字があるとされた部分の画素だけが255のマスク画像がbitwise_orに入っていることになります。</p>

<h1>画像上の黒い部分を周りの情報から補完</h1>

<p>次に先程作成したマスク画像と元画像を用いることで、文字の部分を周りの状況から補完していきます。</p>

<p><strong>今回はOpneCVのInpaintingを用いて、文字の除去を行っていきます。</strong>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Flabs.eecs.tottori-u.ac.jp%2Fsd%2FMember%2Foyamada%2FOpenCV%2Fhtml%2Fpy_tutorials%2Fpy_photo%2Fpy_inpainting%2Fpy_inpainting.html" title="画像のInpainting — OpenCV-Python Tutorials 1 documentation" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://labs.eecs.tottori-u.ac.jp/sd/Member/oyamada/OpenCV/html/py_tutorials/py_photo/py_inpainting/py_inpainting.html">labs.eecs.tottori-u.ac.jp</a></cite></p>

<p>実際に以下のようにして複数のパラメータでInpaintingを実行し、結果を確認できるようにしました。(参考：<a href="https://data-analysis-stats.jp/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/opencv%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%AEinpainting%E3%81%AE%E8%A7%A3%E8%AA%AC/">OpenCVで画像のInpaintingの解説</a>)</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">get_inpainting</span>(img, mask):
    img = np.array(img)
    mask = np.array(mask)

    <span class="synStatement">if</span> mask.ndim == <span class="synConstant">3</span>:
        mask = mask[:,:,<span class="synConstant">0</span>]
    
    dst11 = cv2.inpaint(img, mask , <span class="synConstant">0</span>, cv2.INPAINT_TELEA)
    dst12 = cv2.inpaint(img, mask , <span class="synConstant">3</span>, cv2.INPAINT_TELEA)
    dst13 = cv2.inpaint(img, mask , <span class="synConstant">10</span>, cv2.INPAINT_TELEA)
    dst21 = cv2.inpaint(img, mask , <span class="synConstant">0</span>, cv2.INPAINT_NS)
    dst22 = cv2.inpaint(img, mask , <span class="synConstant">3</span>, cv2.INPAINT_NS)
    dst23 = cv2.inpaint(img, mask , <span class="synConstant">10</span>, cv2.INPAINT_NS)

    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_TELEA, radius=0) : dst11&quot;</span>)
    display(Image.fromarray(dst11))
    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_TELEA, radius=3) : dst12&quot;</span>)
    display(Image.fromarray(dst11))
    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_TELEA, radius=10) : dst13&quot;</span>)
    display(Image.fromarray(dst11))

    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_NS, radius=0) : dst21&quot;</span>)
    display(Image.fromarray(dst21))
    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_NS, radius=3) : dst22&quot;</span>)
    display(Image.fromarray(dst22))
    <span class="synIdentifier">print</span>(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">Output (INPAINT_NS, radius=10) : dst23&quot;</span>)
    display(Image.fromarray(dst23))

    <span class="synStatement">return</span> dst11,dst12,dst13,dst21,dst22,dst23

dst11,dst12,dst13,dst21,dst22,dst23 = get_inpainting(img_np, bitwise_or)
</pre>


<p>こちらを実行すると以下の出力が得られます。</p>

<p><figure class="figure-image figure-image-fotolife" title="結果の出力例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220509/20220509103312.png" width="855" height="1200" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>結果の出力例</figcaption></figure></p>

<p>出力画像を確認するとしっかりと文字が消えており、文字があった部分は背景色と同じ色が補完されていることがわかります。</p>

<h1>まとめ</h1>

<p>今回は画像上に存在する文字を自動的に削除し、背景を補完する仕組みの紹介を行いました。</p>

<p>はじめに画像上の文字を検知し、その検知結果をもとにマスク画像を作成します。そのマスク画像と元画像をInpaintingに入力することで、画像の補完を行いました。</p>

<p><strong>特に文字を検知する部分で、文字検知の取りこぼしが多く見られたので画像を拡大・分割するなどの工夫を実施したところがポイントです。ただし、現状の文字検知の方法でもかなり取りこぼしが多い状態なので、実践で使用する場合にはもう少し工夫が必要になります。</strong></p>

<p>大学の頃は画像系の卒論を書いたこともあり、とても楽しめながら作成することができました。
最後までお付き合いいただき、ありがとうございます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECサイトのタイトルと説明文から取り扱いカテゴリの予測を行った]]></title>
        <id>https://developer.feedforce.jp/entry/2022/02/21/104757</id>
        <link href="https://developer.feedforce.jp/entry/2022/02/21/104757"/>
        <updated>2022-02-21T01:47:57.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　 データサイエンティストの八百俊哉です。最近は家でカクテルを作ることにはまっています。</p>

<p><strong>今回はEC BoosterのクライントのECサイトのタイトルと説明文を用いることで、どのカテゴリの商品を扱っているのか予測する仕組みを作成しました</strong>ので、その方法を紹介します。</p>

<p>弊社のサービス<a href="https://ecbooster.jp/">EC Booster</a>は、Google ショッピング広告の自動運用による自社EC自動集客サービスです。主要ECシステムと連携することで、Google の検索結果画面に画像付きで自社商品を訴求することが可能となります。</p>

<h1>分析背景</h1>

<p>EC Boosterを利用いただくことで、Google ショッピング広告を自動運用することができます。
Googleショッピング広告では広告出稿する際に、<strong>Googleが自動的にそれぞれの商品にgoogle product categoryというカテゴリ情報を割り当てます。</strong></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsupport.google.com%2Fmerchants%2Fanswer%2F6324436%3Fhl%3Dja" title="Google 商品カテゴリ [google_product_category] - Google Merchant Center ヘルプ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://support.google.com/merchants/answer/6324436?hl=ja">support.google.com</a></cite></p>

<p>しかしながら、<strong>Googleが自動的に割り振った商品ごとのカテゴリ情報はEC Booster側からは確認することができません。</strong></p>

<blockquote><p>Google's category of the item (see Google product taxonomy). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.
<cite><a href="https://developers.google.com/shopping-content/reference/rest/v2.1/products?hl=en#Product.FIELDS.google_product_category">https://developers.google.com/shopping-content/reference/rest/v2.1/products?hl=en#Product.FIELDS.google_product_category</a></cite></p></blockquote>

<p>商品ごとに割り振られたカテゴリがわからないと、それぞれのクライントがどのような商品を扱っているのかわからなくなります。</p>

<p>その結果、<strong>クライアントの実績を取扱商品カテゴリごとに集計したり、扱っているカテゴリごとのサポートを行ったりすることができなくなってしまいます。</strong></p>

<p>そこで今回は<strong>クライントごとに取扱商品カテゴリをEC Booster側で予測する</strong>ことで、上に挙げたような課題を解決するような仕組みを作成しました。</p>

<h1>学習・予測に必要なデータの収集</h1>

<p>EC Boosterは現在有料プラン約300のクライントとフリープラン約2000のクライントにご利用いただいております。（<a href="https://ssl4.eir-parts.net/doc/7068/tdnet/2065834/00.pdf">2022年5月第2四半期 決算説明資料より</a>）</p>

<p><strong>学習データ生成のために、有料プランユーザーを中心に約470のクライントに対して手動でカテゴリを割り振るという作業を実施しました。</strong>また、このデータの作成はそれぞれのクライントのホームページを目視で確認し、適切なカテゴリを割り振りました。</p>

<p>次に学習・予測に必要な入力データの収集を行いました。<strong>今回はそれぞれのクライントのタイトルと説明文を用いて学習をします。</strong>
<strong>そのため以下に示すようにそれぞれのホームページからtitleとdescriptionのスクレイピングを行いました。
</strong>
<figure class="figure-image figure-image-fotolife" title="タイトル(title)、説明文(description)の例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220215/20220215113752.png" alt="f:id:newton800:20220215113752p:plain" width="1200" height="575" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>タイトル(title)、説明文(description)の例</figcaption></figure></p>

<p>それぞれのtitleとdescriptionが収集できると以下のようなデータになります。</p>

<table>
<thead>
<tr>
<th>  shop_id  </th>
<th>  手入力カテゴリ  </th>
<th> title</th>
<th> description</th>
</tr>
</thead>
<tbody>
<tr>
<td>  A  </td>
<td>  カテゴリA  </td>
<td> レトロな服を買うならA  </td>
<td> レトロな服を買うならAで決まり!!お問い合わせは...  </td>
</tr>
<tr>
<td>  B  </td>
<td>  カテゴリB  </td>
<td> 高級食材のB </td>
<td> 高級食材を買うならBが安い!!  </td>
</tr>
<tr>
<td>  C  </td>
<td>  カテゴリC  </td>
<td> 車のパーツはC </td>
<td> パーツの取付も行います!!  </td>
</tr>
</tbody>
</table>


<p>すべてのtitleとdescriptionを収集すると、手動でカテゴリを定めたデータ数と等しいデータ数になるので約470の学習データが集まったことになります。</p>

<h1>学習</h1>

<p>今回はBERTを用いて学習・予測を行いました。</p>

<p><a href="https://arxiv.org/abs/1810.04805">BERT（Bidirectional Encoder Representations from Transformers）</a>とは2018年にGoogleから発表された自然言語モデルです。</p>

<p>また、私自身BERTに精通しているわけではないので、今回は勉強も兼ねて「<a href="https://www.amazon.co.jp/dp/B098J9M4PP/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">BERTによる自然言語処理入門 ―Transformersを使った実践プログラミング</a>」を参考に学習を実施しました。</p>

<p>第6章にBERTによる文章分類というものがあるので、そちらを一部書き換えて使用しました。</p>

<h1>工夫したポイント</h1>

<p>モデルやpre-trained modelは本で紹介されている通りのものを使用しましたが、<strong>18カテゴリへの分類問題で正解率が62%前後しか確保できていないため、この精度では運用できない</strong>と判断し、以下のような工夫を行いました。</p>

<h2>工夫したポイント①　2種類の予測モデルを用いる</h2>

<p>精度改善のために元々1つの予測モデルで学習・予測行っていたものを、2つの予測モデルで行うように変更しました。それぞれの予測モデルは以下のような役割を担っています。</p>

<table>
<thead>
<tr>
<th>  予測モデル  </th>
<th>  役割  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  予測モデル1  </td>
<td>  データ量が多いカテゴリを予測するモデル。簡単な予測問題を間違えない。また、データ数が少ないカテゴリはまとめて「その他」と予測する。  </td>
</tr>
<tr>
<td>  予測モデル2  </td>
<td>  予測モデル1で「その他」と予測されたデータを、それぞれのカテゴリに割り振る予測モデル。データ数が少なく難しいカテゴリに対して予測を行うので正解率は低い。  </td>
</tr>
</tbody>
</table>


<p>手動で割り振られた約470データのカテゴリは以下のようになっており、<strong>学習に使用できるデータ量がカテゴリごとにばらつきが大きいことがわかります。</strong> <strong>またデータ量が少ないカテゴリは、多くの場合低い精度を示していました。</strong></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220216/20220216105400.png" alt="f:id:newton800:20220216105400p:plain" width="601" height="372" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><br></p>

<p>予測モデル1では、データ量が少ないカテゴリは「その他」とまとめてしまい学習を行いました。予測モデル2では「その他」をより細分化するための学習を行いました。</p>

<p><br></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220216/20220216111039.png" alt="f:id:newton800:20220216111039p:plain" width="951" height="393" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><br>
しかしながら、<strong>この方法だけではデータ量が少ないカテゴリを学習している予測モデル2はこれまで通り低い精度でした</strong>ので、以下に示す工夫ポイント2を導入することにしました。</p>

<h2>工夫したポイント②　 自信のない予測は、後で人手で確認するようなフローにする</h2>

<p>これまでは出力されたカテゴリの全てを信頼するようにしていましたが、<strong>一定の信頼値以下の予測に関しては後で人手で確認するというフローを導入</strong>しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220216/20220216111955.png" alt="f:id:newton800:20220216111955p:plain" width="951" height="441" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>そうすることで、<strong>予測結果の信頼値が高いものは予測結果がそのまま採用され、信頼値が低いものは人が後で確認する</strong>という流れになりました。また人が後で確認してカテゴリを定めたデータは、学習モデルの精度向上のための再学習に使用することができます。</p>

<h2>工夫したポイントを導入した結果</h2>

<p>元々正解率が62%だったものが上に示したような<strong>工夫ポイントを導入することで正解率は91%まで向上しました。</strong>また、そのうち2割ほどが人手での再確認を要するものとなりました。</p>

<h1>さいごに</h1>

<p>工夫したポイント②の「自信のない予測は、後で人手で確認するようなフローにする」はちょっとせこいのではないか？と思われる方もいるかもしれません。しかし、残りの全てのクライントに手動で割り振ることと比較すると業務量としてはかなり削減できることになっています。（8割軽減）</p>

<p><strong>「機械にできる簡単なタスクは機械に任せてしまって、人間は本当に考えないといけないような業務に集中できる」ような分析やサービス作りに携わっていきたいなぁと改めて感じた業務でした。</strong></p>

<p>最後までありがとうございました。</p>

<p>P.S. 工夫ポイント1はlossの設計をうまくやれば不要だったりするのかなぁなんて思ったり...</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作ログを用いた行動パターン変化の検知]]></title>
        <id>https://developer.feedforce.jp/entry/2022/02/09/110824</id>
        <link href="https://developer.feedforce.jp/entry/2022/02/09/110824"/>
        <updated>2022-02-09T02:08:24.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　
データサイエンティストの<a href="https://twitter.com/feed_yao">八百俊哉</a>です。
最近は花粉が飛んでいることを感じています。目がかゆい。</p>

<p>今回はdfplus.ioの操作ログを用いてクライアントの行動パターン変化を検知する仕組みを作成し、社内で有効活用された事例がありますので、その手法と成果を紹介します。</p>

<p>弊社のサービス<a href="https://dfplus.io/">dfplus.io</a>はマーケティング・広告運用チームのためのデータフィード管理ツールになります。様々な商品・商材データをマーケティングでフル活用できるようになるサービスです。</p>

<h1>分析背景</h1>

<p>dfplus.ioでの解約理由の一つに<strong>「クライアントの担当者が変更する際に引き継ぎがうまくできず、dfplus.ioの使い方がわからなくなってしまう」</strong>というケースがありました。</p>

<p>dfplus.ioカスタマーサクセスチーム（※以下CSチーム）では、<strong>クライアント側から事前に担当者の変更のご連絡を頂いた場合は新しいご担当者様にdfplus.ioの操作や活用に関するご案内をしております。しかし、クライアント側からご連絡がない場合は担当者の変更に気付くことができずそのご案内ができないという課題</strong>がありました。</p>

<p>その為なんらかの方法でクライアントの担当者の変更を検知することができると、新しい担当者にCSチームからdfplus.ioの操作や活用に関するご案内をすることができます。</p>

<p>そこで今回は<strong>操作ログを用いて行動パターンの変化を検知するという分析を実施し、クライアントの担当者の変更に気がつけるようにしました。</strong></p>

<h1>操作ログを用いて行動パターンを可視化</h1>

<p>dfplus.ioには全部で90個のAPIが存在します。どのアカウントがいつどのAPIを使用したのかのデータがすべて蓄積されている状態です。以下が実際に今回の分析で使用したデータになります。</p>

<p><figure class="figure-image figure-image-fotolife" title="実際に使用した元データ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220208/20220208141429.png" alt="f:id:newton800:20220208141429p:plain" width="643" height="173" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>実際に使用した元データ</figcaption></figure></p>

<p>今回はこちらのデータを用いて各クライアントの行動パターンを作成しました。以下が実際の操作ログを用いて作成できた行動パターンの可視化例です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220209/20220209092518.png" alt="f:id:newton800:20220209092518p:plain" width="778" height="531" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>それぞれの<strong>APIに0~89の通し番号を割り振り、x軸</strong>としました。また、<strong>y軸には日数を使用</strong>して上のように可視化しました。</p>

<p>1日のうち1度でもAPIを操作すれば、(x(API番号), y(操作日)) = 1となるようにしており、画素値は0か1しか取らないようになっています。(画像で表現するときは1を255としている。)</p>

<p><strong>それらのデータを月ごとに切り分け、前月とその前の月の行動パターンを比較することで、行動パターンの変化を確認しました。</strong></p>

<p>上の画像の例だと2021年12月と2022年01月を比較することで、変化の検知を行うということになります。</p>

<h1>行動パターン変化の定義</h1>

<p>ここから2つの月の行動パターンを比較していきます。</p>

<p>はじめは画像同士をそのまま引き算することで変化量を求めようと思いました。しかし、仮にdfplus.ioを使用する業務が1日遅れになってしまったクライアントがいた場合、同じ作業をしているにも関わらず、行動パターン変化量が大きくなってしまいます。</p>

<p>そこで行動パターン変化量(<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20d" alt=" d"/>)を以下のように定義しました。</p>

<div align="center">
<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20d%20%3D%20%20%5Cdfrac%7B%5Csum%20%5E%7B89%7D_%7Bx%3D0%7D%5Cleft%28%20%5Csum%20%5E%7B30%7D_%7By%3D0%7Dp_%7Bx%2Cy%7D%5E%7Bbetore%7D-%5Csum%20%5E%7B30%7D_%7By%3D0%7Dp_%7Bx%2Cy%7D%5E%7Bafter%7D%5Cright%29%20%5E%7B2%7D%7D%7B%5Cleft%28%20%5Csum%20%5E%7B89%7D_%7Bx%3D0%7D%5Csum%20%5E%7B30%7D_%7By%3D0%7Dp_%7Bx%2Cy%7D%5E%7Bbetore%7D%2B%5Csum%20%5E%7B89%7D_%7Bx%3D0%7D%5Csum%20%5E%7B30%7D_%7By%3D0%7Dp_%7Bx%2Cy%7D%5E%7Bafter%7D%5Cright%29%20%7D%5C%5C%20" alt=" d =  \dfrac{\sum ^{89}_{x=0}\left( \sum ^{30}_{y=0}p_{x,y}^{betore}-\sum ^{30}_{y=0}p_{x,y}^{after}\right) ^{2}}{\left( \sum ^{89}_{x=0}\sum ^{30}_{y=0}p_{x,y}^{betore}+\sum ^{89}_{x=0}\sum ^{30}_{y=0}p_{x,y}^{after}\right) }\\ "/>
</div>


<p></p></p>

<div align="center">
<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%0Ap_%7Bx%2Cy%7D%20%3D%20%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Bll%7D%0A1%20%26%20%E6%93%8D%E4%BD%9C%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%5C%5C%0A0%20%26%20%E6%93%8D%E4%BD%9C%E3%81%8C%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%0A%5Cend%7Barray%7D%0A%5Cright.%0A" alt=" 
p_{x,y} = \left\{
\begin{array}{ll}
1 &amp; &#x64CD;&#x4F5C;&#x304C;&#x3042;&#x3063;&#x305F;&#x5834;&#x5408;\\
0 &amp; &#x64CD;&#x4F5C;&#x304C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;
\end{array}
\right.
"/>
</div>


<p></p></p>

<p>もともとは分子の部分だけを用いて行動パターン変化量と定義していましたが、そうすると必然的に操作頻度が多いユーザーの変化量が多くなってしまい、月に数度しか使用しないクライアントの行動パターン変化量がとても小さくなってしまうという課題がありました。</p>

<p>そこで上のように分母に全体の操作頻度を導入することで、操作頻度による評価のばらつきを削減しました。</p>

<p>行動パターン変化量(<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20d" alt=" d"/>)がいくつ以上になれば、行動パターンが変化したと言えるかについては、CSチームと<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20d" alt=" d"/>と行動パターンの可視化画像を確認の上、決定しております。今後もその閾値については調整を行っていく予定になります。</p>

<h1>実際に検知できた例</h1>

<p><strong>これらの仕組みを使用することで毎月10件前後の変化検知があります。
その検知結果をCSチームで確認し、ご案内が必要だと判断した場合にCSチームからクライアントに連絡を実施するという流れになっています。</strong></p>

<p>以下は実際に担当者の変更の検知に成功した事例です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220208/20220208160800.png" alt="f:id:newton800:20220208160800p:plain" width="721" height="361" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>可視化された行動パターンからも確認できるように、<strong>2021年11月までは頻繁に使用されていましたが、2021月12月の前半以降は使用回数が激減しています。</strong></p>

<p><strong>実際にこちらのクライアントは担当者が退職されており、担当者の変更検知の成功例となりました。</strong></p>

<p>以下は、実際にCSチームから頂いた連絡です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20220208/20220208161732.png" alt="f:id:newton800:20220208161732p:plain" width="883" height="251" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h1>さいごに</h1>

<p>今回は操作ログを用いた行動パターン変化の検知について紹介しました。
こちらの分析案件は、ヒアリングから現在まで1年ほどかけて現状の形になりました。入社2年目の私にとってはかなり長い間実施した業務になります。</p>

<p>今回は触れられていませんが、現在に至るまで紆余曲折ありました。最後まで諦めずに現在の形にできて非常に嬉しく感じます。</p>

<p>現在運用から4ヶ月ほど経過しており、実際に担当者の変更が検知できた事例が2件となっています。引き続き運用を続けていくことで、より多くの成果が残せると考えています。</p>

<p>最後までお付き合いいただき、ありがとうございました。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『ボッチLookML開発者兼データ整備人を連れてきたよ！』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2022/02/04/180000</id>
        <link href="https://developer.feedforce.jp/entry/2022/02/04/180000"/>
        <updated>2022-02-04T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>本日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『ボッチLookML開発者兼データ整備人を連れてきたよ！』というひどいタイトルの発表をしました。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTv911SmUBM9fAk-IKQM9139Q29fU7INnUHwbFeOBxolqyybPdlcFHW2dAHBTgr3P9J_kL0Xdhbe38L/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="410" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>2020 年 4 月から Looker に関わって得たことをまとめた内容であるとともに、1 年半近く前からのアップデートになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000" title="『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2020/10/23/190000">developer.feedforce.jp</a></cite></p>

<p>世に出ている Looker の情報はキラキラしているものが多く、ツラい話をそれほど目にしません。<s>絶対にあるはずなのに！😭</s></p>

<p>それならば！とツラい話や解決が困難な話を散りばめさせてもらいました。課題が共有されて初めて知見が役に立つと思いますからね。<em>解決した課題もあるよ（小声）。</em></p>

<p>それでは良い週末を！(^^)/</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[LINE絵文字概観]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2022/01/16/235051</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2022/01/16/235051"/>
        <updated>2022-01-16T14:50:51.000Z</updated>
        <summary type="html"><![CDATA[<p>LINEで使える3種類の絵文字について、昨年末の<a href="https://developer.feedforce.jp/archive/category/FFTT">社内勉強会</a>でざっくりと解説しました。そのときのスライドを上げておきます。ざっくり概観なので、厳密でない表現や調査が不十分な箇所はありますが、雰囲気はつかめるんじゃないでしょうか。</p>

<iframe class="speakerdeck-iframe" style="border: 0px none; background: rgba(0, 0, 0, 0.1) none repeat scroll 0% 0% padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" src="https://speakerdeck.com/player/535cc3eccd204aeca4e9ce68e8175768" title="LINE絵文字概観 / FFTT #465" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" data-ratio="1.78343949044586" frameborder="0"></iframe>


<h2>参考ページ</h2>

<ul>
<li><a href="https://linecorp.com/ja/pr/news/ja/2018/2160">【LINE】「デコ文字」に続き、トークがもっと楽しくなる新機能が登場　人気キャラクターが“絵文字”になった「LINE絵文字」を本日より発売開始 | ニュース | LINE株式会社</a></li>
<li><a href="https://linecorp.com/ja/pr/news/ja/2018/2410">【LINE Creators Market】LINE、「LINEクリエイターズ絵文字」を2018年11月中に販売開始、絵文字制作に関する申請ガイドラインを本日より公開 | ニュース | LINE株式会社</a></li>
<li><a href="https://linecorp.com/ja/pr/news/ja/2021/3898">LINE、メッセージ内で動く「アニメーション絵文字」を発売開始 | ニュース | LINE株式会社</a></li>
<li><a href="https://creator.line.me/ja/guideline/emoji/">絵文字 ―ガイドライン - LINE Creators Market</a></li>
<li><a href="https://unicode.org/emoji/charts/emoji-versions.html">Emoji Versions, v14.0</a></li>
<li><a href="https://unicode.org/emoji/charts/emoji-counts.html">Emoji Counts, v14.0</a></li>
<li><a href="https://developers.line.biz/ja/docs/messaging-api/emoji-list/">送信可能なLINE絵文字リスト | LINE Developers</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc8259.html#section-8.1">8.1. Character Encoding ― RFC 8259: The JavaScript Object Notation (JSON) Data Interchange Format</a></li>
<li><a href="https://www.unicode.org/versions/Unicode14.0.0/ch23.pdf#page=23">23.5 Private-Use Characters ― The Unicode Standard Version 14.0</a></li>
<li><a href="https://store.line.me/emojishop/home/creators/ja">LINE クリエイターズ絵文字 - 話題の新着絵文字など | LINE STORE</a></li>
<li><a href="https://developers.line.biz/ja/docs/messaging-api/message-types/#text-messages">テキストメッセージ ― メッセージタイプ | LINE Developers</a>（送信側）</li>
<li><a href="https://developers.line.biz/ja/reference/messaging-api/#wh-text">テキスト ― Messaging APIリファレンス | LINE Developers</a>（受信側）</li>
<li><a href="https://store.line.me/emojishop/product/5bc84438031a6704f8cff722/ja">カナヘイのピスケ&amp;うさぎ 絵文字 2 - LINE絵文字 | LINE STORE</a></li>
<li><a href="https://emojipedia.org/shortcodes/">⏩ Emoji Shortcodes</a></li>
<li><a href="https://developers.line.biz/ja/news/2021/11/30/line-original-unicode-emojis-will-be-discontinued/">ニュース：2022年3月31日をもって、Messaging APIの「LINE独自のUnicode絵文字」を廃止します | LINE Developers</a></li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Causal Impactを用いた入札単価調整の効果検証]]></title>
        <id>https://developer.feedforce.jp/entry/2021/12/21/154206</id>
        <link href="https://developer.feedforce.jp/entry/2021/12/21/154206"/>
        <updated>2021-12-21T06:42:06.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　機械学習エンジニアの<a href="https://twitter.com/feed_yao">八百俊哉</a>です。最近はバレーボールをやることにハマっており、激しめに運動しています。今日も筋肉痛です。</p>

<p>今回はGoogle広告の入札単価調整が広告成果にどのような影響を与えるのかCausal Impactを用いて検証を実施しましたので、その結果を共有したいと思います。</p>

<h1>分析背景</h1>

<p>弊社のサービス<a href="https://ecbooster.jp/">EC Booster</a>は、Google ショッピング広告の自動運用による自社EC自動集客サービスです。主要ECシステムと連携することで、Google の検索結果画面に画像付きで自社商品を訴求することが可能となります。</p>

<p>Google 広告には<a href="https://support.google.com/google-ads/answer/2732132?hl=ja">入札単価調整</a>という機能があり、それをショッピング広告でも使用することによって効率的に広告配信を行うことができるとされています。
そこで<strong>今回はEC Boosterで入札単価調整を実施することで、どれほど広告の実績がよくなるのかを検証しました。</strong></p>

<h1>Causal Impactを用いた効果検証</h1>

<p>今回使用した効果検証の方法である<a href="https://google.github.io/CausalImpact/CausalImpact.html">Causal Impact</a>をご紹介します。</p>

<p><strong>Causal ImpactとはGoogleが作成したベイズ構造時系列モデルを使用した因果推論のためのパッケージになります。</strong></p>

<p>仕組みを簡単に表現すると、あるイベントが介入した日を境に「過去の実績から推定される反事実」と「実際に観測された事実」を比較することによって、イベントの効果の大きさを測ると言うものです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211215/20211215120354.png" alt="f:id:newton800:20211215120354p:plain" width="761" height="261" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>今回は実際に検証したことを紹介する記事になりますので、これ以上詳しくCausal Impactの仕組みについては言及しないです。
より詳しくCausal Impactについて知りたい方は以下の書籍が参考になるので是非読んでみてください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.amazon.co.jpdp%2F400006973X" title="データ解析のための統計モデリング入門――一般化線形モデル・階層ベイズモデル・MCMC (確率と情報の科学) | 久保 拓弥 |本 | 通販 | Amazon" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.amazon.co.jp/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E2%80%95%E2%80%95%E4%B8%80%E8%88%AC%E5%8C%96%E7%B7%9A%E5%BD%A2%E3%83%A2%E3%83%87%E3%83%AB%E3%83%BB%E9%9A%8E%E5%B1%A4%E3%83%99%E3%82%A4%E3%82%BA%E3%83%A2%E3%83%87%E3%83%AB%E3%83%BBMCMC-%E7%A2%BA%E7%8E%87%E3%81%A8%E6%83%85%E5%A0%B1%E3%81%AE%E7%A7%91%E5%AD%A6-%E4%B9%85%E4%BF%9D-%E6%8B%93%E5%BC%A5/dp/400006973X">www.amazon.co.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.amazon.co.jp%2F%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%25E5%2588%2586%25E6%259E%2590%25E3%2581%25A8%25E7%258A%25B6%25E6%2585%258B%25E7%25A9%25BA%25E9%2596%2593%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E-R%25E3%2581%25A8Stan%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E7%2590%2586%25E8%25AB%2596%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585-%25E9%25A6%25AC%25E5%25A0%25B4-%25E7%259C%259F%25E5%2593%2589%2Fdp%2F4903814874" title="時系列分析と状態空間モデルの基礎: RとStanで学ぶ理論と実装 | 真哉, 馬場 |本 | 通販 | Amazon" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.amazon.co.jp/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90%E3%81%A8%E7%8A%B6%E6%85%8B%E7%A9%BA%E9%96%93%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E5%9F%BA%E7%A4%8E-R%E3%81%A8Stan%E3%81%A7%E5%AD%A6%E3%81%B6%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E9%A6%AC%E5%A0%B4-%E7%9C%9F%E5%93%89/dp/4903814874">www.amazon.co.jp</a></cite></p>

<h1>入札単価調整はコンバージョン率に良い効果をもたらしている</h1>

<p>入札単価調整を実施することで、広告効果の高いユーザーに対して積極的に入札を行うようになり、逆に広告効果の低いユーザーに対しては入札を控えるようになります。</p>

<p>そのようにすることで、コンバージョン率の向上が期待されていました。コンバージョン率が向上するとコンバージョン数が上がり、最終的には費用対効果であるROASの向上までが考えられます。</p>

<p>実際に分析前に立てられた仮説は以下です。</p>

<p><figure class="figure-image figure-image-fotolife" title="分析前に立てた仮説"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211221/20211221153325.png" alt="f:id:newton800:20211221153325p:plain" width="691" height="171" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>分析前に立てた仮説</figcaption></figure></p>

<p>それでは実際に入札単価調整を実施することで、広告成果がどう変化したのかを紹介します。</p>

<p>入札単価調整を行う前の実績と入札単価調整を行った後の実績を用いてCausal Impactを実施しました。</p>

<p>その結果以下のようにそれぞれの広告成果に入札単価調整が影響を与えているということがわかりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="分析を実施することで分かった結果の一部抜粋"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211221/20211221153346.png" alt="f:id:newton800:20211221153346p:plain" width="691" height="171" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>分析を実施することで分かった結果の一部抜粋</figcaption></figure></p>

<p>結果から<strong>コンバージョン率が向上することによってコンバージョン数が向上していることが確認されました。</strong>（他の要素も向上していますが、今回はコンバージョン率に焦点を当てています）</p>

<p>実際にCVRに関してのCausal Impactの実行結果は以下のようになっていました。（一部公開できない部分は黒くしてます）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211215/20211215123528.png" alt="f:id:newton800:20211215123528p:plain" width="1180" height="590" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>上段に図示された実線が実際に観測されたコンバージョン率で青い点線が過去の傾向を元にした予測コンバージョン率になります。入札単価調を開始した縦の点線の位置から、予測コンバージョン率（入札単価調整を仮にやっていない場合）よりも実際に観測されたコンバージョン率（入札単価調整を実施した場合）の方が大きくなっていることがわかります。</p>

<p>中段に図示されたものが入札単価調整の効果となります。入札単価調整を実施してから、コンバージョン率が増加したといえそうです。</p>

<p>下段に図示されたものは増加したコンバージョン率の累計値になります。</p>

<p><strong>このようなことから入札単価調整は、コンバージョン率向上に貢献していることがわかりました。</strong></p>

<h1>そして現在入札単価調整は</h1>

<p>このような分析もあり、EC Boosterでは現在入札単価調整は全てのユーザーに対して適用されるように設定されています。</p>

<p>このようにEC Boosterの裏側では効果検証を繰り返し、より広告成果が良くなるように最適化を実施しています。</p>

<h1>さいごに</h1>

<p>最後までお付き合いいただきありがとうございます。
弊社のデータ分析チームに新卒入社してはや2年弱ほど経過し、少しずつ成果が出せるようになってきました。</p>

<p>今後はより積極的にデータ分析に関する情報発信を行っていきたいと考えています。よろしくお願いします。</p>

<p>P.S.祖父母に自分の仕事伝えるのが難しいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[LookML 開発で使っているディレクトリ構造を紹介する]]></title>
        <id>https://developer.feedforce.jp/entry/2021/12/13/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/12/13/110000"/>
        <updated>2021-12-13T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>この記事は Looker Advent Calendar 2021 の 13 日目の記事です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2021%2Flooker" title="Calendar for Looker | Advent Calendar 2021 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe><cite class="hatena-citation"><a href="https://qiita.com/advent-calendar/2021/looker">qiita.com</a></cite></p>

<p>昨日は Yappli 阿部さんの「<a href="https://tech.yappli.io/entry/2021/12/12/Sexy_Tech_for_You_9">Lookerの目標値やストップワードを、Googleスプレッドシート連携でお手軽管理【Sexy Tech for You #9】</a>」でした。Looker を使うとこのような LookML を書くだけで、ビジネスユーザーが SQL を書くことなく、本業に集中できるのはとても良いですよね。</p>

<p>個人的には、SQL ベースの派生テーブルの中で join するよりも、explore で join したほうが Looker らしく、メンテナンス性が良い気がしました。<a href="https://help.looker.com/hc/en-us/articles/360023722974">symmetric 集計</a>が働くため、ファンアウトも避けられます。wikipedia テーブルに関しては、永続的な派生テーブル（PDT）を使って BigQuery のスキャンサイズを抑えるのも良さそうです。</p>

<p>、、、( ﾟдﾟ)ハッ！ついマジレスをしてしまいました。💦</p>

<p>今回は dimension が null の measure を（0 ではなく）ø にする少しマニアックな記事を書く予定でしたが、先日の <a href="https://looker-japan-user-group.connpass.com/event/233775/">Looker User Meetup Online #7</a> で、LookML のディレクトリ構造を知りたいというチャットをお見かけしたので、今回はその話を書くことにしました。</p>

<ul class="table-of-contents">
    <li><a href="#今回のプロジェクトの規模感">今回のプロジェクトの規模感</a></li>
    <li><a href="#デフォルトのディレクトリ構造">デフォルトのディレクトリ構造？</a></li>
    <li><a href="#特別なファイル形式を知る">特別なファイル形式を知る</a></li>
    <li><a href="#最近使っているディレクトリ構造">最近使っているディレクトリ構造</a><ul>
            <li><a href="#bigquery">bigquery/</a></li>
            <li><a href="#model1modellkml">model1.model.lkml</a></li>
            <li><a href="#explores">explores/</a></li>
            <li><a href="#views">views/</a></li>
            <li><a href="#tests">tests/</a></li>
            <li><a href="#manifestlkml">manifest.lkml</a></li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#2021-12-29-追記">2021-12-29 追記</a></li>
</ul>

<h2 id="今回のプロジェクトの規模感">今回のプロジェクトの規模感</h2>

<p>プロジェクトの規模感によってディレクトリ構造は変わると思うので、先に書いておきます。</p>

<ul>
<li>Looker インスタンスに 1 つだけ LookML プロジェクトが存在する</li>
<li>BigQuery Dataset 76 個</li>
<li><code>.lkml</code> ファイル 277 個

<ul>
<li><code>.model.lkml</code> ファイル 1 個</li>
<li><code>.explore.lkml</code> ファイル 56 個</li>
<li><code>.view.lkml</code> ファイル 139 個</li>
<li><code>.test.lkml</code> ファイル 78 個</li>
</ul>
</li>
<li>LookML 開発者 1 名</li>
</ul>


<h2 id="デフォルトのディレクトリ構造">デフォルトのディレクトリ構造？</h2>

<p>この記事を書くまで誤解をしていたのですが、デフォルトのディレクトリ構造というものはなかったのですね。この記事を書くために改めて Blank Project を作ったら、ファイルもディレクトリも何もないプロジェクトが作られました。</p>

<p>モデルファイルを作るとこのようなコードが展開されるので、<code>.view.lkml</code> に関しては <code>/views/</code> 以下に作る方が多いと思います。私もそうでした。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;/views/*.view.lkml&#34;                # include all views in the views/ folder in this project
# include: &#34;/**/*.view.lkml&#34;                 # include all views in this project
# include: &#34;my_dashboard.dashboard.lookml&#34;   # include a lookml dashboard called my_dashboard</pre>


<p>例えばこのようになります。</p>

<pre class="code" data-lang="" data-unlink>feedmatic.model.lkml
views
├── all_media.view.lkml
└── ga.view.lkml</pre>


<p>開発初期は <code>feedmatic.model.lkml</code> に view 以外の、explore や datagroup などをズラズラと書いていました。</p>

<h2 id="特別なファイル形式を知る">特別なファイル形式を知る</h2>

<p>ご存知の通り、LookML のファイル形式は <code>.lkml</code> です。</p>

<p>LookML 開発が続くと <code>.model.lkml</code> や <code>.view.lkml</code> などが増えていきますが、この中で唯一意味を持つのが <code>.model.lkml</code> です<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。その他のファイル形式は整理のために自由に作ることが出来ます。</p>

<p>例えば <code>feedmatic.model.lkml</code> を作ると、<code>feedmatic</code> というモデルが定義されます。<code>https://{{your looker domain}}/projects</code> で確認できます。<code>all_media.view.lkml</code> を作っても、何かが作られるわけではありません。</p>

<p>以上の知識を持った上で、公式ドキュメントを読むと理解が深まるかもしれません。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.looker.com%2Fja%2Fdata-modeling%2Flearning-lookml%2Flookml-terms-and-concepts" title="Looker documentation  |  Google Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<h2 id="最近使っているディレクトリ構造">最近使っているディレクトリ構造</h2>

<p>こんな感じです。それぞれ解説していきます。</p>

<pre class="code" data-lang="" data-unlink>bigquery
├── spreadsheet1
│   ├── define.json
│   └── schema.json
└── spreadsheet2
    ├── define.json
    └── schema.json
model1.model.lkml
explores
├── corp
│   ├── base.explore.lkml
│   ├── name1.explore.lkml
│   └── name2.explore.lkml
├── explore1.explore.lkml
└── explore2.explore.lkml
views
├── corp
│   ├── base.view.lkml
│   ├── name1.view.lkml
│   └── name2.view.lkml
├── view1.view.lkml
└── view2.view.lkml
tests
└── model1
    ├── corp
    │   ├── name1.test.lkml
    │   └── name2.test.lkml
    ├── explore1.test.lkml
    └── explore2.test.lkml
manifest.lkml</pre>


<h3 id="bigquery">bigquery/</h3>

<p>いきなり LookML 関係ありません。💦</p>

<p>BigQuery はデータソースに Google スプレッドシートを指定でき、そのスキーマ定義はコード化することが出来ます。</p>

<p>コード化することで変更履歴を Git で管理できますし、BigQuery CLI を使って簡単に Dataset や Table を作ったり、削除したりが出来ます。</p>

<pre class="code" data-lang="" data-unlink>$ bq mk spreadsheet1
$ bq mk --external_table_definition=./define.json spreadsheet1.gsheet
$ bq rm -r spreadsheet1</pre>


<p>破壊的な変更をする時は、バージョン名を付けた Dataset を新規作成し、LookML から参照先を変えます。こうすることで、本番環境に影響を与えずに開発することが出来ます。</p>

<pre class="code" data-lang="" data-unlink>$ bq mk spreadsheet1_v2
$ bq mk --external_table_definition=./define.json spreadsheet1_v2.gsheet</pre>


<p>スキーマ定義は公式ドキュメントをご覧下さい。需要があればそんな記事を書きます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcloud.google.com%2Fconfig-connector%2Fdocs%2Freference%2Fresource-docs%2Fbigquery%2Fbigquerytable%3Fhl%3Dja" title="BigQueryTable  |  Config Connector Documentation  |  Google Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<p>他の Dataset は ETL ツール<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>が作るためコード化はしていません。</p>

<h3 id="model1modellkml">model1.model.lkml</h3>

<p>中心となるこのファイルは軽いです。本当にこの程度しか書いていません。</p>

<pre class="code" data-lang="" data-unlink>connection: &#34;docs_bigquery_db&#34;

include: &#34;/explores/**/*.explore&#34;
include: &#34;/tests/model1/**/*.test&#34;

named_value_format: jpy_0 {
  value_format: &#34;\¥#,##0&#34;
}

named_value_format: jpy_1 {
  value_format: &#34;\¥#,##0.0&#34;
}

# for test
access_grant: can_view_explores_for_tests {
  user_attribute: view_explores_for_tests
  allowed_values: [&#34;yes&#34;]
}</pre>


<p>必要な定義は <code>connection</code> と <code>include</code> だけです。</p>

<p>include 対象を全ての <code>.explore.lkml</code> と、このモデルに関連するテスト（<code>tests/feedmatic/</code> 以下全ての <code>.test.lkml</code>）だけにしていることがポイントです。つまり <code>.model.lkml</code> は <code>.explore.lkml</code> と自分の <code>.test.lkml</code> しか知りません。</p>

<p>あとは蛇足で、<code>named_value_format</code> と、<a href="/entry/2021/08/30/150000">前回紹介したテスト</a>に必要な <code>access_grant</code> だけです。</p>

<h3 id="explores">explores/</h3>

<p>1 つの explore を 1 つのファイルに定義しています。</p>

<p><code>explores/explore1.explore.lkml</code> はこのように書いています。<code>.explore.lkml</code> は <code>.view.lkml</code> しか知りません。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;/views/**/*.view&#34;

explore: explore1 {
  # ...
}</pre>


<p>紆余曲折あり、<code>explores/corp/name1.explore.lkml</code> のような取引先ごとの explore もあります。</p>

<p>基本となる <code>explores/corp/base.explore.lkml</code> はこのような定義です。ファイル名と explore 名を変えていることがポイントです。Ruby の慣習を参考にしました。</p>

<pre class="code" data-lang="" data-unlink>explore: corp_base {
  extension: required
  # ...
}</pre>


<p><code>corp_base</code> explore を継承する、各取引先の explore はこのような定義です。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;./base.explore&#34;
include: &#34;/views/**/*.view&#34;

explore: corp_name1 {
  extends: [corp_base]
  # ...
}</pre>


<h3 id="views">views/</h3>

<p>view も explore と同様に、1 view 1 ファイルに定義しています。</p>

<p><code>views/view1.view.lkml</code> です。<code>.view.lkml</code> は <code>.model.lkml</code>, <code>.explore.lkml</code>, <code>.test.lkml</code> の誰も知りません。</p>

<pre class="code" data-lang="" data-unlink>view: view1 {
  # ...
}</pre>


<p>取引先ごとの view も同じです。<code>views/corp/base.view.lkml</code> はこんな感じで、</p>

<pre class="code" data-lang="" data-unlink>view: corp_base {
  extension: required
  # ...
}</pre>


<p>継承先の <code>views/corp/name1.view.lkml</code> はこんな感じです。</p>

<pre class="code" data-lang="" data-unlink>include: &#34;./base.view&#34;

view: corp_name1 {
  extends: [corp_base]
  # ...
}</pre>


<h3 id="tests">tests/</h3>

<p>テストはかなり書いており、2021-12-13 現在、184 もあります。</p>

<p>ほぼ explore 単位でファイル分割しています。分割することで、ファイル単位のテストが可能になっています。</p>

<p>こちらのベストプラクティスに従っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815" title="LookML Data Tests: Recommendations and Best Practices | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<p>テスト対象はこんな感じです。</p>

<ul>
<li>(1) LookML で特別な実装をしていて、壊れても気づくのが難しそうな実装</li>
<li>(2) <code>primary_key</code> が重複していないか？ null になっていないか？を全ての view に対して</li>
</ul>


<p>(2) は前回詳しく書きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F08%2F30%2F150000" title="Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<p>実行に時間がかかることが悩みで以前こんな Topic を作りましたが、反応ゼロでした。みなさん課題ではないのかしら？💦</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Fis-it-possible-to-run-tests-in-parallel-28222" title="Is it possible to run tests in parallel? | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<p><code>primary_key</code> は壊れた時に気づくのが難しく、LookML 開発者が私だけということもあるため、機械的に全ての <code>primary_key</code> をテスト出来るようにしています。ただ、全テストは結構時間がかかるので、日に 1 回くらいの頻度で手動実行しています。CI したい...。</p>

<h3 id="manifestlkml">manifest.lkml</h3>

<p>ディレクトリ構造とは関係ありませんが、manifest.lkml についても触れておきましょう。</p>

<p><code>bigquery/</code> の項で書いたとおり、テーブル定義に破壊的な変更を加える時は <code>dataset_v2</code> のように Dataset 名にゆるふわバージョンを付けています。つまり割とカジュアルに Dataset 名が変わります。</p>

<p>そのため、このように manifest.lkml で全ての Dataset 名を定義しています<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Dataset 名は複数箇所で使われ得るためです。</p>

<pre class="code" data-lang="" data-unlink>constant: table_name1  { value: &#34;`table1_v2.gsheet`&#34; }
constant: table_name2  { value: &#34;`table2.view`&#34; }</pre>


<p>利用例です。</p>

<pre class="code" data-lang="" data-unlink>sql_table_name: @{table_name1} ;;</pre>


<h2 id="まとめ">まとめ</h2>

<p>現在 LookML 開発で使っているディレクトリ構造を紹介しました。中規模くらいまでの LookML プロジェクトには使える実感があります。</p>

<p>ただ、最近はファイル数が多くなってきて、<code>.view.lkml</code> を追加した時に変更する <code>.explore.lkml</code> と <code>.test.lkml</code> の距離が遠く、実装しづらい課題があります。</p>

<p>Refinements を使えば解決できるのだろうか、もっと再利用性のあるコードにしたいなど、悩みは尽きないです。</p>

<p>こちらの記事は読んで手も動かしたのですが、巨大なファイルを分割する、Blocks のようなライブラリをカスタマイズする（？）、以外の使い方を見いだせていません。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2F%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%25A0-103%2Frefinements%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6lookml%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B-18809" title="Refinementsを使ってLookMLのコードを整理する | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" loading="lazy"></iframe></p>

<p>皆さんのディレクトリ構造も是非教えて下さい！</p>

<h2 id="2021-12-29-追記">2021-12-29 追記</h2>

<p><a href="https://community.looker.com/lookml-5/what-is-the-looker-recommended-folder-structure-for-lookml-development-28826">What is the looker recommended folder structure for LookML development ? | Looker Community</a></p>

<p>Looker Community にもお悩みの方がいらっしゃいました。返信している Dawid さんはよくお見かけする方で、かなりの熟練者だと思います。</p>

<p>そんな彼も、今回私が書いた記事のような物理的な構造が良いのか、論理的な構造が良いのか、未だに試行錯誤しているようです。</p>

<p>始めは物理的なディレクトリ構造から始めて、徐々に変化しながら論理的な構造に近づくのかもしれません。その頃にはステージに応じたベストプラクティスが出ていると良いですね。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
正確に書くと <code>manifest.lkml</code> や <code>.strings.json</code> などもありますが、一旦考えなくて良いと思います。<a href="#fnref:1" rev="footnote">&#8617;</a></li>
<li id="fn:2">
<a href="https://funnel.io/">Funnel.io</a> を使っています。<a href="#fnref:2" rev="footnote">&#8617;</a></li>
<li id="fn:3">
1 行で書いているのはソートしやすくするためです。<a href="#fnref:3" rev="footnote">&#8617;</a></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shopifyの埋め込みアプリにメニューをつける方法]]></title>
        <id>https://rewired.cloud/shopify-app-navigation-menu/</id>
        <link href="https://rewired.cloud/shopify-app-navigation-menu/"/>
        <updated>2021-11-07T23:20:54.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://rewired.cloud/wp-content/uploads/2021/11/211108_appmenu_TITLE-520x300.png" class="webfeedsFeaturedVisual" width="520" height="300" /></p>こんにちは、mashabow です。LINE で CRM を実現する Shopify アプリ「ソーシャルPLUS」の、フロントエンド開発を担当しています。 アプリに機能が増えてくると、埋め込みアプリ（マーチャントの方に触 ... ]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Packages を使ってプライベート gem を社内限定で公開した]]></title>
        <id>https://developer.feedforce.jp/entry/2021/11/05/095050</id>
        <link href="https://developer.feedforce.jp/entry/2021/11/05/095050"/>
        <updated>2021-11-05T00:50:50.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/daido1976/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/daido1976/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:daido1976</a> です。</p>

<p>先日 GitHub Packages を使ってプライベート gem を社内限定で公開したので、その方法をご紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#GitHub-Packages-とは">GitHub Packages とは</a></li>
    <li><a href="#既存のプライベート-gem-と-GitHub-Packages-との違い">既存のプライベート gem と GitHub Packages との違い</a></li>
    <li><a href="#GitHub-Packages-を使ってプライベート-gem-を社内限定で公開する">GitHub Packages を使ってプライベート gem を社内限定で公開する</a><ul>
            <li><a href="#gem-をリリースPublishする方法">gem をリリース（Publish）する方法</a><ul>
                    <li><a href="#ローカルからリリースする">ローカルからリリースする</a></li>
                    <li><a href="#CI-からリリースする">CI からリリースする</a></li>
                </ul>
            </li>
            <li><a href="#各環境へのインストール方法">各環境へのインストール方法</a><ul>
                    <li><a href="#ローカルや本番環境でのインストール">ローカルや本番環境でのインストール</a></li>
                    <li><a href="#Dependabot-でのインストール">Dependabot でのインストール</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#関連記事">関連記事</a></li>
</ul>

<h2 id="GitHub-Packages-とは">GitHub Packages とは</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.co.jp%2Ffeatures%2Fpackages" title="Packages" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.co.jp/features/packages">github.co.jp</a></cite></p>

<p>GitHub Packages はライブラリ（パッケージ）のホスティングサービスです。</p>

<p>Ruby の場合 <code>https://rubygems.org</code> の代わりに <code>https://rubygems.pkg.github.com</code> に公開するイメージで、認証には GitHub の personal access token などを使います。</p>

<h2 id="既存のプライベート-gem-と-GitHub-Packages-との違い">既存のプライベート gem と GitHub Packages との違い</h2>

<p>既存のプライベート gem は主に git のタグやブランチを指定する方法が用いられますが、以下のようにいくつかの問題があります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># main ブランチの先端を使うのは再現性がない（ブランチ指定した場合も同じ）</span>
gem <span class="synSpecial">'</span><span class="synConstant">my_rubygem</span><span class="synSpecial">'</span>, <span class="synConstant">github</span>: <span class="synSpecial">'</span><span class="synConstant">my_name/my_rubygem</span><span class="synSpecial">'</span>
<span class="synComment"># タグを指定しても書き換えられる可能性がある</span>
gem <span class="synSpecial">'</span><span class="synConstant">my_rubygem</span><span class="synSpecial">'</span>, <span class="synConstant">github</span>: <span class="synSpecial">'</span><span class="synConstant">my_name/my_rubygem</span><span class="synSpecial">'</span>, <span class="synConstant">tag</span>: <span class="synSpecial">'</span><span class="synConstant">v1.0.0</span><span class="synSpecial">'</span>
<span class="synComment"># コミットの参照を指定するのはシンプルに見づらい</span>
gem <span class="synSpecial">'</span><span class="synConstant">my_rubygem</span><span class="synSpecial">'</span>, <span class="synConstant">github</span>: <span class="synSpecial">'</span><span class="synConstant">my_name/my_rubygem</span><span class="synSpecial">'</span>, <span class="synConstant">ref</span>: <span class="synSpecial">'</span><span class="synConstant">4aded</span><span class="synSpecial">'</span>
</pre>


<p>GitHub Packages は <code>rubygems.org</code> と同じように、バージョン指定が明確かつ一度リリースしたバージョンは変更できないので安全です。</p>

<h2 id="GitHub-Packages-を使ってプライベート-gem-を社内限定で公開する">GitHub Packages を使ってプライベート gem を社内限定で公開する</h2>

<p>ここからは実際に GitHub Packages を使ってプライベート gem を社内限定で公開する方法（主にリリースとインストールの仕方）を説明していきます。</p>

<p>今回は Organization は <code>feedforce</code>、gem の名前は <code>socialplus-rails</code> という想定です。</p>

<p>日本語版のドキュメントは文章やサンプルコードが古いケースがあるので、以下の英語版ドキュメントを参照した方が良いです。</p>

<p><a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry">Working with the RubyGems registry - GitHub Docs</a></p>

<p>認証に使う personal access token の権限については以下のドキュメントが詳しいです。</p>

<p><a href="https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages">About permissions for GitHub Packages - GitHub Docs</a></p>

<h3 id="gem-をリリースPublishする方法">gem をリリース（Publish）する方法</h3>

<p>まずは作成した gem をリリースする方法について説明します。</p>

<h4 id="ローカルからリリースする">ローカルからリリースする</h4>

<p>まとめると以下のような手順になります。</p>

<ol>
<li><code>〜/.gem/credentials</code> に GitHub の personal access token を追加

<ul>
<li>権限は <code>repo</code> と <code>write:packages</code> が必要</li>
</ul>
</li>
<li><code>$ gem build socialplus-rails.gemspec</code> で gem をビルド

<ul>
<li><code>SocialplusRails::VERSION</code> は <code>0.1.0</code> を想定</li>
</ul>
</li>
<li><code>$ gem push --key github --host https://rubygems.pkg.github.com/feedforce socialplus-rails-0.1.0.gem</code> で push する

<ul>
<li>この時に personal access token の権限が足りないとエラーになる</li>
</ul>
</li>
</ol>


<p>Push が成功すると <a href="https://github.com/orgs/feedforce/packages">https://github.com/orgs/feedforce/packages</a> のような Packages のページに反映されます 👏</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/d/daido1976/20211104/20211104160709.png" alt="f:id:daido1976:20211104160709p:plain" width="1200" height="492" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h4 id="CI-からリリースする">CI からリリースする</h4>

<p>gem のソースコードを更新した際に毎回上記のようにローカルからリリースしても良いのですが、できれば CI からリリースできるように仕組み化したいものです。</p>

<p>CircleCI の場合、以下のような <code>release</code> コマンドを定義して、リリース用のブランチがマージされた時に実行されるようにすれば OK です。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .circleci/config.yml</span>

<span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2.1</span>
<span class="synComment"># ...</span>
<span class="synIdentifier">commands</span><span class="synSpecial">:</span>
  <span class="synIdentifier">release</span><span class="synSpecial">:</span>
    <span class="synIdentifier">description</span><span class="synSpecial">:</span> Release to GitHub Packages
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span>
          <span class="synIdentifier">name</span><span class="synSpecial">:</span> Create GitHub Packages Credentials
          <span class="synIdentifier">command</span><span class="synSpecial">:</span> |
            mkdir ~/.gem || <span class="synConstant">true</span>
            echo -e <span class="synConstant">&quot;---</span><span class="synSpecial">\n</span><span class="synConstant">:github: Bearer ${GITHUB_ACCESS_TOKEN}&quot;</span> &gt; ~/.gem/credentials
            chmod <span class="synConstant">0600</span> ~/.gem/credentials
      <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span>
          <span class="synIdentifier">name</span><span class="synSpecial">:</span> Release Gem
          <span class="synIdentifier">command</span><span class="synSpecial">:</span> |
            gem build socialplus-rails.gemspec
            release_version=$(find . -name <span class="synConstant">&quot;socialplus-rails-*.gem&quot;</span> | sed -E <span class="synConstant">'s/\.\/socialplus-rails-(.*).gem/\1/'</span>)
            gem push --key github --host https://rubygems.pkg.github.com/feedforce <span class="synConstant">&quot;socialplus-rails-${release_version}.gem&quot;</span>
</pre>


<h3 id="各環境へのインストール方法">各環境へのインストール方法</h3>

<p>ここからはリリースした gem を各環境へインストールする方法を説明します。</p>

<p>Gemfile への記述は以下のようにします。<a href="#f-ff64d70e" name="fn-ff64d70e" title="See. https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry#installing-a-package">*1</a></p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Gemfile</span>
source <span class="synSpecial">'</span><span class="synConstant">https://rubygems.pkg.github.com/feedforce</span><span class="synSpecial">'</span> <span class="synStatement">do</span>
  gem <span class="synSpecial">'</span><span class="synConstant">socialplus-rails</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">0.1.0</span><span class="synSpecial">'</span>
<span class="synStatement">end</span>
</pre>


<h4 id="ローカルや本番環境でのインストール">ローカルや本番環境でのインストール</h4>

<p>以下のように <code>bundle config</code> コマンドで認証情報をセットしてから <code>bundle install</code> を行います。<a href="#f-54facd0e" name="fn-54facd0e" title="環境変数を利用して認証情報をセットすることもできるようです">*2</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># `USERNAME:TOKEN` は `{GitHubのユーザ名}:{Personal access token}` という形です（例: `daido1976:7axxx`）</span>
$ bundle config https://rubygems.pkg.github.com/feedforce USERNAME:TOKEN
$ bundle install
</pre>


<p>※ インストール時の認証に利用する personal access token には <code>read:packages</code> の権限のみあれば OK です</p>

<h4 id="Dependabot-でのインストール">Dependabot でのインストール</h4>

<p>GitHub Packages のプライベート gem をDependabot の更新対象にしたい場合は追加の設定が必要です。</p>

<p>以下のように設定ファイルで GitHub Packages の認証情報を渡す準備をします。<a href="#f-52f8882d" name="fn-52f8882d" title="See. https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#rubygems-server">*3</a></p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .github/dependabot.yml</span>

<span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>
<span class="synIdentifier">registries</span><span class="synSpecial">:</span>
  <span class="synIdentifier">rubygems-pkg-github</span><span class="synSpecial">:</span>
    <span class="synIdentifier">type</span><span class="synSpecial">:</span> rubygems-server
    <span class="synIdentifier">url</span><span class="synSpecial">:</span> https://rubygems.pkg.github.com
   <span class="synComment"> # BUNDLE_GITHUB_TOKEN の値は `USERNAME:TOKEN` という形式です</span>
    <span class="synIdentifier">token</span><span class="synSpecial">:</span> <span class="synConstant">&quot;${{secrets.BUNDLE_GITHUB_TOKEN}}&quot;</span>
</pre>


<p>以下ドキュメントを参考に GitHub Packages の認証情報（今回の例なら <code>BUNDLE_GITHUB_TOKEN</code>）を Dependabot 用の Secret として登録すれば完了です。<a href="#f-e337a98d" name="fn-e337a98d" title="Secret はリポジトリ単位とオーガニゼーション単位のどちらでも設定できます">*4</a></p>

<p><a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/managing-encrypted-secrets-for-dependabot">Managing encrypted secrets for Dependabot - GitHub Docs</a></p>

<h2 id="関連記事">関連記事</h2>

<ul>
<li><a href="https://tech.pepabo.com/2021/09/10/in-house-rubygems-registry-with-ghes-github-packages/">GitHub Enterprise Server&#x306E;GitHub Packages&#x3067;&#x793E;&#x5185;&#x7528;gem&#x3092;&#x30DB;&#x30B9;&#x30C8;&#x3059;&#x308B; - &#x30DA;&#x30D1;&#x30DC;&#x30C6;&#x30C3;&#x30AF;&#x30D6;&#x30ED;&#x30B0;</a></li>
<li><a href="https://tech.actindi.net/2020/06/12/180000">GitHub Actions&#x3092;&#x5229;&#x7528;&#x3057;&#x3066;gem&#x3092;GitHub Packages&#x306B;&#x516C;&#x958B;&#x3059;&#x308B; - &#x30A2;&#x30AF;&#x30C8;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x958B;&#x767A;&#x8005;&#x30D6;&#x30ED;&#x30B0;</a></li>
<li><a href="https://chocoby.com/blog/2021/09/21/dependabot-github-packages-gem">Dependabot &#x3067; GitHub Packages &#x306B;&#x516C;&#x958B;&#x3057;&#x305F; Gem &#x306E;&#x30A2;&#x30C3;&#x30D7;&#x30C7;&#x30FC;&#x30C8;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B; - &#x6687;&#x4EBA;&#x3058;&#x3083;&#x306A;&#x3044;</a></li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-ff64d70e" name="f-ff64d70e" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">See. <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry#installing-a-package">https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry#installing-a-package</a></span></p>
<p class="footnote"><a href="#fn-54facd0e" name="f-54facd0e" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://tech.pepabo.com/2021/09/10/in-house-rubygems-registry-with-ghes-github-packages/#%E3%83%AC%E3%82%B8%E3%82%B9%E3%83%88%E3%83%AA%E3%81%8B%E3%82%89%E3%81%AEgem%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">環境変数を利用して認証情報をセットすることもできるようです</a></span></p>
<p class="footnote"><a href="#fn-52f8882d" name="f-52f8882d" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">See. <a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#rubygems-server">https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#rubygems-server</a></span></p>
<p class="footnote"><a href="#fn-e337a98d" name="f-e337a98d" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text">Secret はリポジトリ単位とオーガニゼーション単位のどちらでも設定できます</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[OAuth の state パラメータに JWT を使ってステートレスにする]]></title>
        <id>https://developer.feedforce.jp/entry/2021/10/25/120000</id>
        <link href="https://developer.feedforce.jp/entry/2021/10/25/120000"/>
        <updated>2021-10-25T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://socialplus.jp/">ソーシャルPLUS</a> の <a href="http://blog.hatena.ne.jp/mashabow/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mashabow/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mashabow</a> です。今回は、個人で開発している Slack アプリ <a href="https://github.com/mashabow/slack-rota">Rota</a> を OAuth に対応させたときに、へーっと思った話の紹介です。</p>

<p>ちなみにこの Rota は、指定した曜日・時間が来るたびに、ローテーションを順次お知らせしてくれる Slack アプリです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211025/20211025113857.png" alt="f:id:mashabow:20211025113857p:plain" width="1338" height="242" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmashabow%2Fslack-rota" title="GitHub - mashabow/slack-rota: 日々のローテーションをお知らせする Slack アプリ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/mashabow/slack-rota">github.com</a></cite></p>

<h2>経緯</h2>

<p>この Slack アプリ Rota は、Slack 公式が出している <a href="https://slack.dev/bolt-js/ja-jp/tutorial/getting-started">Bolt</a> というフレームワークを使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fslack.dev%2Fbolt-js%2Fja-jp%2Ftutorial%2Fgetting-started" title="Slack | Bolt for JavaScript" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://slack.dev/bolt-js/ja-jp/tutorial/getting-started">slack.dev</a></cite></p>

<p>Slack アプリを任意のワークスペースにインストールしてもらうためには、OAuth に対応させる必要があります。今回は Bolt のおかげで<a href="https://github.com/mashabow/slack-rota/issues/43">比較的簡単に対応できた</a>のですが、その中で出てきた <code>stateSecret</code> というオプションがどう使われるのか、いまいちわかりません。Bolt の<a href="https://slack.dev/bolt-js/ja-jp/reference#%E3%83%AC%E3%82%B7%E3%83%BC%E3%83%90%E3%83%BC%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">リファレンス</a>には</p>

<blockquote><p>  CSRF 攻撃を防ぐために OAuth の設定時に渡すことができる、推奨のパラメーター（文字列）。</p></blockquote>

<p>と説明があるので、OAuth の <code>state</code> パラメータに関係がありそうですが……。</p>

<p>というわけで、気になって中身をのぞいてみました。</p>

<h2><code>state</code> パラメータのおさらい</h2>

<p>その前に、そもそも OAuth の <code>state</code> パラメータって何？という方もいるかもしれません。こちらの記事で非常にわかりやすく図解されているのですが、要は <strong>CSRF 対策</strong>のためのものです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech-lab.sios.jp%2Farchives%2F8492" title="OAuthやOpenID Connectで使われるstateパラメーターについて | SIOS Tech. Lab" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech-lab.sios.jp/archives/8492">tech-lab.sios.jp</a></cite></p>

<p>この記事に倣って図解すると、Slack アプリの場合はこういう関係ですね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222035.png" alt="f:id:mashabow:20211022222035p:plain" width="2000" height="1120" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><code>state</code> パラメータを使うと 3. の前でチェックが入るため、このような CSRF 攻撃を防ぐことができます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222117.png" alt="f:id:mashabow:20211022222117p:plain" width="2000" height="1121" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2>保存をしない state store…？</h2>

<p>話を戻して、Bolt の <code>stateSecret</code> オプションを追いかけてみます。Bolt の OAuth まわりの処理は、<a href="https://github.com/slackapi/node-slack-sdk/tree/%40slack/oauth%402.3.0/packages/oauth">@slack/oauth</a> というライブラリで実装されています。@slack/oauth の README を読んでみると、<a href="https://github.com/slackapi/node-slack-sdk/blob/%40slack/oauth%402.3.0/packages/oauth/README.md#using-a-custom-state-store">Using a custom state store</a> に説明がありました。</p>

<blockquote><p>A state store handles generating the OAuth <code>state</code> parameter in the installation URL for a given set of options, and verifying the <code>state</code> in the OAuth callback and returning those same options.</p></blockquote>

<p>ふむふむ。ここまでは上で確認したような話ですね。<code>state</code> パラメータを生成しておいて、コールバック（認可画面からのリダイレクト）のときにその値が正しいかチェックする。そして、@slack/oauth が <em>options</em> と呼んでいるオブジェクト（Slack ワークスペースの ID やスコープの情報が入る）を返します。このようなインターフェイスを、state store と言っているようです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222224.png" alt="f:id:mashabow:20211022222224p:plain" width="2000" height="1120" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>次に行きます。state store のデフォルトの実装である <code>ClearStateStore</code>の説明です。</p>

<blockquote><p>The default state store, <code>ClearStateStore</code>, does not use any storage. Instead, it signs the options (using the <code>stateSecret</code>) and encodes them along with a signature into <code>state</code>. Later during the OAuth callback, it verifies the signature.</p></blockquote>

<p>なんと。state store という名前から「どこかに <code>state</code> パラメータと options の組を保存するんだろうな」と思っていたんですが、<code>ClearStateStore</code> では<strong>どちらも保存していない</strong>ようです。</p>

<h2>JWT を使った <code>ClearStateStore</code></h2>

<p>では、<code>ClearStateStore</code> の実装を見てみましょう。以下に出てくる <code>sign()</code> と <code>verify()</code> は、JWT を扱うための npm ライブラリ <a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a> の関数です。</p>

<p><a href="https://github.com/slackapi/node-slack-sdk/blob/%40slack/oauth%402.3.0/packages/oauth/src/index.ts#L17-L36">node-slack-sdk/index.ts at @slack/oauth@2.3.0 &middot; slackapi/node-slack-sdk &middot; GitHub</a></p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">public</span> <span class="synStatement">async</span> generateStateParam<span class="synStatement">(</span>installOptions: InstallURLOptions<span class="synStatement">,</span> now: <span class="synSpecial">Date</span><span class="synStatement">)</span>: <span class="synSpecial">Promise</span><span class="synStatement">&lt;</span><span class="synType">string</span><span class="synStatement">&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> sign<span class="synStatement">(</span><span class="synIdentifier">{</span> installOptions<span class="synStatement">,</span> now: now.toJSON<span class="synStatement">()</span> <span class="synIdentifier">}</span><span class="synStatement">,</span> <span class="synIdentifier">this</span>.stateSecret<span class="synStatement">);</span>
<span class="synIdentifier">}</span>
</pre>


<p>認可画面に遷移する際、<code>generateStateParam()</code> で  <code>state</code> パラメータを生成します。ここでは、options （上のコードでは <code>installOptions</code>）と時刻をペイロードとする JWT を生成して、返しています。冒頭で「なにこれ？」と思った <strong><code>stateSecret</code> は、JWT の署名に使う共通鍵</strong>だったんですね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222430.png" alt="f:id:mashabow:20211022222430p:plain" width="2000" height="1120" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">public</span> <span class="synStatement">async</span> verifyStateParam<span class="synStatement">(</span>_now: <span class="synSpecial">Date</span><span class="synStatement">,</span> state: <span class="synType">string</span><span class="synStatement">)</span>: <span class="synSpecial">Promise</span><span class="synStatement">&lt;</span>InstallURLOptions<span class="synStatement">&gt;</span> <span class="synIdentifier">{</span>
  <span class="synComment">// decode the state using the secret</span>
  <span class="synType">const</span> decoded: StateObj <span class="synStatement">=</span> verify<span class="synStatement">(</span>state<span class="synStatement">,</span> <span class="synIdentifier">this</span>.stateSecret<span class="synStatement">)</span> <span class="synStatement">as</span> StateObj<span class="synStatement">;</span>

  <span class="synComment">// return installOptions</span>
  <span class="synStatement">return</span> decoded.installOptions<span class="synStatement">;</span>
<span class="synIdentifier">}</span>
</pre>


<p>認可後のリダイレクトでは、<code>verifyStateParam()</code> で  <code>state</code> パラメータを検証します。ここでは、共通鍵 <code>stateSecret</code> で JWT の署名を検証しています。ペイロードが改竄されていればここでエラーになり、処理が中断されます。検証が通ったら、ペイロードの options を取り出して返します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222510.png" alt="f:id:mashabow:20211022222510p:plain" width="2000" height="1120" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2>CSRF 対策になっていることを確認</h2>

<p>この <code>ClearStateStore</code> で本当に CSRF 攻撃が防げるのか、確認してみましょう。</p>

<p>まずは通常の攻撃シナリオ。悪い人が自分のワークスペースで認可を行い、リダイレクト URL を取得します（1.）。このリダイレクト URL には、<code>state</code> パラメータが含まれています。このリダイレクト URL をそのまま A さんに送りつけ、 A さんに踏ませる（2.）とどうなるでしょうか？</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222531.png" alt="f:id:mashabow:20211022222531p:plain" width="2000" height="1121" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>Slack アプリの <code>ClearStateStore</code> は、まず  <code>state</code> パラメータの有効性を検証します（3.）。JWT の署名を検証するわけですが、このシナリオでは、悪い人の JWT は何も改竄されていません。したがって、<strong>JWT は有効</strong>だと判断され、処理は続行されます。次に、JWT から options を取り出し（4.）、これを使って Slack からアクセストークンを取得します（5.）。Slack からは悪い人のアクセストークンが返ってきますが、Slack アプリは<strong>それを悪い人のアクセストークンだとして（正しく）格納</strong>します（6.）。したがって、A さんには何も影響ありません。</p>

<p>別のシナリオも検討してみます。先ほどのシナリオで見たように、Slack アプリは JWT から options を取り出し、アクセストークンを取得・格納していました。JWT の中の options を書き換えれば、悪い人のアクセストークンを A さんのものとして格納できないでしょうか？</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20211022/20211022222547.png" alt="f:id:mashabow:20211022222547p:plain" width="2000" height="1120" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>はい、これは JWT の署名検証で引っかかるので、不可能ですね。</p>

<p>以上のことから、一般的な <code>state</code> パラメータの実装と同じく、<code>ClearStateStore</code> でも CSRF 対策になっていることがわかりました。</p>

<h2>まとめ</h2>

<p>というわけで、JWT をうまいこと使うと、<code>state</code> パラメータを OAuth クライアントに保存しておく必要がなくなります。通常の実装だと、生成した <code>state</code> パラメータを適当な key-value ストアなどに保存しますが、これが不要になるのは楽ですね。ステートレスになるので FaaS との相性もよくなります（とはいえもちろん、取得したアクセストークンはどこかに保存しておく必要があります）。</p>

<p>今回は Bolt を使って Slack アプリのインストール処理を実装しましたが、OAuth まわりの詳細についてはほとんど意識することなく実現でき、かなり楽ちんで快適でした。よく考えられてますね。</p>

<h2>おまけ</h2>

<p>ソーシャルPLUS では、現在フロントエンドエンジニア・バックエンドエンジニアを募集中です。Shopify アプリのリリースや LINE 社との業務提携を経て、やりたいことがますます盛りだくさんな状況です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21755" title="フロントエンドエンジニア【Shopifyアプリ開発/ID連携サービス/React/TypeScript】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21755">open.talentio.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21802" title="Railsエンジニア【Shopify App開発/ID連携サービス】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21802">open.talentio.com</a></cite></p>

<p>ご興味ありましたら、カジュアル面談にぜひどうぞ！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Shopify】Liquid 上で「現在の日付から◯日後」を表現する方法]]></title>
        <id>https://rewired.cloud/how-to-add-days-to-date-shopify/</id>
        <link href="https://rewired.cloud/how-to-add-days-to-date-shopify/"/>
        <updated>2021-10-01T01:05:52.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://rewired.cloud/wp-content/uploads/2021/09/211001_day-to-date_title-520x300.jpg" class="webfeedsFeaturedVisual" width="520" height="300" /></p>　 「◯日後」を表現したいシーンは多い 製品ページや顧客へのメールに配送予定日を表示したり、レッスンや新商品の予約可能日を自動的に変更するなど、Eコマースのインターフェースで「今から◯日後」を表現したいシーンは多いと思い ... ]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rubocop Challenger 作者が教えるオススメの使い方。 〜 .rubocop_todo.yml 解消後も消さないで残しておくと良いことがあります！〜]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/09/24/113000</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/09/24/113000"/>
        <updated>2021-09-24T02:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>1 ヶ月も前になってしまいましたが、クラッソーネの <a href="https://twitter.com/yamat47">@yamat47</a> さんが拙作の <a href="https://github.com/ryz310/rubocop_challenger">rubocop_challenger</a> を使って <code>.rubocop_todo.yml</code> を解消した、というブログを書いて下さいました。</p>

<p>かつての自分と同じような課題を抱えていた方に自分の gem を役立てて頂けたのは本当に嬉しいです。
ブログ化までして下さった @yamat47 さん、本当にありがとうございます！</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">今年に入ってからちょっとずつ進めてたRuboCopのTodoとの戦いをまとめて記事にしました！こんな感じの、開発者向けの改善をするのもめちゃ好きです😀<a href="https://t.co/82F6xmAKko">https://t.co/82F6xmAKko</a></p>&mdash; Takuya Yamaguchi (@yamat47) <a href="https://twitter.com/yamat47/status/1427785662602743811?ref_src=twsrc%5Etfw">August 18, 2021</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>また、gem の README では Circle CI を使った方法しか紹介してなかったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> Actions を使った方法についても解説して頂いており、重ね重ね感謝感激です🙏
<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> の README からもリンク貼らせて頂きました！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fzenn.dev%2Fyamat47%2Farticles%2F219e14ebcf31a1d13ff4" title="RuboCop ChallengerをGitHub Actionsで動かす" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://zenn.dev/yamat47/articles/219e14ebcf31a1d13ff4">zenn.dev</a></cite></p>

<h2>一方で、ひとつ気になったことが。。</h2>

<blockquote><p>自動で解消できるものがなくなって以降はRuboCop Challengerの仕組みが不要になったので、最後は削除してしまいました。</p>

<p><img src="https://tech.crassone.jp/images/posts/resolve-rubocop-todos-step-by-step/good-bye-rubocop-challenger.png" alt="手動で対応した履歴" /></p>

<p>ありがとう、RuboCop Challenger...!!</p></blockquote>

<p>待って！
<strong>Rubocop Challenger は消さないで残しておくと良いことがあります！</strong></p>

<h2>Rubocop Challenger は v2.0.0 から bundle update 機能も兼ね備えています</h2>

<p>本家 RuboCop の gem をアップデートする時、新しく追加された Cop によってエラーが出てしまった、という経験は無いでしょうか？
このエラーの解消が億劫で gem のアップデートを放置してしまっている方もいるかも知れません。</p>

<p>Rubocop Challenger v1.0.0 のテーマは「負債の解消」だったんですが、 v2.0.0 からは「RuboCop との共生」だったりします。</p>

<p>誰にも話したこと無いので今始めて公表しました←</p>

<p>v2.0.0 以上の Rubocop Challenger では最初に RuboCop 関連の gem に対して <code>bundle update</code> を実行するようになっています。</p>

<p>最新の RuboCop にアップデートした状態で Rubocop Challenge を実行するので、新しく追加された Cop に違反したコードがあった場合、その場で即 <code>auto-correct</code> を実行し、<a href="https://github.com/ryz310/my_api_client/pull/616">以下のような PR</a> を作成してくれます。</p>

<p><figure class="figure-image figure-image-fotolife" title="PR1"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923205915.png" alt="f:id:ryz310:20210923205915p:plain" width="949" height="388" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption><a class="keyword" href="http://d.hatena.ne.jp/keyword/RSpec">RSpec</a>/ExcessiveDocstringSpacing を修正した PR が作成されました</figcaption></figure>
<figure class="figure-image figure-image-fotolife" title="PR2"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923210041.png" alt="f:id:ryz310:20210923210041p:plain" width="1200" height="455" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>同 PR で <code>rubocop-rspec</code> が v2.4.0 から v2.5.0 にアップデートされています</figcaption></figure></p>

<p>一方 dependabot も <code>rubocop-rspec</code> v2.5.0 の bundle update の PR を作成してくれていますが、こちらは CI の RuboCop チェックでエラーになっています。
RuboCop の CI チェックをパスしないと merge 出来ない設定にしている場合も多いと思いますが、これを修正するのは地味に面倒です。</p>

<p><figure class="figure-image figure-image-fotolife" title="aaa"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923210548.png" alt="f:id:ryz310:20210923210548p:plain" width="936" height="364" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923210545.png" alt="f:id:ryz310:20210923210545p:plain" width="955" height="291" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>RuboCop の CI チェックでエラー</figcaption></figure></p>

<p>ちなみに違反したコードが存在しない場合は <a href="https://github.com/ryz310/rubocop_challenger/pull/531">Re-generate .rubocop_todo.yml with RuboCop v1.21.0</a> のような PR が作成され、 <code>bundle update</code> を実行しただけの PR が作成されます。</p>

<p>この機能は地味に便利なので、CI のスケジュール実行を使って週イチくらいで動かすのがオススメの使い方です。</p>

<h2>v2.0.0 以降の RuboCop Challenger は Gemfile に含めない事をオススメします</h2>

<p><code>v2.0.0</code> あたりから RuboCop Challenger を Gemfile に含めて実行すると、他の gem との互換性問題でエラーになるケースを確認しております🙏
現在では以下のように CI での実行時に <code>gem install rubocop_challenger</code> を実行する方法をオススメしております。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .circleci/config.yml</span>
<span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">rubocop_challenge</span><span class="synSpecial">:</span>
    <span class="synIdentifier">docker</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">image</span><span class="synSpecial">:</span> circleci/ruby:3.0
    <span class="synIdentifier">working_directory</span><span class="synSpecial">:</span> ~/repo
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>checkout
      <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span>
          <span class="synIdentifier">name</span><span class="synSpecial">:</span> Rubocop Challenge
          <span class="synIdentifier">command</span><span class="synSpecial">:</span> |
            gem install rubocop_challenger
            rubocop_challenger go \
              --email=rubocop-challenger@example.com \
              --name=&quot;Rubocop Challenger&quot;

<span class="synIdentifier">workflows</span><span class="synSpecial">:</span>
  <span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

  <span class="synIdentifier">nightly</span><span class="synSpecial">:</span>
    <span class="synIdentifier">triggers</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">schedule</span><span class="synSpecial">:</span>
          <span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;30 23 * * 1,2,3&quot;</span><span class="synComment"> # 8:30am every Tuesday, Wednsday and Thursday (JST)</span>
          <span class="synIdentifier">filters</span><span class="synSpecial">:</span>
            <span class="synIdentifier">branches</span><span class="synSpecial">:</span>
              <span class="synIdentifier">only</span><span class="synSpecial">:</span>
                <span class="synStatement">- </span>master
    <span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>rubocop_challenge
</pre>


<p>こちらは完全に自分がやらかしたというか、会社で書いた以下のブログの内容が古いまま更新しなかったため、 <code>Gemfile</code> に <code>rubocop_challenger</code> を入れて使っている方が沢山 (?) いるかも知れません。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> の README ですら間違っていたので、さっき慌てて修正しました。。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F12%2F05%2F140000" title="まだ .rubocop_todo.yml で消耗してるの？ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/12/05/140000">developer.feedforce.jp</a></cite></p>

<p>古い方法で使ってしまった皆さん、本当にすみません。。</p>

<p><code>rubocop_challenger</code> を Gemfile に含めるのが<code>.rubocop_todo.yml</code> 解消後にアンインストールしたくなる理由の一つだと思うので、これで使い続ける人が増えてくれると嬉しいです🙏</p>

<h2>安全な auto-correct かどうかが分かります</h2>

<p>特にアナウンスしていなかった気がするのでついでにご紹介しておくと、最新の Rubocop Challenger では「安全な auto-correct」かどうかが分かるようになっていて、 PR の本文に以下のような記述が入るようになっています。</p>

<p><figure class="figure-image figure-image-fotolife" title="安全な auto-correct "><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923215918.png" alt="f:id:ryz310:20210923215918p:plain" width="426" height="156" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>✅ 安全な auto-correct</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="安全でない auto-correct"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210923/20210923220846.png" alt="f:id:ryz310:20210923220846p:plain" width="427" height="168" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>⚠️ 安全でない auto-correct</figcaption></figure></p>

<p>RuboCop 公式によると「安全な auto-correct」の場合、元の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>が壊れる心配は無いとのことなので、 PR merge する際の判断材料にして頂ければ。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[MAU, DAU も計測できるようになった redis-objects-daily-counter v0.3.0]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/09/23/203804</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/09/23/203804"/>
        <updated>2021-09-23T11:38:04.000Z</updated>
        <summary type="html"><![CDATA[<p>前回のブログで <a href="https://github.com/ryz310/redis-objects-daily-counter">redis-objects-daily-counter</a> という gem を作ったという話をしました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fryz310.hateblo.jp%2Fentry%2F2021%2F09%2F20%2F172054" title="Redis::Objects を使ったサービス改善と新しい gem を作ったお話 - 逃げる8回で会心の一撃" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ryz310.hateblo.jp/entry/2021/09/20/172054">ryz310.hateblo.jp</a></cite></p>

<p>今回は <code>v0.3.0</code> をリリースしたのでそちらのご紹介です。</p>

<h2>【おさらい】redis-objects-daily-counter はどういう gem なのか</h2>

<p><a href="https://github.com/nateware/redis-objects">redis-objects</a> gem の拡張として作られており、日付の変更毎に新しい  counter を定義してくれる <code>daily_counter</code> 機能を提供する gem です。</p>

<p>例えば以下のような <code>Homepage</code> という class で <code>daily_counter :pv</code> という定義をします。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">Homepage</span>
  <span class="synPreProc">include</span> <span class="synType">Redis</span>::<span class="synType">Objects</span>

  daily_counter <span class="synConstant">:pv</span>, <span class="synConstant">expireat</span>: -&gt; { <span class="synType">Time</span>.now + <span class="synConstant">2_678_400</span> } <span class="synComment"># about a month</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">id</span>
    <span class="synConstant">1</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>すると以下のように <code>#pv</code> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>メソッドが使えるようになります。
これは <code>redis-objects</code> gem の <code>counter</code> の拡張であり、 <code>#increment</code> や <code>#decrement</code> というメソッドで Redis 上の値を更新することが可能です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-01</span>
homepage = <span class="synType">Homepage</span>.new
homepage.id <span class="synComment"># 1</span>

homepage.pv.increment
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 3</span>
</pre>


<p><code>daily_counter</code> が <code>counter</code> とどのように違うかというと、日付が変わるとRedis 上の Key が変化するという点です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-02 (next day)</span>
puts homepage.pv.value <span class="synComment"># 0</span>
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 2</span>
</pre>


<p>これは、 <code>daily_counter</code> が以下のようなルールに則って Redis の Key にアクセスするように振る舞うためです。</p>

<pre class="code" data-lang="" data-unlink>model_name:id:field_name:yyyy-mm-dd</pre>


<p>なお、この時の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3">タイムゾーン</a>は実行中の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> プロセスの標準<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3">タイムゾーン</a>に従いますが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 上で実行した場合は <code>application.rb</code> で指定した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%BE%A1%BC%A5%F3">タイムゾーン</a>に従います。</p>

<p>日付が変わった後も、前日までの Key-<a class="keyword" href="http://d.hatena.ne.jp/keyword/Value">Value</a> は削除していないので、 <code>#range</code> や <code>#[]</code> や <code>#at</code> というメソッドでアクセスすることが可能です。
ちなみに <code>#range</code> や <code>#[]</code> では値が返却されますが、 <code>#at</code> では <code>Redis::Counter</code> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>が返却されます。
<code>v0.2.0</code> までは <code>#[]</code> と <code>#at</code> は同じ挙動でしたが、 <code>v0.3.0</code> からそういう実装に変わりました 🙏</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-01</span>
homepage.pv.increment(<span class="synConstant">3</span>)

<span class="synComment"># 2021-04-02 (next day)</span>
homepage.pv.increment(<span class="synConstant">2</span>)

<span class="synComment"># 2021-04-03 (next day)</span>
homepage.pv.increment(<span class="synConstant">5</span>)

homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)] <span class="synComment"># =&gt; 3</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synConstant">3</span>] <span class="synComment"># =&gt; [3, 2, 5]</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)..<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)] <span class="synComment"># =&gt; [3, 2]</span>

homepage.pv.delete_at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>))
homepage.pv.range(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">3</span>)) <span class="synComment"># =&gt; [0, 2, 5]</span>
homepage.pv.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)) <span class="synComment"># =&gt; #&lt;Redis::Counter key=&quot;homepage:1:pv:2021-04-02&quot;&gt;</span>
homepage.pv.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)).value <span class="synComment"># 2</span>
</pre>


<h2>v0.3.0 で追加された機能とは</h2>

<p><code>daily_counter</code> に加えて <code>daily_set</code> が追加されました。
こちらは <code>redis-objects</code> gem の <code>set</code>に <code>daily-</code> 機能を追加したものになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">Homepage</span>
  <span class="synPreProc">include</span> <span class="synType">Redis</span>::<span class="synType">Objects</span>

  daily_set <span class="synConstant">:dau</span>, <span class="synConstant">expireat</span>: -&gt; { <span class="synType">Time</span>.now + <span class="synConstant">2_678_400</span> } <span class="synComment"># about a month</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">id</span>
    <span class="synConstant">1</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

homepage.dau &lt;&lt; <span class="synSpecial">'</span><span class="synConstant">user1</span><span class="synSpecial">'</span>
homepage.dau &lt;&lt; <span class="synSpecial">'</span><span class="synConstant">user2</span><span class="synSpecial">'</span>
homepage.dau &lt;&lt; <span class="synSpecial">'</span><span class="synConstant">user1</span><span class="synSpecial">'</span> <span class="synComment"># dup ignored</span>
puts homepage.dau.members <span class="synComment"># ['user1', 'user2']</span>
puts homepage.dau.length <span class="synComment"># 2</span>
puts homepage.dau.count <span class="synComment"># alias of #length</span>
</pre>


<p><code>set</code> は重複を受け付けない <code>Array</code> と考えて良いと思います。
上記の例を見てもらうと分かりますが <code>user1</code> を 2 回追加しても <code>#members</code> による取得結果には 1 つしか含まれていません。</p>

<p>これを使って何が実現できるかというと、 DAU (Daily Active User) の計測です。
ログインしたユーザーの ID を <code>daily_set</code> で定義した変数に追加していくことで、その日アクティブだったユーザー一覧とその数を知ることが出来ます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-01</span>
homepage.dau.merge(<span class="synSpecial">'</span><span class="synConstant">user1</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">user2</span><span class="synSpecial">'</span>)
puts homepage.dau.members <span class="synComment"># ['user1', 'user2']</span>

<span class="synComment"># 2021-04-02 (next day)</span>
puts homepage.dau.members <span class="synComment"># []</span>

homepage.dau.merge(<span class="synSpecial">'</span><span class="synConstant">user2</span><span class="synSpecial">'</span>, <span class="synSpecial">'</span><span class="synConstant">user3</span><span class="synSpecial">'</span>)
puts homepage.dau.members <span class="synComment"># ['user2', 'user3']</span>

<span class="synComment"># 2021-04-03 (next day)</span>
homepage.dau.merge(<span class="synSpecial">'</span><span class="synConstant">user4</span><span class="synSpecial">'</span>)

homepage.dau.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)) <span class="synComment"># =&gt; #&lt;Redis::Set key=&quot;homepage:1:dau:2021-04-02&quot;&gt;</span>
homepage.dau.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)).members <span class="synComment"># =&gt; ['user2', 'user3']</span>
homepage.dau.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)).length <span class="synComment"># =&gt; 2</span>
</pre>


<p><code>#range</code> や <code>#[]</code> を使う事で指定した期間内の値を結合することも出来ます。
これによって DAU 目的で記録した値から MAU を求めることも可能です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>homepage.dau[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)] <span class="synComment"># =&gt; ['user1', 'user2']</span>
homepage.dau[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synConstant">3</span>] <span class="synComment"># =&gt; ['user1', 'user2', 'user3', 'user4']</span>
homepage.dau[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)..<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)] <span class="synComment"># =&gt; ['user1', 'user2', 'user3']</span>

homepage.dau.delete_at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>))
homepage.dau.range(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">3</span>)) <span class="synComment"># =&gt; ['user2', 'user3', 'user4']</span>
</pre>


<p><code>#at</code> で一日ずつ値を取得して <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> の <code>Array#uniq</code> を使っても同じ結果が得られますが、 <code>#range</code> や <code>#[]</code> の方が内部で <a href="https://redis.io/commands/sunion">Redis の <code>SUNION</code></a> を利用するため高速だと思います。</p>

<p>ちなみに <code>#range</code> や <code>#[]</code> の結果は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> の Array なので、 <code>#length</code> を使って長さを求める際は実行中のマシンリソースを消費します。
一方 <code>#at</code> では <code>Redis::Set</code> を返しており、 <code>Redis::Set#length</code> は内部で <a href="https://redis.io/commands/scard">Redis の <code>SCARD</code></a> を実行するため、 <code>#length</code> は <code>#at</code> からの方が高速だと思います。
ただし一定期間の値の結合は <code>#range</code> や <code>#[]</code> を使う必要があるので、結局マシンリソースの消費は避けられないですね。。</p>

<p>この辺りの仕様は実装していてかなり頭を悩ませました。なので今後のアップデートで破壊的な変更が入るかも知れません。</p>

<h2><code>monthly_set</code> なども実装してあります</h2>

<p>前回の記事でも紹介したような <code>monthly_counter</code> に相当する <code>monthly_set</code> なども使えます。
MAU, WAU, DAU で使い分けると良いかと思います。</p>

<ul>
<li><code>annual_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy</code></li>
<li>Redis is a highly volatile key-<a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a> store, so I don't recommend using it.</li>
</ul>
</li>
<li><code>monthly_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm</code></li>
</ul>
</li>
<li><code>weekly_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyyWw</code></li>
</ul>
</li>
<li><code>daily_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-dd</code></li>
</ul>
</li>
<li><code>hourly_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh</code></li>
</ul>
</li>
<li><code>minutely_set</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh:mi</code></li>
</ul>
</li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis::Objects を使ったサービス改善と新しい gem を作ったお話]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/09/20/172054</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/09/20/172054"/>
        <updated>2021-09-20T08:20:54.000Z</updated>
        <summary type="html"><![CDATA[<p>半年ぶりくらいに会社の勉強会で発表しました。</p>

<iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/58bb74a90a8b444e8607850fc76d8eb7" title="Redis::Objects で遊んでみよう" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;"></iframe>


<p>Redis::Objects という gem を使って RDS にかかっていた IO 負荷を改善した、という話と、 Redis::Objects を拡張する gem を作ったという話（後述）です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fredis-objects-daily-counter" title="GitHub - ryz310/redis-objects-daily-counter: Daily counter within Redis::Objects. Works with any class or ORM." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/redis-objects-daily-counter">github.com</a></cite></p>

<p>Redis を使って DB の負荷を下げる系のお話って 2010 年代にされ尽くした感があって、今更な気もするんですが、一周回って最近聞かない話だなーと思ってます。
フロントエンドエンジニアで最近サーバーサイドも触る機会が増えたような方々にウケが良かった感じがありますね。</p>

<hr />

<p>一方で社内のインフラエンジニアからは Redis ってメンテナンスの手間が掛かって評判悪いですね。
使うだけなら手軽で楽なんですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> のアップデートでダウンタイムが発生する時に利用者向けにアナウンスしないといけなかったり。
ダウンタイムと言っても深夜に数秒〜数分なので影響は少ないと思うんですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%BF%A1%BC%A5%D7%A5%E9%A5%A4%A5%BA">エンタープライズ</a>向けのサービスとかやってるとこの辺は厳しいですね。</p>

<p><a href="https://cloud.google.com/blog/ja/products/management-tools/sre-error-budgets-and-maintenance-windows">SRE のエラーバジェットの概念</a> が日本全体に浸透すればソフトウェア開発の生産性は底上げされるんじゃないかと思うのですが、この辺は時間を掛けて少しずつ啓蒙していくしか無いですね。例えば日本の生活インフラ（電気・水道・ガスとか電車とか）ってめっちゃ高水準なので、ソフトウェアの世界でも100％稼働することが当たり前という価値観になってしまうんじゃないかな、と思うのですが、この辺の価値観は表裏一体というか、当たり前と感じているから高品質になる一方で、生産性は下がってしまうという構図だと思っています。</p>

<p><a href="https://www.nic.ad.jp/ja/materials/iw/2017/proceedings/s15/s15-fujisaki.pdf">https://www.nic.ad.jp/ja/materials/iw/2017/proceedings/s15/s15-fujisaki.pdf</a>
<figure class="figure-image figure-image-fotolife" title="SREの信条 (Google)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210920/20210920165304.png" alt="f:id:ryz310:20210920165304p:plain" width="963" height="527" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>SREの信条 (<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>)</figcaption></figure></p>

<p>一応メンテナンスの手間、という点では夏頃に <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> から <a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a> MemoryDB for Redis というフルマネージドな Redis が発表されています。
東京リージョンは未対応で、書き込み速度が遅くなっていたり、料金も若干高くなっていたりしますが、気になるサービスではありますね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdev.classmethod.jp%2Farticles%2Faws-release-durable-redis-amazon-memorydb-for-redis%2F" title="Redisに耐久性が加わったAmazon MemoryDB for Redisが登場 | DevelopersIO" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://dev.classmethod.jp/articles/aws-release-durable-redis-amazon-memorydb-for-redis/">dev.classmethod.jp</a></cite></p>

<hr />

<p>さて、この記事のメインは冒頭で触れた Redis::Objects を拡張する gem を作ったよ、という話です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fredis-objects-daily-counter" title="GitHub - ryz310/redis-objects-daily-counter: Daily counter within Redis::Objects. Works with any class or ORM." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/redis-objects-daily-counter">github.com</a></cite></p>

<p>発端は Redis::Objects の <code>counter</code> を使ってサービスの効果測定（メール配信数、CV 数、ログイン数など）をしたいなーと考えたことなんですが、効果測定って一定の期間毎に集計して改善した・していないの指標にしたいやつじゃないですか？
<code>counter</code> でカウントアップしつつ、日次の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>で集計すれば良いんですが、それだとあまり気軽じゃないというか、測定対象となるサービス開発の後、測定ロジックと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>、保存先の DB テーブル作成までセットで実装しないと実現できないですよね。</p>

<p>これはサクッと実装するには <code>counter</code> が自動で日次で保存先を切り替えてくれれば良さそう、ということで、 <code>redis-objects-daily-counter</code> という gem は <code>daily_counter</code> という日次で保存先を切り替えるカウンター機能を提供します。
Redis::Objects を拡張して作ってあるので、使い方はほぼ同じで、対象としたい Class に <code>include Redis::Objects</code> を追加すると使えるようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># Gemfile</span>
gem <span class="synSpecial">'</span><span class="synConstant">redis-objects-daily-counter</span><span class="synSpecial">'</span>
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">Homepage</span>
  <span class="synPreProc">include</span> <span class="synType">Redis</span>::<span class="synType">Objects</span>

  daily_counter <span class="synConstant">:pv</span>, <span class="synConstant">expireat</span>: -&gt; { <span class="synType">Time</span>.now + <span class="synConstant">2_678_400</span> } <span class="synComment"># about a month</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">id</span>
    <span class="synConstant">1</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>

<span class="synComment"># 2021-04-01</span>
homepage = <span class="synType">Homepage</span>.new
homepage.id <span class="synComment"># 1</span>

homepage.pv.increment
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 3</span>

<span class="synComment"># 2021-04-02 (next day)</span>
puts homepage.pv.value <span class="synComment"># 0</span>
homepage.pv.increment
homepage.pv.increment
puts homepage.pv.value <span class="synComment"># 2</span>

start_date = <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)
end_date = <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)
homepage.pv.range(start_date, end_date) <span class="synComment"># [3, 2]</span>
</pre>


<p><code>#increment</code> <code>#decrement</code> は <code>counter</code> と同じ使い勝手です。ただ、日付が変わると自動的に保存先が切り替わります。
これは Redis で保存している Key 名が以下のフォーマットになっているためです。</p>

<pre class="code" data-lang="" data-unlink>model_name:id:field_name:yyyy-mm-dd</pre>


<p>日付が変わった後も過去のレコードは削除されていないので、以下のコードでアクセス出来ます。この使い方は同じく Redis::Objects の <code>list</code> と似たような使い勝手になっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 2021-04-01</span>
homepage.pv.increment(<span class="synConstant">3</span>)

<span class="synComment"># 2021-04-02 (next day)</span>
homepage.pv.increment(<span class="synConstant">2</span>)

<span class="synComment"># 2021-04-03 (next day)</span>
homepage.pv.increment(<span class="synConstant">5</span>)

homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)] <span class="synComment"># =&gt; 3</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synConstant">3</span>] <span class="synComment"># =&gt; [3, 2, 5]</span>
homepage.pv[<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>)..<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)] <span class="synComment"># =&gt; [3, 2]</span>

homepage.pv.delete(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>))
homepage.pv.range(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">1</span>), <span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">3</span>)) <span class="synComment"># =&gt; [0, 2, 5]</span>
homepage.pv.at(<span class="synType">Date</span>.new(<span class="synConstant">2021</span>, <span class="synConstant">4</span>, <span class="synConstant">2</span>)) <span class="synComment"># =&gt; 2</span>
</pre>


<p>これで測定対象となるサービスを開発した後、 <code>daily_counter</code> で測定処理を実装しておくだけで OK。
この状態でリリースすればデータは溜まっていくので、週次や月次で集計する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>を後でゆっくり実装すれば良いです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>実装前にサーバー内で <code>$ bin/rails console</code> を実行して <code>daily_counter</code> の値を確認しながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD">バッチ処理</a>の実装を考える、とかも出来ますね。
具体的なデータを見ながらの方が開発難易度は下がります。</p>

<p>ちなみにですが、 <strong><code>expireat</code> オプションを指定しておくことをオススメします。</strong>
gem の仕様上、どんどん Redis 上のメモリを圧迫していくので、一定期間後に自動的に削除するようにしましょう。</p>

<hr />

<p><code>daily_counter</code> があるなら週次、月次、年次カウンターがあっても良いよね、なんだったら毎時、毎分カウンターもあったって良いじゃないか、という事で <code>v0.2.0</code> ではそれらが追加されています。</p>

<p>毎時・毎分のカウンターは <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> rate limit 機能の実装にも良いかもしれないですね。</p>

<ul>
<li><code>annual_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy</code></li>
<li>Redis is a highly volatile key-<a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a> store, so I don't recommend using it.</li>
</ul>
</li>
<li><code>monthly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm</code></li>
</ul>
</li>
<li><code>weekly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyyWw</code></li>
</ul>
</li>
<li><code>daily_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-dd</code></li>
</ul>
</li>
<li><code>hourly_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh</code></li>
</ul>
</li>
<li><code>minutely_counter</code>

<ul>
<li>Key format: <code>model_name:id:field_name:yyyy-mm-ddThh:mi</code></li>
</ul>
</li>
</ul>


<p>一応実装はしましたが、 <code>annual_counter</code> のように期間の長いカウンターの利用はあまりオススメしません。
Redis ってふとした拍子にデータが飛んでしまう可能性があるので、あくまでキャッシュ的な位置付けで利用するのが良いと思います。
<code>daily_counter</code> も週次・月次で RDS に集計結果を保存する運用を想定していますので。</p>

<hr />

<p>というわけで久々のブログ更新では新しく作った <code>redis-objects-daily-counter</code> という gem の紹介をさせて頂きました。
これから弊社プロダクトでも利用していく予定ですし、色々なサービスでも活用頂けると嬉しいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゲスト購入時、Shopify は customer をどう扱っているのか]]></title>
        <id>https://rewired.cloud/how-shopify-handle-the-customer-when-checkout-as-a-guest/</id>
        <link href="https://rewired.cloud/how-shopify-handle-the-customer-when-checkout-as-a-guest/"/>
        <updated>2021-09-08T06:23:36.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://rewired.cloud/wp-content/uploads/2021/09/210908_customer_title-520x300.jpg" class="webfeedsFeaturedVisual" width="520" height="300" /></p>Shopify は 設定 &#62; チェックアウト から購入時のアカウント登録の要否を設定できます。 アカウントを無効化する ゲストとしてのみチェックアウトが可能 アカウントを任意にする ゲストとして、またはカスタマーア ... ]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon EKS で高負荷時に CoreDNS が原因で稀にネットワークエラーが発生していた時のトラブルシュート]]></title>
        <id>https://developer.feedforce.jp/entry/2021/09/02/134725</id>
        <link href="https://developer.feedforce.jp/entry/2021/09/02/134725"/>
        <updated>2021-09-02T04:47:25.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS の開発チームでインフラエンジニア をやっています <a href="http://blog.hatena.ne.jp/mayuki123/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mayuki123/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mayuki123</a> です。今月からフィードフォースから分社化をした株式会社ソーシャルPLUS の所属となりましたが、仕事内容は変わらずにサービスのインフラ改善を進めていく事になるかと思います。</p>

<p>2019年11月に技術スタックを整理してみたという記事から2年弱経過していますが、ソーシャルPLUSのインフラ環境は、一部アプリケーションについてはコンテナ環境を Amazon EKS にホスティングして本番運用するようになりました。あと数ヶ月ほどで全ての環境がEC2からコンテナに置き換えられると良いなと思っています(願望)。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F11%2F25%2F120000" title="ソーシャルPLUS の技術スタックを整理してみた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2019/11/25/120000">developer.feedforce.jp</a></cite></p>

<p>そして、既に利用されている機能の一部を Amazon EKS に移行して、しばらく経過した時にアプリケーションでネットワークエラーが稀に発生していました。原因調査をした結果が CoreDNS の負荷によるものと発覚するまでのトラブルシュートの流れについて、記事として書き残しておきます。</p>

<ul class="table-of-contents">
    <li><a href="#発生していた事象">発生していた事象</a></li>
    <li><a href="#Datadog-を活用した原因調査">Datadog を活用した原因調査</a><ul>
            <li><a href="#アプリケーションの負荷状況">アプリケーションの負荷状況</a></li>
            <li><a href="#EKS-上のコンテナの調査">EKS 上のコンテナの調査</a></li>
        </ul>
    </li>
    <li><a href="#EKS-のCoreDNS-の調査">EKS のCoreDNS の調査</a><ul>
            <li><a href="#CoreDNS-のデバッグログの有効化">CoreDNS のデバッグログの有効化</a></li>
            <li><a href="#Kubernetes-の名前解決について">Kubernetes の名前解決について</a></li>
        </ul>
    </li>
    <li><a href="#CoreDNS-の負荷軽減">CoreDNS の負荷軽減</a><ul>
            <li><a href="#ドメインの末尾にドット--を追加する">ドメインの末尾にドット (.) を追加する</a></li>
            <li><a href="#etcresolvconf-で-ndots1-の設定をする">/etc/resolv.conf で ndots:1 の設定をする</a></li>
            <li><a href="#その他の-CoreDNS-の負荷軽減の方法">その他の CoreDNS の負荷軽減の方法</a></li>
        </ul>
    </li>
    <li><a href="#最終的な結果">最終的な結果</a></li>
    <li><a href="#おわりに">おわりに</a></li>
    <li><a href="#おまけ">おまけ</a></li>
</ul>

<h2 id="発生していた事象">発生していた事象</h2>

<p>ソーシャルPLUSでは、バックエンドのアプリケーションでエラーが発生した時に、Bugsnag を利用して Slack 通知するようにしています。ある時に<code>Mysql2::Error::ConnectionError</code> が発生しました。単発のネットワークエラーの場合はアプリケーションがリトライする事でサービス影響がない事も多く、一時的な問題と思って静観する事があるかと思います。しかし、また数日後に同じ事象が発生しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210830/20210830152912.png" alt="f:id:mayuki123:20210830152912p:plain" width="667" height="258" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%A4%E3%83%B3%E3%83%AA%E3%83%83%E3%83%92%E3%81%AE%E6%B3%95%E5%89%87">ハインリッヒの1：29：300の法則</a>のように、ちょっとした異常を見落としていると重大なサービス障害となってしまう可能性があるので、原因調査を始めます。</p>

<h2 id="Datadog-を活用した原因調査">Datadog を活用した原因調査</h2>

<p>ソーシャルPLUSでは、モニタリングサービスの Datadog を利用しているのでメトリクスやログの調査を出来るようになっています。どこが原因かを探り始めました。</p>

<h3 id="アプリケーションの負荷状況">アプリケーションの負荷状況</h3>

<p>まずはアプリケーションで利用するサーバの負荷状況を確認する所から始めました。<code>Mysql2::Error::ConnectionError</code> が発生した時刻は EKS の Node の CPU 使用率が 70% ほどで、アプリケーションで負荷のかかる処理の最中でした。また、データベースの負荷は少し前に負荷対策の改善をした事もあって、今回の事件の犯人ではなさそうです。他にもEC2 と DB 間でネットワークのボトルネックがないかなどの確認はしましたが、CPU 使用率が高い以外の問題は特に見つかりませんでした。完全犯罪でしょうか。</p>

<h3 id="EKS-上のコンテナの調査">EKS 上のコンテナの調査</h3>

<p>サーバ単体の問題ではないとすると、Amazon EKS で何か起きている事を疑うことにしました。EKSで動かしているコンテナのログは Datadog Logs に送っているので、<strong>エラーが発生していたアプリケーション以外のログ</strong> を確認していると、MySQL の ConnectionError が発生した時間帯に下記の Warning のメッセージが出ている事に気づきました。このログは Amazon Kinesis Data Firehose にログを送る Fluent Bit のコンテナで発生しており、エラーが発生してたアプリケーションとは異なるノードに存在してました。</p>

<blockquote><p>[yyyy/mm/dd hh:mm:ss] [ warn] [net] getaddrinfo(host='kinesis.ap-northeast-1.amazonaws.com'): Name or service not known</p></blockquote>

<p>同時刻に特定のアプリケーション以外のコンテナも影響を受けていることから、EKS の中で問題がありそうです。元々、EKSに関する技術ブログは目を通すようにしていた事もあり、Kubernetes の DNS の名前解決で問題が発生する場合があるというのは知っていたので、CoreDNSに焦点を当てて調べることにしました。アウトプットをしてくれる人たちには、いつも感謝をしています。</p>

<ul>
<li><a href="https://medium.com/cloutive/production-ready-eks-coredns-configuration-6fea830606f8">Production Ready EKS CoreDNS Configuration | by Serkan Capkan | Cloutive Technology Solutions - Tech Blog | Medium</a></li>
<li><a href="https://creators-note.chatwork.com/entry/2021/01/05/104206#%E4%B8%80%E5%AE%9A%E6%95%B0%E3%81%AEPod%E4%BB%A5%E4%B8%8A%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E4%B8%8D%E5%AE%89%E5%AE%9A%E3%81%AB%E3%81%AA%E3%82%8B">EKS&#x3067;DNS&#x3092;&#x5B89;&#x5B9A;&#x3055;&#x305B;&#x308B;&#x305F;&#x3081;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x3053;&#x3068; - Chatwork Creator&#39;s Note</a></li>
<li><a href="https://labs.gree.jp/blog/2020/01/20271/">&#x30B9;&#x30DE;&#x30DB;&#x30B2;&#x30FC;&#x30E0;&#x306E; API &#x30B5;&#x30FC;&#x30D0;&#x306B;&#x304A;&#x3051;&#x308B; EKS &#x306E;&#x904B;&#x7528;&#x4E8B;&#x4F8B; | &#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x30D6;&#x30ED;&#x30B0; | GREE Engineering</a></li>
</ul>


<h2 id="EKS-のCoreDNS-の調査">EKS のCoreDNS の調査</h2>

<p>Datadog Agent で Kurbernetes の各種メトリクスを収集していて、EKS の CoreDNS の状況も Datadog の Metric Explorer で確認する事が出来るようになっています。</p>

<ul>
<li><a href="https://docs.datadoghq.com/ja/integrations/coredns/?tab=docker#%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9">Datadog で取得可能な CoreDNS のメトリクス</a></li>
</ul>


<p><code>coredns.request_count</code> を確認すると特定の時間帯で CoreDNS へのリクエストが多い状態で、このタイミングでの CoreDNS Pod の CPU 負荷は10％前後でしたが、それ以外に不審なメトリクスは存在しませんでした。まだ事象の原因との確信は持てないですが、負荷がそれなりにかかっていることは確かなのでリクエストが多くなる理由を調べます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831151005.png" alt="f:id:mayuki123:20210831151005p:plain" width="522" height="200" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h3 id="CoreDNS-のデバッグログの有効化">CoreDNS のデバッグログの有効化</h3>

<p>まずは CoreDNS のデバッグログを確認したいとなるかと思いますが、EKS の CoreDNS はデフォルトだとデバッグログの出力がオフの状態のため、どのようなリクエストが到達しているのかは確認する事ができません。CoreDNS のログを有効化する方法は AWS のナレッジベースにある記事に方法が記載されています。</p>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>
</ul>


<p>この記事によると、Namespace(<code>kube-system</code>) に Configmap (<code>coredns</code>) があるので、Corefile 設定に <code>log</code> を追加するとデバッグログ が出力されるようになります。</p>

<pre class="code" data-lang="" data-unlink># kubectl -n kube-system edit configmap coredns
kind: ConfigMap
apiVersion: v1
data:
  Corefile: |
    .:53 {
        log    # Enabling CoreDNS Logging
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          upstream
          fallthrough in-addr.arpa ip6.arpa
        }
        ...</pre>


<p>上記の設定をすると CoreDNS のPod の標準出力にデバッグログ が出力されるようになります。私の触っていた EKS の環境の場合は、数分ほどで CoreDNS の Pod で reload が発生して元の設定（デバッグログ がオフ）に戻るようになってました。</p>

<h3 id="Kubernetes-の名前解決について">Kubernetes の名前解決について</h3>

<p>次にKubernetes 上のコンテナはどのように名前解決するのかを知っておく必要があります。Kurbernetes の Pod の DNS リゾルバー(<code>/etc/resolv.conf</code>) のデフォルト設定は下記のようになっています。</p>

<pre class="code" data-lang="" data-unlink>% kubectl exec fluent-bit-46zvl -- cat /etc/resolv.conf
nameserver 172.20.0.10
search logging.svc.cluster.local svc.cluster.local cluster.local
options ndots:5</pre>


<p>この状態で Fluent Bit のコンテナから Amazon Kinesis の API エンドポイントに疎通する場合は、CoreDNS に8回のリクエストが発生します。これは、IPv4 , IPv6 の2種類の名前解決を <code>search</code> の数だけ名前解決を試みた後で EKS 外に名前解決をする設定になっているからです。この設定になっているおかげで Kubernetes の Service を使った名前解決が出来るようになっています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831154909.png" alt="f:id:mayuki123:20210831154909p:plain" width="1200" height="328" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>また、<code>options ndots:5</code> の設定は <code>.</code> の数が 5個以上の時は最初から外部に名前解決するようになります。そのため、Amazon Aurora や ElastiCache などのデータベースへの クラスターエンドポイントは <code>.</code> の数が五個以上あるので、CoreDNSへのリクエスト回数は少なくて済みます。ここを意識しなくてよいのはありがたいですね。</p>

<p>ソーシャルPLUSというプロダクトの特性上、EKS 内のアプリケーションから外部サービスの API を実行する機会が多々あります。特定のタイミングで外部のサービスに大量のAPIリクエストを実行した際に、CoreDNS へのリクエストが増大してしまい不安定になってしまったのではと考えられます。</p>

<h2 id="CoreDNS-の負荷軽減">CoreDNS の負荷軽減</h2>

<p>Kurbernetes 上のコンテナの名前解決を知ると、外部サービスのAPI を実行する際には CoreDNS へのリクエストが多くなる事が分かりました。ここで、CoreDNS へのリクエスト数を減らす方法は下記の二つがあります。これも AWS のナレッジベースに方法が記載されているので、詳細は下記の記事を読む方が良いと思います。</p>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>
</ul>


<h3 id="ドメインの末尾にドット--を追加する">ドメインの末尾にドット (.) を追加する</h3>

<p>接続先のドメインの最後に <code>.</code> をつけると、EKS の内部で名前解決を複数回しないようになり、CoreDNS へのリクエストの総数が減ります。一例をあげると、<code>example.com</code> ではなく、 <code>example.com.</code> とする事で最初から EKS の外部に名前解決をしてくれるようになります。ドメインが SDK の内部で定義されているような場合など、変更出来ない場合はこの方法は利用出来ないかと思います。</p>

<h3 id="etcresolvconf-で-ndots1-の設定をする"><code>/etc/resolv.conf</code> で ndots:1 の設定をする</h3>

<p><code>/etc/resolv.conf</code> に <code>options ndots:5</code> とデフォルトで設定されている数値を <code>1</code> にする事で、ドメインに <code>.</code> が含まれている場合は常に EKS の外部に名前解決するようになります。Kubernetes の Manifest に <code>spec.dnsConfig</code> パラメータを設定する事で Pod 単位で変更が出来ます。ただし、この設定をすると EKS 内部で名前解決をしなくなってしまいますが、<code>&lt;name&gt;.&lt;namespace&gt;.svc.cluster.local.</code> のように最後に <code>.</code> をつけると名前解決出来ました。Kurbernetes の Service の数が多いとこの方法を周知させるのも大変だと思います。</p>

<pre class="code" data-lang="" data-unlink>apiVersion: apps/v1
kind: Deployment
metadata:
  name: hoge
spec:
  template:
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: &#34;1&#34;</pre>


<h3 id="その他の-CoreDNS-の負荷軽減の方法">その他の CoreDNS の負荷軽減の方法</h3>

<p>上記の二つの方法は CoreDNS へのリクエスト数を減らすことで、負荷を軽減するようなアプローチでした。CoreDNS の Pod 数はデフォルトで 2個となりますが、CoreDNS のPod をオートスケールする手段もあります。</p>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/">Autoscale the DNS Service in a Cluster</a></li>
</ul>


<p>また、Daemonset で DNS キャッシュをノード単位で配置するという方法もあります。</p>

<ul>
<li><a href="https://kubernetes.io/ja/docs/tasks/administer-cluster/nodelocaldns/">KubernetesクラスターでNodeLocal DNSキャッシュを使用する</a></li>
</ul>


<p>この辺りは他の方が書いた技術ブログも多くあるかと思うので、この記事では特に説明はしないです。</p>

<h2 id="最終的な結果">最終的な結果</h2>

<p>ソーシャルPLUSでは最終的に根本原因の CoreDNS へのリクエスト数を減らすために <code>/etc/resolv.conf</code> で <code>ndots:1</code> の設定をするようにしました。この設定をアプリケーションの Pod に適応した所、CoreDNS へのリクエスト数は 25% ほどと目に見えて減少させる事が出来ました。キャプチャは載せてないですが、CoreDNS の Pod の CPU使用率も 以前の半分ほどになったので、負荷軽減の目的は達成しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831171734.png" alt="f:id:mayuki123:20210831171734p:plain" width="527" height="187" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>ここまで、確信を持てないまま CoreDNS の負荷軽減に取り組みましたが、元々のネットワークエラーであった <code>Mysql2::Error::ConnectionError</code> のエラーは再発しなくなりました。また、EKS 上の他のコンテナも <code>Name or service not known</code> のような名前解決が出来ないといったエラーも発生しなくなりました。CoreDNS の負荷を減らす事で悩まされていた問題の解消が出来たと思います。今回のように比較的早い段階で気づく事が出来たので、お客さんへのサービス影響のある問題に発展せずに済みました。</p>

<p>今後、利用者数が増えてより負荷のかかる状況になってきた時には再発する可能性はありますが、早い段階で気付けるように日々確認するダッシュボードにメトリクスを追加するようにしています。その時がきた場合は CoreDNS の Pod 数の調整や DNS キャッシュの導入が必要になりそうです。</p>

<h2 id="おわりに">おわりに</h2>

<p>最終的には Pod の DNS 設定を調整するだけでネットワークエラーは解決しました。この記事では、結果だけではなくて解決に至るまでの経緯をメインにまとめてみました。実施していて良かったと思うことを下記にまとめます。これらの事が出来ていなければ、今回のようなネットワークエラーはたまに発生する事象として、根本原因の追及は出来なかったと思うので、サービスのオブザーバビリティを整備する事や日々の情報収集は大事ですね。</p>

<ul>
<li>アプリケーションのエラーを Slack に通知していた</li>
<li>Kurbernetes のメトリクスを Datadog で確認できる状態だった</li>
<li>コンテナのログを一元的に Datadog Logs  で閲覧できるようにしていた</li>
<li>他の人の技術ブログから Kubernetes の CoreDNS が不安定になることを知っていた</li>
</ul>


<p>この記事に間違っている内容や、もっと良い改善方法がある事をご存知の方がいましたら、優しく教えてください。</p>

<h2 id="おまけ">おまけ</h2>

<p>現在、ソーシャルPLUS では作りたい機能が山ほどある状況でまだまだ成長するサービスになると思うので、成長を続けるサービスに携わりたいエンジニアやデザイナーのご応募をお待ちしております！サイトにはまだないですが、インフラエンジニアも近いうちに募集をする事にはなると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21802" title="Railsエンジニア【Shopify App開発/ID連携サービス】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21802">open.talentio.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21755" title="フロントエンドエンジニア【Shopifyアプリ開発/ID連携サービス/React/TypeScript】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21755">open.talentio.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21760" title="UI/UXデザイナー【ID連携サービス/マーケティング支援SaaS】 / 株式会社フィードフォース" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/21760">open.talentio.com</a></cite></p>

<p>フィードフォース の他のサービスもエンジニアを募集してますので、興味があればご応募お待ちしております！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fengineers.recruit.feedforce.jp%2F%3F_ga%3D2.157559610.1029003260.1630297434-1923366822.1626416415%23entry" title="フィードフォース エンジニア・デザイナー採用サイト" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://engineers.recruit.feedforce.jp/?_ga=2.157559610.1029003260.1630297434-1923366822.1626416415#entry">engineers.recruit.feedforce.jp</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた]]></title>
        <id>https://developer.feedforce.jp/entry/2021/08/30/150000</id>
        <link href="https://developer.feedforce.jp/entry/2021/08/30/150000"/>
        <updated>2021-08-30T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。
先週はまるっと夏休みにしてました。今日からまた <a href="https://ja.looker.com/">Looker</a> と戯れる日々が始まります。</p>

<p>丸１年 Looker と戯れてきて最近ようやく、<strong>Join 先の view でも</strong> primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#Looker-における-primary_key-の役割">Looker における primary_key の役割</a></li>
    <li><a href="#primary_key-の実装例">primary_key の実装例</a></li>
    <li><a href="#LookML-開発におけるテスト">LookML 開発におけるテスト</a></li>
    <li><a href="#Join-先の-view-は-primary_key-をテスト出来ないことがある">Join 先の view は primary_key をテスト出来ないことがある</a></li>
    <li><a href="#Join-先の-view-の-primary_key-をいい感じにテストする">Join 先の view の primary_key をいい感じにテストする</a></li>
    <li><a href="#まとめと所感">まとめと所感</a></li>
    <li><a href="#おまけ">おまけ</a></li>
</ul>

<h2 id="Looker-における-primary_key-の役割">Looker における primary_key の役割</h2>

<p>Looker には <a href="https://help.looker.com/hc/en-us/articles/360023722974">Symmetric Aggregates</a> という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000" title="『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>その Symmetric Aggregates では <a href="https://docs.looker.com/reference/field-params/primary_key">primary_key</a> が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。</p>

<ul>
<li>primary_key が重複すると fanout エラーが発生することがある</li>
<li>primary_key が null だと Measure が 0 になることがある</li>
</ul>


<p>このような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。</p>

<h2 id="primary_key-の実装例">primary_key の実装例</h2>

<p>私が所属する <a href="https://feedmatic.net/">Feedmatic</a> では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。</p>

<p>そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。</p>

<pre class="code" data-lang="" data-unlink>dimension: id {
  primary_key: yes
  type: string
  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, &#39;&#39;)) ;;
  hidden: yes
}</pre>


<p>※ <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%8F%E3%82%A6%E3%82%B9">DWH</a> は BigQuery を使っています。</p>

<p>これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭</p>

<h2 id="LookML-開発におけるテスト">LookML 開発におけるテスト</h2>

<p>以上の課題を解決するために、<a href="https://docs.looker.com/reference/model-params/test">test</a> パラメータが使えます。</p>

<p>例えばこのような <code>parent</code> explore があったとします。Join がないのでシンプルです。</p>

<pre class="code" data-lang="" data-unlink>explore: parent {
  ...
}

view: parent {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
  }
}</pre>


<p>私はこのようなテストを書いて、全ての <code>parent.id</code> が null でないことと、重複しないことを保証させています。</p>

<pre class="code" data-lang="" data-unlink>test: parent_id_is_not_null {
  explore_source: parent {
    column: id {}
    sorts: [parent.id: asc]
    limit: 1
  }
  assert: id_is_not_null {
    expression: NOT is_null(${parent.id}) ;;
  }
}

test: parent_id_is_unique {
  explore_source: parent {
    column: id {}
    column: count {}
    sorts: [parent.count: desc]
    limit: 1
  }
  assert: id_is_unique {
    expression: ${parent.count} = 1 ;;
  }
}</pre>


<p>👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。</p>

<h2 id="Join-先の-view-は-primary_key-をテスト出来ないことがある">Join 先の view は primary_key をテスト出来ないことがある</h2>

<p>さて、<code>child</code> view を Join する必要が出てきました。</p>

<pre class="code" data-lang="" data-unlink>explore: parent {
  join: child {
    type: left_outer
    relationship: one_to_many
    sql_on: ... ;;
  }
}

view: parent {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
  }
}

view: child {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
    hidden: yes
  }
}</pre>


<p>同じように <code>child.id</code> のテストを書きましたが、うまくいきません。<code>is_not_null</code> はまだしも、<code>is_unique</code> がダメです。</p>

<pre class="code" data-lang="" data-unlink># これは OK
test: parent_child_id_is_not_null {
  explore_source: parent {
    column: id { field: child.id }
    sorts: [child.id: asc]
    limit: 1
  }
  assert: child_id_is_not_null {
    expression: NOT is_null(${child.id}) ;;
  }
}

# parent の count になり、テストが通らない。
test: parent_child_id_is_unique {
  explore_source: parent {
    column: id { field: child.id }
    column: count { field: child.count }
    sorts: [parent.count: desc]
    limit: 1
  }
  assert: child_id_is_unique {
    expression: ${child.count} = 1 ;;
  }
}</pre>


<p>よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも <code>child</code> view の primary_key のテストをしたいだけなのに、Join は邪魔です。</p>

<h2 id="Join-先の-view-の-primary_key-をいい感じにテストする">Join 先の view の primary_key をいい感じにテストする</h2>

<p><code>child</code> view と同じファイルに、こっそり <code>child</code> explore を定義します。<a href="https://docs.looker.com/ja/reference/explore-params/hidden-for-explore">hidden</a> にして存在を消しています。さらに <a href="https://docs.looker.com/reference/explore-params/required_access_grants-for-explore">required_access_grants</a> で、開発者以外の URL 直打ちによるアクセスも防いでいます。</p>

<pre class="code" data-lang="" data-unlink>view: child {
  dimension: id {
    primary_key: yes
    ...
  }

  measure: count {
    type: count
    hidden: yes
  }
}

# Define for test
explore: child {
  hidden: yes
  required_access_grants: [can_view_explores_for_tests]
}</pre>


<p><a href="https://docs.looker.com/reference/model-params/access_grant">access_grant</a> である <code>can_view_explores_for_tests</code> はこのような定義です。</p>

<pre class="code" data-lang="" data-unlink># For tests
access_grant: can_view_explores_for_tests {
  user_attribute: view_explores_for_tests
  allowed_values: [&#34;yes&#34;]
}</pre>


<p><a href="https://docs.looker.com/admin-options/settings/user-attributes">User attribute</a> である <code>view_explores_for_tests</code> は、今回のような「Join 先の view をテストすること」全般に使います。User Access は <code>None</code>、Default Value も <code>no</code> です。開発者用の Group を作り、その Group value を <code>yes</code> にしました。</p>

<p>ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。</p>

<p>あとは <code>parent</code> explore と同じようにテストを書くだけです。</p>

<pre class="code" data-lang="" data-unlink>test: child_id_is_not_null {
  explore_source: child {
    column: id {}
    sorts: [child.id: asc]
    limit: 1
  }
  assert: id_is_not_null {
    expression: NOT is_null(${child.id}) ;;
  }
}

test: child_id_is_unique {
  explore_source: child {
    column: id {}
    column: count {}
    sorts: [child.count: desc]
    limit: 1
  }
  assert: id_is_unique {
    expression: ${child.count} = 1 ;;
  }
}</pre>


<p>テストは通っても、LookML validation error が発生するかもしれません。その時は <a href="https://docs.looker.com/ja/reference/explore-params/fields-for-explore">fields</a> パラメータを使って、露出する field を限定すると良いでしょう。</p>

<pre class="code" data-lang="" data-unlink># Define for test
explore: child {
  hidden: yes
  required_access_grants: [can_view_explores_for_tests]
  fields: [child.id, child.count] # Avoid LookML validation error
}</pre>


<p>このテクニックは <a href="https://help.looker.com/hc/en-us/articles/360023586293-Error-Unknown-or-Inaccessible-Field">Error: Unknown or Inaccessible Field – Looker Help Center</a> でも紹介されています。</p>

<h2 id="まとめと所感">まとめと所感</h2>

<p>LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。</p>

<p>もっと良い方法や、今回のやり方はここがマズイとかあれば <a href="https://twitter.com/masutaka">@masutaka</a> にお知らせ頂けると大変うれしいです。🙏</p>

<p>Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。</p>

<p>Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。</p>

<p>それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。</p>

<h2 id="おまけ">おまけ</h2>

<p>今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815" title="LookML Data Tests: Recommendations and Best Practices | Looker Community" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[私が１年かけて辿り着いた Looker の情報収集方法を紹介する]]></title>
        <id>https://developer.feedforce.jp/entry/2021/08/16/150000</id>
        <link href="https://developer.feedforce.jp/entry/2021/08/16/150000"/>
        <updated>2021-08-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんばんは、<del>徳川家ｙ</del> <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。</p>

<p>以前紹介したように、去年から <a href="https://ja.looker.com/">Looker</a> を使ったウェブ広告数値の可視化や BI <a href="#f-25b67c2a" name="fn-25b67c2a" title="Business Intelligence">*1</a> に取り組んでいます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000" title="『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。</p>

<p>LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。</p>

<p>現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#情報源をリストアップする">「情報源」をリストアップする</a></li>
    <li><a href="#少し脱線">少し脱線...</a></li>
    <li><a href="#情報源の取得方法への課題">「情報源」の取得方法への課題</a></li>
    <li><a href="#今はどうなったか">今はどうなったか？</a></li>
    <li><a href="#Looker-Communityのフィードが存在した件">「Looker Community」のフィードが存在した件</a></li>
    <li><a href="#Looker-の記事一覧--DevelopersIOのフィードを作った件">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</a></li>
    <li><a href="#まとめ">まとめ</a></li>
    <li><a href="#追記">追記</a></li>
</ul>

<h2 id="情報源をリストアップする">「情報源」をリストアップする</h2>

<p>初めはこれらをたまに見に行ったり、Slack の <code>/feed subscribe</code> <a href="#f-e46aea89" name="fn-e46aea89" title="Slack に RSS フィードを追加する | Slack">*2</a> で購読したりしてました。</p>

<ul>
<li><a href="https://community.looker.com/">Looker Community</a>

<ul>
<li>公式フォーラム。英語で Question や Conversation が出来る</li>
</ul>
</li>
<li><p><a href="https://community.looker.com/%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0-japanese-161">Looker 日本語コミュニティフォーラム</a></p>

<ul>
<li>「Looker Community」の日本語版。<a href="https://docs.looker.com/relnotes/intro">Release Notes</a> の日本語訳には本当に感謝 🙏</li>
<li><p>「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される</p>

<p>  <figure class="figure-image figure-image-fotolife" title="Looker 日本語コミュニティフォーラム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815145002.png" alt="f:id:masutaka26:20210815145002p:plain" width="1200" height="382" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker 日本語コミュニティフォーラム</figcaption></figure></p></li>
</ul>
</li>
<li><p><a href="https://www.facebook.com/groups/721814241538725">Looker APAC Forum | Facebook</a></p>

<ul>
<li>リリース案内や事例紹介など</li>
</ul>
</li>
<li><a href="https://dev.classmethod.jp/tags/looker/">Looker の記事一覧 | DevelopersIO</a>

<ul>
<li>ご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度</li>
</ul>
</li>
<li><a href="https://zenn.dev/topics/looker">Lookerの記事一覧 | Zenn</a>

<ul>
<li>Zenn にもそれなりの頻度で投稿される</li>
</ul>
</li>
<li><a href="https://qiita.com/tags/looker">Looker - Qiita</a>

<ul>
<li>Qiita はもう少し頻度は落ちるかな</li>
</ul>
</li>
<li><a href="https://twitter.com/search?q=%23looker%20lang%3Aja&amp;f=live&amp;vertical=default">#looker lang:ja - Twitter 検索</a>

<ul>
<li>以上の情報をふわっと取得できる。<code>looker lang:ja</code> や <code>#looker</code> だとノイズが多いのでこれに落ち着いた</li>
</ul>
</li>
</ul>


<h2 id="少し脱線">少し脱線...</h2>

<p>Looker Community には過去一度だけ質問しました。</p>

<p><a href="https://community.looker.com/lookml-5/how-do-i-dynamically-switch-view-name-in-sql-parameter-of-dimension-27831">How do I dynamically switch view name in sql parameter of dimension? | Looker Community</a></p>

<p>私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。</p>

<p>扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀</p>

<p>Looker の水野さんが日本語訳して下さっている、Looker のリリースノート <a href="#f-c898f381" name="fn-c898f381" title="例: Looker 21.12 リリースノート | Looker Community">*3</a> は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。</p>

<p><figure class="figure-image figure-image-fotolife" title="Looker 21.12 のリリースノートを眺めてみた"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160438.png" alt="f:id:masutaka26:20210815160438p:plain" width="1200" height="849" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker 21.12 のリリースノートを眺めてみた</figcaption></figure></p>

<p>今まで書いた記事です。</p>

<p><figure class="figure-image figure-image-fotolife" title="Looker のリリースノートを眺めてみたシリーズ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160356.png" alt="f:id:masutaka26:20210815160356p:plain" width="1200" height="887" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>Looker のリリースノートを眺めてみたシリーズ</figcaption></figure></p>

<h2 id="情報源の取得方法への課題">「情報源」の取得方法への課題</h2>

<p>RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。</p>

<p>そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。</p>

<h2 id="今はどうなったか">今はどうなったか？</h2>

<p>ほぼすべてを社内の Slack channel <code>#news-looker</code> に集約させることが出来ました。</p>

<p>以下が実際に購読しているフィードです。</p>

<ul>
<li><a href="https://community.looker.com/feed/buzzcapture">https://community.looker.com/feed/buzzcapture</a>

<ul>
<li>「Looker Community」のフィード。後述する</li>
</ul>
</li>
<li><a href="https://feed43.com/developersio-looker.xml">https://feed43.com/developersio-looker.xml</a>

<ul>
<li>「Looker の記事一覧 | DevelopersIO」のフィード。後述する</li>
</ul>
</li>
<li><a href="https://zenn.dev/topics/looker/feed">https://zenn.dev/topics/looker/feed</a>

<ul>
<li>「Lookerの記事一覧 | Zenn」のフィード</li>
</ul>
</li>
<li><a href="https://qiita.com/tags/looker/feed">https://qiita.com/tags/looker/feed</a>

<ul>
<li>「Looker - Qiita」のフィード</li>
</ul>
</li>
</ul>


<p>Twitter は <a href="https://ifttt.com/">IFTTT</a> を使って、同 channel に POST しています。</p>

<ul>
<li><code>If</code> New tweet from search <code>#looker OR LookML lang:ja -rt</code></li>
<li><code>Then</code> Post to channel

<ul>
<li>Channel: <code>#news-looker</code></li>
<li>Message: <code>@{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})</code></li>
</ul>
</li>
</ul>


<p>「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。</p>

<h2 id="Looker-Communityのフィードが存在した件">「Looker Community」のフィードが存在した件</h2>

<p><a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA-the-kitchen-table-%E3%81%8C%E5%85%AC%E9%96%8B%E3%81%95%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F-24032?postid=45126#post45126">Looker の水野さんに聞いたら、調べて教えて下さいました。</a>🙏</p>

<ul>
<li>(1) 新しいトピックの投稿

<ul>
<li><a href="https://community.looker.com/feed/topics">https://community.looker.com/feed/topics</a></li>
</ul>
</li>
<li>(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）

<ul>
<li><a href="https://community.looker.com/feed/buzzcapture">https://community.looker.com/feed/buzzcapture</a></li>
</ul>
</li>
</ul>


<p>アナウンス記事です。
<a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AErss%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89-25553?postid=46404#post46404">LookerコミュニティのRSSフィード | Looker Community</a></p>

<p>(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。</p>

<p>今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。</p>

<p><a href="https://community.looker.com/">https://community.looker.com/</a> の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。</p>

<h2 id="Looker-の記事一覧--DevelopersIOのフィードを作った件">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</h2>

<p>ないものは仕方がないので、<a href="https://feed43.com/">Feed43</a> というサービスで作りました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2021-03-14-1.html" title="フィード（RSS/Atom）を配信していないサイトのフィードを Feed43 で作成する" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>出来たのが <a href="https://feed43.com/developersio-looker.xml">https://feed43.com/developersio-looker.xml</a> です。どなたでも購読可能です。よろしければどうぞ。</p>

<p>HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。</p>

<p>本当は <a href="https://dev.classmethod.jp/tags/looker/">https://dev.classmethod.jp/tags/looker/</a> のフィードがあれば良いのですけどね。今後に期待です。</p>

<p>[Update] そのものズバリ <a href="https://dev.classmethod.jp/feed/?tag=looker">https://dev.classmethod.jp/feed/?tag=looker</a> を <a href="https://twitter.com/sh19910711/status/1427429573117964306">Twitterで教えて</a>頂きました。ありがとうございます！</p>

<h2 id="まとめ">まとめ</h2>

<p>私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。</p>

<p>これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥
※ ネタは少しあるけど、時間がない。(^^;</p>

<p>皆さんにも参考になれば幸いです。他にもあれば <a href="https://twitter.com/masutaka">@masutaka</a> に教えて下さい！</p>

<h2 id="追記">追記</h2>

<blockquote><p>他にもあれば <a href="https://twitter.com/masutaka">@masutaka</a> に教えて下さい！</p></blockquote>

<p>記事にも登場して頂いた Looker の水野さん <a href="https://twitter.com/tomoya_cs">@tomoya_cs</a> をフォローするとさらに捗ると思います。</p>

<p><blockquote data-conversation="none" class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭<br>あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） <a href="https://t.co/eDQz8A5VCC">https://t.co/eDQz8A5VCC</a></p>&mdash; tomoya | Looker CS (@tomoya_cs) <a href="https://twitter.com/tomoya_cs/status/1428194155943972872?ref_src=twsrc%5Etfw">2021年8月19日</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </p>
<div class="footnote">
<p class="footnote"><a href="#fn-25b67c2a" name="f-25b67c2a" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%86%E3%83%AA%E3%82%B8%E3%82%A7%E3%83%B3%E3%82%B9">Business Intelligence</a></span></p>
<p class="footnote"><a href="#fn-e46aea89" name="f-e46aea89" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://slack.com/intl/ja-jp/help/articles/218688467-Slack-%E3%81%AB-RSS-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">Slack に RSS フィードを追加する | Slack</a></span></p>
<p class="footnote"><a href="#fn-c898f381" name="f-c898f381" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">例: <a href="https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker-21-12-%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88-27799">Looker 21.12 リリースノート | Looker Community</a></span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firestore エミュレーターを使ったテスト同士の競合が起きないようにしていい感じにテストできるようにした話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/07/07/103917</id>
        <link href="https://developer.feedforce.jp/entry/2021/07/07/103917"/>
        <updated>2021-07-07T01:39:17.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/len_prog/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/len_prog/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:len_prog</a> です。</p>

<p>私が所属している <a href="https://ecbooster.jp/">EC Booster</a> チームでは、「<a href="https://support.ecbooster.jp/ja/articles/4854572-%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%82%AB%E3%83%BC%E3%83%89%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">カイゼンカード</a>」機能の開発に Firebase を採用しています。<br />
その中でも特に Cloud Functions for Firebase と Cloud Firestore をメインで使用しており、これらの採用により短い開発期間で機能をリリースすることができました 🎉</p>

<p>しかし、Firebase を採用したことで苦労したことが全く無かったわけではありません。<br />
特に、テスト周りはインターネット上にもあまり情報が多くない状況で、色々ハマりながら開発をしてきました。</p>

<p>そこで、今回の記事では、いくつかあったハマりごとの中でも特に厄介だったものについて対策を書いていきます。</p>

<h1>Firestore Emulator のプロジェクト共有時のデータ競合</h1>

<p><a href="https://firebase.google.com/docs/emulator-suite?hl=ja">Firebase Local Emulator Suite</a> を使って Firestore に接続するテストを書いていた際に、<br />
テストを単体で実行した場合には通るのに、他のテストと並列に実行した場合のみドキュメントの状態が予期せぬものになりテストが落ちてしまうことに悩まされました。</p>

<p>調査の結果、これは、接続先プロジェクトがすべてのテストで同じになってしまっているのが原因ということが分かりました。</p>

<p>この状態で同じドキュメントを書き換えるテストが並列で走ってしまった場合、実行タイミングによってはドキュメントが予期せぬ状態になってしまいます。<br />
また、テスト結果が不安定だとテストが信用できず、実装を保証するものになりません。</p>

<p>このままでは役に立つテストが書けないと思い試行錯誤した結果、<strong>テストごとに違うプロジェクトの Firestore に接続する</strong>ことでそれぞれのテストが独立した状態で実行でき、結果としてデータ競合が防げることが分かりました。</p>

<p>以下、サンプルアプリケーションを用いてこの方法について書いていきます。</p>

<h1>サンプルアプリケーションの概要</h1>

<p>今回は、サンプルとして簡易的な RPG を開発することを想定します。<br />
ゲームに登場するキャラクターは、以下のような構造のドキュメントを持つ <code>characters</code> コレクションで管理されています。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synIdentifier">{</span>
  name: <span class="synType">string</span><span class="synStatement">;</span>
  level: <span class="synType">number</span><span class="synStatement">;</span>
  job: <span class="synType">string</span><span class="synStatement">;</span>
<span class="synIdentifier">}</span>
</pre>


<p>また、このゲームでは以下の行動のみが可能と仮定します(これだけじゃゲームとして成り立たないと思いますが、簡単のためということでお許しください)</p>

<ul>
<li>キャラクターは、レベルアップすることができる</li>
<li>キャラクターは、転職することができる

<ul>
<li>転職すると、キャラクターのレベルが1に戻る</li>
</ul>
</li>
</ul>


<p>なお、アプリケーション上においてキャラクターのレベルアップは、<code>characterLevelUpUseCase</code>、キャラクターの転職は <code>characterJobChangeUseCase</code> という関数を呼ぶことで行えることとします。</p>

<p>ここからは、実際にこれら2つの関数のテストコードが競合する様子を見ていきます。</p>

<h1>データ競合発生時の構成</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210624/20210624165133.png" alt="f:id:len_prog:20210624165133p:plain:w500" width="1200" height="790" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><code>characterJobChangeUseCase</code> と <code>characterLevelUpUseCase</code> が <code>my-game</code> プロジェクトの Firestore を共有してしまっています。<br />
この状態で両方の関数から同じドキュメントを書き換えてしまった場合、データ競合が発生する可能性があります。<br />
この場合、実際のコードは以下のようになります。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterJobChangeUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;my-game&quot;</span><span class="synStatement">,</span> <span class="synComment">// ここが問題</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterJobChangeUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterJobChangeUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>
    <span class="synStatement">const</span> jobChangedCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>jobChangedCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">1</span><span class="synStatement">);</span> <span class="synComment">// 実行タイミング次第では、1になるはずが11になってしまう！</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterLevelUpUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;my-game&quot;</span><span class="synStatement">,</span> <span class="synComment">// ここが問題</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterLevelUpUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterLevelUpUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>
    <span class="synStatement">const</span> grownCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>grownCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">11</span><span class="synStatement">);</span> <span class="synComment">// 実行タイミング次第では、11になるはずが1に戻ってしまう！</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>見ての通り、両方のテストが <code>my-game</code> プロジェクトの Firestore の、ID: <code>target-character-id</code> のドキュメントを更新してしまっています。<br />
これらのテストコードを並列で実行した場合、<strong>キャラクターが転職したのにレベルが1に戻らない</strong>、<strong>キャラクターがレベルアップしたはずなのになぜかレベル1に戻ってしまう</strong>など予期せぬ状態になってしまい、
テストが落ちてしまう可能性があります。</p>

<p>この状態ではテストコードが信用できないので、テストごとに向き先プロジェクトを変えてこの問題を解決していきます。</p>

<h1>データ競合解決後の構成</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png" alt="f:id:len_prog:20210705113933p:plain:w500" width="1200" height="779" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>上図②③のようにテストごとに接続先プロジェクトを独立させることで、他のテストとの並列実行が原因のデータ競合を防ぐことができます。<br />
具体的には、以下のように <code>admin.initializeApp()</code>の第一引数に他のテストと重複しないプロジェクトID を渡すようにします。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-job-change-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">//  図の②に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-level-up-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">// 図の③に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>変更後のコードの全体像は以下のようになります。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterJobChangeUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-job-change-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">//  図の②に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// ここから下は構成変更前のコードと同じ</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterJobChangeUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterJobChangeUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>
    <span class="synStatement">const</span> jobChangedCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>jobChangedCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">1</span><span class="synStatement">);</span> <span class="synComment">// 転職するとレベルが1に戻ることを検証できるようになった</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>
<span class="synStatement">import</span> * <span class="synStatement">as</span> admin <span class="synStatement">from</span> <span class="synConstant">&quot;firebase-admin&quot;</span><span class="synStatement">;</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> characterLevelUpUseCase <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class="synStatement">;</span>

admin.initializeApp<span class="synStatement">(</span><span class="synIdentifier">{</span>
  projectId: <span class="synConstant">&quot;character-level-up-use-case-spec&quot;</span><span class="synStatement">,</span> <span class="synComment">// 図の③に対応</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>

<span class="synComment">// ここから下は構成変更前のコードと同じ</span>

<span class="synStatement">const</span> charactersCollection <span class="synStatement">=</span> admin
  .firestore<span class="synStatement">()</span>
  .collection<span class="synStatement">(</span><span class="synConstant">&quot;characters&quot;</span><span class="synStatement">);</span>

describe<span class="synStatement">(</span>characterLevelUpUseCase<span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> targetCharacterId <span class="synStatement">=</span> <span class="synConstant">&quot;target-character-id&quot;</span><span class="synStatement">;</span>

  beforeEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.set<span class="synStatement">(</span><span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;アルス&quot;</span><span class="synStatement">,</span>
        level: <span class="synConstant">10</span><span class="synStatement">,</span>
        job: <span class="synConstant">&quot;すっぴん&quot;</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span><span class="synStatement">);</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  afterEach<span class="synStatement">(async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.<span class="synStatement">delete();</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>

  it<span class="synStatement">(</span><span class="synConstant">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class="synStatement">,</span> <span class="synStatement">async</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">await</span> characterLevelUpUseCase<span class="synStatement">(</span>targetCharacterId<span class="synStatement">);</span> <span class="synComment">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>
    <span class="synStatement">const</span> grownCharacter <span class="synStatement">=</span> <span class="synStatement">(await</span> charactersCollection.doc<span class="synStatement">(</span>targetCharacterId<span class="synStatement">)</span>.get<span class="synStatement">())</span>.data<span class="synStatement">();</span>

    expect<span class="synStatement">(</span>grownCharacter.level<span class="synStatement">)</span>.toBe<span class="synStatement">(</span><span class="synConstant">11</span><span class="synStatement">);</span> <span class="synComment">// レベルアップした場合にレベルが1上がることを検証できるようになった</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
<span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>このようにテストごとに向き先プロジェクトを変えることで、それぞれのテストで担保したいことをちゃんと担保できるようになります。</p>

<h1>ちょっと微妙な点</h1>

<p>上記の方法でテストごとに独立した環境の Firestore を操作できるようになり、データ競合を防げるようになりました。</p>

<p>しかし、この方法にはひとつだけ微妙な点があります。<br />
問題の説明のために、先程掲載した<code>競合解決後の構成図</code>を再掲します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png" alt="f:id:len_prog:20210705113933p:plain:w500" width="1200" height="779" loading="lazy" title="" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>上図①の接続先は、<code>$ firebase use</code> で指定したプロジェクトか、<code>$ firebase emulators:start</code> に <code>--project</code>を渡した場合にはそのプロジェクトになり、そのほかの方法で変えることは今のところできないようです。</p>

<p>そのため、プロジェクトをテストごとに分けた場合、上図②③のテスト中にテスト自体は動くものの、Firebase Emulator の UI からデータの内容を見ることはできなくなります。</p>

<p>一応、接続先を <code>$ firebase use</code> で指定しているものに切り替えるようコードを書き換えたりすればデバッグはできますが、
いちいち書き換えの手間が生じるので若干面倒です。</p>

<p>また、これは Firebase Enulator の UI で立ち上がっているすべてのプロジェクトの Firestore を見られるようになれば解決する問題ではあり、実際に <a href="https://github.com/firebase/firebase-tools-ui">firebase/firebase-tools-ui</a> リポジトリに <a href="https://github.com/firebase/firebase-tools-ui/issues/281">issue</a> も立っていますが、すぐに対応が終わりそうには見えない状況なので、しばらくは不便な状況が続くことが予想されます。</p>

<h1>所感</h1>

<p>Firebase は便利ですが、当然ながら全くハマらずに開発できる銀の弾丸ではないですね。<br />
しかし、基本的には便利でドキュメントもそれなりに読みやすく、個人的には使っていて満足感があります。</p>

<p>今後も日々の開発で得た Firebase や GCP 周りの TIPS を書いていけたらと思っておりますので、よろしくお願いいたします 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apple Silicon Mac で複数 Terraform バージョンを管理するために asdf-terraform-build を作った]]></title>
        <id>https://blog.tsub.me/post/create-asdf-terraform-build/</id>
        <link href="https://blog.tsub.me/post/create-asdf-terraform-build/"/>
        <updated>2021-06-19T08:41:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/tsub/asdf-terraform-build"><img src="https://gh-card.dev/repos/tsub/asdf-terraform-build.svg?fullname=" alt="tsub/asdf-terraform-build - GitHub" /></a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[一年間の育休から復帰しました]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/16/120000</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/16/120000"/>
        <updated>2021-06-16T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、インフラエンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。実は去年の 1 月から 1 年間育休を取っており、今年の 1 月から復帰していました。</p>

<p>復帰してから記事を書くのが遅くなってしまいましたが、社内勉強会で話したスライドや育休から復帰してみてどうだったかをまとめてみました。</p>

<h2>社内勉強会で話した</h2>

<p>今年の 3 月頃に社内の技術勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で発表しました。
(技術勉強会という立て付けですが、技術に限らず本人が話したいことを話して良い場です)</p>

<script async class="speakerdeck-embed" data-id="e196f600db8d42c4841227d36b76f3b5" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>なぜ一年間の育休を取得したのか、育児の知見などがスライド内に書いてありますので気になる方はご覧ください！</p>

<p>ちなみに当時のスライド内ではねんねトレーニング (ネントレ) をやっていると書いてありますが、実は現在はやってません。</p>

<p>理由はネントレの効果が見られなくなったためです。</p>

<p>今年の 4 月くらいから寝付きが悪くなり、胸や背中をトントンしないと寝てくれなくなってしまいました。</p>

<p>それ以降夜通し寝てくれないことも増えてしまい、再度ネントレにチャレンジしましたが夜泣きは改善されなかったため、夜泣きの原因は寝かしつけ方法と直接関係ないのでは？と思いネントレをやめました。</p>

<p>ちょうどその頃から奥歯が生え始めていたので、それが原因だったのではないかとは思っています。</p>

<p>ここ最近は歯の痛みが落ち着いたのか、夜泣きが少し減ってきたような気がします。と思ってたらまた夜泣きが復活しました... 😭</p>

<p>やっぱりセルフねんねしてくれてた頃と比べて寝かしつけにかかる時間は増えましたが...</p>

<p>寝かしつけで悩んでいる方にとって少しでも参考になれば幸いです。
(自分はめっちゃ悩んだ)</p>

<h2>育休から復帰した感想</h2>

<p>スライド内でも触れていましたが、やはり一番感じたことは一年間というそれなりに長い期間にも関わらず、普段有給を取るのとそこまで大きく変わらないくらいの感覚でした。</p>

<p>もちろん育休を取るという話をしてからチーム内での調整は行いましたが、取得する障壁は特にありませんでした。
チームメンバーも育休は取得する前提で育休期間中はどう進めていくのか、という話にフォーカスしている印象でした。</p>

<p>そして、一年間の育休を終えて復帰する際にもすんなり業務に戻ることができました。</p>

<p>人事やチームメンバーが自分の育休中の変化を事前に記事にまとめてくれていたこともあり、キャッチアップも大体 2 週間くらいで完了しました。</p>

<p>復帰がスムーズにいった理由の 1 つにチーム体制や使用技術に大きな変化がなかったことも大きいと思います。</p>

<p>以下の記事でも軽く触れていますので良ければご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn98075add5154" title="「謙虚な人が多い」「有休みたいに育休がとれる」エンジニアが語る、フィードフォースのぶっちゃけ裏話｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<h2>働き方の変化</h2>

<p>育休取得前後 (子どもが生まれる前後) での大きな変化の 1 つとして、働き方がかなり変わりました。</p>

<p>子どもが生まれる前は 10:00 ~ 19:00 で働いており、モチベーションや体力がある日は少し長めに働いたり、反対に効率の悪い日は早めに退勤したりという働き方をしていました。</p>

<p>子どもが生まれた後は保育園や子どもの就寝時間の都合で 8:00 ~ 17:00 で働くこととなり、保育園の送り迎えや夕飯の支度などがあるので長めに働くということができなくなりました。</p>

<p>また、プライベートの時間で技術的な勉強をやることもほとんどなくなってしまいました。</p>

<p>やる時間が全くないわけではないのですが、ゲームなどでリフレッシュしないと育児疲れが厳しいのと、まとまった時間が取りづらいのが理由です。</p>

<p>子どもが起きている間はなかなか PC を広げて作業しづらいですし、寝ている間も夜泣きなどでいつ泣くか分からないので集中して作業ができないです。</p>

<p>とはいえプライベートで開発する時間を取れなくても個人的にはそこまでストレスになっていなくて、今はそういう時期と割り切っています。</p>

<p>また仕事で直接使えるような技術の検証であれば、チームの計画に入れて業務時間内で進められるのでなんとかなっています。</p>

<h2>終わりに</h2>

<p>育休から復帰してまだ半年程度なので育児もまだまだこれからという感じですが、仕事との両立を引き続き頑張っていきたいと思います 💪</p>

<p>ちなみに自分が育休から復帰した前後で他のエンジニアも育休を取得していました。よければこちらの記事もぜひご覧ください！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn6cf3af35cb86" title="「家庭あっての職業人」限られた時間で成果を出すためにパパエンジニアが取り組んでいること｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『ここがつらいよ普段使いのLinux』という発表をした]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/11/180000</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/11/180000"/>
        <updated>2021-06-11T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> です。いよいよ明後日は <a href="https://jp.rizinff.com/_ct/17440570">RIZIN.28</a> ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。</p>

<p>本日、週次の社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTBXZg9pczERJABgT3Uuu922Ktcc91HHl00QOtySt7fFtxrL4NZOcco1BtkK_pDuFkO0Uo-JuAwBkoC/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="400" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。</p>

<p>そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。</p>

<p>数々の諸問題が発生しましたが、無事全部解決（？）したお話です。</p>

<ul>
<li>キーボードショートカットがつらい</li>
<li>タッチパッドがつらい</li>
<li>指紋認証出来なくてつらい</li>
<li>たまにスリープから復帰しなくてつらい（一番つらい）</li>
<li>ちょっとした画像編集に GIMP を使うのはつらい</li>
</ul>


<p>みんなも Mac を捨てて Linux を使うといいと思うよ！</p>

<p>それでは！</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg" class="hatena-asin-detail-image" alt="だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス" title="だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" target="_blank" rel="noopener">だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%20%C5%AF%BA%C8" class="keyword">鈴木 哲哉</a></li><li>オーエス出版</li></ul><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021年夏】半期に1度の Engineer’s Principles Award 受賞者を紹介します]]></title>
        <id>https://developer.feedforce.jp/entry/2021/06/11/164253</id>
        <link href="https://developer.feedforce.jp/entry/2021/06/11/164253"/>
        <updated>2021-06-11T07:42:53.000Z</updated>
        <summary type="html"><![CDATA[<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/f/feedforce_recruit/20210611/20210611163915.jpg" alt="f:id:feedforce_recruit:20210611163915j:plain" width="1200" height="700" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>こんにちは。人事の今岡と申します。
2021年もあっという間に6月ですね。</p>

<p>フィードフォースでは先日オンライン納会が開催され、半期に一度の「Engineer’s Principles Award 2021 Summer」の受賞者が発表されました。
今回アワードを受賞した開発メンバーと表彰内容をご紹介します。</p>

<p>前回の表彰者紹介はコチラ</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F28%2F131042" title="半期に1度の Engineer’s Principles Award 受賞者を紹介します - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2020/12/28/131042">developer.feedforce.jp</a></cite></p>

<h2>Engineer’s Principles Award とは</h2>

<p>Engineer’s Principles とは、フィードフォースの開発メンバー向けに現場が主体となって設定した、5つの行動指針です。
半期に一度、開発メンバー同士で投票を行い、行動指針の項目ごとに最も体現しているメンバーが選ばれ表彰されます。</p>

<p>Engineer’s Principles についてはこちら</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fnd1f2236470b3" title="フィードフォースが目指すエンジニア像とは。「Engineer’s Principles」を紹介します｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/nd1f2236470b3">media.feedforce.jp</a></cite></p>

<h2>受賞者紹介</h2>

<p>※表彰コメントは本来社内向けのものであるため一部変更させていただいています。受賞者によって各種アカウントを載せています。</p>

<h3>🏆「Stay Humble; 常に謙虚であるべし」受賞者</h3>

<h4>@len_prog さん</h4>

<p>表彰コメント：<br />
社内でメジャーな Rails 以外でバックエンドを実装する際に、なぜそうするのかという理由やレイヤーの切り方を他のメンバーにわかりやすく説明していました。
一方、自分自身で苦手なことがあった場合に、他の人に相談したり、フィードバックを求めそれを受け入れる姿勢は、まさに Stay Humble だと思いました。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/len_prog">Len (@len_prog)</a> , <i class="blogicon-entry"></i> <a href="https://len-prog.hatenablog.com/">Blog</a></p>

<h4>@katsunn さん</h4>

<p>表彰コメント：<br />
事前に色々なアイデアを用意しつつも、相談の過程でお互いの認識や意図を踏まえたうえで改善を進めていく一方、ただ受け入れるだけではなく、
プロフェッショナルとして自分なりに咀嚼したアウトプットにしていく姿勢が非常に素晴らしく、ベンチマークにすべきだと感じました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/nomo_017">のもち(@nomo_017)</a></p>

<h3>🏆「Be Positive &amp; Proactive; 常に肯定的・主体的であるべし」受賞者</h3>

<h4>@sukechannnn さん</h4>

<p>表彰コメント：<br />
エンジニアとして様々なチームビルディングや開発手法を試しているだけではなく、ビジネス視点からも方向性を考え、
プロダクトオーナーとしてプロダクトを成長させようとしている姿勢は、まさにこの言葉にぴったりだと思います。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/sukechannnn"> sukechannnn (@sukechannnn)</a> , <i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/sukechannnn">sukechannnn</a></p>

<h4>@daido1976 さん</h4>

<p>表彰コメント：<br />
分野を問わず新しいことに前向きに挑戦し、気になったことはどんどん質問するのに加え、
育休中のメンバーに代わって、率先してチームを引っ張っている行動力が素晴らしいと思いました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/daido1976">Daido Shota (@daido1976)</a> , <i class="fa fa-github" aria-hidden="true"></i>  <a href="https://github.com/daido1976"> daido1976</a></p>

<h3>🏆「Be Prepared; 常に来たるべき機会に備えるべし」受賞者</h3>

<h4>@daido1976 さん</h4>

<p>表彰コメント：<br />
自分のキャリアや目指すべき方向を踏まえつつ、常にアンテナを立てて知識を広く持とうとしている姿勢がよいと感じています。
さらに、そうして蓄積したスキルを開発だけではなく、自ら手を挙げ講師をつとめた新卒向け Web 研修にも活かしている点がまさに Be Prepared だと思いました。</p>

<p><i class="blogicon-twitter"></i>  <a href="https://twitter.com/daido1976">Daido Shota (@daido1976)</a> , <i class="fa fa-github" aria-hidden="true"></i>  <a href="https://github.com/daido1976"> daido1976</a></p>

<h4>@namikingsoft さん</h4>

<p>表彰コメント：<br />
Omni Hub の開発において、あまり開発経験がなかったはずの Rust を使いこなしつつ WAF を含めたインフラ構築をしていて、
@namikingsoft さんの強みが発揮される局面でした。また dfplus.io でもパフォーマンス改善でコアな知識を活かすなど、まさにこれまでの準備の賜物だと思います。</p>

<p><i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/namikingsoft">namikingsoft</a></p>

<h3>🏆「Share All; 己の知見、試行、失敗、遍く共有すべし」受賞者</h3>

<h4>@masutaka さん</h4>

<p>表彰コメント：<br />
Looker 導入において知見や失敗など社内共有しているほか、そもそも  esa にどう記録すべきかといった、「共有のための知見の共有」にまで配慮しています。
Slack や esa 、Blog への共有はエンジニアのみならず、全社的にプラスの影響を与えていて、まさに共有の神様と言えるでしょう。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/masutaka">Takashi Masuda (@masutaka)</a> , <i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/masutaka">masutaka</a> , <i class="blogicon-entry"></i> <a href="https://masutaka.net/">Blog</a></p>

<h4>@kogai さん</h4>

<p>表彰コメント：<br />
Shopify 周りでは、社内だけでなく社外に対してのプレゼンスを示しています。また Omni Hub の開発で多忙な中、
社内勉強会 Rust の会では実際の新規事業のプロダクトコードを題材に実践的な知見を共有するなど、その共有力はフィードフォースエンジニアの鑑（かがみ）だと思います。</p>

<p><i class="blogicon-twitter"></i> <a href="https://twitter.com/iamchawan">茶碗 (@iamchawan)</a> ,<i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/kogai">kogai</a> , <i class="blogicon-entry"></i> <a href="https://k9bookshelf.com/blogs/development">Blog</a></p>

<h3>🏆「Just Do It; 全力でやりきるべし」受賞者</h3>

<h4>@namikingsoftさん</h4>

<p>表彰コメント：<br />
Omni  Hub リリースまでの道筋をきちんと立ててスケジュール以上の速さで完走して去っていくその姿は、まさに Just Do It でした。</p>

<p><i class="fa fa-github" aria-hidden="true"></i> <a href="https://github.com/namikingsoft">namikingsoft</a></p>

<h2>周囲の賞賛・承認を共有するよい機会に</h2>

<p>以上、延べ9名の受賞者でした。</p>

<p>表彰コメントは、<strong>開発メンバー同士の投票時に自由記述できるコメントがもとになっているので</strong>、周囲からの賞賛・承認の声を全社で共有できるよい機会となっています。</p>

<p>前回に引き続き連続受賞しているメンバーもいますが、投票コメントには毎回違ったエピソードが集まっており、日ごろから継続的に実践をしているからこそ周りのエンジニアの目に留まるのだと感じました。</p>

<p>受賞者のみなさん、おめでとうございました！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[プランニングの難しさを乗り越えて...スクラム開発が良い感じになった話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/05/31/104813</id>
        <link href="https://developer.feedforce.jp/entry/2021/05/31/104813"/>
        <updated>2021-05-31T01:48:13.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。フィードフォースの <a href="https://ecbooster.jp/">EC Booster</a> チームで開発（主にプロダクトオーナー）をしている <a href="https://twitter.com/sukechannnn">@sukechannnn</a> です。元々ずっとバックエンドエンジニアでしたが、最近プロダクトオーナーをやるようになりました（理由はのちほど！）。</p>

<p>昨年のアドベントカレンダーで <a href="https://developer.feedforce.jp/entry/2020/12/11/172338">半年モブプロしたらチームが大きく成長した話</a> というブログを書いたのですが、2021年3月から <strong>モブプロを取り入れたスクラム開発</strong> をしています。それに伴って、"モブプロ" と "個人タスク⇢レビュー" の両軸で開発するようになりました（<a href="https://prtimes.jp/main/html/rd/p/000000040.000071307.html">先日リリースしたカイゼンカード</a> はスクラムで開発しました）。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F11%2F172338" title="半年モブプロしたらチームが大きく成長した話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>今は良い感じに回っていますが、そうなるまでに色々と試行錯誤したので、そこで得た学びをお伝えできればと思います。全員リモートワークで開発するなら、モブプロを取り入れたスクラムはおすすめです！</p>

<ul class="table-of-contents">
    <li><a href="#モブプロの良さと難しさ">モブプロの良さと難しさ</a></li>
    <li><a href="#そうだスクラムしよう">そうだ、スクラムしよう！</a></li>
    <li><a href="#プランニングが終わらない問題">プランニングが終わらない問題</a></li>
    <li><a href="#原因はissue-が散らかっていることだった">原因は「issue が散らかっていること」だった</a></li>
    <li><a href="#issue-をグルーピング優先順位はそれぞれで">issue をグルーピング、優先順位はそれぞれで</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="モブプロの良さと難しさ">モブプロの良さと難しさ</h2>

<p>モブプロ中心の開発を初めた当初は、以下の利点を感じていました。</p>

<ul>
<li>ドメイン知識の共有がしやすい</li>
<li>コンテキストの共有がしやすい（"何をどう作るか" という議論もしやすい）</li>
<li>レビューが要らない</li>
<li>リモートワークでもさみしくない（だいじ）</li>
</ul>


<p>しばらくモブプロを続ける中で、開発メンバー全員がドメイン知識やフロント〜バックエンド全体の技術的な知識を共有している状態になりました。なので、なにか悩みがあってモブプロで共有すると「わかる〜」となるし、何より単純に仲良くなったと思います（ﾖｼｯ!!）。</p>

<p>一方で、だんだんと <strong>モブプロだけ</strong> の開発が窮屈になってきました。</p>

<ul>
<li>知識の共有が進んできて "全員でやらなくても良くない？" というタスクが増えてきた</li>
<li>個人でじっくり考えた方が良いタスクもあるのが分かった（新しい技術の調査、設計の見直しなど）</li>
</ul>


<p>これはチームが成長したことで出てきた嬉しい悩みなのですが、とはいえ完全にモブプロを辞めるのも上述したメリットを失いそうで怖い...。チーム全員で「今後どう開発していこう？」というのを話し合い、<strong>モブプロを取り入れたスクラム開発</strong> を試してみることにしました。</p>

<h2 id="そうだスクラムしよう">そうだ、スクラムしよう！</h2>

<p>スクラム開発をしようと思ったのは、ストーリーポイント<a href="#f-9495249b" name="fn-9495249b" title="ストーリーポイント：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる">*1</a>で見積もって <strong>ベロシティ<a href="#f-33d76d3d" name="fn-33d76d3d" title="ベロシティ：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと">*2</a>を測りたい</strong> という別の目的もありました。</p>

<p>モブプロで開発していると新機能のメイン開発は着実に進んでいくのですが、それ以外の細かいタスク（主に保守系）が見積もりづらい状況で、空いた時間にやるという形になってしまっていました（それ用に時間は設けていましたが）。</p>

<p>モブプロ以外の個人タスクを計画的にやりたい、見積もりもしっかりやりたい、ということで、スクラムを導入することで、<strong>モブプロと個人開発のいいとこ取り</strong> をしようと考えました。</p>

<ul>
<li>新機能開発などのコンテキストの共有が重要なタスクは引き続きモブプロでやる

<ul>
<li>ストーリーポイントで見積もる</li>
</ul>
</li>
<li>それ以外は個人タスクとして各自で進められるように、プランニングでしっかり整理する

<ul>
<li>個人タスクもストーリーポイントで見積もる</li>
</ul>
</li>
<li>全てのタスクをストーリーポイントで見積もるのでベロシティが測れるようになる

<ul>
<li>振り返りで見積もりの精度を上げられる</li>
</ul>
</li>
</ul>


<p>めっちゃ良さそう...そう思っていざやってみたところ、１つ大きな壁にぶち当たってしまいました。</p>

<h2 id="プランニングが終わらない問題">プランニングが終わらない問題</h2>

<p><a href="https://www.shoeisha.co.jp/book/detail/9784798130507">エッセンシャルスクラム</a>にもある通り、１週間のプランニングに２時間以上かけるべきではありません。僕らは「１スプリント=１週間」で回しているため、２時間の予定で始めたプランニングですが、これが終わらない...。最初から何回かは４時間以上かかり、全員ヘトヘトになってしまいました。</p>

<p>モブプロはプランニングが簡単です。全員やることが同じなので、基本的にタスクが直列で繋がっていきます。そのため「今スプリントはここから⇢ここまで」という感じで Sprint Backlog 的なものを決めることができました。</p>

<p>しかし、スクラムの見積もりはもっと横断的なものです。単純に、今取り組んでいるものだけ見れば良いのではなく、これから取り組むものをたくさんある issue から選ぶ必要があります。そう、この <strong>たくさんある issue の中から今スプリントにやるタスクを選ぶこと</strong> に時間がかかってしまうのです。</p>

<p>以前にもスクラム開発を試したことがあるのですが、その時もこれが原因でプランニングがとても大変でした。気にするトピックが多すぎてだんだん何について議論してるか分からなくなり、空中戦になってしまうんですよね...。</p>

<p>その原因は、主に以下の２つでした。</p>

<ul>
<li>バックログの整理/管理に責任を持つ人（プロダクトオーナー<a href="#f-339964b7" name="fn-339964b7" title="プロダクトオーナー：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）">*3</a>）がいなかった</li>
<li>issue の数と種類が多く、バックログリファインメント<a href="#f-f2375d03" name="fn-f2375d03" title="バックログリファインメント：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと">*4</a>をしても整理しきれなかった</li>
</ul>


<p>プロダクトオーナー不在の問題は、元々それっぽいことをしていた僕が、改めてプロダクトオーナーやりますと手を上げ、バックログ管理の責任を持つことになりました。</p>

<p>それでも、バックログリファインメントが上手く行かない問題は残っていました。リファインメントの概念は理解していて、しっかり時間も取っていたのに、いざプランニングをすると色々な issue を見すぎて伸びてしまう...。過去に何度も直面したこの問題に、改めて取り組むことにしました。</p>

<h2 id="原因はissue-が散らかっていることだった">原因は「issue が散らかっていること」だった</h2>

<p>僕たちが開発している EC Booster は、ショッピング広告の自動運用やデータフィードの更新など、様々なジョブが裏で動いています。そのため、運用作業が日々発生し、運用の中で見つかる例外ケースやバグの修正が多々あります。
また、フロントエンドとバックエンドを全員が開発するため、１つのリポジトリで管理していることもあり、色々な種類の issue が１つのレーンに入り乱れてしまっていました。</p>

<p>そのため、優先順位を付けるのも難しく、また「次スプリントで何をどこまでやるか？」を判断するのが難しくなってしまっていました。</p>

<p>プロダクトバックログを整理しなければ、というのは分かっているのですが、スクラムに関する本やブログには整理の方法は書いてありません。どうやって整理したら分かりやすくなるかな...と考えていたところ、同僚が共有してくれた以下の記事が参考になりました。</p>

<p><a href="https://note.com/gonjyu/n/nd7bf3efa0728">エンジニア歴17年の俺が、事業系の開発タスクをバンバン投げてくる非エンジニアに、保守の必要性を死ぬほど分かりやすく説明する。</a></p>

<p>この記事の中で「issueには "種類" がある」と言っていて、issue の種類別に整理された図が載っていました。これだ...！</p>

<h2 id="issue-をグルーピング優先順位はそれぞれで">issue をグルーピング、優先順位はそれぞれで</h2>

<p>上記の記事を参考に、issue を <strong>新機能開発</strong>、<strong>バグ修正/運用改善</strong>、<strong>ライブラリーアップデート</strong> に分けて、それぞれのレーンで優先順位を付けるようにしました。</p>

<p><figure class="figure-image figure-image-fotolife" title="issue をグルーピング、優先順位はそれぞれで"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526215948.png" alt="f:id:sukechannnn:20210526215948p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>issue をグルーピング、優先順位はそれぞれで</figcaption></figure></p>

<p>issue の種類が同じなので、優先順位を付けるのは簡単です。さらに、スプリントバックログに入れるタスクを <strong>新機能開発：運用系 = ６：４</strong> の割合にする、という決めを作りました。さらに、何回かスプリントを回してベロシティも見えてきました。</p>

<p>ここまで情報が揃うと <strong>次のスプリントで何をやるか決める基準</strong> ができてきます。</p>

<p>そもそもの「次のプランニングでどの issue について話すか？」というのも、それぞれのレーンで優先順位が高い issue を６：４のバランスとベロシティを参考に選べるようになりました。<strong>プランニングの前</strong>にプロダクトオーナーが（開発チームと協力しながら）当たりを付けておくことで、プランニングで話すトピックを事前に共有できるようになり、開発メンバーそれぞれが事前に頭を整理しておくこともできるようになりました。</p>

<p>これにより、プランニングがかなりスムーズに進むようになったので、いよいよスクラムが回り始めました。新機能開発はモブプロの同期的な開発で、それ以外のタスクは個人タスク⇢レビューという非同期な開発で進められるようになり、デリバリーの最大化を目指しつつ、個人の稼働率も上げられるようになりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526212511.png" alt="f:id:sukechannnn:20210526212511p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい</figcaption></figure></p>

<h2 id="まとめ">まとめ</h2>

<p>issue をグルーピングしそれぞれで優先順位を付けたことで、プランニングが時間内に収まるようになっただけでなく、プランニングで話すトピックを絞ったことでより深い議論をすることができるようになりました。今は「モブプロを取り入れたスクラム」がとても良い感じに回っています！</p>

<p>↓ EC Booster チームでの「スプリントの回し方」資料を公開しているので、気になった方はぜひ見てみてください！（もっとこうしたら良いよ！という助言などあれば頂けると嬉しいです！）</p>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTQY639rUAwDDtLfj_c9WbU1E0IlDSFzAbrP-XFCmbg8V_sNKPX_pCvKpiy50CQpS02nXvZnQHBb6JT/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>こんな感じ開発している EC Booster ですが、ただ今 <strong>バックエンド（Ruby, Rails）が得意なエンジニアを猛烈に必要としています！！！</strong></p>

<p>もしちょっっっとでも興味があれば、 <strong>僕とお話しましょう！</strong> 以下から気軽に応募してください！
<a href="https://open.talentio.com/1/c/feedforce/requisitions/detail/19785">https://open.talentio.com/1/c/feedforce/requisitions/detail/19785</a></p>

<p>最後まで読んでいただき、ありがとうございました！</p>
<div class="footnote">
<p class="footnote"><a href="#fn-9495249b" name="f-9495249b" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/3716">ストーリーポイント</a>：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる</span></p>
<p class="footnote"><a href="#fn-33d76d3d" name="f-33d76d3d" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/4802">ベロシティ</a>：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと</span></p>
<p class="footnote"><a href="#fn-339964b7" name="f-339964b7" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/7143">プロダクトオーナー</a>：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）</span></p>
<p class="footnote"><a href="#fn-f2375d03" name="f-f2375d03" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="https://www.ryuzee.com/contents/blog/5024">バックログリファインメント</a>：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアキャリアパスをアップデートしました]]></title>
        <id>https://developer.feedforce.jp/entry/career_path_revised_2021</id>
        <link href="https://developer.feedforce.jp/entry/career_path_revised_2021"/>
        <updated>2021-05-24T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="https://twitter.com/meihong">meihong</a> です。</p>

<p>株式会社フィードフォースでは<a href="https://media.feedforce.jp/n/nc7a2e89635eb">定期評価ではなく本人の希望するタイミングで評価を行う制度</a>を導入しています。具体的には、各等級ごとに満たすべき基準・条件、またはスキルがあらかじめ提示されており、それを満たしていれば次の等級に進める制度になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn222a08fd3e2b" title="半年に1回の評価制度を毎月の評価制度に変えた話｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n222a08fd3e2b">media.feedforce.jp</a></cite></p>

<p>この基準やスキルを私たちはキャリアパスと呼んでいますが、今回、エンジニアのキャリアパスをアップデートしましたのでご紹介したいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524010544.png" alt="f:id:meihong:20210524010544p:plain" width="1200" height="630" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2>なぜキャリアパスをアップデートしたのか</h2>

<p>もともとのキャリアパスは<a href="https://media.feedforce.jp/n/n222a08fd3e2b">導入当初に設計されたもの</a>をベースに、マネージャやエンジニア、新規事業向けエンジニアといった個々人の志向に応じて細分化されていました。</p>

<p>これはこれでよくできたものだったのですが、しばらく運用している中でいくつかの課題点を感じるようになってきました。
例えば、</p>

<ul>
<li>志向ごとに分かれすぎていて、志向を横断した動きが想定しづらくなった。</li>
<li>独り立ちと判断される等級であるメンバーとその一つ上のシニアの境界に「見えない高い壁」が存在するようになった。</li>
<li>シニア以上の等級になるとチームや会社を牽引することを求められ、技術をそれ以上深掘りすることに対して会社がどう考えているのかが見えづらくなった。</li>
</ul>


<p>といったところです。</p>

<p>特にキャリアパス全体として、職種問わず等級が上がれば上がるほどチームや会社への影響力が求められる設計になっています。</p>

<p>もちろんエンジニアも全体への影響力は持つべきなのですが、その持ち方は他の職種と異なり、技術力の広さ、深さといった持ち方もあるのではないかと考えるようになりました。</p>

<p>ここで、個人的にはプロフェッショナルとしてのスキルは体積であり、その底面積はスキルの幅広さだと考えています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210523/20210523235853.png" alt="f:id:meihong:20210523235853p:plain" width="1200" height="731" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>極端に底面積が狭いのはさすがに現時点では厳しいとは思いますが、</p>

<ul>
<li>底面積がそれなりである代わりに高さ(= 深さ)がある</li>
<li>底面積が広い (= 引き出しが多い) 反面高さはそこまででもない</li>
</ul>


<p>の両者は体積という意味では同じはずです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524000640.png" alt="f:id:meihong:20210524000640p:plain" width="1200" height="576" loading="lazy" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>この両者が共存できる余地が欲しいと考えていました。</p>

<p>そんな中、弊社デザイナーのキャリアパスがアップデートされました。その中でも目を引いたのは、必須スキルと専門スキルという考え方です。</p>

<p>必須スキルはデザイナーとして必ず持っていて欲しいスキルである一方、専門スキルは本人の志向、特性に応じてピックアップできるというもので、大学の専攻を思い出す建て付けでした。</p>

<p><s>これをパクる</s>これにインスパイアされて、エンジニアのキャリアパスもアップデートすることにしました。</p>

<h2>どのように更新したのか</h2>

<p>結果から先にお伝えしておくと、大まかに以下のような方向性に改訂しました。</p>

<ul>
<li>志向ごとのキャリアパスは止めた。</li>
<li>旧来の「志向」を専門スキルに分解し、専門スキルの組み合わせで個々人の志向・特性を表現できるようにした。</li>
<li>等級が上がれば上がるほど満たすべき専門スキルの最低数が増えるようにした。</li>
</ul>


<p>その結果として、例えば</p>

<ul>
<li>バックエンドエンジニアに特化</li>
<li>フルスタックエンジニア</li>
<li>フルスタックな知識をベースに事業の 0 → 1 フェイズに参画できるエンジニア</li>
<li>カスタマーサクセスエンジニア</li>
<li>アジャイルコーチ</li>
</ul>


<p>といった、実際に社内に存在している各エンジニアの志向や得意なポイントを表現できるようになりました。</p>

<h2>産みの苦しみ</h2>

<p>ここに至るまでには色々な葛藤がありました。
社内の esa にキャリアパスを更新したいと宣言はしたものの、社内のエンジニア個々人の顔を思い浮かべつつ何を専門スキルとして設定するかを考えると想像以上に難しい問題だということに気付きました。</p>

<h3>必須スキルと専門スキル</h3>

<p>そもそも必須スキルと専門スキルとは何か、そこの定義から考えることにしました。</p>

<p>必須スキルとは文字通り、全てのエンジニアが共通に要求されるスキルセットのことです。どちらかというと「バックエンド」「フロントエンド」といった用語で定義されるスキルセットというよりも「フィードフォースに所属するエンジニアとしての振る舞い方」ではないでしょうか。</p>

<p>そう考えながら改訂前のキャリアパスを改めて眺めていると、改訂前のキャリアパスはその振る舞いを定義していることに気付きました。その結果、改訂前のキャリアパスが必須スキルのベースとなりました。</p>

<p>そうです、キャリアパスの改訂によって、より要求水準が上がったとも言えます。</p>

<p>一方、専門スキルは、本人の得意分野、志向、特性を定義するものです。
その志向・方向性で貢献するのであれば、各等級ごとにどの水準の成果を出すべきか。それを定義するものが専門スキルになります。</p>

<h3>専門スキルとはどうあるべきか</h3>

<p>本人の志向を定義するものが専門スキルと説明しましたが、例えばカスタマーサクセスエンジニアやエンジニアリングマネージャといった職種にしてもエンジニアの延長である以上はエンジニアとしての「共通言語」を身につけているべきです。</p>

<p>その「共通言語」とは、例えば設計力であったり、フロントエンドやバックエンドのスキルが該当します。</p>

<p>こういった知識を前提として例えば事業開発であったりチームビルディングを行うべきで、これらの知識がなければエンジニアとの「共通言語」を持っていないと判断せざるを得ません。</p>

<p>一方で、「フロントエンド力」と「バックエンド力」が同じくらい強いエンジニアというのは SSR エンジニアで、そうそう市場には存在しません。そこで、フルスタックとはいえどこかの分野に軸足を置くことができる制度というのも必須に感じました。</p>

<p>ただ、ここの軸足とはあくまでも「フロントエンド」「バックエンド」「インフラ」といった区分けで、エンジニアとしてコードを書き続ける選択をするのであれば、フロントエンド/バックエンド/インフラといった区分に関係なく設計力・実装力が担保されているべきでしょう。</p>

<h3>17 の専門スキル</h3>

<p>ここのバランス感が非常に難しい点でしたが、これを元に 17 の専門スキルを定義しました。
ただし、17 の専門スキルは完全に独立しているわけではなく、以下 6 つは本人の志向を定義するものとして、必ずどれか一つが必須選択としました。</p>

<ul>
<li>バックエンド</li>
<li>フロントエンド</li>
<li>データベース</li>
<li>基盤</li>
<li>カスタマーサクセス</li>
<li>組織支援</li>
</ul>


<p>さらに、上記のうち以下 4 つを選択した場合は「実装・設計」と呼ばれるスキルが必須となります。</p>

<ul>
<li>バックエンド</li>
<li>フロントエンド</li>
<li>データベース</li>
<li>基盤</li>
</ul>


<p>これにより、コードを書き続けるのであればただコードを書くだけでなく、実装力・設計力が要求される建て付けを実現しました。</p>

<p>また、詳細は省きますが、さらにいくつかの例外を設置することで、「全ての分野で等しく強い SSR なフルスタックエンジニア」が求められないようにしています。</p>

<hr />

<p>様々なエッジケースを考慮したせいでちょっと複雑になった感の否めない新しいキャリアパスですが、以前のものと比べるとその分より柔軟なものになったと思います。</p>

<p>今回は敢えて詳細を省きましたが、<a href="https://engineers.recruit.feedforce.jp/#entry">ご興味をお持ちいただけたら是非カジュアル面談でねっちょりとご説明します</a>！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分を計算しよう]]></title>
        <id>https://developer.feedforce.jp/entry/2021/05/13/093842</id>
        <link href="https://developer.feedforce.jp/entry/2021/05/13/093842"/>
        <updated>2021-05-17T00:38:42.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは　機械学習エンジニアの<a href="https://twitter.com/feed_yao">八百俊哉</a>です。</p>

<p>今回は複数媒体へ広告を出稿する際に、多くの方が悩まれるであろう「各媒体への予算配分」に関して有効な配分手法を紹介します。</p>

<p><strong>今回の記事で登場する広告用語</strong></p>

<ul>
<li>媒体・・・広告の配信先や配信手法</li>
<li>ROAS・・・広告経由で発生した売り上げを広告費用で割った値(広告の費用対効果)</li>
<li>CPA・・・1件のコンバージョン(目標)を獲得するのにかかった広告コスト</li>
</ul>


<h1>広告運用者が抱える課題とは？</h1>

<p>1つの媒体のみで運用している場合は別ですが、<strong>複数の媒体で広告配信を行っている場合は、どの媒体に対していくら予算を割り振れば良いのかわからない場合があると思います。</strong></p>

<p>過去の実績を元に成果が良い媒体に対して、多く予算を割り振れば良いことは理解しているものの、<strong>「どれくらい」「どの媒体から」予算を割り振れば良いのか</strong>は経験則や簡単な分析で決めている方も多いのではないでしょうか？</p>

<p>今回はこれらの課題を解決するために、<strong>数学的に根拠のある予算配分方法</strong>について紹介しようと思います。</p>

<p>まず今回の手法を紹介するにあたり、例題がある方が話が進めやすいので以下の広告運用者さんを例に考えます。</p>

<pre class="code" data-lang="" data-unlink>広告運用者○○さん

現在A,B,Cの３媒体で広告配信を行っています。

全体のROASを高めるために予算配分を見直したいと考えています。

３媒体での合計予算は3万円です。</pre>


<p>では、実際にどのようにして最適な予算を求めるのか見ていきましょう。</p>

<h1>過去の実績から各媒体の実績をシミュレーションします</h1>

<p>最初に過去の実績から各媒体での予算とROASの傾向を、式で表現します。</p>

<p>ここで<strong>ROASを最大化するということは、限られた予算の中で売り上げを最大化すると言い換えることができる</strong>ので、今回は <img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29" alt=" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)"/> を2次回帰で近似します。</p>

<p>今回の例だと媒体A,B,Cに対してそれぞれ近似式が用意できるので以下のように表現できます。(各媒体の予算を<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>とします)</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AA%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%0A" alt=" \displaystyle
A&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) = a_A x_1^2 + b_A x_1
"/>
</div>




<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AB%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%3D%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%0A" alt=" \displaystyle
B&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) = a_B x_2^2 + b_B x_2
"/>
</div>




<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AC%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%3D%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A" alt=" \displaystyle
C&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) = a_C x_3^2 + b_C x_3
"/>
</div>


<p><br>
予算が0円の時は、原点を通る(売り上げが0円)になるように切片は使用していないです。</p>

<h1>ラグランジュの未定乗数法を用いて最適な予算配分を見つける</h1>

<h2>ラグランジュの未定乗数法とは？</h2>

<p>ラグランジュの未定乗数法とは、</p>

<blockquote><p>束縛条件のもとで最適化を行うための数学的な方法である。いくつかの変数に対して、いくつかの関数の値を固定するという束縛条件のもとで、別のある1つの関数の極値を求める</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fja.wikipedia.org%2Fwiki%2F%25E3%2583%25A9%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25A5%25E3%2581%25AE%25E6%259C%25AA%25E5%25AE%259A%25E4%25B9%2597%25E6%2595%25B0%25E6%25B3%2595" title="ラグランジュの未定乗数法 - Wikipedia" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B0%E3%83%A9%E3%83%B3%E3%82%B8%E3%83%A5%E3%81%AE%E6%9C%AA%E5%AE%9A%E4%B9%97%E6%95%B0%E6%B3%95">ja.wikipedia.org</a></cite></p></blockquote>

<p>少し小難しく聞こえますが、今回の例題に当てはめて考えてみます。</p>

<pre class="code" data-lang="" data-unlink>いくつかの変数に対して(各媒体の予算)

いくつかの関数の値を固定する束縛条件(3媒体の総予算は3万円)

別のある関数の極値を求める(3媒体の売り上げが最大となるポイントを求める)</pre>


<p>ラグランジュの未定乗数法とは、上のような条件を満たす予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>を見つけてくれる手法です。</p>

<p>ラグランジュの未定乗数法では、媒体A,B,Cのそれぞれの<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29" alt=" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)"/> に対して<strong>近似式が二階微分可能である必要がある</strong>ため、今回の例では2次回帰で近似を行いました。</p>

<p>また今回は、<strong>3媒体の総予算(束縛条件)が広告によって全て使用される</strong>という仮説のもとで計算しています。予算を全て使わない場合は、計算が複雑になってしまうので今回は紹介しません。</p>

<h2>実際にどのように計算するのか検証します</h2>

<p>まず初めに束縛条件<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/> を定義します。今回の束縛条件は、それぞれの予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>を足し合わせたものが30000円になるということですので、以下のように書けます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%0Ax_1%20%2B%20x_2%20%2B%20x_3%20%3D%2030000%0A%5Ctag%7B1%7D%0A" alt=" 
x_1 + x_2 + x_3 = 30000
\tag{1}
"/></div>


<p><br>
ここで式(1)を変換し、<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20g%28x_1%2Cx_2%2Cx_3%29" alt=" g(x_1,x_2,x_3)"/>とおきます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0Ag%28x_1%2Cx_2%2Cx_3%29%20%3D%20x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%20%3D%200%0A" alt="
g(x_1,x_2,x_3) = x_1 + x_2 + x_3 - 30000 = 0
"/></div>


<p><br>
また、今回最大にしたい3媒体の総売り上げを<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29" alt=" f(x_1,x_2,x_3)"/>と置きます。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%20f%28x_1%2Cx_2%2Cx_3%29%20%26%3D%20A%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%2B%20B%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%2B%20C%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%5C%5C%0A%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
 f(x_1,x_2,x_3) &amp;= A&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) + B&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) + C&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) \\
&amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3
\end{aligned}
"/></div>


<p><br>
ここで未定乗数<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%5Clambda%20" alt=" \lambda "/>と<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29%2Cg%28x_1%2Cx_2%2Cx_3%29" alt=" f(x_1,x_2,x_3),g(x_1,x_2,x_3)"/>を用いてラグランジュ関数<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20L" alt=" L"/>を作ります。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0AL%28x_1%2Cx_2%2Cx_3%2C%5Clambda%29%20%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%20-%20%5Clambda%20%28x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%29%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
L(x_1,x_2,x_3,\lambda) &amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3 - \lambda (x_1 + x_2 + x_3 - 30000)
\end{aligned}
"/></div>


<p><br>
それぞれの変数で偏微分すると以下のようになります。</p>

<div align="center"><img src="https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_1%7D%20%26%3D%202%20a_A%20x_1%20%2B%20b_A%20-%20%5Clambda%20%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_2%7D%20%26%3D%202%20a_B%20x_2%20%2B%20b_B%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_3%7D%20%26%3D%202%20a_C%20x_3%20%2B%20b_C%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Clambda%7D%20%26%3D%20-%20x_1%20-%20x_2%20-%20x_3%20%2B%2030000%20%3D%200%5C%5C%0A%5Cend%7Baligned%7D%0A" alt="
\begin{aligned}
\frac{\partial L}{\partial x_1} &amp;= 2 a_A x_1 + b_A - \lambda  = 0\\
\frac{\partial L}{\partial x_2} &amp;= 2 a_B x_2 + b_B - \lambda = 0\\
\frac{\partial L}{\partial x_3} &amp;= 2 a_C x_3 + b_C - \lambda = 0\\
\frac{\partial L}{\partial \lambda} &amp;= - x_1 - x_2 - x_3 + 30000 = 0\\
\end{aligned}
"/></div>


<p><br>
これら4変数の4元連立方程式を説くと、予算30000円で総売り上げが最大になる予算配分<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3" alt=" x_1,x_2,x_3"/>が求まります。</p>

<p>今回は、ROASを最大化するための方法を紹介しましたがCPAを最小化する場合は2次回帰式を求める際に<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28cost%2Ccv%29" alt=" (cost,cv)"/>としてcvを最大化するようにラグランジュを適応することで求めることができます。</p>

<p>また今回の例では3媒体までの予算配分を計算しましたが、<strong>媒体数を増やしても計算速度が極端に遅くなることがない</strong>ところが今回の手法の良いところです。</p>

<h1>この手法の課題点</h1>

<p>ここまで「ネット広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分」を紹介しましたが、この手法には2つほど課題があります。</p>

<p>まず一つ目が、最適予算<img src="https://chart.apis.google.com/chart?cht=tx&chl=%20%28x_1%2Cx_2%2Cx_3%29" alt=" (x_1,x_2,x_3)"/>にマイナスの結果が得られる可能性があるということです。売り上げを最大化しようとするあまり、もともとROASが低い媒体に対しては予算を割り振らずにマイナスの予算を割り振り、そのほかのROASが高い媒体により多くの予算を割り振ろうとしてしまうことが確認できています。</p>

<p>次に、媒体の周期性や外部要因を一切考慮していないということです。広告は少なからず外部要因によって成果が左右されますが、この手法では過去の実績のみを用いて最適予算を割り振るので外部要因は一切考慮されていないということに注意が必要です。</p>

<h1>まとめ</h1>

<p>いかがだったでしょうか。
今回は、ラグランジュの未定乗数法を用いて複数媒体への予算配分方法を紹介しました。流石に手作業では計算できないので私はpythonで上記の流れを実装しています。</p>

<p>ラグランジュの未定乗数法は、理系の方は大学の数学の講義で習っていたかもしれないです。私も大学の時に習いましたが、当時は何に使うのか一切わかりませんでした。社会人になって学生の時に学んだことが活用できると、学んだ甲斐があったと感じることができて良いです。</p>

<p>最後まで読んでいただきありがとうございます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus v2 を日本語化]]></title>
        <id>https://zenn.dev/tmd45/articles/docusaurus-config-lang-ja</id>
        <link href="https://zenn.dev/tmd45/articles/docusaurus-config-lang-ja"/>
        <updated>2021-05-01T09:30:35.000Z</updated>
        <summary type="html"><![CDATA[
Docusaurus 2.0.0-alpha.75 で確認しています。

多言語対応で記事を作成し、ヘッダーから言語選択する UI も標準で用意されている Docusaurus ですが、セットアップした状態（多言語対応化していない状態）では英語 lang="en" がデフォルトの言語となっています。
&lt;!DOCTYPE html&gt;
&lt;html lang="en" data-theme="light" dir="ltr" data-react-helmet="lang,dir"&gt;
日本語のみで利用したい場合は、以下のように 多言語対応設定を追加しつつ、ja のみを...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ESP8266 で温湿度を測って、AWS IoT Core + Amplify でグラフにしてみる]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/28/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/28/110000"/>
        <updated>2021-04-28T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、ソーシャルPLUS チームの <a href="http://blog.hatena.ne.jp/mashabow/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mashabow/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mashabow</a> です。</p>

<p>社内勉強会 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> のネタとして、ESP8266 で Wi-Fi 温湿度センサーを作り、グラフ化してみました。普段はフロントエンドの開発をしているんですが、ちょっと別のことをやってみようかと思いまして。電子工作に入門して、AWS IoT Core とか AWS Amplify を使ってみた記録です。</p>

<ul>
<li>グラフ：<a href="https://main.dt7p4lkfvt2c8.amplifyapp.com/">https://main.dt7p4lkfvt2c8.amplifyapp.com/</a></li>
<li>リポジトリ：<a href="https://github.com/mashabow/uchino-sensors">https://github.com/mashabow/uchino-sensors</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20210426/20210426193800.png" alt="f:id:mashabow:20210426193800p:plain:w300" width="1366" height="1018" loading="lazy" title="" class="hatena-fotolife" style="width:300px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20210426/20210426193805.png" alt="f:id:mashabow:20210426193805p:plain:w330" width="1982" height="1332" loading="lazy" title="" class="hatena-fotolife" style="width:330px" itemprop="image"></span></p>

<p>詳しくはスライドをご覧ください。</p>

<script async class="speakerdeck-embed" data-id="92082383e7cc463dbb9ea18867036605" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>Q&amp;A</h2>

<p>勉強会で出た質問です。</p>

<ul>
<li>Q. Wi-Fi のパスワードってどうしてるんですか？

<ul>
<li>A. ESP8266 へ書き込むプログラムの中に、<a href="https://github.com/mashabow/uchino-sensors/blob/main/esp8266/src/secrets.h.template#L3-L4">そのまま埋め込んでいます</a>。</li>
</ul>
</li>
<li>Q. どれくらいのサイズのプログラムを書き込めるのかな

<ul>
<li>A. 今回は小さいプログラムなのであまり気にしていませんでしたが、<a href="https://www.mgo-tec.com/blog-entry-pointer-ini-arduino-esp8266.html#title04">ユーザーが使えるのは 50 KB 程度</a>らしいです。</li>
</ul>
</li>
<li>Q. すると timestamp は測定時点のものではないのか。数十ミリ秒くらいはズレているのかな

<ul>
<li>A. <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-functions.html#iot-function-timestamp">IoT Core のルールエンジンに届いた時刻</a>なので、正確ではないですね。10分間隔の測定で、かつセンサーの精度もそんなに無いので、まぁいいかなと。送信するメッセージに timestamp を入れるようにすればいい話ではあります（ESP8266 を書き変えるのが面倒だった 💦）。</li>
</ul>
</li>
<li>Q. AWS IoT Core とかってお高いんですか？

<ul>
<li>A. 個人で使う規模なら<a href="https://aws.amazon.com/jp/iot-core/pricing">激安</a>ですね 👀</li>
</ul>
</li>
<li>Q. 温度が急上昇してたら 119 しとけば良いですか？

<ul>
<li>A. よろしくおねがいします 🚒</li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>IoT っぽいものに初めて手を出してみたんですが、おもしろいですね。一番最初は用語も概念も調べ方もわからず、ネット上で情報収集しても「???」だったんですが、<a href="https://www.amazon.co.jp/dp/4789847047">本</a>を読んだら頭に入ってくるようになりました。</p>

<p>グラフも単なるグラフだろと思っていたんですが、自宅の実データをいざ視覚化してみると、自分だけにしか見えない様子ががいろいろ見えてきます。「あ、これ夕食を準備してたときだ」とか、ついついじっくり眺めてしまいますね。今回はセンサーだけでしたが、アクチュエーターに指示を出せば、さらにおもしろいものができそうです。</p>

<h2>リンク集</h2>

<p>スライドで触れたページや、実装にあたって参考にしたページです。</p>

<h3>1. Wi-Fi 温湿度センサーを作る</h3>

<ul>
<li><a href="https://akizukidenshi.com/catalog/g/gK-09758/">Wi-Fiモジュール ESP-WROOM-02 DIP化キット: 秋月電子通商-電子部品・ネット通販</a></li>
<li><a href="https://www.amazon.co.jp/dp/4789847047">超特急Web接続! ESPマイコン・プログラム全集 | 国野 亘 | Amazon</a>

<ul>
<li>組み立てや実装の参考にした本</li>
<li>[PDF] <a href="https://shop.cqpub.co.jp/hanbai/books/I/I000315/setsumei.pdf">IoT実習キット説明書・パーツリスト</a>

<ul>
<li>上記書籍の回路部分。基本的にはこれに倣った</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.amazon.co.jp/dp/B010GXAH4E">HiLetgo 3個セット DHT11温度センサー | Amazon</a>

<ul>
<li>今回使った温湿度センサー</li>
</ul>
</li>
<li><a href="https://garretlab.web.fc2.com/arduino/">Arduinoで遊ぶページ</a>

<ul>
<li>Arduino 言語の参考に</li>
</ul>
</li>
<li><a href="https://platformio.org/">A professional collaborative platform for embedded development · PlatformIO</a>

<ul>
<li>使い慣れたエディタで Arduino の開発ができる。補完や依存管理ができて便利</li>
</ul>
</li>
<li><a href="https://bokunimo.net/blog/esp/784/">乾電池で本当に1年間動作するIoTセンサ ESP8266 - ボクにもわかる電子工作のブログ</a></li>
</ul>


<h3>2. 測定結果を受け取ってためる</h3>

<ul>
<li><a href="https://ambidata.io/">Ambient – IoTデータ可視化サービス</a>

<ul>
<li><a href="https://ambidata.io/docs/esp8266/">Arduino ESP8266で温度・湿度を測定し、Ambientに送ってグラフ化する – Ambient</a></li>
</ul>
</li>
<li><a href="https://machinist.iij.jp/">Machinist</a></li>
<li><a href="https://aws-iot-core-for-beginners.workshop.aws/">AWS IoT Core 初級ハンズオン :: AWS IoT Core 初級 ハンズオン</a></li>
<li><a href="https://github.com/debsahu/ESP-MQTT-AWS-IoT-Core">debsahu/ESP-MQTT-AWS-IoT-Core: Arduino examples of connecting ESP8266/ESP32 to AWS IOT Core</a></li>
<li><a href="https://flogics.com/wp/ja/2019/07/esp8266-arduino-aws-iot-mqtt/">TI DSP ソフトウェア設計のファームロジックス | ESP8266（Arduino環境）で AWS IoT（MQTT over TLS）にアクセスする</a>

<ul>
<li>最初 MQTT で接続できなくて悩んでいたが、NTP で時刻を合わせたら解決した</li>
</ul>
</li>
</ul>


<h3>3. 測定結果をグラフにする</h3>

<ul>
<li><a href="https://docs.amplify.aws/start/q/integration/react">Getting started - Amplify Docs</a></li>
<li><a href="https://github.com/aws-amplify/amplify-js/issues/6369">[Feedback] <code>API.graphql</code> return signature is hard to use in TypeScript · Issue #6369 · aws-amplify/amplify-js</a>

<ul>
<li>素の状態だと TS サポートがいまいちな件</li>
</ul>
</li>
<li><a href="https://apexcharts.com/docs/react-charts/">React-ApexChart - A React Chart wrapper for ApexCharts.js</a></li>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/appsync-notify-subscribers-real-time/">AWS AppSync を使用して、外部データベースの更新をサブスクライバーにリアルタイムで通知する</a></li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 夜間光データから土地価格を予測 コンペの参加記録]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/13/174808</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/13/174808"/>
        <updated>2021-04-13T08:48:08.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは
株式会社フィードフォース2020年入社の機械学習エンジニア
<a href="https://twitter.com/feed_yao">八百　俊哉</a>と申します。</p>

<p>今回は、solafuneで開催された「<a href="https://solafune.com/#/competitions/f03f39cc-597b-4819-b1a5-41479d4b73d6">夜間光データから土地価格を予測</a>」という機械学習コンペに参加したので工夫した点や反省点などを紹介します。</p>

<p>コンペ参加の目標設定としては、「賞金獲得！！（4位以内）」を設定していましたが、36位/201人中と目標達成できませんでした。残念な結果に終わってしまいましたが、多くのことを学ぶことができました。</p>

<h1>参加経緯</h1>

<p>私は、2020年10月から2021年2月ごろまで顧客の課題解決のために機械学習を応用する方法を学ぶためにAI Questというイベントに参加していました。そのイベントをきっかけに私は精度の高いモデルや良い特徴量を作成することに興味を持ちました。</p>

<p>そこでより多くのコンペに参加することで精度を上げるためのノウハウを身に付けたいと思ったことが今回のコンペに参加したきっかけです。</p>

<p>また、今回参加したコンペは与えられている特徴量が4つしかないので、初心者が参加しやすいコンペだったということも魅力的なポイントでした。</p>

<h1>課題と与えられているデータ</h1>

<p>課題としては、「夜間光データを元に土地価格を予測するアルゴリズムを開発する」というものです。
使用可能なデータとしては、以下のものが与えられました。</p>

<ul>
<li>地域ごとのデータ・・・地域固有のID</li>
<li>年代・・・1992~2013年まで</li>
<li>土地の平均価格（目的変数）・・・1992~2013年まで</li>
<li>夜間光量の平均値・・・0~63までのレンジでその地域の平均光量</li>
<li>夜間光量の合計値・・・その地域の合計光量</li>
</ul>


<h1>全体構成</h1>

<p>今回最終submitとして選択したモデルの全体構成は以下です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210409/20210409155716.png" alt="f:id:newton800:20210409155716p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h1>前処理に関して</h1>

<h2>集約的特徴量について</h2>

<p>集約的特徴量の作成にあたっては<a href="https://twitter.com/mst_8823">masato8823 (@mst_8823) | Twitter</a>さんがBaseLineとして公開されていた以下のものを使用しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fzenn.dev%2Fmst8823%2Farticles%2Fcd40cb971f702e" title="[solafune] 夜間光データから土地価格を予測 BaseLine" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://zenn.dev/mst8823/articles/cd40cb971f702e">zenn.dev</a></cite></p>

<p>作成した特徴量としては以下です。</p>

<table>
<thead>
<tr>
<th>    </th>
<th>    </th>
</tr>
</thead>
<tbody>
<tr>
<td>  面積  </td>
<td>  夜間光量の合計値/夜間光量の平均値を行い面積を算出した </td>
</tr>
<tr>
<td>   PlaceID,Yearごとの統計情報 </td>
<td>  PlaceID,Yearをキーとして平均光量、合計光量、面積のmin,max,median,mean,std,max-min,q75-q25を算出した  </td>
</tr>
<tr>
<td> PlaceID をキーにしたグループ内差分</td>
<td>  平均光量、合計光量の年ごとの差分を算出した</td>
</tr>
<tr>
<td>PlaceID をキーにしたグループ内シフト </td>
<td> 平均光量、合計光量の年ごとの値をシフトした</td>
</tr>
<tr>
<td>ピボットテーブルを用いた特徴量</td>
<td>index=PlaceID,columns=Yearとして平均光量、合計光量、面積のピボットテーブルを作成し、PCAで次元削減したものを算出した</td>
</tr>
<tr>
<td>PlaceIDをキーにしたグループ内相関係数</td>
<td>PlaceIDごとにデータを集約しYearと平均光量、合計光量、面積との相関係数を算出した</td>
</tr>
<tr>
<td>平均光量が63であった回数</td>
<td>平均光量の最大値が63であることから平均光量が63である数を追加した</td>
</tr>
</tbody>
</table>


<h2>Area特徴量について</h2>

<p>先ほど<i>集約的特徴量について</i>で面積の求め方について書きました。面積=合計光量/平均光量で算出しています。ここで求められる<b>土地の面積は、年が変化しようと変化しないと思われますが、実際のデータを確認すると年が変化すると面積も変化していました。</b></p>

<p>そこで<b>合計光量/平均光量より算出された面積をPlaceIDをキーとして平均を取ったものを新たな面積としました。</b>
新たな面積が求まると <b>新たな合計光量 =  平均光量×新たな面積,新たな平均面積 = 合計光量/新たな面積</b> が求まります。</p>

<p>これらより求まる新たな合計光量、新たな平均光量、新たな面積を元々の合計光量、平均光量、面積と置き換えて集約的特徴量の作成を行いました。</p>

<h2>gplearnについて</h2>

<p>上で紹介した集約的特徴量とArea特徴量のそれぞれに対して<a href="https://gplearn.readthedocs.io/en/stable/">gplearn</a>というライブラリを用いて新たな特徴量を作成しました。このライブラリは遺伝的アルゴリズムにより目的変数をよく表している変数を作成してくれるものです。</p>

<p>このライブラリを用いて新しい特徴量を10個,25個,50個作成し、元々の集約的特徴量、Area特徴量と組み合わせてそれぞれに対して予測を行いました。</p>

<p>gplearnでの特徴量作成については以下のサイトが参考になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FHatomugi%2Fitems%2F3bb16ed9c6bdc15f1e00" title="遺伝的アルゴリズムを使って特徴量エンジニアリングしてみた - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/Hatomugi/items/3bb16ed9c6bdc15f1e00">qiita.com</a></cite></p>

<h1>モデル構築に関して</h1>

<p>モデルの構築としてはgroup k fold(fold=5)でStackingのモデルを採用しました。</p>

<p>1層目はrandom forest,lgb,multi regression,catboost,xgboostに加えてAutoMLの<a href="https://auto.gluon.ai/stable/index.html">Autogluon</a>を採用しました。</p>

<p>Autogluonは以下のようにデータを渡すだけで、11個のモデルを検証し最後に出力結果を重量平均で作成してくれます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>
predictor = TabularPredictor(
                                label=<span class="synConstant">'label'</span>,
                                problem_type=<span class="synConstant">'regression'</span>, 
                                eval_metric=<span class="synConstant">'root_mean_squared_error'</span>, <span class="synComment"># 評価指標</span>
)

X_train[<span class="synConstant">'label'</span>] = y_train
X_test[<span class="synConstant">'label'</span>] = y_test

predictor.fit(
            train_data=X_train,
            tuning_data=X_test, <span class="synComment"># これを渡さない場合はランダムスプリット</span>
            time_limit=<span class="synIdentifier">None</span>, <span class="synComment"># おおよその時間制限を設けられる</span>
)
</pre>


<p>そして2層目は1層目でも採用しているAutogluonで出力を作成しました。</p>

<h1>感想・反省点</h1>

<p>Public Scoreの時点では6位と賞金獲得の可能性が十分にありましたが、Private Scoreでは36位と大幅にshake downしてしまいました。今回目標達成できなかった理由としては以下の2つが考えられます。</p>

<p><b>1 CVの値とPublic ScoreからPrivate Scoreについて考えられなかった
</b></p>

<p>1つ目の要因としては、Public Scoreが下がることのみを考えてモデルの改善・特徴量の作成を行っていたということです。その時CVの値とPublic Scoreをどこかに記録しておけばよかったのですが、どこにも保存せずPublic Scoreが下がることが最も良いことであると捉えていました。実際は、CVが下がったモデル・特徴量においてPublic Scoreも同じように下がることが望ましく、その記録を取っておくべきでした。</p>

<p>実際これまで提出していたファイルの中にPrivate Scoreが0.48774というものがあり、このファイルを最終提出としておけば3位に入ることができていました。しっかりとPrivate Scoreに効いているであろう提出ファイルが選べるようにCVとPublic Scoreに着目できるようにならないといけないと感じました。</p>

<p><b>2 gplearnを行う位置が悪かった
</b></p>

<p>2つめは、group k foldを行う前にgplearnを行ったことによって、validationの目的変数が確認できる状態でgplearnが特徴量作成を行ってたことです。これは本来見ることができないデータを確認しながらデータ生成を行っていることになるので過学習を引き起こす可能性がありました。
　
　<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413095008.png" alt="f:id:newton800:20210413095008p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>あるべき姿としては、group k foldでtrainをtrain,validationに分割した後にtrainのみのデータを用いてgplearnをfitさせるべきだったと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413112402.png" alt="f:id:newton800:20210413112402p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h1>次回コンペでは</h1>

<p>今回のコンペを通じて集約的特徴量の作成方法、Stackingの実装方法、gplearnの実行位置、CVとPublic Scoreの関係性の重要度について学ぶことができました。
テーブルコンペ において有効な手法を多く学ぶことができたので、次回参加するコンペでは賞金獲得を目標に頑張ります！！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[カスタマーサクセスエンジニアのお仕事]]></title>
        <id>https://developer.feedforce.jp/entry/2021/04/09/120453</id>
        <link href="https://developer.feedforce.jp/entry/2021/04/09/120453"/>
        <updated>2021-04-09T03:04:53.000Z</updated>
        <summary type="html"><![CDATA[<p>ごきげんようございます、ソーシャルPLUS チームの <a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。今回も社内の技術勉強会（通称 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a>）で話した内容で書きたいと思います。</p>

<p>毎回一貫性のないネタで（しかもあんまり Tech じゃない話を）話してますが、今回も自分のキャリアについての話をしました。</p>

<ul>
<li><a href="https://developer.feedforce.jp/entry/2020/01/10/185250">2020/01/10 FFTT#381 認証認可情報の追い方のはなし</a></li>
<li><a href="https://developer.feedforce.jp/entry/2020/08/28/183637">2020/08/28 FFTT#407 認知（cognition）のはなし</a></li>
</ul>


<p>過去にこのブログで書いたこの記事↓の続編ということになります。</p>

<ul>
<li><a href="https://developer.feedforce.jp/entry/2018/12/05/110000">2018/12/05 社内では開発チームマネージャーを名乗っています</a></li>
</ul>


<p>知識として役に立つ内容というよりは、自分に合った仕事ができると楽しいよね、とか、エンジニアでもこういう仕事あるよ、とか、ざっくりとした自分語りになります。</p>

<p>では、よろしくお願いします！</p>

<h2>2020年10月からカスタマーサクセスエンジニアになりました</h2>

<p>いきなり本題ですが、はい、なっておりました。</p>

<p>対外的に自分のポジションを名乗ることがないので、ただの自称なんですが、最近だと元同僚の <a href="http://blog.hatena.ne.jp/a-know/">id:a-know</a> さんが<a href="https://blog.a-know.me/entry/2021/03/15/214630">転職先で正式に（？）名乗ってらっしゃいます</a>。</p>

<p>自分ではあまり上手く言語化できていなかったんですが、a-know さんの記事に書かれているポジション名への思いを見て「あー！まさにそれ！」って思いました（あぁ！先に公に言われてしまった！😩というのも思いました。笑）。</p>

<p>他にも Customer Support &amp; Senior Developer とも自称しています。これは単純にいまやっていることを並べた感じの肩書きです。</p>

<h2>具体的に何をやってるのか</h2>

<p>１つは、メールでのカスタマーサポートを担当しています。</p>

<p>現在 ソーシャルPLUS のカスタマーサポートへお問い合わせいただくと、8 〜 9 割がた私がお返事いたします。</p>

<p>ソーシャルPLUS のカスタマーサポートは、メールでご連絡いただくことで対応する、受動的かつ突発的なタスクです。主に企業がソーシャルPLUS を導入するための<b>技術的な事前調査</b>や、<b>導入開発</b>に関する質問が多いです。この導入フェーズを乗り越えていただかないと、本来のソーシャルPLUS というサービスの価値を感じていただくことができないため、とても大事なサポートだと認識しています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408171759.png" alt="f:id:tmd45:20210408171759p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>もともと技術的なお問い合わせも多く、お客様側のシステムや利用方法を加味してご案内する必要がありました。またソーシャルログインプロバイダ側の契約や仕様についても把握している必要があります。技術面まで捉えてお返事するとなると、エンジニア以外では返答に窮することもありました。</p>

<p>もちろん開発チームと連携して回答するというのは以前からやっていましたが、双方のコミュニケーションコストや、開発チームが本来の開発タスクから突発的な質問（しかもちょっと複雑）に対応するための脳のスイッチングコストなど気になることがありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408182910.png" alt="f:id:tmd45:20210408182910p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>ビジネスチームにはもっとたくさんの企業に利用いただけるようなまさに "ビジネス的" な施策に時間を使ってほしかったし、開発チームには開発に集中する時間をできるだけ作りたいと思っていました。</p>

<h2>カスタマーサポートを担当しはじめたきっかけ</h2>

<p>先日、我らがチームリーダー、Tech Lead の佐藤の社内インタビュー記事が公開されました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn973a7399829c" title="理想のエンジニア組織を目指して。ソーシャルPLUSの開発リーダーがビジネスサイドにもコミットする理由｜フィードフォースのnote" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://media.feedforce.jp/n/n973a7399829c">media.feedforce.jp</a></cite></p>

<p>去年の夏頃、当時まだ開発チームリーダーだった私と 1on1 をしていた佐藤から、エンジニアとしてのステップアップとして、ソーシャルPLUS の開発チームリーダーとしてもっとコミットしていきたい、という話をもらいました。自分としては断る理由もなく、めっちゃいいじゃん！むしろぜひお願いします！という感じでした。</p>

<p>しかし、そうなると 7 年もソーシャルPLUS にいる自分はどこに向かえばいいのか？という悩みがはっきりと表面化してきました。</p>

<p>ポジションや肩書きに執着はないので、リーダーでもなんでもない、ただの（と言ったらいまチームにいるメンバーに失礼ですけど）バックエンドエンジニアに戻るという道もありました。でも本当にそんな言い方は失礼だなと感じるくらい、いま開発に携わってくれているメンバーは良い開発者たちです。もっと人手があれば、とは常々思っていますが（笑）私がそこに戻るだけで、私の経験や力を充分活かせるのかしらん？それでプロダクトはもっといい方向に進めるのかしらん？と。</p>

<p><a href="https://developer.feedforce.jp/entry/2018/12/05/110000">前の記事</a>でも書きましたが、以前から自分はビジネス側と開発側の間に入って緩衝材をやったり、落ち穂拾いをしたりしていました。しかし自分が受ける側の 1on1 で「ここから先どうなりたいですか？」と問われて答えに詰まるような期間を過ごしていました。</p>

<p>そんなとき、ビジネス側のいちメンバーから「（a-know さんみたいな）カスタマーサクセスにコミットするエンジニアというのが合ってるんじゃないか」と言ってもらう機会がありました。単純なんですが、それで「あ、そっか」と目からウロコがぽろり。</p>

<p>いままで「担当する仕事じゃないから」と（はっきりそう言うわけじゃないですが）どこか伝言ゲームのようになっていた、問い合わせなどの仕事を、私自身が担当すれば手っ取り早いじゃないかと。それだけじゃなく、これまでのサポートメンバーが兼任で担当していたがゆえに、どうしてもサポート側の知見などを残す手間をかけづらかったところを、アウトプットに慣れた自分のようなエンジニアがやれば一石二鳥。同じように手が回らなかった仕組み化や、プロダクトへのフィードバックもやってやろうじゃないか、と。</p>

<p>チーム内で互いに助け合う文化ができあがっていたので、自分ひとりが何でも知っていなければならないという過度なプレッシャーはなく、とはいえ自分がこのポジションを担当すればなんかいろいろすっきり組み立てられるのでは？というひらめきがありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408183042.png" alt="f:id:tmd45:20210408183042p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>結局のところ、肩書きが変わっただけとも言えます。肩書きに執着しないと言いながら、行動が肩書きに囚われてしまっていたなぁと。</p>

<p>チーム内外に「ポジションを変えます！エンジニアとしてカスタマーサクセスやります！」と大々的に宣言したことで、やれることの幅が広がりました。広がったというか、しっかりフォーカスする部分を切り替えることができた。そういう意味での肩書きって大切なんだなと思いました。</p>

<h2>やってみてどうだったか</h2>

<p>自分にはめちゃくちゃ合ってたなと、毎日楽しく働いてます。同僚にも、この仕事にシフトしてからの玉田さんめちゃくちゃ充実して楽しそうに見える、と言われました（笑）。これまでなんとなくもやもやしてたものが、自分の手で解決できていく気持ちよさを感じています。</p>

<p>やってみて、いまの仕事にフィットしている自分の強みはこんなところだと思ってます。</p>

<ol>
<li>ソーシャルPLUS を 7 年もやってる（それなりの業務知識量）</li>
<li>開発者なのでシステムの調査にスムーズにとりかかれる</li>
<li>こう見えてお客様とのコミュニケーションは昔とった杵柄がある</li>
<li>ドキュメンテーションや情報整理にこだわりがある</li>
<li>細かいことに気がつくほう</li>
</ol>


<p>前職（もう 7 年も前なわけですが）では頻度は高くないものの、企業のお客様のところへ営業さんといっしょにお話しにいくことがあったり、お客様と日々メールでやりとりしていたりという経験があって、いま役に立っています。SIer という立場で設計開発するときの心配事なんかも少しは知っているので、それも役に立ってるかもしれないなと思う場面があります。</p>

<p>結果として、先に書いたような課題感はどうなったかというと、まだ数値にして改善されたことを確認するなどはできていないのですが</p>

<ul>
<li><b>技術的な調査・質問に以前より素早く答えられる形になった</b>

<ul>
<li>コミュニケーションコストや待ち時間などの削減</li>
<li>ひとりの人間が対応できるので調査とお返事の文章作成を同時にできるなど</li>
</ul>
</li>
<li><b>ナレッジを文章化して残すようになった</b>

<ul>
<li>ものによって esa 記事にしたり GitHub Issue にしたりしています</li>
</ul>
</li>
<li><b>兼業していた他職種のひとが以前より本業に集中できるようになった</b>

<ul>
<li>確認依頼や私でもわからないことを質問して答えてもらったりというのは今もありますが、それでも以前より中断されない時間が作りやすくなったのではないかと思います</li>
<li>しかもこれがプロダクトマネージャだったりするので影響がでかい 😎</li>
</ul>
</li>
</ul>


<p>などなど、いい効果が出てると感じます。</p>

<p>ひとりで対応できてしまう＝属人的になってしまう、という問題も重々承知しているので、そうならないようにナレッジ化したり、やりとりを見える化したりというのは大事にしています。強みとして挙げたような "私だからできる仕事" というのも同じくらい大事にしています。</p>

<h2>他になにやってるの</h2>

<p>カスタマーサポートは私の仕事のうちの１つです。それ以外には Senior Developer として、プロダクトの新しい機能の検証や、機能として組み込むわけではないけどお客様が必要とするような仕様や仕組みを検証するなどしています。</p>

<p>こちらはとくにビジネスメンバーと以前よりたくさん話す機会が増えました。セールスが普段お客様からどのような要望を伺うのか、マーケティングがどういった訴求をしているのか、プロダクトマネージャーはどんな未来を描いているのか。そういうものから何ができそうか、具体的な方法を考えて、開発チームにシステム化してもらうような仕事です。</p>

<p>そこまで明確に切り分けて丸投げしているわけではないですし、開発チーム側からも活発に意見や案が出る環境でもあります。UI 面やお客様に "見せて" 提供する機能はデザイナーが具体案を詰めていくことが多いです。</p>

<p>Senior Developer の仕事は、以前からやっていた落ち穂拾いに近く、それを「私の仕事としてコミットしますね！」と明言して取り組んでるようなイメージです。</p>

<h2>さらにこれから</h2>

<p>Customer Support &amp; Senior Developer をやることで、プロダクトの内情とお客様の困りごとの両方を見ることができています。そこから、これからもっと良く出来そうだなと確度高く考えられるものが増えました。</p>

<p>いまのチームはまさに、この下の図のような感じでメンバーが良い関係で仕事していると思います。</p>

<p><figure class="figure-image figure-image-fotolife" title="私が &quot;望まない&quot; チーム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408192135.png" alt="f:id:tmd45:20210408192135p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>私が &quot;望まない&quot; チーム</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="私が &quot;望む&quot; チーム"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20210408/20210408192209.png" alt="f:id:tmd45:20210408192209p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>私が &quot;望む&quot; チーム</figcaption></figure></p>

<p>複数の色を跨ぐような仕事ができているのが、自分の強みであり、プロダクトの役にも立てているなという実感もあります。</p>

<p>溜まったナレッジや分析結果をもとにさらに良い改善、良い進化ができるように引き続きやっていきたいと思います！</p>

<h2>おわりに</h2>

<p>というわけで、他チームに自分の近況報告をするような発表となりました。</p>

<p>これを読んで「おっ じゃあエンジニアにカスタマサポートやらせりゃいいんだ」と思われることは無いと思うんですが、そういう話ではないのでご留意ください。あくまでも私にはこの仕事が合っていて、ちょうどプロダクトのなかでそういう仕事があるといいなという状態に合致できたという話です。</p>

<p>自分はとても恵まれていると思います。日々感謝感謝です。そんな話をすると、それだけじゃないよ、頑張ってるよ、と言ってくれる同僚も居ます。とてもありがたいことです。</p>

<p>感謝の気持ちを力に変えて、ソーシャルPLUS をさらによいプロダクトにしていきたいと思いますので、今後ともよろしくお願いいたします。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-Attentionを用いてGoogle 無料リスティングの「拡張リスティングの不承認」に挑んだ話]]></title>
        <id>https://developer.feedforce.jp/entry/2021/03/11/101244</id>
        <link href="https://developer.feedforce.jp/entry/2021/03/11/101244"/>
        <updated>2021-03-11T01:12:44.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは
株式会社フィードフォース2020年入社の機械学習エンジニア
<a href="https://twitter.com/feed_yao">&#x516B;&#x767E;&#x4FCA;&#x54C9;@Feedforce (@feed_yao) | Twitter</a>と申します。</p>

<p>最近はロードバイク にはまっており、ロードバイク購入後一ヶ月で一日100km走行に成功しました。</p>

<p>今回、<b>Google無料リスティングで不承認アカウントが発生する要因を調査する分析</b>を行いました。</p>

<ul class="table-of-contents">
    <li><a href="#Google-無料リスティングとは">Google 無料リスティングとは？</a></li>
    <li><a href="#なぜ今回分析が必要とされたのか">なぜ今回分析が必要とされたのか？</a></li>
    <li><a href="#結果と考察">結果と考察</a></li>
    <li><a href="#Self-Attentionを採用した理由">Self-Attentionを採用した理由</a></li>
    <li><a href="#実装手順">実装手順</a><ul>
            <li><a href="#使用データのフォーマット">使用データのフォーマット</a></li>
            <li><a href="#必要ライブラリのインストールインポート">必要ライブラリのインストール・インポート</a></li>
            <li><a href="#データの前処理">データの前処理</a></li>
            <li><a href="#学習">学習</a></li>
            <li><a href="#評価出力">評価・出力</a></li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h1 id="Google-無料リスティングとは">Google 無料リスティングとは？</h1>

<p>2020年10月にGoogleから公開された<b>Googleショッピングタブに無料で商品掲載ができる「無料リスティング」のことです。</b></p>

<p>Google 検索にサイトがインデックス登録されても料金が発生しないのと同様に、EC事業者は無料で利用可能になりました。
Google 無料リスティングについての詳細は以下のサイトが参考になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flab.ecbooster.jp%2Fabout-google-free-listings%2F" title="Googleに無料で自社商品が掲載できる「無料リスティング」とは？" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://lab.ecbooster.jp/about-google-free-listings/">lab.ecbooster.jp</a></cite></p>

<h1 id="なぜ今回分析が必要とされたのか">なぜ今回分析が必要とされたのか？</h1>

<p>無料リスティングでは自社製品を無料でGoogleに掲載できます。
しかしながら、課題として<b>一部商品掲載が不承認となるケースが見受けられました。</b></p>

<p>不承認となってしまうと自社商品の掲載ができていない状況が発生しています。不承認となる理由としては、「Googleが定める基準に対して、登録している商品データの属性数が足りない、内容が仕様に沿っていない場合、商品データの品質が低いため不承認になり、Googleの検索結果に表示させることができません。」とされています。</p>

<p>これらを<b>定量的に分析することで不承認となる理由を見つけ出す試み</b>が始まりました。</p>

<p>そのため今回の分析の目的は、<b>商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する</b>ことです。</p>

<h1 id="結果と考察">結果と考察</h1>

<p>今回の目的である「商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する」は、<b>達成できませんでした。</b></p>

<p>目的が達成できなかった理由として考えられる要因は、<b>承認・不承認は商品のtitle,descriptionだけでは判断されていない</b>ということです。商品ごとのtitle,descriptionのみで承認・不承認が判断されているのではなく、商品データ全体またはアカウント全体のデータを総合的に見て、判断されている可能性が高いということがわかりました。</p>

<p>承認・不承認予測のAccuracyとしては5割〜６割ほどで、承認・不承認を予測するという点でも低い精度となってしまいました。</p>

<h1 id="Self-Attentionを採用した理由">Self-Attentionを採用した理由</h1>

<p>今回はSelf-Attentionという手法を用いてこの課題解決を試みました。</p>

<p>Self-Attentionとは、<b>文章全体で重要とされるキーワードが予測結果と一緒に確認できるようになる</b>手法です。</p>

<p>Self-Attentionの仕組みについては詳しく書かれている方が多くいますので、ここでは割愛します。</p>

<p>最初は、word2vecを用いて文章特徴量を作成し、承認・不承認を予測して終了という一連の流れを想定していました。</p>

<p>しかし、<b>今回の目的は</b>承認・不承認を予測したいわけではなく、<b>どの単語が承認・不承認と関わっているのかを確認し、不承認となっているアカウントを承認にすること</b>です。
もし仮にword2vecを用いた手法を採用すると予測結果の要因や理由が明確にならないので、不承認のアカウントを承認に改善する施策を考えることはできません。</p>

<p>そのため今回は、<b>Self-Attentionを用いて分類モデルを構築することで、承認・不承認の要因が文章内のどこにあるのかを分析する</b>ために、この手法を選択しました。</p>

<h1 id="実装手順">実装手順</h1>

<p>本来の目的は達成できませんでしたが、Self-Attentionでの分類モデルの実装はできましたので、実装方法を記載します。
今回はkerasを用いてSelf-Attention + LSTMで予測を行いました。
検証環境はGoogle Colaboratoryを想定しています。</p>

<h2 id="使用データのフォーマット">使用データのフォーマット</h2>

<p>今回使用できるデータとしては以下のようなデータになっています。</p>

<p>各アカウント・各商品ごとに商品IDが割り振られており、それぞれの商品にtitle,descriptionが割り振られています。</p>

<p><b>承認・不承認のラベルは、アカウントごとに付加されています。
</b></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210224/20210224172435.png" alt="f:id:newton800:20210224172435p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="必要ライブラリのインストールインポート">必要ライブラリのインストール・インポート</h2>

<pre class="code lang-python" data-lang="python" data-unlink>!pip install text_vectorian
!pip install mojimoji
!apt install aptitude
!aptitude install mecab libmecab-dev mecab-ipadic-utf8 git make curl xz-utils <span class="synIdentifier">file</span> -y
!pip install mecab-python3==<span class="synConstant">0.7</span>
</pre>




<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">import</span> pandas <span class="synStatement">as</span> pd
<span class="synPreProc">import</span> numpy <span class="synStatement">as</span> np
<span class="synPreProc">import</span> keras
<span class="synPreProc">import</span> os
<span class="synPreProc">import</span> warnings
warnings.simplefilter(<span class="synConstant">'ignore'</span>)
<span class="synPreProc">import</span> subprocess
<span class="synPreProc">import</span> mojimoji
<span class="synPreProc">import</span> re
<span class="synPreProc">import</span> MeCab
<span class="synPreProc">import</span> matplotlib.pyplot <span class="synStatement">as</span> plt

<span class="synPreProc">from</span> keras.layers <span class="synPreProc">import</span> Dense, Dropout, LSTM, Embedding, BatchNormalization
<span class="synPreProc">from</span> keras.layers.wrappers <span class="synPreProc">import</span> Bidirectional
<span class="synPreProc">from</span> keras.callbacks <span class="synPreProc">import</span> EarlyStopping, ModelCheckpoint
<span class="synPreProc">from</span> keras <span class="synPreProc">import</span> Input, Model, utils
<span class="synPreProc">from</span> keras.preprocessing.sequence <span class="synPreProc">import</span> pad_sequences
<span class="synPreProc">from</span> keras.callbacks <span class="synPreProc">import</span> EarlyStopping

<span class="synPreProc">from</span> text_vectorian <span class="synPreProc">import</span> SentencePieceVectorian
<span class="synPreProc">from</span> keras_self_attention <span class="synPreProc">import</span> SeqSelfAttention
<span class="synPreProc">from</span> sklearn.model_selection <span class="synPreProc">import</span> train_test_split
<span class="synPreProc">from</span> sklearn.metrics <span class="synPreProc">import</span> classification_report
</pre>


<h2 id="データの前処理">データの前処理</h2>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># データの読み込み</span>
app = pd.read_csv(<span class="synConstant">'data/app.csv'</span>) <span class="synComment"># 承認データ</span>
disapp = pd.read_csv(<span class="synConstant">'data/disapp.csv'</span>) <span class="synComment"># 不承認データ</span>

app[<span class="synConstant">'target'</span>] = <span class="synConstant">'app'</span> <span class="synComment"># targetにlabelを代入する</span>
disapp[<span class="synConstant">'target'</span>] = <span class="synConstant">'disapp'</span>

<span class="synComment"># 今回は、titleとdescriptionを用いて予測するので、それら二つの変数を一つにまとめる</span>
app[<span class="synConstant">'sentence'</span>] = app[<span class="synConstant">'title'</span>] + app[<span class="synConstant">'description'</span>] 
disapp[<span class="synConstant">'sentence'</span>] = disapp[<span class="synConstant">'title'</span>] + disapp[<span class="synConstant">'description'</span>]

<span class="synComment"># これまで別々に処理していたappとdisappをまとめてdfとする</span>
df = app.append(disapp)
</pre>


<p>今回のデータは特殊で、承認・不承認は商品ごとについているラベルではなくアカウントと紐づいたラベルとなっています。それらを各商品と承認・不承認が紐づいているとして各商品ごとに予測することを行ってます。</p>

<p>ここで注意が必要なのは、データの分割方法です。<b>アカウントを無視してデータを分割してしまうとリークを起こす可能性があります</b>（リークとは、本来予測では使用できないデータが学習時に入ってしまっていることです）。</p>

<p><b>そのため同じアカウントのデータが訓練データ、検証データ、テストデータに渡って存在しないようにしなければなりません</b>。</p>

<p>例えば、アカウントAの商品データは全て訓練データとする,アカウントBの商品データは全てテストデータにするといったようなことを意味しています。</p>

<p>アカウントごとにデータを分割するには、各アカウントごとの商品数がある程度同じである方がlabelが不均衡にならないと考え、データ数を揃える処理を施しました。
（これらはGroupKFoldを使用すれば解決できると考えられますが、分析実施時はGroupKFoldを知らなかった）</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># アカウントごとに商品数が異なるので50以上商品数がある場合は50までの商品を使用する</span>
<span class="synComment"># アカウントごとに商品数を揃えることで、labelが不均衡になることを緩和している</span>
<span class="synComment"># アカウントごとにlabelがふられるが、商品ごとに予測結果を出す時のみ実施</span>
cutted_df = pd.DataFrame([])
<span class="synStatement">for</span> acc <span class="synStatement">in</span> df.account_name.unique():
  data = df[df.account_name == acc]
  <span class="synStatement">if</span> data.shape[<span class="synConstant">0</span>] &gt; <span class="synConstant">50</span>: 
    data = data[:<span class="synConstant">50</span>]
  cutted_df = pd.concat([cutted_df,data],<span class="synConstant">0</span>)  

df = cutted_df.sample(frac=<span class="synConstant">1</span>,random_state=<span class="synConstant">1</span>).reset_index(drop=<span class="synIdentifier">True</span>)
</pre>


<p>次は、データの前処理についてです。</p>

<p>自然言語処理の前処理で有効と言われている半角->全角、数字は全て0にする、スペース文字の消去を行いました。
また、これまでlabelが'app'または'disapp'だったのでそれらを入力できる形式に変換しています。</p>

<pre class="code lang-python" data-lang="python" data-unlink>
<span class="synStatement">def</span> <span class="synIdentifier">PreprocessData</span>(df,dirname):
  <span class="synComment"># データの前処理関数</span>
  <span class="synComment"># 辞書型を返す</span>

  mecab = MeCab.Tagger(<span class="synConstant">'-Ochasen'</span>)

  <span class="synComment"># textデータの前処理</span>
  df = TextPreprocess(df)

  label2index = {k: i <span class="synStatement">for</span> i, k <span class="synStatement">in</span> <span class="synIdentifier">enumerate</span>(df.target.unique())}
  index2label = {i: k <span class="synStatement">for</span> i, k <span class="synStatement">in</span> <span class="synIdentifier">enumerate</span>(df.target.unique())}

  class_count = <span class="synIdentifier">len</span>(label2index)
  labels = utils.to_categorical([label2index[label] <span class="synStatement">for</span> label <span class="synStatement">in</span> df.target], num_classes=class_count)

  features,sentences,vectorian,account = MakeFeatures(df)

  <span class="synStatement">return</span> {
      <span class="synConstant">'class_count'</span>: class_count,
      <span class="synConstant">'label2index'</span>: label2index,
      <span class="synConstant">'index2label'</span>: index2label,
      <span class="synConstant">'labels'</span>: labels,
      <span class="synConstant">'features'</span>: features,
      <span class="synConstant">'sentences'</span>:sentences,
      <span class="synConstant">'input_len'</span>: vectorian.max_tokens_len,
      <span class="synConstant">'vectorian'</span>:vectorian,
      <span class="synConstant">'account'</span>:account
  }

<span class="synStatement">def</span> <span class="synIdentifier">TextPreprocess</span>(df):
  <span class="synStatement">for</span> i <span class="synStatement">in</span> df.index:
    sen = df.loc[i,<span class="synConstant">'sentence'</span>]
    sen = mojimoji.han_to_zen(sen)
    sen = re.sub(<span class="synConstant">r'\d+'</span>,<span class="synConstant">'0'</span>,sen)
    df.loc[i,<span class="synConstant">'sentence'</span>] = sen.replace(<span class="synConstant">'</span><span class="synSpecial">\u3000</span><span class="synConstant">'</span>,<span class="synConstant">''</span>)
  <span class="synStatement">return</span> df

<span class="synStatement">def</span> <span class="synIdentifier">MakeFeatures</span>(df):
  vectorian = SentencePieceVectorian()

  features = []
  sentences = []
  accounts = []
  <span class="synStatement">for</span> feature,account <span class="synStatement">in</span> <span class="synIdentifier">zip</span>(df[<span class="synConstant">'sentence'</span>],df[<span class="synConstant">'account_name'</span>]):
    f = vectorian.fit(feature).indices
    features.append(f)
    sentences.append(feature)
    accounts.append(account)

  features = pad_sequences(features, maxlen=vectorian.max_tokens_len)

  <span class="synStatement">return</span> features,sentences,vectorian,accounts
</pre>


<p>では、ここまでの前処理を流します。</p>

<pre class="code lang-python" data-lang="python" data-unlink>data = PreprocessData(df,dirname) <span class="synComment"># dirnameは、出力結果などを入れたいpath入れてください</span>
</pre>


<p>次はtrain_test_splitを行いますが、先ほども記述した通り通常の手法ではリークするので、以下のようにしました。
（上述の通りGroupKFoldの実施で回避できる）</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">CollectData</span>(data,account):
  features = []
  sentences = []
  labels = []
  
  <span class="synStatement">for</span> ac <span class="synStatement">in</span> account:
    where_ = np.where(np.array(data[<span class="synConstant">'account'</span>]) == ac)
    features.extend(np.array(data[<span class="synConstant">'features'</span>])[where_])
    sentences.extend(np.array(data[<span class="synConstant">'sentences'</span>])[where_])
    labels.extend(np.array(data[<span class="synConstant">'labels'</span>])[where_])
  <span class="synStatement">return</span> np.array(features),np.array(sentences),np.array(labels)

train_account,test_account = train_test_split(<span class="synIdentifier">list</span>(<span class="synIdentifier">set</span>(data[<span class="synConstant">'account'</span>])),test_size=<span class="synConstant">0.2</span>,random_state=<span class="synConstant">1</span>)
train_account,val_account = train_test_split(train_account,test_size=<span class="synConstant">0.25</span>,random_state=<span class="synConstant">1</span>)

train_features,train_sen,train_labels = CollectData(data,train_account)
val_features,val_sen,val_labels = CollectData(data,val_account)
test_features,test_sen,test_labels = CollectData(data,test_account)
</pre>


<p>通常のデータセットであれば、以下のようにすることでデータの分割が行えます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>(train_features,val_features,
 train_labels,val_labels,
 train_sen,val_sen) = train_test_split(data[<span class="synConstant">'features'</span>], data[<span class="synConstant">'labels'</span>], data[<span class="synConstant">'sentences'</span>], test_size=<span class="synConstant">0.2</span>, random_state=<span class="synConstant">1</span>)

(train_features,test_features,
 train_labels,test_labels,
 train_sen,test_sen) = train_test_split(train_features, train_labels, train_sen, test_size=<span class="synConstant">0.25</span>, random_state=<span class="synConstant">1</span>)
</pre>


<p>ここまででデータの整形が完了です。</p>

<h2 id="学習">学習</h2>

<p>次は、モデルの定義を行います。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">_create_model</span>(input_shape, hidden, class_count,vectorian):
    input_tensor = Input(input_shape)
    common_input = vectorian.get_keras_layer(trainable=<span class="synIdentifier">True</span>)(input_tensor)
    x1 = SeqSelfAttention(name=<span class="synConstant">'attention'</span>)(common_input)
    x1 = Bidirectional(LSTM(hidden))(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    x1 = Dense(<span class="synConstant">32</span>)(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    x1 = Dense(<span class="synConstant">16</span>)(x1)
    x1 = Dropout(<span class="synConstant">0.5</span>)(x1)
    output_tensor = Dense(class_count, activation=<span class="synConstant">'softmax'</span>, name=<span class="synConstant">'class'</span>)(x1)

    model = Model(input_tensor, output_tensor)
    model.compile(loss=<span class="synConstant">'categorical_crossentropy'</span>, optimizer=<span class="synConstant">'nadam'</span>, metrics=[<span class="synConstant">'acc'</span>])

    <span class="synStatement">return</span> model

hidden = <span class="synConstant">356</span>
model = _create_model(train_features[<span class="synConstant">0</span>].shape, hidden, data[<span class="synConstant">'class_count'</span>],data[<span class="synConstant">'vectorian'</span>])
model.summary()
</pre>


<p>作成したモデルにデータを流して学習を進めます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>model_filename=<span class="synConstant">'{0}/model.h5'</span>.format(dirname)

history = model.fit(train_features, train_labels,
                    epochs=<span class="synConstant">50</span>,
                    batch_size=<span class="synConstant">32</span>,
                    validation_data=(val_features, val_labels),
                    shuffle=<span class="synIdentifier">False</span>,
                    callbacks = [
                        EarlyStopping(patience=<span class="synConstant">5</span>, monitor=<span class="synConstant">'val_acc'</span>, mode=<span class="synConstant">'max'</span>),
                        ModelCheckpoint(filepath=model_filename, monitor=<span class="synConstant">'val_acc'</span>, mode=<span class="synConstant">'max'</span>, save_best_only=<span class="synIdentifier">True</span>)
                    ])
</pre>


<h2 id="評価出力">評価・出力</h2>

<p>ModelCheckpointで保存したmodelを読み取り、さらにSelf-Attentionの結果を得られるようにします。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> keras.models <span class="synPreProc">import</span> load_model
model = load_model(model_filename, custom_objects=SeqSelfAttention.get_custom_objects())
model = Model(inputs=model.input, outputs=[model.output, model.get_layer(<span class="synConstant">'attention'</span>).output])
</pre>


<p>modelにtest dataを入れて結果を取得します。</p>

<pre class="code lang-python" data-lang="python" data-unlink>out = model.predict(test_features)

y = out[<span class="synConstant">0</span>] <span class="synComment"># 予測labelのsoftmaxが入っている</span>
weight = out[<span class="synConstant">1</span>] <span class="synComment"># Self-Attentionのweighが入っている</span>

pred = np.argmax(y,<span class="synConstant">1</span>) <span class="synComment"># 予測値</span>
<span class="synIdentifier">max</span> = np.max(y,<span class="synConstant">1</span>) <span class="synComment"># 信頼値</span>

df_y = pd.DataFrame(np.array([np.argmax(test_labels,<span class="synConstant">1</span>),pred,<span class="synIdentifier">max</span>*<span class="synConstant">100</span>]).T,columns=[<span class="synConstant">'true'</span>,<span class="synConstant">'pred'</span>,<span class="synConstant">'trust'</span>]) <span class="synComment"># 結果をまとめておくと精度確認に使える</span>
</pre>


<p>精度の確認を行います。</p>

<p>ただ、testを入力し得られた結果を出力するだけでは精度が得られなかったので、信頼値が高いものだけを選別し、出力するようにしました。
信頼値を90~55の間で出力し、<b>最もAccuracyが高い時の信頼値以上のものを出力</b>としました。</p>

<p> 一方で信頼値を上げすぎるとわずかな出力しか得られないので、元のtestデータ数の1/3はデータ数が出力として確保できるような条件を加えました。</p>

<pre class="code lang-python" data-lang="python" data-unlink>report = classification_report(pred, np.argmax(test_labels,<span class="synConstant">1</span>),output_dict=<span class="synIdentifier">True</span>,target_names=[data[<span class="synConstant">'index2label'</span>][i] <span class="synStatement">for</span> i <span class="synStatement">in</span> [<span class="synConstant">0</span>,<span class="synConstant">1</span>]])
FirstReport_df = pd.DataFrame(report).T

<span class="synIdentifier">print</span>(FirstReport_df)
FirstReport_df.to_csv(dirname+<span class="synConstant">'NotCutReport.csv'</span>)

<span class="synComment"># 信頼値が高い予測だけを出力とすることで確からしいものだけをみる</span>
AppSupport = FirstReport_df.loc[<span class="synConstant">'app'</span>,<span class="synConstant">'support'</span>] <span class="synComment"># 予測した数を取得</span>
DisappSupport = FirstReport_df.loc[<span class="synConstant">'disapp'</span>,<span class="synConstant">'support'</span>]

<span class="synStatement">for</span> UpperLimit <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synConstant">90</span>,<span class="synConstant">55</span>,-<span class="synConstant">1</span>):
  max_acc = <span class="synConstant">0</span>
  <span class="synStatement">for</span> i <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synConstant">50</span>,UpperLimit,<span class="synConstant">1</span>):
    df_y_cut = df_y[df_y.trust &gt; i]
    report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class="synIdentifier">True</span>)
    report_df = pd.DataFrame(report).T
    acc = report_df.loc[<span class="synConstant">'accuracy'</span>,<span class="synConstant">'precision'</span>]
    <span class="synStatement">if</span> max_acc &lt; acc:
      max_acc = acc
      max_i = i
  df_y_cut = df_y[df_y.trust &gt; max_i]
  report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class="synIdentifier">True</span>,target_names=[data[<span class="synConstant">'index2label'</span>][i] <span class="synStatement">for</span> i <span class="synStatement">in</span> [<span class="synConstant">0</span>,<span class="synConstant">1</span>]])
  report_df = pd.DataFrame(report).T
  <span class="synStatement">if</span> (report_df.loc[<span class="synConstant">'app'</span>,<span class="synConstant">'support'</span>] &gt; HighSupport/<span class="synConstant">3</span>) <span class="synStatement">and</span> (report_df.loc[<span class="synConstant">'disapp'</span>,<span class="synConstant">'support'</span>] &gt; LowSupport/<span class="synConstant">3</span>):
    <span class="synComment"># 元の予測値の1/3のデータ数が確保できていればクリア</span>
    <span class="synIdentifier">print</span>(<span class="synConstant">'UpperLimit:'</span> + <span class="synIdentifier">str</span>(UpperLimit))
    <span class="synIdentifier">print</span>(<span class="synConstant">'max_i:'</span> + <span class="synIdentifier">str</span>(max_i))
    <span class="synIdentifier">print</span>(report_df)
    report_df.to_csv(dirname+<span class="synConstant">'Report.csv'</span>)
    <span class="synStatement">break</span>
</pre>


<p>最後にSelf-AttentionのWeightをcsvで出力します。</p>

<p>得られた出力結果は、予測値-承認と真値-承認、予測値-承認と真値-不承認、予測値-不承認と真値-承認、予測値-不承認と真値-不承認のように予測値と真値の結果に応じて4つに分けてcsvで出力するようになっています。</p>

<pre class="code lang-python" data-lang="python" data-unlink>app_app = pd.DataFrame([])
app_disapp = pd.DataFrame([])
disapp_app = pd.DataFrame([])
disapp_disapp = pd.DataFrame([])

<span class="synStatement">for</span> i <span class="synStatement">in</span> <span class="synIdentifier">range</span>(<span class="synIdentifier">len</span>(test_features)):
  input_text = test_sen[i]
  tokens = data[<span class="synConstant">'vectorian'</span>].tokenizer._tokenizer.encode_as_pieces(input_text)

  conf = out[<span class="synConstant">0</span>][i] * <span class="synConstant">100</span>
  wei = out[<span class="synConstant">1</span>][i]

  <span class="synStatement">if</span> np.max(conf) &lt;= max_i:
    <span class="synStatement">continue</span>

  pred = [data[<span class="synConstant">'index2label'</span>][np.argmax(conf)]]
  labels = [data[<span class="synConstant">'index2label'</span>][np.argmax(test_labels[i])]]

  weights = [w.max() <span class="synStatement">for</span> w <span class="synStatement">in</span> wei[-<span class="synIdentifier">len</span>(tokens):]]

  df = pd.DataFrame([tokens, weights], index=[<span class="synConstant">'token'</span>, <span class="synConstant">'weight'</span>]).T

  mean = np.asarray(weights).mean()
  <span class="synStatement">for</span> j <span class="synStatement">in</span> df.index:
    <span class="synStatement">if</span> df.loc[j,<span class="synConstant">'weight'</span>] - mean &lt;= <span class="synConstant">0</span>:
      df.loc[j,<span class="synConstant">'weight'</span>] = <span class="synConstant">0</span>
    <span class="synStatement">else</span>:
      df.loc[j,<span class="synConstant">'weight'</span>] = df.loc[j,<span class="synConstant">'weight'</span>] - mean
  
  pred += df.token.values.tolist()
  labels += df.weight.values.tolist()

  final = pd.DataFrame(np.array([pred,labels]).T,columns=[<span class="synConstant">'pred'</span>,input_text])

  <span class="synStatement">if</span> (pred[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>):
    app_app = pd.concat([app_app,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'app'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'disapp'</span>):
    app_disapp = pd.concat([app_disapp,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'disapp'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'app'</span>):
    disapp_app = pd.concat([disapp_app,final],<span class="synConstant">1</span>)
  <span class="synStatement">elif</span> (pred[<span class="synConstant">0</span>]  == <span class="synConstant">'disapp'</span>) &amp; (labels[<span class="synConstant">0</span>] == <span class="synConstant">'diaspp'</span>):
    disapp_disapp = pd.concat([disapp_disapp,final],<span class="synConstant">1</span>)

app_app.to_csv(dirname+<span class="synConstant">'app_app.csv'</span>,index=<span class="synIdentifier">False</span>)
app_disapp.to_csv(dirname+<span class="synConstant">'app_disapp.csv'</span>,index=<span class="synIdentifier">False</span>)
disapp_app.to_csv(dirname+<span class="synConstant">'disapp_app.csv'</span>,index=<span class="synIdentifier">False</span>)
disapp_disapp.to_csv(dirname+<span class="synConstant">'disapp_disapp.csv'</span>,index=<span class="synIdentifier">False</span>)
</pre>


<h1 id="まとめ">まとめ</h1>

<p>Self-Attentionを用いて無料リスティングの不承認理由を解き明かそうと分析しました。
しかし、<b>title,descriptionのみからは承認と不承認を分類することができず、不承認理由の解明には貢献できせんでした。</b></p>

<p>Self-Attentionとデータセットの相性が悪いという可能性も考えられるので、tfidf+lgbも試みましたが、こちらもうまくいきませんでした。やはりこちらの結果からもtitle,descriptionのみからは承認と不承認を分類することができないということが考えられます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作の gem の名前を考えるのは難しい]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/03/07/202519</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/03/07/202519"/>
        <updated>2021-03-07T11:25:19.000Z</updated>
        <summary type="html"><![CDATA[<h2>自作の gem の名前を変えたい。</h2>

<p><code>my_api_client</code> という自作の gem がありまして、<a href="https://ryz310.hateblo.jp/search?q=my_api_clien">このブログでは何度も紹介している</a> んですが、ニッチすぎるのか宣伝が下手すぎるのか、一向に使ってみた、という噂を聞きません (´・ω・｀)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client" title="ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client">github.com</a></cite></p>

<p>まあ弊社のプロダクトの中ではガッツリ使ってるんで別にそれは良いんですが、もう少しまともな名前にならんのかね、というコメントを頂きます。
いい機会だしちゃんと良い名前付けようと思って考えました。どうせなら自分が好きなゲームからいい名前付けたいな、と思って『Luida（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>）』という名前が浮かびました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8">ドラクエ</a> III のあれです。</p>

<p><figure class="figure-image figure-image-fotolife" title="ここはルイーダの店"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20201004/20201004001621.jpg" alt="f:id:ryz310:20201004001621j:plain:w300" title="" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>ここは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店。旅人たちが仲間を求めてあつまる出会いと別れの酒場よ。</figcaption></figure></p>

<p><code>my_api_client</code> は <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client を簡単に作ったりテストしたりするための gem なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CB%C1%B8%B1%BC%D4">冒険者</a>を登録して一緒に旅する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店のイメージがピッタリだなーと思ったんですよね。とはいえ gem の名前を変えるのって面倒だしそのうちやろう、って思ってたら半年くらい経っちゃいましたけどね。上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%A4%A1%BC%A5%C0">ルイーダ</a>の店の画像ってわざわざ <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a> 版の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8III">ドラクエIII</a> 買ってスクショ撮ったんですが、その日付が 2020/10/04 でした 😇</p>

<p>多分そのうちやります（フラグ）</p>

<h2>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client v0.20.0 をリリースしました 🚀</h2>

<p>gem の名前は変わらないけどアップデートはされていく。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Freleases%2Ftag%2Fv0.20.0" title="Release v0.20.0 (Mar 07, 2021) · ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.20.0">github.com</a></cite></p>

<p>元々 <code>my_api_client</code> には <code>#pageable_get</code> (alias: <code>#pget</code>) というメソッドがあり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/REST%20API">REST API</a> のレスポンス <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> に含まれる URL を順に辿ってリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トする <code>Enumerator</code> を取得することが出来ます。機能自体は実相してテストもしてあるものの、実際のプロダクトで使う機会がなく長いこと日の目を見なかったんですが、この度ついに弊プロダクトで利用する機会が訪れたのでチームのエンジニアに使ってもらってるんですが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/RSpec">RSpec</a> を書く際のスタブ化が特にサポートされていなくてテストしづらい問題がありました。</p>

<p>今回のアップデートでは、この <code>#pageable_get</code> に対応するスタブ化をサポートしています。 <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md#pageable-option">詳しい解説は README.jp.md にも書いた</a> んですが、せっかくなのでブログにも転記しておきます。まあ文章で説明されても実際に使ってみないとピンと来ないのはわかってますけどね。。。</p>

<hr />

<p><code>#pageable_get</code>  (<code>#pget</code>) を使った実装用に <code>pageable</code> というオプションが利用できます。
<code>pageable</code> に設定する値は <code>Enumerable</code> である必要があります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: [
      { <span class="synConstant">page</span>: <span class="synConstant">1</span> },
      { <span class="synConstant">page</span>: <span class="synConstant">2</span> },
      { <span class="synConstant">page</span>: <span class="synConstant">3</span> },
    ],
  }
)

<span class="synType">MyPaginationApiClient</span>.new.pagination.each <span class="synStatement">do</span> |<span class="synIdentifier">response</span>|
  response.page <span class="synComment">#=&gt; 1, 2, 3</span>
<span class="synStatement">end</span>
</pre>


<p>なお、 <code>Enumerable</code> の各値にはここまで紹介した <code>response</code>, <code>raise</code>, <code>Proc</code> など全てのオプションが利用可能です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: [
      { <span class="synConstant">response</span>: { <span class="synConstant">page</span>: <span class="synConstant">1</span> } },
      { <span class="synConstant">page</span>: <span class="synConstant">2</span> },
      -&gt;(params) { { <span class="synConstant">page</span>: <span class="synConstant">3</span>, <span class="synConstant">user_id</span>: params[<span class="synConstant">:user_id</span>] } },
      { <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>::<span class="synType">IamTeapot</span> },
    ],
  }
)
</pre>


<p>また、 <code>Enumerator</code> を使えば無限に続くページネーションを定義することもできます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">MyPaginationApiClient</span>,
  <span class="synConstant">pagination</span>: {
    <span class="synConstant">pageable</span>: <span class="synType">Enumerator</span>.new <span class="synStatement">do</span> |<span class="synIdentifier">y</span>|
      <span class="synStatement">loop</span>.with_index(<span class="synConstant">1</span>) <span class="synStatement">do</span> |<span class="synIdentifier">_</span>, <span class="synIdentifier">i</span>|
        y &lt;&lt; { <span class="synConstant">page</span>: i }
      <span class="synStatement">end</span>
    <span class="synStatement">end</span>,
  }
)
</pre>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJob の retry_on に jitter というオプションがあるの知ってますか？]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/03/02/113927</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/03/02/113927"/>
        <updated>2021-03-02T02:39:27.000Z</updated>
        <summary type="html"><![CDATA[<p>僕は知らなかったです (・∀・)</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> で ActiveJob の retry_on が同時に発火されるの何とかしたいなーと思って調べてたら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6 からは jitter というオプションが指定できるようになってて、デフォルトでリトライ間隔を 15% ランダマイズしてくれるとの事。Rate Limit の回避とかで便利。 <a href="https://t.co/kpIx6YVFEq">https://t.co/kpIx6YVFEq</a></p>&mdash; サトウリョウスケ (@ryosuke_sato) <a href="https://twitter.com/ryosuke_sato/status/1365707024357466115?ref_src=twsrc%5Etfw">February 27, 2021</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2>jitter とは</h2>

<p><a href="https://github.com/rails/rails/blob/5aaaa1630a/activejob/CHANGELOG.md#rails-610-december-09-2020">Rails 6.1 から追加されたオプション</a> で、 <code>retry_on</code> の待ち時間に対して任意の割合でバラけさせてくれるようになります（デフォルト 15% ）。</p>

<blockquote><p><a href="https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on">ActiveJob::Exceptions::ClassMethods - retry_on</a></p>

<p><code>:jitter</code> - A random delay of wait time used when calculating backoff. The default is 15% (0.15) which represents the upper bound of possible wait time (expressed as a percentage)</p></blockquote>

<h3>実装を確認してみた</h3>

<p>このバラけさせ方が待ち時間に対して増えるのか減るのかが気になって実装を見てみました。増える方向でバラけるようです。
例えば <code>wait: 60.seconds</code> で <code>jitter: 0.5</code> の場合だと、最大 <code>90</code> 秒の待ち時間となります。</p>

<p>うっかり <code>100.0</code> とか指定すると最大 10000% 待ち時間が加算されちゃいそうです。
間違えて指定しないようにご注意下さい🙏</p>

<pre class="code rb" data-lang="rb" data-unlink>delay = seconds_or_duration_or_algorithm.to_i
delay_jitter = determine_jitter_for_delay(delay, jitter)
delay + delay_jitter</pre>


<p>📝 jitter の計算処理は <a href="https://github.com/rails/rails/blob/35e9812dfcb030d4c986532e7672ad8f8f95286f/activejob/lib/active_job/exceptions.rb#L132-L155">このあたり</a></p>

<h3>どういう場面で使うの？</h3>

<p>この機能が無かった従来だと、リトライ処理が一斉に起動してしまうという問題がありました。</p>

<p>例えば外部のサービスに <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トするような Job を作ったとします。<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Rate Limit 超過の例外をハンドリングして、 <code>retry_on</code> で N 分後にリトライするように実装します。
この時、 1000 件の Job が同時に実行され 900 件が Rate Limit 超過となった場合、N 分後に 900 件の Job が一斉にリトライされてしまい、再び 800 件がエラーとなってしまう。
これが何度も繰り返される、という現象が起こってました。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.1 以前だと回避できないの？</h3>

<p>従来の ActiveJob でも一応回避策はあって、 <code>wait</code> に <code>Proc</code> を与えてランダムな待ち時間を返すような処理を書くことで似たような動作は可能です。</p>

<pre class="code rb" data-lang="rb" data-unlink>retry_on SomeError, wait: -&gt; { rand(60..90).seconds }</pre>


<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> (第4世代) 買っちゃった</h2>

<p><figure class="figure-image figure-image-fotolife" title="iPad Air (第4世代)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20210302/20210302102542.jpg" alt="f:id:ryz310:20210302102542j:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption><a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> (第4世代)</figcaption></figure></p>

<p>近日中に <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> Pro の新型が出るとの噂があるが、軽い <a class="keyword" href="http://d.hatena.ne.jp/keyword/Air">Air</a> がほしかったので問題 🍆 （知らなかったけどね）</p>

<p>🔗 <a href="https://iphone-mania.jp/news-350190/">新型iPad Pro搭載A14X/A14Zチップの処理能力はM1チップに匹敵か - iPhone Mania</a></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[RuboCop で違反してるコードを自動的に修正する PR 作ってくれたら嬉しいやろ。できるでそれ。]]></title>
        <id>https://ryz310.hateblo.jp/entry/2021/02/23/222720</id>
        <link href="https://ryz310.hateblo.jp/entry/2021/02/23/222720"/>
        <updated>2021-02-23T13:27:20.000Z</updated>
        <summary type="html"><![CDATA[<p>久々の更新は Rubocop Challenger の話です。</p>

<p>このブログでは触れたこと無かったですが、 <a href="https://github.com/ryz310/rubocop_challenger">そういう gem</a> も作ってます。
自動的に <code>.rubocop_todo.yml</code> から  <code>Cop supports --auto-correct.</code> になってる Cop を拾ってきて PR 作ってくれるやつです。</p>

<p>ちょうど hey 社の CTO の藤村さんが同じ事をやっていてちょっとバズってたんですが、自分の gem 使ってほしかったなーと地味に思ってたりします。自分が世の中に対してアピールが足りてなさすぎましたね 😇</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech.hey.jp%2Fentry%2F2020%2F10%2F23%2F111200" title="たまってしまった .rubocop_todo.yml をGitHub Actionsで継続的かつ自動的に倒す方法 - STORES Tech Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech.hey.jp/entry/2020/10/23/111200">tech.hey.jp</a></cite></p>

<p>何年か前に会社のブログで書いたりはしてたのでリンク貼っておく ✍</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F12%2F05%2F140000" title="まだ .rubocop_todo.yml で消耗してるの？ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/12/05/140000">developer.feedforce.jp</a></cite></p>

<h2>Rubocop Challenger v2.3.0 をリリースしました 🚀</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger%2Freleases%2Ftag%2Fv2.3.0" title="Release v2.3.0 · ryz310/rubocop_challenger" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger/releases/tag/v2.3.0">github.com</a></cite></p>

<p>とはいえ新機能は一つだけで、 auto-correct された Cop が SafeAutocorrect かどうかを教えてくれる、というものです。</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/pull/465">Add description whether the challenge is created by safe autocorrect or not by ryz310 &middot; Pull Request #465 &middot; ryz310/rubocop_challenger &middot; GitHub</a></p>

<p>こんな感じの PR が作成されます。（画像は動作確認で作ったものなので、実際の <code>Style/Alias</code> は常に <code>SafeAutocorrect: true</code> になります）</p>

<p><img src="https://user-images.githubusercontent.com/3985540/108836759-94096800-7614-11eb-8fb9-cb311711e120.png" alt="Add description whether the challenge is created by safe autocorrect or not by ryz310 · Pull Request #465 · ryz310/rubocop_challenger" />
<img src="https://user-images.githubusercontent.com/3985540/108847589-392b3d00-7623-11eb-8c09-e5192edbbd80.png" alt="Add description whether the challenge is created by safe autocorrect or not by ryz310 · Pull Request #465 · ryz310/rubocop_challenger" /></p>

<p>ぜひお試し下さい 👍</p>

<h2>つぎやりたいこと</h2>

<p>先日 <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> が auto-merge 機能をリリースしましたね。自分は即全部の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>で有効化しました ✅</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.blog%2Fchangelog%2F2021-02-04-pull-request-auto-merge-is-now-generally-available%2F" title="Pull request auto-merge is now generally available - GitHub Changelog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.blog/changelog/2021-02-04-pull-request-auto-merge-is-now-generally-available/">github.blog</a></cite></p>

<p>次やりたい機能としては <code>SafeAutocorrect: true</code>  の場合とかは auto-merge を有効化した PR を作るようにしたいんですよね。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> の GraphQL <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> でこの機能を有効化できるらしいです。</p>

<blockquote><p>GraphQL APIs will be rolling out later this week. The pull request webhook event also now includes actions that indicate when auto-merge is enabled or disabled.</p></blockquote>

<p>また時間ある時にでも調べます。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI で docker build するときの Empty continuation lines will become errors in a future release. という warning への対処方法]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/17/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/17/110000"/>
        <updated>2021-02-17T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>Dockerfile を読みやすくするために <code>\</code> とコメントを駆使してみたら CircleCI で warning が出て一瞬焦ったので記事を書いてみました。</p>

<ul class="table-of-contents">
    <li><a href="#CircleCI-で-docker-build-する時の-warning">CircleCI で docker build する時の warning</a></li>
    <li><a href="#warning-が出たのは-Docker-のバグ">warning が出たのは Docker のバグ</a></li>
    <li><a href="#CircleCI-の-Docker-のデフォルトバージョンは-17090-ce">CircleCI の Docker のデフォルトバージョンは 17.09.0-ce</a></li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<h2 id="CircleCI-で-docker-build-する時の-warning">CircleCI で docker build する時の warning</h2>

<p>例えば以下のような Dockerfile があったとします。</p>

<pre class="code lang-dockerfile" data-lang="dockerfile" data-unlink><span class="synStatement">FROM </span>amazonlinux:2

<span class="synStatement">ENV </span>RUBY_VERSION=2.7.2 \
    BUNDLER_VERSION=2.2.9 \
    TZ=/usr/share/zoneinfo/Asia/Tokyo

<span class="synStatement">RUN </span>\
<span class="synComment">    # Install mysql-community-devel</span>
    yum install -y yum-utils &amp;&amp; \
    yum localinstall -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm &amp;&amp; \
    yum-config-manager --enable mysql57-community &amp;&amp; \
    yum-config-manager --disable mysql80-community &amp;&amp; \
    yum install -y mysql-community-devel &amp;&amp; \
    yum remove -y mysql80-community-release yum-utils &amp;&amp; \
    \
<span class="synComment">    # Install ruby</span>
    yum install -y <span class="synConstant">&quot;https://github.com/feedforce/ruby-rpm/releases/download/${RUBY_VERSION}/ruby-${RUBY_VERSION}-1.el7.centos.x86_64.rpm&quot;</span> &amp;&amp; \
    printf <span class="synConstant">&quot;install: --no-document\nupdate: --no-document\n&quot;</span> &gt; /etc/gemrc &amp;&amp; \
    gem install -v <span class="synConstant">&quot;$BUNDLER_VERSION&quot;</span> bundler
</pre>


<p>これを使って CircleCI で docker build すると、<code>Empty continuation lines will become errors in a future release.</code> という warning が出てしまいます。</p>

<p><figure class="figure-image figure-image-fotolife" title="docker build 時の warning"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215173356.png" alt="f:id:tsub511:20210215173356p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>docker build 時の warning</figcaption></figure></p>

<p>普通に読むと、何もコマンドを実行していない <code>\</code> だけの行やコメントだけの行を消した方が良いのかな？と受け取ってしまいがちですが、これは実は Docker 側のバグでした。</p>

<h2 id="warning-が出たのは-Docker-のバグ">warning が出たのは Docker のバグ</h2>

<p>本来はただの空行だけの場合に warning を出したかったようですが、コメントが書かれた行も warning が出てしまっているようです。</p>

<p>以下に書かれているように、Docker 17.10 で修正済みとのことです。</p>

<blockquote><p>Thanks for reporting; this issue was resolved through #35004, which is included in Docker 17.10 and up.</p>

<p>I'll close this issue because this was resolved, but feel free to continue the conversation 👍</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fissues%2F35387" title="False positive &quot;Empty continuation lines will become errors in a future release.&quot; · Issue #35387 · moby/moby" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/moby/moby/issues/35387">github.com</a></cite></p></blockquote>

<p>ただ、Docker 17.10 というと 2017/10 リリースのバージョンですので、2021/02 現在でまだバグが残っているのはおかしいです。</p>

<p>CircleCI の Docker のバージョンを確認してみましょう。</p>

<h2 id="CircleCI-の-Docker-のデフォルトバージョンは-17090-ce">CircleCI の Docker のデフォルトバージョンは 17.09.0-ce</h2>

<p>CircleCI 内で docker build を実行するためには <code>setup_remote_docker</code> が必要です。</p>

<p><code>setup_remote_docker</code> によって CircleCI のジョブのホスト VM で Docker Engine が起動しますが、そこで使われている Docker Engine のバージョンは 17.09.0-ce でした。</p>

<p><figure class="figure-image figure-image-fotolife" title="CircleCI の Docker Engine バージョン"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215175709.png" alt="f:id:tsub511:20210215175709p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>CircleCI の Docker Engine バージョン</figcaption></figure></p>

<p>Docker のバグが修正されたのは 17.10 ですので、確かにまだバグが残っているバージョンです。</p>

<p>さて CircleCI の <code>setup_remote_docker</code> ですが、実はデフォルトでは 17.09.0-ce が使われるようです。</p>

<blockquote><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20210215/20210215174427.png" alt="f:id:tsub511:20210215174427p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://circleci.com/docs/2.0/building-docker-images/#docker-version">https://circleci.com/docs/2.0/building-docker-images/#docker-version</a></p></blockquote>

<h2 id="まとめ">まとめ</h2>

<p>Dockerfile で <code>\</code> だけの行やコメントだけの行がある時に CircleCI で docker build すると <code>Empty continuation lines will become errors in a future release.</code> という warning が出るのは Docker のバグと CircleCI の <code>setup_remote_docker</code> のデフォルトバージョンが古い、という合わせ技によって起きていました。</p>

<p>warning 自体は Docker のバグだったので無視で良いですが、古いバージョンを使い続けるのはあまり良くない気がします。</p>

<p>基本的にはデフォルトを使いたいところですが、17.09.0-ce だと色々な機能が使えないですし、上述したバグもあるので <code>setup_remote_docker</code> を使うときは version を指定することをおすすめします。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker-compose での MySQL の疎通確認で telnet を使う時に自動でコネクションを切る]]></title>
        <id>https://developer.feedforce.jp/entry/2021/02/16/110000</id>
        <link href="https://developer.feedforce.jp/entry/2021/02/16/110000"/>
        <updated>2021-02-16T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>TELNET プロトコルには全く馴染みがないのですが、今回たまたま使う機会があり、かつ調べても割と見つけられない情報だったので記事を書いてみました。</p>

<ul class="table-of-contents">
    <li><a href="#curl-で-TELNET-プロトコルを使う">curl で TELNET プロトコルを使う</a></li>
    <li><a href="#ユースケース">ユースケース</a></li>
    <li><a href="#解説">解説</a></li>
</ul>

<h2 id="curl-で-TELNET-プロトコルを使う">curl で TELNET プロトコルを使う</h2>

<p>curl は HTTP/HTTPS 以外のプロトコルも使うことができます。</p>

<p>curl のドキュメントを確認すると、サポートしているプロコトルは <code>DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP</code> のようです。</p>

<pre class="code" data-lang="" data-unlink>$ man curl # in macOS

curl(1)                                                                                                                    Curl Manual                                                                                                                    curl(1)



NAME
       curl - transfer a URL

SYNOPSIS
       curl [options / URLs]

DESCRIPTION
       curl is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The command
       is designed to work without user interaction.

       curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will make your head spin!

       curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.
...</pre>


<p>例えば以下のように指定することで TELNET プロトコルで対象のサーバーに接続することが可能です。</p>

<pre class="code" data-lang="" data-unlink>$ curl telnet://localhost:3306</pre>


<h2 id="ユースケース">ユースケース</h2>

<p>docker-compose ではコンテナ間の依存関係を <code>depends_on</code> で定義できますが、コンテナ内でサーバーなどが立ち上がるまでは待ってくれません。</p>

<p>そこで、以下のドキュメントに書いてあるような方法でコンテナ間で依存しているサーバーに対するヘルスチェックを行うことで解決できます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.docker.com%2Fcompose%2Fstartup-order%2F" title="Control startup and shutdown order in Compose" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.docker.com/compose/startup-order/">docs.docker.com</a></cite></p>

<p>実際には以下のスクリプトで MySQL サーバーの起動を待ってから別のコンテナを実行するような仕組みにしていました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synIdentifier">host</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span>
<span class="synStatement">shift</span>
<span class="synIdentifier">cmd</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>

<span class="synStatement">until mysql -h &quot;</span><span class="synPreProc">$host</span><span class="synStatement">&quot; -u root -e '</span><span class="synConstant">show databases</span><span class="synStatement">' &gt; /dev/null </span><span class="synConstant">2</span><span class="synStatement">&gt;&amp;</span><span class="synConstant">1</span><span class="synStatement">; do</span>
  <span class="synStatement">&gt;&amp;</span><span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is unavailable - sleeping</span><span class="synStatement">&quot;</span>
  <span class="synStatement">sleep</span> <span class="synConstant">1</span>
<span class="synStatement">done</span>

<span class="synStatement">&gt;&amp;2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is up - executing</span><span class="synStatement">&quot;</span>
<span class="synStatement">exec</span> <span class="synPreProc">$cmd</span>
</pre>


<p>ただ、この方法だと mysql コマンドがコンテナ内にインストールされている必要があります。</p>

<p>本番環境でのコンテナの実行を考慮すると、mysql のクライアントはインストールする必要がなかったので mysql コマンド以外の方法で MySQL サーバーの起動を確認する必要がありました。</p>

<p>そこで、ベースイメージの都合でたまたま curl がインストールされていたので curl の TELNET プロトコルを使うことにしました。</p>

<p>変更後のスクリプトが以下になります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synIdentifier">host</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span>
<span class="synStatement">shift</span>
<span class="synIdentifier">cmd</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>

<span class="synStatement">until echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">quit</span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">| curl telnet://</span><span class="synPreProc">$host</span><span class="synStatement">:3306 &gt; /dev/null </span><span class="synConstant">2</span><span class="synStatement">&gt;&amp;</span><span class="synConstant">1</span><span class="synStatement">; do</span>
  <span class="synStatement">&gt;&amp;</span><span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is unavailable - sleeping</span><span class="synStatement">&quot;</span>
  <span class="synStatement">sleep</span> <span class="synConstant">1</span>
<span class="synStatement">done</span>

<span class="synStatement">&gt;&amp;2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">MySQL is up - executing</span><span class="synStatement">&quot;</span>
<span class="synStatement">exec</span> <span class="synPreProc">$cmd</span>
</pre>


<p>変更したのは 7 行目のみで、mysql コマンドを curl に置き換えています。</p>

<p>こうすることで mysql のクライアントをインストールせずに MySQL サーバーが起動するのを待ってから別のコンテナを実行することができるようになりました。</p>

<h2 id="解説">解説</h2>

<p>例えば以下のように実行すると、TELNET プロトコルを使って疎通確認ができます。</p>

<pre class="code" data-lang="" data-unlink>$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=1 mysql
$ curl -s -o /dev/null telnet://localhost:3306
</pre>


<p>ただしこのままだと Ctrl+C などでコネクションを切るまで curl が実行されたままになります。</p>

<p>TELNET プロトコルは対話型であるため、コネクションを張りっぱなしになるという認識です。</p>

<p>Ctrl+C が必要ということは、上述したスクリプトでは使えません。</p>

<p>ではどうすれば疎通確認後に自動でコネクションを切れるでしょうか。</p>

<p>実は以下のように <code>quit</code> を curl に標準入力で渡すことで解決できます。</p>

<pre class="code" data-lang="" data-unlink>$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=1 mysql
$ echo &#39;quit&#39; | curl -s -o /dev/null telnet://localhost:3306</pre>


<p><code>quit</code> とは何かというと、telnet コマンドでは <code>quit</code> というコマンドを指定することで telnet の接続を切ることができます。</p>

<pre class="code" data-lang="" data-unlink>$ man telnet # in macOS with brew install telnet

TELNET(1)                 BSD General Commands Manual                TELNET(1)

NAME
     telnet -- user interface to the TELNET protocol

SYNOPSIS
     telnet [-468EFKLNacdfruxy] [-S tos] [-X authtype] [-e escapechar] [-k realm] [-l user] [-n tracefile] [-s src_addr] [host [port]]

DESCRIPTION
     The telnet command is used to communicate with another host using the TELNET protocol.  If telnet is invoked without the host argument, it enters command mode, indicated by its prompt (``telnet&gt;&#39;&#39;).  In this mode, it accepts and executes the commands
     listed below.  If it is invoked with arguments, it performs an open command with those arguments.

     Options:

...

quit       Close any open TELNET session and exit telnet.  An end of file (in command mode) will also close a session and exit.</pre>


<p>そして <code>quit</code> を使った telnet コマンドを自動的に終了するための方法が以下の記事で紹介されていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgyoon%2Fitems%2Fdeb7ee62fbe4e9c1a907" title="Telnetの自動化 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/gyoon/items/deb7ee62fbe4e9c1a907">qiita.com</a></cite></p>

<p>上記の記事を参考に、curl でも同様の方法を試してみたら動いた、ということになります。</p>

<p>ただし、curl に標準入力を渡すことで TELNET プロトコルにコマンドを渡すことができる、という挙動自体は curl のドキュメントを確認しても見つけられませんでした。</p>

<p>公式の情報で裏が取れない限りは当記事の事例のように開発環境でのみ使った方が良いかもしれません。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shopify アプリのリスト設定ポイント]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/23/093000</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/23/093000"/>
        <updated>2020-12-23T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2020/shopify-liquid">Shopify開発を盛り上げる（Liquid, React, Node.js, Graph QL） Advent Calendar 2020</a> の 23 日目の記事です。昨日は <a href="https://qiita.com/hal_256">@hal_256</a> さんの『<a href="https://qiita.com/hal_256/items/07626bb0621bc6c8eef8">Next.js+GrapqhQLでShopifyアプリを開発する</a>』でした！型が用意できるっていいですよね。</p>

<p>ごきげんよう！ <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="id:tmd45" class="hatena-id-icon"></a><a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> と申します。よろしくお願いします。</p>

<p>同僚たちが 4 日目、8 日目と記事を書き、こっそり（？）11 日目も書かれていたので、これで 4 本目の弊社記事になります。がんばります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F04%2F100000" title="GitHub Actionsを使ったShopify テーマの自動デプロイ環境構築 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F08%2F120000" title="Shopify 埋め込みアプリのフォームを @shopify/react-form で作る - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>とはいえ、これまでとても濃い記事がたくさん書かれていたので、ここらで軽めに、アプリのリスト設定で引っかかったポイントなんぞを共有したいと思います。</p>

<h2>アプリのリストとは</h2>

<p>Shopify の公開アプリを<a href="https://apps.shopify.com/?locale=ja">アプリストア</a>に掲載するための情報を、設定する場所です。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリのリスト設定"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222175817.png" alt="f:id:tmd45:20201222175817p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリのリスト設定</figcaption></figure></p>

<p>公開アプリを実際に公開するには、このリストの設定を行ったうえで、Shopify からのレビューを通らなければいけません。</p>

<p>項目もたくさんあるので、ここではひとつひとつの説明はしません。</p>

<h2>アプリ名</h2>

<p>初っ端ですが、エンジニアが対応しているとうっかりしがちなポイント その１。</p>

<p><figure class="figure-image figure-image-fotolife" title="A. Listing information、1. App information の「App name」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181803.png" alt="f:id:tmd45:20201222181803p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>A. Listing information、1. App information の「App name」</figcaption></figure></p>

<p>ここを書き忘れることはまずありませんが、この値は、基本である<b>「アプリ設定」の「アプリ名」</b>と同じ値になっている必要があります。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリ設定の「アプリ名」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222191239.png" alt="f:id:tmd45:20201222191239p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリ設定の「アプリ名」</figcaption></figure></p>

<p>アプリ名に "本番環境" と入れているとか、ストア情報（リストの内容）でかっこいいアプリ名を付け直すとかして、名前が一致していないとレビューの自動チェックで弾かれます。</p>

<h2>アプリアイコン</h2>

<p>初っ端ですが、エンジニアが対応しているとうっかりしがちなポイント その２（笑）</p>

<p><figure class="figure-image figure-image-fotolife" title="A. Listing information の「2. App icon」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181115.png" alt="f:id:tmd45:20201222181115p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>A. Listing information の「2. App icon」</figcaption></figure></p>

<p>リストの設定はしたものの…</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリ設定の「アプリのアイコン」"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222181257.png" alt="f:id:tmd45:20201222181257p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリ設定の「アプリのアイコン」</figcaption></figure></p>

<p>こちらも「アプリ設定」の「アプリのアイコン」を設定し忘れていた…なんてことがありました。</p>

<p>また、この２つの画像は指定サイズは異なるものの、基本的には同じ内容の画像を設定する必要があります。開発中に適当なアイコンを設定していて、ストア情報にだけリッチなアイコンを後から作った場合なども、差し替えをお忘れなく。</p>

<h2>スクリーンショット</h2>

<p>必須項目のなかにスクリーンショットの添付があります。</p>

<p>ただ画面のスクリーンショットを貼ればいいというものではなく、かなり細かいガイドラインが定められています。リストの設定ページからもリンクされているので確認しましょう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fshopify.dev%2Fconcepts%2Fapp-store%2Fgetting-your-app-approved%2Fapp-requirements%234-screenshots" title="Requirements for public apps on Shopify" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>画像サイズや縦横比率はわかりやすいですね。代替テキストが必要というのも、そもそもリスト設定のページに項目があるのでまず入れ忘れることは無いと思います。</p>

<p>画像そのものの注意点ですと、以下のようなものが引っかかりやすいかなと思います。</p>

<ul>
<li>スクリーンショットにデスクトップの背景や <strong>ブラウザウィンドウを含めないでください</strong> 。画像が乱雑になったり、利用者の気を散らしたりしないように、それらをトリミングしてください</li>
<li>「埋め込みアプリ」（Embedded App）のスクリーンショットに、ストア名、検索バー、ユーザ情報など <b>Shopify 管理画面（ストア管理画面）のヘッダーコンテンツを含めないで</b>ください。左側のナビゲーションは含めることができます</li>
</ul>


<p><figure class="figure-image figure-image-fotolife" title="ストアのヘッダ部分"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222190020.png" alt="f:id:tmd45:20201222190020p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>ストアのヘッダー部分</figcaption></figure></p>

<p>スクリーンショットを丁寧に撮っていても、後者のストアのヘッダー部分は含めてしまいがちだと思いますので、気をつけましょう。</p>

<h2>詳細な説明</h2>

<p>B. App details の「5. Detailed description」の部分です。アプリストアのアプリ詳細ページで、「（アプリ名）の詳細情報」として表示される項目です。</p>

<p><figure class="figure-image figure-image-fotolife" title="アプリの詳細情報"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20201222/20201222184230.png" alt="f:id:tmd45:20201222184230p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>アプリの詳細情報</figcaption></figure></p>

<p>こちらでついやってしまいがちなのが、とにかく「アプリの機能の説明」<b>以外のことを書いてしまう</b>こと。<a href="https://shopify.dev/concepts/app-store/getting-your-app-approved/app-requirements#5-detailed-description">ガイドラインでも使用してはいけない内容が事細かに書かれています</a>のでチェックしましょう。</p>

<p>"このアプリで何ができるのか" を書くようにすれば問題ないのですが、日本人気質なのか「困ったことがあったらサポートします」みたいな一文を入れるのも NG です（やりました）。それはこのアプリの "機能" の話ではないですよね！</p>

<p>スクリーンショットにも見えるように、サポートに関してはストアの定型で項目が用意されているので、そちらで我慢（？）しましょう。</p>

<h2>おわりに</h2>

<p>というわけで、リストの設定のなかでもストアに表示される基本的に部分についてポイントをあげてみました。</p>

<p>項目が多くて大変ですが、区分けがしっかりしているおかげで適切な粒度で、アプリ利用者へ必要な情報を届けられるこういった仕組みが、とてもエコだなと思います（エコシステム的な意味で）。</p>

<p>アプリレビューを乗り越えたらついにアプリ公開です！ﾌｧｲﾄｫ･.*:+:(n'∀')η:+:*.･</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020年 買ってよかったもの]]></title>
        <id>https://blog.betaful.life/entry/2020/12/14/133631</id>
        <link href="https://blog.betaful.life/entry/2020/12/14/133631"/>
        <updated>2020-12-14T04:36:31.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/5560">feedforce Advent Calendar 2020</a> の 14 日目の記事です。</p>

<p>昨日は同じプロダクトチームでマーケティングを担当してくれている、ねこにしさんによる<a href="https://note.com/nekonishi_m/n/n276d286a6dd2">『その文章に、読者はいるか？』</a>でした。お仕事でもねこにしさんらしい自然体の文章と思っていましたが、その裏ではいろいろ考えることがあるんですね。</p>

<p>そんな素敵な記事のあとでナニですが、わたくし <a href="https://twitter.com/tmd45">@tmd45</a> からは個人的な散財の記録をお届けします。通称、散財部活動報告です。</p>

<h3>2020年は生活が激変した年</h3>

<p>もはやテンプレのような話ですが、自分も例にもれず新型コロナウィルス対策の影響で、現在はフルリモート環境で仕事しています。</p>

<p>とはいえ、自宅のパソコン環境はもともと整っていたので、そういう意味で新しく買い揃えたものはありませんでした。<a href="https://blog.tmd45.jp/archive/category/%E6%95%A3%E8%B2%A1%E9%83%A8">過去の散財記録を見ると</a>もう椅子とかディスプレイとか買ってあって、それそのものが「買っておいてよかったなー」と思いました。</p>

<p>とはいえ本格的にミーティングなどを通話でするようになって、マイクとイヤホンは買いました。</p>

<h4>単一指向性USBコンデンサマイク</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085WSSV2V/tmd45-22/"><img src="https://m.media-amazon.com/images/I/41VmUgWMcTL.jpg" class="hatena-asin-detail-image" alt="FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669" title="FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085WSSV2V/tmd45-22/">FIFINE USBマイク コンデンサーマイク 単一指向性 マイクスタンド(アームスタンドと三脚スタンド付き) ポップガード付き マイクセット ABタイプ USBケーブル PC用マイク Skype 録音 ゲーミング ライブ配信 ゲーム実況 在宅勤務 Windows Mac PS4対応 高音質マイク T669</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>いきなりゴツいですが、快適なフルリモートワークにはコミュニケーションツールへの投資が欠かせません。</p>

<p>単一指向性で雑音を減らし、アームスタンドで取り回しや位置取りが柔軟にできるようになって、コスパ良かったと思います。ポップガード（風防）は使っていません。会社でも同僚におすすめしまくって 2, 3 人に買ってもらいました（笑）</p>

<p>特別なドライバインストールも不要で、Mac と Windows、あと PS4 にも接続して使ってみましたが、どれもいい感じでした。</p>

<h4>骨伝導イヤホン</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07WH6JVRN/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31B3ROIqHML.jpg" class="hatena-asin-detail-image" alt="AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-" title="AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07WH6JVRN/tmd45-22/">AfterShokz Aeropex コスミックブラック 骨伝導ワイヤレスヘッドホン AFT-EP-</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>イヤホンはインイヤー（カナル型）派なんですが、嘘か真か長時間使用で難聴とかいう噂を聞いて、実際、長時間付けていると疲れを感じていたので、社内で話題になっていた骨伝導イヤホンを買ってみました。</p>

<p>いまのところ、いい感じです。どんなイヤホンでも長時間つけっぱなしだと疲れるのは変わりないので、こまめに電源切って外してます。</p>

<p>接地面に髪の毛がはさまってると聞こえづらかったり、大きな音がするとちょっと頭がクラっとする気もします。お安くもないので、機会があったら試してみてから買ったほうがいいと思います（このご時世だとそれも難しいですけど…）。</p>

<h4>足置き・足枕</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07TZM9ZWP/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51X2zP4KGXL.jpg" class="hatena-asin-detail-image" alt="足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント" title="足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07TZM9ZWP/tmd45-22/">足置き 足枕 低反発 足まくら 足休め 足用クッション 体圧分散 半円形 足楽 足むくみ 車用 新幹線 飛行機用 旅行用 オフィス エコノミークラス座席をフラット 敬老の最適プレゼント</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>そういえば地味ですが、リモートワークになってから足置きを買いました。</p>

<p>これまで足元の電源ボックス（電源タップとかをまとめてしまっている箱）に足を乗せていたのですが、通話中に蓋を踏み抜いて大騒ぎすることが何度かあったので（すみません…）これも買ってよかったなと思います。</p>

<h4>キーボードカバー</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085L2M12H/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51FID6GM-3L.jpg" class="hatena-asin-detail-image" alt="moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証" title="moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B085L2M12H/tmd45-22/">moshi ClearGuard MB for MacBook Pro 13/16 キーボードカバー (欧州EUキーボード用) ※13インチは2020年発売の型のみ対応 静かな打音 Touch Barも保護 ぴったりフィットの極薄0.1mm 洗って貼り直せる 無害素材 製品登録で10年グローバル保証</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>日本国内で EU キーボード対応商品買うのなかなか選択肢が少なくて大変です。会社で使ってる MacBook が諸事情で EU キーボードでして(；・∀・) ※通常は US か JIS で選べます！</p>

<p>また、いままで幸いやらかしたことはないんですが、自宅で Mac 使っててコーヒーこぼしたりするのが怖いので、キーボードカバーを買いました。ちゃんとサイズが合ってるので、いい感じに使えてます。</p>

<p>ぺたっとくっ付くわけではなく、ふわっと被ってるだけなので、指が汗ばんでくるとちょっと浮いたりはしますが、慣れですね。</p>

<p>Mac そのものをぶっ壊す恐怖からは守ってくれるのでこれも買ってよかったです。</p>

<h3>あとはコロナとかリモートとか関係ないやつ</h3>

<p>ほんとにただ気が向いて買っただけのもの。</p>

<h4>電動歯ブラシ</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B073XF4LK8/tmd45-22/"><img src="https://m.media-amazon.com/images/I/314tQlQL3gL.jpg" class="hatena-asin-detail-image" alt="フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05" title="フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B073XF4LK8/tmd45-22/">フィリップス ソニッケアー ダイヤモンドクリーン スマート 電動歯ブラシ ホワイト HX9934/05</a></p><ul><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/01</li><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>なにかの折に友人が「電動歯ブラシ使ってるよー」という話をしていて、ふと調べてみたら、ソニッケアーが<b>スマホアプリと連動してる</b>…！</p>

<p>というネタ半分で買いました。</p>

<p>結果的に（スマホアプリも面白かったですが）（普通に）買ってよかったなと思ったものランクインです。振動で磨き時間をコントロールしてくれたりして、キレイに磨けて、磨き時間は短縮されました。</p>

<h4>マッサージクッション</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07F6GFYW7/tmd45-22/"><img src="https://m.media-amazon.com/images/I/51D2lIOIXUL.jpg" class="hatena-asin-detail-image" alt="アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br" title="アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07F6GFYW7/tmd45-22/">アテックス ルルド マッサージクッションダブルもみスリム ブラウン AX-HCL258br</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>しゃれおつなファブリックでお部屋に置いてもおっさんな雰囲気漂わないマッサージクッションで有名なルルドのやつです。</p>

<p>古い型のものがお釈迦になったので買いました。</p>

<p>モミ玉が 2 → 4 つに増えてごりごりマッサージしてくれます。小型化されたので普段座ってる椅子でも無理なく使えるようにもなりました。</p>

<p>オフィスにいたときより、休憩時に身体を動かさなくなったので、これでほぐしてます。</p>

<h4>コーヒー淹れる系</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08MCWL3FR/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31dJHzr1T8L.jpg" class="hatena-asin-detail-image" alt="BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]" title="BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08MCWL3FR/tmd45-22/">BRUNO 電動ミルコーヒーメーカー BOE080 [ カーキ ]</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KQWGXRZ/tmd45-22/"><img src="https://m.media-amazon.com/images/I/41AZXvUqcFL.jpg" class="hatena-asin-detail-image" alt="Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)" title="Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KQWGXRZ/tmd45-22/">Kslong コーヒーポットコーヒー ケトルステンレス 細口ハンドパンチポットドリップih対応長い口ポット ファイン口ポット グースネックポット (ブラック, 350ml)</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&amp;キッチン</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>これまで会社ではインスタントで済ませていたコーヒーですが、自宅にいるようになって <a href="https://postcoffee.co/">PostCoffee®</a> のサブスクリプションなんかも始めました。</p>

<p>だんだん慣れてきたので、最近コーヒーバッグから豆に切り替えて、自分で挽いて淹れるようになりまして。そのために買ったのがこの２つです（計量スプーンとかミル掃除用のブラシとかも買いました）。</p>

<p>朝のおいしいコーヒーで目を覚ましてから仕事にとりかかるのが最近のルーチンです ☕</p>

<h4>スマートリモコン Nature Remo 3</h4>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08BLSLWH4/tmd45-22/"><img src="https://m.media-amazon.com/images/I/31dTYbumS2L.jpg" class="hatena-asin-detail-image" alt="Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応" title="Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B08BLSLWH4/tmd45-22/">Nature スマートリモコン Nature Remo 3 ネイチャーリモ Remo-1W3 Alexa/Google Home/Siri対応</a></p><ul><li><span class="hatena-asin-detail-label">メディア:</span> Tools &amp; Hardware</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>先日 AWS 関連の障害に巻き込まれていた Nature Remo ですが、その障害きっかけで新しい 3 が出たことを知りました。</p>

<p>ずっと mini とか買おうか迷ってたんですが、3 でセンサー類が増えたりしたみたいなので、これも面白そうだと思って勢いで買いました。</p>

<p>いまは "寝る前に部屋の電気とエアコンを消して、Relax Melodies アプリを起動する" みたいなショートカットを活用してます。部屋から出ないのと、猫がいるので人感センサーは扱いようが難しいです。</p>

<p>旧来のリモコンでもまったく困ってなかったですが、同僚曰く「こういうのはロマンですから」とのことで、私もそう思います。</p>

<h3>おわり</h3>

<p>さてさて、雑多にご紹介しましたが、なにかピンとくるものがあったりしたでしょうか。自宅にいる時間が伸びたからこそ、生活を豊かにできるものを揃えて楽しく過ごしたいですね。</p>

<p>ちなみにこの記事を書くために Amazon の購入履歴をみたら 2020 年の注文件数が 259 件もあって腰抜かしました。よく見たら Kindle で漫画を買うようになったからでしたね。やー、びっくりびっくり（棒読み）</p>

<p>明日はアジャイルお兄さん pokotyamu がきっとエモい話をしてくれると思います。</p>

<p>では、皆様良いお年を。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shopify 埋め込みアプリのフォームを @shopify/react-form で作る]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/08/120000</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/08/120000"/>
        <updated>2020-12-08T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、<a href="http://blog.hatena.ne.jp/mashabow/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/mashabow/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:mashabow</a> です。この記事は、<a href="https://qiita.com/advent-calendar/2020/shopify-liquid">Shopify開発を盛り上げる Advent Calendar 2020</a> の 8 日目にあたります。昨日は minozo さんの「<a href="https://qiita.com/minozo/items/8abd224a319bd373c83b">ShopifyでARを実装する方法(2020/12版)</a>」でした。</p>

<p>現在弊社では、<a href="https://socialplus.jp/lp/shopify_line">ソーシャルPLUS の Shopify アプリ版</a>を開発しており、わたしは<a href="https://shopify.dev/tutorials/build-a-shopify-app-with-node-and-react?locale=ja">埋め込みアプリ</a>（Embedded App）のフロントエンド担当です。わかりやすく言えば、マーチャントの方に触っていただく設定画面を作っているわけです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20201207/20201207160849.png" alt="f:id:mashabow:20201207160849p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>そんな設定画面に必要不可欠で、かつ意外と厄介なのがフォームの実装です。今回は、フォームの状態管理に <a href="https://www.npmjs.com/package/@shopify/react-form">@shopify/react-form</a> というライブラリを使ってみました。この記事では、その @shopify/react-form の使い方を紹介したいと思います。</p>

<h2>フォーム管理ライブラリを選ぶ</h2>

<p>前提として、フレームワークには React（Next.js）を、コンポーネントライブラリは Shopify 本家の <a href="https://polaris.shopify.com/components/get-started">Polaris</a> を使用しています。Polaris はあくまでもコンポーネントライブラリなので、フォームの状態を管理するための機能は入っていません。<code>useState</code> を使うなり、他のフォーム管理ライブラリを使うなりして、自分でよしなに管理する必要があります。</p>

<p>実は、最初は軽量・高速な <a href="https://react-hook-form.com/jp/">React Hook Form</a> を使おうかとぼんやり考えていました。しかしよくよく見てみると、Polaris のコンポーネントは React Hook Form に必要な <code>ref</code> を受け取ることができません。<a href="https://ja.reactjs.org/docs/forms.html#controlled-components">Controlled components</a> として作られていますしね。一応、React Hook Form の <a href="https://react-hook-form.com/jp/get-started#IntegratingControlledInputs"><code>Controller</code></a> でラップして使う手があるようですが、それも手間がかかりそうです。</p>

<p>とりあえず他の人のやり方を参考にしようか……と検索してみたところ、どこかで <a href="https://www.npmjs.com/package/@shopify/react-form">@shopify/react-form</a> というライブラリを見つけました<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40shopify%2Freact-form" title="@shopify/react-form" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.npmjs.com/package/@shopify/react-form">www.npmjs.com</a></cite></p>

<p>README を読むと</p>

<blockquote><p>The hooks provided here also work swimmingly with @shopify/polaris.</p></blockquote>

<p>との言葉があり、期待が持てそうです。<a href="https://www.google.com/search?&amp;q=+site%3Ashopify.com+%22%40shopify%2Freact-form%22">Shopify 公式サイトからの言及が皆無</a>なのが謎で若干不安になりますが、Shopify 公式のパッケージです。なお、この記事の執筆時点では <a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/CHANGELOG.md">v0.9.0</a> が最新です。</p>

<h2>@shopify/react-form でフォームを定義する</h2>

<p>前置きが長くなりましたが、実際に使ってみましょう。使い方としては、<a href="https://formik.org/">Formik</a> に似ています。詳しいところは <a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/README.md">README</a> に譲るとして、まずは単純な例を用意しました。</p>

<iframe src="https://codesandbox.io/embed/shopifyreact-form-1-d8nss?expanddevtools=1&fontsize=12&hidenavigation=1&module=%2Fsrc%2FMyForm.tsx&theme=dark"
     style="width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;"
     title="@shopify/react-form 1"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<p>最初に、<a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/README.md#useform"><code>useForm</code></a> でフォームの定義をします。その中では、<a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/README.md#usefield"><code>useField</code></a> を使って各フィールドの定義をしています。<code>fields</code>  のキー（下の例では <code>name</code> にしました）が、フィールドの識別子になります。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">{</span> fields<span class="synStatement">,</span> submit <span class="synIdentifier">}</span> <span class="synStatement">=</span> useForm<span class="synStatement">(</span><span class="synIdentifier">{</span>
    fields: <span class="synIdentifier">{</span>
      <span class="synComment">// 「名前」フィールドの定義</span>
      name: useField<span class="synStatement">(</span><span class="synIdentifier">{</span>
        value: <span class="synConstant">&quot;Shopify大好きパーソン&quot;</span><span class="synStatement">,</span> <span class="synComment">// 初期値</span>
        validates: <span class="synIdentifier">[</span>
          notEmpty<span class="synStatement">(</span><span class="synConstant">&quot;必須項目です&quot;</span><span class="synStatement">),</span>
          lengthMoreThan<span class="synStatement">(</span><span class="synConstant">2</span><span class="synStatement">,</span> <span class="synConstant">&quot;3文字以上で入力してください&quot;</span><span class="synStatement">)</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span><span class="synStatement">),</span>
      ...
    <span class="synIdentifier">}</span><span class="synStatement">,</span>
    <span class="synSpecial">onSubmit</span>: ...
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p><code>useField</code> の引数の <code>value</code> は初期値です。実際には空 <code>""</code> だったり、前回保存した値をバックエンド API から取ってきて入れたりすることが多いでしょう。<code>validates</code> には、バリデーションに使う関数を指定します。上の例では @shopify/react-form に<a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/src/validation/validators.ts">組み込まれているバリデーション関数</a>を使っていますが、種類はそれほど多くはありません。自作することもできます。</p>

<p><code>useForm</code> の <code>onSubmit</code> には submit 時の処理を書きますが、これは次節で説明します。</p>

<p>さて、これでフォームの定義ができました。<code>useForm</code> の戻り値の <code>fields</code> に、各フィールドの状態やハンドラが入っているので、今度はこれを Polaris のコンポーネントに結びつけます。上の例では <code>name</code> という識別子のフィールドを定義したので、<code>fields.name</code> を spread して</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>        <span class="synStatement">&lt;</span>TextField label<span class="synStatement">=</span><span class="synConstant">&quot;名前&quot;</span> <span class="synIdentifier">{</span>...fields.name<span class="synIdentifier">}</span> /<span class="synStatement">&gt;</span>
</pre>


<p>と渡してやるだけで  <a href="https://polaris.shopify.com/components/forms/text-field"><code>TextField</code></a> コンポーネントが動作します。@shopify/react-form が、Polaris のインターフェイスに合わせて作られているおかげですね。べんり！</p>

<p>また、先ほどバリデーション関数を指定したので、バリデーションもちゃんと動きます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20201207/20201207104404.gif" alt="f:id:mashabow:20201207104404g:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>blur 時にバリデーションが実行され、エラーが表示されているのがわかります。</p>

<h2>submit 処理を実装する</h2>

<p>フォームが一通りできたら、submit 時の処理を実装しましょう。<code>useFleid</code> の引数の <code>onSubmit</code> に、async で処理内容を書きます。各フィールドの値は、引数 <code>fieldValues</code> として  <code>onSubmit</code> に渡されます。</p>

<p>以下に例を示します。実際のアプリでは、<code>onSubmit</code> の中で <code>fieldValues</code> をバックエンドに送信するケースがほとんどかと思いますが、今回はサンプルなので、「送信して結果が返ってきたつもり」の処理を入れています。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">{</span> fields<span class="synStatement">,</span> submit <span class="synIdentifier">}</span> <span class="synStatement">=</span> useForm<span class="synStatement">(</span><span class="synIdentifier">{</span>
    fields: <span class="synIdentifier">{</span>
      name: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
      age: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
      christmas: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
    <span class="synIdentifier">}</span><span class="synStatement">,</span>
    <span class="synSpecial">onSubmit</span>: <span class="synStatement">async</span> <span class="synStatement">(</span>fieldValues<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
      console.log<span class="synStatement">(</span>fieldValues<span class="synStatement">);</span>
      <span class="synComment">// =&gt; { name: &quot;...&quot;, age: &quot;...&quot;, christmas: &quot;...&quot; }</span>

      <span class="synComment">// 実際のアプリではバックエンドに送信するが、</span>
      <span class="synComment">// const result = await submitToBackend(fieldValues);</span>
      <span class="synComment">// 今回はサンプルなので、適当な待ち時間を挟んでここで結果を返す</span>
      <span class="synStatement">await</span> <span class="synStatement">new</span> Promise<span class="synStatement">((</span>resolve<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> setTimeout<span class="synStatement">(</span>resolve<span class="synStatement">,</span> <span class="synConstant">1000</span><span class="synStatement">));</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> <span class="synStatement">status</span>: <span class="synConstant">&quot;success&quot;</span> <span class="synIdentifier">}</span><span class="synStatement">;</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p><code>onSubmit</code> 関数の戻り値によって、submit が成功したか失敗したかを表現します。成功の場合は <code>{ status: "success" }</code> を返すきまりになっています。失敗した場合は、<code>{ status: "fail", errors: [...] }</code> という形式ですが、こちらについては次の節で説明します。</p>

<p><code>useForm</code> の戻り値に、submit を実行する <code>submit</code> 関数が入っているので、<code>Form</code> コンポーネントの  <code>onSubmit</code> prop に渡します。これで、[保存] ボタンをクリックしたときに、先ほど実装した <code>onSubmit</code> 関数の処理が実行されるようになりました<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>    <span class="synStatement">&lt;</span><span class="synConstant">Form</span> <span class="synSpecial">onSubmit</span><span class="synStatement">=</span><span class="synIdentifier">{</span>submit<span class="synIdentifier">}</span><span class="synStatement">&gt;</span>
      <span class="synStatement">&lt;</span>FormLayout<span class="synStatement">&gt;</span>
        <span class="synStatement">&lt;</span>TextField label<span class="synStatement">=</span><span class="synConstant">&quot;名前&quot;</span> <span class="synIdentifier">{</span>...fields.name<span class="synIdentifier">}</span> /<span class="synStatement">&gt;</span>
        <span class="synStatement">&lt;</span>TextField label<span class="synStatement">=</span><span class="synConstant">&quot;年齢&quot;</span> <span class="synStatement">type=</span><span class="synConstant">&quot;number&quot;</span> <span class="synIdentifier">{</span>...fields.age<span class="synIdentifier">}</span> /<span class="synStatement">&gt;</span>
        <span class="synStatement">&lt;</span><span class="synConstant">Select</span>
          label<span class="synStatement">=</span><span class="synConstant">&quot;クリスマスといえば？&quot;</span>
          options<span class="synStatement">=</span><span class="synIdentifier">{</span>christmasOptions<span class="synIdentifier">}</span>
          <span class="synIdentifier">{</span>...fields.christmas<span class="synIdentifier">}</span>
        /<span class="synStatement">&gt;</span>
        <span class="synStatement">&lt;</span><span class="synConstant">Button</span> submit primary<span class="synStatement">&gt;</span>保存<span class="synStatement">&lt;</span>/<span class="synConstant">Button</span><span class="synStatement">&gt;</span>
      <span class="synStatement">&lt;</span>/FormLayout<span class="synStatement">&gt;</span>
    <span class="synStatement">&lt;</span>/<span class="synConstant">Form</span><span class="synStatement">&gt;</span>
</pre>


<p>さらに使いやすくするために、</p>

<ul>
<li>submit 処理中は、[保存] ボタンを loading 状態にする</li>
<li>どのフィールドも変更されていなれば、[保存] ボタンを disabled にする</li>
</ul>


<p>という制御を追加しましょう。<code>useForm</code> から <code>submitting</code>,  <code>dirty</code> という boolean 値が返ってくるので、それを使えば簡単に実装できます。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">{</span> fields<span class="synStatement">,</span> submit<span class="synStatement">,</span> submitting<span class="synStatement">,</span> dirty <span class="synIdentifier">}</span> <span class="synStatement">=</span> useForm<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink>        <span class="synStatement">&lt;</span><span class="synConstant">Button</span> submit primary loading<span class="synStatement">=</span><span class="synIdentifier">{</span>submitting<span class="synIdentifier">}</span> disabled<span class="synStatement">=</span><span class="synIdentifier">{</span>!dirty<span class="synIdentifier">}</span><span class="synStatement">&gt;</span>
          保存
        <span class="synStatement">&lt;</span>/<span class="synConstant">Button</span><span class="synStatement">&gt;</span>
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20201207/20201207104838.gif" alt="f:id:mashabow:20201207104838g:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<h2>submit に失敗した場合</h2>

<p>実際のアプリでは、submit してもバックエンド側のバリデーションに弾かれたり、そもそもバックエンドが落ちていたりと、失敗するケースがいろいろあります。失敗時の処理はどうすればいいでしょうか？</p>

<p>上で少し触れましたが、失敗した場合は <a href="https://github.com/Shopify/quilt/blob/%40shopify/react-form%400.9.0/packages/react-form/src/types.ts#L77-L89"><code>{ status: "fail", errors: [...] }</code> という形式</a>でエラーの内容を返すようにします。以下にサンプルを挙げました。「名前が  <code>"Shopify大嫌いパーソン"</code> だったらエラーを返す」ようなバックエンドを想像してみてください。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">{</span> fields<span class="synStatement">,</span> submit<span class="synStatement">,</span> submitErrors<span class="synStatement">,</span> submitting<span class="synStatement">,</span> dirty <span class="synIdentifier">}</span> <span class="synStatement">=</span> useForm<span class="synStatement">(</span><span class="synIdentifier">{</span>
    fields: <span class="synIdentifier">{</span>
      name: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
      age: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
      christmas: useField<span class="synStatement">(</span><span class="synIdentifier">{</span> ... <span class="synIdentifier">}</span><span class="synStatement">),</span>
    <span class="synIdentifier">}</span><span class="synStatement">,</span>
    <span class="synSpecial">onSubmit</span>: <span class="synStatement">async</span> <span class="synStatement">(</span>fieldValues<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
      <span class="synComment">// 今回はサンプルなので、適当な待ち時間を挟んでここで結果を返す</span>
      <span class="synStatement">await</span> <span class="synStatement">new</span> Promise<span class="synStatement">((</span>resolve<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> setTimeout<span class="synStatement">(</span>resolve<span class="synStatement">,</span> <span class="synConstant">1000</span><span class="synStatement">));</span>
      <span class="synStatement">const</span> result <span class="synStatement">=</span>
        fieldValues.name <span class="synStatement">===</span> <span class="synConstant">&quot;Shopify大嫌いパーソン&quot;</span>
          ? <span class="synComment">// submit 失敗の例</span>
            <span class="synIdentifier">{</span>
              <span class="synStatement">status</span>: <span class="synConstant">&quot;fail&quot;</span> <span class="synStatement">as</span> <span class="synStatement">const,</span>
              errors: <span class="synIdentifier">[</span>
                <span class="synComment">// 特定のフィールドにひもづかないエラー</span>
                <span class="synIdentifier">{</span> message: <span class="synConstant">&quot;なんか失敗しました&quot;</span> <span class="synIdentifier">}</span><span class="synStatement">,</span>
                <span class="synComment">// 特定のフィールドにひもづくエラー</span>
                <span class="synIdentifier">{</span> message: <span class="synConstant">&quot;この名前は使えません&quot;</span><span class="synStatement">,</span> field: <span class="synIdentifier">[</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier">]</span> <span class="synIdentifier">}</span>
              <span class="synIdentifier">]</span>
            <span class="synIdentifier">}</span>
          : <span class="synComment">// submit 成功の例</span>
            <span class="synIdentifier">{</span> <span class="synStatement">status</span>: <span class="synConstant">&quot;success&quot;</span> <span class="synStatement">as</span> <span class="synStatement">const</span> <span class="synIdentifier">}</span><span class="synStatement">;</span>
      <span class="synStatement">return</span> result<span class="synStatement">;</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span><span class="synStatement">);</span>
</pre>


<p>このように、<code>errors</code> には複数のエラーを含めることができます。また、<code>field</code> プロパティによって、エラーとフィールドをひもづけることもできます。このひもづけを行うと、フィールドの傍にエラーメッセージが表示されるようになります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20201207/20201207105611.png" alt="f:id:mashabow:20201207105611p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>一方、フィールドにひもづかないエラーは、そのままでは UI 上に何も表示されません。<code>useForm</code> の戻り値の <code>submitErrors</code> には、（フィールドにひもづくか否かに関わらず）すべてのエラーが入っているので、これを <a href="https://polaris.shopify.com/components/feedback-indicators/banner#navigation"><code>Banner</code></a> コンポーネントに表示させてみましょう。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink>    <span class="synStatement">&lt;</span><span class="synConstant">Form</span> <span class="synSpecial">onSubmit</span><span class="synStatement">=</span><span class="synIdentifier">{</span>submit<span class="synIdentifier">}</span><span class="synStatement">&gt;</span>
      <span class="synStatement">&lt;</span>FormLayout<span class="synStatement">&gt;</span>
        <span class="synIdentifier">{</span>submitErrors.<span class="synSpecial">length</span> <span class="synStatement">&gt;</span> <span class="synConstant">0</span> <span class="synConstant">&amp;&amp;</span> <span class="synStatement">(</span>
          <span class="synStatement">&lt;</span>Banner <span class="synStatement">status=</span><span class="synConstant">&quot;critical&quot;</span><span class="synStatement">&gt;</span>
            <span class="synStatement">&lt;</span>p<span class="synStatement">&gt;</span>保存に失敗しました。<span class="synStatement">&lt;</span>/p<span class="synStatement">&gt;</span>
            <span class="synStatement">&lt;</span>ul<span class="synStatement">&gt;</span>
              <span class="synIdentifier">{</span>submitErrors.map<span class="synStatement">((</span><span class="synIdentifier">{</span> message <span class="synIdentifier">}</span><span class="synStatement">,</span> i<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synStatement">(</span>
                <span class="synStatement">&lt;</span>li key<span class="synStatement">=</span><span class="synIdentifier">{</span>i<span class="synIdentifier">}</span><span class="synStatement">&gt;</span><span class="synIdentifier">{</span>message<span class="synIdentifier">}</span><span class="synStatement">&lt;</span>/li<span class="synStatement">&gt;</span>
              <span class="synStatement">))</span><span class="synIdentifier">}</span>
            <span class="synStatement">&lt;</span>/ul<span class="synStatement">&gt;</span>
          <span class="synStatement">&lt;</span>/Banner<span class="synStatement">&gt;</span>
        <span class="synStatement">)</span><span class="synIdentifier">}</span>
        <span class="synIdentifier">{</span><span class="synComment">/* 略（フォームの中身） */</span><span class="synIdentifier">}</span>
      <span class="synStatement">&lt;</span>/FormLayout<span class="synStatement">&gt;</span>
    <span class="synStatement">&lt;</span>/<span class="synConstant">Form</span><span class="synStatement">&gt;</span>
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20201207/20201207105711.png" alt="f:id:mashabow:20201207105711p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>これでいい感じのフォームができあがりました！ さわって試してみてください。</p>

<iframe src="https://codesandbox.io/embed/shopifyreact-form-2-1wpxz?expanddevtools=1&fontsize=12&hidenavigation=1&module=%2Fsrc%2FMyForm.tsx&theme=dark"
     style="width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;"
     title="@shopify/react-form 2"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>


<h2>おまけの補足</h2>

<ul>
<li><a href="https://polaris.shopify.com/components/forms/checkbox#navigation"><code>Checkbox</code></a> や <a href="https://polaris.shopify.com/components/forms/radio-button#navigation"><code>RadioButton</code></a> に props を渡す場合は、<a href="https://github.com/Shopify/quilt/tree/%40shopify/react-form%400.9.0/packages/react-form#aschoicefield"><code>asChoiceField</code></a> を使う必要があります。</li>
<li>実際の埋め込みアプリのフォームでは、さらに App Bridge の <a href="https://shopify-dev.shopifycloud.com/tools/app-bridge/actions/contextualSaveBar"><code>ContextualSaveBar</code></a> を併用するのがおすすめです。機能としては Polaris の <a href="https://polaris.shopify.com/components/forms/contextual-save-bar"><code>ContexualSaveBar</code></a> と似ていますが、App Bridge の <code>ContextualSaveBar</code> を使った方が、一貫した UI/UX を提供できます。</li>
</ul>


<h2>おわりに</h2>

<p>というわけで、@shopify/react-form を簡単に紹介しました。Shopify 公式が開発しているだけあって、手軽に Polaris と組み合わせられるところが嬉しいですね。</p>

<p>明日のアドベントカレンダーは <a href="https://qiita.com/mixlogue">mixlogue</a> さんによる「<a href="https://qiita.com/mixlogue/items/2d8febae3b98cbdfebb8">サードパーティクッキーの問題を解決するApp Bridgeの新しい仕様、セッショントークンに対応する（Next.js版）</a>」です。ちょうど弊アプリもセッショントークンを採用したところなので、mixlogue さんがどのように実装されたのか、とても気になります！</p>

<p>ではでは。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>よく覚えていませんが、<a href="https://www.reddit.com/r/reactjs/comments/f4cu80/form_validation_library_suggestions/fhpz8i5/">おそらくここ？</a> <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>ただし、<code>onSubmit</code> 関数が実行される前にクライアントサイドバリデーションが走ります。クライアントサイドバリデーションに引っかかった場合は、<code>onSubmit</code> 関数の中身は実行されません。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[新卒機械学習エンジニアがAI Quest2020に参加しました]]></title>
        <id>https://developer.feedforce.jp/entry/2020/12/04/083224</id>
        <link href="https://developer.feedforce.jp/entry/2020/12/04/083224"/>
        <updated>2020-12-03T23:32:24.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/5560">Feedforce Advent Calendar 2020</a> の 4 日目の記事です。</p>

<p>昨日は<a href="https://masutaka.net/chalow/">ますたかさん</a>の<a href="https://masutaka.net/chalow/2020-12-03-1.html">優先度より優先順位のほうが偉い</a>でした。優先度をつける時って高高高高高高ってなってしまうのわかります...。</p>

<p>では、本題。</p>

<p>今回AI Questという長期のプログラムに参加しました。そこで実際に行ったことや、学んだことを記録として残したいと思います。
AI Questに参加してみたいと思っている方は、是非参考にしてください。
（事実を列挙しただけなので読み物としては、面白味が少ないです...）</p>

<p>先に書いておくと</p>

<h1>長文失礼しました</h1>

<h1>自己紹介</h1>

<p>私は、2020年に株式会社フィードフォースに新卒で入社した八百です。データ分析チームで機械学習エンジニアとして、業務に携わっています。
大学では、YOLOv2を用いて360度カメラで撮影された画像の物体検出を研究していました。最近、金魚を飼い始めました。
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftwitter.com%2Ffeed_yao" title="八百俊哉@Feedforce (@feed_yao) | Twitter" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://twitter.com/feed_yao">twitter.com</a></cite></p>

<h1>参加したきっかけ</h1>

<p>弊社のデータ分析チームには機械学習経験者が私しかおらず、その私も学部で機械学習の卒論を書いた程度の知識しかありませんでした。そのような状態で社内のプロダクトにいきなり機械学習を導入するということがとてもハードルが高く、実際どのような工程を踏んで進めたら良いのかわかりませんでした。</p>

<p>そんな時に上司の加藤さんがAI Questというプログラムを紹介してくださいました。</p>

<blockquote><p>AI Questは、参加者同士が学び合い、高め合いながら
AI活用を通した企業の課題解決方法を身につけるプログラムです。</p></blockquote>

<p>面白そうだし、現在抱えている「どのようにして機械学習をプロダクトに導入したら良いのか」という疑問が解消できる良い機会だと思い、応募しました。</p>

<h1>アセスメント課題を解く</h1>

<p>参加するにあたり、まずは自身のプロフィール（志望動機など）を提出し、その後アセスメント課題というものを解きました。このアセスメント課題は、任意課題となっていましたが、やった方が合格率が高いのではないかと思い、挑戦しました。（実際のところどうなのかはわかりません。）</p>

<p>内容としては、「民泊サービスにおける物件データを利用した宿泊価格予測モデルの作成」でした。基本的にはkaggleのようなコンペ形式でファイルを提出するとスコアが返ってくるというようなものです。また、それらのスコアは参加者全員に公開されており、参加者全体のうち自分がに何位なのかということを確認することができます。</p>

<p>私はこれまでNNしか扱ったことがなかったので、NNを用いて宿泊価格を回帰しました。しかし、思ったようにスコアは向上しませんでした。その時は精度が上がらない原因は、モデルにあるだろうと勝手に決めてしまって、モデルの最適化ばかりに時間を使っていました。（ネットワーク構造を変更してみたり、optimizarを調整してみたり）</p>

<p>それでもスコアは向上せず、アセスメント課題の締め切りの日数がだんだんと迫ってきていました。焦りを感じた私は、大学の頃にお世話になっていた先生に連絡を取り、相談してみました。</p>

<p>すると、「コンペは、入力データチューニングすることによってスコアが上がる」ということを教えていただきました。</p>

<p>大学の卒論では画像処理を行っていたので、入力データをチューニングする？？？って感じでしたが、kaggle notebookや様々な方のブログを通して、Data engineeringというものを知りました。</p>

<p>そこからは様々なデータ加工を<a href="https://www.kaggle.com/learn/overview">kaggle cources</a>という無料の学習教材でData engineeringを学習し、実践してみました。</p>

<p>その結果、無事AI Questに参加できるということが決定しました!!</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154012.png" alt="f:id:newton800:20201201154012p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>メールが届いた時は社内のいろんな人に自慢したい気持ちでしたが、弊社はほとんどの方がリモートワークなので席が近い複数の人に自慢したと思います。</p>

<p>また、業務時間を用いてAI Questに挑戦してもよいということだったので、ここで落選してしまうと、、、って感じだったので良かったです。</p>

<p>そこからは、AI QuestのSlackに招待されたり、SIGNATEアカウントを作成したりちょっとした雑務をやる感じでした。その中でも重要なのが、どのコースを受講するかを選択するところです。</p>

<p>AI Questは大きく2つのタームに分かれていて、それぞれのタームごとに個人が参加したいコースを4つのうちから1つ選ぶというものです。</p>

<p>ちなみに第一タームの４コースは以下のようになっていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154054.png" alt="f:id:newton800:20201201154054p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>弊社は広告配信するためのフィードを作成しているプロダクトがあるので、自動的に最適な価格に変更できたらより良い広告配信に携われるのではないかと考えてPBL_02の小売価格最適化を選択しました。</p>

<h1>AI Questが始まった！！</h1>

<p>初回は、開会式と今後のについての説明をZoomで行いました。そこでアイスブレイクとして参加者同士で、自己紹介を行う時間が用意されていました。</p>

<p>今後の流れとしては、ビジネス課題、AI課題、最終課題の3つのフェーズで区切られて、それぞれのフェーズごとに期限つきの課題が課せられるというものです。</p>

<h1>ビジネス課題を解く</h1>

<p>第一課題では主に要求定義、要件定義を行いました。私は新卒ということもあり業務上、そのようなことをやった経験がなく、ビジネス課題を通して新しい知識を身に付けたいと思っていました。</p>

<p>課題の詳細としては以下のようなものです。</p>

<ol>
<li>要求定義

<ol>
<li>必要な情報の洗い出し、情報の取得応報の検討</li>
</ol>
</li>
<li>要件定義

<ol>
<li>AI化業務の具体化、PoCにおける要件定義項目の検討</li>
<li>2.1で検討したPoCにおける要件定義項目ごとの要件検討</li>
</ol>
</li>
</ol>


<p>といった感じです。</p>

<p>まずPoCという言葉を初めて知りました。</p>

<blockquote><p>PoCとは、Proof of Conceptの略で、「概念実証」という意味です。新しい概念や理論、原理、アイディアの実証を目的とした、試作開発の前段階における検証やデモンストレーションを指します。</p></blockquote>

<p>なるほど。開発する前の試行錯誤のことをPoCというのか...といった知識レベルでの参加でした。</p>

<p>ここは、自身で考えたものを提出することで、模範解答がダウンロードできるので、模範解答と自身で作成したものを比較することで、何が足りていなかったのかを確認する事ができました。</p>

<p>この時私が学んだこととしては、まず機械学習を導入するにあたりどれくらいの精度または利益が生まれることを想定しているのかを事前に相談しておく必要があるということです。
クライアントが機械学習への期待が高すぎると、実際に完成しても「それだけしか効果ないんですか？」みたいな感じになりかねないです。そのためにまず初めに、効果として具体的な目標数値をすり合わせておく必要があります。
また、ヒアリングで聞いておいたら良いことや、モデル作成のために行わなければいけない工程を一通り体験できたのは、良い経験になったと思います。</p>

<h1>AI課題を解く</h1>

<p>私はPBL_02の小売価格最適化を選択していたので、粗利が最大となるように約700個の商品の価格を決めるという課題でした。</p>

<p>また、提出回数は24回と定められており、この24回というのは6ヶ月×4週間ということを意味しています。そのため、6ヶ月間かけて週ごとのデータを用いてPoCを実施しているということですね。</p>

<p>そして最終的な粗利が最大となった人がコンペ形式で入賞するというものになっています。</p>

<h2>データ収集編</h2>

<p>今回の課題で面白いところは、最初のデータは各商品につき一つずつしか存在していないということです。なんというデータ管理なんでしょうか...</p>

<p>最適な価格を予想するとなると、各商品ごとに様々な価格で販売して、どれくらい売れたかのデータがすでにあることを想定していましたが、まさかの一個でした。</p>

<p>言葉ではデータは伝えにくいので図示すると以下のような感じになっています。</p>

<p><figure class="figure-image figure-image-fotolife" title="私がイメージしていたデータ構造"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154140.png" alt="f:id:newton800:20201201154140p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>私がイメージしていたデータ構造</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="実際に配布されたデータ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154215.png" alt="f:id:newton800:20201201154215p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>実際に配布されたデータ</figcaption></figure></p>

<p>あれ？これ最適価格を予想できなく無いか...？？</p>

<p>三日くらい、これどうやったら最適価格を作成できるんだと悩んでいました。</p>

<p>しかし、ここで一人で悩むだけで終わらないのがAI Questです。同じ課題を解いている人がたくさんいるので、他の人に聞けば良いのです。</p>

<p>AI Questでは毎週土曜日にサロンと言って参加者同士でコミュニケーションをとり、現在悩んでいることや解決の糸口の共有などを行う機会が設けられていました。こちらは自由参加で予定が空いている人が参加するという感じになっています。</p>

<p>このサロンでどのようにして最適価格を予想しているのか、他の人に聞いてみると、以下の解答が得られました。</p>

<p>「今回の課題は、予測価格を提出するといくら売れたかのフィードバックが得られます。そのため、初めは適当な数字で価格を設定して提出すると、データが増える。」</p>

<p>ということでした。</p>

<p>なるほど。最初はデータは一つしかないが、提出回数の24回の内の何回かはデータ集めのために適当な価格で提出する必要がありました。</p>

<p>データ集めのイメージとしては下の画像の感じです。これらを複数回繰り返すことで機械学習に必要なデータを収集していきました。</p>

<p><figure class="figure-image figure-image-fotolife" title="データ収集のイメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154251.png" alt="f:id:newton800:20201201154251p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>データ収集のイメージ</figcaption></figure></p>

<p>また、適当な値といっても、ランダムな値を入力すると24回の提出を無駄にすることになるので、各商品の（原価×X）円というものを3回ほど行い最初のデータ収集を行いました。</p>

<h2>売り上げ個数予測モデル作成編</h2>

<p>次に売り上げ個数を予測するモデルを作成しました。粗利最大化するのに売り上げ個数を予測する理由は、粗利 = 販売個数×(価格 - 原価)なので、価格を入力として販売個数が出力されるモデルを作成すれば、粗利が最大となる各商品の値段がわかるからです。</p>

<p>ここでは各商品ごとの属性データ（レビューや商品のサイズ、商品説明文の長さなど）と価格を入力することで売り上げ個数を予測するモデル(xgboost)を作成しました。</p>

<p>この時、最適と思われる価格とその価格を提出した際に得られるフィードバックデータでデータ数がどんどん増えるので、予測精度は向上していきました。また、それに伴って粗利も向上していました。</p>

<p>しかし、途中から精度、粗利が横這いで停滞してしまった時がありました。その時は、モデルを見直したり、他の予測モデルと組み合わせてみたりと様々なことをして粗利向上を目指しましたが、効果は得られませんでした。</p>

<p>複数回粗利改善が失敗した時に、さすがに提出データがおかしいのではないか？と思い始め、改めてこれまで提出したデータとそれによって得られていたフィードバックを確認してみました。すると!!!</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154320.png" alt="f:id:newton800:20201201154320p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>同じ価格で提出しているではありませんか！！！
すでに既知の価格で提出することは、その価格での販売個数はすでにわかっているものになるので、無意味な提出となってしまいます。</p>

<p>このようなことを複数回にわたって行ってしまっていたので、精度は上がらず、粗利も停滞してしまいました。
もう少し早めにデータ全体を確認しておけば、防げたミスだったので、データの確認を怠ってはいけないということを学びました。</p>

<h2>ルールベース編</h2>

<p>ここからはルールベースを用いて最適価格を求めていきました。この段階で改めてこれまでフィードバックで得られたデータを元に各商品ごとに価格と粗利をプロットして状況を確認しました。
その結果大きく2種類の粗利曲線に分類できることがわかりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="画像a:粗利最大点が定まってきている"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154407.png" alt="f:id:newton800:20201201154407p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>画像a:粗利最大点が定まってきている</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="画像b:粗利最大点が見つかっていない"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154449.png" alt="f:id:newton800:20201201154449p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>画像b:粗利最大点が見つかっていない</figcaption></figure></p>

<p>上の画像（画像a）では大体粗利最大の位置が定まってきています。下の画像（画像b）では、まだ粗利が最大点は見つかっていないようです。</p>

<p>これら2パターンに場合分けを行い、それぞれにルールを用意することで次の提案価格を探索していきました。</p>

<h3>画像aに対する次の提案価格を探索するルール</h3>

<p>画像aのようになっている商品ではある程度、粗利の最大点がわかってきているので、現在粗利が最大となっている箇所の付近から探索しました。その方法としては、現在粗利が最大となっている価格点から両隣の価格点で間が広い価格との真ん中を新たな価格とするというものです。
言葉で説明しても伝わりづらいので、図示すると以下の感じです。</p>

<p><figure class="figure-image figure-image-fotolife" title="ルールベースで粗利が最大となる価格を求めるロジック"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154534.png" alt="f:id:newton800:20201201154534p:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>ルールベースで粗利が最大となる価格を求めるロジック</figcaption></figure></p>

<p>価格点の差が大きい箇所の方が、探索が不十分であるという仮定のもとで成り立っています。</p>

<h3>画像bに対する次の提案価格を探索するルール</h3>

<p>画像bの場合は、まだ最大点が見えていないので、価格と粗利の関係を二次回帰で曲線を引き、最大点となる価格を探索していきました。</p>

<p>ここで24回の提出が終えたという感じです。
結果は....
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20201201/20201201154621.png" alt="f:id:newton800:20201201154621p:plain" title="" class="hatena-fotolife" itemprop="image"></span></p>

<p>17位でした...
70人参加していたので25%には入ったという感じでしょうか...</p>

<p> 早めに同じ価格で提出して無意味なフィードバックを得ていることに気がついておけば...と後悔が残る結果になってしまいました。</p>

<p>この課題でAI課題は終了です。
AI課題を振り返ってやって良かったと思うことは、毎週サロンに参加したことです。サロンでは、自分一人では思いつかないようなアイデアを誰かが持っていたり、それらを共有し合うことで次のステップが見えてきたりします。見学しているだけでも楽しいので、とりあえず参加して見るのも良いかもしれないです。
また、土曜日の昼過ぎのゴールデンタイムに開催されていたので、用事がある時などは、中抜けしたりもしていました。。。</p>

<p>そのほかにも、実務では挑戦していなかった新しい手法にも挑戦することができました。これまでアンサンブルで予測モデルは作成したことがなかったんですが、作成できるようになったり、Optunaでパラメータ調整に挑戦することができたのは良かったと思います。（Kaggleでも学べますが...）</p>

<p>逆によくなかったと思うこともあります。それは、データの確認とゴールまでの経路を考えるということです。
データの確認に関しては、分析着手する際はかなり入念にやっていたのですが、フィードバックデータが増えてから、データの確認を行わずに進めてしまっていました。そんなこともあり、同じ価格で提出してしまうという凡ミスをしてしまいました。データは定期的に確認しないといけないということを学びました。</p>

<p>もう一つは、ゴールまでの経路を考えるということです。PoCの実施なので右往左往することもありますが、私の場合は無計画すぎたと思います。特に今回は24回しか検証できないので、どこまでデータを集めて、どこまで機械学習を使い、どこからルールベースでやるのかといった大まかなロードマップは作成しておいた方が良いと思いました。これは、少なからず経験も必要だと思うので、あと何回でこの精度まで持っていくという目標を持ちながら、日々の分析業務を行っていきたいです。</p>

<h1>最終課題を解く</h1>

<p>最終課題では、これまでPoC結果を元に、実企業での意思決定の場を想定し、本番実装の意思決定をしてもらえるようなプレゼンテーション資料を作成するというものです。</p>

<p>そしてプレゼン資料を作成し、提出すると次は他の参加者が作成したプレゼン資料を評価するというものでした。他の参加者の資料を見るまでは、自分のプレゼン資料はそれなりにわかりやすいと思っていたのですが、他の参加者のスライドを拝見して自身のスライドの未熟さに気がつきました。</p>

<p>今回参加されている方々は、社会人歴が私よりも長い方が多かったので、実業務をやっている上で身についていることも多いと思います。また、他の参加者の方が作成したプレゼンをレビューすることで現在の私と何が違ったのかを何が足りなかったのかがわかったので良い経験になりました。</p>

<p>具体的に私自身のプレゼンが何が良くて何が足りていなかったのか振り返って見たいと思います。</p>

<p><strong>よかったところ</strong></p>

<p>事実は簡潔にわかりやすくかけていた
今回のプレゼンは、経営者向けのプレゼンなので機械学習の仕組みを解説することよりも全体的にどう動いているのかや、導入することでどれほどの粗利改善効果が見込めるのかといった、これまでの分析・予測から結果がはっきりしているものについては、丁寧にわかりやすく記述できていました。
また、ヒアリングで得た内容や業務フローの変化についても事実としてすでに出ていたものなので、まとめられていました。</p>

<p><strong>足りていなかったところ</strong></p>

<p>事実としてまだ取得されていない情報が一切記載できなかった。粗利改善効果などは計算から求めることができたが、価格設定の工数削減割合や、業務の属人化が解消が期待できるなど、分析・予測から導き出せない効果が記載できなかった。工数の削減目安などは、業務を通して得られるものなのか、それともなんらかのロジックがあるのかといった解説がなかったのでそれらをどのように算出したのかは気になりました。</p>

<p>次に足りていなかったことは、導入を検討する場合の予算の話です。これらもどのようにして計算しているのかは謎ですが、初期費用として？？？円、継続運用するのにかかる費用（サポート代）として？？？円などのような記載が足りていませんでした。確かに意思決定する場合は、予算の話があった方が導入判断は容易になるだろうと思います。</p>

<p>また、予算に伴い今後プロジェクトを進めていくスケジュールも記載できていませんでした。ソフトがいつぐらいで完成して、そこから運用に定着するまでにどれくらいの期間が必要なのかも意思決定する際にはあった方が良いなと気がつきました。</p>

<p>上記3つのことが足りていなかったことです。これら全てに共通して言えることは、分析・予測から求められない見込みが記載できていなかったということです。何を持ってその見込み計算を行っているのかはわかりませんが、見込みが足りていないということがわかったので、今後資料作成の際には、先輩方に頼りながら見込みの記載方法も勉強していきます。</p>

<h1>第一タームを振り返る</h1>

<p>第一タームを振り返り、「どのようにして機械学習をプロダクトに導入したら良いのか」が解決できたのか。
機械学習モデルの作成する前のフロー（要件定義・PoC計画）とモデル作成後のフロー（スライド作成）では、フィードバックや他の参加者の方の方法を参考にすることで、自分自身に何が足りていなかったのかを学ぶことができました。ただ現在は、足りていないことに気がついた段階で、実践はできていない状況です。これらの足りていなかった部分を第二タームや業務で実践することで、身につけていきたいと考えています。</p>

<p>具体的な行動としては、
1. モデル作成前に目標数値を定める
1. PoC計画を緻密に立てる（あくまで試行錯誤なので柔軟性は忘れてはいけない）
1. プレゼン資料には、事実だけでなく、見込みも記載する</p>

<p>明日の <a href="https://adventar.org/calendars/5560">Feedforce Advent Calendar 2020</a> は、いくみんさんが「9月からダラダラと書き終わらなかったやつを納めます...」ということなので、楽しみですね。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[題字ペタペタができるまで]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2020/09/14/213000</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2020/09/14/213000"/>
        <updated>2020-09-14T12:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>新聞の題字が一覧できるサイト・<a href="https://daipeta.com">題字ペタペタ</a>を、<a href="https://twitter.com/nekonopen">ねこぺん</a>と作って公開しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdaipeta.com" title="題字ペタペタ - 日本の新聞の題字あつめました" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://daipeta.com">daipeta.com</a></cite></p>

<p>こんな感じで、いろいろな新聞の題字を掲載しています。絞り込み検索もできます。</p>

<p><figure class="figure-image figure-image-fotolife" title="題字ペタペタのトップページ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20200914/20200914200511.png" alt="f:id:mashabow:20200914200511p:plain" title="f:id:mashabow:20200914200511p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>題字ペタペタのトップページ</figcaption></figure></p>

<p>この題字ペタペタができるまでの話を、社内勉強会で発表しました。スライドを置いておきますので、どうぞご覧ください。</p>

<p><iframe id="talk_frame_665734" src="//speakerdeck.com/player/3d8da29756b4456e89023932c5a61853" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe> <cite class="hatena-citation"><a href="https://speakerdeck.com/mashabow/fftt-number-409">speakerdeck.com</a></cite></p>

<p>技術的には、<a href="https://www.contentful.com/">Contentful</a> に入れたデータをもとに <a href="https://www.gatsbyjs.com/">Gatsby</a> でページを生成し、<a href="https://www.netlify.com/">Netlify</a> で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DB%A5%B9%A5%C6%A5%A3%A5%F3%A5%B0">ホスティング</a>しています。ここ最近よく見かける定番の構成ですね。</p>

<p>また、Web フォントサービス <a href="https://www.realtype.jp/">REALTYPE</a> を利用して、<a href="https://www.iwatafont.co.jp/font/ud_news.html">イワタ UD 新聞明朝 や イワタ UD 新聞ゴシック</a>で組んでいます。簡単に使えるだろうと甘く見ていたら、これになかなか苦労したんですが、それについてはまた別の記事で。</p>

<p>デザインについては、主にねこぺんが担当してくれました。素人ながらかなり頑張って、いいサイトができあがったんじゃないかと思います。慣れない<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%D6%A5%EC%A5%C3%A5%C8">タブレット</a>と格闘しながら、かわいいイラストも描いてくれました。</p>

<p>ひとまず完成はしましたが、これからも少しずつ拡充していきますので、題字ペタペタをどうぞごひいきに。</p>

<h3>参考書籍</h3>

<ul>
<li><a href="https://booth.pm/ja/items/1312387">GatsbyJS Guidebook - mottox2（つのぶえ出版） - BOOTH</a>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Gatsby">Gatsby</a> や Contentful に触り始めたころに参考にしました。入門者向け。</li>
</ul>
</li>
<li><a href="https://amzn.to/3bWrocJ">UIデザインの教科書［新版］マルチデバイス時代のインターフェース設計</a>

<ul>
<li>Web デザインの基礎を押さえるためにふたりで読みました。実例の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A1%BC%A5%F3%A5%B7%A5%E7%A5%C3%A5%C8">スクリーンショット</a>が多くてわかりやすい内容です。</li>
</ul>
</li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[いろんな本でつながった「認知（cognition）のはなし」]]></title>
        <id>https://developer.feedforce.jp/entry/2020/08/28/183637</id>
        <link href="https://developer.feedforce.jp/entry/2020/08/28/183637"/>
        <updated>2020-08-28T09:36:37.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、入社７年目の今年は自分が<a href="https://jp.finalfantasyxiv.com/">光の戦士</a>になってから７年目にもなります、<a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。</p>

<p>社内の技術勉強会（FFTT）での発表内容をざっとお送りします。今回は、自分の中ではよく考えることがあったけどなかなかアウトプット出来なかった「認知」に関する発表をしました。</p>

<p>ちなみにフルリモートが選択可能になった弊社では、週次で続けている FFTT も Zoom でのオンライン開催をしています。</p>

<h2>スライド</h2>

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRUxUQCHhkS_J1I52u2rbELFgenLcGaLw5tHjfLUR_OheLf91wNklJq9dpjov0r8znJELfQ9GMOePu0/embed?start=false&loop=false&delayms=3000" frameborder="0" width="700" height="422" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p><a href="https://speakerdeck.com/tmd45/28-fftt-number-407">speakerdeck.com</a></p>

<h2>内容について</h2>

<p>もともと心理学（というかメンタルヘルス）に興味があって知っていた「認知」と、組織づくりやマネジメント、コーチングといった文脈で読んだ本、それから心理的安全性といった話題が自分のなかで噛み合って面白かったので、つらつらと紹介してみました。</p>

<p>『エンジニアリング組織論への招待』という本は以前にも別のエンジニアが FFTT の発表で引用していました（2018年）。いまでも良い書籍だと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F05%2F21%2F150000" title="『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>スライドの中で紹介した書籍はこちら。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/513kY6L-3yL._SL160_.jpg" class="hatena-asin-detail-image" alt="エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング" title="エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/hatena-blog-22/">エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B9%AD%CC%DA%20%C2%E7%C3%CF" class="keyword">広木 大地</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/22</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Y5FF3M4/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41NO8xvWQoL._SL160_.jpg" class="hatena-asin-detail-image" alt="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)" title="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Y5FF3M4/hatena-blog-22/">他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B1%A7%C5%C4%C0%EE%B8%B5%B0%EC" class="keyword">宇田川元一</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/10/02</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B01BDFHKTE/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41FLH0uViXL._SL160_.jpg" class="hatena-asin-detail-image" alt="「やさしさ」という技術――賢い利己主義者になるための7講" title="「やさしさ」という技術――賢い利己主義者になるための7講"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B01BDFHKTE/hatena-blog-22/">「やさしさ」という技術――賢い利己主義者になるための7講</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A5%D5%A5%A1%A5%F3%A1%A6%A5%A2%A5%A4%A5%F3%A5%DB%A5%EB%A5%F3" class="keyword">ステファン・アインホルン</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/02/04</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>認知行動療法に関する書籍と、おすすめ漫画については省きます😇</p>

<p>どれもおすすめですが、やはり『エンジニアリング組織論への招待』は網羅性と読みやすさがあって一番読んでいただきたい本です。</p>

<p>またこの発表ネタを決めたきっかけになり、スライド中にも記載した２つの記事もご紹介したいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fnabeharuj%2Fn%2Fn26cb34a0d2fa" title="心理的安全性は何であって何でないのか｜人事のなべはる｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tinect.jp%2F%3Fp%3D66220" title="世界一のコーチですら「素直じゃない人は放っておけばいい」と思っていた。" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>発表のなかで「コーチャブルなひととは、認知のリフレーミングができるひとである」という話をしました。</p>

<p>私もそろそろ年齢的には<ruby>中堅<rt>おじさん</rt></ruby>ですが、いつまでもそのように、人の間で学びながら成長できる人間でありたいものです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS Safari を Mac Safari でデバッグするときの注意点]]></title>
        <id>https://developer.feedforce.jp/entry/2020/04/20/201356</id>
        <link href="https://developer.feedforce.jp/entry/2020/04/20/201356"/>
        <updated>2020-04-20T11:13:56.000Z</updated>
        <summary type="html"><![CDATA[<p>ごきげんようございます、<a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。</p>

<p>業務上の必要があって、タイトルのとおり iOS 端末（今回は iPhone XR）の Safari でのデバッグのため、Mac につないで Mac Safari の Web インスペクタを使いました。</p>

<p>このやり方については一般的によく情報が公開されてるので、ここでは割愛します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20200420/20200420201249.png" alt="f:id:tmd45:20200420201249p:plain" title="f:id:tmd45:20200420201249p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3>今回ハマったことと解決法</h3>

<p>iPhone と Mac を USB ケーブルで繋ぎ、iPhone 側で「この Mac を信頼する」許可を行いました。</p>

<p>が、<b>その途端 Mac Safari の開発メニューから、繋げた iPhone デバイスが見つからなくなってしまいました</b>。
どこいったの私の iPhone ちゃん... Mac の Finder にはいるのに… 🤔</p>

<p>結果的に、<b>iPhone 側の Wifi を OFF に</b>したらデバイス表示されるようになりました。</p>

<p>ちなみにこの解にたどり着くまでに、iOS を最新にしたり、macOS を最新にしたり、双方を再起動したりもしています。最新バージョン同士になるように気をつけるのは基本でしょうね…（古いバージョンで確認したい場合は難儀ですが…）</p>

<p>またこの方法、今回の iPhone が Cellular 対応であったため事なきを得ていますが、Cellular 対応でない場合は Safari からインターネットにアクセスできなくなるので、あまり有効な方法とは思えません…</p>

<p>これに関する公式あるいは公式に近しいソース情報を見つけられていません。
なにか情報をお持ちの方がいたらぜひ <a href="https://twitter.com/tmd45">@tmd45</a> に教えてください…</p>

<p>普段から iOS 開発に精通しているわけではないので、超基本的なことだったらすみません！！！ 🙈</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.16.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/03/29/220805</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/03/29/220805"/>
        <updated>2020-03-29T13:08:05.000Z</updated>
        <summary type="html"><![CDATA[<p>前回のリリースから 1 週間ほどですが、今日予定していたライブが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%ED%A5%CA%A5%A6%A5%A4%A5%EB%A5%B9">コロナウイルス</a>の影響で中止になったので暇を持て余しました 😷</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Freleases%2Ftag%2Fv0.16.0" title="Release v0.16.0 · ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.16.0">github.com</a></cite></p>

<h2>v0.16.0 の新機能</h2>

<p>2 つありますが、どちらも若干の Breaking Change です。
とはいえ普通に使っていたら全く影響を受けないと思います。</p>

<h3><a href="https://github.com/ryz310/my_api_client/pull/225([@ryz310](https://github.com/ryz310">新機能 1. エラーハンドラがエラーを検出した際は常に例外を raise するようになりました</a></h3>

<p><code>my_api_client</code> では <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> からのレスポンス内容に応じて例外を発生させる <code>error_handling</code> というメソッドが利用できます。</p>

<p>以下に <code>error_handling</code> を利用した例を示します。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">ApplicationApiClient</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">10</span> }

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyErrorClass</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">30</span> }, <span class="synConstant">with</span>: <span class="synConstant">:my_error_handling</span>

  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">40</span> } <span class="synStatement">do</span> |<span class="synIdentifier">params</span>, <span class="synIdentifier">logger</span>|
    <span class="synComment"># Do something.</span>
  <span class="synStatement">end</span>

  <span class="synComment"># GET error/:code</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">request</span>
    get <span class="synSpecial">'</span><span class="synConstant">path/to/resouce</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>

  <span class="synStatement">private</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">my_error_handling</span>(params, logger)
    <span class="synComment"># Do something.</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>この例の場合、 <code>ExampleApiClient#request</code> を実行すると <code>GET https://example.com/path/to/resouce</code> に対してリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが実行され、レスポンスボディが <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> 形式だった場合、JSONPath <code>$.error.code</code> の値に応じて以下の処理を実行します。</p>

<ul>
<li><code>10</code> だった場合 <code>MyApiClient::Error</code> を発生させる</li>
<li><code>20</code> だった場合 <code>MyErrorClass</code> を発生させる</li>
<li><code>30</code> だった場合 <code>#my_error_handling</code> を実行する <strong>（例外は発生しない）</strong></li>
<li><code>40</code> だった場合 <code>do ~ end</code> を実行する <strong>（例外は発生しない）</strong></li>
</ul>


<p><code>MyApiClient::Error</code> は <code>raise</code> オプションで例外クラスを指定しなかった場合のデフォルトの例外クラスです。</p>

<p>この時、従来は <code>30</code> と <code>40</code> のように <code>with</code> や <code>block</code> を利用した場合は、処理の中で明示的に <code>raise</code> を実行しない限り、例外は発生しませんでした。
エラー検出時に例外を発生させるかどうかは、 <code>my_api_client</code> の利用者に委ねられていた形になります。</p>

<p>しかしながら、ここに自由度を持たせるよりも、 <strong>エラー検出時には必ず <code>raise</code> させて <code>rescue</code> で異常時の処理を記述する</strong> 、という方式に統一した方が <code>my_api_client</code> の利用方法としても理解しやすく、特に困るケースも想定されなかったことから、以下のように変更することにしました。</p>

<ul>
<li><code>10</code> だった場合 <code>MyApiClient::Error</code> を発生させる <strong>（変更なし）</strong></li>
<li><code>20</code> だった場合 <code>MyErrorClass</code> を発生させる <strong>（変更なし）</strong></li>
<li><code>30</code> だった場合 <code>#my_error_handling</code> を実行し、 <strong><code>MyApiClient::Error</code> を発生させる</strong></li>
<li><code>40</code> だった場合 <code>do ~ end</code> を実行し、 <strong><code>MyApiClient::Error</code> を発生させる</strong></li>
</ul>


<p>今後はエラー検出時には常に何らかの例外が <code>raise</code> されるようになります。
上記の例では <code>MyApiClient::Error</code> が発生しますが、 <code>with</code> や <code>block</code> と同時に <code>raise</code> を指定すれば、任意の例外クラスが発生するようになります。</p>

<p>これにより、 <code>with</code> や <code>block</code> は例外の前処理という位置付けになります。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>としてはログ出力や slack への通知などが考えられます。</p>

<h3><a href="https://github.com/ryz310/my_api_client/pull/226">新機能 2. 標準のエラーハンドラが用意されました</a></h3>

<p><code>my_api_client</code> では <a href="https://github.com/ryz310/my_api_client/blob/e6e4d2265fc834925d45e023c7d43590f98b7171/README.jp.md#installation">generator 機能</a> が用意されており、 <code>$ rails g api_client path/to/resource get:path/to/resource</code> を実行すると以下のファイルが作成されます。</p>

<pre class="code" data-lang="" data-unlink>create  app/api_clients/application_api_client.rb
create  app/api_clients/path/to/resource_api_client.rb
invoke  rspec
create    spec/api_clients/path/to/resource_api_client_spec.rb` </pre>


<p>この時、 <code>application_api_client.rb</code> に標準のエラーハンドラの例がいくつか記載されるのですが、例というより必須のエラーハンドラだよね、ということで、 <code>my_api_client</code> の内部で標準実装するようにしました。
これにより、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a> 4xx と 5xx のレスポンスに対しては標準で例外が発生するようなります。また、ネットワーク系のエラーに対しても標準で <code>300 msec</code> 間隔を空けて 3 回リトライが試行されるようになります。（リトライ処理も従来は明示的な定義が必須でした）</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 従来の `application_api_client.rb` に出力されていた標準のエラーハンドラ例</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">500</span>..<span class="synConstant">599</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ServerError</span>

<span class="synComment"># 従来の `application_api_client.rb` に出力されていた標準のリトライ処理例</span>
retry_on <span class="synType">MyApiClient</span>::<span class="synType">NetworkError</span>, <span class="synConstant">wait</span>: <span class="synConstant">5</span>.seconds, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
</pre>


<p>標準で定義されているエラーハンドラは <a href="https://github.com/ryz310/my_api_client/blob/e6e4d2265fc834925d45e023c7d43590f98b7171/lib/my_api_client/default_error_handlers.rb">my_api_client/default_error_handlers.rb</a> から参照できます。</p>

<p><code>error_handling</code> は後から定義した物が優先されますので、例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a> <code>400</code> に対しては独自の例外クラスを発生させるようにしたい場合、継承先のクラスで <code>error_handling status_code: 400, raise: MyErrorClass</code> のように定義すれば、 <code>MyErrorClass</code> が例外として発生するようになります。</p>

<h2>所感</h2>

<p>社内のプロダクト用に作った gem ですが、少しずつ自分以外のエンジニアも利用してくれるようになってきました。
一方で、自由度が高過ぎると熟知していないと使えない機能が増えてしまう点を課題感として感じるようになってきました。</p>

<p>なるべく自由度の高い gem を意識しつつ、標準の状態でも高度な機能の恩恵を受けられる状態を目指していきたいと思います。</p>

<p>恐らく次の新機能は <code>async/await</code> っぽい機能、または <code>sawyer</code> gem の依存からの脱却なると思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.15.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/03/21/163849</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/03/21/163849"/>
        <updated>2020-03-21T07:38:49.000Z</updated>
        <summary type="html"><![CDATA[<p>その前に <code>v0.14.0</code> もリリースしているのですが、こちらは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0">リファクタリング</a>と Integration Test の実装だけで新機能はありませんでした。
差分が <code>+2,799 -1,246</code> もあるので中身は結構書き換わっています。</p>

<p><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.14.0">Release v0.14.0 &middot; ryz310/my_api_client &middot; GitHub</a></p>

<p>Integration Test では <a href="https://rubyonjets.com/">Ruby on Jets</a> を使って <a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a> Lambda でサーバーを建てて、CI でのテストで <code>my_api_client</code> を使って実際に HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが成功することを確認しているので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B0%A5%EC">デグレ</a>の心配が随分と緩和されました 😌</p>

<h2>新機能: Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のサポート</h2>

<p>ここからは <code>v0.15.0</code> の話になります。</p>

<p><a href="https://github.com/ryz310/my_api_client/releases/tag/v0.15.0">Release v0.15.0 &middot; ryz310/my_api_client &middot; GitHub</a></p>

<p><code>v0.15.0</code> のメイン機能が Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のサポートになります。<a href="https://jsonapi.org/">JSON:API</a> というしっかりとした仕様もあるようですが、 <code>my_api_client</code> ではそこまで厳密な仕様に則っている訳ではなく、レスポンスに含まれる URL を認識して enumerable に HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行する、というざっくりした機能になります。
レスポンスヘッダの <code>Link</code> などで次のページの URL を返すケースもあるようですが、そちらは現時点では未対応です 🙏</p>

<p>Pagination <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> という単語は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a> REST Framework の Pagination 機能の説明で出てきます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.django-rest-framework.org%2Fapi-guide%2Fpagination%2F" title="Pagination - Django REST framework" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.django-rest-framework.org/api-guide/pagination/">www.django-rest-framework.org</a></cite></p>

<p>要するに一度のリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで結果を全件取得させるのではなく、一定の件数を返却し、続きを取得できる Link を一緒に返却する <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のことですね。</p>

<p><strong>Request:</strong></p>

<pre class="code" data-lang="" data-unlink>GET https://api.example.org/accounts/?page=4</pre>


<p><strong>Response:</strong></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synError">HTTP</span> 200 <span class="synError">OK</span>
<span class="synSpecial">{</span>
    &quot;<span class="synStatement">count</span>&quot;: 1023
    &quot;<span class="synStatement">next</span>&quot;: &quot;<span class="synConstant">https://api.example.org/accounts/?page=5</span>&quot;,
    &quot;<span class="synStatement">previous</span>&quot;: &quot;<span class="synConstant">https://api.example.org/accounts/?page=3</span>&quot;,
    &quot;<span class="synStatement">results</span>&quot;: <span class="synSpecial">[</span>
       …
    <span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<h3>使い方</h3>

<p><code>my_api_client</code> での使い方は以下のようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">MyPaginationApiClient</span> &lt; <span class="synType">ApplicationApiClient</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com/v1</span><span class="synSpecial">'</span>

  <span class="synComment"># GET pagination?page=1</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">pagination</span>
    pageable_get <span class="synSpecial">'</span><span class="synConstant">pagination</span><span class="synSpecial">'</span>, <span class="synConstant">paging</span>: <span class="synSpecial">'</span><span class="synConstant">$.links.next</span><span class="synSpecial">'</span>, <span class="synConstant">headers</span>: headers, <span class="synConstant">query</span>: { <span class="synConstant">page</span>: <span class="synConstant">1</span> }
  <span class="synPreProc">end</span>

  <span class="synStatement">private</span>

  <span class="synPreProc">def</span> <span class="synIdentifier">headers</span>
    { <span class="synSpecial">'</span><span class="synConstant">Content-Type</span><span class="synSpecial">'</span>: <span class="synSpecial">'</span><span class="synConstant">application/json;charset=UTF-8</span><span class="synSpecial">'</span> }
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>通常であれば <code>#get</code> を使って HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行させるのですが、ここでは <code>#pageable_get</code> というメソッドを使用しています。 <code>#pageable_get</code> だと長いので <code>#pget</code> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス</a>も用意しています。
また、 <code>paging</code> というキーワード引数も新たに出てきました。 <code>paging</code> ではレスポンスのどの部分に次のページの URL が含まれるかを JSONPath expression で指定します。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgoessner.net%2Farticles%2FJsonPath%2Findex.html%23e2" title="JSONPath - XPath for JSON" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://goessner.net/articles/JsonPath/index.html#e2">goessner.net</a></cite></p>

<p>以下のような <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> であれば、 <code>$.links.next</code> という JSONPath expression は <code>"https://example.com/pagination?page=3"</code> を取得します。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">links</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">next</span>&quot;: &quot;<span class="synConstant">https://example.com/pagination?page=3</span>&quot;,
    &quot;<span class="synStatement">previous</span>&quot;: &quot;<span class="synConstant">https://example.com/pagination?page=1</span>&quot;<span class="synError">,</span>
<span class="synError">  }</span>,
  &quot;<span class="synStatement">page</span>&quot;: <span class="synConstant">2</span>
}
</pre>


<p>作成した <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client は以下のように使用できます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>api_clinet = <span class="synType">MyPaginationApiClient</span>.new
api_clinet.pagination.each <span class="synStatement">do</span> |<span class="synIdentifier">response</span>|
  <span class="synComment"># Do something.</span>
<span class="synStatement">end</span>

p = api_clinet.pagination
p.next <span class="synComment"># =&gt; 1st page result</span>
p.next <span class="synComment"># =&gt; 2nd page result</span>
p.next <span class="synComment"># =&gt; 3rd page result</span>
</pre>


<h3>結果は <code>Enumerator::Lazy</code> で返却される</h3>

<p><code>#pageable_get</code> は <code>Enumerator::Lazy</code> を返却するので、 <code>Enumerable</code> で定義されているメソッドは一通り利用可能です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.ruby-lang.org%2Fja%2Flatest%2Fclass%2FEnumerator%3D3a%3D3aLazy.html" title="class Enumerator::Lazy (Ruby 2.7.0 リファレンスマニュアル)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.ruby-lang.org/ja/latest/class/Enumerator=3a=3aLazy.html">docs.ruby-lang.org</a></cite></p>

<p><code>Enumerator</code> で返してしまうと <code>#take</code> で 100 ページ目まで結果を取得するような処理を記述したときに、</p>

<ol>
<li>100 ページ分の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を <code>#each</code> で回す</li>
</ol>


<p>という動きになり、 100 回分の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トが完了するまで次の処理に移ることができません。</p>

<p><code>Enumerator::Lazy</code> であれば、</p>

<ol>
<li>1 ページ目の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を処理する</li>
<li>2ページ目の HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トを実行</li>
<li>結果を処理する</li>
<li>...</li>
</ol>


<p>という動きになってくれます。便利ですね ✨</p>

<p><code>Enumerator</code> と <code>Enumerator::Lazy</code> の違いは以下の記事が参考になると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgam0022%2Fitems%2F8acfc0c674b96060c03f" title="EnumeratorとEnumerator::Lazyの違い - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/gam0022/items/8acfc0c674b96060c03f">qiita.com</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[駆け込みで Chrome 80 の SameSite=None; Secure の対応をやった🍪]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/02/20/235548</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/02/20/235548"/>
        <updated>2020-02-20T14:55:48.000Z</updated>
        <summary type="html"><![CDATA[<p>ご存知の方も多いかと思いますが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> 80 から 3rd Party <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の取り扱いが厳しくなり、特に指定がないと外部サイトの <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は <strong>POST・iframe・XHR 等のリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト</strong>  で送られなくなります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevelopers-jp.googleblog.com%2F2019%2F11%2Fcookie-samesitenone-secure.html" title="新しい Cookie 設定 SameSite=None; Secure の準備を始めましょう" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developers-jp.googleblog.com/2019/11/cookie-samesitenone-secure.html">developers-jp.googleblog.com</a></cite></p>

<blockquote><p>2 月の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> 80 以降、SameSite 値が宣言されていない <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は SameSite=Lax として扱われます。外部アクセスは、SameSite=None; Secure 設定のある <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> のみ可能になります。ただし、これらが安全な接続からアクセスされることが条件です。</p></blockquote>

<p>とはいえ完全に無効になるわけではなく、 <code>SameSite</code> という属性が宣言されていない <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> は <code>Lax</code> という区分がデフォルトで適用されるという物なので、サーバーから返す <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> に対して明示的に <code>SameSite</code> を <code>None</code> に指定して、かつ <code>Secure</code> という属性を付与すれば、従来どおり <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> が送信されます。</p>

<p>去年の秋くらいにもこの <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の対応が必要かどうか、会社で調査していたんですが、その時点では影響を受ける箇所が無くて、特に何も対応せずにスルーしていたんですが、現在開発してる新機能が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BF%A4%DE%A4%BF%A4%DE%A4%B3">たまたまこ</a>の影響を受ける機能だったため、急遽対応することになりました。</p>

<p>結構厳しいな、と思ったのは、これが原因で動かないことに気付くのが結構難しいんですよね。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%B0%A5%EB%A5%B5%A5%A4%A5%F3%A5%AA%A5%F3">シングルサインオン</a>みたいな機能を作ってると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>が異なるので 3rd Party <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> の扱いになります。
そして <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> に入っているはずの Session ID が送られてこないので、サーバー側で Session が見つからずにエラー。</p>

<p>自分の手元の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> は 79 で、まだ上記の制限が入っていなかったんですが、以前影響範囲を調査した時に <code>chrome://flags</code> から有効にするフラグを ON にしていたので、他のエンジニアの環境では動作するけど、自分だけ動かないということになり、もしかして、と思って気付いた感じです。</p>

<p>リリース後に気付いてたらヤバかったですね。。</p>

<p>で、こういう問題は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> みたいな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>で対応してくれよって気持ちになるんですが、ちゃんと対応する PR は作られていて、すでに merge もされています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fpull%2F28297" title="Add SameSite to Cookies by cfabianski · Pull Request #28297 · rails/rails" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/rails/rails/pull/28297">github.com</a></cite></p>

<p>ですが、 2020/2/20 現在、これを反映した <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> はまだリリースされていないみたいですね。（最新が 2019/12/19 にリリースされた <code>6.0.2.1</code> ）
また、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 5.2 に反映されるかどうかは微妙な感じになっています。</p>

<p><a href="https://github.com/rails/rails/pull/28297#issuecomment-577414543">https://github.com/rails/rails/pull/28297#issuecomment-577414543</a></p>

<blockquote><p>We will backport to 6.0 as a bug fix, but I don't know this warrants a backport to a security only release like 5.2. <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.0 was released 6 months ago, and upgrading applications could be high, high priority if that problem is so important.</p>

<p>バグ修正として6.0にバックポートしますが、これが5.2のようなセキュリティのみのリリースへのバックポートを保証するかどうかわかりません。 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 6.0は6か月前にリリースされました。その問題が非常に重要な場合、アプリケーションのアップグレードは優先度が高くなる可能性があります。</p></blockquote>

<p>自分の開発環境は恥ずかしながら <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> 4.2 （今年中にアップデートします！）なので、当然反映されるはずもないので、自前で Rack を作成して対応しました。
参考まで以下のようなコードになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># config/initializers/custom_rack_middleware.rb</span>

<span class="synComment"># </span><span class="synTodo">NOTE</span><span class="synComment">: Rails 6.0.x であれば以下の処理は不要となる。</span>
<span class="synType">Rails</span>.application.config.middleware.insert_before(
  <span class="synType">ActionDispatch</span>::<span class="synType">Cookies</span>,
  <span class="synType">CustomRackMiddleware</span>::<span class="synType">SetSameSiteOptionOnCookie</span>
)
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># lib/custom_rack_middleware/set_same_site_option_on_cookie.rb</span>

<span class="synComment"># </span><span class="synTodo">TODO</span><span class="synComment">: Rails 6.0.x にアップデートしたら削除する</span>
<span class="synPreProc">module</span> <span class="synType">CustomRackMiddleware</span>
  <span class="synPreProc">class</span> <span class="synType">SetSameSiteOptionOnCookie</span>
    <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(app)
      <span class="synIdentifier">@app</span> = app
    <span class="synPreProc">end</span>

    <span class="synPreProc">def</span> <span class="synIdentifier">call</span>(env)
      status, headers, body = <span class="synIdentifier">@app</span>.call(env)

      cookies = headers[<span class="synSpecial">'</span><span class="synConstant">Set-Cookie</span><span class="synSpecial">'</span>]
      <span class="synStatement">if</span> cookies.present?
        processed_cookies = cookies.split(<span class="synSpecial">&quot;\n&quot;</span>).map <span class="synStatement">do</span> |<span class="synIdentifier">cookie</span>|
          <span class="synSpecial">&quot;#{</span>cookie<span class="synSpecial">}</span><span class="synConstant">; SameSite=None; Secure</span><span class="synSpecial">&quot;</span>
        <span class="synStatement">end</span>
        headers[<span class="synSpecial">'</span><span class="synConstant">Set-Cookie</span><span class="synSpecial">'</span>] = processed_cookies.join(<span class="synSpecial">&quot;\n&quot;</span>)
      <span class="synStatement">end</span>

      [status, headers, body]
    <span class="synPreProc">end</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p><strong>2020/02/22 追記</strong></p>

<p>ローカルの開発環境など HTTP リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トをする環境だと、 <code>SameSite=None</code> の設定を入れると <a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie</a> が送られなくなるようです。</p>

<p>ローカルでは上述の Rack を読み込ませないようにするなどの工夫が必要だと思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.13.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/01/21/230012</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/01/21/230012"/>
        <updated>2020-01-21T14:00:12.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://ryz310.hateblo.jp/entry/2020/01/19/152826">つい先日、v0.12.0 をリリースしたばかり</a> ですが、 v0.13.0 をリリースしましたので、含まれる PR の内容について解説していきます。 より詳しい使い方は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">README.jp.md</a> をご参照ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Fmy_api_client%2Fblob%2Fmaster%2FCHANGELOG.md%23v0130-jan-21-2020" title="ryz310/my_api_client" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/my_api_client/blob/master/CHANGELOG.md#v0130-jan-21-2020">github.com</a></cite></p>

<h2><a href="https://github.com/ryz310/my_api_client/pull/180">#180</a> Stub response on raising error (<a href="https://github.com/ryz310">@ryz310</a>)</h2>

<p>今回はこの PR のみの更新です。
仕事で spec 書いてる最中に「<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで例外が発生した際にレスポンス内容を保存する処理のスタブ化できないじゃん」ってなって作りました。</p>

<p><code>my_api_client</code> では作成した <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client クラスを <code>stub_api_client</code> または <code>stub_api_client_all</code> というメソッドでスタブ化できます。
例えば以下のような <code>ExampleApiClient</code> というクラスを定義した時:</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
  error_handling <span class="synConstant">status_code</span>: <span class="synConstant">500</span>..<span class="synConstant">599</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ServerError</span>

  <span class="synComment"># GET https://example.com/path/to/resouce</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">request</span>
     get <span class="synSpecial">'</span><span class="synConstant">path/to/resouce</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p><code>stub_api_client_all</code> を実行すると <code>ExampleApiClient</code> の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>が全てスタブ化されるようになります。
以下の例だと、 <code>#request</code> を実行した時、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> から <code>{ "message": "Hello world!" }</code> という <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> が返ってきた時と同じ振る舞いをするようになります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { <span class="synConstant">response</span>: { <span class="synConstant">message</span>: <span class="synSpecial">'</span><span class="synConstant">Hello world!</span><span class="synSpecial">'</span> } }
)

api_client = <span class="synType">ExampleApiClient</span>.new
response = api_client.request
response.message <span class="synComment"># =&gt; 'Hello world!'</span>
</pre>


<p>で、 <code>error_handling</code> で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a>が <code>400..499</code> の時は <code>MyApiClient::ClientError</code> という例外が発生する、という定義になっているのですが、このような例外が発生した時のテストを書くために、 <code>raise</code> のスタブ化も出来るようになっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span> }
)

<span class="synStatement">begin</span>
  api_client = <span class="synType">ExampleApiClient</span>.new
  response = api_client.request
<span class="synStatement">rescue</span> <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
  puts <span class="synSpecial">'</span><span class="synConstant">4xx error!</span><span class="synSpecial">'</span>
<span class="synStatement">end</span>
</pre>


<p>大抵の場合、これらのスタブ化ができれば問題ないのですが、例外発生時のレスポンスを見たい、というケースも無くはないかと思います。
仕様として、例外<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>の <code>#params</code> や <code>#matadata</code> というメソッドからリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トパラメータとレスポンスパラメータを参照できるようになっています。</p>

<p>従来のスタブ化メソッドでも一応指定できなくはなかったんですが、結構手間だったので <code>raise</code> オプションの指定を以下のように拡張しました。
<code>raise</code> と一緒に指定した <code>response</code> が <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のレスポンスとして返されて、それが例外として処理された、というスタブ化になります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(
  <span class="synType">ExampleApiClient</span>,
  <span class="synConstant">request</span>: { 
    <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>,
    <span class="synConstant">response</span>: { <span class="synConstant">error_code</span>: <span class="synConstant">10</span> }
  }
)

<span class="synStatement">begin</span>
  api_client = <span class="synType">ExampleApiClient</span>.new
  response = api_client.request
<span class="synStatement">rescue</span> <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span> =&gt; e
  e.params.response.data.error_code <span class="synComment">#=&gt; 10</span>
<span class="synStatement">end</span>
</pre>


<p><code>my_api_client</code> は内部で <a href="https://github.com/lostisland/sawyer">Sawyer</a> を使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flostisland%2Fsawyer" title="lostisland/sawyer" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/lostisland/sawyer">github.com</a></cite></p>

<p><code>e.params.response</code> が <code>Sawyer::Response</code> をそのまま返しているので、<code>Sawyer::Response#data</code> からレスポンスボディを参照できます。
<code>Sawyer::Response#data</code> では、レスポンスの <a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a> を <a href="https://docs.ruby-lang.org/ja/latest/class/OpenStruct.html">OpenStruct)</a> のようにメソッドアクセスできるように変換してくれます。</p>

<p>ただし、 <code>V1.0.0</code> で <code>Sawyer</code> の依存を無くしたいと考えているので、いずれ <code>#data</code> を挟む書き方は変更になるかもしれません。
一応こういう使い方もできますよ、という新機能でした。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[my_api_client v0.12.0 をリリースしました🚀]]></title>
        <id>https://ryz310.hateblo.jp/entry/2020/01/19/152826</id>
        <link href="https://ryz310.hateblo.jp/entry/2020/01/19/152826"/>
        <updated>2020-01-19T06:28:26.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/ryz310/my_api_client">my_api_client v0.12.0</a> に含まれる PR の内容について解説していきます。
より詳しい使い方は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">README.jp.md</a> をご参照ください。</p>

<h2><a href="https://github.com/ryz310/my_api_client/pull/173">#173</a> Avoid sleep on testing</h2>

<p>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client では以下のように書くと、任意の例外を補足して自動的に <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トをリトライしてくれます。
ネットワーク系のエラーとか、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Rate Limit に引っかかった時とかに便利なやつですね。</p>

<p><a href="https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on">ActiveJob の <code>retry_on</code></a> とほぼ同じ使い方になっています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>

  <span class="synComment"># GET https://example.com/users</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">get_users</span>
    get <span class="synSpecial">'</span><span class="synConstant">users</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>それは良いんですが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> 上で <code>wait</code> が効いてしまっていたので、上記のコードだとリトライ3回分 wait するので、合計 3 分も待たされてしまっていました。
一応 <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> で <code>sleep</code> を stub するとかやれば回避できますが、そもそもテストでは wait を無視して欲しいですよね。</p>

<p>my_<a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api</a>_client では <code>be_handled_as_an_error</code> という <a class="keyword" href="http://d.hatena.ne.jp/keyword/rspec">rspec</a> の matcher を用意しているのですが、今回の対応で、この macher を経由してリトライが実行された場合は wait を無視するようになりました。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synType">RSpec</span>.describe <span class="synType">ExampleApiClient</span>, <span class="synConstant">type</span>: <span class="synConstant">:api_client</span> <span class="synStatement">do</span>
  let(<span class="synConstant">:api_client</span>) { described_class.new }

  <span class="synComment"># </span><span class="synTodo">NOTE</span><span class="synComment">: レスポンスで `{ &quot;errors&quot;: { &quot;code&quot;: 20 } }` を受診した際、3 回リトライが実行された後に `MyApiClient::ApiLimitError` として例外処理される。</span>
  it <span class="synStatement">do</span>
    expect { api_request! }
      .to be_handled_as_an_error(<span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>)
      .after_retry(<span class="synConstant">3</span>).times
      .when_receive(<span class="synConstant">body</span>: { <span class="synConstant">errors</span>: { <span class="synConstant">code</span>: <span class="synConstant">20</span> } }.to_json)
  <span class="synStatement">end</span>
<span class="synStatement">end</span>
</pre>


<p>また、 <code>ExampleApiClient</code> は <code>stub_api_client</code> や <code>stub_api_client_all</code> を使用するとスタブ化できます。
スタブ化した状態だと任意の <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> レスポンスを返すか、任意の例外を発生させる、という動作になってリトライが発生しなくなるので、上記の問題はありませんでした。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>stub_api_client_all(<span class="synType">ExampleApiClient</span>, <span class="synConstant">get_users</span>: { <span class="synConstant">users</span>: [{ <span class="synConstant">id</span>: <span class="synConstant">1</span> }, { <span class="synConstant">id</span>: <span class="synConstant">2</span> }, { <span class="synConstant">id</span>: <span class="synConstant">3</span> }] })

response = <span class="synType">ExampleApiClient</span>.new.get_users
response.users <span class="synComment"># =&gt; [{ id: 1 }, { id: 2 }, { id: 3 }]</span>
</pre>


<h2><a href="https://github.com/ryz310/my_api_client/pull/175">#175</a> Verify arguments on error handling definition</h2>

<p><code>error_handling</code> の定義でレスポンスの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%BF%A5%B9%A5%B3%A1%BC%A5%C9">ステータスコード</a>を指定することができるんですが、このオプション名が <code>status_code</code> なのか <code>status</code> なのかをよく間違える、という問題がありました。<code>$ rails g api_client</code> を使用するとテンプレが作成されるので、そこからエラーハンドリングの定義を行うと間違えにくいのですが、後からエラーハンドリングを追加する時とかにやらかします。作者自身もたまにやらかしてました😇</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># 正解</span>
error_handling <span class="synConstant">status_code</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>

<span class="synComment"># 間違い</span>
error_handling <span class="synConstant">status</span>: <span class="synConstant">400</span>..<span class="synConstant">499</span>, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ClientError</span>
</pre>


<p>この PR の対応で間違ったオプションを指定すると以下のような例外が発生するようになりました。</p>

<pre class="code" data-lang="" data-unlink>RuntimeError:
  Specified an incorrect option: `status`
  You can use options that: [:response, :status_code, :json, :with, :raise, :block]</pre>


<h2><a href="https://github.com/ryz310/my_api_client/pull/176">#176</a> Provides a syntax sugar of <code>retry_on</code> on <code>error_handling</code></h2>

<p>最初の PR でも出てきた <code>retry_on</code> ですが、 <code>error_handling raise: MyApiClient::ApiLimitError</code> でも同じ例外を指定していて DRY な感じじゃなかったり、<code>retry_on</code> と <code>error_handling</code> をそれぞれ定義してるとお互いの関連が実感しづらい、という不満がありました。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synPreProc">class</span> <span class="synType">ExampleApiClient</span> &lt; <span class="synType">MyApiClient</span>::<span class="synType">Base</span>
  endpoint <span class="synSpecial">'</span><span class="synConstant">https://example.com</span><span class="synSpecial">'</span>

  retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
  error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>

  <span class="synComment"># GET https://example.com/users</span>
  <span class="synPreProc">def</span> <span class="synIdentifier">get_users</span>
    get <span class="synSpecial">'</span><span class="synConstant">users</span><span class="synSpecial">'</span>
  <span class="synPreProc">end</span>
<span class="synPreProc">end</span>
</pre>


<p>この <code>PR</code> では <code>retry</code> というオプションを <code>error_handling</code> に追加しています。これにより、以下の 2 つのコードは等価になります。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>retry_on <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span>
error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>
</pre>




<pre class="code lang-ruby" data-lang="ruby" data-unlink>error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, 
                          <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, 
                          <span class="synConstant">retry</span>: { <span class="synConstant">wait</span>: <span class="synConstant">1</span>.minute, <span class="synConstant">attempts</span>: <span class="synConstant">3</span> }
</pre>


<p><code>retry_on</code> にオプションを指定する必要がなければ <code>retry: true</code> と書けば OK です。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>error_handling <span class="synConstant">json</span>: { <span class="synSpecial">'</span><span class="synConstant">$.errors.code</span><span class="synSpecial">'</span>: <span class="synConstant">20</span> }, 
                          <span class="synConstant">raise</span>: <span class="synType">MyApiClient</span>::<span class="synType">ApiLimitError</span>, 
                          <span class="synConstant">retry</span>: <span class="synConstant">true</span>
</pre>


<p>ただし、 <code>retry</code> オプションを使用する際は以下の点に注意が必要です。</p>

<ul>
<li><code>error_handling</code> に <code>raise</code> オプションの指定が必須となります。</li>
<li>Block を使った <code>error_handling</code> の定義は禁止されます。</li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[認証認可の情報の追い方みたいな]]></title>
        <id>https://developer.feedforce.jp/entry/2020/01/10/185250</id>
        <link href="https://developer.feedforce.jp/entry/2020/01/10/185250"/>
        <updated>2020-01-10T09:52:50.000Z</updated>
        <summary type="html"><![CDATA[<p>今日の社内勉強会担当だった <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>去年「年が明けたらすぐに勉強会担当だから年末年始連休中にがんばるぞい」と考えていたことを<i>すっかり忘れて</i>、前々日に「今週末の担当やん！」と気づいたので肝が冷えました。今年は Switch 版 脳トレで記憶力を強化していきたい所存。</p>

<p>2019 年後半は認証認可界隈の面白い話がたくさんあったと思っていて、それをざーっと話そうかなとスライドを書き始めたんですが、<b>そういう情報を読むときにどんなことを考えてるのか</b>というのを想像してみたら面白かったのでそっちの話になりました。</p>

<h2>スライド</h2>

<script async class="speakerdeck-embed" data-id="77e81eff04f74f039cc824f0a2f07619" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p><br></p>

<p>p.21 以降の『付録: 認証認可の未来の話』が本編だったかもしれない（発表時間5分）。</p>

<p>「認証認可こわくないよ〜🤗」というのを伝えたかったんですが、登場人物の多さで逆に怖がらせてしまった感が否めなかったですね😇</p>

<p>"エンジニアの情報収集の仕方" 程度になにかの役に立てば幸いです。</p>

<h2>宣伝: ruby-jp Slack</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fruby-jp.github.io%2F" title="ruby-jp.slack.com" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ruby-jp.github.io/">ruby-jp.github.io</a></cite></p>

<p>スライドの中でも紹介していますが <a href="https://ruby-jp.slack.com/archives/CLTCUB934">#authz</a> というチャンネルで認証認可の話をしています。していますというか、自分は聞いているばかりなので :感謝しかない: 。</p>

<p>興味あるかたはぜひ Join してみてくださいね！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[私と gem]]></title>
        <id>https://ryz310.hateblo.jp/entry/2019/12/15/224312</id>
        <link href="https://ryz310.hateblo.jp/entry/2019/12/15/224312"/>
        <updated>2019-12-15T13:43:12.000Z</updated>
        <summary type="html"><![CDATA[<p>どーも、サトウリョウスケです。
<a href="https://ginza-rails.connpass.com/event/155467">金曜日に登壇した勉強会</a> で <del>うっかり</del> ブログ作るって言ってしまったので 10 年ぶりくらいにブログを復活させてみました。ブログのタイトルも 10 年前のタイトルと同じです（元ネタは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a>時代の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8">ドラクエ</a> IV）</p>

<p>勉強会の感想記事は近日中に書こうと思います✍️</p>

<h2>この記事は Feedforce Advent Calendar 2019 の 15 日目です。</h2>

<p>さて、最初の記事からいきなり会社の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>記事になります🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fadventar.org%2Fcalendars%2F4169" title="feedforce Advent Calendar 2019 - Adventar" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://adventar.org/calendars/4169">adventar.org</a></cite></p>

<p>昨日は Yutaka KAWAI さんの「コーヒーは科学である ~抽出器具による味の違い~ <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A1%BC%A5%D1%A1%BC%A5%C9%A5%EA%A5%C3%A5%D7">ペーパードリップ</a>編」でした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Futahca%2Fn%2Fn30594094e406" title="コーヒーは科学である ~抽出器具による味の違い~ ペーパードリップ編｜Yutaka KAWAI｜note" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://note.com/utahca/n/n30594094e406">note.com</a></cite></p>

<p>珈琲屋さんかな？ってくらい凄い記事でしたね☕️
記事に出てきたドリッパーは全種類持ってるってヤバくないですか？？？（もちろん良い意味で）</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A1%BC%A5%D1%A1%BC%A5%C9%A5%EA%A5%C3%A5%D7">ペーパードリップ</a>編ってことは続編もあるのかな？
この感じで記事が量産されたらそのうち書籍化されるかもしれません📚</p>

<h2>本編</h2>

<p>予告通り個人で gem を作る流れについて話そうと思うのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>から流れてくると非エンジニアの方もきっと読まれると思うので、あんまり技術的な話題にせずにフワッとした話でもしようかと思います。</p>

<h3>そもそも gem ってなんだっけ？</h3>

<p>そもそも gem っていうのは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> でできたライブラリの事でして、例えば僕が凄く便利なプログラムを書いて、それを gem として公開すれば、世界中の人が僕のイケてるプログラムを使えるようになる、というものです。まさに <a class="keyword" href="http://d.hatena.ne.jp/keyword/Win-Win">Win-Win</a> しかない仕組み。gem は世界を救います。</p>

<p>一方で、プログラムってのは新機能が追加されたり、不具合が修正されたりして日々アップデートが繰り返されています。
「この機能にはバージョン 1.3 以降でないと使えません」とか「色々イケてない部分が多いからこの機能は廃止します」という変更もあるので、自分のプログラムは一体どのバージョンの gem を使っているのか、という話が物凄く重要だったりします。</p>

<p>gem にはどのバージョンを使っているのか（依存しているのか）という情報を管理する機能も備わっていますので、ある日突然新バージョンで挙動が変わっても「うちは一個前のバージョン使ってます！」という管理ができていれば動かなくなることはないのです。</p>

<p>とはいえ新バージョンでいきなりそんなトンデモ変更されたら困りますけども。</p>

<h3>僕が初めて作った gem</h3>

<p>自分が生まれて初めて作った gem はこの <code>rubocop_challenger</code> という gem です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger" title="ryz310/rubocop_challenger" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger">github.com</a></cite></p>

<p>一般的に gem は他のプログラムと組み合わせて使う事が多いのですが、 <code>rubocop_challenger</code> は単体で動作するやつでして、実行した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ（フォルダ）にあるプログラムの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を少しずつ綺麗に（人間にとって読みやすくしたり、書き方のルールを統一したり）してくれる、という gem です。</p>

<p>というと物凄い神 gem ですが、RuboCop という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>を解析してくれる便利な gem を内部で呼び出してプルリク（プルリクが何なのかはググってください）作ってくれる、という仕組みになっているので、「人間が毎日手作業でやらないといけなかった事を自動的にやる」というのが <code>rubocop_challenger</code> の提供する価値になります 🤖</p>

<p>詳しくはちょうど一年くらい前に会社のブログに書いたので、ご興味ありましたら是非。古い内容なので、現在のバージョンからは少しずれてますけど。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F12%2F05%2F140000" title="まだ .rubocop_todo.yml で消耗してるの？ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/12/05/140000">developer.feedforce.jp</a></cite></p>

<p>ちなみにもうすぐ <code>v2.0.0</code> をリリースする予定です。（pre バージョンですが、現時点でもすでに使えます）</p>

<h3>ニッチな gem</h3>

<p>初めて作ったのは <code>rubocop_challenger</code> という「人間が毎日手作業でやらないといけなかった事を自動的にやる」 gem でした。
完全に自分の会社のプロダクト用に作った gem でしたが、 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> などを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B4%A5%B5">エゴサ</a>してると、ぼちぼち使って頂けているようです。
同じような悩みを抱えている人は世の中にはいるもんですね✨</p>

<p>とはいえ、 gem を公開したら世界中の人たちが使ってくれる、ということには中々ならないです。
一応頑張って英語で説明を書いたりはしていますが、個人の発信力には限界もありますし、何よりニッチです。</p>

<p>というか、個人が作る gem なんて大抵はニッチなものになります。
「あー、こんな gem あったらめっちゃ便利やん？」という gem は大抵世界のどこかの誰かが作ってます。
なので、今までにないような新しいgem を作ろうと思ったら大抵ニッチになります。</p>

<p>じゃあ gem を公開しても大して使ってもらえないし、あんまり意味ないじゃん、って思うかもしれませんが、意味無くはないんですよね👍</p>

<h3>効能 1. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A5%EB%A5%A2%A5%C3%A5%D7">スキルアップ</a></h3>

<p>まず、めっちゃプログラムを書く勉強になります。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> で Web 開発をしている人は大抵 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> を使って書いてると思います。ちなみに <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> も gem です。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails</a> は凄くよく出来ているので、Web 開発の難しい部分を 9 割くらいの肩代わりしてくれます。</p>

<p>ところが、自分で一から gem を作ろうとすると、自分の力で解決しないといけないプログラム的な課題がめっちゃあります。
Web 開発はインターネット特有の課題が多いですが、 gem の開発には Web 開発以外の知識も色々要求されたりします。</p>

<p>何より、自分自身で仕様を一から考えないといけないので、普段の開発以上に意思決<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%EA%CE%CC">定量</a>がめっちゃ多いです。
自分は <code>rubocop_challenger</code> 以外にもメンテナンスしている gem が 3 つほどありますが、これらの開発を通して日頃の Web 開発の品質も一段レベルが上がったな、と感じる事が多いです。</p>

<p>なので、gem の開発は自分自身の修行のためだと思ってやると良いかもしれません。誰かに使えてもらえたらラッキー、みたいな。</p>

<p>逆に使ってもらえる事をモチベーションにするとちょっと辛いかもしれないです。思った以上に流行らない。もっと流行れ！</p>

<h3>効能 2. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%C8%A5%D5%A5%A9%A5%EA%A5%AA">ポートフォリオ</a></h3>

<p>gem を公開してるせいか、企業からのスカウトがめっちゃ来るようになります。</p>

<p>自分自身、会社の採用活動に関わる機会が多いのですが、例えばスカウト候補を探す際に候補者の <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> は必ず見るようにしています。
その経験からですが自分で gem 書いて公開しているエンジニアは世の中の 1 割もいないんじゃないかな、って思っています。</p>

<p>自分も gem を作るようになったのはここ 1 ~ 2 年ですし、前職にいた頃だと普段の仕事の帰りが遅かったりもしたので家に帰ってから gem を作るような余裕もありませんでした。なので、本人の熱量や環境が整わないと gem の開発は難しいかもしれません。</p>

<p>しかしながら、自分も採用活動していて「お。この人すごいやん」ってなるのは <a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a> や Qiita とかで何かしらアウトプットのある方なんですよね。
もちろんアウトプットが無くても実際会ってみたら凄かったって人は沢山いるんですが、採用活動だとその人の仕事でのアウトプットって見えないもんですから。。</p>

<p>別に gem じゃなくても良いんですが、自分自身のキャリア形成を意識するためのアウトプットの一環としてとても有用だと思います。</p>

<h3>効能 3. 魔法のアイテム</h3>

<p>自分が今年作った gem に <code>my_api_client</code> という gem がありまして、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> Client を作るための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>なんですが、これはプロダクトの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>にも使っています。</p>

<p>自分が携わってるサービスは <a href="https://socialplus.jp/">ソーシャルPLUS</a> というものでして、企業の Web サービスとソーシャルログインプロバイダー（ LINE とか <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> とか）のハブになってるサービスなんですね。そのせいもあって、外部の Web <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> へリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トするという処理が多く、毎回同じようなエラーハンドリングやリトライの処理を何度も書かないといけなくて大変だった訳です。</p>

<p>あと、エラーが発生した際に「ソーシャルPLUS」「ソーシャルPLUSを利用している企業」「ソーシャルログインプロバイダ」の誰が原因なのかを特定するための情報をログに残すとかも都度対応しないといけなくて超大変でした。</p>

<p><code>my_api_client</code> はその辺の処理をすっきり簡単に書けるようにするための gem でして、すっきり簡単なもんだから、チームメイトが <code>my_api_client</code> を活用して自発的にガンガン課題を解決してくれる、という最高にホットな状況を産み出すことに一役買っております。</p>

<p>やっぱエンジニアも人間なので、普段の業務で忙しい中で改善活動も同時にやろうなんてモチベーションは普通は湧いてこない訳です。でも、これを使えばすっきり簡単だよ、っていう魔法のアイテムがあれば、みんなの重い腰を少しだけ軽くする事ができます。</p>

<p><code>my_api_client</code> は自分の中でも割とよくできた gem なので、毎回こんな良い gem が作れる訳じゃないですけど、 gem を作ってチームの生産性が上がるってのはやっぱ魔法のアイテムだなぁって思うんです。gem は世界を救います！（２回目）</p>

<p>なお、 <code>my_api_client</code> については <a href="https://ginza-rails.connpass.com/event/133628/">銀座 Rails #10</a> で登壇したときの資料があるので貼っておきます。これも若干古いので、最新の仕様とは少し異なるかもしれません。
最新の仕様は <a href="https://github.com/ryz310/my_api_client/blob/master/README.jp.md">こちら</a> をご覧下さい。</p>

<script async class="speakerdeck-embed" data-id="75d691da45b041deb3db8e6748d81638" data-ratio="1.37081659973226" src="//speakerdeck.com/assets/embed.js"></script>


<h3>効能 4. たのしい</h3>

<p>最後はここに帰ってくるんですが、自分の gem を作るのはやっぱ楽しいのです。いきなり頭悪い文章になりました。いつから頭良い文章書いてると錯覚していた？</p>

<p>以前勉強会で「これまでどういうキャリアを意識してやってきましたか？」って若手のエンジニアから聞かれたのですが、自分みたいな 30 半ばのエンジニアって、エンジニアになった当初は今みたいにエンジニアが持て囃される時代でもなかったので、自分からエンジニアになろうって思った人は少なからず「ただプログラムが好きだった」っていう人が多いんじゃないですかね？わかんないですけど自分はそうでした。</p>

<p>自作の gem を作ってると「やっぱプログラム書くのって楽しい」ってのを思い出させてくれます。
自分は他にも趣味でバンドやったり絵を描いたりしていますが、プログラミングが子供の頃に好きだった工作に一番近いような気がしています。</p>

<p>中々プライベートで時間を作るのは難しいんですが、やはり楽しさが一番根底の原動力になっているのかもしれないですね。</p>

<h2>まとまらないまとめ</h2>

<p>会社の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>向けだし、非エンジニアにも伝わるようなフワッとした文章にしようと思って書いてたら、途中から俺のポエムを書き殴ってただけになった気がしますが、役に立つかどうかは 2 の次にして、とりあえず gem 作ってみると楽しく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A5%EB%A5%A2%A5%C3%A5%D7">スキルアップ</a>できるし、もしかしたら誰かの魔法のアイテムになってるかもしれないよ、というお話でした。</p>

<p>久々にゆる〜い文章書いてて自分的には楽しかったです 笑</p>

<h2>さて、明日の Advent Calendar は？（CV. <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%C3%C6%A3%A4%DF%A4%C9%A4%EA">加藤みどり</a>）</h2>

<p><a href="https://adventar.org/calendars/4169">Feedforce Advent Calendar 2019</a>、明日は上岡君が「野球についてor遠隔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>について」書いてくれるみたいです。</p>

<p>最近は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>も遠隔で出来るんですね。野球も遠隔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3">インターン</a>も未経験のままおじさんになってしまったので自分には未知の領域です⚾️💨</p>

<p>乞うご期待！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[シングルサインオンのひとことで片付けない]]></title>
        <id>https://blog.betaful.life/entry/2019/12/09/090000</id>
        <link href="https://blog.betaful.life/entry/2019/12/09/090000"/>
        <updated>2019-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2019/identity">認証認可技術 Advent Calendar 2019</a> の 9 日目の記事です。</p>

<p>前日は <del><a href="https://qiita.com/Munchkin">Munchkin</a> さんの『認可機構によるアクセス制御とビジネスロジックによるアクセス制御の使い分け』でした。</del><br/>
<a href="https://qiita.com/kishisuke">kishisuke</a> さんの『<a href="https://qiita.com/kishisuke/items/e83112d06e0d907a956f">Sign in with Apple+Cordovaについて</a>』でした。</p>

<p><a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です、ごきげんよう。</p>

<p>仕事では主に認可の RP 側として toC な認可 IdP（LINE, Google, Yahoo! JAPAN, Facebook, Twitter, など）に接しています、よろしくお願いします。</p>

<p style="text-align:center;">§</p>


<p>認証認可界隈でお仕事していると、社内からもお客様からも「シングルサインオン」（Single Sign-On, 略称 SSO）という便利機能について話題に上がることがあります。</p>

<p>ただこの「シングルサインオン」という単語の定義がちょっとあいまいで、開発者からすると「シングルサインオンをやりたい」と言われて想像するものに認識のズレがあったりします。</p>

<p>たとえば、私が聞いたことがあって「それはシングルサインオンなのか…？」と引っかかったのはこんなところ:</p>

<div style="padding: 1.5em 1.5em 0 1.5em; margin-bottom: 1.5em; border: 1px solid #ddd; border-radius: 5px;">
<p><b>ソーシャルログイン＝シングルサインオン</b></p>
<p>ID/Password による自社会員 DB でのログインしかなかったサービスで、ソーシャルログインが導入されたときにプレスリリースに「SSO 対応！」というウリ文句が 🤔</p>
<p><b>LINE Login v2.1 から SSO 対応</b></p>
<p>ブラウザでの LINE ログインセッションが維持され、v2.0 までは認可フロー中に毎度（LINE ログイン画面上での）ID/Password の入力が必要だったものが、不要になったというもの 🤔</p>
</div>


<p>「シングルサインオン」は Wikipedia でも<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%AA%E3%83%B3">"不十分" な記事としてふわっと書かれて</a>おり、"ユーザがシステムごとにユーザIDとパスワードの組を入力する必要がなくなる" という意味ではこれらは正しそうです。</p>

<p>詳細な実装を見て広義に「これはシングルサインオンだね」と呼ぶのはいいのですが、開発者が困るのは、要望で「シングルサインオンをやりたい」と言われることです。</p>

<p style="text-align:center;">§</p>


<p>というわけで、今回は自分の思いつく範囲で「シングルサインオン」でないものとあるものをいくつか図で整理してみようと思います。</p>

<p><span style="color: #d32f2f">注）このあと添付する図中の URL のドメインやパスはイメージです。わかりやすさのために実在するサービスのドメインも利用していますがパスについては不正確ですのでご了承ください。</span></p>

<p><span style="color: #d32f2f">またその例として挙げているサービスについて批判や毀損を意図しているものではございません（あんまり適当すぎるドメインだと話がわかりづらくて…すみません）。</span></p>

<h3>明らかにシングルサインオンじゃないやつ</h3>

<p>どこに行っても ID と Password の入力を求められるやつ。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応していない単一サービス"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208192628.jpg" alt="f:id:tmd45:20191208192628j:plain" title="f:id:tmd45:20191208192628j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応していない単一サービス</figcaption></figure></p>

<p>単一サービスの場合は、そもそもシングルサインオンそのものが不要。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応していない複数サービス群"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208192803.jpg" alt="f:id:tmd45:20191208192803j:plain" title="f:id:tmd45:20191208192803j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応していない複数サービス群</figcaption></figure></p>

<p>企業から見れば１社内に複数サービス有していなければこの構図にはならないが、ユーザから見るとインターネット上のあらゆるサービスは大きくまとめて「複数サービス群」とも捉えられる。</p>

<p>そういう意味では「単一サービスの場合は、そもそもシングルサインオンそのものが不要」とも言い切れなくなる。</p>

<h3>ソーシャルログインからログインセッションをつくる</h3>

<p>ソーシャルログインを用いると、たいていの場合、ユーザが ID と Password を入力するのは認可プロバイダ（ソーシャルログインプロバイダ）のログインセッションを確立する初回アクセス時のみになる。</p>

<p>ユーザが普段から利用している（＝ログイン済みである）サービスが認可プロバイダとなれば、ユーザは認可フローのなかで「認可する」以外のアクションが不要となるため、手間が減るという利点がある。</p>

<p>サービス側は認可プロバイダから得られた属性情報（プロバイダ側のユーザID など）をもとにして、サービスのログインセッションを確立する。</p>

<p><figure class="figure-image figure-image-fotolife" title="ソーシャルログインに対応したサービス（広義のシングルサインオン）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208193823.jpg" alt="f:id:tmd45:20191208193823j:plain" title="f:id:tmd45:20191208193823j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ソーシャルログインに対応したサービス（広義のシングルサインオン）</figcaption></figure></p>

<p>インターネット上のあらゆるサービスを大きくまとめて「複数サービス群」と捉えた場合、<b>認可プロバイダを介したシングルサインオンになっている</b>と言える。</p>

<p>これが認可プロバイダ側で都度 ID/Password の入力を求める形になっていると、その利点が死んでしまう。</p>

<p><figure class="figure-image figure-image-fotolife" title="残念な例: ソーシャルログインプロバイダがログイン状態を維持しないタイプ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208195524.jpg" alt="f:id:tmd45:20191208195524j:plain" title="f:id:tmd45:20191208195524j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>残念な例: ソーシャルログインプロバイダがログイン状態を維持しないタイプ</figcaption></figure></p>

<p>とはいえ、このケースでも決済前にはあえて再認証を行わせるなど（シングルサインオンとは直接関係しないが）都度認証する手間とセキュリティの向上はケースバイケースでバランスを考える必要がある。</p>

<h3>想像しやすいシングルサインオン</h3>

<p>ここからやっと、シングルサインオンと言われて（自分が）普通に想像するパターン。</p>

<p>ユーザはサービス群のどこか１箇所でログインしていれば、ID/Password 入力の手間をかけずに関連する他のサービスを利用することができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応した複数サービス群（１サービスのログインに依存）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200356.jpg" alt="f:id:tmd45:20191208200356j:plain" title="f:id:tmd45:20191208200356j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応した複数サービス群（１サービスのログインに依存）</figcaption></figure></p>

<p>図中にも書いたが、上記はこんなケースだったりする:</p>

<ul>
<li><code>example.com</code> サービスを作ったあとに <code>example2.com</code> サービスを追加した</li>
<li>ユーザに手間をかけさせることを避けるためにシングルサインオンを導入したい</li>
<li>開発が大変そうなので認証基盤システムを別で作るのは避けたい</li>
</ul>


<p>こういう場合、ユーザはシングルサインオンできて便利かもしれないが、開発者側としては「 <code>example2.com</code> が <code>example.com</code> に依存しており身動きが取りづらい」と感じて、さらなるサービス拡大をしづらくなっている状態だったりする。</p>

<p><figure class="figure-image figure-image-fotolife" title="シングルサインオンに対応した複数サービス群（認証基盤をはさむ）"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200500.jpg" alt="f:id:tmd45:20191208200500j:plain" title="f:id:tmd45:20191208200500j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>シングルサインオンに対応した複数サービス群（認証基盤をはさむ）</figcaption></figure></p>

<p>パッと見て健全なのがこの構成。</p>

<p>ただし実質 <code>example.com</code> と <code>example2.com</code> に加えて認証基盤である <code>auth.example.com</code> という３つのシステムを管理することになる。開発事情としては、（それぞれは相当ミニマムでなければ）開発者をそれなりの人数確保したり、チームを分割して運営したいところ。</p>

<p>…というのが前時代的な話で、最近だと IDaaS（Identity as a Service）などを活用することで、認証基盤システムのお守りを自組織からアウトソースするという手もあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="おまけ: シングルサインオンにするかどうかわからないけど備えておく"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191208/20191208200528.jpg" alt="f:id:tmd45:20191208200528j:plain" title="f:id:tmd45:20191208200528j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>おまけ: シングルサインオンにするかどうかわからないけど備えておく</figcaption></figure></p>

<p>IDaaS の台頭で、シングルサインオンにするかどうかはともかく、認証基盤部分を早めにアウトソースするなど選択肢も広がりました。</p>

<p style="text-align:center;">§</p>


<p>はてさて「シングルサインオン」をキーワードに、ソーシャルログインや IDaaS といったものを絡めて書いてみました。</p>

<p>構成を考えるスコープを広めたり狭めたり、必要なセキュリティレベルとのバランスを見たり、開発組織の規模やスキルを加味したり、どんなシステムでもそうですが考えることはたくさんあります。</p>

<p>認証基盤に関わる皆様に置かれましては「シングルサインオン」という定義の曖昧な単語ドーーーン！ではなく、ユーザにどうあって欲しいか、開発をどのようにしていくべきか、などなど具体的なストーリー（要望、仕様）で会話できるといいかなと思う次第にございます。</p>

<p style="text-align:center;">§</p>


<p>明日は <a href="https://qiita.com/olt">olt</a> さんの『<a href="https://qiita.com/olt/items/584f9d1a840d024b2451">TwitterのOAuth1.0 認可用の中間サーバNode.jsで構築する</a>』 お話とのこと。ではでは。</p>

<hr />

<p>編集後記</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2019%2F12%2F10%2F134115" title="『シングルサインオンのひとことで片付けない』を書いて - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2019/12/10/134115">blog.tmd45.jp</a></cite></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ソーシャルPLUS の技術スタックを整理してみた]]></title>
        <id>https://developer.feedforce.jp/entry/2019/11/25/120000</id>
        <link href="https://developer.feedforce.jp/entry/2019/11/25/120000"/>
        <updated>2019-11-25T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS 開発チームリーダーの <a href="https://developer.feedforce.jp/archive/author/tmd45">id:tmd45</a> です。ごきげんよう。</p>

<p>ソーシャルPLUS チームではバックエンドエンジニアの絶賛採用活動中なのですが、そのときにまとめた技術スタックについて、採用メディアにだけ使うのももったいないと思ったので、普通にブログ記事に書いてみることにしました。よろしくおねがいします。'`ｨ (ﾟдﾟ)/</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122182928.png" alt="f:id:tmd45:20191122182928p:plain" title="f:id:tmd45:20191122182928p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#ソーシャルPLUS-って">ソーシャルPLUS って？</a></li>
    <li><a href="#システムの役割">システムの役割</a><ul>
            <li><a href="#ソーシャルログインサービス">ソーシャルログインサービス</a></li>
            <li><a href="#LINE-メッセージ配信サービス">LINE メッセージ配信サービス</a></li>
        </ul>
    </li>
    <li><a href="#技術スタックの紹介">技術スタックの紹介</a><ul>
            <li><a href="#バックエンドサーバーサイド">バックエンド（サーバーサイド）</a></li>
            <li><a href="#フロントエンド">フロントエンド</a></li>
            <li><a href="#インフラストラクチャ">インフラストラクチャ</a></li>
            <li><a href="#その他">その他</a></li>
        </ul>
    </li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h1 id="ソーシャルPLUS-って">ソーシャルPLUS って？</h1>

<p>おそらく知らない方が大半だと思うので、かんたんにサービス紹介をば。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsocialplus.jp%2F" title="ソーシャルログイン / ID連携の導入・実装支援サービス「ソーシャルPLUS」" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://socialplus.jp/">socialplus.jp</a></cite></p>

<p>ソーシャルPLUS は、WEB サイトでの会員登録や再ログインがかんたんになる「ソーシャルログイン」を複数プラットフォームまとめて一括で実装できる BtoBtoC の ID 連携サービスです。</p>

<p>対応するプラットフォーム（認可プロバイダ）には LINE、Yahoo! JAPAN、Google、Facebook、Twitter があります。とくに 2016年からは LINE Messaging API によるメッセージ配信や 1to1 トークに対応し、コンシューマー（エンドユーザー）への継続的なリーチや商品購入後のカスタマーサポートなどが可能になりました。ID 連携によりエンドユーザーとのコミュニケーションチャネルが広がり、さらに精度も高められるようになります。</p>

<p>企業の課題を解決するだけでなく、企業が実現したい事の先にいるエンドユーザーにとってメリットがあるかを重要視したユーザーファーストの考え方で、機能追加やサービスの活用提案を行なっています。</p>

<p>2012 年 4 月からサービスを開始し、7 年目となる今年もまだまだ成長しているサービスです。</p>

<h1 id="システムの役割">システムの役割</h1>

<p>ソーシャルPLUS では大きく以下の２つの Rails アプリケーションが中心になっています。</p>

<h2 id="ソーシャルログインサービス">ソーシャルログインサービス</h2>

<ul>
<li>ソーシャルログインの提供</li>
<li>プロバイダからのユーザ情報取得</li>
<li>API 提供</li>
<li>設定管理画面</li>
</ul>


<p>こちらはサービス稼働当初から存在する、コアとなる機能を扱っています。昔ながらの MVC すべてを Rails で構築しているアプリケーションです。</p>

<p>瞬間的なアクセス増加に耐える運用設計や、パフォーマンス改善、プロバイダの仕様変更への追従が、最近の主なタスクでした。</p>

<p>技術スタックは後述しますが、「ソーシャルログインの提供」と「設定管理画面」が１つのアプリケーションとして動いているのは、可用性も保守性もいまいちなので近々分離したいと考えている部分です。</p>

<h2 id="LINE-メッセージ配信サービス">LINE メッセージ配信サービス</h2>

<ul>
<li>スケジュール一括配信</li>
<li>メッセージ（Webhook）受信</li>
<li>1to1 メッセージ（チャットのようにエンドユーザーと対話できる機能）</li>
<li>API 提供</li>
<li>新機能: ステップ配信機能 開発中</li>
</ul>


<p>メッセージ配信サービスは 2017 年 4 月から提供を始めた（このプロダクトのなかでは）比較的新しいサービスです。</p>

<p>フロントエンドを React &amp; Redux で、サーバーサイドを Rails の API モードで構築しています。</p>

<p>これまでエンドユーザーからのメッセージを漏れなく受信するためのアーキテクチャや、メッセージ配信のパフォーマンスを上げる施策に取り組んできました。直近ではデザイナーが参加し、より使いやすい UI や UX を意識しながら新機能の開発を進めています。</p>

<h1 id="技術スタックの紹介">技術スタックの紹介</h1>

<p>現在、ソーシャルPLUS チームには８名の開発者が在籍していますが、メンバーの得意な技術領域によってバックエンド、フロントエンド、インフラのタスクを分けて取り掛かり、相互にフォローしながらチーム開発を進めています。</p>

<p>もちろん本人が希望すればどんな仕事でも関わってもらって構いません。実際、フルスタックを志して手が空けばいろんなタスクを消化しているメンバーもいます。</p>

<h2 id="バックエンドサーバーサイド">バックエンド（サーバーサイド）</h2>

<ul>
<li>ソーシャルログインサービスは <b>Ruby on Rails 4.2</b>（<s>来年中にはバージョンアップ予定</s> <a href="https://developer.feedforce.jp/entry/2020/09/08/142913">2020年9月 バージョンアップしました！</a>）</li>
<li>LINE メッセージ配信サービスは SPA（Single Page Application）として構築しており、サーバーサイドは <b>Ruby on Rails 5.2</b> の API モードを利用</li>
<li>いずれも RDB は <b>MySQL</b>、インメモリデータストアは <b>Redis</b> を利用</li>
<li><b>RSpec</b> による機能テスト（85 〜 91 % のカバレッジ）</li>
<li><b><a href="https://www.bugsnag.com/">Bugsnag</a>, <a href="https://scoutapm.com/">Scout</a></b> によるアプリケーションレイヤーの監視</li>
<li><b>Google BigQuery</b> へのログ集積</li>
<li>システムの一部に <b>AWS Lambda, Amazon DynamoDB, Amazon Kinesis</b> などを利用</li>
</ul>


<h2 id="フロントエンド">フロントエンド</h2>

<ul>
<li><b>React, TypeScript, <a href="https://firebase.google.com/">Firebase</a>, PWA</b> などを用いた BtoB 向け SPA</li>
<li><b>Atomic Design</b> をベースに UI を構造化、<b><a href="https://storybook.js.org/">Storybook</a></b> でコンポーネントを管理</li>
<li><b>Flux アーキテクチャ</b>にはおなじみの <b><a href="https://redux.js.org/">Redux</a></b> を用い、ファイル構造は <b>re-ducks パターン</b>を採用</li>
<li><b>モジュールのテスト</b>、<b>E2E テスト</b>や <b>ビジュアル回帰テスト</b>等にてプロダクトの品質を維持</li>
<li><b><a href="https://www.bugsnag.com/">Bugsnag</a>, <a href="https://logrocket.com/">LogRocket</a></b> によるフロントエンドアプリケーションレイヤーの監視</li>
</ul>


<h2 id="インフラストラクチャ">インフラストラクチャ</h2>

<ul>
<li><b>AWS</b> を中心に構成。<b>Route 53, ALB, EC2, Aurora MySQL</b> ほか</li>
<li><b>複数 AZ（Availability Zone）に冗長化</b>、構成変更は <b>Blue/Green Deployment</b></li>
<li><b>EKS</b> や <b>ECS</b> へのコンテナ化移行を検討中（技術検証や運用コストを踏まえて慎重に検証を重ねています）</li>
<li>Infrastructure as Code に従って <b>Terraform</b> や <b>Chef</b> でコード管理</li>
<li><b>作業の自動化</b>を意識。サーバー台数の増減はほぼ自動で行われる仕組みを実現</li>
<li><b><a href="https://www.datadoghq.com/">Datadog</a></b> を利用した監視、異常は <b>Slack</b> へ通知</li>
</ul>


<h2 id="その他">その他</h2>

<ul>
<li>全体で <b>Slack, GitHub, CircleCI, <a href="https://redash.io/">Redash</a></b> を利用</li>
<li>リリース作業を ChatOps 化（中継に Jenkins を利用）</li>
<li>リモートペアプロも挑戦中（おもに Slack Call と画面共有。方法は模索中）</li>
</ul>


<p>モニタリング内容やアラート、タスクカード（GitHub Project）はチームの席近くにある大型ディスプレイに表示して、朝会やイテレーションミーティングで眺められるようにしています。リモートじゃないモブプログラミングなんかもここでやります。</p>

<p><figure class="figure-image figure-image-fotolife" title="カンバンディスプレイ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122191259.jpg" alt="f:id:tmd45:20191122191259j:plain" title="f:id:tmd45:20191122191259j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>カンバンディスプレイ</figcaption></figure></p>

<h1 id="おわりに">おわりに</h1>

<p>すべての技術スタックについて細かに説明すると相当長くなるので、ざっくりになりました。技術スタックだけでなく、チームの仕事の仕方なんかも今後公開していければと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191122/20191122212718.png" alt="f:id:tmd45:20191122212718p:plain" title="f:id:tmd45:20191122212718p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>弊社ではカジュアル面談も行っていますが、ビジネスの説明からこういった技術スタックの解説まで、私やチームメンバーからさせていただいてます。</p>

<p>選考というフローに進む前にぜひ会社やプロダクトについて知ってもらえればと思っておりますので、気になる部分があればお気軽にご質問ください〜 (・ω・)ノ</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slack に便利機能 "ワークフロービルダー" が増えたので勇み足で使ってみた]]></title>
        <id>https://developer.feedforce.jp/entry/2019/10/16/140901</id>
        <link href="https://developer.feedforce.jp/entry/2019/10/16/140901"/>
        <updated>2019-10-16T05:09:01.000Z</updated>
        <summary type="html"><![CDATA[<p>Slack に「ワークフロービルダー」という機能ができたので現時点のメモ。</p>

<ul>
<li><a href="https://slackhq.com/intl-ja-jp-automate-tasks-in-slack-with-workflow-builder">ワークフロービルダーが新登場 : Slack で簡単にタスクを合理化 | The Official Slack Blog</a></li>
</ul>


<h2>どこにあるの？</h2>

<p>いまのところ、左上（ワークスペース名）のメニューから使える。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークスペースのメニュー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140418.png" alt="f:id:tmd45:20191016140418p:plain" title="f:id:tmd45:20191016140418p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークスペースのメニュー</figcaption></figure></p>

<h2>ワークフローの編集</h2>

<p>上のメニューをクリックすると別ウィンドウが開いてこういう編集ができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフロービルダーの初期画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140504.png" alt="f:id:tmd45:20191016140504p:plain" title="f:id:tmd45:20191016140504p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフロービルダーの初期画面</figcaption></figure></p>

<p>「ワークフロー」作ってみた例</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローの編集"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140539.png" alt="f:id:tmd45:20191016140539p:plain" title="f:id:tmd45:20191016140539p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローの編集</figcaption></figure></p>

<p>「設定」の内容</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローの設定"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140559.png" alt="f:id:tmd45:20191016140559p:plain" title="f:id:tmd45:20191016140559p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローの設定</figcaption></figure></p>

<h2>Slack チャンネル上でできること</h2>

<p>ワークフローを登録したチャンネルに ⚡ マークが出てきて、そこからアクションが始められる。このトリガーも何種類かあるみたい。</p>

<p><figure class="figure-image figure-image-fotolife" title="&quot;このチャンネルのアクション&quot;"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140643.png" alt="f:id:tmd45:20191016140643p:plain" title="f:id:tmd45:20191016140643p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>&quot;このチャンネルのアクション&quot;</figcaption></figure></p>

<p>ワークフローで作ったフォームが表示された例。セレクトボックスに複数選択タイプは（いまのところ）なかった。</p>

<p><figure class="figure-image figure-image-fotolife" title="ワークフローで作ったフォームの表示"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016140745.png" alt="f:id:tmd45:20191016140745p:plain" title="f:id:tmd45:20191016140745p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ワークフローで作ったフォームの表示</figcaption></figure></p>

<h2>Slack チャンネルで動いた様子</h2>

<p><figure class="figure-image figure-image-fotolife" title="Slack チャンネルで動くワークフロー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191016/20191016141406.png" alt="f:id:tmd45:20191016141406p:plain" title="f:id:tmd45:20191016141406p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Slack チャンネルで動くワークフロー</figcaption></figure></p>

<p>なんか上手いこと使えるといいですね！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブラウザからローカルフォントにアクセスする：Font Enumeration API と Font Table Access API]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2019/10/15/225720</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2019/10/15/225720"/>
        <updated>2019-10-15T13:57:20.000Z</updated>
        <summary type="html"><![CDATA[<p>最近の Web アプリはどんどんリッチになっていっていますが、ネイティブアプリとは違って、「ローカルフォント<a href="#f-5ce9b760" name="fn-5ce9b760" title="ユーザーの端末にインストールされているフォント。デバイスフォントと呼ばれることも。">*1</a>を列挙してユーザーに選択させ、それを表示に使う」といったことは仕様上不可能です。</p>

<p>例えば、画像に文字を入れる Web アプリを考えてみます。文字の描画自体は <a href="https://developer.mozilla.org/ja/docs/Drawing_text_using_a_canvas">canvas の <code>ctx.fillText()</code></a> が使えますが、問題はフォントの指定です。<a href="https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D/font"><code>ctx.font</code></a> にローカルフォントを指定するためには、そのローカルフォントのフォント名を知っている必要があります。OS にプリインストールされているフォントでなどであれば、「Web アプリ側であらかじめフォント名のリストを用意しておき、実際にインストールされているかどうかをチェック<a href="#f-dbf8c6ce" name="fn-dbf8c6ce" title="適当な文字列のダミー要素を不可視状態で用意 → 要素にチェックしたいフォントを指定 → 指定前後で要素の幅が変わったかチェック、というのが常套手段でしょう。後述のフィンガープリンティングでも使われる手法です。">*2</a>してからユーザーに選択させる」という手段がとれますが、「自分でインストールしたこのフォントが使いたい！」という要求に応えるのは現実的ではありません。</p>

<h2>提案中の2つの <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a></h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20191014220905" class="hatena-fotolife" itemprop="url"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20191014/20191014220905.png" alt="f:id:mashabow:20191014220905p:image:w300" title="f:id:mashabow:20191014220905p:image:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></a></span></p>

<p>現在、Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>・Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> という <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> が提案されています。まだまだ検討中のようですが、もし標準化までたどり着けば、この状態が解消されそうです。</p>

<ul>
<li><a href="https://inexorabletash.github.io/font-enumeration/">Font Enumeration API</a></li>
<li><a href="https://inexorabletash.github.io/font-table-access/">Font Table Access API</a></li>
</ul>


<p>Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> が、ローカルフォントを列挙するための <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> です。先ほどの例でやりたかったことは、これで実現できそうです。一方の Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> は、ローカルフォントのテーブルのバイナリにアクセスするための <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> です。どちらも単機能で、かなりシンプルな構成になっています。</p>

<p><a href="https://github.com/inexorabletash/font-enumeration/tree/5c480d2fd6e301c0501134dc1055358b19d0441c#whats-all-this-then">GitHub リポジトリの README</a> によると、提案の動機としては以下のような感じです。</p>

<ol>
<li>プロ品質のデザインツールを Web 上に作ろうとすると、以下のような障害がある

<ul>
<li>Web アプリからはローカルフォントの列挙ができない</li>
<li>ブラウザは OS のフォントエンジンを使って描画するので、OS 間で差が生じる</li>
<li>（ネイティブアプリを Web アプリに移植する場合）自前のフォントエンジンはたいてい生のフォントデータを要求するものだが、Web フォントの仕様ではフォントのバイナリにアクセスできない</li>
</ul>
</li>
<li>Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> と Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> を提供して、このような状況を解消したい</li>
</ol>


<p>この記事では <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> の詳細には触れませんが、HarfBuzz/<a class="keyword" href="http://d.hatena.ne.jp/keyword/FreeType">FreeType</a> を WASM に乗せて、それにフォントデータを食わせて描画する、というような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース</a>も<a href="https://inexorabletash.github.io/font-table-access/#examples">挙げられています</a>。</p>

<p>ちなみにこれらの <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a>（<a class="keyword" href="http://d.hatena.ne.jp/keyword/Chromium">Chromium</a>）では8月下旬に "Intent to Implement" になったようです。</p>

<ul>
<li><a href="https://groups.google.com/a/chromium.org/d/msg/blink-dev/XfkSdpMWNik/IX67fOTLAQAJ">Intent to Implement: Font Enumeration</a></li>
<li><a href="https://groups.google.com/a/chromium.org/d/msg/blink-dev/-8wPGNpuV2Y/C5wdLebLAQAJ">Intent to Implement: Font Table Access</a></li>
<li><a href="https://www.chromestatus.com/feature/6234451761692672">Font Enumeration - Chrome Platform Status</a></li>
<li><a href="https://www.chromestatus.com/feature/5082047209013248">Font Table Access - Chrome Platform Status</a></li>
</ul>


<h2>ローカルフォントとプライバシー</h2>

<p>しかしながら、ローカルフォントの情報は、個人を識別・同定しようとするフィンガープリンティングへの利用が懸念されます。従来では、例えば<a href="https://github.com/Valve/fingerprintjs2/blob/54e89b2ebdbf33853a85a7be43bd17e8b859cfc6/fingerprint2.js#L524-L711">こんなふうに</a>「フォント名のリストを決め打ちしておき、そのフォントがインストールされているか順次試す」というようなことしかできませんでした。ところが、Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> と Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> が利用可能になると、情報をまるまる吸い出すことが可能になってしまいます。インストールの有無だけでなく、<code>head</code> テーブルや <code>name</code> テーブルから、フォントのバージョンを取得することもできます<a href="#f-d7613141" name="fn-d7613141" title="フィンガープリンティングが目的であるなら、そんな丁寧なことをしなくても、バイナリのハッシュをまるごと取ってしまえば十分そうですが。">*3</a>。フォントの販売・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A5%D6%A5%B9%A5%AF%A5%EA%A5%D7%A5%B7%A5%E7%A5%F3">サブスクリプション</a>方式によっては、ユーザー情報や固有識別子をフォントファイルに埋め込むものもあるでしょう。そうすると、ほとんど確実に個人を識別できてしまいます。</p>

<p>フィンガープリンティングへの懸念は、提案されている仕様書にも<a href="https://inexorabletash.github.io/font-enumeration/#privacy">記述があります</a>。また、「会社の PC にコーポレートフォントをインストールしていると、それだけで会社が特定できちゃうよね」というような例も挙げられています。</p>

<p>これらのプライバシー対策として、Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> と Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> は、<strong><a href="https://developer.mozilla.org/ja/docs/Web/API/Permissions_API">Permissions API</a> でユーザーの許可を得てからローカルフォントにアクセスする設計</strong>になっています。本当に「プロ品質のデザインツール」だけが使うのであれば、これで落ち着くかもしれません。しかし万が一、いろんなサイトでやたらめったら濫用されるようになってしまったとしたら、許可を求めるダイアログがポコポコ出てきて、なかなかうるさい未来になるかもしれません。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash</a> 時代のローカルフォント</h2>

<p>ところで、過去はどうだったんでしょう？　実は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActionScript">ActionScript</a> には Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> のようなものがありました。<a href="https://help.adobe.com/ja_JP/FlashPlatform/reference/actionscript/3/flash/text/Font.html#enumerateFonts(%29"><code>Font.enumerateFonts(true)</code></a> を実行すると、ローカルフォントも含めてフォントを列挙することができました。このおかげで <a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash</a> 時代の画像加工ツールは、ローカルフォントによる文字入れが可能だったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash</a> の衰退・サポート終了によって不可能になり、表現力が落ちてしまいました。もちろん、プライバシー面では向上したのですが。</p>

<p>ちなみに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActionScript">ActionScript</a> の <a href="https://help.adobe.com/ja_JP/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb2.html"><code>ExternalInterface</code></a> を使うと、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActionScript">ActionScript</a> で取得したフォント名を<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a> に渡して要素のスタイルに指定する」というようなこともできました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/ActionScript">ActionScript</a> 側は<a href="https://github.com/Valve/fingerprintjs2/blob/54e89b2ebd/flash/FontList.as">これと同じ感じのコード</a>になります。実際に自分自身、内製ツールの開発で使ったこともあります。</p>

<p>ちなみにちなみに、当時は事実上、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash</a> がどこでも勝手に実行されるような状況だったので、「ページを踏んだ人のローカルフォントを列挙してこっそりサーバーに送信」というようなことが可能でした。フォント名を送信するだけでなく、「ローカルフォントで描画して送信」までしてしまえばさらに強烈ですね。フォント制作においては、制作中のフォントを自分の PC にインストールしてテストすることが多々あります。そのような状態で、悪意をもったページを踏んだ場合、制作中のフォントの情報が漏れてしまいます。言うまでもなく、わたしはやったことありませんが。</p>

<p>Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> と Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> があれば、過去に <a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash</a> で実現されていた表現力を取り戻し、さらに高度な文字組みなどを発展させることができます。アクセスにはユーザーの許可が必要になるので、プライバシー面もある程度担保されます。ただし、「このフォントは OK だけどこれはダメ」のようなアクセス制御は今のところできそうにないので、フォント制作者はうかつに [許可する] を押せなくなるかもしれません…笑</p>

<h2>その他雑感</h2>

<ul>
<li>Font Enumeration <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> で取得したフォントのリストを元に、ユーザーにフォントを選択させる場合、並べ方が大変そう

<ul>
<li>各 OS のネイティブのフォント選択ダイアログがそもそもバラバラでわりと混乱している</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> 製品もまた独自だったり</li>
</ul>
</li>
<li>前節で書いたように、フォントごとのアクセス制御ができない

<ul>
<li>いっそのこと OpenType 仕様の方に「このフォントは Web <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> からアクセスしちゃダメ」フラグを新設するとか？ :P</li>
</ul>
</li>
<li>OS 間の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0">レンダリング</a>の差がなくなったとしても、互換性のためには全く同じバージョンのフォントが各端末にインストールされている必要がある。となると、ローカルフォントだけでなく、Web フォントとの連携も考えた方がよさそう？

<ul>
<li>現状の Font Table <a class="keyword" href="http://d.hatena.ne.jp/keyword/Access">Access</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> <code>getTables()</code> は <q>This method is only usable for local fonts, and will throw an exception if called for a web font.</q> と<a href="https://inexorabletash.github.io/font-table-access/#fontface-additions">書かれている</a></li>
</ul>
</li>
<li>プライバシーまわりの懸念点がどう決着つくのか気になる</li>
</ul>


<p>実現すればおもしろいことはいろいろできそうですが、どうなるんでしょうね。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-5ce9b760" name="f-5ce9b760" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">ユーザーの端末にインストールされているフォント。デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>フォントと呼ばれることも。</span></p>
<p class="footnote"><a href="#fn-dbf8c6ce" name="f-dbf8c6ce" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">適当な文字列のダミー要素を不可視状態で用意 → 要素にチェックしたいフォントを指定 → 指定前後で要素の幅が変わったかチェック、というのが常套手段でしょう。後述のフィンガープリンティングでも使われる手法です。</span></p>
<p class="footnote"><a href="#fn-d7613141" name="f-d7613141" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">フィンガープリンティングが目的であるなら、そんな丁寧なことをしなくても、バイナリのハッシュをまるごと取ってしまえば十分そうですが。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[「aws-vault loginでChromeのウィンドウをAWSアカウント毎に分離する」を Alfred 用に作った]]></title>
        <id>https://blog.tsub.me/post/create-alfred-aws-vault-workflow/</id>
        <link href="https://blog.tsub.me/post/create-alfred-aws-vault-workflow/"/>
        <updated>2019-10-06T05:35:00.000Z</updated>
        <summary type="html"><![CDATA[<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/alfred-aws-vault-workflow">tsub/alfred-aws-vault-workflow: A Alfred workflow to open the AWS Management Console with aws-vault</a></p>

<p>Chrome 版</p>

<p><img src="https://i.gyazo.com/33341687e0419d3863f913a00997744c.gif" alt="Features for Google Chrome" /></p>

<p>Firefox (<a href="https://addons.mozilla.org/firefox/addon/multi-account-containers/">Multi-Account Container</a> extension) 版</p>

<p><img src="https://i.gyazo.com/a68e0d4cd6f9a80b659cfc1694cd85dd.gif" alt="Features for Firefox" /></p>

<p>aws-vault 自体今回初めて知ったのですが、以下の記事を読んで、複数の AWS アカウント使いには大変便利そうだったので Alfred 用のものをシュッと作りました。</p>

<p><a href="https://qiita.com/minamijoyo/items/f3cbb003a34954a32970">aws-vault loginでChromeのウィンドウをAWSアカウント毎に分離する - Qiita</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内の情報共有ツールを Qiita:Team から esa に乗り換えました]]></title>
        <id>https://developer.feedforce.jp/entry/2019/08/22/141055</id>
        <link href="https://developer.feedforce.jp/entry/2019/08/22/141055"/>
        <updated>2019-08-22T05:10:55.000Z</updated>
        <summary type="html"><![CDATA[<p>猛烈に暑かったり暑くなかったりするなか皆様いかがお過ごしでしょうか。自宅のエアコンが故障して修理待ち半月の <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>先月、5 年間使い続けてきた Qiita:Team から esa へ、情報共有ツールの乗り換えを行いました。80 名ほどの全社移行となかなか大きなプロジェクトだったので、ここに記録を残したいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#なぜ乗り換えに至ったか">なぜ乗り換えに至ったか</a><ul>
            <li><a href="#フィードフォースの情報共有文化">フィードフォースの情報共有文化</a></li>
            <li><a href="#抱えていた課題">抱えていた課題</a></li>
            <li><a href="#動き出した移行プロジェクト">動き出した移行プロジェクト</a></li>
            <li><a href="#検討した情報共有ツール">検討した情報共有ツール</a></li>
            <li><a href="#esa-に決めるまで">esa に決めるまで</a></li>
        </ul>
    </li>
    <li><a href="#社内への働きかけ">社内への働きかけ</a></li>
    <li><a href="#データ移行のノウハウ">データ移行のノウハウ</a><ul>
            <li><a href="#Emoji-の登録">Emoji の登録</a></li>
            <li><a href="#記事データの移行">記事データの移行</a></li>
            <li><a href="#プロジェクトページ記事の扱い">プロジェクトページ記事の扱い</a></li>
            <li><a href="#プライベートグループの記事の扱い">プライベートグループの記事の扱い</a></li>
            <li><a href="#メンバーの移行とデータの移行のタイミング">メンバーの移行とデータの移行のタイミング</a></li>
        </ul>
    </li>
    <li><a href="#esa-と一緒に使っている便利ツール">esa と一緒に使っている便利ツール</a><ul>
            <li><a href="#記事の自動作成自動-esa-やり機">記事の自動作成「自動 esa やり機」</a></li>
            <li><a href="#Slack-に記事-URL-から概要を展開してくれるKujaku">Slack に記事 URL から概要を展開してくれる「Kujaku」</a></li>
            <li><a href="#Emacs-x-esa-利用者におすすめemacs-helm-esa">Emacs x esa 利用者におすすめ「emacs-helm-esa」</a></li>
        </ul>
    </li>
    <li><a href="#QiitaTeam-から移行して-esa-に思ったこといろいろ">Qiita:Team から移行して esa に思ったこといろいろ</a><ul>
            <li><a href="#サポートの対応がフレンドリーかつ早い">サポートの対応がフレンドリーかつ早い！</a></li>
            <li><a href="#導入時に助かったところ">導入時に助かったところ</a></li>
            <li><a href="#導入時に困ったところ">導入時に困ったところ</a></li>
            <li><a href="#QiitaTeam-と-esa-の情報整理思想の違い">Qiita:Team と esa の情報整理思想の違い</a><ul>
                    <li><a href="#QiitaTeam-のトップページのようにすべての記事が流れていくようなものが欲しい情報のザッピングがしたい">Qiita:Team のトップページのように、すべての記事が流れていくようなものが欲しい。情報のザッピングがしたい</a></li>
                    <li><a href="#Recently-Update-が-WIP-も含むすべての記事の更新を-age-てしまう">Recently Update が WIP も含むすべての記事の更新を age てしまう</a></li>
                    <li><a href="#内部-URL-でタイトルが展開されるのは便利だった">内部 URL でタイトルが展開されるのは便利だった…</a></li>
                    <li><a href="#他人の記事をかんたんにいじれてしまう">他人の記事をかんたんにいじれてしまう</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#さいごに">さいごに</a></li>
</ul>

<h1 id="なぜ乗り換えに至ったか">なぜ乗り換えに至ったか</h1>

<h2 id="フィードフォースの情報共有文化">フィードフォースの情報共有文化</h2>

<p>もともと弊社では Qiita:Team 以前にも、Redmine や社内サーバに構築した Wiki システムを利用し、ナレッジの蓄積と共有を習慣化していました。すばらしいですね。</p>

<p>そこにビジネスチャット（当初は HipChat、現在は Slack を利用）を導入、フロー型の情報が増えていきました。Redmine や社内 Wiki のような<strong>ストック型のナレッジだけでなくフロー型の日常をまとめられる場所が欲しくなり、当時台頭してきた "今風" の情報共有ツールとして 2014年4月から Qiita:Team を使いはじめました。</strong></p>

<p>この頃の記事を見てみると、日報をはじめ、これまで Redmine や Wiki には書きづらかった（書かれたとしても個人メモとして閉じていた）「〇〇やってみた」「〇〇読んでみた」などの情報や、ちょっとした振り返りをまとめた記事が並んでいます。</p>

<p>完全なストック型（Wiki 系）と完全なフロー型（チャット系）の中間をツールとして、Qiita:Team はとてもよく機能しました。社内の情報共有文化がこれだけ育っているのも、そういう場を用意できていたことが大きいと思っています。</p>

<p>うれしいことに日報や手順書、ポエム、ノウハウなどさまざまな記事が気軽に投稿される弊社でしたが、社員が 80 名近くになるとその情報の整理に課題を感じるようになりました。</p>

<blockquote><p><em>フロー型の情報とストック型の情報について、参考記事</em></p>

<ul>
<li><a href="https://blogs.itmedia.co.jp/knowledge/2013/04/post-bd33.html">フロー情報とストック情報を分ける～情報過多の時代を生き抜くために：ナレッジ！？情報共有・・・永遠の課題への挑戦：オルタナティブ・ブログ</a></li>
</ul>
</blockquote>

<h2 id="抱えていた課題">抱えていた課題</h2>

<p>このときの課題とは、<strong>大量に増えた記事のなかから必要な記事が見つけられない</strong> ことでした。</p>

<p><figure class="figure-image figure-image-fotolife" title="情報に埋もれる我々"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122258.png" alt="f:id:tmd45:20190822122258p:plain:w380" title="f:id:tmd45:20190822122258p:plain:w380" class="hatena-fotolife" style="width:380px" itemprop="image"></span><figcaption>情報に埋もれる我々</figcaption></figure></p>

<p>記事が埋もれてしまっても検索などでかんたんに見つけられればいいのですが、残念なことに Qiita:Team の機能では <strong>検索ノウハウのある人間であれば頭を使ってなんとか意図した記事を見つけられるものの、そうでなければほとんど目的の記事を見つけられないような状況になりました。</strong> 記事を探すというだけで "頭を使う" 必要があるというのはなかなかヘビーです。</p>

<p>必要な記事が見つからず、似たような内容の記事が量産されてしまいました。埋もれてしまった古い記事はアーカイブをされることもなくときどき情報検索の邪魔をするようになりました。似たようでちょっと違うタグが乱立しました。流れてしまう情報をなんとかしようとグループ機能を試してみたこともありましたが、グループに閉じてしまうと今度はグループを跨いだ情報の流し読みが困難になりました。</p>

<p>ちなみに一時期（2015 年頃）の Qiita:Team は機能として "タグの階層化" が可能でしたが、これに頼ったタグ整理を行ってしまったことも、後々のタグ運用が難しくなる要因であったと思います。いつのまにか（2019 年確認）タグにスラッシュを入れると入力チェックに引っかかって記事が保存できなくなったことにはモヤっとしました…</p>

<p>タイトルに絞った部分一致やタグによる検索は可能でしたが、これが上手く機能するように、あとから膨大な記事やタグを整理するのは、なかなか骨の折れる作業です。</p>

<p>ナレッジマネジメントに特別な興味のないひとも徐々に「なんとなく使いづらいな…」と感じるようになっていました。</p>

<h2 id="動き出した移行プロジェクト">動き出した移行プロジェクト</h2>

<p>社内 Slack に "情報共有ツールをなんとかしたい" チャンネルが生まれたのが 2018/10/18、私がそこに Join したのが 2018/11/13 でした。</p>

<p>他のツールに乗り換える前に、現状のナレッジマネジメントのルールやポリシーを整備したほうがいいのではという議論は何度も発生しました。Qiita:Team のプロジェクトページなどを使って INDEX 記事を作成したり、タグについて議論したり、Slackbot に特定の発言をしたときに記事 URL を返すようにさせたり…</p>

<p>プロジェクトページで INDEX を作ると、今度は "プロダクト用のプロジェクトページ"（紛らわしいですね 😅）が埋もれてしまうということもありました。これは一社内に多くのプロダクトを持っている弊社ならではかもしれません。</p>

<p>このまま「工夫」でなんとかするには、情報整理が得意な人間が「がんばり」続ける必要がありそうでした。情報整理のポリシーなどを定めたとしても、定期的にそれをリマインドし、自警する誰かが必要になるのではないかと思いました。</p>

<p>そのため他の情報共有ツールについて少しずつ調査やトライアルをしていきました。</p>

<h2 id="検討した情報共有ツール">検討した情報共有ツール</h2>

<p>たくさんあるので詳細は割愛しますが、わりと最後まで有力候補だったのが Kibela でした。開発の動きが活発に見えましたし、信頼感のある著名なエンジニアの方が関わっていることも知っていたので強い興味を持っていました。その他、挙がったツールをご紹介しておくと DocBase, marchily, Scrapbox など、そして esa です。</p>

<p>いろんなツールを検討するなかで、解決したいことと求める条件をざっくりと以下のようにまとめました。</p>

<ul>
<li>記事検索のしやすさ</li>
<li>「プロダクト毎のグループ」と「社内活動毎のグループ」の区別（できれば）</li>
<li>「日報」との区別</li>
<li>チームをまたいで誰でも全体を眺められる感じ</li>
<li>ナレッジをマネジメントしたい</li>
<li>エンジニアも総合職も使いやすい</li>
</ul>


<p>何かを区別して分類したいというのは、つまりカテゴリなりディレクトリなりが欲しいということで、DocBase を試したときに「いいな」と思ったポイントでした。</p>

<p>またプロダクトでチームが分かれていても、情報を完全に分断してしまいたくないという思いが以前からあり、他のツールを触るなかでもよく気にしていたポイントでした。この部分は Qiita:Team のトップページのように、すべての情報が流れてザッピングできるものがよかったです。</p>

<p>そんなこんなで仕事の合間にいろいろ試していたら 2019 年も春になっていました。どのツールも一長一短なうえに、80 名近くのメンバーを一度に動かす POWER が必要です。当時の自分の Slack 発言曰く「移行したい、と、移行めんどくさいのはざま」でした。</p>

<h2 id="esa-に決めるまで">esa に決めるまで</h2>

<p>はざまに居る間もどんどん記事は増えていくので、その都度どうしたらその記事が埋もれずに済むか悩んでいました。ここでもまだ「Qiita:Team の記事を一斉に整理する時間をとれば…」みたいな話は出ていました。諦めが悪い（笑）</p>

<p>このへんの時期に他社さんで esa を導入したとか、（Qiita:Team から）esa に乗り換えたという記事を目にすることが増えました。</p>

<ul>
<li><a href="https://techblog.lclco.com/entry/2019/01/28/170000">Qiita:Teamからesa.ioに乗り換えました - LCL Engineers' Blog</a></li>
<li><a href="https://note.mu/naofumit/n/n028df2984256">カルチャー崩壊と再構築。 Goodpatchが取り組んだ組織デザインの2年間 - 前編｜naofumit｜note</a></li>
</ul>


<p>例のチャンネルメンバーのなかで「esa を使うとしたらどうやって使ったらカオスにならずに済むだろう」みたいな話をしていました。個人的にも（元から好きなサービスだったこともあり）なんとなく esa にしたいなぁと思い始めて、他社の事例を積極的に探しに行きました。</p>

<p>esa の中の人 (\( ⁰⊖⁰)/) がまとめている「<a href="https://docs.esa.io/posts?q=in%3A%22esa%E3%83%88%E3%83%BC%E3%82%AF%22+&amp;s=created&amp;o=desc">esa トーク</a>」の記事も穴が開くほど読みました。とくに大人数で利用されているピクシブさんと、カテゴリルールなどかなり具体的なお話をされていた Misoca さんの記事は、その後の移行のときにもとても参考になりました。</p>

<ul>
<li><a href="https://docs.esa.io/posts/256">esaトーク/サービスへの思いをesaに乗せて、ポエム駆動開発が捗る ─ Vol4.ピクシブ株式会社 様 - docs.esa.io</a></li>
<li><a href="https://docs.esa.io/posts/264">esaトーク/日常もesaもハックするリモートワーカー集団 ─ Vol.5 株式会社Misoca様 - docs.esa.io</a></li>
</ul>


<p>結果的に移行先の決め手となったのは、利用事例のわかりやすさと、すでに利用しているひとたちからの評判の良さかもしれません。</p>

<p>運命の 2019/04/24、まだ「移行めんどくさい」のはざまでウゴウゴしていた我々を動かしたのは、これまでナレッジマネジメントに悩んでいたチャンネルメンバー…ではない役員メンバーからのこんなお言葉でした。</p>

<blockquote><p>"いまの情報共有ツールの使いづらさって、だれも問題に感じてないの？"<br/>
"ほかに良いツールがあるなら乗り換えたほうがいいよ！"</p></blockquote>

<p>「ですよね！！？」という衝撃とともに個人的に火もついて、ここでやっと「情報共有ツールの移行、ワイが esa で進めたるでー！（POWER）」となったのでした。</p>

<p><figure class="figure-image figure-image-fotolife" title="※画像はイメージです"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122700.png" alt="f:id:tmd45:20190822122700p:plain:w380" title="f:id:tmd45:20190822122700p:plain:w380" class="hatena-fotolife" style="width:380px" itemprop="image"></span><figcaption>※画像はイメージです</figcaption></figure></p>

<h1 id="社内への働きかけ">社内への働きかけ</h1>

<p>esa 移行を決心してから、社内への働きかけも行っていきました。</p>

<p>一番大切なのは <strong>情報管理ツールを移行したい思いと目的</strong> で、これは前述のようにいろいろ考えてきたので１つの記事を作って社内に共有しました。</p>

<p>また、移行プロジェクトに関わってくれたデザイナー氏が、移行の意欲を高めるために弊社のキャラクターと esa の (\( ⁰⊖⁰)/) を（勝手に）コラボしたイメージを作ってくれて、なかなかに社内の評判もよかったです。こういう「たのしい」工夫も大事だと思います。</p>

<p><figure class="figure-image figure-image-fotolife" title="今も esa の HOME ページを飾る非公式コラボ画像"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122909.png" alt="f:id:tmd45:20190822122909p:plain" title="f:id:tmd45:20190822122909p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>今も esa の HOME ページを飾る非公式コラボ画像</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="移行期間中に社内の士気を上げるため貼っていたポスター"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822122947.jpg" alt="f:id:tmd45:20190822122947j:plain:w320" title="f:id:tmd45:20190822122947j:plain:w320" class="hatena-fotolife" style="width:320px" itemprop="image"></span><figcaption>移行期間中に社内の士気を上げるため貼っていたポスター</figcaption></figure></p>

<p>そこからトライアルへの協力と、実際のアカウント移行のお願いなども同様に進めました。とくに新卒の若者たちは新しいツールを使いこなそう(｀・ω・´)+という意欲も高く、積極的に使い方を聞きに来てくれたり、同期で共有したりしていて頼もしかったです。</p>

<p>社長にも「とりあえず１つ何か記事書いてください！」とお願いしたら、もともと Qiita:Team で書いていた週報をシュッと esa で書いてくれました。おかげでそれを読むためにアカウント登録するメンバーも増え、スムーズに移行できました。</p>

<h1 id="データ移行のノウハウ">データ移行のノウハウ</h1>

<p>ここからはデータの移行で得た気づきなどです。
ご紹介しているスクリプトの利用につきましては保証しかねますのでご了承ください！</p>

<h2 id="Emoji-の登録">Emoji の登録</h2>

<p>記事の移行より先にやったのが Emoji の登録でした。</p>

<p><strong>Qiita:Team は Slack と連携して Emoji を同期させる機能がありますが、esa にはその機能はありません。</strong> API で登録することができるので、ひとまず更新のことは考えず、その時点の Slack Emoji を吸い出して、esa に流しこみました。Slack Emoji を取ってくるスクリプトは拾いものなので割愛します、すみません。</p>

<p>流し込んだスクリプトはこちら。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/master/slack_emoji_import.rb">qiita2esa/slack_emoji_import.rb at master · tmd45/qiita2esa</a></li>
</ul>


<p>すでに登録済みの Emoji に重複したキーワードだと <code>400 Bad Request</code> になります。また Slack は日本語キーワードでの Emoji 登録が可能ですが、esa のほうでは日本語キーワードには対応していないので、予め除外するか当該エラーでスキップさせましょう。</p>

<p>余談ですが、一度、Emoji の画像ファイルとキーワードをあべこべに登録してしまってカオスを生んでしまいました。いまはリカバリ済みです:(；ﾞﾟ'ωﾟ'):</p>

<p><figure class="figure-image figure-image-fotolife" title="ありがたさ → からい。からいもの好きなひとか！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123239.png" alt="f:id:tmd45:20190822123239p:plain:w230" title="f:id:tmd45:20190822123239p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>ありがたさ → からい。からいもの好きなひとか！</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="いいとおもう〜 → 却下。真逆！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123310.png" alt="f:id:tmd45:20190822123310p:plain:w230" title="f:id:tmd45:20190822123310p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>いいとおもう〜 → 却下。真逆！</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="ムズい → 輪廻転生。ｿｳﾃﾞｽﾈ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123343.png" alt="f:id:tmd45:20190822123343p:plain:w230" title="f:id:tmd45:20190822123343p:plain:w230" class="hatena-fotolife" style="width:230px" itemprop="image"></span><figcaption>ムズい → 輪廻転生。ｿｳﾃﾞｽﾈ</figcaption></figure></p>

<h2 id="記事データの移行">記事データの移行</h2>

<p>Qiita:Team の記事エクスポート機能（Owner のみ可能）で得られるデータは１記事＝１JSON ファイルになっていて、メタ情報やコメントも含まれています。</p>

<p>esa に移行するために以下のようにしました。</p>

<p>▼記事作成・更新 API</p>

<table>
<thead>
<tr>
<th> esa パラメータ </th>
<th> 内容 </th>
<th> 注意点 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>name</code> </td>
<td> 記事タイトル </td>
<td> <code>/</code> や <code>#</code> は数値参照に置き換える（カテゴリやタグになってしまうのを避ける） </td>
</tr>
<tr>
<td> <code>category</code> </td>
<td> カテゴリ </td>
<td> <code>(unsorted)/all</code> 移行用に定義 </td>
</tr>
<tr>
<td> <code>body_md</code> </td>
<td> 本文 Markdown </td>
<td> 1. パラメータとして指定できないメタ情報（記事作成日時など）を本文に追加する形で残す<br>2. 本文中の他記事 URL や画像 URL を置換<br>3. 本文中の <code>ユーザID</code> を小文字化（ <code>ScreenName</code> に合わせるため） </td>
</tr>
<tr>
<td> <code>user</code> </td>
<td> 記事作成者 </td>
<td> 記事作成者の <code>ScreenName</code> を指定 </td>
</tr>
<tr>
<td> <code>created_by</code> </td>
<td> 記事作成者（上書き） </td>
<td> 同上。更新時に Owner 権限をもつ token でのみ上書き可能 </td>
</tr>
</tbody>
</table>


<p>▼コメント作成 API</p>

<table>
<thead>
<tr>
<th> esa パラメータ </th>
<th> 内容 </th>
<th> 注意点 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>body_md</code> </td>
<td> コメント本文 Markdown </td>
<td> 記事本文と同様にメタ情報の追加と、他記事 URL、画像 URL、ユーザID の置き換えを行う </td>
</tr>
<tr>
<td> <code>user</code> </td>
<td> コメント作成者 </td>
<td> コメント作成者の <code>ScreenName</code> を指定 </td>
</tr>
</tbody>
</table>


<p>esa API の利用については <a href="https://docs.esa.io/#path=%2Fdev">公式の開発者向けドキュメント</a> を参照ください。</p>

<p><figure class="figure-image figure-image-fotolife" title="記事本文に追加したメタ情報の例"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822123714.png" alt="f:id:tmd45:20190822123714p:plain" title="f:id:tmd45:20190822123714p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>記事本文に追加したメタ情報の例</figcaption></figure></p>

<p>今回は「タグ」の移行をしませんでした。一度リセットして、混沌としたタグの整理ができればと思ったんですが、タグがなくなったことで意味がわからなくなってしまった記事が意外とあって、メタ情報と一緒に移行しておけばよかったな、と思いました。</p>

<p>インポートの流れとして <strong>先に記事 URL や画像 URL だけ esa 上で作っておいて、記事本文を流し込む段階で記事中の URL の置換</strong> を行いました。先に作った URL たちは中間データとしてテキスト（.tsv）に吐き出しました。口頭だとややこしいので詳しくは拙作のコードで。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/import_articles/article_import.rb">qiita2esa/article_import.rb at import_articles · tmd45/qiita2esa</a></li>
</ul>


<p>使い捨て用に書きなぐったものなのでお恥ずかしいですが、なんか頑張ってるのが伝わればいいかなと思います 🙈</p>

<p>esa の API 利用はもちろんですが、画像取得のために Qiita:Team の API も利用します。</p>

<h2 id="プロジェクトページ記事の扱い">プロジェクトページ記事の扱い</h2>

<p>Qiita:Team のプロジェクトページとなっている記事も１記事＝１ファイルです。ただし通常の記事と、含まれている属性が若干異なるため注意は必要です。</p>

<p>基本的には通常の記事と同じく、渡せるメタ情報は渡して、Markdown の本文を投入するという感じで進めました。</p>

<p>もちろん esa には「プロジェクトページ」という概念はないので、適当に <code>(unsorted)/projects</code> のようなカテゴリを定義してそこにまとめました。</p>

<ul>
<li><a href="https://github.com/tmd45/qiita2esa/blob/import_articles/project_import.rb">qiita2esa/project_import.rb at import_articles · tmd45/qiita2esa</a></li>
</ul>


<p>実はメインの記事移行より先に、件数の少ないこちらを試していたため、結果的に URL の置き換え処理などすっかり忘れていました。INDEX の用途で利用していたページではこの置き換えを行わないとツラいと思いますので、お気をつけください。</p>

<h2 id="プライベートグループの記事の扱い">プライベートグループの記事の扱い</h2>

<p>プライベートグループでは、人事や役員会議などで扱う社内にも非公開の情報が含まれていました。これらは esa の決済連結機能を使って、別の esa チームを作成しデータ移行しました。</p>

<p>エクスポートした JSON データは、記事の所属するグループもパラメータとして持っているので、そこを見てファイルごと分別しておきます。</p>

<p>スクリプトが見当たらなくて自分でどうやったんだっけ…と思いましたが、雑に以下のコマンドで分類してました。ご参考まで 😇</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> path/to/export_articles
$ ag <span class="synSpecial">-l</span> <span class="synStatement">'</span><span class="synConstant">&quot;url_name&quot;: &quot;group_name&quot;</span><span class="synStatement">'</span> ./*.json | xargs <span class="synSpecial">-I</span>% <span class="synStatement">mv</span> % ./group_name
</pre>


<h2 id="メンバーの移行とデータの移行のタイミング">メンバーの移行とデータの移行のタイミング</h2>

<p>今回は先にメンバー全員に、あるタイミングから新規記事は esa で作ってもらうよう案内しました（それゆえに Emoji の登録を先にやった）。</p>

<p>Qiita:Team 側に新しい記事が作成されなくなったのを見計らって、告知しつつ、記事データのエクスポートと、esa への投入を開始しました。</p>

<p>記事の参照は一時的に Qiita:Team と esa の双方を見ることになりましたが、"記事を書けない期間" を無くして移行できたのはよかったです。</p>

<h1 id="esa-と一緒に使っている便利ツール">esa と一緒に使っている便利ツール</h1>

<p>事例といえば先駆者たちの <a href="https://docs.esa.io/posts/25">esa 公式の紹介記事まとめ</a> も大変助かりました。弊社でもいくつかの便利なツールを併用しています。</p>

<h2 id="記事の自動作成自動-esa-やり機">記事の自動作成「自動 esa やり機」</h2>

<p>用意したテンプレートを元に、指定した曜日に自動で記事を生成してくれる Heroku アプリです。</p>

<ul>
<li><a href="https://github.com/standfirm/esa_feeder">standfirm/esa_feeder - GitHub</a></li>
<li><a href="https://tech.misoca.jp/entry/2017/12/01/110000">自動esaやり機とクリーンアーキテクチャ - Misoca開発者ブログ</a></li>
</ul>


<p>弊社でも定期的なミーティングの議事録は、まず WIP の空記事を用意して、事前に議題を追記したり、話しながら記録したりということをやっています。Qiita:Team 時代からテンプレートを元に人が WIP 記事を作って共有していましたが、"誰か" がリマインドに気づいて記事を作成するといったことが不要になりました。</p>

<p>記事の作成と同時に指定した Slack チャンネルへの通知も行われることで、議題の追記のリマインドも兼ねていて非常に便利に利用しております！</p>

<h2 id="Slack-に記事-URL-から概要を展開してくれるKujaku">Slack に記事 URL から概要を展開してくれる「Kujaku」</h2>

<p>最近ツールの更新があってコメントURL からコメント内容も展開されるようになった、Slack x esa の情報共有を促進してくれる便利ツール。こちらもバックエンド部分は Heroku アプリです。</p>

<ul>
<li><a href="https://github.com/FromAtom/Kujaku">FromAtom/Kujaku - GitHub</a></li>
<li><a href="https://inside.pixiv.blog/fromatom/5684">Closedなesaの記事URLをSlackに貼ったら展開されるようにした - pixiv inside</a></li>
<li><a href="https://fromatom.hatenablog.com/entry/2019/08/06/173251?_ga=2.83644766.993732209.1566361511-952403895.1555303711">#esa のURLを展開してくれるKujakuで、コメントも展開できるようになりました。 - 文字っぽいの。</a></li>
</ul>


<p>ログインしないと見られないようなクローズドなページの URL は、Slack に流してもその内容が展開されません。それを解決してくれるのが Slack の "Unfurling links in messages" という機能なのですが、その機能をかんたんに使えるようにしてくれたのがこのツールです。</p>

<p>これまでは URL と一緒にタイトルなども投稿してもらわないと「何？この URL…」となっていたのが、URL を貼るだけで手軽に共有できるようになったのはハイパー捗りました！</p>

<h2 id="Emacs-x-esa-利用者におすすめemacs-helm-esa">Emacs x esa 利用者におすすめ「emacs-helm-esa」</h2>

<p>手前味噌ですが、esa 移行をきっかけに弊社の Emacs 使い <a href="http://blog.hatena.ne.jp/masutaka26/">id:masutaka26</a> が作った Emacs-Helm Interface もご紹介。</p>

<ul>
<li><a href="https://github.com/masutaka/emacs-helm-esa">masutaka/emacs-helm-esa - GitHub</a></li>
<li><a href="https://masutaka.net/chalow/2019-06-10-1.html">esa の記事を Emacs から素早く開ける helm-esa.el を作った / マスタカの ChangeLog メモ</a></li>
</ul>


<p>普段利用している環境から手軽に記事が探せるのは強いですね！よろしければお試しください。</p>

<h1 id="QiitaTeam-から移行して-esa-に思ったこといろいろ">Qiita:Team から移行して esa に思ったこといろいろ</h1>

<p>なによりも課題であった「記事検索が上手くいかない」件はすっきり解決しました！
以前は言いづらかった「○○で検索してみてください！」というのが気軽に言えるようになってよかったです。</p>

<p>それ以外の部分を挙げてみたいと思います。</p>

<h2 id="サポートの対応がフレンドリーかつ早い">サポートの対応がフレンドリーかつ早い！</h2>

<ul>
<li>esa のフィードバックフォームから投げたものに対する反応が早い</li>
<li>相談に対する回答も丁寧でとてもありがたい</li>
<li>バグ報告したらすぐ直って <del>社内で２，３人鼻血出した</del> 素敵</li>
<li><a href="https://docs.esa.io/#path=%2Fpolicies">情報セキュリティポリシー、運用ポリシーが公開されている</a>ので社内のPマークチェックもスムーズでした（確認にもご協力いただけて助かりました）</li>
</ul>


<p>移行するデータ量が多いことは分かっていたので、先に esa の人に「たくさんデータ移行する予定なんですが大丈夫ですか…？」と連絡してみました。</p>

<p><strong>移行当時の Qiita:Team メンバー数が 79 人、記事数が 5 万記事以上ありました</strong>（あとで気づきましたが、画像も相当な数とサイズがありましたね…）。esa の深谷さんや越川さん、赤塚さんからすぐにお返事をいただいて、とても助かりました。</p>

<h2 id="導入時に助かったところ">導入時に助かったところ</h2>

<ul>
<li><strong>ドメイン制限が可能な Google ログイン</strong>

<ul>
<li>G Suite 利用のため、ソーシャルログインでアカウント管理が一元化できてハッピーです</li>
</ul>
</li>
<li><strong>「添付ファイルに関するセキュアオプション」→ esaにログイン中のみ添付ファイルへのアクセスを可能にする</strong>

<ul>
<li>esa 記事の外部公開ができなくなってしまうのは残念ですが、これがあると安心して業務情報をまとめられるので非常に助かります</li>
</ul>
</li>
<li><strong>「複数チームの連結決済」</strong>

<ul>
<li>Qiita:Team 利用時から、人事や経営に関わるプライベートグループの運用がありました。これを引き継ぐため、メンバーを限定した esa チームを作り、連結決済の設定をしています</li>
</ul>
</li>
<li><strong>「Webhook・アプリ連携」での Slack 連携</strong>

<ul>
<li>Qiita:Team のころから Slack にフィードを流すという運用をしていたので、同様のものがあり助かりました</li>
</ul>
</li>
</ul>


<h2 id="導入時に困ったところ">導入時に困ったところ</h2>

<p>アカウント登録のとき <strong><code>Name</code> と <code>ScreenName</code> の違いが分かりづらかった</strong>ようです。<code>Name</code> のほうに氏名、<code>ScreenName</code> にユーザID を入れてねー、という説明が必要でした。</p>

<p>また移行ならではですが、esa の <code>ScreenName</code> では、Qiita:Team の <code>ユーザ名</code> で使えた「英大文字」が使えません。そのため Qiita:Team で英大文字を含む <code>ユーザ名</code> を利用していた場合には、すべて小文字に置き換えたものにしてもらいました。</p>

<p>アカウント登録の案内にこのような注意を書きました。どう判定させるかは移行スクリプトの作りに依ります。</p>

<blockquote><p>大文字を小文字に置き換えた場合も「同一のIDである」と判断します :pray:</p>

<ul>
<li>Qiita で <code>ichiro3</code> → esa で <code>ichiro3</code> ⇒ OK ✅ （完全に一致）</li>
<li>Qiita で <code>Taro-san</code> → esa で <code>taro-san</code> ⇒ OK ✅（小文字になっただけ）</li>
<li>Qiita で <code>Hanako99</code> → esa で <code>99hanako</code> ⇒ NG 💥（同一と判断できません）</li>
</ul>


<p>大文字・小文字とは別の話ですが、ハイフンやアンダーバーを使われている方は間違えないようにお気をつけください。</p>

<ul>
<li>Qiita で <code>Taro-san</code> → esa で <code>taro_san</code> ⇒ NG 💥（ハイフンがアンダーバーに。同一と判断できません）</li>
</ul>
</blockquote>

<h2 id="QiitaTeam-と-esa-の情報整理思想の違い">Qiita:Team と esa の情報整理思想の違い</h2>

<p>見出しのとおり、２つのツールは情報整理に対する姿勢が異なります。それゆえに移行して戸惑いの声が挙がったのは事実です。</p>

<p>これらの意見は「esa も Qiita:Team と同じようにすべき」という話ではありません。UI や使い方が変われば戸惑うひとがいるのは当たり前で、いずれ良い方向に慣れるか、悪い方向に慣れるか分かれます。</p>

<p>使い続けて感じる不便な点は、きちんとフィードバックすれば答えてくれるサービスだと思うので、そこは真摯にフィードバックしていきましょう 💪</p>

<h3 id="QiitaTeam-のトップページのようにすべての記事が流れていくようなものが欲しい情報のザッピングがしたい">Qiita:Team のトップページのように、すべての記事が流れていくようなものが欲しい。情報のザッピングがしたい</h3>

<p>esa では "POSTS" のページがそれに当たりますが、Qiita:Team に慣れていたメンバーからすると「トップページ」から１ステップ踏まないとそれが見えないという戸惑いがありました。"POSTS" ページに移動しても、ソート順が意図した順でない（ソート順を変更するというリテラシーも必要になる）ことでも迷いが発生したようでした。</p>

<p>これについては、"HOME" の README 記事に便利リンク集を追加して、周知することでひとまず解決できました。</p>

<p><figure class="figure-image figure-image-fotolife" title="README に作った「オススメ検索リンク」集"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822125138.png" alt="f:id:tmd45:20190822125138p:plain" title="f:id:tmd45:20190822125138p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>README に作った「オススメ検索リンク」集</figcaption></figure></p>

<h3 id="Recently-Update-が-WIP-も含むすべての記事の更新を-age-てしまう">Recently Update が WIP も含むすべての記事の更新を age てしまう</h3>

<p>これについては esa のコンセプトにどうしても馴染めないメンバーがいくらかいるという話でもあります。</p>

<p><figure class="figure-image figure-image-fotolife" title="esa.io より、esa のコンセプト"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20190822/20190822125319.png" alt="f:id:tmd45:20190822125319p:plain:w460" title="f:id:tmd45:20190822125319p:plain:w460" class="hatena-fotolife" style="width:460px" itemprop="image"></span><figcaption>esa.io より、esa のコンセプト</figcaption></figure></p>

<p>まず <strong>「下書き」機能が無いことで、以前より記事が書きづらい、公開もしづらくなった</strong> という声がありました。</p>

<p>不完全な状態では公開したくなく「下書き」のような非公開の状態で推敲を重ねて、キチンとした記事にしてから公開したい、という意見です。これを他人に強制するような人は見かけませんが「自分が記事を書くならそのようにしたい」と思うメンバーは年齢関係なくいる状況です。単純に下書き機能を「個人メモを置く場所」として使っていたという人もいました。</p>

<p>また、<strong>WIP で書いた記事を更新したときに、Recently Update で更新順として上がってきてしまうことに不便を感じる</strong> 声もあります。これは記事を書く方も、見る方もそうで「未完成の間は sage 進行したい」「更新された記事は知りたいけど ShipIt されてから読みたい」という状況です。 <code>[skip notice]</code> しても Recently Update には流れてくるというのも戸惑われているようです。</p>

<p>読む側は、先程のザッピングの検索クエリと同じもので解決できるので、そちらを利用してもらっています。</p>

<p>書く側に対しては、気にせずガンガン更新しちゃいなよ！と意識改革していくしかないかなと思っています（自分は未完成でも気にしない星人）。</p>

<h3 id="内部-URL-でタイトルが展開されるのは便利だった">内部 URL でタイトルが展開されるのは便利だった…</h3>

<p>Qiita:Team では、Qiita:Team 内の URL を貼るだけで、記事の表示時にリンク先記事のタイトル（と作成者のアイコン）が自動で展開されていました。"リンクされた記事" のタイトルを修正したときに、"リンクしている記事" 側を修正しなくてよいのは大変便利でした。</p>

<ul>
<li><a href="https://blog.qiita.com/132008265764-2/">Qiita:Teamで、チーム内記事へのリンクのタイトルが自動で表示されるようになりました - Qiita Blog</a></li>
</ul>


<p>情報整理をしていると、よりわかりやすいタイトルに修正したくなることも多いですし、そういう記事に限っていろんなところから参照されていたりして…</p>

<p>いまでもこの機能は欲しいなーと思います（たしか esa にもフィードバックを送らせていただいたと思う）。</p>

<h3 id="他人の記事をかんたんにいじれてしまう">他人の記事をかんたんにいじれてしまう</h3>

<p>これは最近不安を訴える人が減ってきたので、みんな慣れてきたのかもしれません。</p>

<p>Qiita:Team のときは「共同編集の記事」という区別があったり、「編集リクエスト」の機能があったため、うっかり他人の記事を触ってしまうということがありませんでした。これに慣れていると、逆にどの記事でも誰でもいじれてしまうのは、不安があったようです。</p>

<p>編集履歴から内容をロールバックすることもできるし、（自分のようなおじさんから言わせれば）昔からある Wiki だってそういうものですよ、という感じで、こちらも意識改革をしていくのがよいと思いました。</p>

<p>誰でも触れるおかげで、記事を書いた人に依存せずに情報の整理ができるというのはとても良い点だと感じます。</p>

<p>記事の Delete が出来てしまうことに不安を持つ人は多いかもしれませんが、まず記事の削除自体が２ステップ踏む UI になっていて「うっかり」することは少ないのではないかと思います。</p>

<h1 id="さいごに">さいごに</h1>

<p>情報共有ツールの移行で得られた結果は以下のようなものです。</p>

<ul>
<li>検索で記事が見つけやすくなった</li>
<li>ナレッジの階層化ができるようになった</li>
<li>ナレッジの構造化を意識するようになった</li>
<li>フロー情報とストック情報を区別できるようになった</li>
<li>移行をきっかけに記事の整理が行われた</li>
</ul>


<p>問題を感じることに鈍感にならず、今後も「日々混沌、日々進化<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」のバリューを実践していきたいと思います。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>弊社バリューである FF memes の１つです。詳しくはこちら: <a href="https://recruit.feedforce.jp/">https://recruit.feedforce.jp/</a> <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Dynamoid のスレッドセーフではない実装を直しました]]></title>
        <id>https://developer.feedforce.jp/entry/2019/08/13/183130</id>
        <link href="https://developer.feedforce.jp/entry/2019/08/13/183130"/>
        <updated>2019-08-13T09:31:30.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは。インフラエンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>私は Dynamoid のメンテナではないのですが、弊社内で今回それなりに大きい問題が起きて、得た知見も大きかったため記事にしました。</p>

<h2>TL;DR</h2>

<p>Dynamoid にスレッドセーフではない実装があったが <a href="https://github.com/Dynamoid/dynamoid/pull/373">PR をマージしてもらって</a>修正済み。</p>

<p>2019/08/13 時点ではまだリリースされていないようなので、エラーで困っている方は master ブランチをお使いください。</p>

<h2>今回起きた問題</h2>

<p>弊サービスでは Sidekiq 上で Dynamoid を使っています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDynamoid%2Fdynamoid" title="Dynamoid/dynamoid" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Dynamoid/dynamoid">github.com</a></cite></p>

<p>基本的に問題なく稼働していたのですが、デプロイ時に Sidekiq を再起動した後、Bugsnag に以下のような二種類のエラーが継続的に飛んできました。</p>

<p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;[]&#x27; for nil:NilClass"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182531.png" alt="f:id:tsub511:20190809182531p:plain" title="f:id:tsub511:20190809182531p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;&#x5B;&#x5D;&#x27; for nil:NilClass</figcaption></figure></p>

<p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182800.png" alt="f:id:tsub511:20190809182800p:plain" title="f:id:tsub511:20190809182800p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query</figcaption></figure></p>

<p>このエラーが起きると、自然には回復しないため、Sidekiq のワーカーを再起動する必要があります。</p>

<p>また、<code>NoMethodError</code> という一般的な例外クラスのため ActiveJob の <code>retry_on</code> によるリトライ処理の考慮はしておらず、大事なジョブが実行されないままになってしまうのも問題です。</p>

<p>エラーをパッと見ただけでは、キャッシュの実装に考慮漏れがあるのかな？とか、インスタンスが生成されていて<a href="https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb">コード上ではメソッドが実装されている</a>のになんで undefined method エラーが起きるんだ？などと、不思議なエラーが出ていて調査が難航しそうな印象でした。</p>

<h2>何が原因だったのか</h2>

<p>Sidekiq + Dynamoid でピンと来る方もいると思いますが、エラーの原因は Dynamoid にスレッドセーフではない実装があったことでした。</p>

<p>スレッドセーフではない実装がどこにあったのか探すために、ここで発生していたエラーをもう一度見てみます。</p>

<blockquote><p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;<span data-unlink>&#x27; for nil:NilClass"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182531.png" alt="f:id:tsub511:20190809182531p:plain" title="f:id:tsub511:20190809182531p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;</span>&#x27; for nil:NilClass</figcaption></figure></p></blockquote>

<p>まず 1 つ目のエラーは <code>nil</code> に対して <code>#[]</code> を呼び出そうとしてエラーになっていますが、<code>nil</code> になっている変数は <code>table_cache</code> です。</p>

<p><code>table_cache</code> は以下で初期化されています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb#L66-L69</span>
<span class="synPreProc">def</span> <span class="synIdentifier">connect!</span>
  <span class="synIdentifier">@client</span> = <span class="synType">Aws</span>::<span class="synType">DynamoDB</span>::<span class="synType">Client</span>.new(connection_config)
  <span class="synIdentifier">@table_cache</span> = {}
<span class="synPreProc">end</span>
</pre>


<p>そして、この初期化のための <code>Dynamoid::AdapterPlugin::AwsSdkV3#connect!</code> を呼び出しているのは <code>Dynamoid::Adapter#adapter</code> です。</p>

<p><code>adapter.connect!</code> の部分に <code>if adapter.respond_to?(:connect!)</code> という条件がありますが、ここが <code>false</code> になっていて <code>adapter.connect!</code> が実行されていないため、<code>table_cache</code> の初期化処理が動いていないようです。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L29-L37</span>
<span class="synPreProc">def</span> <span class="synIdentifier">adapter</span>
  <span class="synStatement">unless</span> <span class="synIdentifier">@adapter_</span>.value
    adapter = <span class="synConstant">self</span>.class.adapter_plugin_class.new
    adapter.connect! <span class="synStatement">if</span> adapter.respond_to?(<span class="synConstant">:connect!</span>)
    <span class="synIdentifier">@adapter_</span>.compare_and_set(<span class="synConstant">nil</span>, adapter)
    clear_cache!
  <span class="synStatement">end</span>
  <span class="synIdentifier">@adapter_</span>.value
<span class="synPreProc">end</span>
</pre>


<p>2 つ目のエラーも見てみます。</p>

<blockquote><p><figure class="figure-image figure-image-fotolife" title="undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20190809/20190809182800.png" alt="f:id:tsub511:20190809182800p:plain" title="f:id:tsub511:20190809182800p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>undefined method &#x60;query&#x27; for #&lt;Dynamoid::AdapterPlugin::AwsSdkV3:0x00000000078dc1b8&gt; Did you mean? to_query</figcaption></figure></p></blockquote>

<p>こちらは <code>Dynamoid::AdapterPlugin::AwsSdkV3</code> のインスタンス <code>adapter</code> に対して <code>query</code> を実行しようとしてメソッドが定義されていないというエラーです。</p>

<p>しかし、実際のコードにはメソッドが定義されています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>https<span class="synConstant">:/</span>/github.com/<span class="synType">Dynamoid</span>/dynamoid/blob/v3.<span class="synConstant">2.0</span>/lib/dynamoid/adapter_plugin/aws_sdk_v3.rb<span class="synComment">#L489-L500</span>
 <span class="synPreProc">def</span> <span class="synIdentifier">query</span>(table_name, options = {})
  <span class="synType">Enumerator</span>.new <span class="synStatement">do</span> |<span class="synIdentifier">yielder</span>|
    table = describe_table(table_name)

    <span class="synType">Query</span>.new(client, table, options).call.each <span class="synStatement">do</span> |<span class="synIdentifier">page</span>|
      yielder.yield(
        page.items.map { |<span class="synIdentifier">row</span>| result_item_to_hash(row) },
        <span class="synConstant">last_evaluated_key</span>: page.last_evaluated_key
      )
    <span class="synStatement">end</span>
  <span class="synStatement">end</span>
 <span class="synPreProc">end</span>
</pre>


<p>視点を変えて、<code>adapter</code> インスタンスを定義しているコードを見てみると、やはり <code>Dynamoid::Adapter#adapter</code> に行き着きます。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L29-L37</span>
<span class="synPreProc">def</span> <span class="synIdentifier">adapter</span>
  <span class="synStatement">unless</span> <span class="synIdentifier">@adapter_</span>.value
    adapter = <span class="synConstant">self</span>.class.adapter_plugin_class.new
    adapter.connect! <span class="synStatement">if</span> adapter.respond_to?(<span class="synConstant">:connect!</span>)
    <span class="synIdentifier">@adapter_</span>.compare_and_set(<span class="synConstant">nil</span>, adapter)
    clear_cache!
  <span class="synStatement">end</span>
  <span class="synIdentifier">@adapter_</span>.value
<span class="synPreProc">end</span>
</pre>


<p><code>self.class.adapter_plugin_class.new</code> で生成したものをメモ化しています。</p>

<p>メモ化には <a href="https://github.com/ruby-concurrency/concurrent-ruby">concurrent-ruby</a> を使っていて、<a href="https://github.com/Dynamoid/dynamoid/commit/ed004b2d53c7500e10bca914ee844957939df2df">過去に対策されたよう</a>なのでそこは問題なさそうです。</p>

<p><code>self.class.adapter_plugin_class.new</code> の先が怪しそうなのでコードを見てみると、なにやら動的に <code>require</code> しています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://github.com/Dynamoid/dynamoid/blob/v3.2.0/lib/dynamoid/adapter.rb#L181-L187</span>
<span class="synPreProc">def</span> <span class="synConstant">self</span>.<span class="synIdentifier">adapter_plugin_class</span>
  <span class="synStatement">unless</span> <span class="synType">Dynamoid</span>.const_defined?(<span class="synConstant">:AdapterPlugin</span>) &amp;&amp; <span class="synType">Dynamoid</span>::<span class="synType">AdapterPlugin</span>.const_defined?(<span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter.camelcase)
    <span class="synPreProc">require</span> <span class="synSpecial">&quot;</span><span class="synConstant">dynamoid/adapter_plugin/</span><span class="synSpecial">#{</span><span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter<span class="synSpecial">}&quot;</span>
  <span class="synStatement">end</span>

  <span class="synType">Dynamoid</span>::<span class="synType">AdapterPlugin</span>.const_get(<span class="synType">Dynamoid</span>::<span class="synType">Config</span>.adapter.camelcase)
<span class="synPreProc">end</span>
</pre>


<p>実はスレッドセーフではない実装はこの <code>require</code> する条件の <code>Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)</code> の部分です。</p>

<p>エラーを再現できるコードを Gist に用意しましたのでそちらを使って確認していきます。</p>

<p><a href="https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017">Test codes to reproduce not thread-safe errors of Dynamoid &middot; GitHub</a></p>

<p>Dynamoid に以下のような変更を加えて、<code>unless</code> の中に入らず <code>require</code> が実行されなかった時の状態を見てみます。</p>

<pre class="code lang-diff" data-lang="diff" data-unlink><span class="synType">diff --git a/lib/dynamoid/adapter.rb b/lib/dynamoid/adapter.rb</span>
<span class="synPreProc">index f390ecf..df2a58c 100644</span>
<span class="synType">--- a/lib/dynamoid/adapter.rb</span>
<span class="synType">+++ b/lib/dynamoid/adapter.rb</span>
<span class="synStatement">@@ -181,6 +181,13 @@</span><span class="synPreProc"> module Dynamoid</span>
     def self.adapter_plugin_class
       unless Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)
         require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;
<span class="synIdentifier">+      else</span>
<span class="synIdentifier">+        tmp_adapter = Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase).new</span>
<span class="synIdentifier">+        puts &lt;&lt;~EOS</span>
<span class="synIdentifier">+          respond_to?(:connect!): #{tmp_adapter.respond_to?(:connect!)},</span>
<span class="synIdentifier">+          respond_to?(:query): #{tmp_adapter.respond_to?(:query)},</span>
<span class="synIdentifier">+          require: #{require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;}</span>
<span class="synIdentifier">+        EOS</span>
       end
 
       Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase)
</pre>


<p>すると、スレッドによっては <code>const_defined?</code> の結果が <code>true</code> で、<code>require</code> の結果も <code>false</code> (コードがロード済み) なのに、実際のメソッドが存在しないという現象が起きていることが分かりました。</p>

<pre class="code" data-lang="" data-unlink>$ bundle exec ruby main.rb
...
respond_to?(:connect!): false,
respond_to?(:query): false,
require: false
...</pre>


<p>ここからは Ruby の <code>require</code> の実装を知らないため推測になります。</p>

<p>おそらくマルチスレッド環境下で <code>require</code> を実行すると、<code>require</code> を実行したスレッド内では全てのコードがロードされた状態になりますが、別のスレッドではクラス定義などの「ガワ」だけがロードされた状態になっているのではないかと思いました。</p>

<p>そのため、ロードが不十分なスレッドでインスタンスを生成できるが、メソッドが定義されていない、という状態になっているのかと思われます。</p>

<h2>解決方法</h2>

<p>よって、全てのスレッドで確実に <code>require</code> を実行することで今回のエラーが解決するという結論に至りました。</p>

<pre class="code lang-diff" data-lang="diff" data-unlink><span class="synType">diff --git a/lib/dynamoid/adapter.rb b/lib/dynamoid/adapter.rb</span>
<span class="synPreProc">index f390ecf..8449e34 100644</span>
<span class="synType">--- a/lib/dynamoid/adapter.rb</span>
<span class="synType">+++ b/lib/dynamoid/adapter.rb</span>
<span class="synStatement">@@ -179,9 +179,7 @@</span><span class="synPreProc"> module Dynamoid</span>
     end
 
     def self.adapter_plugin_class
<span class="synSpecial">-      unless Dynamoid.const_defined?(:AdapterPlugin) &amp;&amp; Dynamoid::AdapterPlugin.const_defined?(Dynamoid::Config.adapter.camelcase)</span>
<span class="synSpecial">-        require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;</span>
<span class="synSpecial">-      end</span>
<span class="synIdentifier">+      require &quot;dynamoid/adapter_plugin/#{Dynamoid::Config.adapter}&quot;</span>
 
       Dynamoid::AdapterPlugin.const_get(Dynamoid::Config.adapter.camelcase)
     end
</pre>


<p>エラーの原因と解決方法が判明したため、既に Dynamoid に PR を作りマージまでしてもらいました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDynamoid%2Fdynamoid%2Fpull%2F373" title="Fix threadsafety of Dynamoid::Adapter by tsub · Pull Request #373 · Dynamoid/dynamoid" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Dynamoid/dynamoid/pull/373">github.com</a></cite></p>

<p>2019/08/13 時点ではまだリリースされていないようなので、エラーで困っている方は master ブランチをお使いください。</p>

<h2>調査に苦労した点</h2>

<p>マルチスレッドプログラミングの経験が浅いため、まずスレッドセーフではない実装があるということに気づくまでに時間がかかりました。</p>

<p>そして、エラーを再現しようとした時になかなか再現出来なかったのもハマりポイントでした。</p>

<p><a href="https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017">エラーの再現コード</a>を読むと分かりますが、Dynamoid のメソッドを呼ぶ直前に <code>puts</code> を実行しています。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink><span class="synComment"># https://gist.github.com/tsub/72e60233ed82a8a453428ea7441e6017#file-main-rb</span>
<span class="synConstant">100</span>.times <span class="synStatement">do</span> |<span class="synIdentifier">i</span>|
  safe_thread(i.to_s) <span class="synStatement">do</span>
    puts <span class="synSpecial">'</span><span class="synConstant">debug</span><span class="synSpecial">'</span> <span class="synComment"># To unlock Ruby's GVL</span>
    <span class="synType">Document</span>.where(<span class="synConstant">identifier</span>: <span class="synSpecial">'</span><span class="synConstant">hoge</span><span class="synSpecial">'</span>).first
  <span class="synStatement">end</span>
<span class="synStatement">end</span>
</pre>


<p>この <code>puts</code> が重要で、Ruby は GVL (Giant VM Lock) という仕組みを使って、実行されるネイティブスレッドが 1 つになるように排他制御をしています。</p>

<p>ただし、IO 関連のメソッドを実行する際は GVL が一時的に解放されてスレッドが同時に実行されます。</p>

<blockquote><p>ネイティブスレッドを用いて実装されていますが、 現在の実装では Ruby VM は Giant VM lock (GVL) を有しており、同時に実行される ネイティブスレッドは常にひとつです。 ただし、IO 関連のブロックする可能性があるシステムコールを行う場合には GVL を解放します。その場合にはスレッドは同時に実行され得ます。 また拡張ライブラリから GVL を操作できるので、複数のスレッドを 同時に実行するような拡張ライブラリは作成可能です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.ruby-lang.org%2Fja%2Flatest%2Fdoc%2Fspec%3D2fthread.html" title="スレッド (Ruby 2.6.0)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fthread.html">docs.ruby-lang.org</a></cite></p></blockquote>

<p>つまりスレッドセーフではない実装があった場合に、それを再現させるためには単純にスレッドセーフではないコードを書くだけではダメで、IO 関連のメソッドを実行して GVL を解放しないといけません。</p>

<p>少し古い記事ではありますが、こちらが参考になりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fmoyomot.hatenablog.com%2Fentry%2F2014%2F05%2F04%2F232538" title="Rubyでスレッドセーフでないことを簡単に確認したい - もょもとの技術ノート" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://moyomot.hatenablog.com/entry/2014/05/04/232538">moyomot.hatenablog.com</a></cite></p>

<p>実際の本番環境ではログ出力などにより、IO 関連のメソッドは普通に実行されていることが多いかと思いますので、エラーが起きるのも納得です。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ベジエ曲線のなめらかさについて社内勉強会で語った]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2019/05/18/005232</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2019/05/18/005232"/>
        <updated>2019-05-17T15:52:32.000Z</updated>
        <summary type="html"><![CDATA[<p>いまの勤務先にはエンジニア・デザイナーが持ち回りで発表する<a href="https://developer.feedforce.jp/archive/category/FFTT">社内勉強会（FFTT）</a>があるんですが、今週がわたしの当番だったので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%B8%A5%A8%B6%CA%C0%FE">ベジエ曲線</a>のなめらかさの話をしました。</p>

<p><iframe id="talk_frame_517211" src="//speakerdeck.com/player/23ed0505118c483f9aa8a343eacc648c" width="710" height="532" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/mashabow/bezier-smoothness">speakerdeck.com</a></cite></p>

<ul>
<li>デモページ：<a href="https://mashabow.github.io/bezier-smoothness/">https://mashabow.github.io/bezier-smoothness/</a></li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>：<a href="https://github.com/mashabow/bezier-smoothness">https://github.com/mashabow/bezier-smoothness</a></li>
</ul>


<p>デモとスライドを行き来しつつ、30分ほどの発表でした。</p>

<h3>内容の補足</h3>

<h4>p. 10: <i>G</i><sup>1</sup> 連続（接線連続）</h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Illustrator">Illustrator</a> などには「スムーズポイント」という種類のアンカーポイント（始点・終点）がありますが、これは両方のハンドルが常に一直線になって動くので、<i>G</i><sup>1</sup> 連続ということですね。</p>

<h4>p. 14: 急カーブ注意の標識と曲率半径</h4>

<p><a href="https://www.google.com/search?tbm=isch&amp;q=%E9%81%93%E8%B7%AF%E6%A8%99%E8%AD%98+R+%E3%82%AB%E3%83%BC%E3%83%96">「道路標識 R カーブ」あたりで画像検索する</a>とわかりやすいかと思います。「R = 500 m」のように書いてあったりします。</p>

<h4>p. 18: フォントエディタに搭載された曲率の櫛（curvature comb）</h4>

<p>2017 年にリリースされた FontLab VI には標準搭載されています。<i>G</i><sup>2</sup> 連続になるように、うまいこと自動調整してくれる機能もついています。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Cj8GQiDnyq8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Glyphs や RoboFont では <a href="https://yanone.de/software/speedpunk/">Speed Punk</a> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>が有名ですね。もともと、こちらの方が早くから開発されています。</p>

<iframe src="https://player.vimeo.com/video/38586215" width="640" height="480" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>


<h4>デモの [<i>G</i><sup>0</sup> 連続], [<i>G</i><sup>1</sup> 連続], [<i>G</i><sup>2</sup> 連続] ボタン</h4>

<p>片方の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%B8%A5%A8%B6%CA%C0%FE">ベジエ曲線</a>を調整して <i>G</i><sup>0</sup>, <i>G</i><sup>1</sup>, <i>G</i><sup>2</sup> 連続にする機能で、<a href="https://github.com/mashabow/bezier-smoothness/blob/f60c28887f7d55713166c93b60c3d038044ba242/src/calc.ts#L88-L177">calc.ts</a> に実装があります。安直でナイーブな実装になっているので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%B8%A5%A8%B6%CA%C0%FE">ベジエ曲線</a>の形や配置によっては、思わぬ結果になります。コーナーケースも考慮していません。</p>

<p>実際のデザイン支援に使うためには、ユーザーの意図に寄り添った「もっと頭のいい調整方法」が必要になります。</p>

<h4><i>G</i><sup>0</sup>, <i>G</i><sup>1</sup>, <i>G</i><sup>2</sup>, … 連続</h4>

<p>英語では geometic continuity といい、その頭文字をとって <i>G</i><sup><i>n</i></sup> と呼ぶようです。</p>

<p><a href="https://en.wikipedia.org/wiki/Smoothness#Geometric_continuity">Smoothness: Geometric continuity - Wikipedia</a></p>

<p>一般の <i>n</i> について、ちゃんとした定義をあまり把握していなかったのですが、弧長パラメータで <i>n</i> 回連続<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%F9%CA%AC">微分</a>可能であれば <i>G</i><sup><i>n</i></sup> 連続、という理解でいいんでしょうか。</p>

<p>ちなみに、日本語のブログ記事などでは「ある程度の誤差を許した <i>C</i><sup><i>n</i></sup> 連続のことを <i>G</i><sup><i>n</i></sup> 連続と呼ぶ」という解説が散見されますが、こちらはちょっとあやしそうです。</p>

<h3>雑感</h3>

<p>フォントエンジニアにとっては常識レベルの内容だとはいえ、ブラウザ上ででグラフィカルにぐりぐり動かせるデモを作ってみるとやっぱり楽しいですね。今回の話、社内の業務にはまったく直結しないのですが、みなさんに興味深く聞いてもらえたようです。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%B8%A5%A8%B6%CA%C0%FE">ベジエ曲線</a>を自由自在に使いこなしているデザイナーさんからも「なるほど！」「こういうことだったんか」というような反応をいただいて、発表した甲斐がありました 🍮</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『OAuth 2.0 の代表的な利用パターンを仕様から理解しよう』を読んだ話]]></title>
        <id>https://developer.feedforce.jp/entry/2019/04/12/184013</id>
        <link href="https://developer.feedforce.jp/entry/2019/04/12/184013"/>
        <updated>2019-04-12T09:40:13.000Z</updated>
        <summary type="html"><![CDATA[<p>社内勉強会の担当でひさびさに認可の話をしました、 <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>ご存知ないかたもいらっしゃると思うので改めて書いておくと、弊社では毎週末 金曜 夕方にエンジニア全員で集まって行う社内勉強会、通称 <a href="https://developer.feedforce.jp/archive/category/FFTT">FFTT</a> を続けています。</p>

<p>今回はこちらの記事を読んでまとめた内容（ほとんどそのまま🙇）で、ちょっと <a href="https://tools.ietf.org/html/rfc8252">RFC8252 - OAuth 2.0 for Native Apps</a> の話題なんかを追加してみました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.buildinsider.net%2Fenterprise%2Fopenid%2Foauth20" title="OAuth 2.0の代表的な利用パターンを仕様から理解しよう" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe></p>

<p>シリーズ記事で<a href="https://www.buildinsider.net/enterprise/openid/connect">第二回は OpenID Connect について扱われてる</a>ので、ぜひ読んでみてください。</p>

<h2>スライド</h2>

<p><iframe id="talk_frame_509835" src="//speakerdeck.com/player/4e9a55ff6b734f41bf8925571bad873a" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe> <cite class="hatena-citation"><a href="https://speakerdeck.com/tmd45/12-fftt-number-352">speakerdeck.com</a></cite></p>

<h2>過去に勉強したこと</h2>

<ul>
<li><a href="https://blog.tmd45.jp/entry/2015/09/09/013720">OpenID TechNight で OpenID Connect とはなんぞやというのを聞いてきた - TMD45'β'LOG!!!</a></li>
<li><a href="https://blog.tmd45.jp/entry/2017/08/02/011504">OpenID BizDay で金融 API の動向について聞いてきた - TMD45'β'LOG!!!</a></li>
<li><a href="https://www.slideshare.net/tmd45/fapi-security-20170818">FAPI Security について聞いてきた話（2017/08/18 社内勉強会）</a></li>
</ul>


<h2>きっかけになった書籍</h2>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51CaA7dryjL._SL500_.jpg" class="hatena-asin-detail-image" alt="OAuth徹底入門 セキュアな認可システムを適用するための原則と実践" title="OAuth徹底入門 セキュアな認可システムを適用するための原則と実践"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" target="_blank" rel="noopener">OAuth徹底入門 セキュアな認可システムを適用するための原則と実践</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/Justin%20Richer" class="keyword">Justin Richer</a>,<a href="http://d.hatena.ne.jp/keyword/Antonio%20Sanso" class="keyword">Antonio Sanso</a></li><li>翔泳社</li></ul><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798159298/hatena-blog-22/" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<p>原著は『OAuth 2 in Action』ですね。会社の本棚に入ったのでちょっと読みました。まだ全部は網羅できてないです(；´∀｀)</p>

<p>ひきつづき仕事でも活かしていきます(๑•̀ㅂ•́)و✧</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[『[改訂新版] プログラマのための文字コード技術入門』を読んだ]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2019/03/15/014518</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2019/03/15/014518"/>
        <updated>2019-03-14T16:45:18.000Z</updated>
        <summary type="html"><![CDATA[<p>年末に発売されていたので読みました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297102919/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51vqn-2eVKL._SL160_.jpg" class="hatena-asin-detail-image" alt="[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)" title="[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297102919/msb2-22/">[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 矢野啓介</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/12/28</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297102919/msb2-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<ul>
<li><a href="https://gihyo.jp/book/2019/978-4-297-10291-3">［改訂新版］プログラマのための文字コード技術入門：書籍案内｜技術評論社</a></li>
<li><a href="http://yanok.net/2018/12/post-349.html">『［改訂新版］プログラマのための文字コード技術入門』発売! - yanok.net</a></li>
</ul>


<h3>どんな感じの本だかざくっと</h3>

<p>タイトルに「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>のための」あるように、プログラミング経験者がターゲットになっています。ビット・バイト、2進数・16進数、ファイル、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB">プロトコル</a>のような「常識」についてはさらっとした説明で済まされているので、その分、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>の本質的な部分・実践的な部分の密度が高くなっています。文章が平易なので、読み進めやすいかと思います。</p>

<p>さらに内容をはっきりさせるのであれば、『「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%BD%C2%E5%C6%FC%CB%DC">現代日本</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>のための」<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>技術入門』といったところでしょうか。この本は、日本で現在使われている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>の話が中心です。世界各地の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>だったり、歴史的な文字の符号化などにもおもしろい話はたくさんあるのですが、そこには深入りせず、実用的なテーマに絞って解説されています。国内での業務にすぐ役立ちそうな内容です。</p>

<p>第7章「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>」では <a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> と <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> が題材になっていますが、他の言語でも基本的な概念は共通しています。それ以外の章では <a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby</a> の知識はまったく要求されませんので、馴染みがなくても大丈夫です。その前の第6章が Web の話だということもあり、個人的には <a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a> も取り上げてほしいところですが。</p>

<h3>初版との比較</h3>

<p>この本（改訂新版）は第2版にあたります。初版は2010年2月に発行されています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477414164X/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51O0rI1KItL._SL160_.jpg" class="hatena-asin-detail-image" alt="プログラマのための文字コード技術入門 (WEB+DB PRESS plus) (WEB+DB PRESS plusシリーズ)" title="プログラマのための文字コード技術入門 (WEB+DB PRESS plus) (WEB+DB PRESS plusシリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477414164X/msb2-22/">プログラマのための文字コード技術入門 (WEB+DB PRESS plus) (WEB+DB PRESS plusシリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 矢野啓介</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2010/02/18</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 34人 <span class="hatena-asin-detail-label">クリック</span>: 578回</li><li><a href="http://d.hatena.ne.jp/asin/477414164X/msb2-22" target="_blank">この商品を含むブログ (129件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>初版と改訂新版、左右に並べて目で diff をとりながら読みました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> をはじめ、各規格・ツールの更新に合わせた細かな対応がなされていますが、こうして見比べてみると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>の本質的な部分についてはほとんど変わらないことが分かります。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> 絵文字（2010年〜）についての記述も増えていますが、ここ数年の世界的な普及を見ると、第3版ではもっともっとページ数が割かれるもしれません(笑)</p>

<p>この期間における最大の変化は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> の圧倒的な普及でしょうか。初版では、著者の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200213">JIS X 0213</a> 推し」な雰囲気が端々から伝わってきましたが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> の普及がそれを取り込む・呑み込むかたちになりました。Web <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%A6%A5%B8%A5%F3%A5%B0">ブラウジング</a>で文字化けに遭遇するようなこともめっきり減り、たまに出会うと懐かしさすら感じます。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Shift_JIS">Shift_JIS</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/EUC">EUC</a>-JP や <a class="keyword" href="http://d.hatena.ne.jp/keyword/ISO-2022-JP">ISO-2022-JP</a> を知らずに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> 一本で暮らしていける世代がすでに出てきているはずです。「レガシー」<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>から解放される一方で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> の孕んだ複雑さと向き合う場面が増えそうですが……</p>

<p>ただし、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> の圧倒的な普及」という印象は、自分が仕事で新しめの Web アプリケーションを触っているから、というのもあるかもしれません。大企業や役所の業務システムはいまどんな感じなんでしょうか。</p>

<h3>メモと補足</h3>

<h4>p. 9 図 1.2</h4>

<blockquote><p>亜 哀 愛 悪 握 圧 扱 安 … 惑 枠 湾 腕</p></blockquote>

<p>となっていますが、これは「旧」<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA">常用漢字</a>の先頭部分と末尾部分ですね。2010年の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA">常用漢字</a>改定によって、「亜 哀 <strong>挨</strong> 愛 <strong>曖</strong> 悪 握 圧 … 惑 枠 湾 腕」という並びになりました。</p>

<h4>p. 193</h4>

<blockquote><p>IANA の登録簿には、……実際に使われている <a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200213">JIS X 0213</a> の符号化方式が登録されていないという問題もあります。</p></blockquote>

<p>登録されていなかったんですね、知りませんでした。</p>

<p><a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">https://www.iana.org/assignments/character-sets/character-sets.xhtml</a></p>

<p>需要がなかったのでしょうか……；；</p>

<h4>p. 206</h4>

<blockquote><p>HTML の<a class="keyword" href="http://d.hatena.ne.jp/keyword/DTD">DTD</a> において、「copy という名前は <code>&amp;#169;</code> を表す」という定義がなされているため、……</p></blockquote>

<p>このあたりは HTML 4.01 の話です。<a class="keyword" href="http://d.hatena.ne.jp/keyword/HTML5">HTML5</a> に <a class="keyword" href="http://d.hatena.ne.jp/keyword/DTD">DTD</a> は存在しません。</p>

<h4>p. 208</h4>

<blockquote><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Shift_JIS">Shift_JIS</a> を用いる場合はリスト 6.1 の例の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a>」の部分を「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Shift_JIS">Shift_JIS</a>」に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/EUC">EUC</a>-JP の場合は「<a class="keyword" href="http://d.hatena.ne.jp/keyword/EUC">EUC</a>-JP」にします。</p></blockquote>

<p>HTML の <code>&lt;meta charset="hogehoge"&gt;</code> を説明している箇所です。ただし、この本が参照している HTML 5.2 には</p>

<blockquote><p>Authors should use <a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a>. Conformance checkers may advise authors against using legacy encodings.</p></blockquote>

<p><a href="https://www.w3.org/TR/html52/document-metadata.html#specifying-the-documents-character-encoding">という説明</a>があり、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> を使用すべき」となっています。一方、HTML Living Standard ではさらに進んで</p>

<blockquote><p>The Encoding standard requires use of the <a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> character encoding and requires use of the "<code>utf-8</code>" encoding label to identify it. Those requirements necessitate that the document's character encoding declaration, if it exists, specifies an encoding label using an ASCII <a class="keyword" href="http://d.hatena.ne.jp/keyword/case-insensitive">case-insensitive</a> match for "<code>utf-8</code>". Regardless of whether a character encoding declaration is present or not, the actual character encoding used to encode the document must be <a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a>.</p></blockquote>

<p><a href="https://html.spec.whatwg.org/multipage/semantics.html#charset">という記述になっており</a>、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> を使用しなければならない」ことになりました。</p>

<h4>p. 216</h4>

<blockquote><p>URL の中に、予約されている記号や、ASCII で表現できない文字を書きたいときには、<strong>URL 符号化</strong>という方法が使われます。</p></blockquote>

<p>この本では触れられていませんが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>名部分は <a href="https://ja.wikipedia.org/wiki/Punycode">Punycode</a> によって符号化されます。例えば、<a href="https://%E6%97%A5%E6%9C%AC%E8%AA%9E.jp"><code>https://日本語.jp</code></a> は <a href="https://xn--wgv71a119e.jp"><code>https://xn--wgv71a119e.jp</code></a> になります。</p>

<h4>p. 222</h4>

<blockquote><p>クライアントからの送信に使われる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>は、HTML の form 要素の accept-charset 属性で明示的に指定することもできます。<code>accept-charset="Shift_JIS"</code> と指定すれば <a class="keyword" href="http://d.hatena.ne.jp/keyword/Shift_JIS">Shift_JIS</a> で送信するということです。</p></blockquote>

<p>HTML 5.2 では</p>

<blockquote><p>[...] each token must be an ASCII <a class="keyword" href="http://d.hatena.ne.jp/keyword/case-insensitive">case-insensitive</a> match for one of the labels of an ASCII-compatible encoding.</p></blockquote>

<p><a href="https://www.w3.org/TR/html52/sec-forms.html#element-attrdef-form-accept-charset">となっています</a>。一方、HTML Living Standard では</p>

<blockquote><p>If specified, the <a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value</a> must be an ASCII <a class="keyword" href="http://d.hatena.ne.jp/keyword/case-insensitive">case-insensitive</a> match for "<code>UTF-8</code>".</p></blockquote>

<p><a href="https://html.spec.whatwg.org/multipage/forms.html#attr-form-accept-charset">と規定されており</a>、こちらも <a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> 固定になりました。</p>

<h4>p. <a class="keyword" href="http://d.hatena.ne.jp/keyword/226">226</a></h4>

<blockquote><p>最後に、これからの日本語メールの符号化がどうあるべきかを考察しました。</p></blockquote>

<p>初版の名残です。初版では今後についての考察があったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8</a> の普及により、改訂新版ではこれが削除されています。</p>

<h4>p. 293 表 8.1</h4>

<p>表のタイトルが「ベンダー依存の変換の問題の発生する代表的な文字」になっていますが、おそらく表 8.2からの編集ミスです。</p>

<hr />

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297102919/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51vqn-2eVKL._SL160_.jpg" class="hatena-asin-detail-image" alt="[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)" title="[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297102919/msb2-22/">[改訂新版]プログラマのための文字コード技術入門 (WEB+DB PRESS plusシリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 矢野啓介</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/12/28</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297102919/msb2-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07M98R3S5/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51M4td-sVGL._SL160_.jpg" class="hatena-asin-detail-image" alt="［改訂新版］プログラマのための文字コード技術入門 WEB+DB PRESS plus" title="［改訂新版］プログラマのための文字コード技術入門 WEB+DB PRESS plus"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07M98R3S5/msb2-22/">［改訂新版］プログラマのための文字コード技術入門 WEB+DB PRESS plus</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 矢野啓介</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/12/22</li><li><span class="hatena-asin-detail-label">メディア:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kindle">Kindle</a>版</li><li><a href="http://d.hatena.ne.jp/asin/B07M98R3S5/msb2-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[沼 Advent Calendar 2018 総括]]></title>
        <id>https://blog.betaful.life/entry/2018/12/25/143619</id>
        <link href="https://blog.betaful.life/entry/2018/12/25/143619"/>
        <updated>2018-12-25T05:36:19.000Z</updated>
        <summary type="html"><![CDATA[<p>メリークリスマス、皆様。各 Advent Calendar も最終日、クリスマスでございます。</p>

<p>この記事は <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> の 25 日目の記事です。昨日は <a href="https://adventar.org/users/11676">aini_bellwood</a> さんの『<a href="https://bellwood-works.hatenablog.com/entry/2018/12/24/000000">ベイブレードの話 - Bellwood Works</a>』でした。回転吸収かっこいい！見た目も性能も！心が中３男子なのでぐっと来ます。</p>

<p>さてそんなわけで、沼 Advent Calendar へご参加いただいた皆様ありがとうございました。</p>

<p><b>総勢 19 個の沼記事が集まりました</b>。ちゃんと全部読ませていただいてます。いや〜 どれも面白かった。人の沼は楽しいなぁ。非常に俺得な Advent Calendar を作ってしまったなぁと思った次第でございます(ﾟ∀ﾟ)ﾌﾊﾊﾊﾊ</p>

<p><span style="color: #cccccc">23:22 追記： asonas さんが 8 日目の記事を書いてくれて「総勢 18 個」から「総勢 19 個」の記事になりました！師走の忙しいなかありがとう！！まとめ一覧のなかにもコメント追加済みです。</span></p>

<p><figure class="figure-image figure-image-fotolife" title="沼 Advent Calendar 2018 - Adventar"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181225/20181225135311.png" alt="f:id:tmd45:20181225135311p:plain" title="f:id:tmd45:20181225135311p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>沼 Advent Calendar 2018 - Adventar</figcaption></figure></p>

<ul class="table-of-contents">
    <li><a href="#まとめ">まとめ</a><ul>
            <li><a href="#インク沼に足首らへんまで浸かっている話---TMD45βLOG">インク沼に足首らへん？まで浸かっている話 - TMD45'β'LOG!!!</a></li>
            <li><a href="#リアル脱出ゲームという沼---真夜中の色彩">リアル脱出ゲームという沼 - 真夜中の色彩</a></li>
            <li><a href="#ミュージカルと私---SHOIs-blog">ミュージカルと私 - SHOI’s blog</a></li>
            <li><a href="#私は沼にハマっていないということを主張しておきたい---はのちゃ爆発">私は沼にハマっていないということを主張しておきたい - はのちゃ爆発</a></li>
            <li><a href="#ボドゲ沼に辿り着くまでの紆余曲折---kano-e-no-memo">ボドゲ沼に辿り着くまでの紆余曲折 - kano-e no memo</a></li>
            <li><a href="#アドベンチャーゲームはいいぞ核心ネタバレなし---よもやま話β版">アドベンチャーゲームはいいぞ(核心ネタバレなし) - よもやま話β版</a></li>
            <li><a href="#2018年に関西で観た歌舞伎の感想--ごひいきに">2018年に関西で観た歌舞伎の感想 | ごひいきに</a></li>
            <li><a href="#沼完全攻略ガイド---良いあそなすちゃん">沼完全攻略ガイド - 良いあそなすちゃん</a></li>
            <li><a href="#中古ガジェット沼について---どくぴーの備忘録">中古ガジェット沼について - どくぴーの備忘録</a></li>
            <li><a href="#オールドレンズのはなし---タイトルがないとトップページに戻りにくいことに気がついた">オールドレンズのはなし - タイトルがないとトップページに戻りにくいことに気がついた</a></li>
            <li><a href="#女児アニメを楽しむ---mizukmb">女児アニメを楽しむ - mizukmb</a></li>
            <li><a href="#2018ベスト--jgs---Self-Made-Keyboards-in-Japan">2018ベスト | jgs - Self-Made Keyboards in Japan</a></li>
            <li><a href="#沼の三種盛り合わせレシピ---自転車カメラキャンプ---Infinito-Nirone-7">沼の三種盛り合わせレシピ - 自転車、カメラ、キャンプ - Infinito Nirone 7</a></li>
            <li><a href="#ゲーム音楽の沼---兄貴の伝説---hatena-edition--">ゲーム音楽の沼 - 兄貴の伝説 - hatena edition -</a></li>
            <li><a href="#標準ズームがすき---azmins-diary">標準ズームがすき - azmin's diary</a></li>
            <li><a href="#キーボード沼マップぬまっぷ">キーボード沼マップ(ぬまっぷ)</a></li>
            <li><a href="#将太の寿司について---kasei_sanのブログ">将太の寿司について - kasei_sanのブログ</a></li>
            <li><a href="#漫画と私kysnnote">漫画と私｜kysn｜note</a></li>
            <li><a href="#ベイブレードの話---Bellwood-Works">ベイブレードの話 - Bellwood Works</a></li>
        </ul>
    </li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h3 id="まとめ">まとめ</h3>

<p>私のコメントは読まなくていいんで、みんなお互いの沼をのぞきにいってくれよな！<span style="color: #cccccc">（そしてうっかり足を踏み外せ！）</span></p>

<h4 id="インク沼に足首らへんまで浸かっている話---TMD45βLOG"><a href="https://blog.tmd45.jp/entry/2018/12/01/000000">インク沼に足首らへん？まで浸かっている話 - TMD45'β'LOG!!!</a></h4>

<p>このあと大きめのボトル 10 本ほど増えました。やだこわい</p>

<h4 id="リアル脱出ゲームという沼---真夜中の色彩"><a href="https://blog.midnightblue.jp/entry/2018/12/02/120838">リアル脱出ゲームという沼 - 真夜中の色彩</a></h4>

<p>私も一度参加したことがありますが、リアル脱出ゲームは参加体験型エンタテイメントとして最高だと思います。また参加したいな〜</p>

<h4 id="ミュージカルと私---SHOIs-blog"><a href="https://shoi.hatenadiary.jp/entry/2018/12/03/000000">ミュージカルと私 - SHOI’s blog</a></h4>

<p>好きが詰まってて、自分もミュージカル見に行きたくなりました。諸事情で映画館とか劇場とかに居られない質なのですが、なんとか近いうちに見に行けたらなぁ！</p>

<h4 id="私は沼にハマっていないということを主張しておきたい---はのちゃ爆発"><a href="http://hanocha.hateblo.jp/entry/2018/12/06/011401">私は沼にハマっていないということを主張しておきたい - はのちゃ爆発</a></h4>

<p>沼の住人には二種類いる。沼に浸かっていることを認めている人間と、認めていない人間だ( ｰ`дｰ´)ｷﾘｯ カメラ・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>、オーディオ沼、自作キーボード沼。Tech な沼ですね。</p>

<h4 id="ボドゲ沼に辿り着くまでの紆余曲折---kano-e-no-memo"><a href="http://kano-e.hatenablog.com/entry/2018/12/08/150745">ボドゲ沼に辿り着くまでの紆余曲折 - kano-e no memo</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A1%BC%A5%C9%A5%B2%A1%BC%A5%E0">ボードゲーム</a>は気づいたら増えてるというのがこわいですねー。ホラーですねー。なんでだろー。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B3%A5%F3">マイコン</a>が入り口っていうのがイイですね。世代を感じます。</p>

<h4 id="アドベンチャーゲームはいいぞ核心ネタバレなし---よもやま話β版"><a href="http://beta-chelsea.hatenadiary.jp/entry/2018/12/06/022545">アドベンチャーゲームはいいぞ(核心ネタバレなし) - よもやま話β版</a></h4>

<p>私も "Ib" 大好きなので、サムネ見た瞬間に「あっ！！！」ってなりました。インディーズの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C1%A5%E3%A1%BC%A5%B2%A1%BC%A5%E0">アドベンチャーゲーム</a>は、（比較的）短時間で面白いストーリーが楽しめるのがいいと思ってます。</p>

<h4 id="2018年に関西で観た歌舞伎の感想--ごひいきに"><a href="https://gohiiki.emma-design.net/2018-kabukireport/">2018年に関西で観た歌舞伎の感想 | ごひいきに</a></h4>

<p>観劇沼二本目、歌舞伎。こちらも各感想から愛を感じました。うちは<a href="https://www.meijiza.co.jp/">明治座</a>が近いのですが、歌舞伎や日本芸能の舞台も一度は見ておきたいものです。</p>

<h4 id="沼完全攻略ガイド---良いあそなすちゃん"><a href="http://asonas.hatenablog.com/entry/2018/12/25/201606">沼完全攻略ガイド - 良いあそなすちゃん</a></h4>

<p>12月8日428時28分に書いてくれました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%BB%B0%B8%B5">大三元</a>とか、エンドゲームの話から、すっごく深くて狭い穴（沼）が大量に点在してる情景が浮かびました。たのしそうですね。</p>

<h4 id="中古ガジェット沼について---どくぴーの備忘録"><a href="http://e10dokup.hateblo.jp/entry/2018/12/09/021901">中古ガジェット沼について - どくぴーの備忘録</a></h4>

<p>同僚のガジェット好き・電子工作好きの人たちから「わかる」「あるある」ってめっちゃ感想もらいました。わかる。</p>

<h4 id="オールドレンズのはなし---タイトルがないとトップページに戻りにくいことに気がついた"><a href="https://uvb-76.hatenablog.com/entry/2018/12/07/172537">オールドレンズのはなし - タイトルがないとトップページに戻りにくいことに気がついた</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>二本目、オールドレンズ。味のあるレンズっていいですよね。昔<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%A4%A5%AB%A5%E1%A5%E9">トイカメラ</a>にハマってましたが、ガチのカメラ持ちでこっちのレンズに興味持ち出したら沼に沈んでたかもしれないと思います。</p>

<h4 id="女児アニメを楽しむ---mizukmb"><a href="https://scrapbox.io/mizukmb/%E5%A5%B3%E5%85%90%E3%82%A2%E3%83%8B%E3%83%A1%E3%82%92%E6%A5%BD%E3%81%97%E3%82%80">女児アニメを楽しむ - mizukmb</a></h4>

<p>女児アニメ沼。なぜか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%EA%A5%AD%A5%E5%A5%A2">プリキュア</a>とか？と思ってましたが プリ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー</a>シリーズのお話でした。幼女おじさん（なんか並べただけで犯罪臭がする…）の配慮、おつかれさまです。</p>

<h4 id="2018ベスト--jgs---Self-Made-Keyboards-in-Japan"><a href="https://scrapbox.io/self-made-kbds-ja/2018%E3%83%99%E3%82%B9%E3%83%88_%7C_jgs">2018ベスト | jgs - Self-Made Keyboards in Japan</a></h4>

<p>自作キーボード沼二本目。そもそもが "Self-Made Keyboards in Japan"（日本自作キーボード）の <a class="keyword" href="http://d.hatena.ne.jp/keyword/scrapbox">scrapbox</a> での参加…沼感増しますね。TOFU の画像が犯行予告みたいで（？）かっこいい。</p>

<h4 id="沼の三種盛り合わせレシピ---自転車カメラキャンプ---Infinito-Nirone-7"><a href="https://keithyokoma.hatenablog.com/entry/2018/12/15/100000">沼の三種盛り合わせレシピ - 自転車、カメラ、キャンプ - Infinito Nirone 7</a></h4>

<p>沼の相乗効果、あると思います。とくにこの３つの組み合わせはヤバいですね…わかりみ。同じ組み合わせでハマってるひと、自分の近くでも見かけます。</p>

<h4 id="ゲーム音楽の沼---兄貴の伝説---hatena-edition--"><a href="http://mmorita.hatenablog.com/entry/2018/12/16/003805">ゲーム音楽の沼 - 兄貴の伝説 - hatena edition -</a></h4>

<p>目次<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし</a>てすごく沼感ある記事でした。私も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%B2%BB%B3%DA">ゲーム音楽</a>のクラシックコンサートとかライブとか時々聞きに行きます。ゲーム体験と相まって大変良い。自分で演奏までしてるのすごい。</p>

<h4 id="標準ズームがすき---azmins-diary"><a href="http://azmin.hatenablog.com/entry/2018/12/25/072337">標準ズームがすき - azmin's diary</a></h4>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>三本目。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%BA%BE%C2">レンズ沼</a>は数あれど標準ズームの沼って初めて聞いたかもしれないです。写真かっこいいなぁ。自分も仕舞い込んでる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%A4%A5%C1">デジイチ</a>ひっぱりだしたくなりました。</p>

<h4 id="キーボード沼マップぬまっぷ"><a href="https://blog.ikejima.org/make/keyboard/2018/12/23/keyboard-numa.html">キーボード沼マップ(ぬまっぷ)</a></h4>

<p>ほんとに今年はエンジニア界隈で自作キーボードが一気に広まった年でしたね。自分の身の回りもすごいです。ぬまっぷ見ただけでも広く深いのがよく分かる、おもしろいまとめでした。</p>

<h4 id="将太の寿司について---kasei_sanのブログ"><a href="https://blog.kasei-san.com/entry/2018/12/23/014815">将太の寿司について - kasei_sanのブログ</a></h4>

<p>内容は「ニンジャスレイヤーの動く沼」。忍殺ファン胡乱界隈の皆様が、集団でいろんな沼に浸かりに行く様を私も遠くからたのしく拝見しています。</p>

<h4 id="漫画と私kysnnote"><a href="https://note.mu/kysn/n/n25e0b2765b94">漫画と私｜kysn｜note</a></h4>

<p>漫画沼。実際お仕事でも漫画に関わってるという沼っぷり。エモくてちょっと感動しました。</p>

<h4 id="ベイブレードの話---Bellwood-Works"><a href="https://bellwood-works.hatenablog.com/entry/2018/12/24/000000">ベイブレードの話 - Bellwood Works</a></h4>

<p>冒頭でも触れましたが、いまのおもちゃって進化してますよねぇ。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D9%A5%A4%A5%D6%A5%EC%A1%BC%A5%C9">ベイブレード</a>は出た当初からベーゴマの進化系として男の子たちの心を鷲掴みにしていたと思いますが、昨今はまたすごいことになってるんですね。</p>

<h3 id="おわりに">おわりに</h3>

<p>はい、というわけで沼をまとめる沼の記事でした。</p>

<p>そろそろ社会人のみなさまはボーナスなんてものの支給もあったのではないかとご推察いたします。楽しい沼クリスマスを。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[type の話]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2018/12/23/235900</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2018/12/23/235900"/>
        <updated>2018-12-23T14:59:00.000Z</updated>
        <summary type="html"><![CDATA[<h3>はじめに</h3>

<p>この記事は、<a href="https://adventar.org/calendars/3235">Feedforce Advent Calendar 2018</a> の 23 日目の記事です。前日は、あおいさんによる「<a href="https://note.mu/pnao/n/n4f31c41633b5">平成の終わりに非ヲタに聴いてほしいハロプロソング5選</a>」でした。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%ED%A5%D7%A5%ED">ハロプロ</a>……自分が音楽に疎すぎて話が広げられないのですが、あれですよね、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%EE-ute">℃-ute</a> が話題になって来たころ、こう<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>的にチャレンジングなユニット名だな、などと考えていたのが記憶に残っています。</p>

<p>さて、ここから本題で、今回はとりとめもなく type について書いてみます。</p>

<h3>type</h3>

<p>type とはそのまま「型」なんですが、文字界隈のみなさんはご存じのとおり、活字だったり、その書体だったり、そのへんのものをざっくり type と呼びます。もう少しきっちり言うと、活字（スタンプみたいなあれです）は <a class="keyword" href="http://d.hatena.ne.jp/keyword/movable%20type">movable type</a> で、いろいろ並べ替えて使える文字の型、といった感じでしょうか。活字を組む（並べる）ことは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%C8%C8%C7">組版</a> typesetting ですし、活字の表面に凸状に浮かび上がっている文字の形は書体 typeface といいます。まんまですね。</p>

<p>活字を組んできれいな版面を作る技術が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%DD%A5%B0%A5%E9%A5%D5%A5%A3">タイポグラフィ</a> typography で、誤植の <a class="keyword" href="http://d.hatena.ne.jp/keyword/typo">typo</a> は typographic error の略らしいです。会社名や商品名の「ロゴ」は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A5%B4%A5%BF%A5%A4%A5%D7">ロゴタイプ</a> logotype の略ですね。活字で文書を書く機械はタイプライター typewriter ですし、タイプライターを打つことはタイピング typing です。タイプライターを電信（電気通信）と組み合わせたシステムが<a href="https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%AC%E3%82%BF%E3%82%A4%E3%83%97%E7%AB%AF%E6%9C%AB">テレタイプ</a> teletype で、そこから来た TTY という略称・概念は、今でも <a class="keyword" href="http://d.hatena.ne.jp/keyword/Unix">Unix</a> 系のシステムで目にします<a href="#f-fc4466bd" name="fn-fc4466bd" title="テレタイプは文字コードの歴史的にもおもしろいので、興味のある方は『文字符号の歴史―欧米と日本編』あたりをどうぞ。">*1</a>。</p>

<p>あ、ちなみに金属活字は、<a href="https://www.youtube.com/watch?v=rDZ0bxPoefY">母型（ぼけい）という鋳型に鉛合金を流し込んで鋳造する</a>んですが、母<b>型</b>といっても英語では matrix ですね。</p>

<p><figure class="figure-image figure-image-fotolife" title="金属活字とその母型"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20181223/20181223233559.jpg" alt="f:id:mashabow:20181223233559j:plain" title="f:id:mashabow:20181223233559j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>金属活字とその母型<a href="#f-dbf09dd2" name="fn-dbf09dd2" title="2017年3月11日に開催された《タイポグラフィの世界5 戦後日本の金属活字》で展示されていたものです。">*2</a></figcaption></figure></p>

<p>現代のデジタルフォントはデータ以外に実体がありませんが、そのフォントフォーマットには TrueType や OpenType という名前がつけられています。フォントのデザイナーは type designer ですし、フォントを制作している会社は type foundry（つまり活字鋳造所）と今でも呼ばれます。わたしは前職、<a href="http://typeproject.com/">タイププロジェクト</a>という会社でフォントのエンジニアをしていました<a href="#f-d4db3462" name="fn-d4db3462" title="NHK 美の壺 取材こぼれ話 のページの《2018年6月22日放送 「心を伝える フォント」こぼれ話》という項に、タイププロジェクトの職場の様子（と自分の顔面）がちらっと載っています。">*3</a>。</p>

<p>さてさて。</p>

<p>7月にそのタイププロジェクトを退職し、現在<a href="https://www.feedforce.jp/">フィードフォース</a>でフロントエンドエンジニア修行中です。自分が所属しているプロダクトで、TypeScript を導入しようということになり<a href="#f-41cf73fb" name="fn-41cf73fb" title="正確に言うと、Flow から TypeScript への移行です。">*4</a>、ここしばらく TypeScript と格闘しています。</p>

<p>TypeScript。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> が TypeScript を公開した2012年にこんなことをつぶやいていたのですが、</p>

<p><blockquote class="twitter-tweet" data-lang="HASH(0xf50d7a8)"><p lang="ja" dir="ltr">TypeScript って文字に関係してそうで別に関係してない</p>&mdash; mashabow (@mashabow) <a href="https://twitter.com/mashabow/status/253060102263812096?ref_src=twsrc%5Etfw">October 2, 2012</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>結局今年の夏まで勉強せずに来てしまったため、上記の type 好きとしては若干引け目を感じておりました。ちなみに文字界隈で script といえば「<a href="http://d.hatena.ne.jp/keyword/%CD%D1%BB%FA%B7%CF">用字系</a>」の意味ですね。</p>

<p>導入時の設定（tsconfig.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>, TSLint, Babel, Webpack, …）に慣れていなくて苦労しましたが、文法や概念自体は比較的すんなり飲み込めた感触です。昔ちょっと触った <a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/ActionScript">ActionScript</a> をふわっと思い出しました。入門者向けのガイドだと、ES201x 側の機能の説明にページが割かれているものが多かったんですが、その点、@vvakame さんの以下のサイトはコンパクトで、手っ取り早く学ぶにはちょうどよい感じでした。</p>

<ul>
<li><a href="http://typescript.ninja/typescript-in-definitelyland/">Revised Revised 型の国のTypeScript | Revised Revised TypeScript in Definitelyland</a></li>
</ul>


<p>入門レベルを脱した後も、Qiita 上の <a href="https://qiita.com/search?utf8=%E2%9C%93&amp;sort=created&amp;q=user%3Avvakame+typescript+%E5%A4%89%E6%9B%B4%E7%82%B9">TypeScript x.y.z 変更点</a> 記事にはいつもお世話になっています。</p>

<p>で、静的型付けや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0">型推論</a>、やっていることや仕組みはなんとなくわかるのですが、ちゃんとした仕組みについてはそういえば理解していませんでした。また、社内の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>に強いエンジニアから<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>圧を感じることもあり、いい加減そのへん勉強しようかと、適当に検索して出てきた筑波大の講義資料でも読んでみました。</p>

<ul>
<li><a href="http://www.cs.tsukuba.ac.jp/~kam/complogic/">計算論理学</a></li>
</ul>


<p>そしたら、なかなかおもしろいんです。型なしラムダ計算のあたりは自分も学部時代に講義でやって、おもしろいー！と思っていたんですが、その自然な延長で型付け・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0">型推論</a>ができるんですね。この次は何を読めばいいのかな、と思って「おすすめの（<b>わかりやすい</b>）本などあったら教えてください 🙏」と社内のフロントエンドミーティングで聞いてみたところ、以下のふたつをおすすめされました。</p>

<ul>
<li><a href="https://github.com/MostlyAdequate/mostly-adequate-guide">MostlyAdequate/mostly-adequate-guide: Mostly adequate guide to FP (in javascript)</a></li>
<li><a href="https://amzn.to/2BMyMGf">『すごい Haskell たのしく学ぼう！』</a></li>
</ul>


<p>前者はちょうど読み終えたところなんですが、演習問題があって回答を自動で採点してくれるところがおもしろいですね。<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a> は分かっている人向けです。英語の言い回しがちょっと難しい気がしますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>に対する苦手感（昔 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Lisp">Lisp</a> を触ろうとしてどうも馴染めなかった）はだいぶ解消されました。この調子で、後者のすごいH本もこれから読もうかと思います。</p>

<h3>おわりに</h3>

<p>というわけで、近況報告も兼ねて、とりとめのない type の話でした。そのうち、「どちらの type にも詳しいです！！！」と言えるようになりたいですね。</p>

<p>明日の <a href="https://adventar.org/calendars/3235">Feedforce Advent Calendar 2018</a> は <a href="https://twitter.com/meihong">@meihong</a> さんです。なにやら、なにかしらハートフルな内容を書いてくださるようです。それでは良い休日を！</p>
<div class="footnote">
<p class="footnote"><a href="#fn-fc4466bd" name="f-fc4466bd" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">テレタイプは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>の歴史的にもおもしろいので、興味のある方は『<a href="https://amzn.to/2BMr279">文字符号の歴史―欧米と日本編</a>』あたりをどうぞ。</span></p>
<p class="footnote"><a href="#fn-dbf09dd2" name="f-dbf09dd2" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">2017年3月11日に開催された《<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%DD%A5%B0%A5%E9%A5%D5%A5%A3">タイポグラフィ</a>の世界5 戦後日本の金属活字》で展示されていたものです。</span></p>
<p class="footnote"><a href="#fn-d4db3462" name="f-d4db3462" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://www4.nhk.or.jp/tsubo/179/">NHK 美の壺 取材こぼれ話</a> のページの《2018年6月22日放送 「心を伝える フォント」こぼれ話》という項に、タイププロジェクトの職場の様子（と自分の顔面）がちらっと載っています。</span></p>
<p class="footnote"><a href="#fn-41cf73fb" name="f-41cf73fb" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text">正確に言うと、<a href="https://flow.org/">Flow</a> から TypeScript への移行です。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[まだ .rubocop_todo.yml で消耗してるの？]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/05/140000</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/05/140000"/>
        <updated>2018-12-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>若干釣り臭いタイトルですが、先日 <a href="https://github.com/ryz310/rubocop_challenger">RubocopChallenger</a> という gem の <code>v1.0.0</code> をリリースしたので紹介させて頂きます 🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frubocop_challenger" title="GitHub - ryz310/rubocop_challenger: Make a clean your rubocop_todo.yml with CI" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rubocop_challenger">github.com</a></cite></p>

<h2>経緯</h2>

<p>僕が所属している <a href="https://socialplus.jp/">ソーシャルPLUS</a> は 2012 年頃から開発が始まりました。Rails のプロダクトとしては古株の方だと思います。</p>

<p>ソーシャルPLUS に <a href="https://github.com/rubocop-hq/rubocop">RuboCop</a> が導入されたのは 2017/02 頃 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> で、それまで特に RuboCop を意識したコードで開発を進めてこなかったので、巨大な .rubocop_todo.yml が出力され、それが手付かずのままになってしまっていました。ちなみに当初は <strong>1669 行 195 種類</strong> の違反ルールがありました。</p>

<p>このままでは RuboCop の恩恵が受けられないので、 RuboCop Challenge と称して (以前 <a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%A4%E3%82%B9%E3%83%BB%E3%83%90%E3%82%B1%E3%83%84%E3%83%BB%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8">Ice Bucket Challenge</a> が流行っていたので) 週イチで <code>.rubocop_todo.yml</code> から違反ルールを一つ消して、 auto-correct で修正する、という事をやっていたのですが、数ヶ月（数週間だったかも）ですっかりやるのを忘れてしまいました 😇</p>

<p>最近また RuboCop Challenge を再開しよう、という流れになったのですが、手動でコツコツやるのも精神的にしんどくなって来たので、なんとか自動化したいな、という気持ちになり、手動でやっていた Rubocop Challenge を Ruby スクリプトで動かせるようにしました。
最初は単純な Ruby スクリプトだったのですが、せっかくなので gem 化しよう、という事になり、作成したのが RubocopChallenger です。</p>

<p>ところで、弊社エンジニアの <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> が circleci-bundle-update-pr という CI を利用した Bundle Update の自動更新 gem を作成しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmasutaka%2Fcircleci-bundle-update-pr" title="GitHub - masutaka/circleci-bundle-update-pr: Provide continues bundle update using CircleCI" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/masutaka/circleci-bundle-update-pr">github.com</a></cite></p>

<p>これに感銘を受けて (？) 自分の RubocopChallenger も CI から<code>$ rubocop --auto-correct</code> を実行した結果が PR として届くような仕組みになっています。</p>

<h2>使い方</h2>

<p><strong>2021-09-23 修正</strong></p>

<h3>1. <code>.circleci/config.yml</code> の編集</h3>

<p>以下に設定例を紹介します。</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synComment"># .circleci/config.yml</span>
<span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

<span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">rubocop_challenge</span><span class="synSpecial">:</span>
    <span class="synIdentifier">docker</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">image</span><span class="synSpecial">:</span> circleci/ruby:2.5-node-browsers
    <span class="synIdentifier">working_directory</span><span class="synSpecial">:</span> ~/repo
    <span class="synIdentifier">steps</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>checkout
      <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span>
          <span class="synIdentifier">name</span><span class="synSpecial">:</span> Rubocop Challenge
          <span class="synIdentifier">command</span><span class="synSpecial">:</span> |
            gem install rubocop_challenger
            bundle exec rubocop_challenger go \
              --email={RubocopChallenger が commit する際の user email} \
              --name=&quot;{RubocopChallenger が commit する際の user name}&quot;

<span class="synIdentifier">workflows</span><span class="synSpecial">:</span>
  <span class="synIdentifier">version</span><span class="synSpecial">:</span> <span class="synConstant">2</span>

  <span class="synIdentifier">nightly</span><span class="synSpecial">:</span>
    <span class="synIdentifier">triggers</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span><span class="synIdentifier">schedule</span><span class="synSpecial">:</span>
          <span class="synIdentifier">cron</span><span class="synSpecial">:</span> <span class="synConstant">&quot;30 23 * * 1,2,3&quot;</span><span class="synComment"> # この設定の場合、火水木 の毎朝 8:30 に RubocopChallnger の PR が届きます</span>
          <span class="synIdentifier">filters</span><span class="synSpecial">:</span>
            <span class="synIdentifier">branches</span><span class="synSpecial">:</span>
              <span class="synIdentifier">only</span><span class="synSpecial">:</span>
                <span class="synStatement">- </span>master
    <span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
      <span class="synStatement">- </span>rubocop_challenge
</pre>


<p>インストールの際、 <strong>Gemfile に <code>gem 'rubocop_challenger'</code> を追記しないようにご注意下さい。</strong>
他の gem との互換性問題により、 rubocop_challenger 実行中にエラーが発生するケースがあることを確認しております。</p>

<h3>2. GitHub personal access token の作成</h3>

<p>RubocopChallenger が PR を作成するために GitHub personal access token が必要になります。
<a href="https://github.com/settings/tokens">Settings</a> から <a href="https://github.com/settings/tokens/new">Generate new token</a> をクリックして access token を作成します。
<strong>Select Scopes</strong> では <code>repo</code> にチェック ✅ を入れて下さい。</p>

<p><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/generate_token.png" alt="Generate new token" /></p>

<h3>3. CircleCI で環境変数の設定</h3>

<p>今回は <a href="https://circleci.com/">CircleCI</a> での利用例を紹介します 🙏</p>

<p><a href="https://circleci.com/dashboard">ダッシュボード画面</a> に移動し、 RubocopChallenger を適用したいアプリケーションの <strong>Project Settings</strong> -> <strong>Environment Variables</strong> へと移動します。
<strong>Add Variable</strong> をクリックして <code>GITHUB_ACCESS_TOKEN</code> という Key で先程作成した GitHub personal access token を設定します。</p>

<p><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/circleci_environment_variables.png" alt="Environment Variables" /></p>

<h3>5. 作成された PR の確認</h3>

<p>ここまでの手順を終えると、 CircleCI に指定したスケジュールで PR がされるようになると思います。
後は auto-correct の内容を確認して、 merge するだけです。</p>

<p>中には適用したくないルールも出てくると思いますが、その場合は <code>.rubocop.yml</code> にルールを再定義して auto-correct されないようにします。</p>

<h2>どんな PR が作成されるのか？</h2>

<p>ちょっと RubocopChallenger のバージョンが古い頃の物ですが、 <a href="https://github.com/ryz310/rubocop_challenger/pull/97">以下のような PR</a> が自動的に作成されます。</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/pull/97"><img src="https://github.com/ryz310/rubocop_challenger/raw/master/images/rubocop_challenge.png" alt="RubocopChallnge" /></a></p>

<p>デフォルトの設定では、 <code>.rubocop_todo.yml</code> の中から <strong>Cop supports --auto-correct</strong> かつ <strong>Offense count が最大</strong> のルールを消して、 auto-correct した結果が PR として作成されます。</p>

<p>また、 auto-correct の後で <code>$ rubocop --auto-gen-config</code> を実行して <code>.rubocop_todo.yml</code> を再作成しています。 RuboCop のバージョンが変わった時とかに <code>.rubocop_todo.yml</code> に出力される内容も若干変わっていたりするのですが、毎回最新の状態に作り直してくれるのがちょっと便利だったりします。</p>

<p>ちなみに PR の <strong>Description</strong> に表示されている内容は <a href="https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Layout/AlignHash">本家 RuboCop の RubyDoc</a> に記載されている内容と同じものです。これを表示するのに地味に苦労しました 😓</p>

<h2>高度な設定</h2>

<p>RubocopChallnger にはいくつかオプションが用意されているので、ご紹介します。</p>

<h3><code>--mode</code></h3>

<p>上述の通り、デフォルトでは auto-correct の対象は <strong>Cop supports --auto-correct</strong> かつ <strong>Offense count が最大</strong> のルールが選択されますが、 <code>mode</code> に渡す値によって対象を変更することが出来ます。</p>

<ul>
<li><code>most_occurrence</code> (デフォルト)

<ul>
<li><strong>Offense count が最大</strong> のルールを選択する</li>
</ul>
</li>
<li><code>least_occurrence</code>

<ul>
<li><strong>Offense count が最小</strong> のルールを選択する</li>
</ul>
</li>
<li><code>random</code>

<ul>
<li>全体からランダムに選択する</li>
</ul>
</li>
</ul>


<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--mode=random</span> 
</pre>


<h3><code>--labels</code></h3>

<p>RubocopChallnger が作成する PR に付与される label を指定します。デフォルトでは <strong>rubocop challenge</strong> というラベルが付与されます。
ソーシャルPLUS では <a href="https://waffle.io/">waffle.io</a> を利用していたりするのですが、レビュー待ち状態の label を付与するようにすると見落としがなくて便利です。</p>

<p><strong>スペース区切り</strong>で複数指定することが出来ます。</p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--labels=</span><span class="synStatement">&quot;</span><span class="synConstant">rubocop challenge</span><span class="synStatement">&quot;</span> <span class="synStatement">&quot;</span><span class="synConstant">in progress</span><span class="synStatement">&quot;</span>
</pre>


<h3><code>--template</code></h3>

<p>作成される PR をカスタマイズしたい場合などあるかと思います。
その場合は template に erb ファイルのパスを指定することが可能です。</p>

<p>デフォルトでは以下のテンプレートが使用されるので、必要に応じてカスタマイズしてご利用下さい 🙏</p>

<p><a href="https://github.com/ryz310/rubocop_challenger/blob/master/lib/templates/default.md.erb">https://github.com/ryz310/rubocop_challenger/blob/master/lib/templates/default.md.erb</a></p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--template=./path/to/template.md.erb</span>
</pre>


<h3><code>--no-regenerate-rubocop-todo</code></h3>

<p>上述の通り、デフォルトでは auto-correct の後で <code>$ rubocop --auto-gen-config</code> を実行して .rubocop_todo.yml を再作成しています。これが不要な場合は no-regenerate-rubocop-todo オプションを指定します。</p>

<h4>使用例</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bundle <span class="synStatement">exec</span> rubocop_challenger go <span class="synStatement">\</span>
    <span class="synSpecial">--email=rubocop-challenger@example.com</span> <span class="synStatement">\</span>
    <span class="synSpecial">--name=</span><span class="synStatement">&quot;</span><span class="synConstant">Rubocop Challenger</span><span class="synStatement">&quot;</span> <span class="synStatement">\</span>
    <span class="synSpecial">--no-regenerate-rubocop-todo</span>
</pre>


<h2>既知の不具合 <strong>(v1.2.0 で解消済み)</strong></h2>

<p>RuboCop のルールの中には <strong>Cop supports --auto-correct</strong> と表記されているにも関わらず、部分的にしか auto-correct してくれないものがあります。
例えば <code>Style/Semicolon</code> が auto-correct できるのは行末に <code>;</code> が存在する場合だけのようです。</p>

<pre class="code lang-ruby" data-lang="ruby" data-unlink>puts <span class="synSpecial">'</span><span class="synConstant">hoge</span><span class="synSpecial">'</span>; <span class="synComment"># =&gt; auto-correct される</span>
puts <span class="synSpecial">'</span><span class="synConstant">fuga</span><span class="synSpecial">'</span>; puts <span class="synSpecial">'</span><span class="synConstant">piyo</span><span class="synSpecial">'</span> <span class="synComment"># =&gt; auto-correct されない</span>
</pre>


<p>このようなルールが auto-correct 対象に選ばれると、RubocopChallenger を実行した後も違反が解決されず、後続の <code>$ rubocop --auto-gen-config</code> で再度 <code>.rubocop_todo.yml</code> に対象ルールが出てきてしまうので、 RubocopChallenger が機能しない状態になってしまいます。
現状では <code>Style/Semicolon</code> のようなルールに遭遇した場合は、手動で <code>.rubocop.yml</code> にルールを移動させる必要があります。
<del>今のところ RubocopChallenger 側での対策を思い付いていないので、もし良いアイデアがありましたら教えて下さい 🙏</del></p>

<p><strong>2019/03/26 追記</strong></p>

<p>RubocopChallenger v1.2.0 で Ignore リスト機能が追加されました。
RubocopChallenger を実行した後も違反が解決されず、後続の <code>$ rubocop --auto-gen-config</code> で再度 <code>.rubocop_todo.yml</code> に対象ルールが出てきてしまった場合、 <code>.rubocop_challenger.yml</code> というファイルが作成され、対象ルールが Ignore リストに追加されます。
Ignore リストに追加されたルールは次回以降、 RubocopChallenger の対象ルールとして選択されなくなるので、特に何もしなくとも運用を続けることが可能となります。</p>

<h2>最後に</h2>

<p>当初は <strong>1669 行 195 種類</strong> の違反ルールが .rubocop_todo.yml に存在していましたが、 RubocopChallenger を導入してから 3 ヶ月で <strong>1187 行 132 種類</strong> まで減らすことが出来ました。 auto-correct 可能な違反ルールはあと 62 種類残っているので、あと半分くらいまでは減らすことができそうです。</p>

<p>本記事では肥大化してしまった .rubocop_todo.yml を自動的に修正していく RubocopChallnger を紹介し、導入方法について解説させて頂きました。 .rubocop_todo.yml が肥大化して困っているプロジェクトで役立てて頂ければ幸いです 🙏</p>

<p>また、利用してみてフィードバックなどあれば <a href="https://github.com/ryz310/rubocop_challenger/issues">Issue</a> にてご連絡下さい。 GitHub では頑張って拙い英語を書くようにしていますが、日本語でも大丈夫です 🙆 PR も大歓迎です。どうぞ宜しくお願い致します 🙇</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>ちなみに導入したのは自分です<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内では開発チームマネージャーを名乗っています]]></title>
        <id>https://developer.feedforce.jp/entry/2018/12/05/110000</id>
        <link href="https://developer.feedforce.jp/entry/2018/12/05/110000"/>
        <updated>2018-12-05T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんばんちわ、 <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>こと玉田です。</p>

<p>この記事は <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a> の 5 日目の記事です。昨日は dfplus.io ブログ担当 1 号こと <a href="https://adventar.org/users/21688">id:tgacky</a> さんによる『<a href="https://blog.dfplus.io/entry/news/20181204">2歳になった dfplus.io 成長の記録</a>』でした。<a href="https://dfplus.io/">dfplus.io</a> 3 年目突入おめでとうございます🎉</p>

<p>さて今回は予告どおり、たまには真面目に自分の仕事について書いてみたいと思います。</p>

<h2>所属と経歴</h2>

<p>インターネット上では本業：光の戦士<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、散財部風紀取り乱し委員わいわい係として、おおむね tmd45 という ID で存在しています。</p>

<p>ふざけたプロフィール（気に入ってます）ですが、現実のフィードフォース社内ではプロダクト『<a href="https://socialplus.jp/">ソーシャルPLUS®</a>』の "<b>開発チームマネージャー</b>" を名乗っています。<br>
<span style="color: #cccccc">注追記: 自分の場合、役職ではないので外向けにはマネージャーではなくリーダーとなっています。</span></p>

<p>フィードフォースは社歴 2 社目で今年で勤続 5 年になりました。プロダクトが複数ある弊社内では珍しく（？）この 5 年間ずっとソーシャルPLUS 一筋にやっています。あんまりひとつのプロダクトに古参が長くいるのも良くはないんですが、今回そこは置いておいてもらって…</p>

<h2>フィードフォースの組織とマネジメント</h2>

<p>弊社の組織としての取り組みは、以下の記事が詳しいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.hito-link.jp%2Fmedia%2Finterview%2Ffeedforce" title="1on1、OKR、ノーレイティング…なぜ、フィードフォースは新しい施策に挑戦し続けられるのか？" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.hito-link.jp/media/interview/feedforce">www.hito-link.jp</a></cite></p>

<p>また、以前このブログでも取り上げた「キャリアパス」という仕組みを用いているのですが</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F24%2F180000" title="デザイナーのキャリアパスを見直している話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/10/24/180000">developer.feedforce.jp</a></cite></p>

<p>現在エンジニアのキャリアパスは以下の３つに分けられています。</p>

<ul>
<li>エンジニアリング志向エンジニア（技術プロフェッショナル志向）</li>
<li>マネジメント志向エンジニア</li>
<li>ビジネス志向エンジニア</li>
</ul>


<p>各エンジニアがどの志向であっても、その価値が認められるよう それぞれに ジュニア ～ エキスパート の 4 段階（さらに内側で 2 段階に分かれるので実際には 8 段階ある）をもって、求められるスキルと行動特性を定義しています。</p>

<p>キャリアパスが定められる前、所属 4 年目くらいでいわゆる「リーダー職」として（端的に言えば管理職手当が付く）開発チームリーダーをやっていました。キャリアパスが作られてからは「マネジメント志向エンジニア」を選び、それを基準に目標を定めたり評価してもらったりしています。</p>

<h2>ソーシャルPLUS チームの構成</h2>

<p>いまこの記事を書きながら初めてきちんと調べましたが、<a href="https://www.feedforce.jp/release/637/">ソーシャルPLUS のリリースは 2012 年 4 月 17 日</a>とのことで、6 年半も続いているサービスです。自分が参加してからの 5 年でも、チームメンバーや人数、その構成は様々に変化してきました。</p>

<p>現在は非エンジニアのプロダクトマネージャーが統括し、ビジネスチームと開発チームがそれぞれに仕事をしています。</p>

<p><figure class="figure-image figure-image-fotolife" title="ソーシャルPLUSチーム構成（概要）図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181204/20181204224143.png" alt="&#x30BD;&#x30FC;&#x30B7;&#x30E3;&#x30EB;PLUS&#x30C1;&#x30FC;&#x30E0;&#x69CB;&#x6210;&#xFF08;&#x6982;&#x8981;&#xFF09;&#x56F3;" title="f:id:tmd45:20181204224143p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ソーシャルPLUSチーム構成（概要）図</figcaption></figure></p>

<p>自分（水色の人影）は開発チームの一員ですが、プロダクトの経験年数が長いことや、マネジメント志向であることで「チームマネジメント」を担っています。</p>

<p>現在のエンジニアの人数は自分を含め８名です。自分が "チームマネージャー" を名乗って意識しているのは、8 人のメンバーが<strong>チームとしてより良く力を発揮しながらイイ雰囲気で仕事をしたい</strong>、ということです。技術ももちろん好きですし、ソーシャルPLUS というプロダクトに強い思い入れも理想もありますが、それでも自分が一番放っておけないのがソコだったという感じです。</p>

<h2>開発チームマネージャーとしてやっていること</h2>

<p>かんたんにまとめると以下のようなことをやってます。すべてが上手くいってるわけじゃなくて、試行錯誤しながらだけど、自分のお気持ちを中心に書いてます。</p>

<h3>プロダクトマネージャーとエンジニアメンバー間の緩衝材</h3>

<p>衝突というと語弊がありますが「あ、ちょっと説明足りないな」みたいなところを双方に補足したりしてます。</p>

<p>エンジニアメンバー同士でもそういうことはあるので、心理的安全性の確保とも言えるかも。</p>

<h3>プロダクト開発の優先度の最終決定</h3>

<p>たいていのものはプロダクトオーナーとチームで話し合って決めますが、これといった決め手に欠けるものには自分が <del>経験と勘で</del> 決めたりします。</p>

<h3>プロダクト開発チームメンバーとの 1on1</h3>

<p>月初に 1 回、チームのエンジニア全員（7 名）と 30 分ずつ話しています。社内の 1on1 のなかでは頻度は低いほうですね。</p>

<p>事前に以下の項目をアンケートで答えてもらい、それを確認しながら雑談しています。</p>

<ul>
<li>前月でやったこと・わかったこと（YW）</li>
<li>前月の自分のパフォーマンス（1 ～ 5 選択＋コメント）</li>
<li>今月やろうと思うこと（T）</li>
<li>チームやプロダクトについて（1 ～ 5 選択＋コメント）</li>
<li>会社について（1 ～ 5 選択＋コメント）</li>
<li>その他 自由欄</li>
</ul>


<p>「プロダクトの開発」に関することを中心に、会社のことも含め割と広範囲に話しています。チームメンバーのお気持ち確認とか、各々の体調だったり生活だったりの少しプライベートなことを聞かせてもらうこともあります。個別に相談されることでも、コトによっては「You それチームに言ってみな Yo! (σゝ∀・)σ」とチームの問題にしてもらったり（たいていは週一でやっている振り返りKPTで出してもらいます）。開発マネジメント定例というマネージャーが集まる定例にエスカレーションして、もっと広い範囲で解決を試みたりもします。</p>

<p>気をつけてるつもりでも、自分がおしゃべりな質なのでこちらが喋りすぎている気はします。毎度反省。けど 1on1 やってよかった、というフィードバックをちょくちょくもらえてるので私もありがたいです。</p>

<h3>プロダクト開発チームミーティングの司会進行</h3>

<p>上の緩衝材の話とも関連してますが、ミーティングの雰囲気づくりも兼ねてるので司会進行業は自分がやることが多いです。</p>

<p>とはいえ、自分が居ないと定例が進まないというのも問題なので、ここは逆になんとかしておきたい状況です。</p>

<h3>プロダクト開発の落ち穂拾い</h3>

<p>計画しているタスク以外にも、毎日いろんなことが起こります。</p>

<p>落ち穂拾いといっても、全部私が片付けているというわけではなく、メンバーの状況を見てタスクとしてお願いするということもします。</p>

<p>拾いにくい落ち穂を拾う、というのが正しいかも。拾いやすいもの（それも人によって違う）は自主的に拾ってくれるメンバーなので、助かってます。</p>

<h2>おわり</h2>

<p>他にもいろいろやってることがあるんですが、なかなか文章にするのが難しいですね。今回はこのへんで。</p>

<p>明日の <a href="https://adventar.org/calendars/3235">feedforce Advent Calendar 2018</a> は <a href="https://adventar.org/users/21767">id:funesan2</a> による『煮る！』お話です。いったい何を煮たのか…おたのしみに！</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>オンラインMMORPG『<a href="https://jp.finalfantasyxiv.com/">FINAL FANTASY XIV</a>』のプレイヤーの意<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[インク沼に足首らへん？まで浸かっている話]]></title>
        <id>https://blog.betaful.life/entry/2018/12/01/000000</id>
        <link href="https://blog.betaful.life/entry/2018/12/01/000000"/>
        <updated>2018-11-30T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> の 1 日目の記事です。ご参加予定の皆さまありがとうございます。</p>

<p>こちらは自分が浸かってる沼について語りつつ、他の沼を覗いてみようみたいな趣旨のゆるい Advent Calendar です。まだ空きもたくさんありますので、お気軽にご参加ください。</p>

<p>ここで言う「沼」とは、以下のような<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%E9%A5%F3%A5%B0">スラング</a>としての沼を指します。</p>

<blockquote><p>あるジャンルが好きになり過ぎてハマってしまい抜け出せなくなること。沼落ち。</p></blockquote>

<p>さっそく私が最近ハマり始めた沼のお話です。</p>

<ul class="table-of-contents">
    <li><a href="#万年筆インク沼">万年筆インク沼</a><ul>
            <li><a href="#これから始めてみたい人へのおすすめ万年筆">これから始めてみたい人へのおすすめ万年筆</a><ul>
                    <li><a href="#PILOT-カクノ">PILOT カクノ</a></li>
                    <li><a href="#PILOT-プレラ-色彩逢い">PILOT プレラ 色彩逢い</a></li>
                    <li><a href="#TWSBI-ECO--TWSBI-ECO-T">TWSBI ECO / TWSBI ECO-T</a></li>
                </ul>
            </li>
            <li><a href="#これから始めてみたい人へのおすすめインク">これから始めてみたい人へのおすすめインク</a></li>
        </ul>
    </li>
    <li><a href="#インクがたくさん増えてきたら">インクがたくさん増えてきたら</a></li>
    <li><a href="#さらに沼へ">さらに沼へ</a></li>
    <li><a href="#インク沼っていうか文房具沼が深い">インク沼っていうか文房具沼が深い</a></li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h2 id="万年筆インク沼">万年筆インク沼</h2>

<p>すでに過去の記事に書いてますが、9月から紙のシステム手帳を日記代わりに使い始め、それをきっかけに 10 月頃から万年筆を使うようになりました。</p>

<p>以下がこれまでの成果です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F10%2F20%2F205348" title="万年筆とインクに入門してみた - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/10/20/205348">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F10%2F28%2F205014" title="入れたインクの色が見える &quot;スケルトンな万年筆&quot; をまとめてみた - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/10/28/205014">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F11%2F06%2F000636" title="BUNGUBOX オリジナルインク TOKYO METRO COLOR - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/11/06/000636">blog.tmd45.jp</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2018%2F11%2F11%2F121605" title="インクを &quot;タミヤして&quot; いただく初体験 - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2018/11/11/121605">blog.tmd45.jp</a></cite></p>

<p>現時点で持っているインクを一覧にしてみました。</p>

<p><figure class="figure-image figure-image-fotolife" title="自分だけのインク手帳を作る愉しみ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181129/20181129235754.jpg" alt="&#x81EA;&#x5206;&#x3060;&#x3051;&#x306E;&#x30A4;&#x30F3;&#x30AF;&#x624B;&#x5E33;&#x3092;&#x4F5C;&#x308B;&#x305F;&#x306E;&#x3057;&#x307F;" title="f:id:tmd45:20181129235754j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>自分だけのインク手帳を作る愉しみ</figcaption></figure></p>

<p>こういうものを作ること自体が楽しい(*´ｪ`*)</p>

<p>似たような色でも、濃く重ねたり、水で伸ばしたり、時間が経ったりすると違う味が出てくるのと<br/>
一色一色に素敵な名前が付けられていたり、ユニークなシリーズが出ていたりと、ほんとに沼だなぁと思う世界です。</p>

<h3 id="これから始めてみたい人へのおすすめ万年筆">これから始めてみたい人へのおすすめ万年筆</h3>

<p>最近、万年筆やインク自体の流行りが来てるそうです。その流れもあってか、国内メーカーのサイトには万年筆の入門・紹介ページがあったりします。</p>

<p>私も最初は PILOT の万年筆入門記事を読んでました。</p>

<ul>
<li><a href="http://www.pilot.co.jp/promotion/library/001/">万年筆は「書く為の道具」 | 特集記事一覧 | PILOT LIBRARY | PILOT</a></li>
</ul>


<p>インクの入れ方や、お手入れの仕方などが動画になっていてわかりやすいと思います。</p>

<h4 id="PILOT-カクノ">PILOT カクノ</h4>

<p>文房具屋さんでの取扱いも多く、そもそも入門用として作られているので、どこでもおすすめされているのが <strong>PILOT カクノ</strong>。<strong>1,000円程度</strong> で購入することができ、カートリッジインクとかんたんな説明書が同封されています。</p>

<p>他の廉価万年筆に比べて、ペン先の太さのバリエーションが多いのも魅力でしょうか。手帳など細かく書くのに使うなら EF（極細字）や F（細字）、それ以外でインクの色をしっかり楽しみたいなら M（中字）以上の太さが良いかと思います。</p>

<p>ボトルインクを楽しむときには、別売りの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D0%A1%BC%A5%BF%A1%BC">コンバーター</a>を購入する必要があります。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0744C76MG/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41Y9g7e5lEL._SL160_.jpg" class="hatena-asin-detail-image" alt="kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF" title="kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0744C76MG/tmd45-22/">kakuno/万年筆・カクノ F細字【透明ボディ/ノンカラー】 FKA-1SR-NCF</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%A4%A5%ED">パイロ</a>ット</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B0744C76MG/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h4 id="PILOT-プレラ-色彩逢い">PILOT プレラ 色彩逢い</h4>

<p><strong>3,000円台</strong> でおすすめなのは <strong>PILOT プレラ 色彩逢い</strong>。全長が短く小ぶりなボディが可愛らしく、クリアカラーで中に入れるインクと色を合わせるのも楽しいです。</p>

<p>ペン先のバリエーションは F（細字）と CM（カリグラフィ）というちょっと変わった組み合わせ。本格的なカリグラフィには向かないですが、太い線と細い線の両方を表現できる（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>のような感じ）のが面白くて、私は普段から使っています。</p>

<p>こちらは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D0%A1%BC%A5%BF%A1%BC">コンバーター</a>が付属しているので、インクがあればそれを補充して使うことができます。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VWMN94/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51lBvw4E6oL._SL160_.jpg" class="hatena-asin-detail-image" alt="【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー" title="【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VWMN94/tmd45-22/">【PILOT】パイロット プレラ 色彩逢い(いろあい) PRERA 万年筆F （細字）ブルー</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> PILOT</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B009VWMN94/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VVBRJM/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41Ns%2B6ToXxL._SL160_.jpg" class="hatena-asin-detail-image" alt="Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ" title="Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009VVBRJM/tmd45-22/">Pilot プレラ Iro-Ai カリグラフィー用のペン先 万年筆ボディ</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Pilot</li><li><span class="hatena-asin-detail-label">発売日:</span> 2014/10/01</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B009VVBRJM/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h4 id="TWSBI-ECO--TWSBI-ECO-T">TWSBI ECO / TWSBI ECO-T</h4>

<p>最近自分で使いはじめて気に入ってるのが、<strong>5,000円台</strong> で入手可能な <strong>TWSBI ECO</strong>。TWSBI は台湾の万年筆メーカーです。</p>

<p>こちらもペン先の種類が豊富です。珍しいところでは STUB 1.1 という極太のペン先が存在しています。プレラのカリグラフィと同様に、太い線と細い線を表現することができます。</p>

<p>1,000円、3,000円 のものよりしっかりした感触で「万年筆を使ってるゼ」という満足感が得られる気がします（笑）</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B011M8HXQ2/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31cn5R1ZtJL._SL160_.jpg" class="hatena-asin-detail-image" alt="TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340" title="TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B011M8HXQ2/tmd45-22/">TWSBI（ツイスビー） ECO 万年筆 F（細字） ホワイト M7444340</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> TWSBI</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B011M8HXQ2/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3 id="これから始めてみたい人へのおすすめインク">これから始めてみたい人へのおすすめインク</h3>

<p>手に入りやすく、色も豊富、名前も素敵で、ミニボトルの価格帯もお財布に優しいということで、やっぱり PILOT <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%A7%BA%CC%BC%B6">色彩雫</a>はおすすめです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B012ESIIGS/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41KXd2193wL._SL160_.jpg" class="hatena-asin-detail-image" alt="PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます" title="PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B012ESIIGS/tmd45-22/">PILOT　色彩雫　イロシズク　ミニ　3色セット　15ml　専用ケース入り　INK-15　3色自由に選べます</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> PILOT</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B012ESIIGS/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>同様に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A1%BC%A5%E9%A1%BC%CB%FC%C7%AF%C9%AE">セーラー万年筆</a>の四季織シリーズも。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B075ZWB2PQ/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51jSZeJix9L._SL160_.jpg" class="hatena-asin-detail-image" alt="セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210" title="セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B075ZWB2PQ/tmd45-22/">セーラー万年筆 万年筆 ボトルインク 四季織 十六夜の夢 雪明 13-1008-210</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A1%BC%A5%E9%A1%BC%CB%FC%C7%AF%C9%AE">セーラー万年筆</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/29</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B075ZWB2PQ/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>こういったメジャーなインク以外にも、以前の記事でも紹介しましたが、<a href="http://happyinkdays.hatenablog.com/">HAPPY INK DAYS archives</a> というブログで毎日いろいろなインクが紹介されています。</p>

<p>見てるだけでも楽しいですし、物欲も刺激されます。自分の手で、この色で、好きなものを書いてみたいな～と妄想するのがたまりません。</p>

<h2 id="インクがたくさん増えてきたら">インクがたくさん増えてきたら</h2>

<p>すべてを万年筆に入れておくのは難しいです。万年筆は普段から使っていないと、ペン先のインクが乾いたりしてしまいます。万年筆の一番のメンテナンスは「毎日使うこと」とのことです。</p>

<p>なので、普段使う万年筆には使いやすい色とか、とくにお気に入りの色とかを入れて持ち歩きます。</p>

<p>そうでないインクは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>やガラスペンなどを使って楽しむようにしています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B010D2PAWW/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41%2BcEYACmXL._SL160_.jpg" class="hatena-asin-detail-image" alt="ルビナート ガラスペン NOV/D アメジスト#6" title="ルビナート ガラスペン NOV/D アメジスト#6"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B010D2PAWW/tmd45-22/">ルビナート ガラスペン NOV/D アメジスト#6</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> ルビナート(Rubinato)</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B010D2PAWW/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>インク沼として楽しむのであれば、万年筆ではなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>だけでもいいかもしれませんね。</p>

<h2 id="さらに沼へ">さらに沼へ</h2>

<p>このように、インクの魅力に惹かれていった結果、万年筆が何本も増えたり（まだお高いものには手を出していないですが^^;）、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C4%A4%B1%A5%DA%A5%F3">つけペン</a>が増えたり…</p>

<p>さらには「万年筆インクで書きやすい紙」についてもこだわりはじめます。</p>

<p>もともと文房具そのものが好きということもあって、「万年筆インクで書きやすい紙」もいろいろな種類を買って試してみています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07B2ZJYD6/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41LmZ862uwL._SL160_.jpg" class="hatena-asin-detail-image" alt="ミドリ メモ MDペーパーパッド A5 無罫 15235006" title="ミドリ メモ MDペーパーパッド A5 無罫 15235006"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B07B2ZJYD6/tmd45-22/">ミドリ メモ MDペーパーパッド A5 無罫 15235006</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> デザインフィル</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/28</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B07B2ZJYD6/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0177ONZHG/tmd45-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/21SabU9xmoL._SL160_.jpg" class="hatena-asin-detail-image" alt="神戸派計画 GRAPHILO paper A5" title="神戸派計画 GRAPHILO paper A5"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0177ONZHG/tmd45-22/">神戸派計画 GRAPHILO paper A5</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 神戸派計画</li><li><span class="hatena-asin-detail-label">メディア:</span> オフィス用品</li><li><a href="http://d.hatena.ne.jp/asin/B0177ONZHG/tmd45-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>これ以外にもいろいろ買いましたが、それはまた別の機会にまとめたいと思います。</p>

<h2 id="インク沼っていうか文房具沼が深い">インク沼っていうか文房具沼が深い</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/Facebook">Facebook</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Instagram">Instagram</a> などあらゆる場所で文房具に関する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a>やグループが盛り上がっています。</p>

<p>そういうのを眺めるのも楽しみのひとつです。</p>

<ul>
<li><a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88?f=tweets&amp;vertical=default&amp;src=hash">#手書きツイート - Twitter</a></li>
<li><a href="https://twitter.com/hashtag/%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%99?f=tweets&amp;vertical=default&amp;src=hash">#ゆる書写 - Twitter</a></li>
<li><a href="https://twitter.com/hashtag/%E4%B8%87%E5%B9%B4%E7%AD%86%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E9%83%A8?f=tweets&amp;vertical=default&amp;src=hash">#万年筆イラスト部 - Twitter</a></li>
</ul>


<p>ハ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DA%A5%F3">コペン</a>さんの書写ツイートがとても美しくて好きです。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ゆる書写を書きました。<br><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%BE%B8%CD%C0%EE%CD%F0%CA%E2">江戸川乱歩</a> 「鏡地獄」より。<br>ブラックライトで光らせてみました。<br><br>使用インク : Organics studio Nitrogen、Walden pond 、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%A7%BA%CC%BC%B6">色彩雫</a> 山葡萄<br><br> <a href="https://twitter.com/hashtag/%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%99?src=hash&amp;ref_src=twsrc%5Etfw">#ゆる書写</a> <a href="https://twitter.com/hashtag/%E6%9B%B8%E5%86%99?src=hash&amp;ref_src=twsrc%5Etfw">#書写</a> <a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88?src=hash&amp;ref_src=twsrc%5Etfw">#手書きツイート</a> <a href="https://twitter.com/hashtag/%E6%89%8B%E6%9B%B8%E3%81%8D?src=hash&amp;ref_src=twsrc%5Etfw">#手書き</a> <a href="https://twitter.com/hashtag/%E3%82%A4%E3%83%B3%E3%82%AF%E6%B2%BC?src=hash&amp;ref_src=twsrc%5Etfw">#インク沼</a> <a href="https://twitter.com/hashtag/%E8%89%B2%E5%BD%A9%E9%9B%AB?src=hash&amp;ref_src=twsrc%5Etfw">#色彩雫</a> <a href="https://twitter.com/hashtag/Organicsstudio?src=hash&amp;ref_src=twsrc%5Etfw">#Organicsstudio</a> <a href="https://twitter.com/hashtag/%E6%BF%83%E6%B7%A1%E8%90%8C%E3%81%88?src=hash&amp;ref_src=twsrc%5Etfw">#濃淡萌え</a><a href="https://twitter.com/hashtag/%E6%B7%B1%E5%A4%9C%E3%81%AE%E3%82%86%E3%82%8B%E6%9B%B8%E5%86%9960%E5%88%86%E4%B8%80%E6%9C%AC%E5%8B%9D%E8%B2%A0?src=hash&amp;ref_src=twsrc%5Etfw">#深夜のゆる書写60分一本勝負</a> <a href="https://t.co/plAwlgkLDk">pic.twitter.com/plAwlgkLDk</a></p>&mdash; ハ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DA%A5%F3">コペン</a> (@hakoppen2018) <a href="https://twitter.com/hakoppen2018/status/1061549929263321088?ref_src=twsrc%5Etfw">2018年11月11日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>ほぼ同様の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a>が <a class="keyword" href="http://d.hatena.ne.jp/keyword/Instagram">Instagram</a> にもあります。</p>

<h2 id="おわりに">おわりに</h2>

<p>まだまだ紹介したいものがたくさんありますが、一記事にするにはいろいろありすぎるのでこのへんで。</p>

<p>というか参加ハードルを下げるためにさらっと書いて終わろうと思ってたのに、めっちゃ書いてしまった。沼だわぁ。</p>

<p>明日は <a href="https://adventar.org/users/20291">maccha418</a> さんが『リアル脱出ゲーム（SCRAP）沼』について書いてくれるとのこと。私もリアル脱出ゲームは一度参加したことがありますが、素敵なエンタテイメントですよね！</p>

<p>引き続き <a href="https://adventar.org/calendars/2946">沼 Advent Calendar 2018</a> をよろしくおねがいします☺</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI Orbs 入門]]></title>
        <id>https://blog.tsub.me/post/introducing-to-circleci-orbs/</id>
        <link href="https://blog.tsub.me/post/introducing-to-circleci-orbs/"/>
        <updated>2018-11-10T08:47:00.000Z</updated>
        <summary type="html"><![CDATA[<p>とうとう待望の CircleCI Orbs がリリースされたので一通り触ってみました。</p>

<p><a href="https://circleci.com/blog/announcing-orbs-technology-partner-program/">Announcing CircleCI Orbs and our new Technology Partner Program</a></p>

<p>今回作ったサンプルは以下のリポジトリにありますので手っ取り早く知りたい人は以下のコードを見ると良いかと思います。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/circleci-orbs-sandbox">tsub/circleci-orbs-sandbox</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Albert で GitHub リポジトリを開ける拡張を作った]]></title>
        <id>https://blog.tsub.me/post/create-albert-github/</id>
        <link href="https://blog.tsub.me/post/create-albert-github/"/>
        <updated>2018-10-28T09:35:00.000Z</updated>
        <summary type="html"><![CDATA[<p>先日プライベートの開発マシンを Linux にしたのですが、macOS の時に一番重宝していたものがなにかというと、実は <a href="https://www.alfredapp.com/">Alfred</a> だったことに気づきました。</p>

<p>Alfred がないとストレスフルです。</p>

<p>ただ Linux には Alternative Alfred がいくつかあり、その中でも Albert が比較的良さそうだったので Albert を使っていますが、Alfred で言う Workflow にあたるものが全然充実していませんでした。</p>

<p>特に Alfred から GitHub を開く操作が一番多い気がするので、まずはそれを Albert でもできるようにするために、今回拡張を作りました。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/albert-github">tsub/albert-github: Open GitHub repository in browser with Albert</a></p>

<p><img src="https://gyazo.com/fff7125ea22e33c863f6fd535d7f2b8b.png" alt="image" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[社内勉強会で『Markdown と学ぶ HTML 基礎』を発表しました]]></title>
        <id>https://developer.feedforce.jp/entry/2018/10/12/184014</id>
        <link href="https://developer.feedforce.jp/entry/2018/10/12/184014"/>
        <updated>2018-10-12T09:40:14.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://ff14wiki.info/?%E8%99%9A%E6%A7%8B%E8%A3%85%E5%82%99">虚構</a>集めてますか？
こんにちは、白魔の <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です。</p>

<p>社内勉強会の担当で『<a href="https://speakerdeck.com/tmd45/12-fftt-number-331">Markdown と学ぶ HTML 基礎</a>』という発表をしました。</p>

<p>タイトルの通りごくごく基本的な内容ですが、ちょっとした部分で「知らなかった！」みたいなのが結構あったみたいで盛り上がりましたv(￣Д￣)v</p>

<p><iframe id="talk_frame_469478" src="//speakerdeck.com/player/3db5b73226054f189a530dad5746e973" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><cite class="hatena-citation"><a href="https://speakerdeck.com/tmd45/12-fftt-number-331">speakerdeck.com</a></cite></p>

<p>スライドはほぼ初学者向けに書いていますが、これは 8 月末に開催した <a href="https://e-navigator.connpass.com/event/96656/">e-Navigator 勉強会#4</a> 向けに作成したスライドの焼き増し（第二版）だからだったりします。</p>

<p>一部 HTML の間違いを修正し、Markdown parser や linter の情報を追記しております。</p>

<p>以下、FFTT 恒例の感想付せん返信です。</p>

<h3>感想付せん返信</h3>

<ul>
<li>Markdown にまだ慣れてない感があるので警察こわい</li>
<li>警察👮こわい

<ul>
<li>こわくないよ〜 勉強会で発散したから <del>しばらく</del> こわくないよ〜</li>
<li>ぜひこれを機会に文章構造と HTML を意識してみてください！</li>
</ul>
</li>
<li>HTML 使いこなすためにはまず文章構造をですね…

<ul>
<li><strong>それな</strong></li>
</ul>
</li>
<li>勉強になりました！捕まらないように気をつけます…

<ul>
<li>(ΦωΦ)ﾌﾌﾌ…</li>
</ul>
</li>
<li><code>ul</code> タグと <code>ol</code> タグの意味を理解できました

<ul>
<li>やったね！</li>
</ul>
</li>
<li>はじめてプログラミングに触れた日、<a href="https://dotinstall.com/">ドットインストール</a>で HTML から始めた時を思い出しました！

<ul>
<li>(　；∀；) ｲｲﾊﾅｼﾀﾞﾅｰ</li>
</ul>
</li>
<li>tmd45 さんが楽しそうに話されていて楽しかったです！！

<ul>
<li>照れる〜 🤑</li>
</ul>
</li>
<li><a href="https://html.spec.whatwg.org/">WHATWG HTML Living Standard</a> もよろしくオネシャス！

<ul>
<li>これは知らなかった！へ〜</li>
</ul>
</li>
</ul>


<blockquote><p>HTML5 や HTML 5.1 は W3C が標準化を進めていますが、W3C とは別に、Apple, Chrome, Opera が設立した WHATWG という団体が独自に策定を進めている HTML 仕様です。HTML Living Standard と呼ばれ、バージョン番号や、何年何月何日版という概念もなく、毎日改版、修正、強化が進められています。</p>

<p><a href="http://www.tohoho-web.com/html/memo/htmlls.htm">HTML Living Standard - とほほのWWW入門</a></p></blockquote>

<ul>
<li>奥深き Markdown …

<ul>
<li>GitHub Flavor とか方言や拡張がいろいろあるので、あっちでは上手く書けたのがこっちでは崩れるとか</li>
<li>文章構造をシンプルにすれば、あまり悩まなくて済んだりもします 😇</li>
</ul>
</li>
<li>リストに <code>- [ ]</code> を混ぜるのによく困ってますね

<ul>
<li>これも HTML がどうなって「意図どおりでない」表示なってしまうのか把握できるといいですね 😇</li>
<li>もしかしたら、インデントのスペースの数が合ってないとかも影響してるかも？</li>
</ul>
</li>
<li>基礎的な内容だと思ったけど知らないこともあって良かった！！

<ul>
<li>そう言ってもらえるとありがたいです！😊</li>
</ul>
</li>
<li>総合職向け勉強会で話してもいい内容だと思いました

<ul>
<li>たしかに 🦀</li>
</ul>
</li>
<li>リストの中の複数行コードという積年の悩みが消えました。ありがとうございます！

<ul>
<li>この質問に答えてくれたのは <a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> ですけど</li>
<li>これもやっぱり Markdown の拡張と、文章構造／HTML の話の絡み合いですねー</li>
</ul>
</li>
<li>Markdown のリンク記法はめんどいから Alfred Workflow に頑張ってもらってます

<ul>
<li>私は Chrome 拡張の <a href="https://chrome.google.com/webstore/detail/create-link/gcmghdmnkfdbncmnmlkkglmnnhagajbm">Create Link</a> を使ってます！</li>
</ul>
</li>
<li><a href="http://hatenadiary.g.hatena.ne.jp/keyword/%E3%81%AF%E3%81%A6%E3%81%AA%E8%A8%98%E6%B3%95%E4%B8%80%E8%A6%A7">はてな記法</a>に触れるやさしさ

<ul>
<li>やさしさなんだろうか（笑）</li>
<li>Markdown が台頭してくる前は、世の中の文章構造は全部はてな記法で書ければいいのにと思ってた時期もありました😏</li>
</ul>
</li>
<li>font color を <span style="color: red">red</span> にするにはどうしたらよいですか？

<ul>
<li>( ＾ω＾) おっ？</li>
<li>マジレスすると「文字を赤色にする」のは文章構造ではないので、たとえば「強調」の構造に対して Style（CSS）に <code>color: red</code> を定義するなど、文章構造とスタイルは分けるほうが良いですね 😇</li>
</ul>
</li>
</ul>


<p>気づいたら社内の派閥投票がされていた！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20181012/20181012170816.jpg" alt="f:id:tmd45:20181012170816j:plain:w400" title="f:id:tmd45:20181012170816j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>私は「Shift キー押さなくて済むので <code>-</code> リスト派」です。</p>

<p><a href="https://spec.commonmark.org/0.28/#list-items">CommonMark（0.28）の仕様</a>でも、どちらかに制限されているわけではないので、どちらがジャスティスってことも無いみたいですね。</p>

<p>勉強会後の雑談で「 <code>-</code> リストを書いてる途中で、リアルタイムプレビューがせっかちで一瞬 見出し 記法（レベル 2 見出し）として扱われる」ことに気がついて <code>*</code> リストに宗旨変えしてる人がいました！</p>

<p>変換される HTML（というか文章構造）が把握できるとそんな気づきもあったりします！ぜひみなさんも Markdown から HTML、そして文章構造について知ってみてくださいね。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 1.11 の Modules (vgo) を CircleCI で使う]]></title>
        <id>https://blog.tsub.me/post/go111-modules-in-circleci/</id>
        <link href="https://blog.tsub.me/post/go111-modules-in-circleci/"/>
        <updated>2018-08-30T05:33:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/tsub/s3-edit">個人プロジェクト</a>にて、先日リリースされた Go 1.11 の Modules (vgo) を使ってみました。</p>

<p>移行自体はスムーズにできたのですが、CircleCI でのキャッシュのやり方がそこそこ重要かも？と思ったので記事を書きました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[フォントまわりのツールの探し方]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2018/08/12/235803</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2018/08/12/235803"/>
        <updated>2018-08-12T14:58:03.000Z</updated>
        <summary type="html"><![CDATA[<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> 上でとある鍵アカ氏が「このツール知らなかった！ 使ってみたらべんり！ 楽しい！」的なことをつぶやいていました。フォントの世界にはお役立ちツールがいろいろとあるのですが、日本語での情報が少ないこともあり、とっかかりが難しいかもしれません。そこでこの記事では、「ツールを探すならまずはここから」という定番の情報源を3つ紹介しておきます。</p>

<h3>1. awesome-typography</h3>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FJolg42%2Fawesome-typography" title="Jolg42/awesome-typography" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Jolg42/awesome-typography">github.com</a></cite></p>

<p>フォント関連のさまざまなツールがリストアップされたリンク集です。ツールだけでなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>のフォントや、フォント関連のドキュメントなども一緒に挙げられています。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a>別に並んでおり、ごく簡単な説明もついていますので、「この言語でうまいことあれをやってくれるツールないかなー？」というときには真っ先にチェックすべきページです。</p>

<h3>2. 技術カンファレンスの動画</h3>

<p>フォント関係のカンファレンスというと <a href="https://www.atypi.org/conferences">ATypI</a> が有名ですが、<a href="https://www.typotalks.com/labs/">TYPO Labs</a> や <a href="http://typemedia.org/robothon/">Robothon</a> のように、技術的側面に特化したカンファレンスも開催されています。定番ツールから尖ったツールまで、作者の解説や実演デモをじっくり見ることができます。以下のように動画が公開されており、カンファレンスに行かずとも視聴できるのが嬉しいところです。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/TYPO">TYPO</a> Labs: <a href="https://www.typotalks.com/videos/?talk_event=TYPO%20Labs%202018&amp;talk_langs[en]=en&amp;talk_langs[de]=de">2018</a>, <a href="https://www.typotalks.com/videos/?talk_event=TYPO%20Labs%202017&amp;talk_langs[en]=en&amp;talk_langs[de]=de">2017</a>, <a href="https://www.typotalks.com/videos/?talk_event=TYPO%20Labs%202016&amp;talk_langs[en]=en&amp;talk_langs[de]=de">2016</a></li>
<li>Robothon: 2018 <a href="https://www.facebook.com/RoyalAcademyKABK/videos/1613161622101814/">[1]</a> <a href="https://www.facebook.com/RoyalAcademyKABK/videos/1614287785322531/">[2]</a> <a href="https://www.facebook.com/RoyalAcademyKABK/videos/1614395861978390/">[3]</a>; <a href="https://vimeo.com/robothon">2015/2012/2009</a></li>
</ul>


<h3>3. TypeDrawers</h3>

<p><a href="https://typedrawers.com/">TypeDrawers</a> は、書体制作やレタリング、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%DD%A5%B0%A5%E9%A5%D5%A5%A3">タイポグラフィ</a>に関する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B7%C7%BC%A8">掲示</a>板です。プロの書体デザイナーや開発者が多く、活発な議論がなされています。いくつかのカテゴリーに分かれていますが、ツールの話題を探すのであれば、下の2つがメインになるでしょう。</p>

<ul>
<li><a href="https://typedrawers.com/categories/type-design-software">Type Design Software — TypeDrawers</a></li>
<li><a href="https://typedrawers.com/categories/font-technology">Font Technology — TypeDrawers</a></li>
</ul>


<p>いろいろなスレッドが立ちますので、全部追いかけようとすると大変かもしれませんが、最新の動向や界隈の評判などをチェックすることができます。フォント界の Stack Overflow のような存在です。アカウント登録をして、やりとりに参加するのも良いかもしれません。</p>

<h3>その先へ</h3>

<p>以上、3つのソースをさらっと紹介しました。気になるツールや愛用のツールが出てきたら、そのツールの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>／フォーラムを覗いたり、作者の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> をフォローしたりすると、芋づる式に世界が広がっていきます。巨人の肩の上に乗って満喫しましょう。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%C9%B5%AD">追記</a>：OpenType の仕様に興味が出てきたら以下の記事もどうぞ。</p>

<ul>
<li><a href="https://shiromoji.hatenablog.jp/entry/2016/06/21/003529">OpenType の仕様策定の議論をのぞくには - しろもじメモランダム</a></li>
</ul>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes.rb に講師役として参加してきました]]></title>
        <id>https://developer.feedforce.jp/entry/2018/07/23/140133</id>
        <link href="https://developer.feedforce.jp/entry/2018/07/23/140133"/>
        <updated>2018-07-23T05:01:33.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。</p>

<p>先日 Kubernetes.rb という勉強会があり、そちらの講師役として参加してきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flocalhost.connpass.com%2Fevent%2F90340%2F" title="Kubernetes.rb (2018/07/21 13:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://localhost.connpass.com/event/90340/">localhost.connpass.com</a></cite></p>

<p><code>.rb</code> と言いつつ Ruby の話は一切ありませんでした。タイトルの伏線は回収されず 😁</p>

<h2>参加の経緯</h2>

<p>さて、今回自分としては初の勉強会の主催側 (?) としてお手伝いすることとなったのですが、その経緯について軽くご紹介します。</p>

<p>もともと一からイベントを企画したわけではなく、主催の <a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんが講師役を募集していたところに応募した形になります。</p>

<p>ただ、応募の経緯としては先日ご退職された元フィードフォースの <a href="https://twitter.com/284km">@284km</a> さんから、「講師役やってくれる人を1名探しているんですが、tsub 氏どうですか？」というお誘いを貰い、やってみたいと思ったので繋いでいただいた感じです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180723/20180723125903.png" alt="f:id:tsub511:20180723125903p:plain" title="f:id:tsub511:20180723125903p:plain" class="hatena-fotolife" itemprop="image"></span>
<em>ちなみに社内で Kubernetes について勉強していくぞ！！的なチャンネルが最近できました。</em></p>

<h2>実際の準備</h2>

<p>やると決まってからは当日まで 1 ヶ月半ぐらいあったのですが、そこからは Twitter でグループ DM しながら準備を進めていきました。</p>

<p>とはいえ、お互い顔も分からず会ったことのない中で Twitter の DM オンリーで準備を進めていったので少々不安を感じながらも、<a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんやサポート役の <a href="https://twitter.com/katsuhisa__">@katsuhisa__</a> さんから優しくして頂けたので問題なく進められました。</p>

<p>準備に際しては以下のリポジトリのコミット権を貰い、そこにサンプルを自分が足していきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flocalhost9292%2Fkubernetes.rb" title="localhost9292/kubernetes.rb" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/localhost9292/kubernetes.rb">github.com</a></cite></p>

<p>また、Rails のサンプルアプリについては以下のリポジトリも用意してもらいました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fyhirano55%2Freact-redux-jwt-authentication-example" title="yhirano55/react-redux-jwt-authentication-example" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/yhirano55/react-redux-jwt-authentication-example">github.com</a></cite></p>

<p>あとは当日までひたすら YAML を書く... 😇 という感じになります。</p>

<p>最初に作った Rails 用の YAML には結構時間がかかったものの、残りのアプリはほとんどコピペでサクサク進んでいきました。</p>

<p>ただ、Sentry などは自分で動かしたことがなかったので、Kubernetes で動かすというよりはアプリそのもののセットアップ手順や構成などを理解するのに時間がかかったように思います。</p>

<p>また、Discourse と GitLab については Docker イメージの使い方が独特で、<a href="https://github.com/discourse/discourse_docker">Discourse</a> の方は独自のシェルスクリプトを使っていて読み解くのがが大変そうで、<a href="https://hub.docker.com/r/gitlab/gitlab-ce/">GitLab</a> の方はコンテナを動かしたら Chef が動き始めて色々インストールしだしたので諦めました。</p>

<p>代わりに Mastodon を動かすことになりました。動かし始めたらいけそうだったので、勢いで当日の朝も準備をしてました..</p>

<h2>勉強会当日の様子</h2>

<p>会場は<a href="https://everyleaf.com/">株式会社万葉</a>さんのオフィスをお借りしました (自分がその辺りを手配したわけではないです)。</p>

<p>とても快適でした。万葉さんありがとうございました 🤗</p>

<p>特に、Chrome Cast に繋がったプロジェクターが設置してあり、各自何か言いたいことがある時にサクッと画面共有できて良かったかと思います。</p>

<p>全体としては 12:30 ぐらいからゆるっと始まり、17:30 ぐらいに解散しました。</p>

<p>最初に <a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんから流れの説明があり、各自簡単に自己紹介をした後はそれぞれ<a href="https://github.com/localhost9292/kubernetes.rb">資料</a>を見ながらもくもくやっていました。</p>

<p>ただ、最初に Minikube で躓く人が多かったようです。</p>

<p>以下の Issue を参考に、最終的に <code>$ minikube start --vm-driver=hyperkit --bootstrapper=localkube</code> で動いたようです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fkubernetes%2Fminikube%2Fissues%2F2765" title="minikube start hangs forever on mac · Issue #2765 · kubernetes/minikube" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/kubernetes/minikube/issues/2765">github.com</a></cite></p>

<p>ちなみに自分は <code>$ minikube start --vm-driver=hyperkit</code> だけで動きました。</p>

<p>Minikube が動かないので GKE で進める方も多かったようです (サンプルは Minikube と GKE 両方の手順を用意していました)。</p>

<p>後は、イメージの Pull や DB のマイグレーションジョブの実行など、待ち時間が多かったためか、それなりにわいわい話しながら皆で進めてました。</p>

<p>自分は講師役という立ち位置でしたが、感覚的にはどちらかというと大学の講義で手伝いをしていた感じです。</p>

<p>質問があったら近くに行って答えるのを繰り返しつつ、何もない時は Mastodon の GKE 版のサンプル資料を作っていました。</p>

<p>最終的には Mastodon まで動かせた方も多く、サンプルを用意した自分としては非常に嬉しかったです ✨</p>

<p>また、最後に KPT 方式の振り返りをやったのですが、Trello を使ったやり方が個人的にはすごく良かったです。</p>

<p>会社でもやってみたいなと思いました。</p>

<p>振り返りの様子。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180723/20180723125937.png" alt="f:id:tsub511:20180723125937p:plain" title="f:id:tsub511:20180723125937p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>なお、どうやら弊社で月一でやっているもくもく会がたまたま同日開催で場所も<a href="https://basispoint.tokyo/coworking/jimbocho/">神保町</a>と、会場のすぐ側でやっていたようです。</p>

<p><a href="http://blog.hatena.ne.jp/masutaka26/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:masutaka26</a> がひっそりとリモートで参加していました 😎</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">02_nginx でこんなエラーが出た <a href="https://twitter.com/hashtag/localhost9292?src=hash&amp;ref_src=twsrc%5Etfw">#localhost9292</a><br><br>$ kubectl apply -f k8s/deployment.yaml<br>Error from server (BadRequest): error when creating &quot;k8s/deployment.yaml&quot;: Deployment in version &quot;v1&quot; cannot be handled as a Deployment: no kind &quot;Deployment&quot; is registered for version &quot;apps/v1&quot;</p>&mdash; Takashi Masuda (@masutaka) <a href="https://twitter.com/masutaka/status/1020547692378783744?ref_src=twsrc%5Etfw">2018年7月21日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">minikube のアップデートで直った！</p>&mdash; Takashi Masuda (@masutaka) <a href="https://twitter.com/masutaka/status/1020553958337605634?ref_src=twsrc%5Etfw">2018年7月21日</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>資料の補足</h2>

<p>KPT の P にも上がっていましたが、途中実行待ちが長いときに「これは上手くいっていて単純に時間のかかる処理なのか、そもそも上手く動いていないのか」というお声を頂きました。</p>

<p>それについてはログを見る方法についても明示しておけば良かったと思っています。</p>

<p>Kubernetes でログを見るには <code>$ kubectl logs</code> コマンドを使います。</p>

<pre class="code" data-lang="" data-unlink>$ kubectl logs -f &lt;Pod Name&gt;</pre>


<p>(<code>tail</code> と同じように <code>-f</code> でストリーミングができます)</p>

<p>Job の実行時などにはログを見ながら今何が動いているのかを見るとより分かりやすかったと思います。</p>

<p>また、今回は Pod, Deployment, Service などの概念についての説明をせずにとりあえず手を動かしてみるという会でしたが、その辺りについては Kubernetes.rb #2 が開催されるようなので、興味のある方はぜひご参加ください！ (自分は次回は参加しないですが 🙇)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flocalhost.connpass.com%2Fevent%2F95578%2F" title="Kubernetes.rb #2 (2018/09/01 11:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://localhost.connpass.com/event/95578/">localhost.connpass.com</a></cite></p>

<h2>やってみた感想など</h2>

<p>今回初めて勉強会の主催側として参加したわけですが、感想としてはやって良かった！！と思っています。</p>

<p>そもそも Kubernetes についてはまだ仕事で使っているわけでもなく導入の検討段階ですし、個人で趣味レベルで動かした程度だったので今回の資料作成の中でかなり理解が深まったと思っています。</p>

<p>また、メンタル的にも成長できた気がします。</p>

<p>会ったことのない社外の人たちがいる場に飛び込むのは個人的にはなかなかハードルが高く、今まで勉強会に参加する際は懇親会にはあまり出ないタイプだったのですが、今回の体験で「あ、なんだ。こんな感じなのか」みたいな感覚を得られたので今後は懇親会などに参加して社外の人とも交流する勇気が少し出ました。</p>

<p>それでは最後に改めて、<a href="https://twitter.com/yoshi_hirano">@yoshi_hirano</a> さんや <a href="https://twitter.com/katsuhisa__">@katsuhisa__</a> さん、会場を提供してくださった万葉さん、参加してくださった皆様、ありがとうございました  👋</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[タイププロジェクト株式会社を退職しました]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2018/07/11/002504</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2018/07/11/002504"/>
        <updated>2018-07-10T15:25:04.000Z</updated>
        <summary type="html"><![CDATA[<p>2018年7月10日付けで<a href="http://typeproject.com/">タイププロジェクト株式会社</a>を退職しました。</p>

<p>大学在学中の2012年8月からタイププロジェクトの仕事をするようになり、その後タイプエンジニア（フォントエンジニア）として<a href="https://shiromoji.hatenablog.jp/entry/20150419/1429456773">2015年4月に入社しました</a>。あわせると、6年近くにわたってお世話になったことになります。</p>

<p>タイププロジェクトがコンパクトなチームだったこともあり、製品版フォントのプロダクション、フォーマット変換やカスタマイズ、内製ツールの開発、制作ワークフローの自動化・省力化、イントラの管理などなど、とにかくいろいろなことに携わることができました。仕事を始めた当初はほとんど何もわかっていなかったのですが<a href="#f-dedeb0f6" name="fn-dedeb0f6" title="Python を身に着けたのも実はこのときです。">*1</a>、おかげさまで随分いろいろなことができるようになり、自信もつきました。フォントへの興味がますます深まったのは、言うまでもありません。</p>

<p>タイププロジェクトに参加するまであまり想像していなかったのですが、実際の仕事では、タイプデザイナーなど他のメンバーとのコミュニケーションが頻繁に発生します。「こういう機能がほしい」「こんな感じならできるけど」とやりとりしながら開発を進めていく過程は、なかなか楽しいものでした。まわりの方が協力的で、この点において恵まれた環境だったと感じます。</p>

<p>ちなみに、明日からは別の会社にフロントエンドエンジニアとして入社します。文字関係の仕事ではありません。エンジニアとしてあらためて基礎固めを行い、実践的なチーム開発のスキルを身につけることができれば、と考えています。</p>

<p>仕事としては文字から離れることになりますが、あいかわらず興味は尽きませんので、これからもこのまま趣味として続けていきたいと思います。今後ともどうぞよろしくお願いいたします。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-dedeb0f6" name="f-dedeb0f6" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> を身に着けたのも実はこのときです。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 分でわかる Ruby Guild]]></title>
        <id>https://developer.feedforce.jp/entry/2018/06/25/100000</id>
        <link href="https://developer.feedforce.jp/entry/2018/06/25/100000"/>
        <updated>2018-06-25T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>RubyKaigi 2018 から早 3 週間。この記事を読んでいる方でも参加された方が沢山いるのではないかと思います。
個人的な感想ですが、今年は例年以上に充実していたんじゃないかな、と大満足です✨</p>

<p>感想記事はこちらの記事に詳しくまとめられています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F06%2F22%2F141314" title="RubyKaigi 2018 に行ってきたので今更所感などをまとめました - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.feedforce.jp/entry/2018/06/22/141314">developer.feedforce.jp</a></cite></p>

<p>さて、今回の RubyKaigi の発表では笹田さんから Guild の進捗についての発表がありました。</p>

<p><a href="http://www.atdot.net/~ko1/activities/2018_rubykaigi2018.pdf"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621190557.png" alt="Guild Prototype" /></a></p>

<p>この Guild の概要について社内のメンバーに解説したところ中々に好評だったので、今回の記事では Guild とはどういうものなのかを超ざっくりですがご紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#そもそも論なぜ-Guild-が必要なのか">そもそも論。なぜ Guild が必要なのか？</a></li>
    <li><a href="#Guild-と-Thread-の関係">Guild と Thread の関係</a></li>
    <li><a href="#Guild-間のデータの受け渡し">Guild 間のデータの受け渡し</a></li>
    <li><a href="#おわりに">おわりに</a></li>
</ul>

<h1 id="そもそも論なぜ-Guild-が必要なのか">そもそも論。なぜ Guild が必要なのか？</h1>

<p>ご存知の方も多いかと思いますが、現在の Ruby のスレッド処理はマルチコアに対応していません。
最近の PC の殆どにはマルチコア CPU が搭載されていると思いますが、１つの Ruby プロセスが利用できるコアは１つだけです。つまり、並列処理と言っても複数の処理を時間分割して実行しているだけという事になります。 Guild は Ruby でマルチコアを使った並列処理を実現するために必要な機能となります。</p>

<p>ちなみに Guild という名称はあくまでコードネームであるため、リリース時には別の名称になると思われます。</p>

<h1 id="Guild-と-Thread-の関係">Guild と Thread の関係</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621191002.png" alt="f:id:ryz310:20180621191002p:plain" title="f:id:ryz310:20180621191002p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>上図のように Guild に Thread が内包される関係になり、プロセス全体でいうと <code>RubyVM → Guild → Thread → Fiber</code> という関係になります。
これを踏まえて、 Guild 導入の前後を図に起こすと以下のようになります（雑な図で恐縮です。。🙇）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180621/20180621183710.jpg" alt="f:id:ryz310:20180621183710j:plain" title="f:id:ryz310:20180621183710j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>同一 Guild 内の Thread は従来どおりシングルコアで動作します。しかし、 Guild を複数定義することで、それぞれの Guild に所属する Thread は並列に動作するようになります。
Guild が実装されていない現在の Ruby は <code>RubyVM → Thread → Fiber</code> という関係になりますが、言い換えればこれは単一の Guild で作られた Ruby プログラムとみなせると思います。
このことから、Guild が実装されても後方互換性は保たれるのではないか予想されます。</p>

<h1 id="Guild-間のデータの受け渡し">Guild 間のデータの受け渡し</h1>

<p>Guild 間でのデータ受け渡しについて、 Shareable Object と Non-Shareable Object という概念が出てきます。
詳細は <a href="http://www.atdot.net/~ko1/activities/2018_rubykaigi2018.pdf">発表スライド</a> を見てもらうとして、大雑把に両者の違いを説明すると以下のようになります。</p>

<ul>
<li>Shareable Object

<ul>
<li>Guild 間でデータ共有が可能なオブジェクト</li>
<li>基本的に値が変化しない Immutable なデータがこれに該当する

<ul>
<li>Const や Freeze したデータのこと</li>
<li>ただし Array や Hash は Freeze しても内側のデータまで Freeze されないので、 Shareable とはならないので注意

<ul>
<li>これについては Deep Freeze を実装するかも、とのこと。</li>
</ul>
</li>
</ul>
</li>
<li>他にも Isolated Proc という、ブロックの外側の変数へのアクセスを禁止した Proc もこれに該当しますが、詳細は割愛</li>
</ul>
</li>
<li>Non-Shareable Object

<ul>
<li>Guild 間でデータ共有が禁止されているオブジェクト

<ul>
<li>データの受け渡しができない訳ではない（詳しくは後述）</li>
</ul>
</li>
<li>主に一般的な変数のこと</li>
<li>単一の Guild にのみ所属する</li>
</ul>
</li>
</ul>


<p>Shareable Object は Immutable (値が変化しない)オブジェクトなので、並列処理中にデータを共有しても問題ないことはイメージしやすいかと思います。
重要なのは Non-Shareable Object の受け渡しで、以下に示す 2 つの方法があります。</p>

<ul>
<li>COPY

<ul>
<li>データを Guild 間で共有するのではなく、別の Guild にコピーして渡す</li>
</ul>
</li>
<li>MOVE

<ul>
<li>別の Guild にデータを渡すと、元の Guild からは見えなくなる</li>
</ul>
</li>
</ul>


<p>COPY は参照渡しではなく実体渡しなので、１つのデータに対して同時アクセスすることにはならず、 Thread-Safe なやりとりになります。
一方の MOVE は、データを別の Guild に渡すと元の Guild からはアクセスできなくなる、カットアンドペーストのような振る舞いになります。
こちらも同時アクセスが発生しないため、 Thread-Safe なやりとりになります。</p>

<p>ちなみに MOVE より COPY が利用されるケースが多いだろうとのことでした。</p>

<h1 id="おわりに">おわりに</h1>

<p>RubyKaigi 2018 で発表された Guild について超ざっくりと説明してみました。間違ってるところがあればご指摘頂けますと幸いです🙏
なお、開発中の仕様なので実装までにいくつかの変更があるかもしれません。</p>

<p>想像ですが、 Sidekiq とか Puma のような Thread ベースのサービスは Guild が導入されたら劇的にパフォーンスが良くなるかもしれませんね。
これからの Ruby の可能性に期待が高まります✨</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python パッケージとして再構成された AFDKO 2.7 がリリース]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2018/05/16/235048</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2018/05/16/235048"/>
        <updated>2018-05-16T14:50:48.000Z</updated>
        <summary type="html"><![CDATA[<p>AFDKO の新バージョン 2.7.0 が先週リリースされました。AFDKO は、フォント開発のための <a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> 製<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a>ツール集です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fadobe-type-tools%2Fafdko" title="adobe-type-tools/afdko" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/adobe-type-tools/afdko">github.com</a></cite></p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージ化</h3>

<p>今回の大きな変更点は、AFDKO の中身がひとつの <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージへと、がらっと再構成された点です。</p>

<blockquote><p>The AFDKO has been restructured so that it can be installed as a <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> package. It now depends on the user's <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/interpreter">interpreter</a>, and no longer contains its own <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/interpreter">interpreter</a>.</p></blockquote>

<p><a href="https://github.com/adobe-type-tools/afdko/tree/2.7.0#major-changes">https://github.com/adobe-type-tools/afdko/tree/2.7.0#major-changes</a></p>

<p>すでに <a class="keyword" href="http://d.hatena.ne.jp/keyword/PyPI">PyPI</a> へ <a href="https://pypi.org/project/afdko/">afdko パッケージ</a>がアップロードされていますので、普段の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージと同じく、以下のコマンドでインストールすることができます。</p>

<pre class="code" data-lang="" data-unlink>$ pip install afdko</pre>


<p>従来（2.5 まで）の AFDKO は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>やバイナリ等が <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>とともに ZIP で固められて配布されており、AFDKO 中の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>は、必ずこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>を使って実行されるようになっていました。また、これを実現するためにインストール方法やパスの管理が独自のものになっており、少々扱いづらい面がありました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージへの再構成作業は2017年末ごろからスタートし、ベータ期間（2.6 がこれに相当）を経て、今回の 2.7.0 をもってめでたく正式リリースとなったようです。この <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージ化によって、以下のようなメリットが享受できそうです。</p>

<ul>
<li>インストール／アンインストール／更新が、おなじみの pip で行えるようになる</li>
<li>バージョンの固定や切り替えが容易になる</li>
<li>他の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージと組み合わせて使いやすくなる</li>
<li>パッケージのビルド方法やテスト方法が整備・明文化される</li>
</ul>


<h3>AFDKO 開発の盛り上がり</h3>

<p>AFDKO の開発は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> のエンジニアが中心となって進められていますが、昨年まではあまり活発には見えませんでした。バリアブルフォントへの対応などは進められていたようですが、発展著しい <a href="https://github.com/fonttools/fonttools">fontTools</a> などと比べてしまうと、地味な印象がありました。また、AFDKO には</p>

<ul>
<li>コードの可読性が低い</li>
<li>テストがほどんどない</li>
<li>古い C のコードが多い</li>
<li>バグ報告やプルリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トがなかなか対応されない</li>
<li>バグがあっても自分では直しにくい</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> 2</li>
</ul>


<p>などのつらい面も多々あり、個人的にはここ数年、fontTools の方を利用する機会が圧倒的に多くなっていました。</p>

<p>しかしながら、昨秋ごろから開発が加速し、現在に至るまで活発な状態が続いています。</p>

<p><a href="https://github.com/adobe-type-tools/afdko/graphs/contributors"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20180516/20180516224554.png" class="hatena-fotolife" itemprop="image"></a></p>

<p>内容としては、コードの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0">リファクタリング</a>やテスト・CIの整備といった基礎的な部分の改善が大きくなっており、前述の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> パッケージ化も、その流れの中で実施されたように見えます。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> 3 をサポートするための作業も始まり、明るい未来が見えてきた感じがします。</p>

<p>期待を込めつつ、これからも引き続き AFDKO の動きに注目していこうと思います。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Datadog で dd-agent に root 権限を与えずにプロセスがオープンしているファイルディスクリプタ数のメトリクスを取得する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/05/11/190000</id>
        <link href="https://developer.feedforce.jp/entry/2018/05/11/190000"/>
        <updated>2018-05-11T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。
ここ数日気温の寒暖差が凄いですね。昨日あまりにも寒すぎて一度しまった冬用の布団を引っ張りだしたら、また気温が上がってきたので片付けることになりそうです。</p>

<p>最近、Datadog でプロセスがオープンしているファイルディスクリプタ数のメトリクスを取る必要があり、色々と考えた結果良い方法を思いついたため、今回ご紹介します。</p>

<h2>Datadog 標準の <code>system.processes.open_file_descriptors</code> メトリクスを取るには root 権限が必要</h2>

<p>Datadog では標準で、Process Check という機能を使うことで <code>system.processes.open_file_descriptors</code> メトリクスを取ることができます。</p>

<blockquote><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180511/20180511150551.png" alt="f:id:tsub511:20180511150551p:plain" title="f:id:tsub511:20180511150551p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><a href="https://docs.datadoghq.com/integrations/process/#metrics">https://docs.datadoghq.com/integrations/process/#metrics</a></p></blockquote>

<p>ただし、説明文にも書いてある通り <code>dd-agent</code> ユーザーが実行したプロセスしかこのメトリクスを取得することが出来ません。</p>

<p>そのため、例えば Rails アプリケーションを動かすために <code>puma</code> プロセスを <code>dev</code> ユーザーで動かしていた場合、以下のような設定を書いても <code>system.processes.open_file_descriptors</code> メトリクスを取得することが出来ません。</p>

<pre class="code" data-lang="" data-unlink>init_config:

instances:
  - name: puma_worker
    search_string: [&#34;puma: cluster worker&#34;]
    exact_match: False</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180511/20180511151024.png" alt="f:id:tsub511:20180511151024p:plain" title="f:id:tsub511:20180511151024p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>これは何故かというと、プロセスがオープンしているファイルディスクリプタ数を取得するためには <code>/proc/&lt;PID&gt;/fd</code> 以下にアクセスする必要があるためです。</p>

<p><code>/proc/&lt;PID&gt;/fd</code> ディレクトリはそのプロセスを実行したユーザーにしか read 権限がありません。</p>

<pre class="code" data-lang="" data-unlink>$ ls -al /proc/1/fd
ls: cannot open directory /proc/1/fd: Permission denied

$ sudo ls -al /proc/1 | grep fd
dr-x------.   2 root root 0 Apr 18 06:58 fd
dr-x------.   2 root root 0 May 11 06:12 fdinfo</pre>


<p>そのため、<code>dd-agent</code> はそのメトリクスを取得できないというわけです。</p>

<p>ただし、<code>dd-agent</code> に root 権限を与えることで、閲覧は可能になります。
公式ドキュメントではそのやり方が提示されていますが、セキュリティ的にリスクがあるため、推奨はされていません。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.datadoghq.com%2Fagent%2Ffaq%2Fwhy-don-t-i-see-the-system-processes-open-file-descriptors-metric" title="Why don&#39;t I see the &#39;system.processes.open_file_descriptors&#39; metric?" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.datadoghq.com/agent/faq/why-don-t-i-see-the-system-processes-open-file-descriptors-metric">docs.datadoghq.com</a></cite></p>

<p>さて、この記事の内容は <code>dd-agent</code> に root 権限を与えずに <code>system.processes.open_file_descriptors</code> メトリクスを取得するということでしたが、どうやれば良いのでしょう？</p>

<h2>DogStatsD を使う</h2>

<p>Datadog には DogStatsD という仕組みがあります。</p>

<p>DogStatsD は任意のカスタムメトリクスを Datadog に送る方法の一つです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.datadoghq.com%2Fdevelopers%2Fdogstatsd%2F" title="DogStatsD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.datadoghq.com/developers/dogstatsd/">docs.datadoghq.com</a></cite></p>

<p>通常は以下のような言語毎のライブラリを公式が提供してくれているため、こちらを使うことで任意のカスタムメトリクスを送ることができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FDataDog%2Fdatadog-go" title="DataDog/datadog-go" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/DataDog/datadog-go">github.com</a></cite></p>

<p>DogStatsD を通してメトリクスを送る際は、その送り側のプロセスは任意のユーザーで実行できます。</p>

<p>そのため、上記の例にあったように <code>dev</code> ユーザーが <code>puma</code> プロセスを実行している場合は <code>dev</code> ユーザーで DogStatsD にメトリクスを送るプロセスを実行すれば、
同じ <code>dev</code> ユーザーのため <code>/proc/&lt;PID&gt;/fd</code> への read 権限があります。</p>

<p>思いついてみれば簡単なことでしたね。</p>

<h2>でもプログラミング言語で実装するのは面倒じゃない？</h2>

<p>少し本題とは反れますが、もう少しお手軽に DogStatsD にカスタムメトリクスを送りたいな、とも思います。</p>

<p>そこで、調べてみたところ「DogStatsD には単純に専用のフォーマットで UDP パケットを送るだけで良い」ということを知りました。</p>

<blockquote><p>On Linux:</p>

<p><code>
vagrant@vagrant-ubuntu-14-04:~$ echo -n "custom_metric:60|g|#shell" &gt;/dev/udp/localhost/8125
</code></p>

<p>or</p>

<p><code>
vagrant@vagrant-ubuntu-14-04:~$ echo -n "custom_metric:60|g|#shell" | nc -4u -w0 127.0.0.1 8125
</code></p>

<p><a href="https://docs.datadoghq.com/developers/dogstatsd/#sending-metrics">https://docs.datadoghq.com/developers/dogstatsd/#sending-metrics</a></p></blockquote>

<p>上記のように、DogStatsD のエンドポイントである <code>localhost:8125</code> に <code>custom_metric:60|g|#shell</code> のようなフォーマットで UDP パケットを送ってやれば良いです。</p>

<p>そのため、プロセスがオープンしているファイルディスクリプタ数のカスタムメトリクスを送るには、以下のコマンドを実行すれば良いです。</p>

<pre class="code" data-lang="" data-unlink>$ echo -n &#34;open_file_descriptors.puma_worker:$(ls /proc/$(pgrep -f -u dev &#39;puma: cluster worker&#39; | head -1)/fd/ | wc -l):g&#34; | nc -u -4 localhost 8125</pre>


<p>上記のコマンドを <code>crontab</code> などで毎分実行してやれば <code>open_file_descriptors.puma_worker</code> メトリクスを送ることができます。</p>

<p>ただし、実際に本番で利用しているコマンドはそこまで単純ではなく、以下のようなシェルスクリプトを書いて実行しています。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/sh</span>

<span class="synStatement">if [</span> <span class="synPreProc">$#</span> <span class="synStatement">-ne</span> <span class="synConstant">2</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Require 2 arguments</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synIdentifier">PROCESS_NAME</span>=<span class="synPreProc">$1</span>
<span class="synIdentifier">USER</span>=<span class="synPreProc">$2</span>

<span class="synComment"># pgrep でシェルスクリプト自身のプロセスがマッチしてしまうため `grep -v` で除外する</span>
<span class="synComment"># CentOS 6 では pgrep に -a オプションがないため注意</span>
<span class="synComment">#</span>
<span class="synComment"># 複数のプロセスが見つかっても無視する</span>
<span class="synIdentifier">PROCESS</span>=<span class="synPreProc">$(</span><span class="synSpecial">pgrep -f -a -u </span><span class="synStatement">&quot;</span><span class="synPreProc">${USER}</span><span class="synStatement">&quot;</span><span class="synSpecial"> </span><span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS_NAME}</span><span class="synStatement">&quot;</span><span class="synSpecial"> | </span><span class="synStatement">grep</span><span class="synSpecial"> -v </span><span class="synStatement">&quot;</span><span class="synPreProc">$0</span><span class="synStatement">&quot;</span><span class="synSpecial"> | head </span><span class="synConstant">-1</span><span class="synSpecial"> | cut -f </span><span class="synConstant">1</span><span class="synSpecial"> -d </span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synPreProc">)</span>

<span class="synStatement">if [</span> <span class="synStatement">-z</span> <span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS}</span><span class="synStatement">&quot;</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS_NAME}</span><span class="synConstant"> does not exists</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synStatement">ls</span> /proc/<span class="synStatement">&quot;</span><span class="synPreProc">${PROCESS}</span><span class="synStatement">&quot;</span>/fd/ | wc <span class="synSpecial">-l</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>

<span class="synStatement">if [</span> <span class="synPreProc">$#</span> <span class="synStatement">-ne</span> <span class="synConstant">3</span> <span class="synStatement">]</span>; <span class="synStatement">then</span>
  <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Require 3 arguments</span><span class="synStatement">&quot;</span><span class="synConstant"> 1</span><span class="synStatement">&gt;</span>&amp;<span class="synConstant">2</span>
  <span class="synStatement">exit</span> <span class="synConstant">1</span>
<span class="synStatement">fi</span>

<span class="synIdentifier">METRIC_NAME</span>=<span class="synPreProc">$1</span>
<span class="synIdentifier">VARUE</span>=<span class="synPreProc">$2</span>
<span class="synIdentifier">METRIC_TYPE</span>=<span class="synPreProc">$3</span>

<span class="synStatement">echo</span><span class="synConstant"> -n </span><span class="synStatement">&quot;</span><span class="synPreProc">${METRIC_NAME}</span><span class="synConstant">:</span><span class="synPreProc">${VARUE}</span><span class="synConstant">|</span><span class="synPreProc">${METRIC_TYPE}</span><span class="synStatement">&quot;</span><span class="synConstant"> </span>| nc <span class="synSpecial">-u</span> <span class="synConstant">-4</span> localhost <span class="synConstant">8125</span>
</pre>




<pre class="code" data-lang="" data-unlink>$ crontab -l
* * * * * /path/to/send-to-dogstatsd.sh open_file_descriptors.puma_cluster_worker $(/path/to/get-open-fd.sh &#34;puma: cluster worker&#34; dev) g &gt; /dev/null</pre>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAWS DAYS 2018 に行ってきた]]></title>
        <id>https://blog.tsub.me/post/jaws-days-2018/</id>
        <link href="https://blog.tsub.me/post/jaws-days-2018/"/>
        <updated>2018-03-17T06:16:55.000Z</updated>
        <summary type="html"><![CDATA[<p>社内勉強会の準備などで忙しく、レポートを書くのが遅れてしまいましたが、先週の 03/10 (土) に <a href="https://jawsdays2018.jaws-ug.jp/">JAWS DAYS 2018</a> へ行ってきました。</p>

<p><img src="https://gyazo.com/5dafdbb66c5c6fd5a78aafeb83bd49c8.png" alt="image" /></p>

<p>今回が初参加でしたが、AWS ユーザーグループのお祭りという感じですごく盛り上がっていて楽しいイベントでした。</p>

<p>会社の同僚も 4 人ぐらい参加してました。</p>

<p>自分が参加したセッションと聞いた感想やメモをつらつら書いていきます。</p>

<p>(ただし Keynote は省きます)</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[m3.medium のインスタンスの CPU 負荷が高かったため t2.medium へ移行した]]></title>
        <id>https://developer.feedforce.jp/entry/2018/03/02/155020</id>
        <link href="https://developer.feedforce.jp/entry/2018/03/02/155020"/>
        <updated>2018-03-02T06:50:20.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、エンジニアの <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> です。
最近頭痛がするのでヨガを始めましたが、効果が出ているのかよく分かりません。</p>

<p>今回は m3.medium のインスタンスの CPU 負荷が高かったため t2.medium へ移行したら解決した話をします。</p>

<h2>m3.medium のインスタンスの CPU 負荷が高かった</h2>

<p>年始あたりから、週に数回ほど決まった時間に Mackerel でアラートが出ていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302143106.png" alt="f:id:tsub511:20180302143106p:plain" title="f:id:tsub511:20180302143106p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>CPU の Steal 値が異常に高く、全体としての使用率が 90 % を超えていました。</p>

<p>ずっと原因が分からず、最初は Meltdown と Spectre のパッチを適用した関係で性能が低下したんじゃないか、などを疑っていました。</p>

<p>しかし、ある時全く別の作業をしていたときに別のロールのインスタンスで同様に CPU 負荷が上がり、どちらも <code>m3.medium</code> というインスタンスタイプが共通していたことからなんとなくググってみたところ、以下の記事に辿り着きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftoritori0318.hatenadiary.jp%2Fentry%2F20140312%2F1394634304" title="microインスタンスはlimitかけると大きくパフォーマンスが向上する（※再追記あり） - アルパカDiary Pro" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://toritori0318.hatenadiary.jp/entry/20140312/1394634304">toritori0318.hatenadiary.jp</a></cite></p>

<p>どうやら、<code>m3.medium</code> というインスタンスタイプのみ CPU の Steal が発生しやすいようです。</p>

<p>他にも同様の報告をしている記事をいくつか見つけました。</p>

<ul>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=146585">https://forums.aws.amazon.com/thread.jspa?threadID=146585</a></li>
<li><a href="http://techblog.bonobos.com/ec2/sysadmin/devops/2014/10/02/the-m3.medium-is-terrible.html">High CPU steal on EC2 m3.medium &ndash; Bonobos Tech Blog</a></li>
</ul>


<p>情報が 2014 年と古いですが、現に同様の事象が発生しているため、当時と変わっていない可能性が高いです。</p>

<p>そのため、インスタンスタイプを変更することを検討しました。</p>

<h2>他のインスタンスタイプを検討</h2>

<p><code>m3.medium</code> から別のインスタンスタイプに変更するに辺り、どのインスタンスタイプを選択するか、まずはコスト面で比較しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302145249.png" alt="f:id:tsub511:20180302145249p:plain" title="f:id:tsub511:20180302145249p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcalculator.s3.amazonaws.com%2Findex.html" title="Amazon Web Services Simple Monthly Calculator" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://calculator.s3.amazonaws.com/index.html">calculator.s3.amazonaws.com</a></cite></p>

<p>順当に行けば <code>m4</code> ファミリーが妥当なところですが、<code>m4</code> ファミリーは medium サイズは提供していないため、費用がそれなりに増えてしまいます。</p>

<p>この中で、<code>m3.medium</code> よりも安い <code>t2.medium</code> に目を付けました。</p>

<p><code>t2.medium</code> は <code>m3.medium</code> に比べると、 vCPU が 1 コア増え、メモリも 0.25 GB 増える上に料金が安くなるというかなりお得なインスタンスタイプです。</p>

<p><strong><code>m3.medium</code></strong></p>

<blockquote><table>
<thead>
<tr>
<th>インスタンスファミリー </th>
<th> インスタンスタイプ </th>
<th> プロセッサアーキテクチャ </th>
<th> vCPU </th>
<th> メモリ (GiB) </th>
<th> インスタンスストレージ（GB） </th>
<th> EBS 最適化利用 </th>
<th> ネットワークパフォーマンス</th>
</tr>
</thead>
<tbody>
<tr>
<td>汎用 </td>
<td> m3.medium </td>
<td> 64 ビット </td>
<td> 1 </td>
<td> 3.75 </td>
<td> 1 x 4 </td>
<td> - </td>
<td> 中</td>
</tr>
</tbody>
</table>


<p><a href="https://aws.amazon.com/jp/ec2/previous-generation/">https://aws.amazon.com/jp/ec2/previous-generation/</a></p></blockquote>

<p><strong><code>t2.medium</code></strong></p>

<blockquote><table>
<thead>
<tr>
<th>モデル </th>
<th> vCPU </th>
<th> CPU クレジット/時 </th>
<th> メモリ (GiB) </th>
<th> ストレージ</th>
</tr>
</thead>
<tbody>
<tr>
<td>t2.medium </td>
<td> 2 </td>
<td> 24 </td>
<td> 4 </td>
<td> EBS のみ</td>
</tr>
</tbody>
</table>


<p><a href="https://aws.amazon.com/jp/ec2/instance-types/">https://aws.amazon.com/jp/ec2/instance-types/</a></p></blockquote>

<p>ただ、ここで安易に <code>t2.medium</code> を選択してはいけません。
<code>t2</code> ファミリーは「バースト可能パフォーマンスインスタンス」という特別な性質があります。</p>

<h2>T2 インスタンスについて</h2>

<p>T2 インスタンスについて、今までふわっとした理解しかなかったため、この機会に AWS のドキュメントをちゃんと読んでみました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-instances.html" title="T2 インスタンス - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-instances.html">docs.aws.amazon.com</a></cite></p>

<p>結論から言うと、弊社のサービスの性質上、決まった時間に Sidekiq のジョブがまとまって大量に実行されるため、普段は CPU 使用率は低く、ある時間だけ CPU 使用率が高くなるというまさに T2 インスタンスがピッタリなケースでした。</p>

<h4>CPU クレジット</h4>

<p>T2 インスタンスには <a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html">CPU クレジット</a>という概念があります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-credits-baseline-concepts.html" title="CPU クレジットおよびベースラインパフォーマンス - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html">docs.aws.amazon.com</a></cite></p>

<p>1 CPU クレジットは 100 % の CPU 使用率を 1 分間稼働させることができます。</p>

<p><code>t2.medium</code> は CPU クレジットが 1 時間あたり 24 なので、100 % の CPU 使用率を 24 分間、あるいは 50 % の CPU 使用率を 48 分間、40 % の CPU 使用率なら 60 分間稼稼働させることができることになります。(ただし、<code>t2.medium</code> は vCPU が 2 コアなので、実際には 20 % の CPU 使用率で 60 分間の稼働)</p>

<p>実際の CPU 使用率は平均で 20 % 以下に収まっていることが多い (たまにスパイクはする) ので、CPU クレジットが 24 ならまず問題ないです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302150357.png" alt="f:id:tsub511:20180302150357p:plain" title="f:id:tsub511:20180302150357p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>この 40 % (20 %) という値を<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html#baseline_performance">ベースラインパフォーマンス</a>と呼び、これを超えて CPU を使用することを「バースト」と呼びます。</p>

<p>また、ベースラインパフォーマンスよりも CPU 使用率が下回っていた場合、クレジットバランスというものに余分な CPU クレジットが保存されます。
クレジットバランスに保存された CPU クレジットは、CPU 負荷がベースラインパフォーマンスを上回った時に消費されます。</p>

<p>つまり、余分な CPU クレジットは蓄積されて後で使うことができるということになります (ただし <code>t2.medium</code> の最大クレジットバランスは 576)。</p>

<p>注意点としてはインスタンスを停止するとクレジットバランスに貯まった CPU クレジットは破棄されるというところでしょうか。</p>

<h4>T2 Unlimited</h4>

<p>ただ、T2 インスタンスを使う以上、気にしなければいけないのは CPU クレジットがなくなった場合は CPU のバーストができなくなるということです。</p>

<p>CPU のバーストができないということはつまり、ベースラインパフォーマンス (<code>t2.medium</code> の場合は 20 %) 以上の CPU が使えなくなるということになります。</p>

<p>ただし、去年の Re:Invent にて発表された <a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html">T2 Unlimited</a> という機能を有効にすることで CPU クレジットがなくなった場合でも自動的に CPU クレジットを追加され、CPU 使用に制限がかからなくなります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2Ft2-unlimited.html" title="T2 無制限 - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html">docs.aws.amazon.com</a></cite></p>

<p>具体的には、T2 Unlimited を有効にすると、CPU クレジット及びクレジットバランスがなくなった場合、余剰クレジットというものから消費されるようになります。</p>

<p>最初の余剰クレジットは 24 時間で獲得できるクレジットの合計値となります。</p>

<p>例えば <code>t2.medium</code> の場合、1 時間辺りの獲得クレジットは 24 なので 24 時間で 576 のクレジットが余剰クレジットになります。</p>

<p>この 24 時間分の余剰クレジットは前借りのようなもので、消費した分だけ次のクレジット獲得時に余剰クレジットの支払いに使用されます。</p>

<p>24 時間分の余剰クレジットまで全て使い切ってしまった場合でも、その後に消費した余剰クレジット分は追加で課金され、CPU のバーストは継続することが可能です。</p>

<p>つまり、T2 Unlimited を有効にすれば T2 インスタンス特有の CPU クレジットの枯渇による CPU 使用制限の問題が解決されることになります。</p>

<p>ただし、常にバーストし続けて追加でお金が発生し続けるような場合は、T2 インスタンスでなく普通にインスタンスタイプを利用したほうが懸命ですね。</p>

<h4>CPU クレジットの監視</h4>

<p>T2 Standard (非 T2 Unlimited) であっても、T2 Unlimited であっても、普段からどの程度 CPU がバーストしているかは監視しておいたほうが良いです。</p>

<p>そのために、CloudWatch で <code>CPUCreditUsage</code>, <code>CPUCreditBalance</code>, <code>CPUSurplusCreditBalance</code>, <code>CPUSurplusCreditsCharged</code> という 4 つのメトリクスが提供されています。</p>

<p>個人的には T2 Unlimited の場合、基本的には <code>CPUSurplusCreditBalance</code> と <code>CPUSurplusCreditsCharged</code> を監視しておけば良いと思います。</p>

<ul>
<li><code>CPUSurplusCreditBalance</code> は消費された 24 時間分の余剰クレジット数</li>
<li><code>CPUSurplusCreditsCharged</code> は 24 時間分の余剰クレジットを使い切った後で更に消費される余剰クレジット数</li>
</ul>


<p>実際の監視には Datadog を利用しました (現在監視ツールを Datadog へ移行途中なため)。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302153003.png" alt="f:id:tsub511:20180302153003p:plain" title="f:id:tsub511:20180302153003p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>閾値はまだ感覚を掴めていないため、とりあえず厳しめにしてあります。</p>

<h2><code>m3.medium</code> から <code>t2.medium</code> へインスタンスタイプを変更する</h2>

<p>弊社のサービスのインフラでは、Blue Green Deployment が可能な体制が整っているため、インスタンスタイプの変更は非常に簡単です。</p>

<p>新しい環境のインスタンスは <code>t2.medium</code> で作成し、ELB からコネクションが流れるようになったら、古い環境のインスタンスを削除するだけです。</p>

<p>ただ、EC2 の Launch Configuration + Auto Scaling Group を使っていたため、少し工夫が必要でした。</p>

<p>T2 Unlimited の有効化は Launch Configuration ではサポートされていませんでした。</p>

<blockquote><p>Auto Scaling グループで T2 インスタンスを無制限に設定して起動するには起動テンプレートを使用する必要があります。起動設定では、T2 インスタンスを無制限として起動することがサポートされていません。</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html#t2-auto-scaling-grp">https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-unlimited.html#t2-auto-scaling-grp</a></p></blockquote>

<p>Launch Template ならサポートされているものの、今から移行するのも大変ですし、何より Terraform がまだ Launch Template をサポートしていませんでした (2018/03/02 時点)。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fterraform-providers%2Fterraform-provider-aws%2Fissues%2F2505" title="Add support for EC2 Launch Templates · Issue #2505 · terraform-providers/terraform-provider-aws" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/terraform-providers/terraform-provider-aws/issues/2505">github.com</a></cite></p>

<p>どうしようと困っていたところ、以下の記事に助けられました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdev.classmethod.jp%2Fcloud%2Faws%2Fautoscale-t2-unlimited%2F" title="T2 Unlimited(T2無制限)オプションをオートスケール環境で利用してみた | Developers.IO" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://dev.classmethod.jp/cloud/aws/autoscale-t2-unlimited/">dev.classmethod.jp</a></cite></p>

<p>EC2 User Data を使って、インスタンス起動時に自身に対して T2 Unlimited を有効化する、という方法です。</p>

<p>自分では全く思いつきませんでしたが、User Data も Terraform を使って管理できるのでかなりシンプルに実現できました。</p>

<p>実際には以下の User Data を利用しました (CentOS を使っているため <code>$ yum install aws-cli</code> ができない)。</p>

<pre class="code" data-lang="" data-unlink>#!/bin/bash

set -x

# Install aws-cli

curl -L https://bootstrap.pypa.io/get-pip.py | python
pip install awscli --upgrade

# Enable T2 Unlimited

INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e &#39;s/.$//&#39;)

aws --region &#34;${REGION}&#34; ec2 describe-instance-credit-specifications --instance-id &#34;${INSTANCE_ID}&#34;
aws --region &#34;${REGION}&#34; ec2 modify-instance-credit-specification --instance-credit-specification InstanceId=&#34;${INSTANCE_ID}&#34;,CpuCredits=unlimited
aws --region &#34;${REGION}&#34; ec2 describe-instance-credit-specifications --instance-id &#34;${INSTANCE_ID}&#34;</pre>


<p>これで、Auto Scaling Group によって起動したインスタンスに対して自動的に T2 Unlimited が有効になりました。</p>

<h2>インスタンスタイプを <code>t2.medium</code> に変更した結果</h2>

<p>実際に <code>t2.medium</code> のインスタンスを稼働させた結果、同程度の負荷がかかった際の CPU の Steal 値はほぼ 0 になりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302152028.png" alt="f:id:tsub511:20180302152028p:plain" title="f:id:tsub511:20180302152028p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ちなみに <code>t2.medium</code> は vCPU が 2 つあるため、グラフの最大値は 200 % になっています。</p>

<p>user 値が 90 % 程度なので、実質 CPU 使用率は 45 % 程度で、<code>m3.medium</code> の頃とほとんど性能は変わっていません。</p>

<p>また、その他にも 5 分間のロードアベレージも全体的に下がっていました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsub511/20180302/20180302153619.png" alt="f:id:tsub511:20180302153619p:plain" title="f:id:tsub511:20180302153619p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h2>まとめ</h2>

<ul>
<li><code>m3.medium</code> のインスタンスを使っていて CPU 負荷に悩まされている場合はインスタンスタイプを変更すると解決するかも</li>
<li>T2 インスタンスは適材適所で使えば費用を安く抑えられて非常に良い</li>
<li>T2 Unlimited によって CPU クレジットがなくなる問題が解決されて安心して T2 インスタンスを使用できるようになった</li>
<li>T2 Unlimited を Launch Configuration で有効化したい場合は User Data を使うと良い</li>
</ul>


<p><code>m3.medium</code> が原因だったようで、解決して良かったです。日々のアラートに悩まされなくて良くなりました。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[続・Rails 5.2 開発環境を Docker で構築する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/25/234556</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/25/234556"/>
        <updated>2018-02-25T14:45:56.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>前回の記事では Docker を使って Rails 5.2 の環境構築をしました。
現在も引き続き Docker についてのお話をします。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F02%2F11%2F140012" title="Rails 5.2 開発環境を Docker で構築する - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2018/02/11/140012">developer.feedforce.jp</a></cite></p>

<p>その後も幾つか手を加え続けておりまして、現在この記事を書いている時点で <code>v1.3.0</code> になりました 🎉
明らかに初回のナンバリングを間違えていた感がありますが、少しずつインクリメントさせていく楽しみを実感できて良いです 笑</p>

<h2>前回からの変更点について</h2>

<p>さて、前回の記事は <code>v1.0.0</code> 時点のものでしたが、ここで <code>v1.3.0</code> になった現在の <code>Dockerfile</code> を見てみましょう。</p>

<pre class="code" data-lang="" data-unlink># Dockerfile
FROM ryz310/rails-on-docker</pre>


<p>なんと！たったの１行ぽっちです！＼＼\٩( 'ω' )و //／／</p>

<p>何言ってんだコイツと思われそうですが、これはどういう事かというと、大部分を <code>base/Dockerfile</code> に移動したためです。</p>

<pre class="code" data-lang="" data-unlink># base/Dockerfile
FROM ruby:2.5
MAINTAINER ryz310@gmail.com

RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs

WORKDIR /myapp
ENV BUNDLE_JOBS=32

ONBUILD ADD Gemfile /myapp/Gemfile
ONBUILD ADD Gemfile.lock /myapp/Gemfile.lock
ONBUILD RUN bundle install
ONBUILD ADD . /myapp</pre>


<p>この <code>base/Dockerfile</code> のイメージは <a href="https://hub.docker.com/r/ryz310/rails-on-docker/">僕のDocker Hub</a> に置いてあります。</p>

<p><code>ONBUILD</code> が付いたコマンドはこのイメージを継承したイメージで実行されるため、先ほどの <code>Dockerfile</code> には <code>FROM</code> しかありませんが、ビルドの際には以下の 4 つのコマンドが実行される事になります。</p>

<pre class="code" data-lang="" data-unlink>ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN bundle install
ADD . /myapp</pre>


<p>感覚としては、 <code>base/Dockerfile</code> で Rails の起動に必要なサーバー環境を構築して、 <code>Dockerfile</code> で Rails そのものを構築していくような感じです。
Rails の構築には RDS イメージなども必須となってきますので、それについては <code>docker-compose.yml</code> と組み合わせて構築していきます。</p>

<pre class="code" data-lang="" data-unlink># docker-compose.yml
version: &#39;3&#39;
services:
  db:
    image: mysql:5.7
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: &#39;yes&#39;
    ports:
      - &#34;3306:3306&#34;
  web:
    build: .
    image: web_image
    command: bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;
    volumes:
      - .:/myapp
      - bundle:/usr/local/bundle
    ports:
      - &#34;3000:3000&#34;
    depends_on:
      - db
    environment:
      DB_HOST: db
  spring:
    image: web_image
    command: bundle exec spring server
    volumes:
      - .:/myapp
      - bundle:/usr/local/bundle
    tty: false
    stdin_open: false
    environment:
      DB_HOST: db
volumes:
  mysql_data:
  bundle:</pre>


<p>ここも <code>v1.0.0</code> の頃からいくつか変更がありまして、例えば <code>web</code> と <code>spring</code> で同じ内容になるように <code>v1.0.0</code> では YAML のエイリアスを使っていたのですが、 docker image で共有する方法に変えました。この定義の記述について少し補足します。</p>

<p><code>web</code> の定義で <code>build: .</code> と <code>image: web_image</code> と言う記述がありますが、これは Dockerfile をビルドして <code>web_image</code> というタグをつける、と言う振る舞いになります。一方、 <code>spring</code> の定義の <code>image: web_image</code> では <code>web_image</code> というタグが付いたイメージを使用する、という振る舞いになります。この辺はなんだかややこしいですね 😓</p>

<p>また、 <code>bundle:/usr/local/bundle</code> を volume に指定する事で、<code>bundle install</code> の内容を永続化するようにしてあります。これにより、<code>$ docker-compose run --rm web bundle install</code> というコマンドが有効になってくるので、Gemfile を更新した際に一から Build する必要がなくなります。
同様に、 MySQL も <code>mysql_data:/var/lib/mysql</code> を volume に指定する事で、テーブルの内容を永続化するようにしています。</p>

<h2>まとめ</h2>

<p><code>ONBUILD</code> を使用する事で、他の Rails アプリでも同じイメージを転用できるようになったのが一番の改善点ではないかと思います。</p>

<p>ただ、Rails アプリ側の事情で何か <code>$ apt-get install</code> を加えたくなった場合にどうするのか、という課題感があります。<code>base/Dockerfile</code> は汎用的な環境構築を意識しているので、あまり一般的でないインストールは行いたくありません。理想としては「子イメージ」で <code>$ apt-get install</code> させて、「孫イメージ」で今回のように Rails の構築をする構成が実現できれば良いのではないかと思いますが、 <code>ONBUILD</code> を「子イメージ」でスキップさせるとか出来るんでしょうか？</p>

<p>次回はこの辺について少し調べていければ、と思っています。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[201802 Twitter ポリシー変更]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/22/210931</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/22/210931"/>
        <updated>2018-02-22T12:09:31.000Z</updated>
        <summary type="html"><![CDATA[<p>ソーシャルPLUS 開発チーム <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。本日こんなニュースが Twitter 上で話題になっていました。</p>

<ul>
<li><a href="http://news.livedoor.com/article/detail/14336587/">ツイッター社、複数アカウントから同じ内容の投稿禁止 - ライブドアニュース</a></li>
</ul>


<p>公式発表は現地時間 2018/2/21 の開発者向けブログの記事のようです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.twitter.com%2Fdeveloper%2Fen_us%2Ftopics%2Ftips%2F2018%2Fautomation-and-the-use-of-multiple-accounts.html" title="Automation and the use of multiple accounts" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.twitter.com/developer/en_us/topics/tips/2018/automation-and-the-use-of-multiple-accounts.html">blog.twitter.com</a></cite></p>

<p>国内ニュースでは一般のユーザアカウント（そのユーザが spammer であるかどうかは区別せず）の発言がただ対象になるかのように見えますが、実際には <strong>Twitter App を介して複数アカウントにツイートや Retweets、Like などの拡散を実行させることを禁止する</strong> ようです。</p>

<p><u>ざっくり読み下してるので、もし読み違えている部分があればご指摘いただけると助かりますm(__)m</u></p>

<blockquote><p><strong>Do not (and do not allow your users to) simultaneously post identical or substantially similar content to multiple accounts.</strong> For example, your service should not permit a user to select several accounts they control from which to publish a given Tweet.</p></blockquote>

<p>たとえば、あなたのサービスのなかから何かシェアさせたいときに、シェア対象に複数の Twitter アカウントを指定できるような実装は許可されません。代わりに１つのアカウントで Tweet させ、それ以外のアカウントは Retweet を利用してシェアすることが推奨されます。</p>

<blockquote><p>Please note that bulk, aggressive, or very high-volume automated Retweeting is not permitted under the Automation Rules, and may be subject to enforcement actions.</p></blockquote>

<p>ただし自動化された異常に大量な Retweets も、Twitter 側の自動検知ルールにひっかかって執行対象になることがあるので注意とのこと。</p>

<blockquote><p><strong>Do not (and do not allow your users to) simultaneously perform actions such as Likes, Retweets, or follows from multiple accounts.</strong> For example, your service should not permit a user to select several accounts they control to follow a specified account.</p></blockquote>

<p>複数のユーザアカウントに Like, Retweets をさせるようにアプリケーションがユーザ（アカウント）を制御するのも禁止です。</p>

<blockquote><p><strong>The use of any form of automation (including scheduling) to post identical or substantially similar content, or to perform actions such as Likes or Retweets, across many accounts that have authorized your app (whether or not you created or directly control those accounts) is not permitted.</strong> For example, applications that coordinate activity across multiple accounts to simultaneously post Tweets with a specific hashtag (e.g. in an attempt to cause that topic to trend) are prohibited.</p></blockquote>

<p>Twitter App を、同一または類似したコンテンツを投稿するため、あるいは Like や Retweet などのアクションを実行するための自動化（スケジューリングを含む）に用いるのは許可されていません。その Twitter App を認可したユーザが App の作成者と関係あるかどうかにかかわらずです。</p>

<p>つまり拡散のために大量のユーザアカウントを用意し、拡散の自動化のために Twitter App で開発をすることは禁止されます。</p>

<p>このケースの例外として、以下のパターンが挙げられています。</p>

<blockquote><ul>
<li>While we continue to permit cross-posting outside information (such as weather alerts or RSS feeds) to Twitter using automation, you should only post this content to one account you control.</li>
<li>As a sole exception to this rule, applications that broadcast or share weather, emergency, or other public service announcements of broad community interest (for example, earthquake or tsunami alerts) are permitted to post this content across multiple accounts who have authorized an app.</li>
</ul>
</blockquote>

<ul>
<li>天気予報や RSS フィードなどを自動的に投稿するような利用は許可される。ただし自分で管理する１つのアカウントにのみ投稿すること</li>
<li>このルールの唯一の例外として、天気、緊急事態、地震・津波など広く公開されるべき公的な通知をするアプリケーションは、複数のアカウントに投稿することが許可されます</li>
</ul>


<p>アプリが複数のアカウントを選択して投稿、Like、Retweet など出来るようになっている場合は <strong>2018/3/23 までに新しいポリシーに準拠するよう変更する必要</strong> があります。これを守らない場合、Twitter App とアカウントを一時停止されます。</p>

<p>…ということで、普段気軽に拡散させるようなアプリを作っている開発者の方も、きちんと Twitter のアプリ開発ポリシーに目を通し、準拠するようにしましょう。</p>

<ul>
<li><a href="https://help.twitter.com/en/rules-and-policies/twitter-rules">The Twitter Rules</a></li>
<li><a href="https://help.twitter.com/en/rules-and-policies/twitter-automation">Automation rules</a></li>
</ul>


<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/158350039@N03/39031868345/in/photolist-22t7wBk-8LWciB-8LWbAc-VfJ6pq-UDofTg-io6XBu-bWbZFg-UW9FCr-boWxMe-Tyt6MS-pDHKLN-QPfuGA-wRS2iH-UACxC9-ZuCAMp-TbtXL7-PMiB5y-6jDjYC-8LZfx3-TeftSd-8LZdYJ-UTfxtJ-UDo5kx-pUS7z8-VdcMpV-D4Zjwy-UQgpcd-TVE4M7-6jDj1f-VoZPn1-UDocWK-UQUVvz-VhtKwa-UvEnyR-VboQx4-WmUBDj-TCRpVK-W1LF3V-VfozFR-USB1UL-UW8E84-pCGL7s-UDo1HT-TGDcJH-GzwSag-SX2w3X-SUgDrL-Tef91j-TytNLq-UAC6bA" title="the bird in the moon"><img src="https://farm5.staticflickr.com/4769/39031868345_8caf6bf7ea_b.jpg" width="1024" height="768" alt="the bird in the moon"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails 5.2 開発環境を Docker で構築する]]></title>
        <id>https://developer.feedforce.jp/entry/2018/02/11/140012</id>
        <link href="https://developer.feedforce.jp/entry/2018/02/11/140012"/>
        <updated>2018-02-11T05:00:12.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>僕が所属している <a href="https://socialplus.jp/">ソーシャルPLUS</a> チームでは Rails の開発環境を Docker で構築しています。
自分も日々お世話になっている Docker ですが、イチから Dockerfile 書いた事が無かったので、やってみました。</p>

<p>こちらのチュートリアルを参考にしています。</p>

<p><a href="http://docs.docker.jp/compose/rails.html">&#x30AF;&#x30A4;&#x30C3;&#x30AF;&#x30B9;&#x30BF;&#x30FC;&#x30C8;&#x30FB;&#x30AC;&#x30A4;&#x30C9;&#xFF1A;Docker Compose &#x3068; Rails &mdash; Docker-docs-ja 17.06.Beta &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<h1>やってみた✨</h1>

<p>早速ですがこちらが完成品の GitHub リポジトリになります。
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fryz310%2Frails-on-docker%2Ftree%2Fv1.0.0" title="ryz310/rails-on-docker" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/ryz310/rails-on-docker/tree/v1.0.0">github.com</a></cite></p>

<p>この記事は <code>v1.0.0</code> 時点で書いていますが、リポジトリは今後も更新されていく可能性があります。</p>

<h2>環境</h2>

<ul>
<li>Debian Stretch</li>
<li>Ruby 2.5.0</li>
<li>Rails 5.2.0.rc1</li>
<li>MySQL 5.7</li>
</ul>


<h2>つかいかた</h2>

<p>Rails 5.2 で環境構築したと言いましたが、リポジトリには Rails のソースコードが一切含まれていません。
これは <code>rails new</code> から Docker でやっていくためです。
以下に手順を示しますので、興味ある方はぜひ記事を読みながら一緒にやってみて下さい 🙏</p>

<h3>0. リポジトリをローカルにクローンする</h3>

<pre class="code" data-lang="" data-unlink>$ git clone https://github.com/ryz310/rails-on-docker.git</pre>


<h3>1. 以下のコマンドを実行する</h3>

<pre class="code" data-lang="" data-unlink>$ docker-compose run web rails new . --force --database=mysql --skip-bundle --skip-git</pre>


<p><code>rails new</code> によって必要なファイルがインストールされます。同時に Gemfile も Rails 用に更新されます。
残念ながらアプリ名は指定できないので、必要に応じて変更して下さい。</p>

<p>なお、後述の MySQL データの永続化のため MySQL のデータファイルを含めないようにリポジトリの方で <code>.gitignore</code> を用意しています。
そのため <code>--skip-git</code> を付けて Rails に <code>.gitignore</code> ファイルを作成させないようにしていますが、永続化が不用な場合はオプションを外して下さい。</p>

<h3>2. 更新された <code>Gemfile</code> で以下のコメントアウトを外す</h3>

<pre class="code" data-lang="" data-unlink># gem &#39;mini_racer&#39;, platforms: :ruby</pre>


<p>以前であれば <code>therubyracer</code> だったのですが、いつの間にか <code>mini_racer</code> に変わっていたのですね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechracho.bpsinc.jp%2Fhachi8833%2F2017_06_09%2F41039" title="週刊Railsウォッチ（20170609）ついにtherubyracerからmini_racerへ、注意しないとハマるgem、5.1でのVue.jsとTurbolinksの共存ほか" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://techracho.bpsinc.jp/hachi8833/2017_06_09/41039">techracho.bpsinc.jp</a></cite></p>

<p>TechRacho さんの週刊Railsウォッチにはいつもお世話になっております 🙏</p>

<h3>3. <code>$ docker-compose build</code> を実行する</h3>

<p>Gemfile を変更したので再読イメージを作り直します。</p>

<h3>4. <code>config/database.yml</code> を以下のように変更する</h3>

<pre class="code" data-lang="" data-unlink>default: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch(&#34;RAILS_MAX_THREADS&#34;) { 5 } %&gt;
  username: root
  password: xxxxxx # &lt;- ここを変更
  host: db # &lt;- ここを変更</pre>


<p>あくまでローカルの開発環境構築なのでパスワードを隠したりとかはしません。本番運用とかでやっちゃダメですよ！
MySQL の Root ユーザーのパスワードは <code>docker-compose.yml</code> で指定しています。必要に応じて書き換えて下さい。</p>

<pre class="code" data-lang="" data-unlink>  db:
    image: mysql:5.7
    volumes:
      - .mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: xxxxxx # &lt;- ここ！</pre>


<h3>5. <code>$ docker-compose up</code> を実行する</h3>

<p>コンテナを起動させます。</p>

<h3>6. <code>$ docker-compose exec spring spring rake db:create</code> を実行する</h3>

<p>コンテナは起動していますが、Rails で使用する DB テーブルはまだ作成されていないので作成します。
何気に <code>spring</code> を使っている点に注目です。</p>

<h3>7. <a href="http://localhost:3000/">http://localhost:3000/</a> にアクセスして Rails が動いていることを確認</h3>

<p>ここまでの操作で Rails が正しく動作しているはずです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20180211/20180211110115.png" alt="f:id:ryz310:20180211110115p:plain" title="f:id:ryz310:20180211110115p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Yay! You’re on Rails!</figcaption></figure></p>

<h1>ポイント</h1>

<h2><code>bundle install</code> が毎回走らないように工夫している</h2>

<p>Dockerfile で WORKDIR に <code>/tmp</code> ディレクトリを指定しているところがポイントです。
これをせずに <code>WORKDIR /myapp</code> からの <code>ADD . /myapp</code> をやってしまうと、 Rails のコードに変更がある度に <code>bundle install</code> が最初から実行されてしまいます。
Gemfile と Gemfile.lock を <code>/tmp</code> に格納することで、これらのファイルに変更がない限り <code>bundle install</code> が実行されないようになっています。</p>

<pre class="code" data-lang="" data-unlink>WORKDIR /tmp
ADD Gemfile Gemfile
ADD Gemfile.lock Gemfile.lock
RUN bundle install
WORKDIR /myapp
ADD . /myapp</pre>


<p>参考: <a href="https://easyramble.com/rails-development-on-docker.html#crayon-5a7fa9761d5ba051809395">Docker&#x3067;Rails + MySQL&#x306E;&#x958B;&#x767A;&#x74B0;&#x5883;&#x3092;&#x69CB;&#x7BC9; | EasyRamble</a></p>

<h2><code>spring</code> に対応</h2>

<p>Rails で開発する上で欠かせない <code>spring</code> も利用できるようにしてあります。
前述の <code>rake db:create</code> の時にも出てきましたが、<code>$ docker-compose exec spring spring rails console</code> のようにして使います。
<code>spring</code> が 2 回出てくるところがポイントです。一つ目はコンテナのサービス名です。</p>

<p>毎回書くのはだるいので僕は alias にしています。fish shell 用なので良いように読み替えて下さい 🙏</p>

<pre class="code" data-lang="" data-unlink># ~/.config/fish/config.fish

# docker-compose aliases
function fig
  docker-compose $argv
end

function figspring
  docker-compose exec spring spring $argv
end</pre>




<pre class="code" data-lang="" data-unlink># USAGE
$ figspring rails c</pre>


<p>参考: <a href="https://qiita.com/kawasin73/items/2253523be18e5afd994f">&#x9AD8;&#x901F;&#x306B;&#x958B;&#x767A;&#x3067;&#x304D;&#x308B; Docker + Rails&#x958B;&#x767A;&#x74B0;&#x5883;&#x306E;&#x30C6;&#x30F3;&#x30D7;&#x30EC;&#x30FC;&#x30C8;&#x3092;&#x4F5C;&#x3063;&#x305F; - Qiita</a></p>

<h2>MySQL データの永続化</h2>

<p>イメージを作り直した時に MySQL のデータが失われてしまうのは辛いものがあります。
毎回テスト用のデータを一から作り直したくないので、 <code>docker-compose.yml</code> で以下のように指定してMySQL のデータを永続化させています。</p>

<pre class="code" data-lang="" data-unlink>  db:
    image: mysql:5.7
    volumes:
      - .mysql_data:/var/lib/mysql # &lt;- これ！
    environment:
      MYSQL_ROOT_PASSWORD: xxxxxx</pre>


<p><code>.mysql_data</code> ディレクトリ以下に MySQL のデータが格納されています。リポジトリの <code>.gitignore</code> で無視させています。
試していませんが、参考にさせて頂いた記事によると Docker for Mac 以外の環境では問題が発生するようですのでご注意下さい。
対応方法も記事内で紹介されています 🙏</p>

<p>参考: <a href="https://blog.leko.jp/post/how-to-mount-data-volume-to-local-with-docker-compose/">docker compose&#x3067;MySQL&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x9818;&#x57DF;&#x3092;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306B;&#x30DE;&#x30A6;&#x30F3;&#x30C8;&#x3059;&#x308B; | WEB EGG</a></p>

<h1>まとめ</h1>

<p>週末に何かアプリでも書こうかと思った時に、ついでに Docker で環境構築もやっちゃうか、と思い立って書きました。
そうこうしてるうちに週末の半分くらいが過ぎ去っていますが、きっと今後は捗るはず。。 😇
何度も確認していますが、もし間違っている点、不便な点などありましたらそっと教えて頂けますと幸いです 🙏
Fork も大歓迎ですし、誰かに使ってもらえると嬉しいです 😁</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda with Golang と SAM に入門した]]></title>
        <id>https://blog.tsub.me/post/introduce-aws-lambda-with-golang-and-sam/</id>
        <link href="https://blog.tsub.me/post/introduce-aws-lambda-with-golang-and-sam/"/>
        <updated>2018-01-31T14:15:00.000Z</updated>
        <summary type="html"><![CDATA[<p>先日 AWS Lambda の Golang サポートがリリースされました。</p>

<p><a href="https://aws.amazon.com/jp/blogs/compute/announcing-go-support-for-aws-lambda/">Announcing Go Support for AWS Lambda | AWS Compute Blog</a></p>

<p>今回は AWS Lambda を Golang で書きつつ、<a href="https://github.com/awslabs/serverless-application-model">SAM</a> へも入門したのでその辺りの知見とか作ったものについて紹介します。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[mackerel のカスタムメトリックを echo でワンライナーしたった]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/31/143611</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/31/143611"/>
        <updated>2017-12-31T05:36:11.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>突然ですがワテクシ、 Rails アプリはそこそこ書ける方なんですが、インフラはからきしだったりします。 <a href="https://dic.pixiv.net/a/%E3%82%AD%E3%83%A2%E3%83%BC%E3%82%A4%E3%82%AC%E3%83%BC%E3%83%AB%E3%82%BA">フルスタックじゃないエンジニアが許されるのは小学生までだよねー</a>、というちょっと懐かしみのある煽りが社内のからも聞こえてきそうなので、最近インフラを少しずつ触るようにしています。触ってみるとインフラも色々楽しいですね ✌︎('ω')✌︎</p>

<p>とはいえ、インフラエンジニアレベル 1 の自分があれこれやっても障害に繋がるだけなので、まずはお手軽な雑用タスクから始めることにしました。</p>

<p>さて、少し話は変わって、最近、弊社サービスで Sidekiq プロセスのファイルディスクリプタが急騰してサーバーがダウンする、という障害が何度か発生しました。
現象としては Sidekiq プロセスのファイルディスクリプタが上限値 (初期値は <code>1024</code> ) に達すると、サーバーの CPU 使用率が 100 % 付近まで達してしまう、というものだったので、ファイルディスクリプタの上限を <code>65536</code> まで上げる、というワークアラウンドな対応で凌いでいました。</p>

<p>現在は解決済み（この原因については、別途記事にします）ですが、当時はなぜファイルディスクリプタの数が上昇し続けてしまうのか原因が全くわからず、チームのエンジニアは安眠できない日々が続いていました。とりあえず Sidekiq のプロセスをリスタートすればファイルディスクリプタの数は一旦リセットされるので、監視してやばくなったらアラートを飛ばして再起動させる、という方法で一旦は凌ます。また、継続して監視することで、原因の解明にも繋がるかもしれません。</p>

<p>弊社のサービスでは監視に <a href="https://mackerel.io/">mackerel</a> を利用しているので、カスタムメトリックを使ってお手軽に監視させよう、ということになりました。
mackerel のカスタムメトリックの投稿方法は <a href="https://mackerel.io/ja/docs/entry/advanced/custom-metrics">こちらの記事</a> にまとまっています。
要点だけ抜粋しますと、 <a href="https://mackerel.io/ja/docs/entry/spec/agent#config-file">mackerel-agent の設定ファイル</a> に <strong>以下の書式で標準出力を実行するコマンドを記述</strong> すれば OK です。</p>

<blockquote><p>設定ファイルで指定するコマンドは、標準出力の各行に以下のフォーマットの出力をすることが期待されます（<code>\t</code> はタブ文字です）:</p></blockquote>

<pre class="code" data-lang="" data-unlink>{metric name}\t{metric value}\t{epoch seconds}</pre>


<p>そして以下がファイルディスクリプタを監視するための設定です（完成品がレンジから出てくるパティーン）</p>

<pre class="code" data-lang="" data-unlink>[plugin.metrics.file_descriptor_count]
command = &#39;&#39;&#39;
  echo -e &#34;file_descriptor.sidekiq\\t$(sudo ls /proc/$(pgrep -f -u {user_name} sidekiq | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
&#39;&#39;&#39;</pre>


<p>標準出力されれば OK なので、 <code>echo</code> で任意の文字列を出力するような方法でも実現可能です。内部で <code>pgrep -f -u {user_name} sidekiq</code> と書いて、プロセス ID を取得していますが、 <code>-u</code> でプロセスを実行しているユーザーを指定しないと、 <code>pgrep</code> のプロセス ID を取得してしまうケースがあるので注意が必要です。(mackerel-agent は <code>root</code> で実行される)
同じ要領で、他にも以下のように書けば <code>puma</code> のファイルディスクリプタも取ることができます。</p>

<pre class="code" data-lang="" data-unlink>[plugin.metrics.file_descriptor_count]
command = &#39;&#39;&#39;
  echo -e &#34;file_descriptor.puma\\t$(sudo ls /proc/$(pgrep -f -u {user_name} puma.sock | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
  echo -e &#34;file_descriptor.puma_cluster_worker\\t$(sudo ls /proc/$(pgrep -f -u {user_name} &#39;puma: cluster worker&#39; | head -1)/fd/ | wc -l)\\t$(date -u +%s)&#34;
&#39;&#39;&#39;</pre>


<p>ちなみにこの記事を書くときに、もしやと思って調べてみたら、 <code>mackerel-agent-plugins</code> の中に <a href="https://github.com/mackerelio/mackerel-agent-plugins/tree/master/mackerel-plugin-proc-fd">任意のプロセスのファイルディスクリプタを監視する奴</a> がありました 😓
試していませんが、こっちを使った方が良いと思います 😇</p>

<p>そんな感じで監視できたグラフが以下になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryz310/20171231/20171231142049.png" alt="f:id:ryz310:20171231142049p:plain" title="f:id:ryz310:20171231142049p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ファイルディスクリプタ数がファイナルファンタジーの HP みたいになってますね。。。
とりあえず <code>10,000</code> を超えたらアラートを飛ばすように設定しましたが、デプロイする度にリセットされるので、結局アラートが飛ぶことも障害が発生することもなく、問題は解決しました。</p>

<p>本稿では <code>echo</code> を使ったワンライナーでカスタムメトリックを投稿する方法を紹介しました。
<code>mackerel-agent-plugins</code> に載っていないけどワークアラウンドでとりあえず監視させたい、という時は便利だと思うので、どこかでご活用ください 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub 上でコミットハッシュにもとづく URL を得る]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/20/141220</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/20/141220"/>
        <updated>2017-12-20T05:12:20.000Z</updated>
        <summary type="html"><![CDATA[<p>ご存知のかたも多いかと思いますが、GitHub で管理しているコードについて、コードの "ある部分" を示したいときに貼り付ける URL には注意が必要です。</p>

<h3>ソースコードの参照リンクを貼るときに気をつけたいこと</h3>

<p>たとえばこんなリンクを貼り付けた場合</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16</a></li>
</ul>


<p>これは <code>source</code> ブランチの最新の <code>Gemfile</code> ファイルの 16 行目を参照します。</p>

<p>いま（記事執筆時点で）このリンクを開くと <code>gem 'slim', '~&gt; 3.0.2'</code> が書かれている行を参照してることがわかりますが、この先 <code>source</code> ブランチのコードに変更があった場合「最新の」コードでは別のものを指してしまう可能性があります。</p>

<p>なので "ある行" を参照する場合にはコミットハッシュを特定した URL を貼るのがベストです。</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16</a></li>
</ul>


<p>この URL はコミットハッシュ <code>de6fb7dd0309465b936817e8452948084c8d7c76</code> の <code>Gemfile</code> ファイルの 16 行目を参照しているので、コードに変更があってもリンク先の内容が変わってしまうことはありません。</p>

<p>コードの "ある部分" を示したいときにはこの違いに気をつけましょう。</p>

<h3>GitHub の便利なショートカット</h3>

<p>というわけで、ここまでは自分も当たり前のように実践していたのですが、この「コミットハッシュにもとづく URL」取得のためにいちいち <em>History などから最新のコミットハッシュを辿る</em>ということをしていました。面倒。</p>

<p>最近同僚に教えてもらったのですが（そして感動してこの記事を書いているのですが）</p>

<p>GitHub ページ上のショートカット機能により <strong><kbd><code>y</code></kbd> キーを押すことで、現在見ているファイルのコミットハッシュにもとづく URL を簡単に得る</strong>ことができます。</p>

<p>以下のページを開いているときに <kbd><code>y</code></kbd> キーを押すと</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/source/Gemfile#L16</a></li>
</ul>


<p>アドレスバーで以下の URL に変わるのがわかります（コミットハッシュ部分は最新のものに変わります）。</p>

<ul>
<li><a href="https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16">https://github.com/tmd45/tmd45.github.io/blob/de6fb7dd0309465b936817e8452948084c8d7c76/Gemfile#L16</a></li>
</ul>


<p>一発で便利！( ﾟДﾟﾉﾉ"☆ﾊﾟﾁﾊﾟﾁﾊﾟﾁﾊﾟﾁ</p>

<h3>ちなみに</h3>

<p>GitHub 上で利用できる便利なショートカット機能は <kbd><code>?</code></kbd> キーを押すことで GitHub ページ上のどこでも確認できます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171220/20171220134401.png" alt="f:id:tmd45:20171220134401p:plain" title="f:id:tmd45:20171220134401p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<blockquote><p>Expand URL to its canonical form</p></blockquote>

<p>というのが今回のそれですね。<code>t</code> と <code>l</code> はよく使ってたんですが、これは気づいていませんでした(；´∀｀)</p>

<p>"Source code browsing" にあるショートカットは、GitHub 上でコードブラウジングを行う上で非常に便利なので、ぜひ試してみて下さい。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[結婚して半年が経ったので工夫していることとか]]></title>
        <id>https://blog.tsub.me/post/half-a-year-after-married/</id>
        <link href="https://blog.tsub.me/post/half-a-year-after-married/"/>
        <updated>2017-12-09T12:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2155">feedforce Advent Calendar 2017</a> の 9 日目の記事です。</p>

<p>昨日の記事は tmd45 さんの <a href="http://developer.feedforce.jp/entry/2017/12/08/090000">TypeScript 社内勉強会 完遂報告 - Feedforce Developer Blog</a> でした。<br />
TypeScript 社内勉強会には自分も参加していましたが、プロダクションのコードを書いているフロントエンドエンジニアの方から色々とアドバイスを頂いたり、他の言語の観点で議論が出来たりとても有意義な会でした！</p>

<p>さて、本題ですがワタクシ今年の 4 月に結婚をしました。</p>

<p>妻は Web コーダーで、割と Web サービスなどにも抵抗がなく普段から Slack や Kibela などを夫婦間で活用しています。</p>

<p>今回はその辺りで色々と工夫している部分を紹介できればと思います。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript 社内勉強会 完遂報告]]></title>
        <id>https://developer.feedforce.jp/entry/2017/12/08/090000</id>
        <link href="https://developer.feedforce.jp/entry/2017/12/08/090000"/>
        <updated>2017-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="https://adventar.org/calendars/2155">feedforce Advent Calendar 2017</a> の
 8 日目の記事です。昨日は <a href="http://blog.hatena.ne.jp/phiitakes/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/phiitakes/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:phiitakes</a> の『<a href="http://phiitakes.hatenablog.com/entry/2017/12/07/143958">フィードフォースのスポーツ系活動紹介 - phiitakesのなにか</a>』でした。弊社こんなに運動部あったんだ！？ｗ</p>

<p>こにゃにゃちわ（世代）<a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。</p>

<p>ちょうど今週、社内で開催していた TypeScript 勉強会が一段落したので、それについて書きたいと思います。TypeScript の話というよりは社内勉強会のやりかたのひとつという話になりますのでご了承ください。</p>

<h3>きっかけ</h3>

<p>今年の夏頃から担当プロダクトで AWS Lambda を利用するようになりました。当初開発に取り組んでくれたサーバサイドメンバーが JavaScript 学んでいたり、強力なフロントエンド開発メンバーがいたりということで実装に Node.js を選択しています<a href="#f-bfc4d7a1" name="fn-bfc4d7a1" title="隣のチームでは Python を利用していますね。開発のメインは Ruby ですが、それ以外の言語はチームによって検討している感じです">*1</a>。</p>

<p>フロントエンドチームでは静的型付け（と関数型）の導入が進んでおり、とくに新しいプロダクトでは <a href="https://flow.org/">Flow</a> を用いた開発が行われています。</p>

<p>そんなこんなで Lambda function の実装でも静的型付けの可能な言語で開発したいという向きがあり、とはいえ JavaScript の基礎もあやふやなチームメンバー（主に私）がいる状況でしたので Pure JavaScript から大きく逸脱することがなく最新の仕様にも触れられる
 <a href="https://www.typescriptlang.org/">TypeScript</a> でやってみようという選択になりました。</p>

<p>仕事でやるからにはしっかり勉強せねばと思いつつ、自力だけで学ぶことになると最初に開発に取り組んでくれたメンバー以外（主に私）は意識が下がりがちになると思い、社内勉強会という名目で取り組むことにしました。</p>

<h3>やりかた</h3>

<p>仕事ですぐに使う技術を学ぶという名目でしたので、週一でゆっくりというよりは、短時間で刻んでどんどんやっていこうという気持ちでセッティングしました。</p>

<p>導入を決めた自分のチーム（のサーバサイドメンバー）の参加は必須として、ミーティングの日程を避けて 1 イテレーション＝ 2 週間のなかでミーティングの無い日を中心にスケジュールしました。</p>

<table>
<thead>
<tr>
<th> 曜日 </th>
<th> 予定 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 月 </td>
<td> スプリントプランニング </td>
</tr>
<tr>
<td> 火 </td>
<td> なし </td>
</tr>
<tr>
<td> 水 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 木 </td>
<td> なし </td>
</tr>
<tr>
<td> 金 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td>  </td>
<td>  </td>
</tr>
<tr>
<td> 月 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 火 </td>
<td> なし </td>
</tr>
<tr>
<td> 水 </td>
<td> <strong>TypeScript 勉強会</strong> </td>
</tr>
<tr>
<td> 木 </td>
<td> なし </td>
</tr>
<tr>
<td> 金 </td>
<td> スプリントレビュー、レトロスペクティブ、KPT </td>
</tr>
</tbody>
</table>


<p>回数を増やしたぶん、<strong>1 回の実施時間を短めに 30 分〜 45 分</strong> としました（それでも後半は白熱して 1 時間いっぱい使ってしまいましたが）。</p>

<p>開催時間は毎朝の <strong>デイリースクラムを終えたあとの、午前中</strong> にしました。夕方は日によって早く帰りたいこともありますが、朝は普段からチームで集まることが決まっているので時間確保がしやすかったためです。</p>

<p>そんな感じでスケジューリングしつつ、参加したいひとはお気軽にご参加ください、というスタンスで進めました。結果、参加人数は 3 〜 7 人と幅がありました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207132757.png" alt="f:id:tmd45:20171207132757p:plain" title="f:id:tmd45:20171207132757p:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">はじめるまえにお気持ちを表明してみた</span></p>

<p>教材は市販の書籍も検討しましたが <strong>  <a href="https://basarat.gitbooks.io/typescript/">TypeScript Deep Dive</a> というオンラインドキュメント</strong> を利用しました。浅すぎず深すぎず、最新の JavaScript のことも学べる適度な教材はなんだろう？と投げかけたところ、<a href="http://developer.feedforce.jp/archive/author/otofu-square">先に TypeScript を自主学習していたメンバー</a>や<a href="http://developer.feedforce.jp/archive/author/kogainotdan">フロントエンドの元老院の方</a>からオススメしてもらいました。英語だけど、みんなで読むならこわくない。</p>

<p>また <code>Promise</code> の部分では追加で   <a href="http://azu.github.io/promises-book/">JavaScript Promiseの本</a> の前半も読みました。どちらのドキュメントでもこの勉強会では基礎部分だけ実施しました。仕事で使いながら、あとは自分で応用編も読み進めていく予定です。</p>

<h3>よかったこと</h3>

<p>学習した内容からとくに思ったのは、言語の設計思想を理解して学ぶと納得感が違うなということです。 Deep Dive の冒頭には TypeScript がどういうスタンスの JavaScript
Transpiler であるか？という解説がありました<a href="#f-a4dddcf6" name="fn-a4dddcf6" title="あくまでも Pure JavaScript がそのまま記述できる（ように設定できる）ように設計され、既存の JavaScript コードを部分的に移行していけるものである、とか">*2</a>。</p>

<p>また、参加メンバーは普段主に Ruby を書いているひとが多いので「Ruby ではここはこういうやりかたになってるね」という話をしたり、いろんな言語を触ってよく学んでいるメンバーから「別の言語ではこういう思想でこういう実装がされているよ」とか、たとえば「Flow では（思想が違うので）ここは勝手に推論してくれるんですよ」みたいな話をしてもらったりしました。</p>

<p>Slack で疑問点を共有しながら進めていると「先生」になるような社内メンバーたちが説明をくれたり議事録<a href="#f-140fefc7" name="fn-140fefc7" title="業務時間中にやっている勉強会だったので「真面目に勉強してますよ〜」と報告する理由で書いていたのですが（笑）あとで見返すこともできて良かった">*3</a>にもコメントをもらったり、とても助かりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207133707.png" alt="f:id:tmd45:20171207133707p:plain" title="f:id:tmd45:20171207133707p:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">Qiita:Team でかんたんな議事録を作っていました</span></p>

<p>「先生」レベルの人たちが毎回勉強会に参加するのは、どうしても（お互いに）無駄に感じてしまうこともあると思います。興味のある章だったり時間のあるときには気軽に参加してもらって、そうでないときも助けてもらうことができて大感謝でした 🙏</p>

<h3>まとめ</h3>

<p>勉強会を実施した成果として、実際に TypeScript で書いているリポジトリが最低限読めるようになりましたし、他のフロントエンドのリポジトリでも「呪文かコレ」って思うことがなくなりました！開発の入り口に立つことが出来たように思います。大成功 😊</p>

<p>年明けには業務で利用している外部の JS SDK の TypeScript ソースコード・リーディング会をやってみたいと考えています(๑•̀ㅂ•́)و✧</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171207/20171207151404.jpg" alt="f:id:tmd45:20171207151404j:plain" title="f:id:tmd45:20171207151404j:plain" class="hatena-fotolife" itemprop="image"></span>
<span style="color: #cccccc">最終回の参加メンバー！おつかれさまでした！！</span></p>

<div style="text-align: center; color: #ccc;">〜〜〜</div>


<p>さて、明日は弊社には結構多い（！）既婚者勢の <a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tsub511/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a> による <a href="https://adventar.org/calendars/2155#list-2017-12-09">結婚して半年が経ったので工夫していることとか</a> です。おたのしみに〜</p>
<div class="footnote">
<p class="footnote"><a href="#fn-bfc4d7a1" name="f-bfc4d7a1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">隣のチームでは Python を利用していますね。開発のメインは Ruby ですが、それ以外の言語はチームによって検討している感じです</span></p>
<p class="footnote"><a href="#fn-a4dddcf6" name="f-a4dddcf6" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">あくまでも Pure JavaScript がそのまま記述できる（ように設定できる）ように設計され、既存の JavaScript コードを部分的に移行していけるものである、とか</span></p>
<p class="footnote"><a href="#fn-140fefc7" name="f-140fefc7" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">業務時間中にやっている勉強会だったので「真面目に勉強してますよ〜」と報告する理由で書いていたのですが（笑）あとで見返すこともできて良かった</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS でコンテナを動かすためのサービスまとめ]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/30/133525</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/30/133525"/>
        <updated>2017-11-30T04:35:25.000Z</updated>
        <summary type="html"><![CDATA[<p>こんにちは、バックエンドエンジニアの tsub (<a href="http://blog.hatena.ne.jp/tsub511/">id:tsub511</a>) です。</p>

<p>本日 AWS Re:Invent 2017 でコンテナ実行環境として新たに AWS Fargate と Amazon Elastic Container Service for Kubernetes (EKS) が発表されました。</p>

<p>昨日は発表が待ち遠しくて気が気じゃなかったですが、無事に予想通りマネージド Kubernetes サービスが発表されて大喜びです。</p>

<p>今回は AWS でコンテナを扱う上で、今までのサービスと合わせて選択肢がいくつかあって混乱すると思うので簡単にまとめました。</p>

<h2>AWS でコンテナを動かすためのサービス</h2>

<p>新しく 2 つのサービスが追加されたことで、これだけあります。
(見落としがなければ)</p>

<ul>
<li>Amazon Elastic Beanstalk (EB)</li>
<li>Amazon Elastic Container Service (ECS)</li>
<li>AWS Batch</li>
<li><a href="https://aws.amazon.com/jp/eks/">Amazon Elastic Container Service for Kubernetes (EKS)</a> <strong><font color="red">new!</font></strong></li>
<li><a href="https://aws.amazon.com/jp/fargate/">AWS Fargate</a> <strong><font color="red">new!</font></strong></li>
</ul>


<p>それぞれの特徴について説明していきます。</p>

<h2>Amazon Elastic Beanstalk (EB)</h2>

<p>※ EB については自分は全く触ったことがないので分からないままで書きます。</p>

<p>EB は Heroku のような PaaS です。
本来は Heroku と同じようにアプリケーションのコードをそのままデプロイして動かしますが、Docker もサポートしていて、コンテナとしてデプロイして動かすことができます。</p>

<p>小規模なサービス、チームなどでインフラの管理をしたくないというユースケースで使うことが多いと思います。</p>

<h2>Amazon Elastic Container Service (ECS)</h2>

<p>ECS は AWS が独自に開発しているマネージドなコンテナのオーケストレーションサービスです。
(コンテナのオーケストレーションについては <a href="#%E3%81%8A%E3%81%BE%E3%81%91:%20%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">おまけ: コンテナのオーケストレーションについて</a> を参照)</p>

<p>EC2 の上で ecs-agent を動かすことで、ECS のクラスタとして認識させることができるため、非常にシンプルです。
ecs-agent が動いていれば、ECS を通して EC2 の上でコンテナを簡単に動かすことができます。</p>

<p>ECS 向けに awslogs という Docker 用の logging driver を提供していて、CloudWatch Logs との連携も簡単に行えます。</p>

<p>ECS 上でのコンテナは、ECS Task や ECS Service として動かします。
ECS Task には IAM Role を使った権限管理や VPC ネットワーク上で直接 Task を動かすことができ、セキュリティグループなどを利用することもできます。</p>

<p>ECS Service は ELB との連携があり、コンテナが起動したら自動的に ELB に紐付けたり、コンテナが終了したら ELB から外したり、といったことをやってくれます。</p>

<p>上記のように、他の AWS サービスとの連携がスムーズにできる点は非常に魅力的です。</p>

<h2>AWS Batch</h2>

<p>Batch はコンテナを使ったバッチコンピューティングに特化したサービスです。</p>

<p>バッチコンピューティングと言っても、決まった時間に決まった処理をするという cron のようなものではなく、
機械学習やスーパーコンピュータなどで利用するような大量の計算処理を必要とする場合に利用されるような基盤となります。</p>

<p>そういう背景もあり、主に CPU ベースでのコンテナの割り振り、ホストのオートスケーリングなどに強いです。</p>

<p>また、Batch はバックエンドで ECS を使っており、ジョブを動かすと実際に ECS Cluster が作られその上で Task が動いている様子を見ることもできます。
ECS を使っていることもあり、ログは自動的に awslogs logging driver によって CloudWatch Logs に送られたり、CloudWatch による ECS のメトリクスを見ることが可能です。</p>

<p>また、ECS と違って Job Queue も提供されていて、ジョブの状態管理なども可能となっています。
CloudWatch Events によりジョブの状態変化によるイベントドリブンな処理も可能です。</p>

<h2><a href="https://aws.amazon.com/jp/eks/">Amazon Elastic Container Service for Kubernetes (EKS)</a> <strong><font color="red">new!</font></strong></h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Faws.amazon.com%2Fjp%2Feks%2F" title="Amazon EKS – マネージド型 Kubernetes サービス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://aws.amazon.com/jp/eks/">aws.amazon.com</a></cite></p>

<p>EKS はマネージドな Kubernetes を提供してくれるサービスです。
(現在はプレビュー版のみの提供)</p>

<p>ECS は AWS が独自に開発しているコンテナのオーケストレーションサービスでしたが、Kubernetes は Google が開発している OSS プロジェクトのコンテナのオーケストレーションツールです。
(コンテナのオーケストレーションについては <a href="#%E3%81%8A%E3%81%BE%E3%81%91:%20%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">おまけ: コンテナのオーケストレーションについて</a> を参照)</p>

<p>Kubernetes は OSS ということもあり、コミュニティが非常に活発で多くの開発者・企業が開発に協力しています。</p>

<p>Kubernetes を動かすための基盤はかなりたくさんの選択肢があり、あくまで EKS はそのうちの一つです。</p>

<p>特に、今まで AWS 上で Kubernetes 環境を構築するために様々なツールがありました (私が知っている範囲で)。</p>

<ul>
<li><a href="https://github.com/kubernetes-incubator/kubespray">kubespray</a></li>
<li><a href="https://github.com/kubernetes-incubator/kube-aws">kube-aws</a></li>
<li><a href="https://github.com/kubernetes/kops">kops</a></li>
<li><a href="https://kubernetes.io/docs/reference/generated/kubeadm/">kubeadm</a></li>
<li><a href="https://coreos.com/tectonic/">Tectonic</a></li>
<li><a href="http://rancher.com/rancher-os/">Rancher</a></li>
</ul>


<p>実際、今まで AWS 上で Kubernetes を利用していた人が多いようで、おそらくその方々は何らかのツールを用いて自前で構築していたと思います。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/amazon-elastic-container-service-for-kubernetes/">https://aws.amazon.com/jp/blogs/news/amazon-elastic-container-service-for-kubernetes/</a></p>

<blockquote><p>AWS 上で Kubernetes を利用している多くのお客様がいます。実際、Cloud Native Computing Foundationによると、Kubernetes のワークロードの63％が AWS 上で動作しています。AWS は Kubernetes を実行するうえで人気の場所</p></blockquote>

<p>これらのツールを使って、Kubernetes クラスタの構築・管理を簡単にすることができますが、やはりマスターノードを管理する必要はでてくると思います。</p>

<p>そこを AWS 側で管理・提供してくれるのが EKS となります。</p>

<p>EKS としては Kubernetes クラスタの管理だけでなく、ELB や IAM、VPC、Private Link、CloudTrail などとの連携も提供してくれているため、自前で Kubernetes クラスタを構築するよりも便利になっています。
後述の Fargate との連携も今後できるようになるとのことです。</p>

<p>また、既存の Kubernetes 用ツール群を使えるのも大きな強みです。</p>

<h2><a href="https://aws.amazon.com/jp/fargate/">AWS Fargate</a> <strong><font color="red">new!</font></strong></h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Faws.amazon.com%2Fjp%2Ffargate%2F" title="AWS Fargate – サーバーやクラスターの管理が不要なコンテナの実行" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://aws.amazon.com/jp/fargate/">aws.amazon.com</a></cite></p>

<p>Fargate は単体のサービスではなく ECS や EKS の上で使うことのできるサービスです。
(現在は北部バージニアリージョンのみの提供)</p>

<p>前述した ECS や EKS と違い、コンテナを動かすホストについて意識せず、コンテナそのものを動かすことだけに集中することができます。</p>

<p>どういうことかと言うと、Fargate では事前にホストを動かしておく必要はありません。</p>

<p>AWS VPC 環境と ECS のクラスター (名前空間的な意味で) を作っておけば、後はコンテナを起動するだけで自動的にホストを用意し、コンテナを実行してくれます。</p>

<p>また、ECS の上に乗っかっているので、使い方は簡単で ECS Task として起動する時に launch type として Fargate を指定するだけです。
その他、ECS Service でも使うことができます。
(EKS との連携についてはまだ情報が公開されていないため不明です)</p>

<p>ホストをこちら側で管理しないため、ホストの監視の方法などは気になるところですが、CloudWatch を通してホストのメトリクスは取れるようです。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/aws-fargate-a-product-overview">https://aws.amazon.com/jp/blogs/news/aws-fargate-a-product-overview</a></p>

<blockquote><p>FargateではアプリケーションのログをCloudWatch Logsに送ることができます。サービスのメトリクス(CPUとメモリの利用率)もCloudWatchメトリクスとして利用可能です。可視化や監視、アプリケーションパフォーマンスの領域での我々のパートナーである、DataDog、Aquasec、Splunk、Twistlock、そしてNew RelicもFargateタスクをサポートしています。</p></blockquote>

<p>また、Fargate に似たサービスとして <a href="https://azure.microsoft.com/ja-jp/services/container-instances/">Azure Container Instances (ACI)</a> や <a href="https://hyper.sh/">Hyper.sh</a> といったサービスも AWS 以外で提供されています。</p>

<h2>おまけ: コンテナのオーケストレーションについて</h2>

<p>コンテナを本番環境で動かそうとした時、コンテナをどのインスタンスで動かすか、どのインスタンスでコンテナが動いているのか、などコンテナの管理方法でいくつか問題が出てきます (あくまで一例です)。</p>

<p>そういった問題を解決するため、コンテナのスケジューリングやマネージングをするツールを用意する必要がありますが、それらを解決するためのツールが ECS や Kubernetes, Docker Swarm などと言ったオーケストレーションツールとなります。</p>

<p>ただし、どこにコンテナのスケジューリングやマネージングをする人が必要になってきます。
その人をマスターノードなどと呼び、次はこれを管理・冗長化などしなければいけないという問題がでてきます。</p>

<p>そのマスターノードの管理までマネージドで提供してくれているのが、ECS や EKS, <a href="https://cloud.google.com/kubernetes-engine/?hl=ja">GKE (Google Kubernetes Engine)</a>, <a href="https://azure.microsoft.com/ja-jp/services/container-service/">AKS (Azure Container Service)</a> などになります。</p>

<h2>まとめ</h2>

<ul>
<li>EB

<ul>
<li>小規模なサービス・チームで使うと良さそう</li>
</ul>
</li>
<li>ECS

<ul>
<li>AWS 独自のコンテナのオーケストレーションサービス</li>
</ul>
</li>
<li>Batch

<ul>
<li>バッチコンピューティング基盤として使う</li>
</ul>
</li>
<li>EKS

<ul>
<li>Kubernetes を使ったコンテナのオーケストレーションサービス</li>
</ul>
</li>
<li>Fargate

<ul>
<li>検証環境・本番環境・ちょっとした処理など幅広く使える</li>
</ul>
</li>
</ul>


<p>機能的に ECS と EKS の使い分けは難しいですが、学習コスト・導入コストの面で ECS に軍配は上がると思います。
ただ、コンテナを使う以上コミュニティが巨大な Kubernetes を使うことも大きなメリットです。</p>

<p>個人的には EKS を推していきたいです。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[fontTools のペンを使ってグリフのアウトラインを取得する]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2017/11/26/221902</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2017/11/26/221902"/>
        <updated>2017-11-26T13:19:02.000Z</updated>
        <summary type="html"><![CDATA[<p>先日 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> で、「グリフのアウトラインの座標列を取りたいんだけど」「それ pen protocol でできるよ！」というやりとりをしました。この記事では、pen protocol に対応したペンでアウトラインを取得する方法について、具体的に解説してみます。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">フォントとかについてベジエのアウトラインの法線方向に制御点を移動することでアウトラインを太らせたり細らせたりする処理を思ひついたんだけど、テスト環境構築するのが面倒。フォントファイルから制御点の座標列を取り出し、それを描画する処理ができないとだめ感。なにかいいのあるかな…。</p>&mdash; にせねこ (@nixeneko) <a href="https://twitter.com/nixeneko/status/928179735590342656?ref_src=twsrc%5Etfw">2017年11月8日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">目的はもう果たせたようですが、グリフのアウトラインを <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> で読み書き加工するのであれば、(segment) pen protocol <a href="https://t.co/kR5gvCz5kY">https://t.co/kR5gvCz5kY</a> や point pen protocol <a href="https://t.co/JvIUdqkEfu">https://t.co/JvIUdqkEfu</a> が標準的です。慣れるまでちょっと癖はあるものの、いろいろと応用が利きます。</p>&mdash; mashabow (@mashabow) <a href="https://twitter.com/mashabow/status/928289778465832960?ref_src=twsrc%5Etfw">2017年11月8日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h3>pen protocol とペン</h3>

<p>さて、そもそも pen protocol とは何でしょう？　今回は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB">プロトコル</a>の詳細には触れず、概観だけ説明します。</p>

<p>フォント界隈では <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> が共通言語になっています。しかし、グリフを表すためのオブジェクトは、フォントエディタ（Glyphs, RoboFont, FontLab, ...）やライブラリ（fontTools, ufoLib, defcon, fontParts, ...）ごとにそれぞれ独自に定義されています。ざっくり言ってしまうと、「どんなグリフオブジェクトであれ、共通の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス</a>でアウトラインを読み書きできると楽だよね」「<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a> や PDF やいろんな描画 <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a> にも対応したいよね」というのが pen protocol の発想です。pen protocol によってグリフからアウトラインを得たり、アウトラインを描いたりするためのオブジェクトをペン（pen）と呼びます。</p>

<p>pen protocol が広まった結果、現在までにいろいろなペンが実装されてきました。以下にいくつか例を挙げますが、これ以外にも存在しています。</p>

<ul>
<li><a href="https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/pens"><code>fontTools.pens.*</code></a></li>
<li><a href="https://github.com/robofab-developers/fontPens/tree/master/Lib/fontPens"><code>fontPens.*</code></a></li>
<li><a href="https://github.com/unified-font-object/ufoLib/blob/master/Lib/ufoLib/pointPen.py"><code>ufoLib.pointPen.*</code></a></li>
</ul>


<p>なお、pen protocol には <a href="https://github.com/fonttools/fonttools/blob/master/Lib/fontTools/pens/basePen.py#L3">segment pen protocol</a> と <a href="https://github.com/unified-font-object/ufoLib/blob/master/Lib/ufoLib/pointPen.py">point pen protocol</a> の2系統があり、前者に対応したペンは <code>HogePen</code>、後者は <code>HogePointPen</code> のようなクラス名になっているのが通例です。この記事では、前者 segment pen protocol のペンをとり上げます<a href="#f-cc54d3b8" name="fn-cc54d3b8" title="若干紛らわしいのですが、segment pen protocol は単に pen protocol と呼ばれることがあります。">*1</a>。</p>

<h3>フォントを読み込んでグリフを準備する</h3>

<p><small>以下、環境は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a> 3.6.3, <a href="https://github.com/fonttools/fonttools">fontTools</a> 3.20.1 です。fontTools は <code>$ pip install fonttools</code> でインストールできます。</small></p>

<p>ペンのことは一旦あと回しにして、まずはフォントファイルを読み込みます。今回は例として、源ノ角ゴシック Regular <a href="https://github.com/adobe-fonts/source-han-sans/blob/release/OTF/Japanese/SourceHanSans-Regular.otf"><code>SourceHanSans-Regular.otf</code></a> を使いました。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> fontTools.ttLib <span class="synPreProc">import</span> TTFont
font = TTFont(<span class="synConstant">'SourceHanSans-Regular.otf'</span>)
</pre>


<p>次に、glyphSet と呼ばれる辞書様オブジェクトと、cmap（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>とグリフ名の対応）を取得しておきます。後者に関しては、従来 cmap テーブル <code>font['cmap']</code> からサブテーブルを選んで辿っていく必要がありましたが、<a href="https://github.com/fonttools/fonttools/pull/1092">最近追加された</a>お手軽便利メソッド <code>getBestCmap()</code> でいい感じに取得できます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>glyph_set = font.getGlyphSet()  <span class="synComment"># {グリフ名: グリフ} っぽいオブジェクト</span>
cmap = font.getBestCmap()       <span class="synComment"># {Unicode: グリフ名}</span>
</pre>


<p>これらを使って、文字 <code>char</code> に対応したグリフオブジェクトを返す関数を作ります。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">get_glyph</span>(glyph_set, cmap, char):
    glyph_name = cmap[<span class="synIdentifier">ord</span>(char)]
    <span class="synStatement">return</span> glyph_set[glyph_name]
</pre>


<p>例として、文字 "L" に対応するグリフオブジェクトを、 <code>L</code> としておきましょう。</p>

<pre class="code lang-python" data-lang="python" data-unlink>L = get_glyph(glyph_set, cmap, <span class="synConstant">'L'</span>)
</pre>


<p>これでグリフの準備はできました。</p>

<h3><code>RecordingPen</code> でアウトラインの内容を得る</h3>

<p>さて、アウトラインの内容を取得するためには、fontTools に同梱されている <a href="https://github.com/fonttools/fonttools/blob/master/Lib/fontTools/pens/recordingPen.py"><code>RecordingPen</code></a> というペンを使います。まずはペンの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>を作成します。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> fontTools.pens.recordingPen <span class="synPreProc">import</span> RecordingPen
recording_pen = RecordingPen()
</pre>


<p>次に、このペンをグリフ上で動かします。pen protocol に対応したグリフオブジェクトは <code>draw()</code> メソッドを持っていますので、これにペンを渡して実行します。先ほどの "L"
のグリフ <code>L</code> を使ってみましょう。</p>

<pre class="code lang-python" data-lang="python" data-unlink>L.draw(recording_pen)
</pre>


<p>ペンで "draw" と言われると、どこかに描く・書き込むのかと思ってしまいがちですが、ここではグリフのアウトラインを「なぞる」行為のことだと捉えてください。この <code>RecordingPen</code> では <code>value</code> 属性になぞった結果が入っていますので、見てみましょう。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synIdentifier">print</span>(recording_pen.value)
</pre>




<pre class="code lang-python" data-lang="python" data-unlink>[(<span class="synConstant">'moveTo'</span>, ((<span class="synConstant">100</span>, <span class="synConstant">0</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">513</span>, <span class="synConstant">0</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">513</span>, <span class="synConstant">79</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">193</span>, <span class="synConstant">79</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">193</span>, <span class="synConstant">733</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">100</span>, <span class="synConstant">733</span>),)),
 (<span class="synConstant">'closePath'</span>, ())]
</pre>


<p>目的どおりアウトラインの内容が出てきました。"L" の左下の点からスタートし、反時計回りにパスが構成されているのが分かります。</p>

<p>もうひとつ、"い" のグリフで試してみるとこうなります。</p>

<pre class="code lang-python" data-lang="python" data-unlink>い = get_glyph(glyph_set, cmap, <span class="synConstant">'い'</span>)
recording_pen = RecordingPen()
い.draw(recording_pen)
<span class="synIdentifier">print</span>(recording_pen.value)
</pre>




<pre class="code lang-python" data-lang="python" data-unlink>[(<span class="synConstant">'moveTo'</span>, ((<span class="synConstant">226</span>, <span class="synConstant">696</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">130</span>, <span class="synConstant">698</span>),)),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">135</span>, <span class="synConstant">674</span>), (<span class="synConstant">136</span>, <span class="synConstant">633</span>), (<span class="synConstant">136</span>, <span class="synConstant">610</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">136</span>, <span class="synConstant">552</span>), (<span class="synConstant">137</span>, <span class="synConstant">432</span>), (<span class="synConstant">147</span>, <span class="synConstant">346</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">174</span>, <span class="synConstant">89</span>), (<span class="synConstant">264</span>, -<span class="synConstant">4</span>), (<span class="synConstant">357</span>, -<span class="synConstant">4</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">425</span>, -<span class="synConstant">4</span>), (<span class="synConstant">486</span>, <span class="synConstant">53</span>), (<span class="synConstant">545</span>, <span class="synConstant">221</span>))),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">482</span>, <span class="synConstant">293</span>),)),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">456</span>, <span class="synConstant">193</span>), (<span class="synConstant">410</span>, <span class="synConstant">91</span>), (<span class="synConstant">359</span>, <span class="synConstant">91</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">289</span>, <span class="synConstant">91</span>), (<span class="synConstant">241</span>, <span class="synConstant">200</span>), (<span class="synConstant">225</span>, <span class="synConstant">366</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">218</span>, <span class="synConstant">447</span>), (<span class="synConstant">217</span>, <span class="synConstant">538</span>), (<span class="synConstant">218</span>, <span class="synConstant">600</span>))),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">219</span>, <span class="synConstant">626</span>), (<span class="synConstant">222</span>, <span class="synConstant">672</span>), (<span class="synConstant">226</span>, <span class="synConstant">696</span>))),
 (<span class="synConstant">'closePath'</span>, ()),
 (<span class="synConstant">'moveTo'</span>, ((<span class="synConstant">742</span>, <span class="synConstant">669</span>),)),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">664</span>, <span class="synConstant">642</span>),)),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">758</span>, <span class="synConstant">526</span>), (<span class="synConstant">818</span>, <span class="synConstant">330</span>), (<span class="synConstant">835</span>, <span class="synConstant">152</span>))),
 (<span class="synConstant">'lineTo'</span>, ((<span class="synConstant">916</span>, <span class="synConstant">184</span>),)),
 (<span class="synConstant">'curveTo'</span>, ((<span class="synConstant">902</span>, <span class="synConstant">351</span>), (<span class="synConstant">831</span>, <span class="synConstant">554</span>), (<span class="synConstant">742</span>, <span class="synConstant">669</span>))),
 (<span class="synConstant">'closePath'</span>, ())]
</pre>


<p>曲線を中心とした、2つのパスで構成されています。</p>

<h3><code>SVGPathPen</code> を利用して<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>を作成する</h3>

<p>今度は応用として、<a href="https://github.com/fonttools/fonttools/blob/master/Lib/fontTools/pens/svgPathPen.py"><code>SVGPathPen</code></a> というペンを使ってみましょう。このペンは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>の<a href="http://defghi1977.html.xdomain.jp/tech/svgMemo/svgMemo_03.htm">パスデータ文字列</a>を組み立ててくれます。<code>SVGPathPen</code> のコンストラクタは引数に glyphSet をとりますので、最初の方で用意した <code>glyph_set</code> を渡します。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> fontTools.pens.svgPathPen <span class="synPreProc">import</span> SVGPathPen
svg_path_pen = SVGPathPen(glyph_set)
</pre>


<p>グリフ <code>L</code> をなぞった後、<code>getCommands()</code> メソッドでパスデータ文字列を取得します。</p>

<pre class="code lang-python" data-lang="python" data-unlink>L.draw(svg_path_pen)
<span class="synIdentifier">print</span>(svg_path_pen.getCommands())
</pre>




<pre class="code" data-lang="" data-unlink>M100 0H513V79H193V733H100Z</pre>


<p>パスデータ文字列が表示されました。左下の点 <code>100 0</code> からスタートし、水平線 <code>H</code> と垂直線 <code>V</code> でパスが構成されています。</p>

<p>以下のようにガワを手書きして、独立した<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>ファイルを作ります。</p>

<pre class="code lang-svg" data-lang="svg" data-unlink><span class="synIdentifier">&lt;svg </span><span class="synType">xmlns</span>=<span class="synConstant">&quot;http://www.w3.org/2000/svg&quot;</span><span class="synIdentifier"> </span><span class="synType">viewBox</span>=<span class="synConstant">&quot;0 0 1000 1000&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;path </span><span class="synType">d</span>=<span class="synConstant">&quot;M100 0H513V79H193V733H100Z&quot;</span><span class="synIdentifier">/&gt;</span>
<span class="synIdentifier">&lt;/svg&gt;</span>
</pre>


<p>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>ファイルをブラウザで表示してみると、こんな感じです。</p>

<p><a href="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L1.svg"><img src="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L1.svg"
style="height: 200px"></a></p>

<p>一応「L」のグリフが表示できました。が、上下逆さです。OpenType の座標系では y 軸が上方向に延びていますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a> では下方向に延びているため、そのままだと上下がひっくり返ってしまいます。<code>transform</code> 属性で上下を逆にし、<code>viewBox</code> 属性も調整しましょう。</p>

<pre class="code lang-svg" data-lang="svg" data-unlink><span class="synIdentifier">&lt;svg </span><span class="synType">xmlns</span>=<span class="synConstant">&quot;http://www.w3.org/2000/svg&quot;</span><span class="synIdentifier"> </span><span class="synType">viewBox</span>=<span class="synConstant">&quot;0 -1000 1000 1000&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;path </span><span class="synType">d</span>=<span class="synConstant">&quot;M100 0H513V79H193V733H100Z&quot;</span><span class="synIdentifier"> </span><span class="synType">transform</span>=<span class="synConstant">&quot;scale(1, -1)&quot;</span><span class="synIdentifier">/&gt;</span>
<span class="synIdentifier">&lt;/svg&gt;</span>
</pre>


<p><a href="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L2.svg"><img src="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L2.svg"
style="height: 200px"></a></p>

<p>これで正立しました。</p>

<p>最後に、もうちょっといい感じの<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>ファイルを生成する関数を定義してみます。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> textwrap <span class="synPreProc">import</span> dedent

<span class="synStatement">def</span> <span class="synIdentifier">save_as_svg</span>(font, char, output_path):
    <span class="synConstant">'''TTFont オブジェクトを受け取り、指定した文字のグリフを SVG として保存する'''</span>
    
    glyph_set = font.getGlyphSet()
    cmap = font.getBestCmap()
    
    <span class="synComment"># グリフのアウトラインを SVGPathPen でなぞる</span>
    glyph = get_glyph(glyph_set, cmap, char)
    svg_path_pen = SVGPathPen(glyph_set)
    glyph.draw(svg_path_pen)

    <span class="synComment"># メトリクスを取得</span>
    ascender = font[<span class="synConstant">'OS/2'</span>].sTypoAscender
    descender = font[<span class="synConstant">'OS/2'</span>].sTypoDescender
    width = glyph.width
    height = ascender - descender
    
    content = dedent(f<span class="synConstant">'''</span><span class="synSpecial">\</span>
<span class="synConstant">        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 {-ascender} {width} {height}&quot;&gt;</span>
<span class="synConstant">            &lt;g transform=&quot;scale(1, -1)&quot;&gt;</span>
<span class="synConstant">                &lt;!-- ボディの枠 --&gt;</span>
<span class="synConstant">                &lt;rect x=&quot;0&quot; y=&quot;{descender}&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;</span>
<span class="synConstant">                    stroke=&quot;cyan&quot; fill=&quot;none&quot;/&gt;</span>
<span class="synConstant">                &lt;!-- グリフ座標系の原点 --&gt;</span>
<span class="synConstant">                &lt;circle cx=&quot;0&quot; cy=&quot;0&quot; r=&quot;5&quot; fill=&quot;blue&quot;/&gt;</span>
<span class="synConstant">                &lt;!-- グリフのアウトライン --&gt;</span>
<span class="synConstant">                &lt;path d=&quot;{svg_path_pen.getCommands()}&quot;/&gt;</span>
<span class="synConstant">            &lt;/g&gt;</span>
<span class="synConstant">        &lt;/svg&gt;</span>
<span class="synConstant">    '''</span>)
    
    <span class="synStatement">with</span> <span class="synIdentifier">open</span>(output_path, <span class="synConstant">'w'</span>) <span class="synStatement">as</span> f:
        f.write(content)
</pre>


<p>"L" と "い" で実行してみます。</p>

<pre class="code lang-python" data-lang="python" data-unlink>save_as_svg(font, <span class="synConstant">'L'</span>, <span class="synConstant">'L.svg'</span>)
save_as_svg(font, <span class="synConstant">'い'</span>, <span class="synConstant">'い.svg'</span>)
</pre>


<p>こんな感じの <a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a> ファイルができました。めでたしめでたし。</p>

<p><a href="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L.svg"><img src="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/L.svg"
style="height: 200px"></a></p>

<p><a href="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/%E3%81%84.svg"><img src="https://cdn.rawgit.com/mashabow/font-pen-samples/d8994e93/%E3%81%84.svg"
style="height: 200px"></a></p>

<h3>おわりに</h3>

<p>この記事では pen protocol の概要を説明し、ペンを使ってアウトラインを取得したり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a> として表示する方法について見てきました。一方、今回触れなかった話題としては、</p>

<ul>
<li>pen protocol の詳細とペンの定義方法</li>
<li>グリフへの書き込み</li>
<li>ペンを利用したアウトラインの加工</li>
<li>さまざまなペンの紹介</li>
</ul>


<p>などがあります。これらに関しては、またいずれ気が向いたときに記事を書くかもしれません。</p>

<p>なお、今回のファイルは以下の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>にまとめておきました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C9%A4%A6%A4%BE%A4%B4%CD%F8%CD%D1%A4%AF%A4%C0%A4%B5%A4%A4%A1%A3">どうぞご利用ください。</a></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmashabow%2Ffont-pen-samples" title="mashabow/font-pen-samples" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/mashabow/font-pen-samples">github.com</a></cite></p>
<div class="footnote">
<p class="footnote"><a href="#fn-cc54d3b8" name="f-cc54d3b8" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">若干紛らわしいのですが、segment pen protocol は単に pen protocol と呼ばれることがあります。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamoid の使い方【global_secondary_index 編】]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/26/195509</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/26/195509"/>
        <updated>2017-11-26T10:55:09.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">前回</a>に引き続き、 Dynamoid 第3弾です ✌︎('ω')✌︎</p>

<p>Rails で DynamoDB を利用する際の ORM として <code>dynamoid</code> があります。
今回は <code>dynamoid</code> から Global Secondary Index (GSI) を利用する方法について紹介します。</p>

<ul class="table-of-contents">
    <li><a href="#Global-Secondary-Index-GSI-ってなんぞ">Global Secondary Index (GSI) ってなんぞ</a><ul>
            <li><a href="#今回も名称の整理をしておきます">今回も名称の整理をしておきます</a></li>
            <li><a href="#GSI-は検索のためのインデックス">GSI は検索のためのインデックス</a></li>
            <li><a href="#Local-Secondary-Index-LSI-もあるやで">Local Secondary Index (LSI) もあるやで</a></li>
            <li><a href="#どういう用途で便利なのか">どういう用途で便利なのか</a></li>
        </ul>
    </li>
    <li><a href="#Dynamoid-での利用方法">Dynamoid での利用方法</a><ul>
            <li><a href="#テーブル定義">テーブル定義</a><ul>
                    <li><a href="#where-を使えば-GSI-を使って自動的にクエリで検索してくれる">#where を使えば GSI を使って自動的にクエリで検索してくれる</a></li>
                    <li><a href="#昇順降順を入れ替えたい場合">昇順・降順を入れ替えたい場合</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#まとめ">まとめ</a></li>
</ul>

<p><code>dynamoid</code> の導入方法については以前書いたこちらの記事を参考にしてみて下さい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.feedforce.jp%2Fdynamodb-setup-on-rails.html" title="DynamoDB を Rails で使えるようにするためのあれこれ | feedforce Engineers&#39; blog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tech.feedforce.jp/dynamodb-setup-on-rails.html">tech.feedforce.jp</a></cite></p>

<h1 id="Global-Secondary-Index-GSI-ってなんぞ">Global Secondary Index (GSI) ってなんぞ</h1>

<h2 id="今回も名称の整理をしておきます">今回も名称の整理をしておきます</h2>

<p>文中に Hash Key やら Range Key という名称が出てきますが、現在は名称が異なります。
しかし、 <code>dyanmoid</code> では相変わらず旧名称のまま (<code>hash_key</code>, <code>range_key</code>) でパラメータを指定するので、今回も最初に対応表を記載しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 旧名称 </th>
<th style="text-align:center;"> 現名称 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Hash Key </td>
<td style="text-align:center;"> Partition Key </td>
</tr>
<tr>
<td style="text-align:center;"> Range Key </td>
<td style="text-align:center;"> Sort Key </td>
</tr>
</tbody>
</table>


<h2 id="GSI-は検索のためのインデックス">GSI は検索のためのインデックス</h2>

<p>DynamoDB にはプライマリキーの指定方法として、単一の Partition Key を使用する方法と、Partition Key と Sort Key を組み合わせて使用する方法があります。
これについては前回の【range 編】の記事でも触れました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F04%2F235323" title="Dynamoid の使い方【range 編】 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">developer.feedforce.jp</a></cite></p>

<p>プライマリキーに指定されたカラムに対してであれば、レコードの抽出や範囲検索などが実行可能となる訳ですが、プライマリキーに指定されていないカラムに対しては検索が実行できず、テーブルのフルスキャンを実行することになってしまい非効率です。そこで、別のカラムに対しても検索を行いたい場合は GSI を設定して、フルスキャンすることなく効率的にデータを抽出できるようにします。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=47" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<p>GSI もプライマリキーの指定と同様に、単一の Partition Key のみで指定することも、 Partition Key と  Sort Key の組み合わせで指定することも可能です。
ただし、 <strong>プライマリキーにはユニーク制約が設定されますが、 GSI にはユニーク制約が存在しない</strong> ので、その点には注意が必要です。</p>

<h2 id="Local-Secondary-Index-LSI-もあるやで">Local Secondary Index (LSI) もあるやで</h2>

<p>LSI の Partition Key はプライマリキーと共通です。Sort Key の部分だけ別に設定したい場合に使用します。その点を除けば GSI とよく似ていますが、こちらはテーブルの作成時にしか定義することができないようです。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=46" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<p>なお、LSI も<code>dynamoid</code> から指定することは可能 (<code>local_secondary_index</code> を使用する) ですが、本稿では触れません。</p>

<h2 id="どういう用途で便利なのか">どういう用途で便利なのか</h2>

<p>あまり複雑なテーブル設計が推奨されない DynamoDB ですが、簡単なテーブル間の関連付けを行いたいシーンが出てきます。親テーブルの ID を結合キーとして子テーブルに設定したい場合などに GSI は便利です。
以下に User Table と User Comment Table の例を示します。User Comment Table には親テーブルである User Table の ID が GSI の Partition Key として設定してあります。また、コメントの投稿日時 (Posted at) を GSI の Sort Key として設定しています。これで User 毎に投稿日時順にソートしたコメントを取得することができるようになります。</p>

<p><strong>User Table</strong></p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ID </th>
<th> name </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 1 </td>
<td> John </td>
</tr>
<tr>
<td style="text-align:center;"> 2 </td>
<td> Marry </td>
</tr>
<tr>
<td style="text-align:center;"> 3 </td>
<td> Taro </td>
</tr>
</tbody>
</table>


<p><strong>User Comment Table</strong></p>

<table>
<thead>
<tr>
<th style="text-align:center;"> ID (Primary Partition Key) </th>
<th style="text-align:center;"> User ID (GSI Partition Key) </th>
<th> Posted at (GSI Sort Key) </th>
<th style="text-align:center;"> Comment </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 1 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509529916 </td>
<td style="text-align:center;"> Hello </td>
</tr>
<tr>
<td style="text-align:center;"> 2 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509530052 </td>
<td style="text-align:center;"> I am John </td>
</tr>
<tr>
<td style="text-align:center;"> 3 </td>
<td style="text-align:center;"> 1 </td>
<td> 1509530085 </td>
<td style="text-align:center;"> How do you do? </td>
</tr>
<tr>
<td style="text-align:center;"> 4 </td>
<td style="text-align:center;"> 2 </td>
<td> 1509523925 </td>
<td style="text-align:center;"> Thanks a lot! </td>
</tr>
<tr>
<td style="text-align:center;"> 5 </td>
<td style="text-align:center;"> 3 </td>
<td> 1509527628 </td>
<td style="text-align:center;"> こんにちは </td>
</tr>
<tr>
<td style="text-align:center;"> 6 </td>
<td style="text-align:center;"> 3 </td>
<td> 1509527101 </td>
<td style="text-align:center;"> どうも </td>
</tr>
</tbody>
</table>


<p>ちなみに、プライマリキーと GSI を逆に設定してもほぼ成立するのですが、前述したように GSI にはユニーク制約が存在しないので、User Comment Table では ID をプライマリキーとして、重複が生じないように設定してあります。</p>

<h1 id="Dynamoid-での利用方法">Dynamoid での利用方法</h1>

<h2 id="テーブル定義">テーブル定義</h2>

<p>ここからは前述の User Table と User Comment Table を <code>dynamoid</code> から利用する例を示していきます。</p>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :id

  field :name, :string

  # 現在のユーザーに紐付くコメントを作成する
  def create_comment!(attributes = {})
    attributes[:user_id] = id
    UserComment.new(attributes).tap(&amp;:save!)
  end

  # 現在のユーザーのコメント一覧を取得する
  def comments
    UserComment.where(user_id: id)
  end

  # 現在のユーザーの最終コメントを取得する
  def latest_comment
    comments.scan_index_forward(false).scan_limit(1).all.first
  end
end</pre>




<pre class="code" data-lang="" data-unlink>class UserComment
  include Dynamoid::Document

  table name: :user_comments, key: :id

  field :user_id, :string
  field :posted_at, :datetime

  global_secondary_index hash_key: :user_id, 
                         range_key: :posted_at, 
                         projected_attributes: :all
end</pre>


<p>※ ちなみに <code>dynamoid</code> には <code>has_many</code> を利用して関連テーブルを実現する方法があるのですが、結合キーを親テーブルに持つ設計になるのがあまり好ましくなかったので、自前で実装しています。</p>

<p>いくつか注意する点があって、 <code>global_secondary_index</code> で使用する <code>hash_key</code> と <code>range_key</code> は <code>field</code> で定義されている必要があります。
また、 <code>projected_attributes: :all</code> というオプションをつけないと後述の <code>#where</code> でインデックスを利用した検索が行われません。一旦これが無い状態でリリースとしてしまうと、射影される属性が限定された GSI が作成されてしまい、実行時にエラーになります。その場合は AWS マネジメントコンソールから直接 GSI を作り直す羽目になりますのでご注意ください 🙏</p>

<pre class="code" data-lang="" data-unlink>One or more parameter values were invalid: Select type ALL_ATTRIBUTES is not supported for global secondary index</pre>


<h3 id="where-を使えば-GSI-を使って自動的にクエリで検索してくれる"><code>#where</code> を使えば GSI を使って自動的にクエリで検索してくれる</h3>

<p><code>#comments</code> というメソッドの中で <code>#where</code> を使用した検索が登場しますが、 GSI が設定されていれば特別な記述がなくとも自動的にクエリ検索が行われます。</p>

<pre class="code" data-lang="" data-unlink>UserComment.where(user_id: id)
# =&gt; [#&lt;UserComment:0x00007f44c86183e8&gt;, ...]</pre>


<p>前述の通り <code>projected_attributes: :all</code> が指定されていないとフルスキャンされてしまうのでご注意ください。</p>

<h3 id="昇順降順を入れ替えたい場合">昇順・降順を入れ替えたい場合</h3>

<p><code>#latest_comment</code> というメソッド内で使用していますが、 <code>#scan_index_forward(false)</code> と指定すると降順でソートされた状態で結果が返ってきます。未指定の場合は昇順でソートされます。
また、 <code>#scan_limit(n)</code> と指定することで、先頭から <code>n</code> 件の結果に限定して取得が可能です。<code>#latest_comment</code> ではこれらを組み合わせて最終のコメントを取得しています。</p>

<h1 id="まとめ">まとめ</h1>

<p>本稿では GSI と LSI とプライマリキーの違い、具体的な利用用途を紹介しました。<a href="http://developer.feedforce.jp/entry/2017/11/04/235323">前回の記事</a>でも触れましたが、 <code>dynamoid</code> は初回実行時にテーブルや GSI が存在していないと作成する、という挙動になるため、後で設計を変えたくなった場合に GSI や最悪テーブルを作り直す羽目になります。特に初めて利用する場合は設計の勘所を掴むのが難しいので、リリース前に入念に設計を見直すことをお勧めします。その点では RDS 以上に慎重な設計が求められるように感じています。
色々と気を付けなければならない点も多いですが、並列動作性は非常に高いので、利用したくなるシーンが必ず出てくると思います。その際に本稿が少しでもお役に立てば幸いです 🙏</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go で Datadog の Alfred Workflow を作った]]></title>
        <id>https://blog.tsub.me/post/create-alfred-workflow/</id>
        <link href="https://blog.tsub.me/post/create-alfred-workflow/"/>
        <updated>2017-11-26T07:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>最近会社の同僚が <a href="http://developer.feedforce.jp/entry/2017/11/13/085404">Alfred Workflow を Go で書いたという LT を発表していて</a>面白そうだったので、自分も書いてみました。</p>

<p>以下のリポジトリで配布しています。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/alfred-datadog-workflow">tsub/alfred-datadog-workflow: A Alfred workflow to open Datadog pages</a></p>

<p>Workflow のダウンロードリンクは<a href="https://github.com/tsub/alfred-datadog-workflow/releases">こちら</a>から最新バージョンのものをどうぞ。</p>

<p><img src="https://gyazo.com/378dfd74e772c2d48776c5edd8ce6833.png" alt="image" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode ファイル検索の除外設定]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/24/195644</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/24/195644"/>
        <updated>2017-11-24T10:56:44.000Z</updated>
        <summary type="html"><![CDATA[<div style="border-radius: 5px; padding:1.3rem; margin-bottom: 2.3rem; background: #e0efe0;">
<strong>2019/10/15 追記</strong> 現在（Version 1.39.1）の VSCode では詳細検索オプションの内容が異なっております。詳しくは <a href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" >公式ドキュメントをご参照ください</a>。本文記事中の VS Code バージョンはもっと古いです。
</div>


<p><a href="https://ac-pocketcamp.com/ja-JP/site">ポケ森</a> ⛺キャンパーレベル
 18 の引きこもり <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn.profile-image.st-hatena.com/users/tmd45/profile.png" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a>です。鉱石掘りのお手伝いはお気軽にお申し付けください。</p>

<p>VSCode のファイル検索の恒久的な除外条件は「基本設定」から行います。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synError">// 検索でファイルとフォルダーを除外するために glob パターンを構成します。</span>
<span class="synError">// files.exclude 設定からすべての glob パターンを継承します。</span>
&quot;<span class="synStatement">search.exclude</span>&quot;: <span class="synSpecial">{</span>
  &quot;<span class="synStatement">**/node_modules</span>&quot;: <span class="synConstant">true</span>,
  &quot;<span class="synStatement">**/bower_components</span>&quot;: <span class="synConstant">true</span>
<span class="synSpecial">}</span>,

<span class="synError">// 新しいワークスペースでテキストを検索するときに、</span>
<span class="synError">// 既定で .gitignore ファイルと .ignore ファイルを使用するかどうかを制御します。</span>
&quot;<span class="synStatement">search.useIgnoreFilesByDefault</span>&quot;: <span class="synConstant">false</span>,
</pre>


<p>この設定をすると <code>Cmd + P</code> によるファイル移動の候補から、指定したものを除外することができます。</p>

<p>後者の <code>.gitignore</code> <code>.ignore</code> による除外を有効にしておけば、<code>search.exclude</code> を個別に書かなくてもいい感じに除外されてハッピーです。</p>

<p>この設定を Explorer の「検索」 <code>Cmd + Shift + F</code> でも有効にするには「詳細検索の切り替え」（検索ボックス右下の <i class="fa fa-ellipsis-h"></i> マーク）で詳細検索オプションを開き「無視設定ファイルを使用します」を ON にします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171124/20171124195104.png" alt="f:id:tmd45:20171124195104p:plain:w300" title="f:id:tmd45:20171124195104p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>このボタンに気づくまでに時間がかかってしまいました…( ´・ω・`)</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode の Multi-root workspace]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/14/121634</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/14/121634"/>
        <updated>2017-11-14T03:16:34.000Z</updated>
        <summary type="html"><![CDATA[<p>元 Vim 使いの <a href="http://blog.hatena.ne.jp/tmd45/" class="hatena-id-icon"><img src="https://cdn1.www.st-hatena.com/users/tm/tmd45/profile.gif" width="16" height="16" alt="" class="hatena-id-icon">id:tmd45</a> です。<a href="http://blog.tmd45.jp/entry/2017/08/05/132028">今年諸事情で VSCode に乗り換えた</a>ばかり。</p>

<p>Version 1.18.0 の新機能 Multi-root workspace が仕事で便利というだけのお話。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_18" title="Visual Studio Code October 2017" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://code.visualstudio.com/updates/v1_18">code.visualstudio.com</a></cite></p>

<p>関わってるプロダクトの関連するリポジトリがたくさんあるので（バックエンド、フロント、インフラ、その他…）まとめられるのはありがたい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171114/20171114120408.png" alt="f:id:tmd45:20171114120408p:plain:h230" title="f:id:tmd45:20171114120408p:plain:h230" class="hatena-fotolife" style="height:230px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20171114/20171114120955.png" alt="f:id:tmd45:20171114120955p:plain:h230" title="f:id:tmd45:20171114120955p:plain:h230" class="hatena-fotolife" style="height:230px" itemprop="image"></span></p>

<p>git 関連の拡張をいろいろ入れてるので、どこまで標準機能か分からなくなってますが、このソース管理タブもいい感じですね。</p>

<p>最近さわってないリポジトリが一目瞭然だずぇ…</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2017/11/16 に訂正を追記しました】 社内 LT 大会で「ここがつらいよ ECS」というタイトルで発表しました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/13/183623</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/13/183623"/>
        <updated>2017-11-13T09:36:23.000Z</updated>
        <summary type="html"><![CDATA[<h2>[追記] この記事の内容について訂正</h2>

<p>この記事内、及び Speaker Deck に投稿したスライドの中で誤っていた箇所があったため、訂正致します。</p>

<p>「ECS Optimized AMI では ecs-agent のバージョンが固定されない」という内容ですが、そういった問題はありませんでした。</p>

<p>AWS の方から直接アドバイスを頂いたところ、弊社が使用していた User Data のスクリプト内で <code>$ yum update</code> を実行していたことが原因となっていました。
<code>$ yum update</code> によりインスタンスを新規に立てた際に常に最新の ecs-agent や Docker がインストールされていました。</p>

<p>そのため、ECS Optimized AMI によってインストールされる ecs-agent と Docker のバージョンは以下のドキュメントで提示されているバージョンが常にインストールされることになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdocs.aws.amazon.com%2FAmazonECS%2Flatest%2Fdeveloperguide%2Fcontainer_agent_versions.html" title="Amazon ECS Container Agent Versions - Amazon EC2 Container Service" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_agent_versions.html">docs.aws.amazon.com</a></cite></p>

<p>スライド中でも紹介しているように、一番困っていた問題が解消されたため AWS のサポートの方には非常に感謝をしております。</p>

<p>誤った情報を公開してしまい、申し訳ありませんでした。</p>

<hr />

<p>こんにちは、バックエンドエンジニアの tsub (<a href="http://blog.hatena.ne.jp/tsub511/" class="hatena-id-icon"><img src="https://cdn1.www.st-hatena.com/users/ts/tsub511/profile.gif" width="16" height="16" alt="" class="hatena-id-icon">id:tsub511</a>) です。</p>

<p>先日の社内 LT 大会にて、「ここがつらいよ ECS」というタイトルで発表してきました。</p>

<p>社内 LT 大会の記事についてはこちらをご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F11%2F205600" title="FFLT開催しました！ - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/11/205600">developer.feedforce.jp</a></cite></p>

<p>私が発表したスライドはこちらです。</p>

<script async class="speakerdeck-embed" data-id="4b214465b598443dbb55cfa35cd56aa3" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>せっかくですので、スライドにて紹介している「第一位 ecs-agent と Docker のバージョンが勝手に上がる」についてもう少し詳しく解説をしたいと思います。</p>

<h2>ECS を用いたバッチシステムの運用について</h2>

<p>弊社では Amazon ECS を用いたバッチシステムを運用しています。</p>

<p>Amazon ECS を用いたバッチシステムについての詳細は以前弊社の新卒エンジニアが書いてくれたので、こちらの記事をご覧ください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Ffeedforce%2Fpost_articles%2F59811" title="新卒１年目がバッチサーバーにECSを使ってDockerを導入した話 | feedforce Story" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.wantedly.com/companies/feedforce/post_articles/59811">www.wantedly.com</a></cite></p>

<h2>ecs-agent について</h2>

<p><a href="https://github.com/aws/amazon-ecs-agent">ecs-agent</a> とは、Amazon ECS にインスタンスを認識させるために動かす必要のあるエージェントです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Faws%2Famazon-ecs-agent" title="aws/amazon-ecs-agent" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/aws/amazon-ecs-agent">github.com</a></cite></p>

<p><a href="https://hub.docker.com/r/amazon/amazon-ecs-agent/">Docker イメージが配布されていて</a>、通常はコンテナとして立ち上げます。</p>

<p><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">ECS Optimized AMI</a> を利用していれば、インスタンスを起動したタイミングで勝手に立ち上げてくれるので、特に意識せずとも ECS を使えると思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdocs.aws.amazon.com%2FAmazonECS%2Flatest%2Fdeveloperguide%2Fecs-optimized_AMI.html" title="Amazon ECS-Optimized AMI - Amazon EC2 Container Service" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">docs.aws.amazon.com</a></cite></p>

<p>ただし、ECS においてはこの ecs-agent がコンテナの配置、監視などを行っているため、かなり重要な役割となりますので、無視してはいけない存在です。</p>

<h2>ecs-agent のバグによりいくつかのタスクが起動しなかった</h2>

<p>以前、以下の Issue で取り上げられている ecs-agent v1.14.2 のバグにより ECS でいくつかのタスクが起動しなくなっていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Faws%2Famazon-ecs-agent%2Fissues%2F833" title="1.14.2 causing container instances to grind to a halt · Issue #833 · aws/amazon-ecs-agent" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/aws/amazon-ecs-agent/issues/833">github.com</a></cite></p>

<p>2017/06/08 に ecs-agent を全コンテナインスタンスで v1.14.2 にアップデートしたことにより、06/08 から 06/13 にかけて 6 つのタスクが PENDING 状態のまま止まっていてインシデントが起きてしまいました。</p>

<p>この時は、上記 Issue でも書かれているように、一旦 <code>amazon/amazon-ecs-agent:latest</code> イメージにバグが発生する以前の v1.14.1 を Push し直してくれたことで、バージョンをロールバックすることはできました。</p>

<p>ただ、このような問題を再度起こさないためにも ecs-agent のバージョンは固定したいところですが、固定はできないという問題がここで発覚しました。</p>

<h2>ECS Optimized AMI では ecs-agent のバージョンが固定されない</h2>

<p>ECS Optimized AMI を使っていれば ecs-agent を自動的に立ち上げてくれますが、これが少々曲者です。</p>

<p>ECS Optimized AMI を使ってインスタンスを立ち上げた時、起動する ecs-agent のバージョンは常に最新のものが使われるのです。</p>

<p>しかも、AMI の中に ecs-agent がパッケージングされているかと思ったら、AMI をアップデートせずとも、インスタンスを新しく起動したら最新の ecs-agent が自動的に使用されます。</p>

<p>更に言うと、この ecs-agent のバージョンをユーザーが固定することはできず、最新バージョンしか選択肢がありません。</p>

<p>そのため、上述したようなバグが ecs-agent に含まれてしまった場合に回避不可能になります。</p>

<p>新たにインスタンスを立ち上げず、手動で ecs-agent をアップデートしなければ今動いてるもののバージョンが変わることはありませんが、オートスケーリングの設定をしていた場合、スケールアウトしたらそのインスタンスからは最新の ecs-agent が使われてしまう、という状況です。</p>

<p>この回避不可能な仕様に日々悩まされています。</p>

<p>ちなみに、Docker のバージョンも ecs-agent と同じようにバージョンが固定されていません。</p>

<h2>どう運用しているか</h2>

<p>では、弊社ではどう運用しているかというと、一部のコンテナインスタンスにカナリアリリース的にアップデートし、しばらく最新バージョンの ecs-agent をクラスタの中に紛れ込ませて稼働させておきます。</p>

<p>例えば 10 台のコンテナインスタンスを動かしていたとして、その内の 2, 3 台だけ ecs-agent をアップデートします。</p>

<p>アップデート自体は AWS コンソールから可能ですので簡単です。</p>

<p>数台だけアップデートした後 1, 2 週間ほど経ってから <a href="https://github.com/aws/amazon-ecs-agent/issues">ecs-agent の Issue</a> を確認して、特に大きな問題が起きてなさそうなら全台アップデートする、というような運用をしています。</p>

<p>これで今のところ ecs-agent のバグを踏む確率は多少減ったかな、という印象です。</p>

<h2>まとめ</h2>

<ul>
<li>ecs-agent のアップデートによりバグが入り込む可能性がある</li>
<li>ECS Optimized AMI における ecs-agent と Docker のバージョン固定はできず、新しいインスタンスを起動すると最新が使われる</li>
<li>一部のコンテナインスタンスだけアップデートし、しばらく経って問題なければ全台アップデートする、という運用をしている</li>
</ul>


<p>というわけで、今後も ECS による運用を続けていきますが、何か良いソリューションがあれば教えていただきたい次第です。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverlessconf Tokyo 2017 に参加してきました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/05/111553</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/05/111553"/>
        <updated>2017-11-05T02:15:53.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>先日のおとうふ先生の記事にもあったように、<a href="http://tokyo.serverlessconf.io/">Serverlessconf Tokyo 2017</a> というイベントが都内で開催されておりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F02%2F221452" title="Serverlessconf Tokyo 2017 で IBM Cloud Functions のアツい話を聞いてきた - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/02/221452">developer.feedforce.jp</a></cite></p>

<p>11/3(金) のメインカンファレンスには弊社からも5名ほど参加しており、みんな大学生の頃の100倍くらい意識高く勉強して参りました ✌︎('ω')✌︎
お昼ご飯に弁当出たのが嬉しかったです ✌︎('ω')✌︎
あと、馴染みあるメンツでカンファレンス行くと、終わってから飲みに行けるのも良いですね ✌︎('ω')✌︎</p>

<p>さて、今回の記事では当日の発表内容についていくつかダイジェストと感想を書いていきたいと思います。</p>

<p>スライドはこちらのサイトでまとめられているようで大変助かります 🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.n-novice.com%2Fentry%2F2017%2F11%2F03%2F240000" title="Serverlessconf Tokyo 2017 公開資料 - にわかエンジニア好きなことを書く備忘録" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.n-novice.com/entry/2017/11/03/240000">www.n-novice.com</a></cite></p>

<h1>サーバレスアーキテクチャによる時系列データベースの構築と監視</h1>

<script async class="speakerdeck-embed" data-id="c1e5e041140945188ca5b0de4ee32f34" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Mackerel という監視サービスをどのように監視・管理しているのか、というお話</li>
<li>時系列データベースの構成

<ul>
<li>Kinesis Streams へ保存</li>
<li>Lambda で Redis へ保存</li>
<li>Redis に一定件数溜まったら DynamoDB へ保存

<ul>
<li>一度 Redis を挟んでいるのは書き込みコストを抑えるため</li>
</ul>
</li>
<li>DyanmoDB の TTL を超えるデータは S3 へ保存</li>
</ul>
</li>
<li>データの参照性に合わせて書き込み先を変更しているのはナルホド</li>
<li>監視についてまとめ

<ul>
<li>メトリックを可視化して眺めよう</li>
<li>監視の基礎は平常状態を知ること</li>
<li>系全体の可用性を監視しよう</li>
</ul>
</li>
</ul>


<p>Serverless を使った具体的な設計例として、とても参考になります。
時系列データベースの実装として、複数のストレージを上手く組み合わせて設計されているのは色々なシーンで応用できる設計例ではないでしょうか。</p>

<h1>Java チームが選択したTypeScript による AWS Lambda 開発</h1>

<p><a href="http://riotz.works/slides/?2017-serverless-conf">Slides | Riotz Works</a></p>

<ul>
<li>固定 IP を実現するには VPC lambda が必要

<ul>
<li>VPC の lambda はすごく遅い</li>
<li>固定 IP に対する需要は現在も一定数あるようなので。。。（日本では特に）</li>
</ul>
</li>
<li>マイクロ化が過剰で複雑になった

<ul>
<li>どの程度の粒度でサービスを切り分けていくか、というのは相変わらずセンスが問われるな、という印象</li>
</ul>
</li>
<li>言語毎に実行速度がずいぶん違う

<ul>
<li>一度 Java で実装して、スピードが出ずに TypeScript で実装し直した

<ul>
<li>Java は初回実行時はオーバーヘッドが大きい</li>
<li>バッチ処理のように計算量が多い処理であれば Java の方が速いようです</li>
<li>AWS Lambdaの処理性能を言語毎に測ってみた

<ul>
<li><a href="http://acro-engineer.hatenablog.com/entry/2016/08/02/120000">http://acro-engineer.hatenablog.com/entry/2016/08/02/120000</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>Serverlessの世界に特別なことなんて何もなかった</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fslideship.com%2Fusers%2F%40marcy-terui%2Fpresentations%2F2017%2F11%2F5vUYExsSUrPbyjyjKA7J99%2F" title="The mind of Serverless as a Software - Serverlessの世界に特別なことなんて何もなかった -" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://slideship.com/users/@marcy-terui/presentations/2017/11/5vUYExsSUrPbyjyjKA7J99/">slideship.com</a></cite></p>

<ul>
<li>Serverless でよくある課題と解決

<ul>
<li>Functionの適切な分割・統合</li>
<li>Functionやサービス間のデータの受け渡し</li>
<li>外部サービスの呼び出しとエラーハンドリング</li>
<li>テスト</li>
</ul>
</li>
<li>スライドに色々な Tips が詳しく書かれているので一読すると吉

<ul>
<li>ただ、紹介されている方法だと Lambda Function の粒度がかなり細かくなるので、その辺の管理は大丈夫なのか気になりました</li>
<li>マイクロ化しすぎ問題とかは大丈夫でしょうか？</li>
</ul>
</li>
<li>どういうサービスが Serverless に向いているのか、という話も出てくるので参考になります

<ul>
<li>個人的には特性を押さえた上で、従来の Rails のようなアプリケーションと Serverless をハイブリッドに組み合わせて使うのが良いと考えています</li>
</ul>
</li>
</ul>


<h1>Serverlessとか言う前に知ってほしいDBのこと</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fslideship.com%2Fusers%2F%40marcy-terui%2Fpresentations%2F2017%2F11%2FNV8cP63mxs1tLw4qkct7Xd%2F" title="Serverlessとか言う前に知ってほしいDBのこと" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://slideship.com/users/@marcy-terui/presentations/2017/11/NV8cP63mxs1tLw4qkct7Xd/">slideship.com</a></cite></p>

<ul>
<li>一個前のと同じ登壇者の方

<ul>
<li>こちらは DB についての tips</li>
<li>いい感じに煽られていたので、来週弊社で開催される <a href="http://developer.feedforce.jp/entry/2017/11/02/190000">LT大会</a> でもこんな感じのノリを期待しています ✌︎('ω')✌︎

<ul>
<li><a href="http://developer.feedforce.jp/entry/2017/11/02/190000">&#x793E;&#x5185;LT&#x5927;&#x4F1A;&#x6E96;&#x5099;&#x4E2D; - Feedforce Developer Blog</a></li>
</ul>
</li>
</ul>
</li>
<li>非同期で並列数を制限すれば RDS を Lambda から利用しても問題ない

<ul>
<li>同時接続数が爆発しないように調整して使えば OK

<ul>
<li>Lambda から RDS を使ってはいけない、というのがセオリーだったので、使えると言い切る人がいたのはインパクトあった</li>
<li>まあ確かに。例えば AWS Aurora の db.r3.large だと 最大接続数が 1,000 ある

<ul>
<li><a href="http://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.MaxConnections">http://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.MaxConnections</a></li>
</ul>
</li>
<li>同時に 1,000 を超える Lambda が実行されなければ理屈の上では大丈夫なはず</li>
<li>用法用量を守って正しくお使いください、というやつか。。</li>
</ul>
</li>
</ul>
</li>
<li>DynamoDB でフルスキャンしたら負け

<ul>
<li>この辺は最近自分でも勉強していたので再確認しながら聞いていました（宣伝）</li>
</ul>
</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2017%2F11%2F04%2F235323" title="Dynamoid の使い方【range 編】 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://developer.feedforce.jp/entry/2017/11/04/235323">developer.feedforce.jp</a></cite></p>

<h1>真のサーバレスアーキテクトとサーバレス時代のゲーム開発・運用</h1>

<script async class="speakerdeck-embed" data-id="100ed8972466451a8fab9450e51bb0c6" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>他の発表と被ってしまったので、当日の講演は見られなかったのですが、ブログの方を見たらとても興味深い内容だったのでご紹介しておきます🙏</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fgs2.hatenablog.com%2Fentry%2F2017%2F11%2F04%2F013215" title="Serverlessconf Tokyo 2017 に登壇しました。そのほか雑感 - GS2 Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://gs2.hatenablog.com/entry/2017/11/04/013215">gs2.hatenablog.com</a></cite></p>

<blockquote><p>実は、私もSaaSはサーバレスなのか？という事に対しては、ちょっと思うところがあります。
私はフルマネージドサービスはサーバレスだと思いますが、マネージドサービスはサーバレスではない。と思っているためです。
また、別の言い方をすると、スケールに限界があるモノはサーバレスではない。と思っています。
つまり、使用方法さえ間違えなければ《勝手に》《無限に》スケールするフルマネージドサービスこそがサーバレス。と言えるのではないか。と思っています。</p></blockquote>

<p>SaaS の運用・開発してる人だと結構重要なテーマなのではないか、と思います。
SaaS なんだからリクエストどんだけ送っても向こう側で良きに計らってくれるやろ。そう思ってた時期が俺にもありました 😇
とは言え、SaaS 利用者からそう見えるようなサービスにしたい、という思いはあります。SaaS 利用者としても SaaS の裏側のことは一切考えずに利用したいと思うので。。
弊社の <a href="https://socialplus.jp/">ソーシャル PLUS</a> も SaaS ですが、利用して頂いているサイトがイベントなどでアクセスが急騰するケースがありますので、開発・運用ではそういう点に気を遣っています。</p>

<ul>
<li>コールドスタート対策

<ul>
<li>コールドスタートとは

<ul>
<li>Lambda は初回呼び出し時やしばらく呼ばれなかった後に呼ばれたときは response time が長くなる</li>
</ul>
</li>
<li>1 つの Lambda Function に全ロジックを入れる

<ul>
<li>API Gateway のエンドポイント毎にどのロジックを実行するかパラメータで渡している</li>
<li>コール比率の低いエンドポイントでもコールドスタートを回避できる</li>
</ul>
</li>
<li>パラメータで動作が変わる

<ul>
<li>Rails の Routing のようなものと佐藤は解釈しました</li>
</ul>
</li>
<li>一定間隔で Lambda を起こすように Invoke させる方法もあるが、個人的には Routing やらせる方式の方が良いのではないか、という気がする

<ul>
<li>Lambda Function が大量に作られてしまう（マイクロ化しすぎ問題）と管理が難しくなるのではないか、という思いもあって</li>
<li>この方法は実際に試してみたいです</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>所感</h1>

<p>Serverless に限ったことではありませんが、近年登場する新技術はトレードオフな側面が強いように感じています。
一昔前は今までは解の無かった技術的課題を解決する形で新しい技術が登場する、というケースが多かったのではないでしょうか？
対して今は、既存の技術でもできなくはないけど、特定のケースで困るから、それを解決する新しい技術が登場する、というケースが多いような。
そして、その特定のケースを解決するために、一部のことは許容しなければならない、という印象です。
（まあ単純に僕も歳をとって、保守的な考え方が強くなってきただけなのかもしれません。。）</p>

<p>今回のカンファレンスは実際の開発者からどういうトレードオフがあるか、という話が出てきたことで、自分の中で改めて Serverless と向き合う覚悟というか、モチベーションが出てきたように思います。</p>

<p>とはいえ、個人的には、従来の Rails アプリと Serverless をハイブリッドに使った設計に取り組んでいくのが現時点での最適解ではないかと感じています。
もちろん、設計を考えた上で Full-Serverless が最適となれば、そういうアプリを作って行くつもりですが、それなりに複雑なロジックを考えるにはまだ Full-Serverless は早いのではないかな、と思います。
やはり並列性の高さが Serverless の魅力なので、アプリケーションの基本的な部分は従来通り Rails で作成して、アクセス数が急にスパイクするような場所を局所的に Serverless にするような設計をこれから色々試していこうと考えています。</p>

<p>ただ、Serverless のコンセプトとしては、ソフトウェア開発の生産性そのものを向上させることが目的とのことだったので、将来的にはハイブリッドよりも Serverless に振り切った設計がベストになっていくかもしれません。今後の発展に期待しています。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamoid の使い方【range 編】]]></title>
        <id>https://developer.feedforce.jp/entry/2017/11/04/235323</id>
        <link href="https://developer.feedforce.jp/entry/2017/11/04/235323"/>
        <updated>2017-11-04T14:53:23.000Z</updated>
        <summary type="html"><![CDATA[<p>どうも、バックエンドエンジニアのサトウリョウスケです ✌︎('ω')✌︎</p>

<p>最近こうして <a href="http://developer.feedforce.jp/entry/2017/10/12/100000">弊社の tech ブログが移転した</a> 訳ですが、自社で管理してるブログだと投稿フローがめんどくさいと僕がボヤいたのが移転理由の一端だったりします 😎
でも移転作業したのは僕じゃなくて、球だけ投げてどっか行きました 😎
移転ありがとうございます 🙇</p>

<p>移転して一発目の投稿なので張り切って参ります 💪</p>

<p>さて、Rails で DynamoDB を利用する際の ORM として <code>dynamoid</code> があります。
今回は <code>dynamoid</code> から Hash-Range Table (Partition Key と Sort Key の複合) を利用する方法について紹介します。</p>

<p><code>dynamoid</code> の導入方法については以前書いたこちらの記事を参考にしてみて下さい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftech.feedforce.jp%2Fdynamodb-setup-on-rails.html" title="DynamoDB を Rails で使えるようにするためのあれこれ | feedforce Engineers&#39; blog" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tech.feedforce.jp/dynamodb-setup-on-rails.html">tech.feedforce.jp</a></cite></p>

<h1>Hash-Range Table ってなんぞ</h1>

<h2>その前に名称の整理をしておきます</h2>

<p>タイトルに 【range 編】と書いているのですが、これは Sort Key の事を指します。
どうやら DynamoDB は初期の頃と現在で一部の名称が変化したようです。
しかし、 <code>Dyanmoid</code> では相変わらず旧名称のまま (<code>hash_key</code>, <code>range_key</code>) でパラメータを指定するので、対応表を記載しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 旧名称 </th>
<th style="text-align:center;"> 現名称 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Hash Key </td>
<td style="text-align:center;"> Partition Key </td>
</tr>
<tr>
<td style="text-align:center;"> Range Key </td>
<td style="text-align:center;"> Sort Key </td>
</tr>
</tbody>
</table>


<h2>DyanmoDB には 2 種類のプライマリキーがある</h2>

<p>こちらのスライドが分かりやすいのですが、 DynamoDB のテーブル定義として Hash Table と Hash-Range Table というものがあります。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=24" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>




<iframe src="//www.slideshare.net/slideshow/embed_code/key/gHjtA6AS8rk0sB?startSlide=26" width="595" height="485" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"> </iframe>


<ul>
<li>Hash Table

<ul>
<li>Hash Key (Partition Key) という一つのカラムの値でプライマリキーを表現するテーブル</li>
<li>この構成だと Hash Key は <strong>重複させることができない</strong></li>
</ul>
</li>
<li>Hash-Range Table

<ul>
<li>Hash Key と Range Key (Partition Key,  Sort Key) の二つの値でプライマリキーを表現する</li>
<li>Range Key が異なっていれば、同一の Hash Key を持つレコードが複数存在しても良い</li>
<li>スキャンより高速なクエリ <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> で複数のレコードを取得することが可能

<ul>
<li>スキャンだと物凄くコストが高いので、基本的にクエリだけでデータ取得できるように設計すべき</li>
</ul>
</li>
<li>Range Key での昇順・降順でのソートが可能</li>
<li>Range Key に対しての <a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Query.html#Query.KeyConditionExpressions">範囲検索</a> も可能</li>
</ul>
</li>
</ul>


<h1><code>dynamoid</code> での利用方法</h1>

<h2>テーブル定義</h2>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  range :range_key, :string # &lt;= これ
end</pre>


<p><code>range :(フィールド名), :(データ型)</code> で Range Key の定義が可能です。
ちょっと試せていないのですが、AWS コンソールからだとテーブル作成時にしか Range Key (ソートキー) を定義できないので、既に存在しているテーブルに途中で <code>range</code> の定義を加えても動作しないと思います。</p>

<h2>使い方</h2>

<p>Dynamoid にも ActiveRecord と同じように <code>#where</code> というメソッドが実装されています。
ドキュメントでは内部でどのような動きをするのかが見当たらなかったので、実装から確認したのですが、検索条件に Hash Key や Range Key が含まれているかどうかを判断して、クエリが使える場合はクエリで検索してくれるようです。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;) # クエリで検索される
User.where(hash_key: &#39;hash_key&#39;, range_key: &#39;range_key&#39;) # クエリで検索される
User.where(name: &#39;name&#39;) # Hash Key が無いのでスキャンが実行される</pre>


<p>ただし、引数の指定方法や定義の仕方が少しでも間違っていると <code>#where</code> でスキャンが実行されてしまっているケースがあります。本当にクエリ検索されているか、念のため Rails のログ出力を確認し、スキャンが実行されていないかどうか確認するようにして下さい ⚠️</p>

<p><code>#where</code> の使い方は ActiveRecord とほぼ同じです。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;).all # =&gt; [#&lt;User:0x000000076ed848&gt;, #&lt;User:0x0000000779abb0&gt;, ...]
User.where(hash_key: &#39;hash_key&#39;).each do |user|
  user # =&gt; #&lt;User:0x000000076ed848&gt;
end
User.where(hash_key: &#39;hash_key&#39;).first # =&gt; #&lt;User:0x000000048cb050&gt;
User.where(hash_key: &#39;hash_key&#39;).last # =&gt; #&lt;User:0x000000048cb050&gt;</pre>


<p>そして、 <code>range_key</code> に対して <code>gt</code>, <code>lt</code>, <code>gte</code>, <code>lte</code>, <code>begins_with</code>, <code>between</code> の演算子が使用できます。</p>

<pre class="code" data-lang="" data-unlink>User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.gt&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.lt&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.gte&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.lte&#39;: 123)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.begins_with&#39;: &#39;range_&#39;)
User.where(hash_key: &#39;hash_key&#39;, &#39;range_key.between&#39;: [100, 200])</pre>


<h2>ハマりポイント</h2>

<p>ここからは Range Key を <code>dyanmoid</code> を使っていてハマった点をいくつか紹介したいと思います。</p>

<h3><code>range</code> を定義していると <code>#find_by_id</code> の動作が変わる</h3>

<pre class="code" data-lang="" data-unlink># Hash Table として利用
class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
end

# OK!
User.find_by_id(&#39;hash_key&#39;)
# =&gt; #&lt;User:0x000000048cb050&gt;</pre>




<pre class="code" data-lang="" data-unlink># Hash-Range Table として利用
class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  range :range_key, :string
end

# Error!
User.find_by_id(&#39;hash_key&#39;)
# =&gt; Aws::DynamoDB::Errors::ValidationException: The provided key element does not match the schema</pre>


<p>んん？？ってなったのですが、こういう事らしいです。</p>

<ul>
<li><code>#find_by_id</code> は内部的には <code>Aws::DynamoDB::Client#get_item</code> を呼び出している</li>
<li><code>#get_item</code> は結果が一意に定まる検索条件を指定しないとエラーになる

<ul>
<li>つまり <code>range_key (primary sort key)</code> を定義している場合は引数一つだとエラー</li>
<li>引数に <code>range_key</code> を指定すれば OK</li>
</ul>
</li>
</ul>


<pre class="code" data-lang="" data-unlink>Line::User.find_by_id(&#39;hash_key&#39;, range_key: &#39;range_key&#39;)
# =&gt; #&lt;User:0x000000048cb050&gt;
# OK!</pre>


<h3><code>has_many</code> は Hash-Range Table に対応していない</h3>

<p><code>dynamoid</code> では ActiveRecord のような <code>has_many</code> <code>has_one</code> <code>belongs_to</code> が定義されているのですが、 Hash-Range Table だと上手く動作しません。
内部の実装を見てみましたが、 Hash Table の状態で利用することが前提となっているようでした。</p>

<p>Hash Table であればこんな感じで利用することができます。</p>

<pre class="code" data-lang="" data-unlink>class User
  include Dynamoid::Document

  table name: :users, key: :hash_key
  has_many :talks, class: Talk
end

class Talk
  include Dynamoid::Document

  table name: :talks, key: :hash_key
  belongs_to :user, class: User
end

user = User.create(name: &#39;Taro&#39;)
user.talks.create(content: &#39;Hello world&#39;)</pre>


<h1>まとめ</h1>

<p>Hash Table と Hash-Range Table の違いから、 Dynamoid における実装方法についてを紹介しました。
Dynamoid を利用した場合は migration を明示的に実行する訳ではないため、Rails のソースコードと DyanmoDB のテーブルの実態が必ずしも一致していないケースがある点がハマりどころのような気がします。
本稿で紹介した Hash-Range Table が DynamoDB と Dynamoid 両方で正しく設定されているかをリリース前に入念にチェックした方が良いでしょう。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/QueryAndScanGuidelines.html">クエリとスキャンのベストプラクティクス</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[開発者ブログを移行しました]]></title>
        <id>https://developer.feedforce.jp/entry/2017/10/12/100000</id>
        <link href="https://developer.feedforce.jp/entry/2017/10/12/100000"/>
        <updated>2017-10-12T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>これまで Middleman Blog + GitHub Pages で運営していた弊社開発者ブログを、はてなブログに移行しました。</p>

<p>過去の記事は移行前のアドレス <a href="http://tech.feedforce.jp">http://tech.feedforce.jp</a> からご覧いただけます。</p>

<ul>
<li><a href="http://b.hatena.ne.jp/entrylist?url=http://tech.feedforce.jp&amp;sort=hot">旧ブログのホットエントリー</a></li>
</ul>


<p>移行をきっかけに心機一転、これまでよりカジュアルな情報公開を目指していきます。<br/>
フォードフォース【新生】開発者ブログを、どうぞよろしくお願いします！</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go で s3-edit という CLI アプリケーションを作った]]></title>
        <id>https://blog.tsub.me/post/create-s3-edit/</id>
        <link href="https://blog.tsub.me/post/create-s3-edit/"/>
        <updated>2017-09-05T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>最近 Rust を少し学んでいたが、難しくて少し挫折しかけたのと、結局仕事への導入を考えるなら Go のほうが既に書ける人が何人かいる、というのもあり Go を書き始めた。</p>

<p>手初めてに欲しい CLI アプリケーションがあったのでそれをサクッと Go で書いてみた。</p>

<p><i class="fa fa-github"></i> <a href="https://github.com/tsub/s3-edit">tsub/s3-edit: Edit directly a file on Amazon S3</a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[pecoからfzfに移行した]]></title>
        <id>https://blog.tsub.me/post/move-from-peco-to-fzf/</id>
        <link href="https://blog.tsub.me/post/move-from-peco-to-fzf/"/>
        <updated>2017-05-03T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>今までずっと <a href="https://github.com/peco/peco">peco</a> を使ってきたが、そろそろ別のツールに変えてみるか&hellip;と思い立ったので <a href="https://github.com/junegunn/fzf">fzf</a> に移行した。</p>

<p><a href="https://github.com/junegunn/fzf">junegunn/fzf: A command-line fuzzy finder written in Go</a></p>

<p>自分は基本的に飽き性なので、定期的に環境を変えたくなる時期が来るのだが fzf が思ってたより良かったので紹介したい。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブログをGKEでの運用に移行した]]></title>
        <id>https://blog.tsub.me/post/operate-blog-server-on-gke/</id>
        <link href="https://blog.tsub.me/post/operate-blog-server-on-gke/"/>
        <updated>2017-04-16T05:29:33.000Z</updated>
        <summary type="html"><![CDATA[<p>このブログはGitHub pagesを使って公開していたが、GKEに移行することにした。</p>

<p><a href="https://blog.tsub.me/post/created-blog-by-hugo/">はてなブログからHugo on Github Pagesに移行しました</a></p>

<p>これを聞いて、99%の人が、HugoでHTMLファイルを生成して公開しているならわざわざサーバーなんて必要ないんじゃないか？金の無駄じゃないか？と思うかもしれない。</p>

<p>自分もそう思う。</p>

<p>今回GKEを使ったのはGKEとk8sでのコンテナ運用を経験したかったことが非常に大きい。</p>

<p>会社ではECSを本番運用しているが、ECSに比べてk8sの方が良さそうな雰囲気しかないのでGKEの方も触っておこうかと思って移行した。</p>

<p>また、今のところブログ以外に個人で運用しているWebサービス等はないため、ブログがちょうどいい題材だった。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[TTXによるフォントのチラ見をちょっといい感じにする設定]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2017/01/11/232900</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2017/01/11/232900"/>
        <updated>2017-01-11T14:29:00.000Z</updated>
        <summary type="html"><![CDATA[<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ffonttools%2Ffonttools" title="fonttools/fonttools" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/fonttools/fonttools">github.com</a></cite></p>

<p>仕事場／プライベート問わずに大活躍の fontTools ですが、その中でも頻出なのが「フォントファイルを TTX で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%F3">ダン</a>プして中身をチラ見したい」という場面です。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ttx <span class="synSpecial">-o</span> out.ttx <span class="synStatement">[</span>オプション<span class="synStatement">]</span> font.otf
$ <span class="synStatement">less</span> out.ttx
</pre>


<p>つい最近まで、上のようにしてごく普通に中身を見ていたのですが、何度もやっているといい加減めんどくさくなってきます。そこで、<code>.zshrc</code>（適宜 <code>.bashrc</code> などに読み替えてください）に簡単なシェル関数を定義してみました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synIdentifier">tl() {</span>
    ttx <span class="synSpecial">-q</span> <span class="synSpecial">-o</span> - <span class="synPreProc">$*</span> <span class="synStatement">|</span> <span class="synStatement">source</span>-highlight <span class="synSpecial">-s</span> xml <span class="synSpecial">-f</span> esc <span class="synStatement">|</span> <span class="synStatement">less</span>
<span class="synIdentifier">}</span>
</pre>


<p>関数名はなんでもいいのですが、<code>ttx</code> で <code>less</code> なので短く <code>tl</code> にしておきました。途中の <code>source-highlight</code> は <a href="https://www.gnu.org/software/src-highlite/">GNU Source-highlight</a> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9">シンタックス</a>ハイライトの定番ツールです。こうしておけば、</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tl <span class="synStatement">[</span>オプション<span class="synStatement">]</span> font.otf
</pre>


<p>とするだけでちょっといい感じに中身がチラ見できるようになります。べんり。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20170111/20170111232302.gif" alt="f:id:mashabow:20170111232302g:plain" title="f:id:mashabow:20170111232302g:plain" class="hatena-fotolife" itemprop="image"></span></p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくの情報収集方法]]></title>
        <id>https://blog.tsub.me/post/how-i-collect-information/</id>
        <link href="https://blog.tsub.me/post/how-i-collect-information/"/>
        <updated>2016-12-17T07:50:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/1427">feedforce Advent Calender 2016</a>の17日目の記事です。</p>

<p>前回の記事はpokotyamuによる<a href="http://pokotyamu.hatenablog.com/entry/2016/12/16/095524">HHKBを掃除した話</a>でした</p>

<p>無刻印のキーだからといってどのキーでも当てはまると思って適当にやるとものすごい罠に引っかかっちゃうんですね。</p>

<p>さて、今回は多くのエンジニアにとって重要なキーワードである情報収集についてです。</p>

<p>自分は多分社内ではわりと情報収集よくやってる方だと思っているのですが、自分が普段どんな方法で情報収集してるかを共有したかったので今回まとめてみました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[フトらない話]]></title>
        <id>https://blog.betaful.life/entry/2016/12/10/135046</id>
        <link href="https://blog.betaful.life/entry/2016/12/10/135046"/>
        <updated>2016-12-10T04:50:46.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/1427">feedforce Advent Calendar 2016</a> の 10 日目の記事です。</p>

<p>昨日は弊社営業チームから初めて Advent Calendar に参加してくれた黒い伝道師・喜多の『<a href="http://lineblog.me/kosukekita/archives/62812.html">クリスマスまでまだ間に合う！日焼けマシンを使えば誰でも黒くモテ肌を手に入れる事ができる</a>』でした。クリスマスに向けた Advent Calendar にぴったり（？）の記事。日焼けマシーンってサイ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A1%BC">バー</a>な感じしますね（・∀・）</p>

<p>今年の弊社 Advent Calendar は "エンジニア" に限らない、ということで「健康オタク」枠として、去年参加した <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> のその後の話を書きます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.tmd45.jp%2Fentry%2F2015%2F12%2F23%2F130639" title="さらに3ヶ月経過 - TMD45&#39;β&#39;LOG!!!" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.tmd45.jp/entry/2015/12/23/130639">blog.tmd45.jp</a></cite></p>

<p>ダイエットではない。断じて。</p>

<h3>昨年のあらすじ</h3>

<table>
<thead>
<tr>
<th> 時期 </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2015年3月 </td>
<td> 一人暮らし再開。人生最重量 58 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 32 %。体重記録開始 </td>
</tr>
<tr>
<td> 2015年4月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/04/07/012713">"カロリー記録を始めて 19 日で 2.8 kg 落ちた"</a><a href="#f-f5eed0df" name="fn-f5eed0df" title="ちなみにカロリー記録は iOS アプリの『MyFitnessPal』を使っていました。">*1</a> </td>
</tr>
<tr>
<td> 同頃 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/04/18/163328">Withings Activité（活動量・睡眠計測）利用開始</a><a href="#f-377be23b" name="fn-377be23b" title="その前は『fitbit one』ユーザでした。">*2</a> </td>
</tr>
<tr>
<td> 2015年5月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/05/13/203200">糖質制限に興味を持ちはじめて「糖質軽減」をはじめる</a> </td>
</tr>
<tr>
<td>  </td>
<td> だいたい 1kg/月 で体重が減り続けて <del>調子に乗る</del> </td>
</tr>
<tr>
<td> 2015年9月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/09/23/131225">約半年の結果</a>。体重 50.7 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 24.4 % 🎉 </td>
</tr>
<tr>
<td> 2015年12月 </td>
<td> <a href="http://blog.tmd45.jp/entry/2015/12/23/130639">さらに3ヶ月経過</a>。体重 51.1 kg、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 25.4 %。冬ゆえの微増 </td>
</tr>
</tbody>
</table>


<p>そういえば、その後 社内で『<a href="http://d.hatena.ne.jp/asin/4478039674/tmd45-22">シリコンバレー式 自分を変える最強の食事</a>』が一斉を風靡してました。実際に社長が体質改善に成功してました。
人それぞれ体質的・性格的に合うものを選ぶのが一番良いですね（感想）。</p>

<p>以前の記事でも書きましたが、カロリー記録は続けていません。だいたい普段食べるもののカロリーや成分（炭水化物／糖質）の傾向が見えてきたとこで終わりにしました。</p>

<p>カロリーの制限もしていません。むしろカロリーオフの商品とか困る。活動エネルギーはとりつつ、糖質を控えたい。ただ糖質（炭水化物）の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1">コスパ</a>が良すぎるんですよね。食事に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1">コスパ</a>を求めると必然的に糖質メインに摂取することになるかと思います。</p>

<p>ゆえにこの二年、食費は以前よりかかってる気がしますヽ(；´Д｀)ノ</p>

<h3>一年ぶりの報告記事です</h3>

<p>さて前置きが長くなりましたが、その後のご報告です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20161210/20161210130424.png" alt="f:id:tmd45:20161210130424p:plain" title="f:id:tmd45:20161210130424p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20161210/20161210130435.png" alt="f:id:tmd45:20161210130435p:plain" title="f:id:tmd45:20161210130435p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">【祝】リバウンドなし【維持】</span></p>

<p>褒めてくれていいのよ( ･´ｰ･｀)＋</p>

<p>去年サボった健康診断を、今年はちゃんと行ってきたんですが、看護師さんたちに「この体重は意図して減らしたんですか…？」「なにかありました…？（心配」「これ以上減らさないでくださいね（叱」って言われました。わーい（？）</p>

<p>安心してください、ブラックじゃないです（意味深）</p>

<p>なにより血液検査（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E5%BC%D5">代謝</a>）の結果、脂質の項目がすごく良くなった。2年前との比較ですが</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C3%E6%C0%AD%BB%E9%CB%C3">中性脂肪</a>: 143 mg/dL → 40 mg/dL（むしろ減りすぎ）</li>
<li>HDL-<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>: 59 mg/dL → 67 mg/dL（善玉<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>微増👍）</li>
<li>LDL-<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>: 156 mg/dL → 89 mg/dL（悪玉<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%EC%A5%B9%A5%C6%A5%ED%A1%BC%A5%EB">コレステロール</a>大幅減🎉）</li>
</ul>


<p>これはびっくりした。あと糖質軽減してても血糖値はほとんど変わりなしでした。意外。</p>

<p>健康診断は毎年受けましょうね( ◠ ◡ ◠ )</p>

<h3>考察</h3>

<p>糖質軽減で自分が成功したのは、もともとの体重増加の原因が、不必要な糖質の取りすぎによるものであったからだと思います。</p>

<p>先にも書きましたが、体質は人それぞれなので、太っていると感じるならその太っている原因も人それぞれ。原因に対する対策も人それぞれです。</p>

<p><del>ダイエット</del> 体質改善は流行り廃りに乗ってやっても、当たりハズレに振り回されるだけになりかねないので、自分の体質をよく観察して自分に合うものを選びましょう（真面目）</p>

<h3>最近のこと</h3>

<p>体重の減少があまりなくなって、維持の時期になってからは去年よりも多少糖質摂取量は増えました。</p>

<p>ガンガン減ってるときはそれが楽しくて「せっかく体重減ってるのにいまここで食べちゃったらもったいないな」みたいに思って、あまり「食べたい！」みたいな気分にもならなかったですし。</p>

<p>最近はご飯とか甘いものとかも食べたくて食べるようになってきました。そこで気をつけているのは、とにかく先に野菜をお腹にいれておくということです。まず野菜。野菜。野菜。ここ最近は「糖質警察」より「野菜先に食えババア」になりつつあります。</p>

<p>野菜ジュースでもいいけど、砂糖や果実で味を整えてるために糖質の高いものもあるので気をつけて😉</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/forever5yearsold/2808759067/in/photolist-5hcCdt-8JeSZ1-grmZLz-ossY4u-7AMHBe-cc1SbW-oo8Tak-7H2G4A-7SzJtP-4zorqE-8UFrgv-5p5yds-5ucmeb-52pKAr-9JYMkV-7SzJW4-9JYLWB-ossXWf-bVsnSX-as23tS-bymSS8-o9otzg-5xgaYM-cvv6y9-8d37Tg-bvS4Qd-9WeDfm-9WeDbu-2tN1Vw-cW5sVb-hnhr83-4Uqxfi-8ijb8Q-kALMMF-9K2Bc5-oY8vf9-7SzKck-8arAwJ-ozK9Sx-oJDVvn-9BjQQz-qu1PXg-969ph6-qSW4YB-AurF2q-9aRtLF-7HgeNW-amLgHC-9yLjbY-6YnLS5" title="Vegetables in Whole Foods Market"><img src="https://c4.staticflickr.com/4/3290/2808759067_de40a54f47_b.jpg" width="1024" height="768" alt="Vegetables in Whole Foods Market"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>筋トレも暇な時にやるような習慣になりつつあります。まぁ真面目にはやってないので筋肉がつくほどではないですが… 通勤で歩く距離を伸ばしたり、地味にやっております。</p>

<h3>おわりに</h3>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">よくあんな仕様が曖昧でログ出力も無くて運用で回避している箇所がたくさんあるシステムの面倒を見てくれているよなって思いますよね…</p>&mdash; <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%BB%A4%A4">かせい</a>さん (@kasei_san) <a href="https://twitter.com/kasei_san/status/807403160734007296?ref_src=twsrc%5Etfw">2016年12月10日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>健康診断は定期的に受けましょうね（2度目）。</p>

<p>いかがでしたでしょうか。明日は <span style="color: #aaaaaa"><del><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> アカウントは持ってるけど発言数が少なくて基本的に「おもしろいこと」しか公開しないタイプの</del></span> @Lorentzca による 2 記事目『分散惑星間データセンター(Grid Interplanetary Data Center)時代のデータ通信技術』の話だそうです。</p>

<p>真面目か…？！乞うご期待。</p>

<p><ins datetime="2016-12-13T11:47:25+09:00"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%C9%B5%AD">追記</a></ins></p>

<p>こやつｗｗｗｗｗｗｗ（いい話でした ☺）</p>

<ul>
<li><a href="https://ghost.ponpokopon.me/blogs-heart/">去年より個人ブログのポスト数を2倍くらい増やせたのでなぜなのか書く</a></li>
</ul>

<div class="footnote">
<p class="footnote"><a href="#fn-f5eed0df" name="f-f5eed0df" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">ちなみにカロリー記録は <a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS">iOS</a> アプリの『MyFitnessPal』を使っていました。</span></p>
<p class="footnote"><a href="#fn-377be23b" name="f-377be23b" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">その前は『fitbit one』ユーザでした。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blox Introduction]]></title>
        <id>https://blog.tsub.me/post/blox-introduction/</id>
        <link href="https://blog.tsub.me/post/blox-introduction/"/>
        <updated>2016-12-08T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2016/docker">Docker Advent Calendar 2016</a>の9日目の記事です。</p>

<p>先日AWSのre:Invent 2016で<a href="https://blox.github.io/">Blox</a>が発表されました。</p>

<p>BloxはEC2 Container Service(ECS)関連のオープンソースのツール群のことです。</p>

<p>そしてそのツールとは主にECSのカスタムスケジューラを指します</p>

<p>ECSはマネージドなスケジューラとマネージャを標準で備えていますが、Bloxはそれとは別に自分でホスティングする必要があります。</p>

<p>しかし、ECSに足りない機能を補ってくれるため導入するメリットは大きいでしょう。</p>

<p><a href="https://aws.amazon.com/jp/blogs/news/monitor-cluster-state-with-amazon-ecs-event-stream/">先日リリースされた、CloudWatchEventsのECSイベントストリーム</a>を利用することで、よりスムーズにECSのクラスタの状態を監視してカスタムスケジューラを作ることができるようになりました。</p>

<p>Bloxはこれを使った一例と言えます</p>

<p>この記事ではBloxについて試してみて分かった内容や所感について書いていきます</p>

<p><img src="https://i.gyazo.com/4c00e85fca7b228d7aa0d5f1e6dd1d27.png" alt="Blox thumbnail" /></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[はてなブログからHugo on Github Pagesに移行しました]]></title>
        <id>https://blog.tsub.me/post/created-blog-by-hugo/</id>
        <link href="https://blog.tsub.me/post/created-blog-by-hugo/"/>
        <updated>2016-08-11T16:01:16.000Z</updated>
        <summary type="html"><![CDATA[<p>はてなブログをやめて、Hugo on Github Pagesに移行しました。</p>

<p>といっても、走りだしのブログであまり記事は多くないんですが..</p>

<p>移行した理由は、以前のブログを構築した際に、調子に乗ってはてなブログProに登録して独自ドメインを使っていたのですが、思ったよりも記事を書かずお金がちょっと勿体無いなーと思い始めてきたのでGithub Pagesに移行しました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovimのterminal emulatorが便利すぎた]]></title>
        <id>https://blog.tsub.me/post/neovim-on-terminal-emulator/</id>
        <link href="https://blog.tsub.me/post/neovim-on-terminal-emulator/"/>
        <updated>2016-07-02T13:08:23.000Z</updated>
        <summary type="html"><![CDATA[<p>少し前にvimからneovimに移行したのですが、vimよりさくさくな気がする、程度でneovimの機能を特に活用していませんでした。</p>

<p>実はneovimにはterminal emulatorという機能があり、vimの中でshellを起動することができます。</p>

<p>例えばコードを書きつつ、rspecを実行したりpryやtigを使ったりなど、非常に便利です。</p>

<p><a href="https://gyazo.com/ca4b9ef1599801f1948721befe274654.png"><img src="https://i.gyazo.com/ca4b9ef1599801f1948721befe274654.png" alt="" /></a></p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[tokyo.ex #3 参加してきた]]></title>
        <id>https://blog.tsub.me/post/tokyo-ex-3-entry-report/</id>
        <link href="https://blog.tsub.me/post/tokyo-ex-3-entry-report/"/>
        <updated>2016-06-30T14:56:16.000Z</updated>
        <summary type="html"><![CDATA[<p>tokyo.ex #3 に参加してきました。</p>

<p><a href="http://beam-lang.connpass.com/event/32704/">tokyo.ex #3</a></p>

<p>前々からtokyo.ex #1, #2と気にはなっていたんですが、気づいた時には定員が埋まってまして今回やっと参加できました。</p>

<p>と思ってたらわりと席空いてたりキャンセル多かったり、定員超えてるからといって諦めなくても良かったみたいですね</p>

<p>参加してみての全体的な感想ですが、正直最近elixirを触ってなかったのでいい刺激になりました。</p>

<p>話の内容は非常にレベルが高く、大半は理解できませんでしたが、その分elixirの勢いとコミュニティの熱さは十分伝わってきました。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[serverspecで複数のdocker containerに対してテストしたい]]></title>
        <id>https://blog.tsub.me/post/serverspec-for-several-container/</id>
        <link href="https://blog.tsub.me/post/serverspec-for-several-container/"/>
        <updated>2016-06-25T14:36:05.000Z</updated>
        <summary type="html"><![CDATA[<p>前回の記事でdocker containerに対してserverspecでテストができるようになりました。</p>

<p><a href="https://blog.tsub.me/post/serverspec-for-docker/">serverspecでdocker containerに対してテストしたい</a></p>

<p>dockerを扱う以上、containerは複数立てるのが普通です。</p>

<p>今回は複数のcontainerを立てた時にそれぞれのcontainerに対してテストする方法について書いていきます。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[serverspecでdocker containerに対してテストしたい]]></title>
        <id>https://blog.tsub.me/post/serverspec-for-docker/</id>
        <link href="https://blog.tsub.me/post/serverspec-for-docker/"/>
        <updated>2016-06-25T13:25:08.000Z</updated>
        <summary type="html"><![CDATA[<p>仕事でこれからdockerを使い始めるので、dockerを触りつつメモがてら記事に残していきます。</p>

<p></p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenType の仕様策定の議論をのぞくには]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2016/06/21/003529</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2016/06/21/003529"/>
        <updated>2016-06-20T15:35:29.000Z</updated>
        <summary type="html"><![CDATA[<p>OpenType は1997年に <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> と <a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> が策定したフォントフォーマットで、現在の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D5%A5%A1%A5%AF%A5%C8%A5%B9%A5%BF%A5%F3%A5%C0%A1%BC%A5%C9">デファクトスタンダード</a>になっています<a href="#f-b01003c3" name="fn-b01003c3" title="ややこしいので詳細は省きますが、今どきの TrueType は OpenType に含まれます。また、Web フォントで使われる WOFF は、ざっくり言えば OpenType を zlib 圧縮したものです。">*1</a>。仕様は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> のサイトで公開されており、興味があればだれでもすぐに読むことができます。</p>

<ul>
<li><a href="https://www.microsoft.com/en-us/Typography/OpenTypeSpecification.aspx">Microsoft Typography - OpenType Specification</a></li>
</ul>


<p>この OpenType の仕様はときたま改定されており、今のところは2015年3月に発表された v1.7 が最新バーションです。</p>

<p>ところで、この仕様の改定はどこで議論されているんでしょう？　UCS/<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> や各種 Web 標準などは策定プロセスがオープンになっていますが、OpenType の仕様はどこで議論が進んでいるのか、ぱっと見ただけではよくわかりません。日本語の情報もほとんど見つかりません。というわけで、この記事でその一端を紹介したいと思います。</p>

<h3>OpenType <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8">メーリングリスト</a></h3>

<p>実は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> のサイトにこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8">メーリングリスト</a>（ML）の案内がちゃんと載っています。</p>

<ul>
<li><a href="https://www.microsoft.com/typography/otspec/otlist.htm">OpenType discussion forum</a></li>
</ul>


<blockquote><p>An e-mail based discussion forum has been set up specifically to help people working on the development of OpenType fonts and associated technologies.</p>

<ul>
<li>To subscribe to the OpenType Mailing List, send e-mail to: <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#x75;&#98;&#x73;&#99;&#114;&#105;&#x62;&#101;&#45;&#x6f;&#112;&#101;&#x6e;&#116;&#x79;&#x70;&#101;&#64;&#x69;&#x6e;&#100;&#x78;&#x2e;&#x63;&#111;&#46;&#117;&#x6b;">&#115;&#x75;&#x62;&#x73;&#x63;&#114;&#105;&#x62;&#101;&#x2d;&#111;&#112;&#101;&#110;&#116;&#121;&#112;&#x65;&#x40;&#105;&#x6e;&#100;&#x78;&#x2e;&#99;&#x6f;&#x2e;&#117;&#x6b;</a></li>
<li>To remove yourself from this mailing list, send e-mail to: <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x75;&#x6e;&#115;&#x75;&#98;&#115;&#x63;&#x72;&#105;&#x62;&#x65;&#45;&#x6f;&#112;&#x65;&#110;&#116;&#121;&#112;&#101;&#x40;&#x69;&#x6e;&#x64;&#120;&#x2e;&#99;&#x6f;&#46;&#x75;&#107;">&#x75;&#110;&#115;&#117;&#x62;&#115;&#x63;&#114;&#105;&#98;&#x65;&#45;&#x6f;&#x70;&#x65;&#110;&#x74;&#121;&#112;&#101;&#x40;&#x69;&#x6e;&#100;&#x78;&#46;&#x63;&#x6f;&#46;&#117;&#x6b;</a></li>
</ul>
</blockquote>

<p>載っているのですが、<code>indx.co.uk</code> という馴染みのない<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン</a>だったり、登録前に ML の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6">アーカイブ</a>が見れなかったり、ページのフッタに <q>This page was last updated 9 August 2004.</q> と書いてあったりと、登録に躊躇してしまう要素が満載です。</p>

<p>が、これでも現役でちゃんと生きている公式 ML です。<q>to help people working on the development of OpenType fonts and associated technologies</q> と書かれていてスコープが少しぼんやりとしていますが、OpenType の仕様に関する話題が現在中心になっています。</p>

<p>この ML へ登録するためには、<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#115;&#x75;&#98;&#x73;&#x63;&#114;&#105;&#x62;&#101;&#x2d;&#x6f;&#112;&#x65;&#110;&#x74;&#121;&#x70;&#101;&#64;&#105;&#x6e;&#100;&#120;&#46;&#x63;&#x6f;&#x2e;&#117;&#x6b;">&#115;&#117;&#x62;&#x73;&#x63;&#114;&#x69;&#x62;&#101;&#45;&#x6f;&#112;&#x65;&#x6e;&#x74;&#x79;&#112;&#101;&#64;&#105;&#110;&#100;&#120;&#x2e;&#x63;&#111;&#46;&#117;&#107;</a> にメールを送ります<a href="#f-dc71ee9e" name="fn-dc71ee9e" title="一時期は opentype-migration-sub@indx.co.uk というアドレスだったようです（参考）。">*2</a>。このとき空メールではだめで、メールの本文が必要です。自己紹介や「登録したいんだけど」みたいなことを1, 2文書いておけば大丈夫なはずです。ML 管理者の承認が降りれば、数日後に通知のメールが来ますので、これで登録完了です。過去の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6">アーカイブ</a>は、ML 登録完了後に<a href="http://www.indx.co.uk/biglistarchive/">このページ</a>からたどれます。ただしシステムが古いようで、使い勝手は残念な感じです。</p>

<p>なお、この ML から配信されるメールは、件名の頭に <code>[OpenType]</code> がついています。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/mpeg">mpeg</a>-OTspec <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8">メーリングリスト</a></h3>

<p>世の中には ISO/IEC 14496-22 Open Font Format (OFF) という規格があります。といっても OpenType と中身は同じ…というか、OpenType をそのまま公的な国際規格にしたのがこの OFF です。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%E5%A1%BC%A5%EB">デジュール</a>標準というやつです。ISO が規格票を無料で公開しており、以下のページからPDFのダウンロードが可能です。ちなみに、ISO/IEC 14496-22:2015 が OpenType v1.7 に対応します。</p>

<ul>
<li><a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html">Freely Available Standards</a></li>
</ul>


<p>そして、この規格について議論するための ML が米 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Yahoo%21">Yahoo!</a> Groups に用意されています。これが <a class="keyword" href="http://d.hatena.ne.jp/keyword/mpeg">mpeg</a>-OTspec ML です。</p>

<ul>
<li><a href="https://groups.yahoo.com/neo/groups/mpeg-OTspec/info">MPEG(SC29/WG11) Open Font Format - Yahoo Groups</a></li>
</ul>


<p>こちらの ML は <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#109;&#x70;&#x65;&#103;&#x2d;&#111;&#116;&#115;&#x70;&#101;&#x63;&#x2d;&#115;&#117;&#98;&#115;&#99;&#114;&#x69;&#x62;&#101;&#64;&#121;&#97;&#x68;&#111;&#x6f;&#103;&#x72;&#x6f;&#x75;&#x70;&#115;&#46;&#99;&#x6f;&#x6d;">&#109;&#x70;&#101;&#103;&#45;&#111;&#116;&#115;&#112;&#x65;&#x63;&#45;&#115;&#117;&#98;&#115;&#99;&#x72;&#x69;&#98;&#101;&#64;&#121;&#x61;&#x68;&#x6f;&#x6f;&#x67;&#x72;&#111;&#117;&#112;&#x73;&#x2e;&#99;&#x6f;&#x6d;</a> に空メールを送信するだけですぐに参加できるので、OpenType ML と比べるととっつきやすいかもしれません。過去の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AB%A5%A4%A5%D6">アーカイブ</a>や添付ファイルの閲覧には米 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Yahoo%21">Yahoo!</a> のアカウントが必要になりますので、アカウントを持っていなければ作っておきましょう。</p>

<p>なお、この ML から配信されるメールは、件名の頭に <code>[mpeg-OTspec]</code> がついています。</p>

<p>ちなみに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/mpeg">mpeg</a>-OTspec ML の近年の流量は以下のとおりで、話題があるときとないときでムラがあります。これは OpenType ML の方も同様です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20160621/20160621000505.png" alt="f:id:mashabow:20160621000505p:plain" title="f:id:mashabow:20160621000505p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>また、両 ML 間では転送や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%ED%A5%B9%A5%DD%A5%B9%A5%C8">クロスポスト</a>が多く、両方とも登録していると若干カオスです。</p>

<h3>おまけ</h3>

<p>最後におまけとして、以下の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>を紹介しておきます。位置づけがまだよくわかりませんが、OpenType レイアウトに関する追加仕様のドラフトのようです。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FOpenType%2Fopentype-layout" title="OpenType/opentype-layout" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/OpenType/opentype-layout">github.com</a></cite></p>
<div class="footnote">
<p class="footnote"><a href="#fn-b01003c3" name="f-b01003c3" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">ややこしいので詳細は省きますが、今どきの TrueType は OpenType に含まれます。また、Web フォントで使われる WOFF は、ざっくり言えば OpenType を zlib 圧縮したものです。</span></p>
<p class="footnote"><a href="#fn-dc71ee9e" name="f-dc71ee9e" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">一時期は opentype-<em>migration</em>-sub@indx.co.uk というアドレスだったようです（<a href="http://blog.typekit.com/2008/01/29/opentype_15_draft/" title="The Typekit Blog | OpenType 1.5 draft &amp; 1.6 suggestions">参考</a>）。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[二号明朝活字書体見本（明治26年）]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2015/12/25/235158</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2015/12/25/235158"/>
        <updated>2015-12-25T14:51:58.000Z</updated>
        <summary type="html"><![CDATA[<h2>TL;DR</h2>

<p>東京築地活版製造所『二号明朝活字書体見本』（明治26年／1893年）の画像を <a href="https://www.flickr.com/photos/95996414@N02/albums/72157662791750695/with/23854153892/" title="二号明朝活字書体見本 | Flickr - Photo Sharing!">Flickr で公開</a>しました。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/albums/72157662791750695" title="二号明朝活字書体見本"><img src="https://farm6.staticflickr.com/5836/23335632243_f2937a602a.jpg" width="316" height="500" alt="二号明朝活字書体見本"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>PDF 版がほしい方は下のページから。</p>

<ul>
<li><a href="http://shiromoji.net/pd/" title="資料置き場 - しろもじ作業室">資料置き場 - しろもじ作業室</a></li>
</ul>


<h2>いきさつ</h2>

<p>先月末、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> でこんなやりとりをしていました。</p>

<p><blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr">手持ちの資料をネットに目録作って、私設図書館みたいな感じで参照したい人に情報を渡せる様にするといいのかもしれない。</p>&mdash; にせねこ (@nixeneko) <a href="https://twitter.com/nixeneko/status/670617740391116800">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr">手持ちの資料、紙モノまでは整理できてないけど、本とか冊子レベルのものならここに登録してる ⁑ しろもじライブラリ - <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%C7%A5%A3%A5%A2%A5%DE%A1%BC%A5%AB%A1%BC">メディアマーカー</a> <a href="https://t.co/Pe8M3kdVOk">https://t.co/Pe8M3kdVOk</a></p>&mdash; mashabow (@mashabow) <a href="https://twitter.com/mashabow/status/670619379537731585">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr"><a href="https://twitter.com/mashabow">@mashabow</a> うわっ、1893明26の「二号明朝総数見本 全」って、小宮山大明神の明25総数見本と同じ構成か、実はその1年で違ってたりするのか、激しく気になるんですが！！！</p>&mdash; <a class="keyword" href="http://d.hatena.ne.jp/keyword/UA">UA</a> (3.1) ⿴囗図デコ大好き (@uakira2) <a href="https://twitter.com/uakira2/status/670622647710011392">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr"><a href="https://twitter.com/uakira2">@uakira2</a> なんでしたらお貸ししますよ（そしてあわよくば撮影をお願いして…</p>&mdash; mashabow (@mashabow) <a href="https://twitter.com/mashabow/status/670624285619314688">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr"><a href="https://twitter.com/mashabow">@mashabow</a> 撮影ご依頼、喜んで！！</p>&mdash; <a class="keyword" href="http://d.hatena.ne.jp/keyword/UA">UA</a> (3.1) ⿴囗図デコ大好き (@uakira2) <a href="https://twitter.com/uakira2/status/670625789008879617">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="HASH(0x9f16ef0)"><p lang="ja" dir="ltr"><a href="https://twitter.com/uakira2">@uakira2</a> どうもありがとうございます！（ちなみにわたしの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>のヘッダ画像はその見本帳の一部です</p>&mdash; mashabow (@mashabow) <a href="https://twitter.com/mashabow/status/670626922150383616">November 28, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>この『二号明朝活字書体見本 全』というのは、2年半ほど前にたまたま運良く入手した活字見本帳です。自分の本棚に古い見本帳があるというのは、もちろん飛び上がるほど嬉しいわけですが、それをそのまましまっておくのもどうももったいない。どうせなら、文字に興味を持ったいろいろな人に見てもらいたい<a href="#f-954870e2" name="fn-954870e2" title="というかそもそも自分自身、ほかの人が持っている見本帳をいろいろ見たくてしょうがなかった">*1</a>。……などということを以前から考えていました。</p>

<p>そんな中でこのやりとりがあり、チャンスだと思って（ずうずうしくも）撮影をお願いしてみました。この内田（<a href="https://twitter.com/uakira2" title="UA (3.1) ⿴囗図デコ大好き(@uakira2)さん | Twitter">@uakira2</a>）さんは以前、<a href="http://f.hatena.ne.jp/uakira/S11%E7%AF%89%E5%9C%B0%E4%BA%94%E5%8F%B7/" title="S11築地五号 - uakira's fotolife">築地五号の見本帳のスキャン</a>や、<a href="http://f.hatena.ne.jp/HikariwokakaguruHitobito/%E6%97%A5%E6%9C%AC%E3%81%AE%E6%B4%BB%E5%AD%97/" title="日本の活字 - HikariwokakaguruHitobito's fotolife">『光をかかぐる人々』の撮影</a>をされています。ありがたいことに、今回快く撮影を引き受けてくださり、こうして『二号明朝活字書体見本 全』の画像を公開することができました。下の Filckr アルバムで全ページ閲覧できますので、どうぞご覧ください。表紙を含めて画像は88枚あります。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/albums/72157662791750695" title="二号明朝活字書体見本"><img src="https://farm6.staticflickr.com/5836/23335632243_f2937a602a.jpg" width="316" height="500" alt="二号明朝活字書体見本"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>いつものように PDF 版も用意してあります。</p>

<ul>
<li><a href="http://shiromoji.net/pd/" title="資料置き場 - しろもじ作業室">資料置き場 - しろもじ作業室</a></li>
</ul>


<h2>見本帳概観</h2>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/23594561499/in/album-72157662791750695/" title="二号明朝活字書体見本_16"><img src="https://farm6.staticflickr.com/5809/23594561499_63930a6c9d_n.jpg" width="316" height="500" alt="二号明朝活字書体見本_16"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>この見本帳の8割以上は、漢字のページで占められています。字種数はまだ数えていませんが、総数見本帳だけあってさまざまな字種が載っています。その分、整ったデザインの活字（頻出する漢字）から、その場しのぎっぽいバランス悪い活字（あまり出てこない漢字）まで、クオリティもさまざまです。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/23936334066/in/album-72157662791750695/" title="二号明朝活字書体見本_76"><img src="https://farm6.staticflickr.com/5776/23936334066_13cd76846e_n.jpg" width="316" height="500" alt="二号明朝活字書体見本_76"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>部首順に並んだ漢字が終わると、次は分合活字（この見本帳では「分合文字」とよぶ）のページに移ります。横幅が1/3, 2/3の2種類の活字があり、この両者を偏旁として組み合わせ、漢字1字を組み立てるようになっています。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/23962423875/in/album-72157662791750695/" title="二号明朝活字書体見本_81"><img src="https://farm2.staticflickr.com/1636/23962423875_da16ffd2cf_n.jpg" width="316" height="500" alt="二号明朝活字書体見本_81"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>その次はかな類が続きます。カタカナ・ひらがなともに、非常に洗練された細身のデザインです。上のツイートにあるように、<a href="https://twitter.com/mashabow" title="mashabow(@mashabow)さん | Twitter">自分の Twitter</a> のヘッダ画像にはこのひらがな部分の写真を使っていますが、プロフィールページを開くたびについつい見とれてしまいます。</p>

<p>あとは記号類が少し並んで終わりです。全84ページ。奥付は以下のようになっています。</p>

<blockquote><p>明治廿六年六月六日印刷<br>
明治廿六年六月十日出版</p>

<p>　　　日本<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%EC%B5%FE%BB%D4">東京市</a>京橋區築地二丁目拾七番地<br>
　　　　　印刷者　　曲田　成<br>
　　　　　印刷所　　東京築地活版製造所</p></blockquote>

<p>というわけで、どうぞご活用ください。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-954870e2" name="f-954870e2" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">というかそもそも自分自身、ほかの人が持っている見本帳をいろいろ見たくてしょうがなかった</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[goshiTKG]]></title>
        <id>https://blog.betaful.life/entry/2015/12/23/153236</id>
        <link href="https://blog.betaful.life/entry/2015/12/23/153236"/>
        <updated>2015-12-23T06:32:36.000Z</updated>
        <summary type="html"><![CDATA[<p>本日3本目の更新になります。この記事は <a href="http://www.adventar.org/calendars/720">TKG Advent Calendar 2015</a> の 23 日目です。昨日は <a href="http://www.adventar.org/users/2729">daruyanagi</a> さんの『<a href="http://daruyanagi.jp/entry/2015/12/22/000000">文明の利器をフル活用して oTKG に挑戦する</a>』でした。</p>

<p>温玉おいしそうでした。かくいう私は最近毎日お弁当に固茹で玉子を入れておりまして、それはフライパンで茹でて 10 分くらい（＋お湯にいれたまま放置 10 分くらい）です。半熟も嫌いじゃないのですが作るの難しいですね。製造機素敵です。</p>

<p>さてさて、それではアラサー毒女の普通の TKG をどうぞ。</p>

<h3>材料</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142039.jpg" alt="f:id:tmd45:20151223142039j:plain:w400" title="f:id:tmd45:20151223142039j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>うちに炊飯器はありません。<a href="http://blog.tmd45.jp/entry/2015/12/23/130639">諸般の事情で普段あまり白米を食べません</a>ので。胡麻と塩昆布は正義です。</p>

<h3>構築</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142824.jpg" alt="f:id:tmd45:20151223142824j:plain:w400" title="f:id:tmd45:20151223142824j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>レンジで温めた直後の輝くご飯と、ミックスサイズの卵です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223142954.jpg" alt="f:id:tmd45:20151223142954j:plain:w400" title="f:id:tmd45:20151223142954j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>お茶碗でいい感じにご飯を崩して、卵を割り入れました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223143050.jpg" alt="f:id:tmd45:20151223143050j:plain:w400" title="f:id:tmd45:20151223143050j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>軽くご飯と混ぜつつ醤油をかけます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223143245.jpg" alt="f:id:tmd45:20151223143245j:plain:w400" title="f:id:tmd45:20151223143245j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>用意した薬味類を盛り付けます。あと隠し味的にごま油をすこーーーしだけたらしました。胡麻のいい香りです。</p>

<h3>実食</h3>

<p>いつもどおりの美味しいお味です。醤油が多少古くても、塩昆布の風味のおかげで美味しい醤油っぽい味になります。胡麻の香りも最高。胡麻と塩昆布は正義です（2回目）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144141.jpg" alt="f:id:tmd45:20151223144141j:plain:w400" title="f:id:tmd45:20151223144141j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>おそまつさまでした。</p>

<h3>おわりに（おまけ）</h3>

<p>普段は朝ごはんか晩ごはんにしか TKG しないので、昼 TKG はちょっと新鮮でした。また子供の頃に食べていた TKG はこんなにいろいろ乗せたりしておらず、この辺は大人になって自分で工夫し始めた点かなと思います。</p>

<p>胡麻と塩昆布は正義です（３回目）。普段は木綿豆腐をレンジで温めたものに、これらの薬味を乗せて食べることが多いです。というわけでタイトルは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Goma">Goma</a> と Shio-konbu の TKG でした。ひねりなし。</p>

<p>TKG 自体、だいぶ久しぶりに食べましたが、やはり美味しいですね。</p>

<p>おまけとして、ちょっと食べ足りなかったので酒のつまみに作ったベーコンチーズも載せておきますね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144412.jpg" alt="f:id:tmd45:20151223144412j:plain:w400" title="f:id:tmd45:20151223144412j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>厚切りベーコン 100g（三割引）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144446.jpg" alt="f:id:tmd45:20151223144446j:plain:w400" title="f:id:tmd45:20151223144446j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>チーズ on the ベーコン and レンジで温め</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223144713.jpg" alt="f:id:tmd45:20151223144713j:plain:w400" title="f:id:tmd45:20151223144713j:plain:w400" class="hatena-fotolife" style="width:400px" itemprop="image"></span></p>

<p>バジルと粗挽き胡椒 on the hot ベーコン</p>

<p>大変美味しゅうございます。オーブンで焼いたほうがきっともっと美味しいです、が面倒なのでレンチンで済ます。</p>

<p>明日は <a href="http://www.adventar.org/users/5462">osapon</a> さんが<a href="http://diary.osa-p.net/2015/12/tkg.html">極々普通の TKG</a> について書いてくださるようです。というか毎日違う Advent Calendar に参加・更新されててすごい。</p>

<p>ではでは。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[さらに3ヶ月経過]]></title>
        <id>https://blog.betaful.life/entry/2015/12/23/130639</id>
        <link href="https://blog.betaful.life/entry/2015/12/23/130639"/>
        <updated>2015-12-23T04:06:39.000Z</updated>
        <summary type="html"><![CDATA[<p>本日2本目の更新。この記事は <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> の 23 日目です。前の回は <a href="http://www.adventar.org/users/6667">Miki Shoji</a> さんのはずですが、その前の記事は <a href="http://www.adventar.org/users/1795">yancya</a> さんの『<a href="http://upec.jp/archives/705">yancya の糖質制限日記</a>』でした。</p>

<p>理性に完全に従う強い心がないと<a href="https://gist.github.com/a-suenami/30b51e90278df694ee61">糖質警察</a>にはなれないな、と思いました。素人（？）には 1日 40g 制限でもかなりキツイです。私は以前とりすぎていた糖質<a href="#f-f4a8f135" name="fn-f4a8f135" title="主にじゃがいもとパスタと菓子類。あと白米の常食はやめましたけど、たまに食べてます。">*1</a>を減らしているだけなので、つらい思いはしていません。<br/>
ちなみに今日はこれから <a href="http://www.adventar.org/calendars/720">TKG Advent Calendar 2015</a> の記事執筆のためにひさびさに TKG（たまごかけごはん）を食べる予定です。</p>

<p>前回の報告からさらに3ヶ月が経過しました。時が経つのは早いですね。</p>

<ul>
<li><a href="http://blog.tmd45.jp/entry/2015/09/23/131225">約半年の結果 - TMD45'β'LOG!!!</a></li>
</ul>


<h3>近況報告</h3>

<p>さて現在どうなってるかといいますと</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223123855.png" alt="f:id:tmd45:20151223123855p:plain" title="f:id:tmd45:20151223123855p:plain" class="hatena-fotolife" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223123904.png" alt="f:id:tmd45:20151223123904p:plain" title="f:id:tmd45:20151223123904p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">【悲報】冬眠準備【微増】</span></p>

<p>目標値はキープしてるので、季節的にもとりあえず増加分はあまり気にしないことにします。できれば体重 50kg 切りたかった＆<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%CE%BB%E9%CB%C3%CE%A8">体脂肪率</a> 22 % 達成したかったですが、忘年会だー年末進行だーオフィス移転だーってね。</p>

<p>オフィス移転が、何の関係があるのかとお思いでしょうが、<i>引っ越し祝いで良いお菓子をたくさんいただいているのです</i>。ありがたいです。お土産の糖質はカウントしません。ありがたくいただきます<a href="#f-6f9a1c45" name="fn-6f9a1c45" title="以前、人様からいただいたものに「糖質だ糖質だ」と言ってましたが大変失礼だったと反省しております。まぁいまも言うだけは言うんですが（大変失礼）">*2</a>。</p>

<p>あと体重が増えてきたのは若干の筋肉増があったからとも考えられます。前回宣言したとおり、少しずつ筋トレ的なことも始めました。</p>

<h3>筋トレ的な話</h3>

<p>通っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>院の先生曰く、運動は歩く量を増やすのが一番健康に良いとのこと。早歩きで1日20分くらい歩きまわるのがいいそうです。そのへんは通退勤で意識しています。体重が減ったおかげか、いつしか辛くなっていた階段の利用も苦じゃなくなっておりまして、駅では階段を使うようにしたりと初歩的なことをやってます。</p>

<p>あと同じく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>の先生に言われたのが、腰痛などを防止するために脚〜お尻の筋肉をつけるとよいという話。なのでお尻の筋トレをやってます。<a class="keyword" href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a> アプリで週に2,3回。</p>

<ul>
<li><a href="https://www.runtastic.com/ja/apps/butttrainer">Runtastic Butt Trainer- Runtastic</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223130027.png" alt="f:id:tmd45:20151223130027p:plain:w270" title="f:id:tmd45:20151223130027p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223130257.png" alt="f:id:tmd45:20151223130257p:plain:w270" title="f:id:tmd45:20151223130257p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span></p>

<p>これが短時間でできるわりに、軽く筋肉痛になるくらいで自分にはちょうどよかったです。室内で出来る程度の動きなのもありがたい。飛んだりはねたり、単身者の賃貸で出来ないですからね…</p>

<p><blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">あ、先生といえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%EF%AA%B5%E4">鍼灸</a>の先生に「筋肉少ししっかりしてきましたね」って褒められた！まだまだ頑張るぞ！</p>&mdash; たま●2日目東ウのどこか (@tmd45) <a href="https://twitter.com/tmd45/status/665479504274440193">2015, 11月 14</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">あとお腹の筋肉も良い感じになってきてると褒められた_(:3 」∠)_</p>&mdash; たま●2日目東ウのどこか (@tmd45) <a href="https://twitter.com/tmd45/status/670479955315159040">2015, 11月 28</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>他人からフィードバックを貰えるのは励みになります。隔週で通ってるのですが、もう先生に褒めてもらうために続けているようなものです。</p>

<h3>おわりに</h3>

<p>はい、そんなわけで。まとまり無いですが、自分の「糖質制限」は無理なく続けていきたいと思います。</p>

<p>冬になったのでまた「きのこ＋葉物野菜＋もやし＋豚肉」アンド「豆腐」の日替わり出汁鍋習慣が始められそう。簡単だし美味いしいっぱい食べられるのでおすすめです。</p>

<p>明日は…あれもう終わり？まだ明日・明後日（それ以外にも…）空きがありますので、興味持たれたかたは参加してみてはいかがでしょうか！</p>

<ul>
<li><a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015 - Adventar</a></li>
</ul>


<p>ではでは。</p>

<p><ins>追記</ins></p>

<p>24 日目 <a href="http://www.adventar.org/users/10505">snaga</a> さんが更新してくださいました！『<a href="http://snaga1024.tumblr.com/post/135763588739/%E6%B8%9B%E9%87%8F%E7%94%9F%E6%B4%BB2015">A Hacker's Memorandum — 減量生活2015</a>』です。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-f4a8f135" name="f-f4a8f135" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">主にじゃがいもとパスタと菓子類。あと白米の常食はやめましたけど、たまに食べてます。</span></p>
<p class="footnote"><a href="#fn-6f9a1c45" name="f-6f9a1c45" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">以前、人様からいただいたものに「糖質だ糖質だ」と言ってましたが大変失礼だったと反省しております。まぁいまも言うだけは言うんですが（大変失礼）</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[受付システムつくってみた（仮）]]></title>
        <id>https://blog.betaful.life/entry/2015/12/23/112220</id>
        <link href="https://blog.betaful.life/entry/2015/12/23/112220"/>
        <updated>2015-12-23T02:22:20.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/906">フィードフォースエンジニア Advent Calendar 2015</a> の 23 日目の記事です。昨日は <a href="http://www.adventar.org/users/1332">kano-e </a> さんの３本目の記事で『<a href="https://gist.github.com/kano-e/f80ab651aa31f60a49c4">自分が文章を書く時と、開発してる時って、実は同じようなこと考えて作業を進めてる</a>』というお話でした！わかる（迫真）</p>

<p>「半年で約8kg痩せて筋肉ムキムキ(予定)になった話 OR (運用されていれば)受付システムの話」という予定でしたが、前者は後ほど <a href="http://www.adventar.org/calendars/740">糖質制限 Advent Calendar 2015</a> に寄せる記事で書こうと思いますので、ここでは後者の話をすることにします。</p>

<p>ただ残念なことにまだ運用は始められていないので、とりあえず作ることにした経緯などエモーショナルい話をしたいと思います。</p>

<h3>オフィス移転するで（したで！）</h3>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fblog.feedforce.jp%2Farchives%2F13833" title="祝！湯島移転！ | フィードフォース全力ブログ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://blog.feedforce.jp/archives/13833">blog.feedforce.jp</a></cite></p>

<p>今年の 10 月下旬、オフィスの移転の話がはっきりしてきた頃にこんなメモをガーッと書いて、社内の Slack に URL を放流。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223101522.png" alt="f:id:tmd45:20151223101522p:plain" title="f:id:tmd45:20151223101522p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>弊社には社内のエンジニア有志が続けている『<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>』<a href="#f-82d5bb38" name="fn-82d5bb38" title="“FFもくもく会” のご紹介！ | feedforce Engineers' blog">*1</a>がありまして、自分もそこで作ってみよう (๑•̀ㅂ•́)و✧ と先のメモをもって宣言してみました。</p>

<p>Qiita のメモを公開した日（<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会</a>開催の木曜日）は「とりあえず <a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> で作ろうかなー」「まずは Heroku で動けばいいや」「社員を管理するモデルとー」みたいな感じで想像を膨らませていただけだったのですが、<strong>その翌日</strong> 。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223102524.png" alt="f:id:tmd45:20151223102524p:plain" title="f:id:tmd45:20151223102524p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">できてる…だと…？！</span> (； ･`д･´)</p>

<p>ゆるふわ銃殺系フロントエンド芸人 @habu0104 兄貴により、だいたいの実装が出来上がっていました。なんということでしょう。スクショが無いんですが、ちゃんと画面側もいい感じに出来上がっていました。</p>

<p>いやー、ほんとフロントエンドすごい。<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a> 界隈すごい。自分の手が遅いのは多分にあるんですが、このスピード感はほんとすごいなぁ。…と関心するとともに、ちょっと心が折れた（笑）</p>

<h3>わたしのかんがえる さいきょうの</h3>

<p>スピード感は完全に負けたわけですが、いろいろと細かいところで「わたしのかんがえる（ry」イメージがありまして、それを叶えるために遅ればせながら自分でも実装を開始。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails</a> セットアップして〜 URL とモデル設計して〜…なんてちまちまこっそり、private repository で作り続けていたのです。が。</p>

<ul>
<li><a href="https://kitayon.co/">Kitayon | オフィス向け受付アプリ Kitayon（キタヨン）</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223105805.png" alt="f:id:tmd45:20151223105805p:plain" title="f:id:tmd45:20151223105805p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><span style="font-size: 150%">ぎゃああああああああああああああ</span> :(；ﾞﾟ'ωﾟ'):</p>

<p>風呂グラマー masuidrive 氏のプロダクトβ発表…なんというタイミング…<a href="#f-5a8c428f" name="fn-5a8c428f" title="ちなみに弊社もβ応募中だったと思う…運用のこと考えたら自前で作るより外部サービス利用したほうが後が楽なんですよねー。私もその後のメンテのこと考えると、こっち使いたい（ぇ">*2</a></p>

<p>これはもう私個人がひとりで作ってるヘボ受付システムなんていらないじゃん。もうこれでいいじゃん。心が折れた（2回目）</p>

<h3>わたしのかんがえる…さい…きょうの…（涙）</h3>

<p>スピード感、大事。</p>

<p>でもでも「わたしのか（ry」イメージを叶えたい一心で実装を続けました。俺得…俺得でいいんや…</p>

<p>というわけで、移転には間に合いませんでしたが、現在なんとか「受付システム」っぽい感じには仕上がっております。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223103923.png" alt="f:id:tmd45:20151223103923p:plain:w270" title="f:id:tmd45:20151223103923p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104203.png" alt="f:id:tmd45:20151223104203p:plain:w270" title="f:id:tmd45:20151223104203p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104458.png" alt="f:id:tmd45:20151223104458p:plain:w270" title="f:id:tmd45:20151223104458p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span> <span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20151223/20151223104510.png" alt="f:id:tmd45:20151223104510p:plain:w270" title="f:id:tmd45:20151223104510p:plain:w270" class="hatena-fotolife" style="width:270px" itemprop="image"></span></p>

<p>まだまだ思い描いている機能の半分もできてないのですが、とりあえず受付できるレベル。恥ずかしながら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード</a>も公開プレイ始めました。</p>

<ul>
<li><a href="https://github.com/tmd45/knock-on">tmd45/knock-on</a></li>
</ul>


<p>年明けくらいには本番環境を作って、社内でテストを始めたいなと思っております。 <del>その前にはやく Kitayon のβ運用始まらないかな。</del></p>

<p>目下の悩みはいま社内に転がってる <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> が初代で <a class="keyword" href="http://d.hatena.ne.jp/keyword/iOS%205">iOS 5</a>.1.1 からバージョンアップできないことですかね。とりあえず動きはしましたが <a class="keyword" href="http://d.hatena.ne.jp/keyword/Safari">Safari</a> で <a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a> Animation が動かなくて悲しい気持ちになりました。<br/>
この受付システムをアピールして、新しい <a class="keyword" href="http://d.hatena.ne.jp/keyword/iPad">iPad</a> を買ってもらえるように頑張りたいと思います (๑•̀ㅂ•́)و✧</p>

<h3>おわりに</h3>

<p>システムのつくりの話には全く触れませんでしたが、いかがでしたでしょうか。</p>

<p>明日はフィードフォースの年中サンタクロース <a href="http://www.adventar.org/users/7217">hoshinotsuyoshi（@hoppiestar）</a>が<a href="http://qiita.com/hoshino/items/7f41d996b66eebd897a0">書いてくれるみたいです</a>。ではでは。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-82d5bb38" name="f-82d5bb38" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://tech.feedforce.jp/ff-mokumoku.html">“FFもくもく会” のご紹介！ | feedforce Engineers' blog</a></span></p>
<p class="footnote"><a href="#fn-5a8c428f" name="f-5a8c428f" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">ちなみに弊社もβ応募中だったと思う…運用のこと考えたら自前で作るより外部サービス利用したほうが後が楽なんですよねー。私もその後のメンテのこと考えると、こっち使いたい（ぇ</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ドラ娘論]]></title>
        <id>https://blog.betaful.life/entry/2015/12/13/000000</id>
        <link href="https://blog.betaful.life/entry/2015/12/13/000000"/>
        <updated>2015-12-12T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/1248">Kosen Advent Calendar 2015 - Adventar</a> の 13 日目の記事です。昨日のカレンダーは空白だったようですが、前回の記事は <a href="http://www.adventar.org/users/7773">Kosuke Ohmura</a> さんの『<a href="http://bnpb.hatenablog.com/entry/2015/12/12/001714">高専をだらだら堕落しながら６年かけて卒業した話</a>』でした。</p>

<p>ボン・ソワール みなさま、@tmd45 です。今日は 4, 5年前に数回ドラ娘を勤めただけ<a href="#f-008eb7d8" name="fn-008eb7d8" title="参考記事:「ドラ娘」て知ってる？ | 非モテタイムズ http://himo2.jp/4338000 まだこの記事残ってる(^q^) 山本ユウカ先生その節は記事ありがとうございましたフヒヒ">*1</a>で、いまは「娘」ですらなくなったアラサー独女の私が思う「ドラ娘」について書き散らしたいと思います。いつか LT か何かで話そうと思って数年経ってしまったのでこの辺で消費しておこうかという感じです<a href="#f-84b535d7" name="fn-84b535d7" title="一部界隈で「ドラ娘」の存在がハラスメント問題として取り沙汰されているようですが、本記事では「LT（ライトニングトーク）の制限時間が来たら大きな音を出してトークを終了させる係のひと」という意味で伝わりやすい名詞として「ドラ娘」と表記しているとご認識ください。「ドラ娘」という存在が気に入らない場合はそっとブラウザを閉じるか、適宜お好きな表現に脳内変換してお読みください。っていうかアドベントカレンダーにそんなヘビーな世論持ちだされても困るでござるよニンニン。">*2</a>。</p>

<h3>銅鑼は権力</h3>

<p>イベントが始まる前に事前に依頼される場合もあるだろう、会場でボァー…っと発表と聞いてたら突然スカウトされることもあるだろう。やりたいと思ってたんだ！と意気込んで銅鑼を握ることもあれば、なんで自分は発表もしないのに壇上に上がらされてるんだ…と思うこともあるだろう。</p>

<p>LT で一番重要なルールは、とにかくどんなにイイ話でも、どんなに本人がまだ話したくても、制限時間がきたらその発表を中止しなければならないという部分である。昨今は少し余裕を持って終えたり、時間ピッタリで綺麗に終わる発表がやたら増えてきているような気がする。それはそれで素晴らしいかもしれないが、「なんか最後までよくわからんかったがガンバったな…っ」とか「言いたいことが／聞きたいことがいっぱいあるのに無情の銅鑼…！」という空気が LT の醍醐味だと、私は思う。</p>

<p>その無情の銅鑼を鳴らすのは他ならぬドラ娘である。</p>

<p>発表者はどんな権力や身分を持っていようと、銅鑼が鳴ったら発表を切り上げなければならない。たとえそれが先輩であろうと、校長であろうと、著名な講演者であろうと、LTの銅鑼の音の前で彼らは等しく平等であり、（タイマーと）銅鑼の音が権力を持つのだ。</p>

<h3>発表者の息の根を止める</h3>

<p>気の抜けた銅鑼の音では、発表者や聴衆の "情熱" は止められない。そんな屁のような銅鑼より、この発表をやりきりたい！面白い話を聞きたい！…そんな彼らの思いが勝ってしまう。</p>

<p>しかし LT はテンポが重要である。それはイベントのタイムスケジュールにも影響するし、次に次にと控えている発表者たちのリズムを崩し、結果的になぁなぁな雰囲気の原因となってしまう。</p>

<p>ドラ娘は、発表を中断するために発表者の息の根を止める、次の発表に向けるために聴衆の息の根を止める、この一打で仕留める…！そんな気持ちで銅鑼を叩くのだ。</p>

<h3>ドラ娘は楽しい</h3>

<p>権力と殺意を秘めつつ、LT はやはりその発表を楽しむ場だ。ドラ娘として壇上に上げられて緊張するだろうが、タイマーを見るのに気を取られすぎて全く発表を聞いていなかった…ということではやはり勿体無い。</p>

<p>タイマーを忘れて本末転倒になるのはまずいが、発表自体を楽しむことはドラ娘にも許されることだ。ラスト30秒くらいから少し気を張り、10秒前になったら静かに構えに入り、時間になったら殺意を込めて打ち鳴らせばよい。</p>

<p>また、壇上は発表者の（だいたいは）一番近くで発表を聞ける特等席である。発表を存分に楽しんで聞こう。</p>

<h3>おわりに</h3>

<p>以上が、ドラ娘を経験し、他のドラ娘たちを見てきた私の「ドラ娘論」である。今後、銅鑼を握る諸君に何か伝わるものがあれば嬉しい。</p>

<p>…なんてね〜〜<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A3%A5%EB%A5%AD%A5%F3%A5%BD%A5%F3">ウィルキンソン</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%F3%A5%B8%A5%E3%A1%BC%A5%A8%A1%BC%A5%EB">ジンジャーエール</a>ウォッカとさけるチーズうめぇ〜〜〜。うへへぇ。</p>

<p>というわけで明日は <a href="http://www.adventar.org/users/4958">myu_mx</a> さんが<a href="http://myumx.blog135.fc2.com/blog-entry-172.html">就職して感じたことというテーマで書いてくれる</a>そうです。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-008eb7d8" name="f-008eb7d8" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">参考記事:「ドラ娘」て知ってる？ | <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%F3%A5%E2%A5%C6">非モテ</a>タイムズ <a href="http://himo2.jp/4338000">http://himo2.jp/4338000</a> まだこの記事残ってる(^q^) 山本ユウカ先生その節は記事ありがとうございましたフヒヒ</span></p>
<p class="footnote"><a href="#fn-84b535d7" name="f-84b535d7" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">一部界隈で「ドラ娘」の存在がハラスメント問題として取り沙汰されているようですが、本記事では「LT（ライトニングトーク）の制限時間が来たら大きな音を出してトークを終了させる係のひと」という意味で伝わりやすい名詞として「ドラ娘」と表記しているとご認識ください。「ドラ娘」という存在が気に入らない場合はそっとブラウザを閉じるか、適宜お好きな表現に脳内変換してお読みください。っていうか<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー</a>にそんなヘビーな世論持ちだされても困るでござるよニンニン。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[同型類字集 明朝体]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2015/11/28/235613</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2015/11/28/235613"/>
        <updated>2015-11-28T14:56:13.000Z</updated>
        <summary type="html"><![CDATA[<p>前回の記事「<a href="http://shiromoji.hatenablog.jp/entry/2015/11/16/003831">同型類字集 等線体</a>」のつづきです。</p>

<p>『同型類字集 等線体』の方は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%BC%CF%C217%C7%AF">昭和17年</a>（1942年）12月発行でしたが、こちらの『同型類字集 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>』は3ヶ月後の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%BC%CF%C218%C7%AF">昭和18年</a>（1943年）3月発行となっています。等線体が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>になっている以外は、まったく同じ体裁・内容のようです。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/albums/72157658898415004" title="同型類字集 明朝体"><img src="https://farm6.staticflickr.com/5811/22412698983_585e1fe075_c.jpg" width="800" height="534" alt="同型類字集 明朝体"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>上の画像をクリックすると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Flickr">Flickr</a> でファイルが閲覧できます。例によって PDF にまとめたものも用意しましたので、必要な方は下のページからどうぞ。</p>

<ul>
<li><a href="http://shiromoji.net/pd/" title="資料置き場 - しろもじ作業室">資料置き場 - しろもじ作業室</a></li>
</ul>


<p>例示されている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>を見てみると、やや直線的で整理された感じの雰囲気になっています。字体の省略や簡略化も見られますが、この処理は等線体のものと完全に一致しているようで、字体の整理・統一への意識が読み取れます。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/22412698983/in/album-72157658898415004/" title="同型類字集_明朝体_02"><img src="https://farm6.staticflickr.com/5811/22412698983_585e1fe075_c.jpg" width="800" height="534" alt="同型類字集_明朝体_02"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>他の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>と比べて特徴的なのは、撥ねの処理でしょうか。上の画像でわかるように、「力」や「巾」の撥ねが省略され、終筆を止めています。その一方で、「刂」や「寸」の撥ねはそのままの形で残っており、ちょっと不統一な感じもします。この撥ねる・撥ねないの間に、なにか法則性はあるんでしょうか…？　わかる方いましたらぜひ教えてください。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/23020355232/in/album-72157658898415004/" title="同型類字集_明朝体_01"><img src="https://farm1.staticflickr.com/676/23020355232_b1c6fe656c_c.jpg" width="800" height="534" alt="同型類字集_明朝体_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>さて、上の画像の左ページは表紙裏にあたる箇所ですが、ここにはこんな注意書きが書かれています。</p>

<blockquote><p>一、一般字典ノ例ニ拠ルコトナク結体又ハ点画ヲ同シウスルモノニ分類編纂シ以テ練習ニ便ナラシム</p>

<p>二、本所載以外ノ文字ヲ必要トスル場合ハ末尾ニ添付シアル扁旁部首ニヨリ所要ノ扁旁冠脚等ニ供シ得ル文字ヲ選出シ適宜組成スルモノトス<br>
煩字及略字ハ別ニ示ス</p>

<p>備考<br>
本類字集ノ字画ハ普通大ノ註記ニ適用スル為メ定メタルモノニシテ字高大ナル註記ニ在リテハ字典ヲ参照シ点画ヲ適宜粉飾スルコトヲ得</p></blockquote>

<p>といっても、個人的に気になるのはその内容ではなく、印刷されている文字の方です。地図や海図の製作には早くから写植が導入されていたようですが、このページの文字も写植で打たれており<a href="#f-2e730007" name="fn-2e730007" title="巻末の「扁旁部首」もそうです。">*1</a>、写真植字機研究所（のちの写研）の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>のように見えます。しかしよく見てみると、2行目の「習」や3行目の「場」など、普通の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>とはちょっと変わっていませんか…？</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20151206/20151206142130.jpg" alt="f:id:mashabow:20151206142130j:plain" title="f:id:mashabow:20151206142130j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>どうもこれは、この『同型類字集 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>』で示されているとおりに、写植の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>を修整しているようなのです。さらによく見てみると、1行目の「據」や2行目「編」などの撥ねも、しっかり取り除かれていることがわかります。写植で普通に印字したものを器用に修整したんでしょうか。それとも独自仕様の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>の文字盤なんてものがあったんでしょうか。いずれにせよ、なかなかのこだわりです。</p>

<p>この『同型類字集』と関係あるのかないのか、『地図用文字』なる本があると知ったので、こちらも気になる今日このごろです。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">機械彫刻標準書体がまたプチ盛り上がりをしてたようなので、たしか昔見本帳買ったような……と思ったら全然違った。『地図用文字』だった。地図に使われる書体は「等線体」といって均等な太さの線で書かれた文字ですが郡名には隷体を使うみたい <a href="https://t.co/kAH0y4Jhb9">pic.twitter.com/kAH0y4Jhb9</a></p>&mdash; <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%D0%A4%EB%A4%DC%A4%E9">ばるぼら</a> (@bxjp) <a href="https://twitter.com/bxjp/status/669209443838529536">2015, 11月 24</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="footnote">
<p class="footnote"><a href="#fn-2e730007" name="f-2e730007" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">巻末の「扁旁部首」もそうです。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[同型類字集 等線体]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2015/11/16/003831</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2015/11/16/003831"/>
        <updated>2015-11-15T15:38:31.000Z</updated>
        <summary type="html"><![CDATA[<p>何ヶ月か前に、『同型類字集 等線体』『同型類字集 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>』という小冊子を入手しました。
<a href="https://ja.wikipedia.org/wiki/%E9%99%B8%E5%9C%B0%E6%B8%AC%E9%87%8F%E9%83%A8" title="陸地測量部 - Wikipedia">陸地測量部</a>が戦時中に作ったもので、地図に書き入れる文字のレタリング見本・字体見本のようです。</p>

<p>冊子を綴じてあったホチキスが錆びていたこともあり、せっかくなのでスキャンして公開してみることにしました。今日はまず、昭和17年（1942年）12月発行の『同型類字集 等線体』です。部屋にある家庭用<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%B9%E7%B5%A1">複合機</a>（ブラザー DCP-J940N）を使い、600 dpi のグレースケールでスキャンしました。</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/95996414@N02/albums/72157661240115675" title="同型類字集 等線体"><img src="https://farm6.staticflickr.com/5817/22412436603_240016723f_c.jpg" width="800" height="534" alt="同型類字集 等線体"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>上の画像をクリックすると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Flickr">Flickr</a> でファイルが閲覧できます。なお、入手時点で冊子末尾の数ページが欠落していたため、「扁旁部首」の6画の途中で終わっています。PDF にまとめたものも用意しましたので、下のページからダウンロードしてください。</p>

<ul>
<li><a href="http://shiromoji.net/pd/" title="資料置き場 - しろもじ作業室">資料置き場 - しろもじ作業室</a></li>
</ul>


<p>この等線体は見ての通り、ポキポキとした直線的な感じの書体になっています。フトコロも広く、払いがぐっと左右外側に向かっているのも特徴的です。昔のレタリング文字ではよく見ますが、そういえば現代のフォントにはこういうデザインあまりないですね。字体に関していえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA">常用漢字</a>ほどではありませんが、ちょこちょこと省略・簡略化がみられます。違いがさりげなさすぎて見落としそうなものも……。</p>

<p>次回は『同型類字集 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>』の予定です。（→ <a href="http://shiromoji.hatenablog.jp/entry/2015/11/28/235613">書きました</a>）</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[はてなブログに引っ越してきました]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/2015/07/20/022009</id>
        <link href="https://shiromoji.hatenablog.jp/entry/2015/07/20/022009"/>
        <updated>2015-07-19T17:20:09.000Z</updated>
        <summary type="html"><![CDATA[<p>いままでこのブログは<a href="http://d.hatena.ne.jp/">はてなダイアリー</a>というサービスを使っていましたが、同社の後継サービスである<a href="http://hatenablog.com/">はてなブログ</a>の機能が充実してきたようなので、こちらに引っ越してきました。URL は以下のように変更になります。</p>

<ul>
<li>旧：<a href="http://d.hatena.ne.jp/mashabow/">http://d.hatena.ne.jp/mashabow/</a></li>
<li><strong>新：<a href="http://shiromoji.hatenablog.jp/">http://shiromoji.hatenablog.jp/</a></strong></li>
</ul>


<p>過去記事はもちろんのこと、記事へ寄せていただいたコメントや<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A5%D6">はてブ</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%B9%A5%BF%A1%BC">はてなスター</a>も、一緒に移行されているはずです。
また、旧URLへアクセスすると、自動的に新URLにリダイレクトされるようになっています。
昔の記事については、いま読み返してみるといろいろとはずかしいことが書いてあったりしそうですが（読み返せてない）、恥を忍んでそのまま晒しておくことにします。
リンク切れや古い情報もそのままになっていますので、ご注意ください。</p>

<p>引っ越してきたのでこれからバリバリ記事書きます！！などというわけでもないのですが、よろしくお願いいたします。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[タイププロジェクト株式会社に入社しました]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20150419/1429456773</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20150419/1429456773"/>
        <updated>2015-04-18T15:19:33.000Z</updated>
        <summary type="html"><![CDATA[<p>おひさしぶりです。mashabow です。</p><p>4月15日付けで<a href="http://typeproject.com/">&#x30BF;&#x30A4;&#x30D7;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x682A;&#x5F0F;&#x4F1A;&#x793E;</a>に入社しました。AXISフォントやTP明朝を作っているフォントメーカーです。数年前からバイトのようなかたちでちょこっと仕事をしていましたが、そのまま正社員として働くことになりました。</p><p>職種としては、タイプエンジニア（フォントエンジニアとも）というものになります。裏方的な役割なのであまり聞き慣れないかもしれません。具体的には、デザイナーが作ったグリフをまとめてちゃんと動くフォントファイルを作ったり、フォント制作で使うお役立ち<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を作ったり、……といったもろもろをする仕事です。自分自身でデザインをするわけではありませんが、デザイナーをはじめ他のスタッフとともに、すばらしいフォントを世の中に送り出していきたいと思います。</p>

<div class="section">
    <h4>その他のご報告</h4>
    
<div class="section">
    <h5>大学を卒業しました</h5>
    <p>3月でようやく大学を卒業しました。<a href="http://togetter.com/li/213879">87&#x5E74;&#x751F;&#x307E;&#x308C;</a>なので、とっくの昔に卒業していたはずなんですが、おかしいな…。ちなみに、<a href="http://www.gavo.t.u-tokyo.ac.jp/">&#x5E83;&#x702C;&#x30FB;&#x5CEF;&#x677E;&#x7814;&#x7A76;&#x5BA4;</a>というところで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%EA%BD%F1%A4%AD">手書き</a>漢字フォントの生成について研究をしていました。いずれどこかで発表できたらと思います。</p>

</div>
<div class="section">
    <h5>右足首を骨折しました</h5>
    <p>先月の話ですが、確定申告に行く途中に階段ですっころんで右足首を骨折しました。手術とリハビリのおかげで、ようやく普通に歩けるようになってきたところです。痛みはそれほどでもありませんでしたが、右足が使えずなかなかに不便でした。卒業式に出られなかったり、4月1日の入社がズレたりというのは、すべてコイツのせいです。ご迷惑をおかけしました。みなさまもどうぞお気をつけください。</p>

</div>
<div class="section">
    <h5>4月23日（木）にトークショーがあります</h5>
    <p>今週の23日に、タイププロジェクト代表の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%B8%F9">鈴木功</a>が、長谷川踏太さんと対談を行います。</p>

<ul>
<li><a href="http://www.pen-online.jp/news/info/Pen-Type-Project-DAIKANYAMA-T-SITE/">Pen&times;Type Project 4&#x6708;23&#x65E5;&#xFF08;&#x6728;&#xFF09; DAIKANYAMA T-SITE&#x306B;&#x3066;&#x3001;&#x516C;&#x958B;&#x30AF;&#x30EA;&#x30A8;&#x30FC;&#x30BF;&#x30FC;&#x5BFE;&#x8AC7;&#x958B;&#x50AC;&#xFF01; | News | Pen Online</a></li>
</ul>
    <blockquote cite="http://www.pen-online.jp/news/info/Pen-Type-Project-DAIKANYAMA-T-SITE/">
        <p>「フォントをデザインする人、フォントでデザインする人。」</p><p>「AXIS Font」や「TP明朝」など、革新的なフォントを生みだすタイププロジェクト代表・タイプディレクターの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%B8%F9">鈴木功</a>氏と、インターネット広告や<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A1%BC%A5%DD%A5%EC%A1%BC%A5%C8%A5%A2%A5%A4%A5%C7%A5%F3%A5%C6%A5%A3%A5%C6%A5%A3">コーポレートアイデンティティ</a>などの分野で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6">インタラクティブ</a>な作品を発表し続けるクリエイティブディレクターの長谷川踏太氏。おふたりによるトークショーを、DAIKANYAMA T-SITE GARDEN GALLERYにて4月23日（木）に開催します。当日は、書体とメガネの機能的・デザイン的な共通点に着想を得て、長谷川氏が立ち上げた話題のメガネブランド「TYPE」や、タイププロジェクトが提案する「都市フォント」プロジェクトなど、フォントをめぐる様々なトークを展開。また、コーポレート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0">ブランディング</a>に向けたタイププロジェクトの試みなども語られる予定です。私たちの暮らしを彩るフォントの奥深さに気づかせてもらえる貴重なクロストーク。入場は無料となっていますので、ぜひご参加ください。（Pen編集部）</p>

        <cite><a href="http://www.pen-online.jp/news/info/Pen-Type-Project-DAIKANYAMA-T-SITE/">Pen&times;Type Project 4&#x6708;23&#x65E5;&#xFF08;&#x6728;&#xFF09; DAIKANYAMA T-SITE&#x306B;&#x3066;&#x3001;&#x516C;&#x958B;&#x30AF;&#x30EA;&#x30A8;&#x30FC;&#x30BF;&#x30FC;&#x5BFE;&#x8AC7;&#x958B;&#x50AC;&#xFF01;</a></cite>
    </blockquote>
<p>先週末時点ではまだ空きがあるとのことだったので、興味ある方はぜひどうぞ。応募フォームは上記告知ページの記事末尾から。入場無料でおまけがついてくるみたいです。</p>

</div>
</div>
<div class="section">
    <h4>というわけで</h4>
    <p>今回のご報告は以上です。ここしばらくはイベントや<a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>・ブログなどから遠ざかっていましたが、またぼちぼち顔を出していければと思います。今後ともどうぞよろしくお願いいたします。</p>

</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sphero と遊ぼう！にゃんこ編～僕にペットはいないけど #sphero #gosphero]]></title>
        <id>https://blog.betaful.life/entry/2013/12/08/135230</id>
        <link href="https://blog.betaful.life/entry/2013/12/08/135230"/>
        <updated>2013-12-08T04:52:30.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/142">Sphero Advent Calendar 2013</a> のエントリーです。前回は 12 月 5 日、<a href="http://blog.champierre.com/1031">jishiha &#x3055;&#x3093;&#x306E;&#x300E;Sphero&#x306E;&#x30A4;&#x30B1;&#x3066;&#x308B;PV&#x52D5;&#x753B;7&#x9023;&#x767A;&#x300F;</a> でした。</p>

<p>jishiha さんにはその前日2日間も、Scratch から Sphero を動かす記事を投稿していただいてます！ありがとうございました。</p>

<ul>
<li><a href="http://blog.champierre.com/1029">Sphero &#x3092; Scratch(&#x30B9;&#x30AF;&#x30E9;&#x30C3;&#x30C1;)&#x304B;&#x3089;&#x52D5;&#x304B;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x305F;&#x306E;&#x3067;&#x3053;&#x3069;&#x3082;&#x3067;&#x3082;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x3067;&#x304D;&#x308B;&#x3088; - &#x50D5;&#x306F;&#x767A;&#x5C55;&#x9014;&#x4E0A;&#x6280;&#x8853;&#x8005;</a></li>
<li><a href="http://blog.champierre.com/1030">&#x30B9;&#x30AF;&#x30E9;&#x30C3;&#x30C1;&#x304B;&#x3089;Sphero&#x3092;&#x30D6;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x3067;&#x304D;&#x308B;Scratch2Sphero&#x3092;&#x6539;&#x826F;&#x3057;&#x307E;&#x3057;&#x305F; - &#x50D5;&#x306F;&#x767A;&#x5C55;&#x9014;&#x4E0A;&#x6280;&#x8853;&#x8005;</a></li>
</ul>


<p>さて今回は、せっかくの休日担当ですし Sphero を持ってピクニックにでもと思ったのですが、肝心の Sphero を会社に忘れてくるという大失態をやらかしましたので、撮ってくるはずだった動画をネット上から探してお茶を濁したいと思います。やだ苦～い。</p>

<p>ちなみに「わんこ編」はありませんヨ、猫派だから。犬動画は犬派な方がまとめてくれればいいと思う。</p>



<h3>まずは公式から</h3>

<iframe src="//youtube.googleapis.com/v/_cgKRUNvwDU&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><a href="http://www.youtube.com/watch?v=_cgKRUNvwDU">Sphero + Cats - YouTube</a></p>

<p>＼にゃうぉー／</p>

<p><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1226267957">ウカカカ</a>してる子もいますね。Sphero 本体これはプロトタイプ版か何かなんでしょうか、全部透明ですね。<br/>
中身が動くことに興味を持ってる子もいたようなので、<a href="http://store.apple.com/jp/product/HD162LL/A/orbotix-sphero-20-%E3%83%AD%E3%83%9C%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%9C%E3%83%BC%E3%83%AB?fnode=39">やっぱりスケルトンは面白そう</a>です。</p>

<h3>世界の猫たち</h3>

<iframe src="//youtube.googleapis.com/v/XPfaY6EUYgQ&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><a href="http://www.youtube.com/watch?v=XPfaY6EUYgQ">Schnurrli and the Sphero - YouTube</a></p>

<p>だらーん…ケリケリケリケリ…だらーん。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/D_XGD3_dNYc" frameborder="0" allowfullscreen></iframe>


<p><a href="http://www.youtube.com/watch?v=D_XGD3_dNYc">Kittens playing with Sphero! - YouTube</a></p>

<p>子猫も夢中。<br/>
この Sphero は公式動画と同じく紐がつけてありますね。猫まっしぐら。</p>

<p>You Tube で <code>sphero cat</code> で検索して癒やされよう。癒やされた。</p>

<p>ちょっと絞り込みが難しいのでここに貼るのは断念しましたが、instagram でもたくさんの Sphero 動画が上がってます。猫動画もちらほら。<br/>
以下にご紹介するサイトは instagram の写真をタイル形式で見たりタグで検索できる <a href="http://ink361.com/">INK361</a> というサイトです。</p>

<ul>
<li><a href="http://ink361.com/app/tag/sphero">tags #sphero photos</a></li>
</ul>


<h3>さらにふたたび公式から…Nyan！</h3>

<iframe width="560" height="315" src="//www.youtube.com/embed/cjllV3_Ns7Y" frameborder="0" allowfullscreen></iframe>


<p><a href="http://www.youtube.com/embed/cjllV3_Ns7Y">Sphero Nyan Cat SpaceParty - YouTube</a></p>

<p>NYAN-CAT…いったい何者なんだ…！</p>

<ul>
<li><a href="http://www.nyan.cat/original.php">NON-STOP NYAN CAT!</a></li>
</ul>


<p>猫だけど、ペットではないな。動画にもあるとおり、Sphero のゲームで NYAN-CAT を使ったものがありますよ。</p>

<ul>
<li><a href="https://itunes.apple.com/us/app/nyan-cat-space-party!/id584287063?mt=8">Nyan Cat - Space Party! on the App Store</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.orbotix.spaceparty">Sphero Nyan Cat &#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x30D1;&#x30FC;&#x30C6;&#x30A3;! - Google Play &#x306E; Android &#x30A2;&#x30D7;&#x30EA;</a></li>
</ul>


<p>さて次回は、1日空いて() kenji.horie さん、かな？</p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ころころ可愛い♡なのに高性能！Orbotix Sphero 2.0 が面白い #sphero #gosphero]]></title>
        <id>https://blog.betaful.life/entry/2013/12/01/001418</id>
        <link href="https://blog.betaful.life/entry/2013/12/01/001418"/>
        <updated>2013-11-30T15:14:18.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/142">Sphero Advent Calendar 2013</a> の1日目のエントリーです！</p>

<p>最初の一日目<s>そしてこれで最後になるかもしれない一日目</s>は、Spheroについてご紹介をしたいと思います。念のため言っておきますがステマ記事では無いですよ～。個人的なガチマです。</p>

<h2>Sphero ってなに？</h2>

<p>Orbotix社製、ポケットに入るボール状のモバイルゲームロボットです。<br/>
「スフィーロ」と読みます。名前からしてカッコイイですね。</p>

<ul>
<li><a href="http://www.gosphero.com/">&#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;&#xFF08;&#x82F1;&#x8A9E;&#xFF09;</a></li>
<li><a href="http://www.gosphero.com/ja/">&#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;&#xFF08;&#x65E5;&#x672C;&#x8A9E;&#xFF09;</a></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20131130/20131130181312.png" alt="f:id:tmd45:20131130181312p:plain" title="f:id:tmd45:20131130181312p:plain" class="hatena-fotolife" itemprop="image"></span></p>


<p>キャプチャは日本語サイトのトップから。見た目にも未来を感じます。<br/>
<s>…英語のキャッチコピー、日本語にするとすごく胡散臭くなるのはなんででしょうか。英語でも胡散臭いのかな。</s></p>



<p>無断階で変化するカラーLED。非接触式充電。階段から落ちたり、水の中に入れても大丈夫な衝撃・防水対応。Bluetoothで接続してiOS/Androidアプリから操作が可能です。</p>

<p>2.0 は旧Spheroに比べてスピードアップ・機能性アップがされたとのこと。手に入れる前は、どうせ停止動作とかぐだぐだで、自転に負けてすぐに止まったりはしないだろうとゆるく考えていたのですが、これがなかなかピタッと止まってびっくりしました。</p>

<p>スピードもかなり出せる（ゆっくりもできる）ので、おもいっきり遊ぶには広い室内や公園などの外がおすすめかも。ペットを飼っているひとには、ペットのいい遊び相手になってくれるかもしれません（そんな動画もいっぱいあります）。</p>

<p>ちなみに、<b>手に入れるきっかけ</b>は。</p>

<p><a href="http://tech.feedforce.jp/">自社の勉強会</a>でちょこっと名前が出てきた程度だったのですが、真っ白でカッコイイ見た目が気になって、PVを見て、気づいたら買ってました٩(๑❛ᴗ❛๑)۶</p>

<h2>どんなふうに遊べるの？</h2>

<p>公式PVもカッコイイのですが、こちらのレビュー動画のほうが機能などはわかりやすいかも。</p>

<p><a href="http://www.macworld.com/article/2047002/review-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html">Review: Sphero 2.0 is a brighter, faster, smartphone-controlled ball of fun | Macworld</a></p>

<object id="flashObj" width="480" height="270" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,47,0"><param name="movie" value="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" /><param name="bgcolor" value="#FFFFFF" /><param name="flashVars" value="videoId=2622920079001&linkBaseURL=http%3A%2F%2Fwww.macworld.com%2Farticle%2F2047002%2Freview-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html&playerID=2577467285001&playerKey=AQ~~,AAACV85RErE~,AhFpv0ECqwFfthhmRu5jnOs8FUs2r9mP&domain=embed&dynamicStreaming=true" /><param name="base" value="http://admin.brightcove.com" /><param name="seamlesstabbing" value="false" /><param name="allowFullScreen" value="true" /><param name="swLiveConnect" value="true" /><param name="allowScriptAccess" value="always" /><embed src="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" bgcolor="#FFFFFF" flashVars="videoId=2622920079001&linkBaseURL=http%3A%2F%2Fwww.macworld.com%2Farticle%2F2047002%2Freview-sphero-2-0-is-a-brighter-faster-smartphone-controlled-ball-of-fun.html&playerID=2577467285001&playerKey=AQ~~,AAACV85RErE~,AhFpv0ECqwFfthhmRu5jnOs8FUs2r9mP&domain=embed&dynamicStreaming=true" base="http://admin.brightcove.com" name="flashObj" width="480" height="270" seamlesstabbing="false" type="application/x-shockwave-flash" allowFullScreen="true" allowScriptAccess="always" swLiveConnect="true" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></embed></object>


<p>公式アプリはiOSのもので25種類あります。Andoroid版は見れてないのでわかりませんが、同じだけあるはず。</p>

<p>単なるコントローラーだけでなく、画面に線を書いてそのとおりに走らせたり、画面内でAR（仮想現実）と組み合わせたり、Sphero自体をコントローラーにしてシューティングゲームをしたりできるアプリが揃っています。</p>

<ul>
<li><a href="http://www.gosphero.com/ja/games/">Sphero&#x516C;&#x5F0F;&#x30A2;&#x30D7;&#x30EA;&#x4E00;&#x89A7;</a></li>
</ul>


<p>この中で『<b>orbBasic for Sphero</b>』というアプリはスマートフォン上で orbBasic という言語を使ってSpheroの動きをプログラミングできます。<br/>
もっとかんたんに動きをカスタマイズしたい場合は『<b>Sphero MacroLab</b>』を使いましょう。こちらは「用意されている定型文を組み合わせる」だけで好きな動きに調整することができます。</p>

<h4>さらにカスタマイズしたい人は！</h4>

<p><a href="http://orbotixinc.github.io/Sphero-Docs/">&#x958B;&#x767A;&#x8005;&#x5411;&#x3051;&#x30DA;&#x30FC;&#x30B8;</a>から Sphero の SDK が入手できます。公式で iOS, Android, Unity, Windows 8.1。非公式のもので Node や Windows Phone、Ruby や Python のライブラリもあります。</p>

<p>Bluetooth接続できる環境があればよく、私も十数分で MacBook Air から Ruby のコードをポチポチして動かすことができました！<s>その辺については次の記事で先輩が書いてくれるはず…！</s></p>

<p>いろいろ夢がひろがりんぐガジェットです。</p>

<h2>どこで手に入るの？</h2>

<p>日本では<a href="http://www.amazon.co.jp/dp/B00F91XFJS">Amazon</a>や<a href="http://www.softbankselection.jp/cart/ProductDetail.aspx?sku=0851897003083">Softbank Selection</a>、<a href="http://www.appbankstore.jp/products/detail.php?product_id=3870">AppBank Srore</a>から購入できます。その他は<a href="http://www.gosphero.com/ja/retail-partners/">&#x8CA9;&#x58F2;&#x5E97;&#x8217;&#x306E;&#x30DA;&#x30FC;&#x30B8;</a>からチェックしてみてください。お値段、約1万5千円…<b>高い</b>と取るかはひとそれぞれ…。さらに<a href="http://store.apple.com/jp/product/HD162LL/A/orbotix-sphero-20-%E3%83%AD%E3%83%9C%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%9C%E3%83%BC%E3%83%AB?fnode=39">Apple Store</a>では<b>Apple限定バージョン</b>として、<b>本体（と充電クレードル）の一部が<span style="color: #0000cc">スケルトン</span>になっているモデル</b>が販売されています。</p>

<p>AppleモデルのPVはなんかズルい！</p>

<iframe src="https://youtube.googleapis.com/v/reXJnYvJ5M8&amp;source=uds" allowfullscreen="" frameborder="0" height="315" width="420"></iframe>


<p><br><a href="http://www.youtube.com/watch?v=reXJnYvJ5M8">Sphero 2.0 Revealed: Exclusively at Apple - YouTube</a></p>

<p>お子様をお持ちのお父さま・お母さま、息子さんがギークに育ちますよ。どうですか。</p>

<p>私はAmazonで購入しましたが、会社の先輩がApple版を買っていて、大変悔しい思いをしました。<b>中身のモーターなどが見えるので面白い！</b></p>

<p>つい最近、日本でもSphero用のゴム製カバー <a href="http://www.amazon.co.jp/dp/B00GRSMRVY">Nubby Cover</a> が発売されました。室内で遊ぶときにカーペットのシワに負けて（ツルツルすべってしまって）進まないことがあるのですが、でこぼこのついたカバーでそういう心配もなくなりますね。屋外で遊ぶときの傷防止にも！</p>

<h2>最後に</h2>

<p>いかがでしょうか。みなさん欲しくなってきたんじゃありません？<br/>
ひとりで一個だけ持ってても楽しくないので、みなさんいっぱい買って持ち寄って遊べたらいいですね。持ち寄って遊べたらいいですね。</p>

<p><a href="http://qiita.com/kano-e/items/876bf0cadc3056f7588f">2日目の記事は kano-e さんの『Ruby - Sphero gem で Sphero を操作してみる』</a>です。おたのしみに。</p>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[官報に使われた印刷局の康煕字典活字]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130727/1374994117</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130727/1374994117"/>
        <updated>2013-07-27T06:48:37.000Z</updated>
        <summary type="html"><![CDATA[<p>去年の11月、<a href="http://kindai.ndl.go.jp/">&#x8FD1;&#x30C7;&#x30B8;</a>で『<a href="http://kindai.ndl.go.jp/info:ndljp/pid/1459197">&#x5185;&#x95A3;&#x5370;&#x5237;&#x5C40;&#x4E03;&#x5341;&#x5E74;&#x53F2;</a>』という本をパラパラ見ていたら、こんなことが書いてあった（強調は引用者）。</p>

    <blockquote cite="http://kindai.ndl.go.jp/info">
        <p>其の後三十一年十一月<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%E2%B3%D5%C9%DC">内閣府</a>官報局と併合してより、更に活<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BB%FA%CA%EC">字母</a>型の改造に努む。三十六年二月<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%A4%A5%CE%A5%BF%A5%A4%A5%D7">ライノタイプ</a>を購入設備し欧文印刷の便を図る。又<em>四十五年以来<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>の字体を基礎として活字字体の改造を企て、殿版<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>に依ることとし</em>、同時に鋳造方法の改良をも計画し独逸及び米国より母型彫刻機四台を購入し、繁雑なる旧式方法を廃しニツケルと銅との合成金に直接彫刻して母型を得、之に依りて鋳造するの方法に革め、大いに製造能率の増進を見たり。而して官報印刷に使用する活字の如きは、専ら此の方法に依りて鋳造したるものを用ふ。又大正五六年の頃「ポイント」式活字の鋳造に着手せしが、七年十二月に至り五号活字に代はるべき九「ポイント」活字成り、八年末六号活字に代はべき<a href="#f-27c32a01" name="fn-27c32a01" title="ママ">*1</a>八「ポイント」活字の新造に尋いで十一年十二「ポイント」新活字等完成す。<em>此等の活字は何れも前記字典の文字を写真に依り縮写したる当局独特のものにして、字画正確、字体鮮明なるのみならず、一種の風韻を持するの故を以て大いに識者の好評を得たり</em>。</p>

        <cite><a href="http://kindai.ndl.go.jp/info:ndljp/pid/1459197/82">&#x300E;&#x5185;&#x95A3;&#x5370;&#x5237;&#x5C40;&#x4E03;&#x5341;&#x5E74;&#x53F2;&#x300F;&#x5185;&#x95A3;&#x5370;&#x5237;&#x5C40;&#x3001;1943&#x5E74;&#x3001;pp. 114&ndash;115</a></cite>
    </blockquote>
<p>そんな活字があっただなんて寡聞にして知らなかったので、へーと思って <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> でつぶやいた。</p><p><script>    window.twttr = (function(d, s, id) {        var js, fjs = d.getElementsByTagName(s)[0],            t = window.twttr || {};        if (d.getElementById(id)) return t;        js = d.createElement(s);        js.id = id;        js.src = "https://platform.twitter.com/widgets.js";        fjs.parentNode.insertBefore(js, fjs);        t._e = [];        t.ready = function(f) {            t._e.push(f);        };        return t;    }(document, "script", "twitter-wjs"));</script><script>    twttr.ready(function (twttr) {        var el = document.getElementsByClassName('twitter-syntax-tweet-id-271917646210035713');        for (var i=0;i<el.length;i++) {            if (!!el[i].getAttribute('data-is-tweet-loaded')){                continue;            }            el[i].setAttribute('data-is-tweet-loaded', '1');            twttr.widgets.createTweet('271917646210035713',el[i],{});        }    });</script><div class="twitter-syntax-tweet-id-271917646210035713"></div><script>    window.twttr = (function(d, s, id) {        var js, fjs = d.getElementsByTagName(s)[0],            t = window.twttr || {};        if (d.getElementById(id)) return t;        js = d.createElement(s);        js.id = id;        js.src = "https://platform.twitter.com/widgets.js";        fjs.parentNode.insertBefore(js, fjs);        t._e = [];        t.ready = function(f) {            t._e.push(f);        };        return t;    }(document, "script", "twitter-wjs"));</script><script>    twttr.ready(function (twttr) {        var el = document.getElementsByClassName('twitter-syntax-tweet-id-271919839289954305');        for (var i=0;i<el.length;i++) {            if (!!el[i].getAttribute('data-is-tweet-loaded')){                continue;            }            el[i].setAttribute('data-is-tweet-loaded', '1');            twttr.widgets.createTweet('271919839289954305',el[i],{});        }    });</script><div class="twitter-syntax-tweet-id-271919839289954305"></div></p><p>で、その後ろくに調べもせずほったらかしにしていた。</p><p>ときは流れて8ヶ月後。</p><p><a href="http://moji.gr.jp/gakkou/kouza/digitalib/">&#x3008;&#x6D3B;&#x5B57;&#x3009;&#x4E2D;&#x6BD2;&#x8005;&#x306E;&#x30C7;&#x30B8;&#x30BF;&#x30EB;&#x56F3;&#x66F8;&#x9928;&#x63A2;&#x8A2A;</a>の懇親会で「そういえば」と思い出し、「そんな活字あったんですか？」と<a href="http://d.hatena.ne.jp/uakira/">&#x5185;&#x7530;&#x3055;&#x3093;</a>に伺ってみた。そしたらすぐに、「実際に一時期官報に使われていました」「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>そのままのデザインです」とのお答え。さすが内田さん！</p><p>帰宅してさっそく<a href="http://dl.ndl.go.jp/">&#x56FD;&#x7ACB;&#x56FD;&#x4F1A;&#x56F3;&#x66F8;&#x9928;&#x30C7;&#x30B8;&#x30BF;&#x30EB;&#x5316;&#x8CC7;&#x6599;</a>にアクセスし、大正期の官報を漁ってみたところ、ほどなくして使用例に到達。ざっと見てみたところでは、<a href="http://dl.ndl.go.jp/info:ndljp/pid/2954038">&#x5927;&#x6B63;8&#x5E74;&#xFF08;1919&#x5E74;&#xFF09;1&#x6708;4&#x65E5;&#x767A;&#x884C;&#x306E;&#x5B98;&#x5831;&#x7B2C;1924&#x53F7;</a>が初出のようだった。2ページ目の省令欄をはじめとして、いろいろな記事が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>活字<a href="#f-c0de137f" name="fn-c0de137f" title="と勝手にこのエントリでは呼んでいますが、正式名称や通称があったりするんでしょうか？">*2</a>で組まれている。</p><p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20130728032926" class="hatena-fotolife" itemprop="url"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20130728/20130728032926.png" alt="f:id:mashabow:20130728032926p:image:w600" title="f:id:mashabow:20130728032926p:image:w600" class="hatena-fotolife" style="width:600px" itemprop="image"></a></span></p><p>ここのデジタル化資料は解像度がそれほど高くないこともあって、細部のデザインまでは読み取れない。ただ、それでもあの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>っぽい独特な雰囲気はよく伝わってくる。実のところ、今回これを見るまでは</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>を写真で撮るって、それでうまく活字ができるんだろか？</li>
<li>組んだときにちゃんと字面揃うの？</li>
<li>「一種の風韻を持する〜」ってちょっと話を盛ってるんじゃ…</li>
</ul><p>などと、どれぐらいの品質なのか正直疑問だった。しかし、このように官報のデジタル化資料を見てみたところでは、結構いい感じに仕上がっているようにも思える。</p><p>また、どうやらこの活字はカタカナ部分の字幅（縦方向の長さ）が漢字より小さいようだ。そのおかげで、カタカナの字面が小ぶりなのにも関わらず、組み上がりはパラパラとした印象にはなっていない。</p><p>暇なときに一度、デジタル化資料ではなく実物の方でも見てみたい。</p>

<div class="section">
    <h4>附記</h4>
    <p>とここまで書いたあと、もう一度近デジの方をちらほら見ていたら、『<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%F5%BA%FE%B6%C9">印刷局</a>長年報書 第45回』の中にこの活字についての言及があった。</p>

    <blockquote cite="http://kindai.ndl.go.jp/info">
        <p>大正八年一月四日</p><p>官報ハ従来二段組ナリシヲ三段組ニ改メ又五号活字ニ代フルニ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>ノ文字ヲ基礎トシテ新鋳シタル九ポイント活字ヲ用ヰタリ……</p>

        <cite><a href="http://kindai.ndl.go.jp/info:ndljp/pid/932384/16">&#x300E;&#x5370;&#x5237;&#x5C40;&#x9577;&#x5E74;&#x5831;&#x66F8; &#x7B2C;45&#x56DE;&#x300F;&#x5370;&#x5237;&#x5C40;&#x3001;1920&#x5E74;&#x3001;p. 25</a></cite>
    </blockquote>
<p>さらに、『<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%F5%BA%FE%B6%C9">印刷局</a>五十年略史』には次のように書かれている。（というか、この本自体がまるまるこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>活字で組まれている。上で引いた官報が漢字カタカナ交じりだったのに対し、こちらは漢字ひらがな交じり文。）</p>

    <blockquote cite="http://kindai.ndl.go.jp/info">
        <p>尚&#29574;に活字鋳造に就いて一言せざる可らざることあり、従来本邦の活字製作方法は先づ黄楊材に手刻したる原字を蝋型に取り、電気装置によりて銅を其凹所に集積せしめ、木材原字と同一の銅字を得て更に電気装置により始めて銅<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BB%FA%CA%EC">字母</a>を作り、之を母型として活字を鋳造したるのものなり。当局に於ては明治四十五年以来独逸及米国より母型彫刻機四台を購入し、繁雑なる旧式の手続を取らずニッケルと銅との合成金に直接彫刻して母型を得、之に依りて鋳造する事とせり。現在官報印刷に使用する活字の如き此機械によりて鋳造したるものなり。上述の新活字は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>の文字を写真により縮写したるものにして字画正確書体鮮明なる九ポイント活字なり。此新漢字活字を採用すると同時に仮名活字をも改鋳し、漢字に比し十と八との割合に縮め、以て字間の空白を減じ行数の節約を得る事とせり。</p>

        <cite><a href="http://kindai.ndl.go.jp/info:ndljp/pid/1874804/27">&#x300E;&#x5370;&#x5237;&#x5C40;&#x4E94;&#x5341;&#x5E74;&#x7565;&#x53F2;&#x300F;&#x5370;&#x5237;&#x5C40;&#x3001;1921&#x5E74;&#x3001;p. 29</a></cite>
    </blockquote>

    <blockquote cite="http://kindai.ndl.go.jp/info">
        <p>八年一月従来二段組なりし官報を三段組に改め新鋳九ポイント活字を使用し、以て大に紙面の節約と印刷の鮮明とを図り、日に月に増大堆積する記載事項の停滞を防ぐを得たり、……</p>

        <cite><a href="http://kindai.ndl.go.jp/info:ndljp/pid/1874804/34">&#x540C;&#x3001;p. 42</a></cite>
    </blockquote>
<p>とあり、まとめると結局</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%C0%B58%C7%AF">大正8年</a>（1919年）1月4日の官報から<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>活字を使った</li>
<li>このときの活字のサイズは9ポイントで、のちに他のサイズも製作</li>
<li>漢字は方形だが仮名は80％平体。これによって紙面節約</li>
</ul><p>ということらしい。近デジすごい。</p>

</div>
<div class="section">
    <h4>追記</h4>
    <p>「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%C0%B58%C7%AF">大正8年</a>（1919年）1月4日の官報から<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>活字を使った」と書いたが、もう少し前から使われていたらしい。</p><p><blockquote class="twitter-tweet" data-lang="HASH(0xe9488a8)"><p lang="ja" dir="ltr"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%F5%BA%FE%B6%C9">印刷局</a>が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%AF%DF%E6%BB%FA%C5%B5">康煕字典</a>体活字を使い始めるの、「70年史」の記録と違って<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%C0%B58%C7%AF">大正8年</a>1月4日付官報からじゃなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%C0%B57%C7%AF">大正7年</a>12月27日付「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%B0%B5%C4%B1%A1">衆議院</a>第41回本会議第1号」からだ <a href="https://t.co/6sZgeVcQFp">https://t.co/6sZgeVcQFp</a> っていう件、判りやすいようにツイートしてなかった <a href="https://t.co/MQGISd6XSU">https://t.co/MQGISd6XSU</a> ので、自分でも捜すの苦労した。</p>&mdash; UCHIDA <a class="keyword" href="http://d.hatena.ne.jp/keyword/Akira">Akira</a> (@uakira2) <a href="https://twitter.com/uakira2/status/1082894613210226688?ref_src=twsrc%5Etfw">January 9, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>上記スレッドに情報がまとまっている。</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn-27c32a01" name="f-27c32a01" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">ママ</span></p>
<p class="footnote"><a href="#fn-c0de137f" name="f-c0de137f" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">と勝手にこのエントリでは呼んでいますが、正式名称や通称があったりするんでしょうか？</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[「TTXによるフォントのぞき基礎」の資料【5/4更新：スライド公開】]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130502/1367500832</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130502/1367500832"/>
        <updated>2013-05-02T13:20:32.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/mashabow/20130426/1366986649">5&#x6708;3&#x65E5;&#x306E;&#x52C9;&#x5F37;&#x4F1A;</a>で発表する「TTXによるフォントのぞき基礎」の資料です。</p>

<div class="section">
    <h4>スライド</h4>
    <p>勉強会終了後に公開する予定です。<strong>→ 公開しました。</strong>（2013-05-04）</p>

<ul>
<li><a href="http://shiromoji.net/font/mojiben0503/fontnozoki-with-ttx/">TTX &#x306B;&#x3088;&#x308B;&#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x306E;&#x305E;&#x304D;&#x57FA;&#x790E; - &#x3057;&#x308D;&#x3082;&#x3058;&#x4F5C;&#x696D;&#x5BA4;</a></li>
</ul><p>勉強会のスライドを少々手直ししてアップロードしました。スペースキーを押すと進みます。Esc キーで俯瞰になります（が、うちのPCでは動作が重いです）。今回は初めて <a href="https://github.com/hakimel/reveal.js">reveal.js</a> という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>を使って作成してみました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> で表示確認をしています。</p>

</div>
<div class="section">
    <h4>ツイートまとめ</h4>
    
<ul>
<li><a href="http://togetter.com/li/497859">&#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x95A2;&#x4FC2;&#x306E;&#x52C9;&#x5F37;&#x4F1A; #mojiben0503 &#x307E;&#x3068;&#x3081; - Togetter</a></li>
</ul>
</div>
<div class="section">
    <h4>TTXをインストールする</h4>
    
<ul>
<li><a href="http://d.hatena.ne.jp/mashabow/20130427/1367046740">TTX&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x65B9;&#x6CD5; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></li>
</ul>
</div>
<div class="section">
    <h4>参加者向けファイル</h4>
    <p>ノートPC持参で参加される方は、以下の2つのファイルをダウンロード・展開しておいてください。（一応、これらのファイルを入れた<a class="keyword" href="http://d.hatena.ne.jp/keyword/USB%A5%E1%A5%E2%A5%EA">USBメモリ</a>をわたしの方で用意しておきます。）</p>

<div class="section">
    <h5>サンプル用フォントファイル</h5>
    
<ul>
<li><a href="http://shiromoji.net/font/mojiben0503/sample.zip">http://shiromoji.net/font/mojiben0503/sample.zip</a></li>
</ul><p><a href="http://ossipedia.ipa.go.jp/ipafont/ipafont/download.html">IPA&#x660E;&#x671D;</a> と <a href="http://sourceforge.net/projects/sourcesans.adobe/?source=recommended">Source Sans Pro</a> の一部をそのまま再配布しているだけです。</p>

</div>
<div class="section">
    <h5>OpenType Specification</h5>
    
<ul>
<li><a href="http://www.microsoft.com/typography/otspec/">Microsoft Typography - OpenType Specification</a></li>
</ul><p>"Download full specification" から ZIP がダウンロードできます。</p>

</div>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[TTXのインストール方法]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130427/1367046740</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130427/1367046740"/>
        <updated>2013-04-27T07:12:20.000Z</updated>
        <summary type="html"><![CDATA[<p>TTXは、TTX/FontTools に含まれている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>です。この TTX/FontTools は <a class="keyword" href="http://d.hatena.ne.jp/keyword/SourceForge">SourceForge</a> で公開されており、2013年4月現在 v2.3 が最新のバージョンです。</p>

<ul>
<li><a href="http://sourceforge.net/projects/fonttools/">http://sourceforge.net/projects/fonttools/</a></li>
</ul><p>この記事では、TTXのインストール方法を次の3通りに分けて紹介します。</p>

<ul>
<li><a href="#afdko">A. AFDKOでまとめてインストールする</a></li>
<li><a href="#direct">B. TTXを直接インストールする</a></li>
<li><a href="#setup">C. setup.py でインストールする</a></li>
</ul><p>一長一短ありますが、とりあえず A が無難なような気がします。もっとうまいやり方があるようでしたら、ぜひご教示ください :)</p>

<div class="section">
    <h4><a name="afdko">A.</a> AFDKOでまとめてインストールする</h4>
    <p>AFDKO (<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> Font Development Kit for OpenType; 通称あふでこ) は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a> が提供しているフォント開発用の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>群で、業界で広く使われているようです。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> と <a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> に対応しています<a href="#f-fef4a6c0" name="fn-fef4a6c0" title="[http://blogs.adobe.com/CCJKType/2012/02/afdko-for-other-platforms.html:title=Linux などに対応する可能性が無いわけではない]ようですが、残念ながら今のところリリースされていません。">*1</a>。</p>

<ul>
<li><a href="http://www.adobe.com/devnet/opentype/afdko.edu.html">Adobe Font Development Kit for OpenType | Adobe Developer Connection</a></li>
</ul><p>TTXはこの中に収録されているため、AFDKOをインストールすればTTXが使えるようになります。AFDKOにはいろいろな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>が入っていますし、とりあえずインストールしておいて損はないでしょう<a href="#f-5648a567" name="fn-5648a567" title="といいつつわたしはそれほど活用できていませんが……">*2</a>。手間もあまりかかりません。</p>

<div class="section">
    <h5>インストール方法</h5>
    
<ol>
<li><a href="http://www.adobe.com/devnet/opentype/afdko/eula.html">&#x3053;&#x306E;&#x30DA;&#x30FC;&#x30B8;&#x306E; License Agreement</a> を読み、内容に同意します。</li>
<li>ページ下部のリンクからZIPをダウンロードします。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> 版は FDK-25-WIN.zip、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> 版は FDK-25-<a class="keyword" href="http://d.hatena.ne.jp/keyword/MAC">MAC</a>.zipです。</li>
<li>ダウンロードしたZIPを展開します。</li>
<li>展開してできた FDK/Read_Me_First.html を開き、<q>2. AFDKO Installation Guide</q> の指示に従ってインストールします。指示の内容を大雑把に要約すると以下のとおりです。
<ol>
<li>FDKフォルダを好きな場所に移動する</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%D7%A5%ED%A5%F3%A5%D7%A5%C8">コマンドプロンプト</a>やターミナルから FDK/FinishInstallWindows.cmd あるいは FDK/FinishInstallOSX を実行する</li>
<li>（<q>For installing the AFDKO FontLab macros</q> の部分は今回は関係ありません）</li>
</ol></li>
</ol><p>これでインストール完了です。ちなみにAFDKOの現在のバージョンは v2.5 Feb 26 2013 change number 60418 で、これをインストールすると TTX v2.3 が入ります。</p>

</div>
</div>
<div class="section">
    <h4><a name="direct">B.</a> TTXを直接インストールする</h4>
    
<div class="section">
    <h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> の場合</h5>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%E9">インストーラ</a>などで普通に単独インストールできれば楽なのですが、残念なことに公式からは <a href="http://sourceforge.net/projects/fonttools/files/2.0b1/">v2.0b1&#xFF08;2002&#x5E74;&#x30EA;&#x30EA;&#x30FC;&#x30B9;&#xFF09;</a>のものしか配布されていません。</p><p>Typophile の <a href="http://typophile.com/node/67406">TTX 2.3 installer?</a> というスレッドにいろいろと情報が載っていますが、その中で <a href="http://typophile.com/node/67406#comment-469074">v2.3 &#x306E;ZIP&#x3078;&#x306E;&#x30EA;&#x30F3;&#x30AF;&#x304C;&#x6295;&#x7A3F;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;</a>。このZIPを好きな場所に展開し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>PATHにそのディレクトリを追加すれば完了です。</p>

</div>
<div class="section">
    <h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> の場合</h5>
    <p>自宅に <a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> がないのでよく調べていません :(<br />
こちらもバイナリは v2.0b1 のものしか配布されていません。</p>

</div>
<div class="section">
    <h5>その他 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a> など</h5>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%B9%A5%C8%A5%EA%A5%D3%A5%E5%A1%BC%A5%B7%A5%E7%A5%F3">ディストリビューション</a>によってはパッケージが提供されています。例えば <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a> であれば</p>

<pre>$ sudo apt-get install fonttools
</pre><p>で最新の v2.3 をインストールすることができます。</p>

</div>
</div>
<div class="section">
    <h4><a name="setup">C.</a> setup.py でインストールする</h4>
    <p>これが本来のインストール方法ですが、この方法はちょっと面倒な気がします。前提として、<a href="http://www.python.org/download/">Python 2</a> と <a href="http://www.numpy.org/">NumPy</a> をインストールしておく必要があります。</p><p><a href="http://sourceforge.net/projects/fonttools/files/">TTX/FontTools &#x306E;&#x914D;&#x5E03;&#x30DA;&#x30FC;&#x30B8;</a>から fonttools-2.3.tar.gz をダウンロードし、展開します。そして fonttools-2.3 ディレクトリの中に入り、</p>

<pre>$ (sudo) <a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a> setup.py install
</pre><p>などとすれば良いようです。</p><p>このあと <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> の場合、</p>
<pre class="code lang-dosbatch" data-lang="dosbatch" data-unlink>@<span class="synIdentifier">echo</span><span class="synStatement"> off</span>
python C:\Python27\Scripts\ttx <span class="synIdentifier">%*</span>
</pre><p>のような内容のファイルを ttx.bat という名前で作成し、これをパスの通った場所に入れておけばOKです。</p><p>また、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a> では</p>

<pre>$ defaults write com.apple.versioner.<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a> Prefer-32-Bit -bool yes
</pre><p>と設定する必要があるかもしれません<a href="#f-ece7a60e" name="fn-ece7a60e" title="http://forum.fontlab.com/index.php?topic=7305.0">*3</a>。</p><br />
<p>以上、インストール方法を3通りに分けて紹介しました。てきとうなフォントファイル <a class="keyword" href="http://d.hatena.ne.jp/keyword/hoge">hoge</a>.ttf<a href="#f-27f61b08" name="fn-27f61b08" title="和文フォントなど、ファイルサイズが大きいものだとちょっと時間がかかります。なお、.otf でもかまいません。">*4</a> に対して</p>
<pre class="code lang-sh" data-lang="sh" data-unlink>$ ttx hoge.ttf
</pre><p>としたときに <a class="keyword" href="http://d.hatena.ne.jp/keyword/hoge">hoge</a>.ttx が生成されるようであれば、TTXは正常にインストールされています。</p><p>TTXの使い方については、<a href="http://d.hatena.ne.jp/mashabow/20130426/1366986649">5&#x6708;3&#x65E5;&#x306E;&#x52C9;&#x5F37;&#x4F1A;</a>で紹介する予定です。</p><p>2013-05-04 追記：勉強会で使ったスライドをアップロードしました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/mashabow/20130502/1367500832">&#x300C;TTX&#x306B;&#x3088;&#x308B;&#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x306E;&#x305E;&#x304D;&#x57FA;&#x790E;&#x300D;&#x306E;&#x8CC7;&#x6599; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></li>
</ul>
</div><div class="footnote">
<p class="footnote"><a href="#fn-fef4a6c0" name="f-fef4a6c0" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://blogs.adobe.com/CCJKType/2012/02/afdko-for-other-platforms.html">Linux &#x306A;&#x3069;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x53EF;&#x80FD;&#x6027;&#x304C;&#x7121;&#x3044;&#x308F;&#x3051;&#x3067;&#x306F;&#x306A;&#x3044;</a>ようですが、残念ながら今のところリリースされていません。</span></p>
<p class="footnote"><a href="#fn-5648a567" name="f-5648a567" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">といいつつわたしはそれほど活用できていませんが……</span></p>
<p class="footnote"><a href="#fn-ece7a60e" name="f-ece7a60e" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text"><a href="http://forum.fontlab.com/index.php?topic=7305.0">http://forum.fontlab.com/index.php?topic=7305.0</a></span></p>
<p class="footnote"><a href="#fn-27f61b08" name="f-27f61b08" class="footnote-number">*4</a><span class="footnote-delimiter">:</span><span class="footnote-text">和文フォントなど、ファイルサイズが大きいものだとちょっと時間がかかります。なお、.otf でもかまいません。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[5月3日にフォント関係の勉強会やります]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130426/1366986649</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130426/1366986649"/>
        <updated>2013-04-26T14:30:49.000Z</updated>
        <summary type="html"><![CDATA[<p>2013-05-06 追記：今回の関連ツイートをまとめました。</p>

<ul>
<li><a href="http://togetter.com/li/497859">&#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x95A2;&#x4FC2;&#x306E;&#x52C9;&#x5F37;&#x4F1A; #mojiben0503 &#x307E;&#x3068;&#x3081; - Togetter</a></li>
</ul><p><br />
読者・フォロワー各位：</p><p>突然ですが、5月3日にちょっとした勉強会をやってみようかと思います。</p>

<div class="section">
    <h4>日時</h4>
    <p>5月3日（金・祝） 13:00〜17:00</p>

</div>
<div class="section">
    <h4>場所</h4>
    <p><a href="http://www.toshima-mirai.jp/center/e_komagome/#nav_access">&#x99D2;&#x8FBC;&#x5730;&#x57DF;&#x6587;&#x5316;&#x5275;&#x9020;&#x9928;</a>　4階・第4会議室<br>山手線<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B6%F0%B9%FE%B1%D8">駒込駅</a>北口より徒歩2分</p>

</div>
<div class="section">
    <h4>内容</h4>
    
<div class="section">
    <h5>1. TTXによるフォントのぞき基礎</h5>
    <p><a href="http://sourceforge.net/projects/fonttools/">TTX</a>の使い方を紹介し、OpenType の基本的な部分を簡単に説明します。「TTX使ったことない」「OpenType の中身に興味はあるけどどこから手をつけていいのかよく分からん」というような初心者を主なターゲットにします。30分程度？</p><p>下記補足も参照してください。</p>

</div>
<div class="section">
    <h5>2.『ヘルベチカ 世界を魅了する書体』鑑賞</h5>
    <p>みんなでDVDみるだけです。2007年イギリス制作のドキュメンタリーで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%AE%CE%D3%BE%CF">小林章</a>さん監修の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%CB%DC%B8%EC%BB%FA%CB%EB">日本語字幕</a>がついています。本編80分＋特典95分。</p>

<ul>
<li><a href="http://helveticafilm.com/">http://helveticafilm.com/</a></li>
</ul>
</div>
</div>
<div class="section">
    <h4>申し込み方法</h4>
    <p>タイトルを「5/3参加希望」として、mashabow<あっと>shiromoji.net へメールをお送りください。定員は10人弱で、先着順です。前日（5月2日）の20時に一旦締め切ります。</p><p>申し込みメールには、遅くとも翌日にはこちらから返信をします。万一返信のない場合には、お手数ですがお問い合わせください。</p>

</div>
<div class="section">
    <h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a></h4>
    
<ul>
<li><a href="https://twitter.com/search/realtime?q=%23mojiben0503&src=hash">#mojiben0503</a></li>
</ul>
</div>
<div class="section">
    <h4>問い合わせ先</h4>
    
<ul>
<li><span data-unlink>Twitter</span>: <a href="https://twitter.com/mashabow">@mashabow</a></li>
<li>メール: mashabow<あっと>shiromoji.net</li>
</ul>
</div>
<div class="section">
    <h4>補足：TTXによるフォントのぞき基礎 について</h4>
    <p>このあたり、興味ない方にとっては<em>非常につまらない内容</em>だと思うので、そういう場合は気にせず「ヘルベチカ〜」だけご参加ください。</p><p>参加される方は、TTXをインストールしたノートPCの持参をおすすめします。インストール方法については、下の記事にまとめてみました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/mashabow/20130427/1367046740">TTX&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x65B9;&#x6CD5; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></li>
</ul><p>なお、残念ながら会場には有線／<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%B5%C0%FELAN">無線LAN</a>の設備はありません。</p><p>2013-05-04 追記：発表に使ったスライドを公開しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/mashabow/20130502/1367500832">&#x300C;TTX&#x306B;&#x3088;&#x308B;&#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x306E;&#x305E;&#x304D;&#x57FA;&#x790E;&#x300D;&#x306E;&#x8CC7;&#x6599; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></li>
</ul><p><br />
というわけで、参加お待ちしています。</p><p>以前から「若い人が主体になって文字関係のゆるい勉強会みたいなのできないかなー」と考えてい（ながら行動に移していなかっ）たんですが、今回はそのお試し版みたいな位置づけになります。気軽に顔を出してもらえれば幸いです。</p>

</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[ PingMag復刊らしいのでアーカイブから文字関係の記事を10本ほど]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130318/1363622383</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130318/1363622383"/>
        <updated>2013-03-17T15:59:43.000Z</updated>
        <summary type="html"><![CDATA[
<ul>
<li><a href="http://pingmag.jp/jp/2013/03/18/pingmag-is-back/">PingMag &#x5FA9;&#x520A;&#xFF01; | PingMag : &#x65E5;&#x672C;&#x767A;&#x3000;&#x30A2;&#x30FC;&#x30C8;&#x3001;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x3001;&#x304F;&#x3089;&#x3057;</a></li>
</ul><p><a href="http://pingmag.jp/jp/2008/12/31/important-notice/">2008&#x5E74;&#x3044;&#x3063;&#x3071;&#x3044;&#x3067;&#x4F11;&#x520A;</a>となっていた <a href="http://pingmag.jp/jp/">PingMag</a> が復活したようです。</p><p>おぉ、なつかしーと思って過去記事をちょっと漁っていたんですが、せっかくなのでここに文字関係の記事を10本ピックアップしておきます。</p>

<ol>
<li><a href="http://pingmag.jp/jp/2006/03/03/handwritten-japanese-fonts/">&#x66F8;&#x304D;&#x6587;&#x5B57;</a></li>
<li><a href="http://pingmag.jp/jp/2006/03/24/akira-kobayashi-transcending-typographic-boundaries/">&#x5C0F;&#x6797; &#x7AE0;&#xFF1A;&#x30BF;&#x30A4;&#x30DD;&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30FC;&#x306E;&#x5883;&#x754C;&#x3092;&#x8D85;&#x3048;&#x3066;</a></li>
<li><a href="http://pingmag.jp/jp/2006/06/30/shock-of-the-neue-graffiti-fonts-by-graffiti-writers/">&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30C6;&#x30A3;&#x30FB;&#x30E9;&#x30A4;&#x30BF;&#x30FC;&#x306B;&#x3088;&#x308B;&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30C6;&#x30A3;&#x30FB;&#x30D5;&#x30A9;&#x30F3;&#x30C8;</a></li>
<li><a href="http://pingmag.jp/jp/2006/07/03/dry-cleaning-typography/">&#x30AF;&#x30EA;&#x30FC;&#x30CB;&#x30F3;&#x30B0;&#x5C4B;&#x3055;&#x3093;&#x306E;&#x30BF;&#x30A4;&#x30DD;&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30FC;</a></li>
<li><a href="http://pingmag.jp/jp/2006/09/27/handmade-balinese-typography/">&#x30D0;&#x30EA;&#x306E;&#x624B;&#x63CF;&#x304D;&#x30BF;&#x30A4;&#x30DD;&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30FC;</a></li>
<li><a href="http://pingmag.jp/jp/2006/12/11/iranian-typography-now/">&#x30A4;&#x30E9;&#x30CB;&#x30A2;&#x30F3;&#x30FB;&#x30BF;&#x30A4;&#x30DD;&#x30B0;&#x30E9;&#x30D5;&#x30A3;&#x30FC;&#x306E;&#x4ECA;</a></li>
<li><a href="http://pingmag.jp/jp/2007/04/20/dainippon-type-organization/">&#x6587;&#x5B57;&#x306E;&#x9054;&#x4EBA;&#x3001;&#x5927;&#x65E5;&#x672C;&#x30BF;&#x30A4;&#x30DD;&#x7D44;&#x5408;</a></li>
<li><a href="http://pingmag.jp/jp/2007/08/30/gaffer-tape-guide/">&#x30AC;&#x30E0;&#x30C6;&#x30FC;&#x30D7;&#x306E;&#x9053;&#x6848;&#x5185;</a></li>
<li><a href="http://pingmag.jp/jp/2007/10/05/veb-typoart-the-east-german-type-betriebsstatte/">VEB&#x30BF;&#x30A4;&#x30DD;&#x30A2;&#x30FC;&#x30C8;&#xFF1A;&#x6771;&#x30C9;&#x30A4;&#x30C4;&#x306E;&#x6D3B;&#x5B57;&#x92F3;&#x9020;&#x6240;</a></li>
<li><a href="http://pingmag.jp/jp/2008/05/01/bunshi/">&#x4F1D;&#x7D71;&#x3092;&#x5207;&#x308A;&#x958B;&#x3044;&#x305F;&#x6587;&#x5FD7;&#x6D41;&#x6C5F;&#x6238;&#x6587;&#x5B57;</a></li>
</ol><p>昔の記事ということで画像が粗かったりするのは残念ですが、おもしろい記事がいろいろとあります。文字以外にも。おすすめ。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[「Windows 8 で変わる文字 - 異体字と Unicode IVS」雑感]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130305/1362503905</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130305/1362503905"/>
        <updated>2013-03-04T17:18:25.000Z</updated>
        <summary type="html"><![CDATA[<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%DF">セミ</a>ナーに行ってきた。</p>

<ul>
<li><a href="http://www.microsoft.com/ja-jp/mic/seminar/interop_unicode.aspx">&#x6587;&#x5B57;&#x30B3;&#x30FC;&#x30C9;&#x3068;&#x7570;&#x4F53;&#x5B57;&#x3068; Unicode IVS &#x301C; &#x60C5;&#x5831;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;&#x65E5;&#x672C;&#x8A9E;&#x51E6;&#x7406; &#x301C; | &#x30B9;&#x30AD;&#x30EB;&#x30A2;&#x30C3;&#x30D7; &#x30AB;&#x30EA;&#x30AD;&#x30E5;&#x30E9;&#x30E0; - &#x30DE;&#x30A4;&#x30AF;&#x30ED;&#x30BD;&#x30D5;&#x30C8; &#x30A4;&#x30CE;&#x30D9;&#x30FC;&#x30B7;&#x30E7;&#x30F3; &#x30BB;&#x30F3;&#x30BF;&#x30FC;</a></li>
</ul><p>目新しい情報はあまりなかったが、イベントレポート書いて的な圧力を <a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> 上で受けてしまったので、ここに雑感を書いてお茶を濁したいと思う。</p><p>今回の内容は</p>

<ul>
<li>前半：これまでの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>・漢字施策の変遷に関する、ざっくりとした説明</li>
<li>後半：IVS自体と <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> 上におけるIVS対応についての、ざっくりとした説明</li>
</ul><p>という感じだった。幅広い内容をたったの2時間で扱わなければならないので、どうしてもざっくりになってしまう。ある程度の基礎知識がある人であれば、「あーそうだったよね」と自分の頭の中を整理しつつ、まとめ・おさらい的な感覚で聞けると思うが、逆にまったくの初心者がこの2時間だけで理解するのは難しいと思う。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>マニヤ(笑)な人は「ここの説明が不十分」とか「これはこう説明した方が…」とかツッコみながら聞いていたのかもしれない。</p><p>個人的に興味があったのは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/MS-DOS">MS-DOS</a>/<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> はこれまでどのように対応してきたかという点。Shift JIS の誕生からIVS対応まで、今回の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%DF">セミ</a>ナーでも各所で触れられていた。ただ、そのまわり（＋裏？）には語り尽くせないぐらいのいろいろなエピソードがあると思うので、そのへんを何かの機会にまとめて教えてくれたらおもしろいんだけどなー、と感じる。</p><p>Window 8 上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/IME">IME</a>におけるIVS対応については、<a href="http://d.hatena.ne.jp/mashabow/20120302/1330712411">Consumer Preview &#x7248;&#x306E;&#x3068;&#x304D;</a>と同じくデフォルトではオフ（IVS入りの候補は出てこない）になっている。「頻繁に使用される名前、地名はIVSを含む単語として<a class="keyword" href="http://d.hatena.ne.jp/keyword/IME">IME</a>の辞書に搭載」<a href="#f-2904b3b2" name="fn-2904b3b2" title="配布資料 p. 40">*1</a>してあるとのことで、設定をオン<a href="#f-254c750f" name="fn-254c750f" title="「変換文字制限をしない」">*2</a>にして、例えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%D6%A4%AF%A4%BA%A1%D7">「くず」</a>を変換すると、</p>

<ul>
<li>葛 [U+845B]：<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows%20Vista">Windows Vista</a> 以降のフォントでは<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS2004">JIS2004</a>字形</li>
<li>葛&#xE0100; [U+845B U+E0100]：<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 コレクション収録のJIS90字形</li>
</ul><p>の両方が候補に出てくる。完璧を期すのであれば、これに加えて<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS2004">JIS2004</a>字形を明示的に指定する</p>

<ul>
<li>葛&#xE0101; [U+845B U+E0101]：<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 コレクション収録の<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS2004">JIS2004</a>字形</li>
</ul><p>も候補に出してほしいところだが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/MS-IME">MS-IME</a>の辞書ではそうはなっていない。</p><p>ちなみに、「いばら」を変換すると</p>

<ul>
<li>茨 [U+8328]</li>
<li>茨&#xE0100 [U+8328 U+E0100]<a href="#f-76366657" name="fn-76366657" title="変換候補の「単漢字…」の中にある。">*3</a></li>
</ul><p>の両者が出てくるが、「いばらき」では</p>

<ul>
<li>茨城 [U+8328 U+57CE] </li>
</ul><p>だけであって、IVSを使ったJIS90字形の</p>

<ul>
<li>茨&#xE0100城 [U+8328 U+E0100 U+57CE] </li>
</ul><p>は出てこない。これについては、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%F1%BE%EB%B8%A9">茨城県</a>などは<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS2004">JIS2004</a>字形を使っているので、JIS90字形は辞書に入れていない」という、わかるようなわからないような説明があった。</p><p>IVS/IVDのコレクションの違いについてほとんど触れられておらず、これはどうなんだろう…という感もある。ただ普通のアプリケーションにとってみれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 であれ Hanyo-Denshi であれ、どちらもIVSとしての扱い方に差はないので、ここらへんのややこしい話にあまり深入りする必要はないかもしれない。</p><p>なお、『<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a> IVS/IVD入門』という本が先日発売されたが、今日の講師の方は「届いたばかりでまだ詳しく読んでいない」とおっしゃっていた。</p>

<ul>
<li><a href="http://ec.nikkeibp.co.jp/item/books/P94830.html">&#x65E5;&#x7D4C;BP&#x66F8;&#x5E97;&#xFF5C;&#x5546;&#x54C1;&#x8A73;&#x7D30;&#x3000;-&#x3000;Unicode IVS/IVD&#x5165;&#x9580;</a></li>
</ul><p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822294838/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51ZrcRm4-xL._SL160_.jpg" class="hatena-asin-detail-image" alt="Unicode IVS/IVD入門" title="Unicode IVS/IVD入門"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822294838/msb2-22/">Unicode IVS/IVD入門</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 田丸健三郎,小林龍生</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%B7%D0BP">日経BP</a>社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2013/02/28</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><span class="hatena-asin-detail-label">購入</span>: 1人 <span class="hatena-asin-detail-label">クリック</span>: 20回</li><li><a href="http://d.hatena.ne.jp/asin/4822294838/msb2-22" target="_blank">この商品を含むブログ (6件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%DF">セミ</a>ナー後は、小形さんはじめ文字に詳しそうなみなさんと昼食をご一緒させていただいた。そこでのお話（IVSとは関係ない）も非常におもしろかったので、このあたりの内容、まとめて本なり何なりにならないかな…と思う。</p><p>そんな一日でした。レポートおわり。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-2904b3b2" name="f-2904b3b2" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">配布資料 p. 40</span></p>
<p class="footnote"><a href="#fn-254c750f" name="f-254c750f" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">「変換文字制限をしない」</span></p>
<p class="footnote"><a href="#fn-76366657" name="f-76366657" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">変換候補の「単漢字…」の中にある。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[フォントファイルをFontForgeのアイコンにドラッグ&ドロップして開きたい]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20130112/1357990590</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20130112/1357990590"/>
        <updated>2013-01-12T11:36:30.000Z</updated>
        <summary type="html"><![CDATA[<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a> で <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> をぼちぼち使うので、自分は Unity のランチャー<a href="#f-2526fd8e" name="fn-2526fd8e" title="画面左端にある、アプリケーションのショートカットアイコンが並んでいるあれ。">*1</a>に <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> のショートカットも登録している。フォントファイルをここにドラッグ&ドロップすれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> でそのファイルを開くことができる……と便利なのだが、なぜか <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> のショートカットはそうはなっておらず、知らんぷりして「フォントを開く」ダイアログが出てくるだけになっている。</p><p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20130112194313" class="hatena-fotolife" itemprop="url"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20130112/20130112194313.png" alt="f:id:mashabow:20130112194313p:image" title="f:id:mashabow:20130112194313p:image" class="hatena-fotolife" itemprop="image"></a></span></p><p>最近たびたびこのドラッグ&ドロップをやってしまって残念な気持ちになっていたので、これに対処する。ショートカットアイコンの実体は /usr/share/applications/<a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>.desktop なので、これを ~/.local/share/applications/<a href="#f-468e6fee" name="fn-468e6fee" title="なければ作成する。">*2</a> にコピーしていじればいいらしい。</p>

<pre>$ cd ~/.local/share/applications/
$ cp /usr/share/applications/<a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>.desktop .
</pre><p>コピーした <a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>.desktop をエディタで開いてみると、11行目が</p>

<pre>Exec=<a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>
</pre><p>となっているので、末尾に %F（ドロップされた全ファイルのパスに展開される）をつけて</p>

<pre>Exec=<a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a> <strong>%F</strong>
</pre><p>として保存。</p>

<pre>$ chmod +x <a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>.desktop
</pre><p>とすると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Nautilus">Nautilus</a> での表示が下のような <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> のアイコンになる。</p><p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20130112202229" class="hatena-fotolife" itemprop="url"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20130112/20130112202229.png" alt="f:id:mashabow:20130112202229p:image" title="f:id:mashabow:20130112202229p:image" class="hatena-fotolife" itemprop="image"></a></span></p><p>これをランチャーにドラッグ&ドロップして追加すれば完了<a href="#f-304fff98" name="fn-304fff98" title="もともと FontForge をランチャーに登録していた場合には、古い方のアイコンは右クリックして削除。">*3</a>。</p><p>新しくランチャーに登録したアイコンへフォントファイルをドラッグ&ドロップすれば、ちゃんと <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> で開けるようになる。<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%BF%F4">複数</a>のファイルをまとめてドラッグ&ドロップしても、これまたちゃんとすべて開いてくれる。</p>
<div class="footnote">
<p class="footnote"><a href="#fn-2526fd8e" name="f-2526fd8e" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">画面左端にある、アプリケーションのショートカットアイコンが並んでいるあれ。</span></p>
<p class="footnote"><a href="#fn-468e6fee" name="f-468e6fee" class="footnote-number">*2</a><span class="footnote-delimiter">:</span><span class="footnote-text">なければ作成する。</span></p>
<p class="footnote"><a href="#fn-304fff98" name="f-304fff98" class="footnote-number">*3</a><span class="footnote-delimiter">:</span><span class="footnote-text">もともと <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> をランチャーに登録していた場合には、古い方のアイコンは右クリックして削除。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[超速！『FuelPHP Advent Calender 2012』が電子書籍化されました！ #FuelPHP]]></title>
        <id>https://blog.betaful.life/entry/2012/12/26/152345</id>
        <link href="https://blog.betaful.life/entry/2012/12/26/152345"/>
        <updated>2012-12-26T06:23:45.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://blog.tmd45.jp/entry/2012/12/18/101053">前回の記事</a>で参加させていただいた『<a href="http://atnd.org/events/33753">FuelPHP Advent Calender 2012</a>』が昨日、12月25日に無事完走しました！参加されたみなさまお疲れさまでした。</p>
<p>そんな昨日の今日というすごいスピードで、達人出版会から電子書籍化までしていただきました！</p>
<div class="amazlet-box" style="margin-bottom: 0px;">
<div class="amazlet-image" style="float: left; margin: 0px 12px 1px 0px;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20191212/20191212124744.jpg" alt="FuelPHP Advent Calendar 2012" style="border: none;" /></a></div>
<div class="amazlet-info" style="line-height: 120%; margin-bottom: 10px;">
<div class="amazlet-name" style="margin-bottom: 10px; line-height: 120%;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank">FuelPHP Advent Calendar 2012【電子書籍】</a></div>
<div class="amazlet-detail">FuelPHP Advent Calendar 2012参加有志<br />達人出版会<br />発行日: 2012-12-26<br />対応フォーマット: EPUB, PDF</div>
<div class="amazlet-sub-info" style="float: left;">
<div class="amazlet-link" style="margin-top: 5px;"><a href="http://tatsu-zine.com/books/fuelphpadvent2012" name="amazletlink" target="_blank">詳細を見る</a></div>
</div>
</div>
<div class="amazlet-footer" style="clear: left;"> </div>
</div>
<p>取りまとめをされていた @<a class="twitter-user-screen-name" href="http://twitter.com/kenji_s">kenji_s</a> さん、達人出版会の高橋さん、本当に有難うございました！</p>
<p>この書籍は、ブログの記事を Markdown 化、Markdown からツールで ReVIEW（電子書籍のためのマークアップの１つ<a href="#f1" name="fn1" title="参考：『書籍制作フローを変える。「ReVIEW」という解。〜マークアップと自動組版と、時々、電子書籍〜』 http://kmuto.jp/events/page2012/page2012.pdf">*1</a>）化して、GitHub 上で原稿を取りまとめて作業するという方法で作成されました。各執筆者は GitHub 上で pull request を利用して原稿の修正が可能です。私も記事の一部に修正があったのでその方法で反映していただいています。<br /> 興味があるかたは、GitHub 上の原稿リポジトリを眺めてみても面白いかもです。</p>
<ul>
<li><a href="https://github.com/kenjis/fuelphp-advent-calendar-2012">kenjis/fuelphp-advent-calendar-2012 · GitHub</a></li>
</ul>
<p><br /> 主題の FuelPHP の記事も、いい感じの Tips がたくさん詰まっていて使い手あります。去年よりも、実際に動かして云々系の記事が多い気がします。無料です。DL して損はないです！</p>
<p>ちなみに去年の『FuelPHP Advent Calendar 2011』は技術評論社から電子書籍化されています。こちらは EPUB のみですがやっぱり無料です。</p>
<ul>
<li><a href="https://gihyo.jp/dp/sp/advent2011/G11C13">FuelPHP Advent Calendar 2011 | Gihyo Digital Publishing</a></li>
</ul>
<p><br /> まだまだ継続してる Advent Calendar もあるようですが（笑）クリスマスも過ぎてもうすぐ年の瀬です。みなさまお風邪など召されませんように、良いお年をお過ごしください！</p>
<p> </p>
<p>('ω`)ノ</p>
<div class="section">
<h4>関連記事</h4>
<ul>
<li><a href="http://d.hatena.ne.jp/Kenji_s/20121226/fuelphp_advent_2012_ebook">電子書籍『FuelPHP Advent Calendar 2012』が達人出版会より出版されました！ - A Day in Serenity @ kenjis</a></li>
<li><a href="http://ounziw.com/2012/12/26/fuelphp-advent-calendar-2012/">FuelPHP Advent Calendar 2012 が出版されました</a></li>
<li><a href="http://h2o-space.com/news/262/">『FuelPHP Advent Calendar 2012』が無料電子書籍になりました | H2O Space.</a></li>
</ul>
</div>
<div class="footnote">
<p class="footnote"><a href="#fn1" name="f1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">参考：『書籍制作フローを変える。「ReVIEW」という解。〜マークアップと自動組版と、時々、電子書籍〜』 <a href="http://kmuto.jp/events/page2012/page2012.pdf">http://kmuto.jp/events/page2012/page2012.pdf</a></span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[さくらのレンタルサーバで FuelPHP を使ってはてなハイクブログを作る－ViewModel を使ってみる編 #FuelPHPAdvent2012]]></title>
        <id>https://blog.betaful.life/entry/2012/12/18/101053</id>
        <link href="https://blog.betaful.life/entry/2012/12/18/101053"/>
        <updated>2012-12-18T01:10:53.000Z</updated>
        <summary type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/33753">FuelPHP Advent Calendar 2012</a> の 18 日目の記事です。昨日は @<a class="twitter-user-screen-name" href="http://twitter.com/ootatter">ootatter</a> さんによる『<a href="http://blog.milds.net/2012/12/fuelphpdb.html">fuelphp&#x3067;&#x65E2;&#x5B58;DB&#x3092;&#x3042;&#x3064;&#x304B;&#x3046;&#x3068;&#x304B;</a>』でした。</p><p>本日の担当は、毎年クリスマスには仕事で問題が起こりクルシミマス恒例になりつつあります、@<a class="twitter-user-screen-name" href="http://twitter.com/tmd45">tmd45</a> です。</p><p>FuelPHP 標準のサーバキャッシュと「<a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest">&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;API</a>」、ViewModel を利用したブログのようなものを作ってみましたので、その全貌を公開したいと思います。</p>

<ul>
<li>さくらのレンタルサーバーで FuelPHP を動かす</li>
<li>ViewModel を含めて MVC をひととおり使ってみる</li>
<li>はてなの API を使ってみる</li>
</ul><p>などを行っています。</p><p>長いですが、マイナーな組み合わせすぎて需要が無いことをひそかに期待してます（笑）。<br />
なお、使う人がいらっしゃるか分かりませんが記事中のソースコードは MIT ライセンスです。</p><p>では、よろしくお願いします。</p>

    <blockquote>
        <p>【修正履歴】<br />
・本記事について、即座に脆弱性とまでは（おそらく）なりえないまでも、セキュリティ的に好ましくない点が在ることをご指摘いただきましたので一部内容を修正しました。記事内容のご利用の際にはご留意ください。（2012-12-25）</p>

    </blockquote>



<div class="section">
    <h3>1. さくらのレンタルサーバで FuelPHP を準備する</h3>
    <p>利用しているのは<em>スタンダードプラン</em>です。なおスタンダードより下のライトプランだと SFTP や SCP が使えなくてちょっと不便なので、動的なサイトを作りたい場合はスタンダードプラン以上で契約されるのがオススメです。さらに言えば、レンサバより VPS や Cloud なんちゃら系のホスティングサービスを使ったほうが利便性は良いです。</p><p>さくらのレンサバを使った理由は「そこに放置中のレンサバがあったから」以外のなにものでもないのであしからず。</p>

<div class="section">
    <h4>PHP のバージョンを確認する</h4>
    <p>お使いのレンサバで動く PHP のバージョンを確認します。FuelPHP を動作させるために PHP 5.3 以上を利用しましょう。必要であれば下記の画面で設定を変更してください。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121212/20121212110543.png" alt="f:id:tmd45:20121212110543p:plain" title="f:id:tmd45:20121212110543p:plain" class="hatena-fotolife" itemprop="image"></span></p>

</div>
<div class="section">
    <h4>php.ini の編集</h4>
    <p>さくらのレンサバはコントロールパネルから php.ini の編集が可能です。<br />
FuelPHP を正常に動作させるには <code>cgi.fix_pathinfo = 1</code> の記述が必要です。リクエスト URL の取得に、cgi 版 PHP ではこの設定を行って <code>$_SERVER["ORIG_PATH_INFO"]</code> の利用を有効にする必要があるためです。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121212/20121212113953.png" alt="f:id:tmd45:20121212113953p:plain" title="f:id:tmd45:20121212113953p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>と、説明しておきますが、FuelPHP Core 内で <code>$_SERVER["ORIG_PATH_INFO"]</code> を利用しているのは私が見た限りでは <a href="https://github.com/fuel/core/blob/1.4/master/classes/input.php#L128">Input &#x30AF;&#x30E9;&#x30B9;&#x3060;&#x3051;&#x307F;&#x305F;&#x3044;</a>です。とりあえずこの設定はやっておきましょう。</p><p>以下の記事を参考にさせていただきました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/good-speed/20121002/1349148273">&#x3055;&#x304F;&#x3089;&#x30EC;&#x30F3;&#x30BF;&#x30EB;&#x30B5;&#x30FC;&#x30D0;&#x30FC;&#x306B;FuelPHP&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB; - 2hours</a></li>
<li><a href="http://d.hatena.ne.jp/localdisk/20090524/1243149438">PHP&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x30EF;&#x30FC;&#x30AF;&#x306F;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x305F;URL&#x3092;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;? - localdisk</a></li>
</ul>
</div>
<div class="section">
    <h4>FuelPHP を用意する</h4>
    <p><a href="http://fuelphp.com/">FuelPHP &#x516C;&#x5F0F;&#x30B5;&#x30A4;&#x30C8;</a>から最新版（執筆時点でv1.4）の FuelPHP アーカイブ（zip）をダウンロードします。アーカイブを展開して、ドキュメントルート内の構成を以下のようにしました。</p>

<pre>アーカイブ内（変更前）のディレクトリ構成
/fuelphp-1.4
  |-- /docs
  |-- /fuel
  |-- /public
  |  |-- /assets
  |  |-- .htaccess
  |  `-- index.php
  |-- oil
  |-- README.md
  `-- ...
</pre><p>ドキュメントや README、使わない oil などを削除します。また、public ディレクトリの中身をレンサバのドキュメントルートに合わせるため、www/hhblog フォルダを作ってそこへ移動します。</p>

<pre>変更後のディレクトリ構成
/hhblog
  |-- /fuel
  `-- /www
     `-- / hhblog
        |-- /assets
        |-- .htaccess
        `-- index.php
</pre><p>ディレクトリ構成を変更したので、index.php に記述されているパスも修正します。diff だとわかりにくいですが、<code>/../fuel</code> から始まるパスが <code>/../../fuel</code> になります。</p>
<pre class="code lang-diff" data-lang="diff" data-unlink>$ diff fuelphp-1.4/public/index.php hhblog/www/hhblog/index.php
<span class="synStatement">16c16</span>
<span class="synSpecial">&lt; define('APPPATH', realpath(__DIR__.'/../fuel/app/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('APPPATH', realpath(__DIR__.'/../../fuel/app/').DIRECTORY_SEPARATOR);</span>
<span class="synStatement">21c21</span>
<span class="synSpecial">&lt; define('PKGPATH', realpath(__DIR__.'/../fuel/packages/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('PKGPATH', realpath(__DIR__.'/../../fuel/packages/').DIRECTORY_SEPARATOR);</span>
<span class="synStatement">26c26</span>
<span class="synSpecial">&lt; define('COREPATH', realpath(__DIR__.'/../fuel/core/').DIRECTORY_SEPARATOR);</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; define('COREPATH', realpath(__DIR__.'/../../fuel/core/').DIRECTORY_SEPARATOR);</span>
</pre><p><br />
Web API を使用する際にはタイムスタンプなどが重要になってくる場合もあるので、タイムゾーンの設定もしておきました。役に立っているのかはいまいち分かりませんが･･･</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/config/config.php
<span class="synSpecial">&lt;?php</span>
<span class="synComment">/* 中略 */</span>

<span class="synStatement">return</span> <span class="synType">array</span><span class="synSpecial">(</span>
  '<span class="synConstant">default_timezone</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">Asia/Tokyo</span>'    <span class="synComment">// タイムゾーンを設定</span>
<span class="synSpecial">)</span>;
</pre><p><br />
またセキュリティの観点から、Web から見えてしまう FuelPHP のエラー表示は OFF にしておくほうが良いです（参考：<a href="http://d.hatena.ne.jp/Kenji_s/20111224/1324731427">FuelPHP &#x3067;&#x306E;&#x30BB;&#x30AD;&#x30E5;&#x30EA;&#x30C6;&#x30A3;&#x5BFE;&#x7B56;(3) - A Day in Serenity @ kenjis</a>）。自分の場合は開発環境と公開環境を一緒くたにするという危険極まりない遊びをしていたのでエラーは出しっぱなしです･･･(;^_^)</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/www/hhblog/index.php
<span class="synSpecial">&lt;?php</span>
<span class="synComment">/**</span>
<span class="synComment"> * Set error reporting and display errors settings.  You will want to change these when in production.</span>
<span class="synComment"> */</span>
<span class="synIdentifier">error_reporting</span><span class="synSpecial">(</span><span class="synConstant">-1</span><span class="synSpecial">)</span>;
<span class="synIdentifier">ini_set</span><span class="synSpecial">(</span>'<span class="synConstant">display_errors</span>', <span class="synConstant">1</span><span class="synSpecial">)</span>;    <span class="synComment">// この引数を 0 にする。</span>
</pre><p><br />
レンタルサーバへの配置ですが、今回はレンサバのアカウントホーム <code>/home/{user-id}</code> 直下に fuel ディレクトリを、レンサバのドキュメントルート <code>/home/{account-id}/www</code> 直下に www ディレクトリの中身（hhblog ディレクトリ）を配置します。公開ディレクトリは <code>/home/{user-id}/www/hhblog</code> です。アクセス時の URL は <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/</span></code> になります。</p><p>この配置であれば、.htaccess ファイルを修正する必要はありません。アーカイブに在ったものをそのまま使用すれば Mod_Rewrite が仕事してくれます。</p><p>私は動作環境を本番（production）にするため、以下の部分だけ変更（コメント化を解除）しました。</p>
<pre class="code lang-diff" data-lang="diff" data-unlink>$ diff fuelphp-1.4/public/.htaccess hhblog/.htaccess
<span class="synStatement">2c2</span>
<span class="synSpecial">&lt; # SetEnv FUEL_ENV production</span>
<span class="synSpecial">---</span>
<span class="synIdentifier">&gt; SetEnv FUEL_ENV production</span>
</pre>
</div>
<div class="section">
    <h4>FuelPHP を放り込む</h4>
    <p>準備したFuelPHP 一式を、SFTP でも SCP でも好きな方法で、レンタルサーバに放り込みましょう。fuel ディレクトリは <code>/home/{user-id}</code> へ、www/hhblog ディレクトリは <code>/home/{user-id}/www/hhblog</code> となるように配置します。</p><p>手動インストール（oil を使わないで配置する）を行ったので、ディレクトリのパーミッションの変更も自分で行います（参考：<a href="http://fuelphp.com/docs/installation/instructions.html">Instruction - Installation - FuelPHP Documentation</a>）。</p><p>以下の４つのディレクトリのパーミッションを 755（rwxr-xr-x）にします。「所有者」に書込み（w）権限があればよいので、700（rwx------）のほうが安心です<a href="#f1" name="fn1" title="自分の環境では、他のディレクトリのレベルと合わせて 755 にしました。">*1</a>。FTP/SCP ツールで変更しても良いですし、さくらのコントロールパネルからファイルマネージャーを使用して変更することも可能です（ディレクトリを 右クリック → プロパティ で属性の変更が可能）。</p>

<pre>以下の４つのディレクトリを書込み可にする
/home/{account-id}
  |-- /fuel
  |  |-- /app
  |  |  |-- /cache
  |  |  |-- /config
  |  |  |-- /logs
  |  |  |-- /tmp
  ...
</pre><p>これでインストールは完了です。<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/</span></code> にアクセスすれば、おなじみの Welcome ページが表示されます。おめでとうありがとう。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214170600.png" alt="f:id:tmd45:20121214170600p:plain" title="f:id:tmd45:20121214170600p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>やることが多く見えますが、結構単純です。さくらのレンタルサーバでも FuelPHP は（とりあえず）簡単に動作します。</p><p></p>

</div>
</div>
<div class="section">
    <h3>2. はてなハイク API の利用</h3>
    <p>フレームワークの準備が出来ましたので、ここから実装に入ります。コードはとくに省略せずに貼り付けてますので、長いです。</p>

    <blockquote>
        <p>補足：<br />
本来は開発環境で作って、テストして、完成したものを公開環境へアップロードしますよね（苦笑）<br />
今回ちょっと不便な場所で開発を行っていたため、公開環境で動作確認などを行っていました･･･<br />
この辺りはツッコミ無用でございます／(^o^)＼</p><p>また、筆者は Java 屋なので、PHP 的におかしな書き方をしているところがあったらごめんなさい。<br />
そちらはツッコミいただけたら嬉しいです＼(^o^)／</p>

    </blockquote>
<p>はてなハイクの API を利用して記事を取得する処理を Model に作成します。<br />
ちなみに今回利用した API では、認証を必要としません。なので認証部分の実装も考えません。</p><p>API は以下の２種類を使うことにしました。詳しくは API のドキュメントをご確認ください。</p>

<ol>
<li><a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#public_timeline">&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;&#x306E;&#x30C8;&#x30C3;&#x30D7;&#x30DA;&#x30FC;&#x30B8;&#xFF08;&#x30D1;&#x30D6;&#x30EA;&#x30C3;&#x30AF;&#x30FB;&#x30BF;&#x30A4;&#x30E0;&#x30E9;&#x30A4;&#x30F3;&#xFF09;</a>
<ul>
<li>引数はとくに無く、はてなハイクのトップページに表示されるタイムラインを取得します。</li>
</ul></li>
<li><a href="http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#keyword_timeline">&#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30FC;&#x30DA;&#x30FC;&#x30B8;&#xFF08;&#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x30FB;&#x30BF;&#x30A4;&#x30E0;&#x30E9;&#x30A4;&#x30F3;&#xFF09;</a>
<ul>
<li>引数にキーワードを指定（必須）し、そのキーワードのタイムラインを取得します。</li>
</ul></li>
</ol><p><br />
以下が実装です。<b>ちなみにテストはありません（!!?）。</b>また、一部の引数は API に合わせて定義しているだけで、利用していないです（汗）</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/model/api/hatena/haiku.php
<span class="synSpecial">&lt;?php</span>

<span class="synType">class</span> Model_Api_Hatena_Haiku <span class="synType">extends</span> Model
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Using statuses/public_timeline (Japanese Domain).</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * AUTHORIZATION : no</span>
<span class="synComment">	 * HTTP METHOD   : GET</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @link http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#public_timeline</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @param string  $body_formats reaponse text format, see default value</span>
<span class="synComment">	 * @param integer $count        getting entries number, API default 20 max 200</span>
<span class="synComment">	 * @param integer $page         getting page number, API default 1 max 100</span>
<span class="synComment">	 * @param string  $since        no getting older than rfc1123-date(&quot;Mon, 26 Nov 2012 15:53:43 GMT&quot;)</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @return string JSON</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synType">static</span> <span class="synPreProc">function</span> getPublicTimeLine<span class="synSpecial">(</span>
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> &quot;<span class="synConstant">api,haiku,html,html_mobile,html_touch</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">count</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">20</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">page</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">1</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">since</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">Mon, 26 Nov 2012 15:53:43 GMT</span>&quot;
	<span class="synSpecial">)</span> <span class="synSpecial">{</span>

		<span class="synComment">// リクエストURL</span>
		<span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">=</span> &quot;<span class="synConstant">http://h.hatena.ne.jp/api/statuses/public_timeline.json</span>&quot;;

		<span class="synComment">// Option（UTF-8で符号化必要）</span>
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">body_formats</span><span class="synSpecial">)</span>;

		<span class="synComment">// URL 組み立て</span>
		<span class="synStatement">$</span><span class="synIdentifier">filename</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">.</span> '<span class="synConstant">?body_formats=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">body_formats</span>;

		<span class="synComment">// file_getコンテキストのオプション</span>
		<span class="synStatement">$</span><span class="synIdentifier">opts</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">(</span>
			'<span class="synConstant">http</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>
				'<span class="synConstant">method</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">GET</span>&quot;,
				'<span class="synConstant">header</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">Host: hoge.sakura.ne.jp</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">Accept-language: ja</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">User-Agent: </span>&quot; <span class="synStatement">.</span> Input<span class="synStatement">::</span>user_agent<span class="synSpecial">()</span> <span class="synStatement">.</span> &quot;<span class="synSpecial">\r\n</span>&quot;
			<span class="synSpecial">)</span>
		<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">context</span> <span class="synStatement">=</span> <span class="synIdentifier">stream_context_create</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">opts</span><span class="synSpecial">)</span>;

		<span class="synComment">// API の結果を json で取得</span>
		<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> <span class="synIdentifier">file_get_contents</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">filename</span>, <span class="synConstant">false</span>, <span class="synStatement">$</span><span class="synIdentifier">context</span><span class="synSpecial">)</span>;

		<span class="synComment">// 取得した json 文字列をそのまま返却</span>
		<span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">!=</span> <span class="synConstant">false</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">json</span>;
		<span class="synSpecial">}</span>
		<span class="synComment">// 取得失敗したら空文字を返却</span>
		<span class="synStatement">else</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> '';
		<span class="synSpecial">}</span>

	<span class="synSpecial">}</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Using statuses/keyword_timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * AUTHORIZATION : no</span>
<span class="synComment">	 * HTTP METHOD   : GET</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @link http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest/timelines#keyword_timeline</span>
<span class="synComment">	 *</span>
<span class="synComment">	 * @param string  $keyword      seatch keyword [required]</span>
<span class="synComment">	 * @param string  $body_formats reaponse text format, see default value</span>
<span class="synComment">	 * @param integer $count        getting entries number, API default 20 max 200</span>
<span class="synComment">	 * @param integer $page         getting page number, API default 1 max 100</span>
<span class="synComment">	 * @param string  $sort         getting entries sort, API default &quot;new&quot; is newer, &quot;hot&quot; is populer</span>
<span class="synComment">	 * @param string  $since        no getting older than rfc1123-date(&quot;Mon, 26 Nov 2012 15:53:43 GMT&quot;)</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * @return string JSON</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synType">static</span> <span class="synPreProc">function</span> getKeywordTimeLine<span class="synSpecial">(</span>
		<span class="synStatement">$</span><span class="synIdentifier">keyword</span>
		, <span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> &quot;<span class="synConstant">api,haiku,html,html_mobile,html_touch</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">count</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">20</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">page</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">1</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">sort</span>         <span class="synStatement">=</span> &quot;<span class="synConstant">new</span>&quot;
		, <span class="synStatement">$</span><span class="synIdentifier">since</span>        <span class="synStatement">=</span> &quot;<span class="synConstant">Mon, 26 Nov 2012 15:53:43 GMT</span>&quot;
	<span class="synSpecial">)</span> <span class="synSpecial">{</span>

		<span class="synComment">// リクエストURL</span>
		<span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">=</span> &quot;<span class="synConstant">http://h.hatena.ne.jp/api/statuses/keyword_timeline.json</span>&quot;;

		<span class="synComment">// Option（UTF-8で符号化必要）</span>
		<span class="synStatement">$</span><span class="synIdentifier">word</span>         <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">body_formats</span> <span class="synStatement">=</span> <span class="synIdentifier">urlencode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">body_formats</span><span class="synSpecial">)</span>;

		<span class="synComment">// URL 組み立て</span>
		<span class="synStatement">$</span><span class="synIdentifier">filename</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">url</span> <span class="synStatement">.</span> '<span class="synConstant">?word=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">word</span> <span class="synStatement">.</span> '<span class="synConstant">&amp;body_formats=</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">body_formats</span>;

		<span class="synComment">// file_getコンテキストのオプション</span>
		<span class="synStatement">$</span><span class="synIdentifier">opts</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">(</span>
			'<span class="synConstant">http</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>
				'<span class="synConstant">method</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">GET</span>&quot;,
				'<span class="synConstant">header</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">Host: hoge.sakura.ne.jp</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">Accept-language: ja</span><span class="synSpecial">\r\n</span>&quot; <span class="synStatement">.</span>
							&quot;<span class="synConstant">User-Agent: </span>&quot; <span class="synStatement">.</span> Input<span class="synStatement">::</span>user_agent<span class="synSpecial">()</span> <span class="synStatement">.</span> &quot;<span class="synSpecial">\r\n</span>&quot;
			<span class="synSpecial">)</span>
		<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">context</span> <span class="synStatement">=</span> <span class="synIdentifier">stream_context_create</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">opts</span><span class="synSpecial">)</span>;

		<span class="synComment">// API の結果を json で取得</span>
		<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> <span class="synIdentifier">file_get_contents</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">filename</span>, <span class="synConstant">false</span>, <span class="synStatement">$</span><span class="synIdentifier">context</span><span class="synSpecial">)</span>;

		<span class="synComment">// 取得した json 文字列をそのまま返却</span>
		<span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">!=</span> <span class="synConstant">false</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">json</span>;
		<span class="synSpecial">}</span>
		<span class="synComment">// 取得失敗したら空文字を返却</span>
		<span class="synStatement">else</span>
		<span class="synSpecial">{</span>
			<span class="synStatement">return</span> '';
		<span class="synSpecial">}</span>

	<span class="synSpecial">}</span>

<span class="synSpecial">}</span>

<span class="synComment">/* End of file haiku.php */</span>
<span class="synComment">/* Location: app/classes/model/api/hatena/haiku.php */</span>
</pre><p>file_getコンテキストのオプションに指定する Host 名は、ご自分の環境にあわせて修正してください。</p>

    <blockquote>
        <p>重要（2012-12-25）：<br />
以降の処理では、この Model クラスで取得した外部からの入力データを検証せずにそのままブラウザに表示させています。はてなハイク API の応答結果には html を含めることが可能です。セキュリティ上好ましくありませんので画面出力前にデータのフィルタリングを行うようにしましょう。今回は説明の都合上、検証処理については割愛します。</p>

    </blockquote>

</div>
<div class="section">
    <h3>3. ViewModel を使ってブログ（表示部分のみ）を作る</h3>
    <p>ここからやっとブログ（っぽく）表示する実装を行っていきます。</p><p>View は贅沢（？）に Template を使ってみます。</p><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214175736.png" alt="f:id:tmd45:20121214175736p:plain" title="f:id:tmd45:20121214175736p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>さきに書いてしまいますが、最終的なディレクトリ構成は以下のようになりました。</p>

<pre>実装のディレクトリ構成
/home/{user-id}
    |-- /fuel
    |    |-- /app
    |    |    |-- /classes
    |    |    |    |-- /controller
    |    |    |    |    `-- hhblog.php
    |    |    |    |-- /model
    |    |    |    |    `-- ･･･
    |    |    |    `-- /view
    |    |    |         `-- /hhblog
    |    |    |              `-- /article
    |    |    |                   |-- keyword.php    (1)'
    |    |    |                   `-- public.php     (2)'
    |    |    |-- /views
    |    |    |    |-- /hhblog
    |    |    |    |    |-- /article
    |    |    |    |    |    |-- keyword.php    (1)
    |    |    |    |    |    `-- public.php     (2)
    |    |    |    |    `-- template.php
    ･･･
</pre><p>うーん、機能名失敗したな･･･（hhblog の hhblog コントローラ･･･orz）。</p>

<div class="section">
    <h4>View と Controller</h4>
    <p>では、どんどんコードを晒していきます。<br />
まずはコントローラー。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/controller/hhblog.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Controller.</span>
<span class="synComment"> * </span>
<span class="synComment"> * hhblog's root controller.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends Controller</span>
<span class="synComment"> */</span>
<span class="synType">class</span> Controller_Hhblog <span class="synType">extends</span> Controller_Template
<span class="synSpecial">{</span>

	<span class="synType">public</span> <span class="synStatement">$</span><span class="synIdentifier">template</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog/template</span>';
	
	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Public Timeline in ViewModel</span>
<span class="synComment">	 * and show blog style page.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> action_public_timeline<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">title</span>',       '<span class="synConstant">Hatena-Haiku Public Timeline</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">description</span>', '<span class="synConstant">はてなハイク Public Timeline を取得してブログっぽく表示させます。</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">active_api</span>',  <span class="synConstant">1</span><span class="synSpecial">)</span>;
		
		<span class="synComment">// 本文部分に ViewModel を利用</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article <span class="synStatement">=</span> ViewModel<span class="synStatement">::</span>forge<span class="synSpecial">(</span>'<span class="synConstant">hhblog/article/public</span>'<span class="synSpecial">)</span>;
		
	<span class="synSpecial">}</span>
	
	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Keyword Timeline in ViewModel</span>
<span class="synComment">	 * and show blog style page.</span>
<span class="synComment">	 * Now 'keyword' is Hatena user id 'id:hoge' style.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> action_keyword_timeline<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">keyword</span> <span class="synStatement">=</span> '<span class="synConstant">id:tmd45</span>';
		
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">title</span>',       '<span class="synConstant">Hatena-Haiku Keyword Timeline</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">description</span>', '<span class="synConstant">はてなハイク Keyword Timeline からキーワード「</span>' <span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">keyword</span> <span class="synStatement">.</span> '<span class="synConstant">」の結果を取得してブログっぽく表示させます。</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">keyword</span>', <span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">active_api</span>',  <span class="synConstant">2</span><span class="synSpecial">)</span>;
		
		<span class="synComment">// 本文部分に ViewModel を利用</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article <span class="synStatement">=</span> ViewModel<span class="synStatement">::</span>forge<span class="synSpecial">(</span>'<span class="synConstant">hhblog/article/keyword</span>'<span class="synSpecial">)</span>;
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>template<span class="synType">-&gt;</span>article<span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">keyword</span>', <span class="synStatement">$</span><span class="synIdentifier">keyword</span><span class="synSpecial">)</span>;
		
	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file hhblog.php */</span>
<span class="synComment">/* Location: app/classes/controller/hhblog.php */</span>
</pre><p>キーワード・タイムラインで指定するキーワードは、コントローラーに直書きしています。</p>

<ul>
<li><code>$keyword = 'id:tmd45';</code></li>
</ul><p>この文字列を変更すれば好きなキーワードを指定することができます。</p><p>指定したキーワードはビューモデルでも利用したいので、以下のように値を渡しています。</p>

<ul>
<li><code>$this->template->article->set('keyword', $keyword);</code></li>
</ul><p><br />
そして View 側のコードですが、全部載せると大変なので Gist に置いておきます。</p>

<ul>
<li><a href="https://gist.github.com/4283992#file-template-php">template.php on Gist</a></li>
<li><a href="https://gist.github.com/4283992#file-public-php">public.php on Gist</a></li>
<li><a href="https://gist.github.com/4283992#file-keyword-php">keyword.php on Gist</a></li>
</ul><p>テンプレートのソースコード（template.php）の中で、コントローラーで ViewModel を forge した <code>$article</code> 変数を利用して記事を埋め込みます。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/views/hhblog/template.php の一部
<span class="synComment">&lt;!-- CONTENT --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;span9&quot;</span><span class="synIdentifier">&gt;</span>
			
<span class="synSpecial">&lt;?php</span> <span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">article</span>; <span class="synSpecial">?&gt;</span>
			
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span><span class="synComment">&lt;!-- /span9 --&gt;</span>
<span class="synComment">&lt;!-- /CONTENT --&gt;</span>
</pre><p>記事側のソースコード（public.php, keyword.php）では、API で取得した記事の配列を繰り返し表示させています。これがテンプレートの <code>$article</code> 部分に展開されます。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/views/hhblog/article/public.php の一部
<span class="synSpecial">&lt;?php</span>
	<span class="synStatement">foreach</span> <span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">a</span><span class="synSpecial">)</span>
	<span class="synSpecial">{</span>
<span class="synSpecial">?&gt;</span>
		<span class="synIdentifier">&lt;</span>section<span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;hhblog-section&quot;</span><span class="synIdentifier">&gt;</span>
			<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;page-main&quot;</span><span class="synIdentifier">&gt;</span>
				<span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span><span class="synSpecial">&lt;?php</span> <span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">a</span><span class="synSpecial">[</span>&quot;<span class="synConstant">html</span>&quot;<span class="synSpecial">]</span>; <span class="synSpecial">?&gt;</span><span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
			<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
		<span class="synIdentifier">&lt;/</span>section<span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span>
	<span class="synSpecial">}</span> <span class="synComment">/* end foreach($articles) */</span>
	<span class="synStatement">unset</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">articles</span><span class="synSpecial">)</span>;
<span class="synSpecial">?&gt;</span>
</pre><p>これらをサイトのトップページに表示させるために、ルーティングの設定も修正します。<br />
サイトのトップにアクセスすると、キーワード・タイムラインが表示されます(1)。また <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/public_timeline</span></code> にアクセスするとパブリック・タイムラインが、<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/keyword_timeline</span></code> にアクセスするとキーワード・タイムラインが表示されるようにしました(2)。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/config/routes.php
<span class="synSpecial">&lt;?php</span>
<span class="synStatement">return</span> <span class="synType">array</span><span class="synSpecial">(</span>
<span class="synComment">//	'_root_'  =&gt; 'welcome/index',              // コメント化</span>
	'<span class="synConstant">_root_</span>'  <span class="synStatement">=&gt;</span> '<span class="synConstant">hhblog/keyword_timeline</span>',    <span class="synComment">// 追加(1)</span>
	'<span class="synConstant">_404_</span>'   <span class="synStatement">=&gt;</span> '<span class="synConstant">welcome/404</span>',
	
	'<span class="synConstant">(:segment)</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hhblog/$1</span>',               <span class="synComment">// 追加(2)</span>
	
	'<span class="synConstant">hello(/:name)?</span>' <span class="synStatement">=&gt;</span> <span class="synType">array</span><span class="synSpecial">(</span>'<span class="synConstant">welcome/hello</span>', '<span class="synConstant">name</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hello</span>'<span class="synSpecial">)</span>,
<span class="synSpecial">)</span>;
</pre>
</div>
<div class="section">
    <h4>ViewModel！ViewModel！！</h4>
    <p>では、最後にお待ちかねのビューモデルです。</p><p>まずはパブリック・タイムライン用のビューモデル。API 制限を考慮して、新しいデータは 30 分に 1 回だけ取得するようにして、それ以外はキャッシュからデータを取得します。API の実行は Model を呼び出すだけです。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/view/hhblog/article/public.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Public Timeline ViewModel.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends ViewModel</span>
<span class="synComment"> */</span>
<span class="synType">class</span> View_Hhblog_Article_Public <span class="synType">extends</span> ViewModel
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku Public Timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * Data cache to make Access-control, </span>
<span class="synComment">	 * and get data from cache in a time.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> view<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">cache_id</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog_public_timeline_json</span>';
		
		<span class="synStatement">try</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// キャッシュにあればキャッシュから取得</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Cache<span class="synStatement">::</span>get<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		<span class="synStatement">catch</span> <span class="synSpecial">(</span>\CacheNotFoundException <span class="synStatement">$</span><span class="synIdentifier">e</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// タイムライン取得(json)</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Model_Api_Hatena_Haiku<span class="synStatement">::</span>getPublicTimeline<span class="synSpecial">()</span>;
			
			<span class="synComment">// キャッシュに保存（0.5時間）</span>
			Cache<span class="synStatement">::</span>set<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span>, <span class="synStatement">$</span><span class="synIdentifier">json</span>, <span class="synConstant">3600</span> <span class="synStatement">*</span> <span class="synConstant">0.5</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		
		<span class="synComment">// jsonデータの配列化</span>
		<span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">=</span> Format<span class="synStatement">::</span>forge<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span>, '<span class="synConstant">json</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>to_array<span class="synSpecial">()</span>;
		
		<span class="synComment">// Viewにセット</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">articles</span>', <span class="synStatement">$</span><span class="synIdentifier">articles</span>, <span class="synConstant">false</span><span class="synSpecial">)</span>;

	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file public.php */</span>
<span class="synComment">/* Location: app/classes/view/hhblog/article/public.php */</span>
</pre><p>次にキーワード・タイムライン用のビューモデルです。パブリック・タイムラインと同じです。Model の実行時に引数にキーワードを渡しています。</p>
<pre class="code lang-php" data-lang="php" data-unlink>ファイル：~/hhblog/fuel/app/classes/view/hhblog/article/keyword.php
<span class="synSpecial">&lt;?php</span>

<span class="synComment">/**</span>
<span class="synComment"> * Hatena-Haiku Blog Keyword Timeline ViewModel.</span>
<span class="synComment"> * </span>
<span class="synComment"> * @package app</span>
<span class="synComment"> * @extends ViewModel</span>
<span class="synComment"> */</span>
<span class="synType">class</span> View_Hhblog_Article_Keyword <span class="synType">extends</span> ViewModel
<span class="synSpecial">{</span>

	<span class="synComment">/**</span>
<span class="synComment">	 * Get Hatena-Haiku keyword timeline.</span>
<span class="synComment">	 * </span>
<span class="synComment">	 * Data cache to make Access-control, </span>
<span class="synComment">	 * and get data from cache in a time.</span>
<span class="synComment">	 */</span>
	<span class="synType">public</span> <span class="synPreProc">function</span> view<span class="synSpecial">()</span>
	<span class="synSpecial">{</span>
		<span class="synStatement">$</span><span class="synIdentifier">cache_id</span> <span class="synStatement">=</span> '<span class="synConstant">hhblog_keyword_timeline_json</span>';
		
		<span class="synStatement">try</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// キャッシュにあればキャッシュから取得</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Cache<span class="synStatement">::</span>get<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		<span class="synStatement">catch</span> <span class="synSpecial">(</span>\CacheNotFoundException <span class="synStatement">$</span><span class="synIdentifier">e</span><span class="synSpecial">)</span>
		<span class="synSpecial">{</span>
			<span class="synComment">// タイムライン取得(json)</span>
			<span class="synStatement">$</span><span class="synIdentifier">json</span> <span class="synStatement">=</span> Model_Api_Hatena_Haiku<span class="synStatement">::</span>getKeywordTimeline<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>keyword<span class="synSpecial">)</span>;
			
			<span class="synComment">// キャッシュに保存（0.5時間）</span>
			Cache<span class="synStatement">::</span>set<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">cache_id</span>, <span class="synStatement">$</span><span class="synIdentifier">json</span>, <span class="synConstant">3600</span> <span class="synStatement">*</span> <span class="synConstant">0.5</span><span class="synSpecial">)</span>;
		<span class="synSpecial">}</span>
		
		<span class="synComment">// jsonデータの配列化</span>
		<span class="synStatement">$</span><span class="synIdentifier">articles</span> <span class="synStatement">=</span> Format<span class="synStatement">::</span>forge<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json</span>, '<span class="synConstant">json</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>to_array<span class="synSpecial">()</span>;
		
		<span class="synComment">// Viewにセット</span>
		<span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>set<span class="synSpecial">(</span>'<span class="synConstant">articles</span>', <span class="synStatement">$</span><span class="synIdentifier">articles</span>, <span class="synConstant">false</span><span class="synSpecial">)</span>;

	<span class="synSpecial">}</span>
<span class="synSpecial">}</span>

<span class="synComment">/* End of file keyword.php */</span>
<span class="synComment">/* Location: app/classes/view/hhblog/article/keyword.php */</span>
</pre><p>ここまで内容が一緒だと、あまり分けた意味がなさそうですが、応用編では表示内容を整形するという ViewModel 本来の処理を組み込んでいくのでこんな感じかな、と思います。</p><p>ちなみに応用編の記事はありません（笑）</p><p>取得したタイムラインのデータを View にセットする際に false を指定しています。</p>

<ul>
<li><code>$this->set('articles', $articles, false);</code></li>
</ul><p>これは API の応答結果より HTML でマークアップ済みのハイク記事本文（key='html'）を、そのまま表示に利用しているためです。</p><p></p>

</div>
</div>
<div class="section">
    <h3>4. 公開環境で動かそう</h3>
    <p>実装が完了して、テストが出来たら（苦笑）、用意してあったレンサバのフレームワーク上に変更分をアップロードします。<br />
<code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog</span></code> や <code><span data-unlink>http://{user-id}.sakura.ne.jp/hhblog/public_timeline</span></code> にアクセスして、はてなハイクブログを表示してみましょう！</p><p>ちなみに自分で作成したものは以下で動いています。</p>

<ul>
<li><a href="http://ytmd.sakura.ne.jp/hhblog/">tmd45 &#x306E;&#x306F;&#x3066;&#x306A;&#x30CF;&#x30A4;&#x30AF;&#x30D6;&#x30ED;&#x30B0;</a></li>
</ul><p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/t/tmd45/20121214/20121214190855.png" alt="f:id:tmd45:20121214190855p:plain" title="f:id:tmd45:20121214190855p:plain" class="hatena-fotolife" itemprop="image"></span></p><p>見た目は <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> と <a href="http://bootswatch.com/">Bootswatch</a> 様様です。タイムライン部分以外は、ブログっぽ～く見えるように適当に捏造しています。</p>

</div>
<div class="section">
    <h3>まとめ</h3>
    <p>いかがでしたでしょうか。コードを載せているのでだいぶ記事が長くなってしまいました。準備から実装まで通して記事にできたので自分の復習用には良かったと思うのですが、Advent Calendar としてどうなんでしょう（苦笑）</p><br />
<p>明日は @<a class="twitter-user-screen-name" href="http://twitter.com/ttikitt">ttikitt</a> さんの『<a href="http://www.cry-kit.com/?p=53">FuelPHP&#x3078;&#x306E;Doctrine2&#x7D44;&#x307F;&#x8FBC;&#x307F;</a>』です！('ω`)ｼ</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn1" name="f1" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">自分の環境では、他のディレクトリのレベルと合わせて 755 にしました。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[米O'Reillyで買ったPDF本をkobo gloでも読めるように加工する]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20121218/1355855444</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20121218/1355855444"/>
        <updated>2012-12-17T18:30:44.000Z</updated>
        <summary type="html"><![CDATA[<p>米 O'Reilly のアカウントを作って手持ちの紙本（同社から出ている英語版に限る）を登録すると、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2">電子書籍</a>版が$4.99/冊で買えるらしい。自宅には CJKV Information Processing（第2版）と Fonts & Encodings があり、どちらもいろいろと役に立っているが、さすがにこれを持ち運ぼうと思うとつらい。</p><p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20121219014418" class="hatena-fotolife" itemprop="url"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20121219/20121219014418.jpg" alt="f:id:mashabow:20121219014418j:image:w500" title="f:id:mashabow:20121219014418j:image:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></a></span></p><p>というわけで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2">電子書籍</a>版をさっそく買ってしまった。タイトルによっては eBub や mobi フォーマットも選択できるようだが、この2冊はPDF版のみ。残念ながら errata は反映されていない様子。</p>

<div class="section">
    <h4>余白の除去</h4>
    <p>このPDFは版面の上下左右に余白が大きく取られているため、これをそのまま<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2">電子書籍</a>端末で読もうとしても読みづらい。ググってみたところ、PDF内部の CropBox の値を書き換えて余白を除去する方法があった。</p>

<ul>
<li><a href="http://sakanaya.kir.jp/ymnet/diary/d/20110330">&#x308F;&#x3044;&#x3048;&#x3080;&#x306D;&#x3063;&#x3068; - 2011/03/30</a></li>
</ul><p>このページの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>にすこし手を加え、次のようにしてみた。</p>
<pre class="code lang-perl" data-lang="perl" data-unlink><span class="synPreProc">#!/usr/bin/perl</span>
<span class="synComment"># crop_pdf.pl - PDFの余白を除去</span>

<span class="synStatement">use utf8</span>;
<span class="synStatement">use strict</span>;
<span class="synStatement">use warnings</span>;

<span class="synComment"># 余白除去を行わずにスキップするページ数</span>
<span class="synStatement">my</span> <span class="synIdentifier">$skip_page</span> = <span class="synConstant">2</span>;  <span class="synComment"># 先頭の2ページ（表紙と裏表紙）</span>

<span class="synStatement">die</span> <span class="synConstant">&quot;Usage: </span><span class="synIdentifier">$0</span><span class="synConstant"> file top right bottom left</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span> <span class="synStatement">unless</span> <span class="synIdentifier">@ARGV</span> == <span class="synConstant">5</span>;
<span class="synStatement">my</span> <span class="synIdentifier">$filename_in</span> = <span class="synIdentifier">$ARGV[</span><span class="synConstant">0</span><span class="synIdentifier">]</span>;

<span class="synComment"># CropBox に合わせて格納（left, bottom, right, top）</span>
<span class="synStatement">my</span> <span class="synIdentifier">@offset</span> = (<span class="synIdentifier">$ARGV[</span><span class="synConstant">4</span><span class="synIdentifier">]</span>, <span class="synIdentifier">$ARGV[</span><span class="synConstant">3</span><span class="synIdentifier">]</span>, -<span class="synIdentifier">$ARGV[</span><span class="synConstant">2</span><span class="synIdentifier">]</span>, -<span class="synIdentifier">$ARGV[</span><span class="synConstant">1</span><span class="synIdentifier">]</span>);

<span class="synStatement">open</span> <span class="synStatement">my</span> <span class="synIdentifier">$in</span>, <span class="synConstant">'&lt;'</span>, <span class="synIdentifier">$filename_in</span> <span class="synStatement">or</span> <span class="synStatement">die</span>;
(<span class="synStatement">my</span> <span class="synIdentifier">$filename_out</span> = <span class="synIdentifier">$filename_in</span>) =~ <span class="synStatement">s/</span><span class="synSpecial">(.*)(\.</span><span class="synConstant">pdf</span><span class="synSpecial">)</span><span class="synConstant">$</span><span class="synStatement">/</span><span class="synIdentifier">$1</span><span class="synConstant">-cropped</span><span class="synIdentifier">$2</span><span class="synStatement">/</span>;
<span class="synStatement">open</span> <span class="synStatement">my</span> <span class="synIdentifier">$out</span>, <span class="synConstant">'&gt;'</span>, <span class="synIdentifier">$filename_out</span> <span class="synStatement">or</span> <span class="synStatement">die</span>;

<span class="synStatement">binmode</span> <span class="synIdentifier">$in</span>;
<span class="synStatement">binmode</span> <span class="synIdentifier">$out</span>;

<span class="synStatement">my</span> <span class="synIdentifier">$page</span> = <span class="synConstant">0</span>;
<span class="synStatement">while</span> (&lt;<span class="synIdentifier">$in</span>&gt;) {
    <span class="synStatement">s/</span><span class="synSpecial">(\/</span><span class="synConstant">CropBox</span><span class="synSpecial">\s*\[\s*(</span><span class="synConstant">[^</span><span class="synSpecial">\[</span><span class="synConstant">]</span><span class="synSpecial">+)\])</span><span class="synStatement">/</span><span class="synConstant">crop(</span><span class="synIdentifier">$1</span><span class="synConstant">, </span><span class="synIdentifier">$2</span><span class="synConstant">)</span><span class="synStatement">/eg</span>;
    <span class="synStatement">print</span> <span class="synIdentifier">$out</span> <span class="synIdentifier">$_</span>;
}

<span class="synStatement">sub </span><span class="synIdentifier">crop </span>{
    <span class="synIdentifier">$page</span>++;
    <span class="synStatement">return</span> <span class="synIdentifier">$_[</span><span class="synConstant">0</span><span class="synIdentifier">]</span> <span class="synStatement">if</span> <span class="synIdentifier">$page</span> &lt;= <span class="synIdentifier">$skip_page</span>;

    <span class="synStatement">my</span> <span class="synIdentifier">@offset</span> = <span class="synIdentifier">@offset</span>;
    <span class="synStatement">my</span> <span class="synIdentifier">@pos</span> = <span class="synStatement">map{int</span> <span class="synIdentifier">$_</span> + <span class="synStatement">shift</span> <span class="synIdentifier">@offset</span><span class="synStatement">}</span> <span class="synStatement">split</span> <span class="synStatement">/</span><span class="synSpecial">\s+</span><span class="synStatement">/</span>, <span class="synIdentifier">$_[</span><span class="synConstant">1</span><span class="synIdentifier">]</span>;

    <span class="synStatement">my</span> <span class="synIdentifier">$crop</span> = <span class="synStatement">sprintf</span> <span class="synConstant">'/CropBox[%d %d %d %d]'</span>, <span class="synIdentifier">@pos</span>;

    <span class="synStatement">my</span> <span class="synIdentifier">$blank</span> = <span class="synStatement">length</span>(<span class="synIdentifier">$_[</span><span class="synConstant">0</span><span class="synIdentifier">]</span>) - <span class="synStatement">length</span> <span class="synIdentifier">$crop</span>;
    <span class="synStatement">warn</span> <span class="synIdentifier">$_[</span><span class="synConstant">0</span><span class="synIdentifier">]</span> <span class="synStatement">and</span> <span class="synStatement">return</span> <span class="synIdentifier">$_[</span><span class="synConstant">0</span><span class="synIdentifier">]</span> <span class="synStatement">if</span> <span class="synIdentifier">$blank</span> &lt; <span class="synConstant">0</span>;

    <span class="synStatement">return</span> <span class="synIdentifier">$crop</span>.(<span class="synConstant">' '</span> x <span class="synIdentifier">$blank</span>);
}
</pre><p>これを</p>

<pre>$ <a class="keyword" href="http://d.hatena.ne.jp/keyword/perl">perl</a> crop_pdf.pl Fonts_and_Encodings.pdf 70 110 140 95
</pre><p>などとして実行すれば、余白が除去されたPDFファイル Fonts_and_Encodings-cropped.pdf が生成される。なお、余白除去量の指定順序は、自分でわかりやすいように上から時計回り（<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>と同じ）とした。<a class="keyword" href="http://d.hatena.ne.jp/keyword/kobo%20glo">kobo glo</a> での閲覧を考えると、なるべく大きく表示させるために上下の余白をギリギリまで切り詰めたい。何度か試してみた結果、とりあえず以下のパラメータに落ち着いた。</p>

<ul>
<li>CJKV Information Processing: 40 50 30 50</li>
<li>Fonts & Encodings: 70 110 140 95<a href="#f-01a4e8e7" name="fn-01a4e8e7" title="一部のページで下が切れてしまうが、これで妥協。">*1</a></li>
</ul>
</div>
<div class="section">
    <h4>書名・著者名の追加</h4>
    <p>このPDFの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF">メタデータ</a>には書名や著者名が入っていないため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/kobo">kobo</a> では「untitled」「著者不明」などと表示されてしまう。今回は <a href="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/">pdftk</a> でこれを編集してみた。</p>

<pre>$ pdftk orig.pdf dump_data_utf8 > metadata.txt
</pre><p>とすると、orig.pdf の書名・著者名・しおりなどの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF">メタデータ</a>が metadata.txt に書き出される。これを編集し、例えば</p>

<pre>InfoKey: Title
InfoValue: CJKV Information Processing, 2nd Edition
InfoKey: Author
InfoValue: <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ken%20Lunde">Ken Lunde</a>
（以下略）
</pre><p>のように書き換える（該当部分がなければ追加する）。あとは</p>

<pre>$ pdftk orig.pdf update_info_utf8 metadata.txt output new.pdf
</pre><p>とすれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF">メタデータ</a>だけが書き換わったPDFファイル new.pdf が生成される。</p>

</div>
<div class="section">
    <h4>まとめ</h4>
    <p>以上の余白除去と書名・著者名の追加あたりをやっておけば、一応はまずまず使えるようになる。もっとも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/kobo">kobo</a> のPDF対応は、検索ができない・しおりの階層が無視される・操作性が悪いなど、不満な点も多々あるのが現状。</p><p>というわけで、みなさんもぜひ CJKV Information Processing と Fonts & Encodings のPDFを買って携帯しましょう！</p><p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596514476/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51jJqVHlF%2BL._SL160_.jpg" class="hatena-asin-detail-image" alt="CJKV Information Processing: Chinese, Japanese, Korean, and Vietnamese Computing" title="CJKV Information Processing: Chinese, Japanese, Korean, and Vietnamese Computing"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596514476/msb2-22/">CJKV Information Processing: Chinese, Japanese, Korean, and Vietnamese Computing</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Ken%20Lunde">Ken Lunde</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> O'Reilly Media</li><li><span class="hatena-asin-detail-label">発売日:</span> 2009/01/08</li><li><span class="hatena-asin-detail-label">メディア:</span> ペーパーバック</li><li> <span class="hatena-asin-detail-label">クリック</span>: 6回</li><li><a href="http://d.hatena.ne.jp/asin/0596514476/msb2-22" target="_blank">この商品を含むブログ (11件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596102429/msb2-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51HDrORdUsL._SL160_.jpg" class="hatena-asin-detail-image" alt="Fonts & Encodings: From Advanced Typography to Unicode and Everything in Between" title="Fonts & Encodings: From Advanced Typography to Unicode and Everything in Between"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596102429/msb2-22/">Fonts & Encodings: From Advanced Typography to Unicode and Everything in Between</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Yannis Haralambous</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> O'Reilly Media</li><li><span class="hatena-asin-detail-label">発売日:</span> 2007/10/06</li><li><span class="hatena-asin-detail-label">メディア:</span> ペーパーバック</li><li><span class="hatena-asin-detail-label">購入</span>: 3人 <span class="hatena-asin-detail-label">クリック</span>: 42回</li><li><a href="http://d.hatena.ne.jp/asin/0596102429/msb2-22" target="_blank">この商品を含むブログ (11件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

</div><div class="footnote">
<p class="footnote"><a href="#fn-01a4e8e7" name="f-01a4e8e7" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">一部のページで下が切れてしまうが、これで妥協。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[svivs の現状について]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20121113/1352824794</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20121113/1352824794"/>
        <updated>2012-11-12T16:39:54.000Z</updated>
        <summary type="html"><![CDATA[<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a> を見ていて、あーそういやそんなもんあったなーと思いだしたのですが、以前 svivs という<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB">ツール</a>を作りました。</p>

<ul>
<li><a href="http://shiromoji.net/tool/svivs/">IVS&#xFF08;&#x7570;&#x4F53;&#x5B57;&#x30B7;&#x30FC;&#x30B1;&#x30F3;&#x30B9;&#xFF09;&#x5165;&#x529B;&#x30C4;&#x30FC;&#x30EB; svivs - &#x3057;&#x308D;&#x3082;&#x3058;&#x4F5C;&#x696D;&#x5BA4;</a></li>
</ul>
<div class="section">
    <h4>現状</h4>
    <p>当時は更新・拡張したい点などいくつかあったわけですが、結局のところ今まで放置状態になっています。理由としては、</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu</a> をメインで使うようになったが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe%20AIR">Adobe AIR</a> の開発・実行環境は <a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a> に対応していない</li>
<li>当時はIVSをサポートするOS・ブラウザ・その他アプリケーションが少なかったため、多くの環境で比較的確実に利用できる <a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe%20AIR">Adobe AIR</a> を使っていたが、現在ではサポートが進んで問題にならなくなってきた</li>
<li>そもそも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe%20AIR">Adobe AIR</a> 自体が結局世間ではあまり使われていない気がする</li>
<li>めんど(ry</li>
</ul><p>といったあたりで、残念ながら今後も放置状態が続くかと思われます。また、svivs 内部で利用しているIVDのバージョンが古いこともあり、今後の svivs の利用は<strong>推奨しません</strong>。次項の作業によってIVDを更新することは可能ですが、このような現状を把握した上で、自己責任でお願いします。</p>

</div>
<div class="section">
    <h4>svivs で使われているIVDを更新するには</h4>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode%20Consortium">Unicode Consortium</a> の公開するIVDは、これまで何回かアップデートが行われてきました。</p>

<ul>
<li><a href="http://www.unicode.org/ivd/">Ideographic Variation Database</a></li>
</ul><p>svivs は当時最新版であった2010-11-14版のIVDを利用していますが、その後 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 と Hanyo-Denshi の両方のコレクションにIVSが追加された、2012-03-02版が出ています。これに対応させたい場合には、以下の作業を行なう必要があります<a href="#f-4c4f26a9" name="fn-4c4f26a9" title="パスは Windows 7 64bit 環境での例。自分の環境に合わせて適宜読み替えてください。">*1</a>。</p>

<ol>
<li><a href="http://www.unicode.org/ivd/#versions">Versions of the IVD</a> のリンクから、最新版の IVD_Sequences.txt をダウンロードする</li>
<li>\Program Files (<a class="keyword" href="http://d.hatena.ne.jp/keyword/x86">x86</a>)\svivs\IVD_Sequences.txt を、ダウンロードした IVD_Sequences.txt で上書きする</li>
<li>\Users\{ユーザ名}\AppData\Roaming\net.shiromoji.Svivs\ivd.<a class="keyword" href="http://d.hatena.ne.jp/keyword/sqlite">sqlite</a> を削除する</li>
<li>svivs を起動する</li>
</ol><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1, Hanyo-Denshi 以外のコレクションが新設されるなどした場合には対応できませんので、ご注意ください。</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn-4c4f26a9" name="f-4c4f26a9" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">パスは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows%207">Windows 7</a> 64bit 環境での例。自分の環境に合わせて適宜読み替えてください。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[アウトラインのSVGからフォントを生成 #かな書いてみる]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20120314/1331744357</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20120314/1331744357"/>
        <updated>2012-03-13T16:59:17.000Z</updated>
        <summary type="html"><![CDATA[<p>IVSやら何やら他の話題に飛びついていたので間が空いてしまったが、明朝かな書体制作のつづき。<a href="http://d.hatena.ne.jp/mashabow/20120229/1330530950">&#x524D;&#x56DE;&#x306F;&#x30A2;&#x30A6;&#x30C8;&#x30E9;&#x30A4;&#x30F3;&#x3092;&#x4F5C;&#x3063;&#x305F;</a>ので、今回はここからフォントを生成したい。</p>

<div class="section">
    <h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>の分割</h4>
    
<ul>
<li><a href="http://shiromoji.net/font/zeromin/0.100/hiragana_1.svg">hiragana_1.svg</a></li>
</ul><p>まず、これがアウトラインのファイル。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Inkscape">Inkscape</a> で作成し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>として保存した。アウトラインは outline という名前のレイヤーの中に作っている。仮想ボディのサイズは100pxとした。</p><p>これをグリフごとに分割し、1文字1ファイルにする。今回は（も？）<a class="keyword" href="http://d.hatena.ne.jp/keyword/Perl">Perl</a> で簡単な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>を書き、これを利用した。単純なものなので、path 要素以外の要素（グループも含む）に対応していないなどいろいろと制限はある。また <a href="http://search.cpan.org/perldoc?XML::Simple">XML::Simple</a> を利用しているので、実行するには <a class="keyword" href="http://d.hatena.ne.jp/keyword/XML">XML</a>::Simple のインストールが必要。</p>

<ul>
<li><a href="http://shiromoji.net/font/zeromin/0.100/split_svg.pl">split_svg.pl</a></li>
</ul><pre class="code lang-perl" data-lang="perl" data-unlink><span class="synPreProc">#!/usr/bin/perl</span>
<span class="synComment">#</span>
<span class="synComment"># SVGをグリフごとに分割</span>
<span class="synComment"># usage: perl split_svg.pl svg_sheet.svg list.txt</span>

<span class="synStatement">use strict</span>;
<span class="synStatement">use warnings</span>;
<span class="synStatement">use </span>autodie;
<span class="synStatement">use utf8</span>;
<span class="synStatement">use </span><span class="synConstant">5.010</span>;
<span class="synStatement">binmode</span> <span class="synIdentifier">STDOUT</span>, <span class="synConstant">&quot;:utf8&quot;</span>;

<span class="synStatement">use constant</span> <span class="synConstant">OUT_DIR</span> =&gt; <span class="synConstant">&quot;glyphs&quot;</span>;
<span class="synStatement">use constant</span> <span class="synConstant">PIXELS_PER_EM</span> =&gt;  <span class="synConstant">100</span>;
<span class="synStatement">use constant</span> <span class="synConstant">UNITS_PER_EM</span>  =&gt; <span class="synConstant">1000</span>;

<span class="synStatement">use </span>XML::Simple;

<span class="synStatement">my</span> (<span class="synIdentifier">$svg_file</span>, <span class="synIdentifier">$list_file</span>) = <span class="synIdentifier">@ARGV</span>;

<span class="synComment"># SVG 読み込み</span>
<span class="synStatement">my</span> <span class="synIdentifier">$svg</span> = XMLin(<span class="synIdentifier">$svg_file</span>, <span class="synConstant">forcearray</span> =&gt; <span class="synConstant">1</span>, <span class="synConstant">keyattr</span> =&gt; []);

<span class="synComment"># 行数・列数を求める</span>
<span class="synStatement">my</span> <span class="synIdentifier">$row_max</span> = <span class="synStatement">int</span> (<span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">height</span><span class="synIdentifier">}</span> / PIXELS_PER_EM) - <span class="synConstant">1</span>;
<span class="synStatement">my</span> <span class="synIdentifier">$col_max</span> = <span class="synStatement">int</span> (<span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">width</span><span class="synIdentifier">}</span> / PIXELS_PER_EM) - <span class="synConstant">1</span>;

<span class="synComment"># outline レイヤーを探す</span>
<span class="synStatement">my</span> <span class="synIdentifier">$groups</span> = <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">g</span><span class="synIdentifier">}</span>;
<span class="synStatement">my</span> <span class="synIdentifier">$group_outline</span>;
<span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$group</span> (<span class="synIdentifier">@$groups</span>) {
  <span class="synStatement">if</span> (<span class="synIdentifier">$group-&gt;{</span><span class="synConstant">'inkscape:label'</span><span class="synIdentifier">}</span> <span class="synStatement">eq</span> <span class="synConstant">&quot;outline&quot;</span>) {
    <span class="synIdentifier">$group_outline</span> = <span class="synIdentifier">$group</span>;
    <span class="synStatement">last</span>;
  }
}
<span class="synStatement">die</span> <span class="synConstant">&quot;outlineレイヤーが存在しません&quot;</span> <span class="synStatement">unless</span> <span class="synStatement">defined</span> <span class="synIdentifier">$group_outline</span>;

<span class="synComment"># 変換行列を求める</span>
<span class="synStatement">my</span> <span class="synIdentifier">$transform</span> = <span class="synIdentifier">$group_outline-&gt;{</span><span class="synConstant">transform</span><span class="synIdentifier">}</span>;
<span class="synStatement">my</span> (<span class="synIdentifier">$a</span>, <span class="synIdentifier">$b</span>, <span class="synIdentifier">$c</span>, <span class="synIdentifier">$d</span>, <span class="synIdentifier">$e</span>, <span class="synIdentifier">$f</span>) = (<span class="synConstant">1</span>, <span class="synConstant">0</span>, <span class="synConstant">0</span>, <span class="synConstant">1</span>, <span class="synConstant">0</span>, <span class="synConstant">0</span>);
<span class="synStatement">if</span> (!<span class="synStatement">defined</span> <span class="synIdentifier">$transform</span>) {
  <span class="synComment"># noop</span>
} <span class="synStatement">elsif</span> (<span class="synIdentifier">$transform</span> =~ <span class="synStatement">m/</span><span class="synConstant">translate</span><span class="synSpecial">\((?</span><span class="synConstant">&lt;tx&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;ty&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)\)</span><span class="synStatement">/</span>) {
  <span class="synIdentifier">$e</span> = <span class="synIdentifier">$+</span>{tx};
  <span class="synIdentifier">$f</span> = <span class="synIdentifier">$+</span>{ty};
} <span class="synStatement">elsif</span> (<span class="synIdentifier">$transform</span> =~ <span class="synStatement">m/</span><span class="synConstant">matrix</span><span class="synSpecial">\((?</span><span class="synConstant">&lt;a&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;b&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)\)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;c&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;d&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;e&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;f&gt;-</span><span class="synSpecial">?\d+(.\d+)?(</span><span class="synConstant">e-</span><span class="synSpecial">?\d+)?)</span><span class="synStatement">/</span>) {
  <span class="synIdentifier">$a</span> = <span class="synIdentifier">$+</span>{a};  <span class="synIdentifier">$c</span> = <span class="synIdentifier">$+</span>{c};  <span class="synIdentifier">$e</span> = <span class="synIdentifier">$+</span>{e};
  <span class="synIdentifier">$b</span> = <span class="synIdentifier">$+</span>{b};  <span class="synIdentifier">$d</span> = <span class="synIdentifier">$+</span>{d};  <span class="synIdentifier">$f</span> = <span class="synIdentifier">$+</span>{f};
} <span class="synStatement">else</span> {
  <span class="synStatement">die</span> <span class="synConstant">&quot;未対応のtransformです: </span><span class="synIdentifier">$transform</span><span class="synConstant">&quot;</span>
}

<span class="synComment"># グリフごとに path を格納する変数</span>
<span class="synStatement">my</span> <span class="synIdentifier">@glyphs</span> = ();
<span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$row</span> (<span class="synConstant">0</span> .. <span class="synIdentifier">$row_max</span>) {
  <span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$col</span> (<span class="synConstant">0</span> .. <span class="synIdentifier">$col_max</span>) {
    <span class="synIdentifier">$glyphs[$row][$col]</span> = [];
  }
}

<span class="synComment"># @glyphs にパスを格納</span>
<span class="synStatement">my</span> <span class="synIdentifier">$paths</span> = <span class="synIdentifier">$group_outline-&gt;{</span><span class="synConstant">path</span><span class="synIdentifier">}</span>;
<span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$path</span> (<span class="synIdentifier">@$paths</span>) {
  <span class="synStatement">my</span> <span class="synIdentifier">@data_args</span> = <span class="synStatement">split</span> <span class="synStatement">/</span><span class="synSpecial">\s+</span><span class="synStatement">/</span>, <span class="synIdentifier">$path-&gt;{</span><span class="synConstant">d</span><span class="synIdentifier">}</span>;
  <span class="synStatement">my</span> <span class="synIdentifier">$new_data</span> = <span class="synConstant">&quot;&quot;</span>;
  <span class="synStatement">my</span> (<span class="synIdentifier">$col</span>, <span class="synIdentifier">$row</span>);
  <span class="synStatement">my</span> <span class="synIdentifier">$is_moveto_point</span> = <span class="synConstant">1</span>;
  <span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$data_arg</span> (<span class="synIdentifier">@data_args</span>) {
    <span class="synStatement">if</span> (<span class="synIdentifier">$data_arg</span> =~ <span class="synStatement">m/</span><span class="synSpecial">(?</span><span class="synConstant">&lt;x&gt;-</span><span class="synSpecial">?\d+(.\d+)?)</span><span class="synConstant">,</span><span class="synSpecial">(?</span><span class="synConstant">&lt;y&gt;-</span><span class="synSpecial">?\d+(.\d+)?)</span><span class="synStatement">/</span>) {
      <span class="synStatement">my</span> <span class="synIdentifier">$x</span> = <span class="synIdentifier">$+</span>{x};
      <span class="synStatement">my</span> <span class="synIdentifier">$y</span> = <span class="synIdentifier">$+</span>{<span class="synStatement">y}</span><span class="synConstant">;</span>
<span class="synConstant">      if ($is_moveto_point) {</span>
<span class="synConstant">        $x = $a * $x + $c * $y + $e;</span>
<span class="synConstant">        $y = $b * $x + $d * $y + $f;</span>
<span class="synConstant">        $col = int ($x / PIXELS_PER_EM);</span>
<span class="synConstant">        $row = int ($y / PIXELS_PER_EM);</span>
<span class="synConstant">        $x %= PIXELS_PER_EM;</span>
<span class="synConstant">        $y %= PIXELS_PER_EM;</span>
<span class="synConstant">        $is_moveto_point = 0;</span>
<span class="synConstant">      </span><span class="synStatement">}</span>
<span class="synConstant">      $x *= UNITS_PER_EM / PIXELS_PER_EM;</span>
<span class="synConstant">      $y *= UNITS_PER_EM / PIXELS_PER_EM;</span>
<span class="synConstant">      $data_arg = &quot;$x,$y&quot;</span>
<span class="synConstant">    </span><span class="synStatement">}</span>
    <span class="synIdentifier">$new_data</span> .= <span class="synConstant">&quot;</span><span class="synIdentifier">$data_arg</span><span class="synConstant"> &quot;</span>;
  } 
  <span class="synStatement">next</span> <span class="synStatement">if</span> (<span class="synIdentifier">$col</span> &lt; <span class="synConstant">0</span> || <span class="synIdentifier">$col_max</span> &lt; <span class="synIdentifier">$col</span> || <span class="synIdentifier">$row</span> &lt; <span class="synConstant">0</span> || <span class="synIdentifier">$row_max</span> &lt; <span class="synIdentifier">$row</span>);
  <span class="synIdentifier">$path-&gt;{</span><span class="synConstant">d</span><span class="synIdentifier">}</span> = <span class="synIdentifier">$new_data</span>;
  <span class="synStatement">push</span> <span class="synIdentifier">@{$glyphs[$row][$col]}</span>, <span class="synIdentifier">$path</span>;
}

<span class="synComment"># リスト読み込み</span>
<span class="synStatement">my</span> <span class="synIdentifier">@glyphname_list</span> = ();
<span class="synStatement">open</span> <span class="synStatement">my</span> <span class="synIdentifier">$fh_list</span>, <span class="synConstant">'&lt;:utf8'</span>, <span class="synIdentifier">$list_file</span>;
<span class="synStatement">while</span> (<span class="synStatement">my</span> <span class="synIdentifier">$line</span> = &lt;<span class="synIdentifier">$fh_list</span>&gt;) {
  <span class="synStatement">chomp</span> <span class="synIdentifier">$line</span>;
  <span class="synStatement">my</span> <span class="synIdentifier">@list</span> = <span class="synStatement">map {</span> <span class="synStatement">sprintf</span> <span class="synConstant">&quot;u%x&quot;</span>, (<span class="synStatement">unpack</span> <span class="synConstant">&quot;U*&quot;</span>, <span class="synIdentifier">$_</span>) <span class="synStatement">}</span> <span class="synStatement">split</span> <span class="synStatement">/</span><span class="synConstant"> </span><span class="synSpecial">+</span><span class="synStatement">/</span>, <span class="synIdentifier">$line</span>;
  <span class="synStatement">push</span> <span class="synIdentifier">@glyphname_list</span>, \<span class="synIdentifier">@list</span>;
}
<span class="synStatement">close</span> <span class="synIdentifier">$fh_list</span>;

<span class="synComment"># 各グリフの SVG を生成</span>
<span class="synStatement">mkdir</span> OUT_DIR <span class="synStatement">if</span> !<span class="synStatement">-d</span> OUT_DIR;
<span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$row</span> (<span class="synConstant">0</span> .. <span class="synIdentifier">$row_max</span>) {
  <span class="synStatement">foreach</span> <span class="synStatement">my</span> <span class="synIdentifier">$col</span> (<span class="synConstant">0</span> .. <span class="synIdentifier">$col_max</span>) {
    <span class="synStatement">my</span> <span class="synIdentifier">$svg</span>;
    <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">'xmlns:sodipodi'</span><span class="synIdentifier">}</span> = <span class="synConstant">&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;</span>;
    <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">'xmlns:inkscape'</span><span class="synIdentifier">}</span> = <span class="synConstant">&quot;http://www.inkscape.org/namespaces/inkscape&quot;</span>;
    <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">width</span><span class="synIdentifier">}</span> = UNITS_PER_EM;
    <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">height</span><span class="synIdentifier">}</span> = UNITS_PER_EM;
    <span class="synIdentifier">$svg-&gt;{</span><span class="synConstant">path</span><span class="synIdentifier">}</span> = <span class="synIdentifier">$glyphs[$row][$col]</span>;
    <span class="synStatement">my</span> <span class="synIdentifier">$svg_string</span> = <span class="synConstant">'&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;'</span>;
    <span class="synIdentifier">$svg_string</span> .= <span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span> . XMLout(<span class="synIdentifier">$svg</span>, <span class="synConstant">RootName</span> =&gt; <span class="synConstant">&quot;svg&quot;</span>);
    <span class="synStatement">my</span> <span class="synIdentifier">$glyphname</span> = <span class="synIdentifier">$glyphname_list[$row][$col]</span>;
    <span class="synStatement">next</span> <span class="synStatement">if</span> (!<span class="synStatement">defined</span> <span class="synIdentifier">$glyphname</span> || <span class="synIdentifier">$glyphname</span> <span class="synStatement">eq</span> <span class="synConstant">&quot;u3000&quot;</span>); <span class="synComment"># u3000：全角スペース</span>
    <span class="synStatement">open</span> <span class="synStatement">my</span> <span class="synIdentifier">$fh_out</span>, <span class="synConstant">'&gt;'</span>, OUT_DIR . <span class="synConstant">&quot;/</span><span class="synIdentifier">$glyphname</span><span class="synConstant">.svg&quot;</span>;
    <span class="synStatement">print</span> <span class="synIdentifier">$fh_out</span> <span class="synIdentifier">$svg_string</span>;
    <span class="synStatement">close</span> <span class="synIdentifier">$fh_out</span>;
  }
}

<span class="synStatement">exit</span> <span class="synConstant">0</span>;
</pre><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>のどのマスがどのグリフか、割り当て表も用意しておく。</p>

<ul>
<li><a href="http://shiromoji.net/font/zeromin/0.100/hiragana_list.txt">hiragana_list.txt</a></li>
</ul>
<pre>あ い う え お
か き く け こ
さ し す せ そ
た ち つ て と
な に ぬ ね の
は ひ ふ へ ほ
ま み む め も
や 　 ゆ 　 よ
ら り る れ ろ
わ ゐ ん ゑ を
</pre><p>これを例えば</p>

<pre>> <a class="keyword" href="http://d.hatena.ne.jp/keyword/perl">perl</a> split_<a class="keyword" href="http://d.hatena.ne.jp/keyword/svg">svg</a>.pl hiragana_1.<a class="keyword" href="http://d.hatena.ne.jp/keyword/svg">svg</a> hiragana_list.txt
</pre><p>として実行すれば、glyphs ディレクトリに一字一字の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>が生成される。</p>

</div>
<div class="section">
    <h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> でフォント化</h4>
    <p>そして、このバラした<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>ファイルを <a href="http://fontforge.sourceforge.net/ja/overview.html">FontForge</a> に取り込み、フォントを生成する。</p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> では<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>の1pxがフォントの1ユニットに相当する。また、OpenType の標準は1000ユニット/emなので、インポート元の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>を1000×1000pxにしておくとちょうど良い。今回は、split_<a class="keyword" href="http://d.hatena.ne.jp/keyword/svg">svg</a>.pl でバラすときに<a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>のサイズを1000×1000pxへ変換しているので、あとはそのままインポートするだけでよい。</p>

<ul>
<li><a href="http://shiromoji.net/font/zeromin/0.100/generate.pe">generate.pe</a></li>
</ul>
<pre>#!/usr/bin/<a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a> -script

if ($argc != 2)
  Print("usage: <a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a> -script " + $0 + " [version]")
  Quit()
endif

_version      = $1
_fontfilename = "zeromin_" + _version + ".otf"
_importfiles  = "glyphs/u*.<a class="keyword" href="http://d.hatena.ne.jp/keyword/svg">svg</a>"

New()

# .notdef作成
Select(0x0000)
SetWidth(1000)
SetGlyphName(".notdef")

# <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9">エンコード</a>に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode</a>を指定
Reencode("<a class="keyword" href="http://d.hatena.ne.jp/keyword/unicode">unicode</a>")

# <a class="keyword" href="http://d.hatena.ne.jp/keyword/SVG">SVG</a>をすべてインポート
Import(_importfiles, 0)

# 自動ヒントづけOFF
SelectAll()
DontAutoHint()

# パスの統合
RemoveOverlap()

# 整数値に丸める
RoundToInt()

# 半角スペース作成
Select(0u0020)
SetWidth(500)

# 全角スペース作成
Select(0u3000)
SetWidth(1000)

# フォント情報設定
SetFontNames("ZeroMin",\
             "ZeroMin",\
             "ZeroMin",\
             "Regular",\
             "<a class="keyword" href="http://d.hatena.ne.jp/keyword/%26%23169%3B">&#169;</a> 2012 mashabow",\
             _version) 
SetOS2Value("WinAscent", 880)
SetOS2Value("WinDescent", 120)
SetOS2Value("HHeadAscent", 880)
SetOS2Value("HHeadDescent", -120)

# OTF生成
Generate(_fontfilename)
Print("generated: "+ _fontfilename)

Close()

Quit()
</pre><p>この<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>を <a class="keyword" href="http://d.hatena.ne.jp/keyword/FontForge">FontForge</a> で動かせば<a href="#f-cf7ed247" name="fn-cf7ed247" title="unofficial fontforge-cygwin でのスクリプトの動かし方は[http://d.hatena.ne.jp/mashabow/20110802/1312290209:title=この記事]を参照。">*1</a>、とりあえずはフォントが生成される。最初の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>ということで「ZeroMin」と仮に名付けてみた。</p>

</div>
<div class="section">
    <h4>試し打ち</h4>
    <p>出来上がったフォントをインストールして、さっそく試し打ち。</p>

<ul>
<li><a href="http://shiromoji.net/font/zeromin/0.100/sample_0.100.pdf">sample_0.100.pdf</a></li>
</ul><p>んー。初めてにしてはまずまずなような気もしないでもないけど、やっぱり字面の大きさや寄り引き、太さなんかのバラつきが目立つ。実用にはちょっと堪えない。</p><p>というわけで、まだまだ先は長そう。</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn-cf7ed247" name="f-cf7ed247" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">unofficial <a class="keyword" href="http://d.hatena.ne.jp/keyword/fontforge">fontforge</a>-<a class="keyword" href="http://d.hatena.ne.jp/keyword/cygwin">cygwin</a> での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>の動かし方は<a href="http://d.hatena.ne.jp/mashabow/20110802/1312290209">&#x3053;&#x306E;&#x8A18;&#x4E8B;</a>を参照。</span></p>
</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[JIS X 0208 と JIS X 0213 が改正されていた件]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20120311/1331456551</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20120311/1331456551"/>
        <updated>2012-03-11T09:02:31.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/mashabow/20111222/1324570126">&#x6628;&#x5E74;12&#x6708;&#x306B;&#x5C0F;&#x6797;&#x3055;&#x3093;&#x306E;&#x8B1B;&#x6F14;&#x3092;&#x805E;&#x3044;&#x305F;</a>とき、<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200213">JIS X 0213</a> が近々改正されるというようなことをおっしゃっていた。そんなことはほとんど忘れていたのだが、</p>

    <blockquote cite="http://toro.2ch.net/test/read.cgi/tech/1306595564/">
        <p><b>584 デフォルトの名無しさん 2012/03/11(日) 13:26:15.37</b><br />
　そういや結局0213って改正するの？ <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA">常用漢字</a>の関係で <br />
 <br />
<b>588 デフォルトの名無しさん 2012/03/11(日) 16:02:37.18</b><br />
　JISCのサイト言ったらいつのまにか改正されててワロタ<br>　誰も気づかなかったのか…</p>

        <cite><a href="http://toro.2ch.net/test/read.cgi/tech/1306595564/">&#x6587;&#x5B57;&#x30B3;&#x30FC;&#x30C9;&#x7DCF;&#x5408;&#x30B9;&#x30EC; part7</a></cite>
    </blockquote>
<p>な、なんだってー！(AAry</p><p><a href="http://www.jisc.go.jp/app/JPS/JPSO0020.html">JISC&#x306E;&#x30B5;&#x30A4;&#x30C8;</a>で調べてみると、たしかに2012年2月20日付で <a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200208">JIS X 0208</a> と <a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200213">JIS X 0213</a> が改正され、<a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200208">JIS X 0208</a>:2012 と <a class="keyword" href="http://d.hatena.ne.jp/keyword/JIS%20X%200213">JIS X 0213</a>:2012 になっている。それぞれ第5次規格、第3次規格にあたる。どちらも追補の形で出されており、PDFでは後ろ2ファイルが改正分になっている。</p><p>改正点はざっとこんな感じ。</p>

<ul>
<li>6.6.2「字体の表現としての字形」において、旧<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA%C9%BD">常用漢字表</a>「（付）字体についての解説 第1 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%C0%C4%AB%C2%CE">明朝体</a>活字のデザインについて」から引用していた「例」を削除し、代わりに新<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA%C9%BD">常用漢字表</a>から引用。</li>
<li>附属書6（参考）「漢字の分類及び配列」の（旧）常用音訓を示す「[常]」を削除。（0208のみ）</li>
<li>附属書12（参考）「この規格と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA%C9%BD">常用漢字表</a>との対応」を追加。区点位置・例示字体・音訓を示す。</li>
</ul><p>というわけで、2010年11月30日の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%EF%CD%D1%B4%C1%BB%FA%C9%BD">常用漢字表</a>改定に合わせた小さな改正になっている。規格の内容自体に関しては、実質的な変更はない。</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[花園明朝OT＋Web フォントによるIVSと OpenType feature tag の表示テスト]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20120308/1331194033</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20120308/1331194033"/>
        <updated>2012-03-08T08:07:13.000Z</updated>
        <summary type="html"><![CDATA[<p>ブラウザ上で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>を表示するには、2つの方法がある。<a href="http://ja.wikipedia.org/wiki/%E7%95%B0%E4%BD%93%E5%AD%97%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF">&#x7570;&#x4F53;&#x5B57;&#x30BB;&#x30EC;&#x30AF;&#x30BF;</a>を使ってIVSで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>を表現する方法と、CSS3の font-feature-settings プロパティを使って OpenType feature tag によるグリフ置換をする方法だ。今回、<a href="http://shiromoji.net/font/HanaMinOT/">&#x82B1;&#x5712;&#x660E;&#x671D;OT</a>を Web フォントとして利用し、この2つの方法で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>の表示テストを行った。</p>

<div class="section">
    <h4>方法の具体的な解説</h4>
    
<div class="section">
    <h5>IVSによる方法</h5>
    <p>IVS（Ideographic Variation Sequence）は親字（基底文字）にVS（Variation Selector; U+E0100&#8211;U+E01EF）をつけて<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>を表現する。詳しくは下の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Wikipedia">Wikipedia</a> の記事などを参照。</p>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E7%95%B0%E4%BD%93%E5%AD%97%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF">&#x7570;&#x4F53;&#x5B57;&#x30BB;&#x30EC;&#x30AF;&#x30BF; - Wikipedia</a></li>
</ul><p>この方法で表現される<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>は、基底文字の包摂範囲内に含まれることになっている。プレーンテキストとして扱えるので、HTMLで表示したければそのままIVS（＝基底文字＋VS）を書けばよい。通常の文字と同様、数値<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%BB%B2%BE%C8">文字参照</a>を使って書くこともできる。フォントやOS、アプリケーションが対応していない場合には、通常の基底文字のグリフが単に表示される（ことが望まれるが、VSが豆腐などで表示されてしまうことが多い）。</p><p>例えばHTMLで</p>
<pre class="code lang-html" data-lang="html" data-unlink>葛　葛<span class="synSpecial">&amp;#xe0100;</span>　葛<span class="synSpecial">&amp;#xe0101;</span>
</pre><p>と書けば、</p>

<pre>葛　葛&#xe0100;　葛&#xe0101;
</pre><p>のように表示される。</p>

</div>
<div class="section">
    <h5>OpenType feature tag による方法</h5>
    <p><a href="http://www.microsoft.com/typography/otspec/featurelist.htm">OpenType &#x306B;&#x306F;&#x3044;&#x308D;&#x3044;&#x308D;&#x306A;&#x30BF;&#x30B0;&#x304C;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;</a>が、漢字に関係するタグは expt, hojo, jp78, jp83, jp90, nlck, trad, aalt などである。あるグリフから別のグリフへ、一対一や一対多で置換できる。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac%20OS%20X">Mac OS X</a> や <a class="keyword" href="http://d.hatena.ne.jp/keyword/InDesign">InDesign</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Illustrator">Illustrator</a> などでは以前から使われているが、それ以外の環境ではでは対応が進んでいないため、あまり使われていない。圧→壓 のように、包摂範囲外のグリフへの置換も定義されている。</p><p>プレーンテキストでは扱えないため、HTMLではCSS3の <a href="http://dev.w3.org/csswg/css3-fonts/#font-feature-settings-prop">font-feature-settings</a> プロパティを利用してタグを指定する。これはまだドラフト段階なので、実際にはベンダー接頭辞をつけて利用することになる。</p>

<ul>
<li><a href="https://developer.mozilla.org/en/CSS/-moz-font-feature-settings">font-feature-settings - MDN</a></li>
<li><a href="http://blogs.msdn.com/b/ie_ja/archive/2012/01/17/css.aspx">CSS &#x30B3;&#x30FC;&#x30CA;&#x30FC;: &#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x306E;&#x5168;&#x8981;&#x7D20;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B; - IEBlog &#x65E5;&#x672C;&#x8A9E;</a></li>
<li><a href="http://maniac-chef.blogspot.com/2011/10/opentype-features-support-on-chrome.html">Maniac Chef: OpenType features support on Chrome</a></li>
</ul><p>例えば、jp90 タグを有効にするためには次のように指定する。</p>
<pre class="code lang-css" data-lang="css" data-unlink>hoge <span class="synIdentifier">{</span>
  <span class="synType">font</span>-feature-settings:         <span class="synConstant">&quot;jp90&quot;</span> <span class="synConstant">1</span>;
  -moz-<span class="synType">font</span>-feature-settings:    <span class="synConstant">&quot;jp90=1&quot;</span>;
  -ms-<span class="synType">font</span>-feature-settings:     <span class="synConstant">&quot;jp90&quot;</span> <span class="synConstant">1</span>;
  -webkit-<span class="synType">font</span>-feature-settings: <span class="synConstant">&quot;jp90&quot;</span> <span class="synConstant">1</span>;
<span class="synIdentifier">}</span>
</pre><p>aalt のような一対多の置換を含むタグにおいて、n 番目のグリフに置換したい場合には、上の 1 の部分に n を指定する。</p>
<ins datetime="2013-05-04T12:57:44+09:00"><p>2013-05-03追記：この記事を書いた時点では -moz-font-feature-settings だけ指定方法が異なっていた（"jp90=1"）が、現在では他と同じ形式（"jp90" 1）に変更されている。</p>
</ins>
</div>
</div>
<div class="section">
    <h4>表示のテスト</h4>
    
<ul>
<li><a href="http://shiromoji.net/font/HanaMinOT/webfonttest/">&#x82B1;&#x5712;&#x660E;&#x671D;OT&#xFF0B;Web &#x30D5;&#x30A9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308B; OpenType feature tag &#x3068;IVS&#x306E;&#x8868;&#x793A;&#x30C6;&#x30B9;&#x30C8; - &#x3057;&#x308D;&#x3082;&#x3058;&#x4F5C;&#x696D;&#x5BA4;</a></li>
</ul><p><a href="http://shiromoji.net/font/HanaMinOT/">&#x82B1;&#x5712;&#x660E;&#x671D;OT</a> ver. 0.510 を Web フォントとして利用し、表示テストを行った。フォントフォーマットはOTFとWOFF（Web Open Font Format）。OTFからWOFFへの変換については、武蔵システムの<a href="http://musashi.or.tv/woffconv.htm">WOFF&#x30B3;&#x30F3;&#x30D0;&#x30FC;&#x30BF;</a>を利用した。</p><p>表示テストは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a>, <a class="keyword" href="http://d.hatena.ne.jp/keyword/Safari">Safari</a>, <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a>, <a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a>, IE8 の各ブラウザで行い、すべて最新版を用いた。OSは <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows%20XP">Windows XP</a> SP3（そろそろ潮時ですかね…）。参考までに先日インストールした <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows%208">Windows 8</a> Comsumer Preview 上でもテストをしたが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> と<a class="keyword" href="http://d.hatena.ne.jp/keyword/IE">IE</a>以外では差が見られなかった。</p><p>下の画像は、最も対応状況が優れていた <a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> での表示例。</p><p><a class="hatena-fotolife" target="_blank" href="http://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20120308/20120308161106_original.png"><img class="hatena-fotolife" src="http://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20120308/20120308161106.png?1331190697" alt=""><br>▲ クリックで拡大</a><br />
</p>

</div>
<div class="section">
    <h4>結果一覧</h4>
    
<table>
    <tr>
    <th>ブラウザ</th>
    <th>OS</th>
    <th>OTF</th>
    <th>WOFF</th>
    <th>IVS</th>
    <th>tag</th>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> 9.0</td>
    <td>Win XP</td>
    <td>○</td>
    <td>○</td>
    <td>○</td>
    <td>○</td>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/Safari">Safari</a> 5.1</td>
    <td>Win XP</td>
    <td>○</td>
    <td>○</td>
    <td>×</td>
    <td>×</td>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> 17.0</td>
    <td>Win XP</td>
    <td>○</td>
    <td>○</td>
    <td>×</td>
    <td>×<sup>*</sup></td>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> 11.61</td>
    <td>Win XP</td>
    <td>△<sup>†</sup></td>
    <td>△<sup>†</sup></td>
    <td>×<sup>‡</sup></td>
    <td>×</td>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/IE">IE</a> 8.0</td>
    <td>Win XP</td>
    <td>×</td>
    <td>×</td>
    <td>×</td>
    <td>×</td>
    </tr>
    <tr>
    <td><a class="keyword" href="http://d.hatena.ne.jp/keyword/IE">IE</a> 10.0</td>
    <td>Win 8 CP</td>
    <td>○</td>
    <td>○</td>
    <td>○</td>
    <td>△<sup>§</sup></td>
    </tr>
</table>
<div class="section">
    <h5>OTF</h5>
    
<ul>
<li>○：OpenType フォーマットのフォントファイルを Web フォントとして利用できる。</li>
<li>×：対応しておらず、他のフォントで表示される。</li>
</ul>
</div>
<div class="section">
    <h5>WOFF</h5>
    
<ul>
<li>○：WOFFフォーマットのフォントファイルを Web フォントとして利用できる。</li>
<li>×：対応しておらず、他のフォントで表示される。</li>
</ul>
</div>
<div class="section">
    <h5>IVS</h5>
    
<ul>
<li>○：適切な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%DB%C2%CE%BB%FA">異体字</a>グリフが選択されて表示される。</li>
<li>×：VSが豆腐や中黒、空白として表示されてしまう。</li>
</ul>
</div>
<div class="section">
    <h5>tag</h5>
    
<ul>
<li>○：OpenType feature tag が利用できる。</li>
<li>×：対応しておらず、無視される。</li>
</ul>
</div>
</div>
<div class="section">
    <h4>結果一覧の註</h4>
    
<div class="section">
    <h5>* <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> における OpenType feature tag 対応</h5>
    <p><span itemscope itemtype="http://schema.org/Photograph"><a href="http://f.hatena.ne.jp/mashabow/20120308160703" class="hatena-fotolife" itemprop="url"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/m/mashabow/20120308/20120308160703.png" alt="f:id:mashabow:20120308160703p:image" title="f:id:mashabow:20120308160703p:image" class="hatena-fotolife" itemprop="image"></a></span></p><p>expt, hojo, jp78, jp83, jp90, nlck の各タグについては、指定するとデフォルトのフォントで描画されてしまうという不具合がある。trad, aalt については、無視される（これは対応していない場合に期待される動作）。expt, hojo, jp78, jp83, jp90, nlck はすべて一対一の置換である一方、trad, aalt には一対多の置換も含まれるという共通点がある。が、これが原因かどうかははっきりしない。</p>

</div>
<div class="section">
    <h5>† <a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> における OpenType/WOFF 対応</h5>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> は <a href="http://dev.opera.com/articles/view/introducing-woff-web-open-font-format/">TrueType, OpenType, SVG&#x30D5;&#x30A9;&#x30F3;&#x30C8;, WOFF&#x306E;&#x5404;&#x5F62;&#x5F0F;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x3066;&#x3044;&#x308B;&#x3068;&#x8B33;&#x3063;&#x3066;&#x3044;&#x308B;</a>が、花園明朝OTでは表示できなかった。<a href="http://musashi.or.tv/woffbrowser.htm">&#x6B66;&#x8535;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30B5;&#x30A4;&#x30C8;&#x306E;&#x60C5;&#x5831;</a>でも、和文 OpenType や、そこから変換したWOFFは×になっている。CFFアウトラインの和文フォントがダメなんだろうか。</p>

</div>
<div class="section">
    <h5>‡ <a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> におけるIVS対応</h5>
    <p>引用元が消えているが、<a href="http://ja.wikipedia.org/wiki/%E7%95%B0%E4%BD%93%E5%AD%97%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF#cite_ref-59">Wikipedia &#x306B;&#x3088;&#x308C;&#x3070; Windows 7 &#x4E0A;&#x306E; Opera &#x3067;IVS&#x304C;&#x8868;&#x793A;&#x3067;&#x304D;&#x308B;</a>らしい。表には載せなかったが、今回 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows%208">Windows 8</a> Comsumer Preview 上の <a class="keyword" href="http://d.hatena.ne.jp/keyword/Opera">Opera</a> で表示できることを確認した。</p>

</div>
<div class="section">
    <h5>§ IE10 における OpenType feature tag 対応</h5>
    <p>expt, hojo, jp78, jp83, jp90, nlck の各タグは正常に機能しグリフ置換が行われるが、trad, aalt については無視される。</p><p>また、IE10で花園明朝OTを表示させるとディセンダが大きく空いてしまうが、原因不明。</p>

</div>
</div>
<div class="section">
    <h4>というわけで</h4>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> がかなりいい感じ。他のブラウザの実装がいまいちなこともあり、実際に「使える」かどうかは疑問だが、覚えておくと何かの役に立つ……かも……？</p>

</div>]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[花園明朝OTを0.510に更新、IVD 2012-03-02版に対応]]></title>
        <id>https://shiromoji.hatenablog.jp/entry/20120306/1331028598</id>
        <link href="https://shiromoji.hatenablog.jp/entry/20120306/1331028598"/>
        <updated>2012-03-06T10:09:58.000Z</updated>
        <summary type="html"><![CDATA[<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1-6 準拠の漢字フォント・花園明朝OTを ver. 0.510 に更新。</p>

<ul>
<li><a href="http://shiromoji.net/font/HanaMinOT/">&#x82B1;&#x5712;&#x660E;&#x671D;OT - &#x3057;&#x308D;&#x3082;&#x3058;&#x4F5C;&#x696D;&#x5BA4;</a></li>
</ul><p>以下、主な変更点について解説。</p>

<div class="section">
    <h4>IVD 2012-03-02 版に対応</h4>
    <p>今月2日に<a href="http://www.unicode.org/ivd/">IVD&#xFF08;Ideographic Variation Database&#xFF09;</a>の最新版が公開され、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 に32個、Hanyo-Denshi<a href="#f-75c27c15" name="fn-75c27c15" title="こちらは花園明朝OTには収録していない。">*1</a> に8,850個のIVSが追加された。この追加により、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1-6 に含まれる14,664個の漢字グリフすべてがIVSでアクセスできるようになった。花園明朝OTは今回これに対応。</p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe">Adobe</a>-Japan1 コレクションに追加されたIVSについては、以下のページに詳しい。</p>

<ul>
<li><a href="http://blogs.adobe.com/CCJKType/2012/03/new-ivd-version.html">IVD Version 2012-03-02 Released &laquo; CJK Type</a></li>
<li><a href="http://www.unicode.org/ivd/pri/pri183/">Ideographic Variation Database - PRI 183</a></li>
<li><a href="http://d.hatena.ne.jp/NAOI/20110623/1308817376">PRI 183&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x30E1;&#x30E2; - Mac OS X&#x306E;&#x6587;&#x5B57;&#x30B3;&#x30FC;&#x30C9;&#x554F;&#x984C;&#x306B;&#x95A2;&#x3059;&#x308B;&#x30E1;&#x30E2;</a></li>
</ul>
</div>
<div class="section">
    <h4>CMap を UniJIS2004-UTF32-H ver. 1.011 に更新</h4>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>とグリフ（CID）との対応表である CMap を、最新バージョンの1.011に更新した。1.010からの変更点は以下の通り。</p>

<ul>
<li>U+9FCC（&#40908;）→ CID+20156 の対応が追加された</li>
<li>U+2329, 232A（&#9001;, &#9002;）→ CID+682, 683 の対応が追加された</li>
</ul><p>花園明朝OTは漢字フォントなので、関係するのは前者のみ。U+9FCC（&#40908;）は1月31日リリースの <a href="http://www.unicode.org/versions/Unicode6.1.0/">Unicode 6.1.0</a> で追加された統合漢字。</p>

</div>
<div class="section">
    <h4>スペースのグリフを少し追加</h4>
    <p>CID+1（欧文スペース）, CID+3000（和文スペース）, CID+8720（CID+1 の vrt2 置換先グリフ）を追加した。CID+1, CID+8720 の文字幅はとりあえず半角として実装した。CID+8720 を追加した理由は次の項で。</p>

</div>
<div class="section">
    <h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> において Web フォントに使用できない問題を解消</h4>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> で花園明朝OTを Web フォントとして使おうとしても、ファイルのダウンロード自体は行われるものの花園明朝OTで描画されない問題があった。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/mashabow/20110807/1312725162">&#x82B1;&#x5712;&#x660E;&#x671D;OT&#x304C; web font &#x3067;&#x4F7F;&#x3048;&#x306A;&#x3044;&#x3063;&#x307D;&#x3044; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></li>
</ul><p>これについて、上の記事のコメントでえむけいさんから次のような情報をいただいた（ありがとうございます）。</p>

    <blockquote cite="http://d.hatena.ne.jp/mashabow/20110807/1312725162#c1320299028">
        <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>では、CFFアウトラインの<a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenType%A5%D5%A5%A9%A5%F3%A5%C8">OpenTypeフォント</a>のGSUBテーブルにvrt2 featureが定義されていないのにvhea/vmtxテーブルがあると、OSに不正なフォントして弾かれます。インストールすれば使えるようですが、Webフォントをロードするための<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>はWebから任意のデータを受け取る可能性があって、フォント<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0">レンダリング</a>エンジンの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD">脆弱性</a>も実際に何度か発見されているので、チェックが厳しくなっているようです。 <br />
縦書きグリフを追加するか、vhea/vmtxテーブルを削除してください。</p>

        <cite><a href="http://d.hatena.ne.jp/mashabow/20110807/1312725162#c1320299028">&#x82B1;&#x5712;&#x660E;&#x671D;OT&#x304C; web font &#x3067;&#x4F7F;&#x3048;&#x306A;&#x3044;&#x3063;&#x307D;&#x3044; - &#x3057;&#x308D;&#x3082;&#x3058;&#x30E1;&#x30E2;&#x30E9;&#x30F3;&#x30C0;&#x30E0;</a></cite>
    </blockquote>
<p>このアドバイスに従い、縦書きグリフ CID+8720 を追加して以下のように vrt2 feature を定義した。</p>

<pre>feature vrt2 {
  sub \1 by \8720;
} vrt2;
</pre><p>これにより、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Firefox">Firefox</a> での問題は解消されたようだ。縦書きグリフを追加するのではなく vhea/vmtx テーブルを削除する方法もあるが、これを試したところ <a class="keyword" href="http://d.hatena.ne.jp/keyword/Microsoft">Microsoft</a> Word で縦書きができなくなった（花園明朝OTを指定してもMS明朝で描画される）ので採らなかった。</p><p>なお、上の記事では「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> で試したら『エラー　このページの表示中に問題が発生しました』云々と出てページすら表示されなかった」と書いたが、こちらについては <a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a> のアップデートの過程で解消されていた様子。</p>

</div><div class="footnote">
<p class="footnote"><a href="#fn-75c27c15" name="f-75c27c15" class="footnote-number">*1</a><span class="footnote-delimiter">:</span><span class="footnote-text">こちらは花園明朝OTには収録していない。</span></p>
</div>]]></summary>
    </entry>
</feed>