{"pageProps":{"member":{"name":"masutaka","role":"LookML Developer","bio":"カレー大好き！","avatarSrc":"https://www.gravatar.com/avatar/d6c5403c0b6ef2f9fd51910ea38323a3?size=256","sources":["https://developer.feedforce.jp/rss/author/masutaka26","https://masutaka.net/chalow/cl.rss"],"twitterUsername":"masutaka","githubUsername":"masutaka","websiteUrl":"https://masutaka.net"},"postItems":[{"title":"『本を聴く毎日を送っています』という LT をした","content":"私が所属しているフィードフォースでは、毎月 FFLT という LT 大会があります。最近久しぶりに参加していて、昨日は本当に久しぶりに LT をしました。久しぶりすぎて LT が 5 分であることを気にかけなかったという...。いや、もちろん覚えてはいたのですが（汗）。お題は [2022-03-06-1] や [2022-03-30-1] でそれとなく書いていた「Kindle 本を聴く」方法です。すべてのケースに合うわけでも、ベストな方法でもありませんが、集中力が必要で眠くなりがちな本を読むという作業を省エネ化出来たことは、自分にとって価値あるものでした。まだまだ最適化が必要なので、やっていきます。","contentSnippet":"私が所属しているフィードフォースでは、毎月 FFLT という LT 大会があります。最近久しぶりに参加していて、昨日は本当に久しぶりに LT をしました。久しぶりすぎて LT が 5 分であることを気にかけなかったという...。いや、もちろん覚えてはいたのですが（汗）。お題は [2022-03-06-1] や [2022-03-30-1] でそれとなく書いていた「Kindle 本を聴く」方法です。すべてのケースに合うわけでも、ベストな方法でもありませんが、集中力が必要で眠くなりがちな本を読むという作業を省エネ化出来たことは、自分にとって価値あるものでした。まだまだ最適化が必要なので、やっていきます。","link":"https://masutaka.net/chalow/2022-04-09-1.html","isoDate":"2022-04-09T14:59:59.000Z","dateMiliSeconds":1649516399000,"authorName":"masutaka"},{"title":"『銃・病原菌・鉄』を読み終えた","content":"購入から６年半以上。下巻の途中で数年止まっていましたが、今月えいやっと読み終えました。※ 正確に書くと、Kindle 本をオーディオブック化して聴き終えました。上巻はもはや覚えていませんが、全体を通して覚えていることは「人種間に能力の優劣などなく、地理的環境的なアドバンテージが文化的な発展の違いに繋がった」ことです。例えばユーラシア大陸は大陸は横に長いため、作物や技術が伝播しやすいです。緯度が変わらないため、気候が似通っているからです。しかし、南北アメリカ大陸やアフリカ大陸は縦に長いため、ユーラシア大陸に比べて伝播が遅かったり、途中で止まったりします。こちらを知れただけで読んだ価値がありました。下巻の最後では、なぜヨーロッパの国々はアメリカ大陸やアジア諸国で植民地支配が広がったのに、中国はそうでなかったのかという興味深い話が解説されていました。ヨーロッパは国の数が多く競争が激しいため、新しい技術が開発されたら取り入れざるを得ず、ある国の支援が得られなくても他の国でなら可能（コロンブスの話）という事情が生まれるそうです。一方で中国は１つの王朝が統一しているため、例えば外洋航海の禁止という決定事項が中国全土に浸透し、その決定が愚かだったかの検証さえ出来なくなってしまったそう。Kindle 本をオーディオブック化するスキルを身に付けたので、これからもジャンジャン読んで聴いていきます。P.S.これから読む予定。日本の地理学は『銃・病原菌・鉄』をいかに語るのか―英語圏と日本における受容過程の比較検討から―","contentSnippet":"購入から６年半以上。下巻の途中で数年止まっていましたが、今月えいやっと読み終えました。※ 正確に書くと、Kindle 本をオーディオブック化して聴き終えました。上巻はもはや覚えていませんが、全体を通して覚えていることは「人種間に能力の優劣などなく、地理的環境的なアドバンテージが文化的な発展の違いに繋がった」ことです。例えばユーラシア大陸は大陸は横に長いため、作物や技術が伝播しやすいです。緯度が変わらないため、気候が似通っているからです。しかし、南北アメリカ大陸やアフリカ大陸は縦に長いため、ユーラシア大陸に比べて伝播が遅かったり、途中で止まったりします。こちらを知れただけで読んだ価値がありました。下巻の最後では、なぜヨーロッパの国々はアメリカ大陸やアジア諸国で植民地支配が広がったのに、中国はそうでなかったのかという興味深い話が解説されていました。ヨーロッパは国の数が多く競争が激しいため、新しい技術が開発されたら取り入れざるを得ず、ある国の支援が得られなくても他の国でなら可能（コロンブスの話）という事情が生まれるそうです。一方で中国は１つの王朝が統一しているため、例えば外洋航海の禁止という決定事項が中国全土に浸透し、その決定が愚かだったかの検証さえ出来なくなってしまったそう。Kindle 本をオーディオブック化するスキルを身に付けたので、これからもジャンジャン読んで聴いていきます。P.S.これから読む予定。日本の地理学は『銃・病原菌・鉄』をいかに語るのか―英語圏と日本における受容過程の比較検討から―","link":"https://masutaka.net/chalow/2022-03-30-1.html","isoDate":"2022-03-30T14:59:59.000Z","dateMiliSeconds":1648652399000,"authorName":"masutaka"},{"title":"1Password に SSH キーをインポートしたら UX として良かった","content":"- 1password 8 beta の macOS バージョンで ssh キーをすべて扱うようにした - HsbtDiary(2022-03-18)- SSH and Git, meet 1Password 🥰｜1PasswordmacOS はベータ版をインストールする必要があるが、メインマシンの Manjaro (Linux) の 1Password はすでに 8.6.1 だったので、試しに使ってみた。1Password には SSH 秘密鍵をインポートする。1Password 内では秘密鍵から公開鍵を作ってくれる。~/.ssh/ 以下の SSH キーは秘密鍵と公開鍵の両方とも不要になる。UNIX Socket ファイルが出来るようなので、~/.ssh/config で設定をそこに向ければ勝手に使ってくれる。こんなことが出来るんだ。Host * IdentityAgent \"~/.1password/agent.sock\"ただ、git fetch や git pull のたびに指紋認証が要求されるので、利用頻度が多い GitHub なんかは今まで通りが良い気はした。Host github.com IdentityFile \"~/.ssh/github_ed25519\" IdentityAgent noneHost * IdentityAgent \"~/.1password/agent.sock\"ssh config は設定が上書かれないことには注意。先にマッチしたほうが優先される。ssh_config(5) - Linux manual page","contentSnippet":"- 1password 8 beta の macOS バージョンで ssh キーをすべて扱うようにした - HsbtDiary(2022-03-18)- SSH and Git, meet 1Password 🥰｜1PasswordmacOS はベータ版をインストールする必要があるが、メインマシンの Manjaro (Linux) の 1Password はすでに 8.6.1 だったので、試しに使ってみた。1Password には SSH 秘密鍵をインポートする。1Password 内では秘密鍵から公開鍵を作ってくれる。~/.ssh/ 以下の SSH キーは秘密鍵と公開鍵の両方とも不要になる。UNIX Socket ファイルが出来るようなので、~/.ssh/config で設定をそこに向ければ勝手に使ってくれる。こんなことが出来るんだ。Host * IdentityAgent \"~/.1password/agent.sock\"ただ、git fetch や git pull のたびに指紋認証が要求されるので、利用頻度が多い GitHub なんかは今まで通りが良い気はした。Host github.com IdentityFile \"~/.ssh/github_ed25519\" IdentityAgent noneHost * IdentityAgent \"~/.1password/agent.sock\"ssh config は設定が上書かれないことには注意。先にマッチしたほうが優先される。ssh_config(5) - Linux manual page","link":"https://masutaka.net/chalow/2022-03-29-1.html","isoDate":"2022-03-29T14:59:59.000Z","dateMiliSeconds":1648565999000,"authorName":"masutaka"},{"title":"『だから僕たちは、組織を変えていける』を読んだ","content":"組織に課題を持った同僚が紹介していたので、ポチッとしました。読んだ感想としては、まあそうだよねって感じで異論とかはなかった。なんなら自分は読む前から理解していたつもりだし、やる気溢れるメンタルで実践してたつもり。※ 現在一人開発なので難易度が低い。でも、組織で実践出来る風景が全く思い浮かばない。日本は不満を撒き散らす社員が多く、やる気に満ちた社員が少ない　「とんでもなく時代遅れ」な組織が抱える問題点 - ログミーBizこちらの記事が紹介記事。今の会社は不満を撒き散らす社員は思いつかないし、とんでもなく時代遅れな会社でもないと思う。やる気のありなしはフルリモートワークもあってよく分からない。バラバラなピースをどう完成させていけば良いのかな。自分はまだ正解が分からない。","contentSnippet":"組織に課題を持った同僚が紹介していたので、ポチッとしました。読んだ感想としては、まあそうだよねって感じで異論とかはなかった。なんなら自分は読む前から理解していたつもりだし、やる気溢れるメンタルで実践してたつもり。※ 現在一人開発なので難易度が低い。でも、組織で実践出来る風景が全く思い浮かばない。日本は不満を撒き散らす社員が多く、やる気に満ちた社員が少ない　「とんでもなく時代遅れ」な組織が抱える問題点 - ログミーBizこちらの記事が紹介記事。今の会社は不満を撒き散らす社員は思いつかないし、とんでもなく時代遅れな会社でもないと思う。やる気のありなしはフルリモートワークもあってよく分からない。バラバラなピースをどう完成させていけば良いのかな。自分はまだ正解が分からない。","link":"https://masutaka.net/chalow/2022-03-10-1.html","isoDate":"2022-03-10T14:59:59.000Z","dateMiliSeconds":1646924399000,"authorName":"masutaka"},{"title":"『読む力 最新スキル大全』を読んだ","content":"コロナ禍に突入して丸２年。よく散歩をするようになりました。基本在宅ワークなので、意識的に散歩しないとさすがに健康リスクが高いからです。散歩は考えを整理するのにもとても良くて、直近の課題への良いアイディアが出てきたり、寝かせた課題への解決策がふっと浮き上がってきたりします。[2021-01-05-1] でも書いた件です。馴染みの曲を聞きながら、いつもと同じコースを歩くと、特に効果的です。それと相反してはしまうのですが、最近はそれに飽きてしまい、散歩中に技術系や格闘技系、歴史系の Podcast をよく聞くようになりました。ちなみにインプットモードになるので、思考の整理にはなりません。(^^;そんな中、格闘家の青木選手きっかけで Voicy の存在を知り、他に聞くものないかなーと探して見つけたのが、佐々木俊尚さんの Voicy でした。佐々木さんは @sasakitoshinao での朝のキュレーションが有名なジャーナリストで、私は 2011 年ごろからフォローしていたと思います。※ よくアンチが湧いていますが、そんな変なことは言ってないと思うんだよなあ。私、朝はツイッターをあまり見ないので、佐々木さんとは一方的に疎遠みたいになってました。そんなこんなで懐かしい気持ちで聞き始め、とうとう過去の放送を全部聞いてしまいました。放送開始は去年の 9 月で、佐々木さんは毎朝 Voicy を配信しているので、それなりの数です。そんな佐々木さんが本を出しました。お礼の気持ち半分、佐々木さんの情報収集方法を知ること半分で購入してみました。読んだ感想としては「良い本だとは思うけど、マッチする人とそうでもない人がいると思う」かなあ？私の情報収集方法は、佐々木さんほど深くはありませんが、似たりよったりです。肝心の「マルチタスクワーキング」は、ちょっと使わないかなあ？なんでだろう？私がプログラマーだから、割とガッツリしたタスクが多いから？会社員だから、請求書作るだとかの細かいタスクが少ないから？ ※ 過去にポモドーロやタスクシュート [2016-10-26-1] は試した上での感想です。だいたい毎日、仕事を始めたら溜まった Slack 読んでウォーミングアップして、あとはそれなりの大きさのタスクをガーッと処理する感じです。不惑の年はとうに越しましたが、集中力が続かない悩みはあまり感じたことはありません。あ、キリが悪いところで止めるテクニックは、プログラマーの間ではテストを失敗させた状態で作業を止めるテクニックとして知られていて、私もたまに使いますね。一方でビジネス職の人には、情報収集方法や仕事の仕方は参考になるかもしれません。Feedly, Pocket, Twitter（のリスト）など、存在や良さげな使い方はプログラマーよりは知らないかもしれませんし、タスクの粒度は小さく、種類は多い印象があります。ということで、気になる方はポチッとすると良いと思いました。ここまでで、私ひとつ嘘をつきました。「『読む力 最新スキル大全』を読んだ」と書きましたが、実際には Fire HD 8 の「Kindle 読み上げ」で全部聞きました。読んでいません。皮肉みたいになって、なんだかすみません。「マルチタスクワーキング」は集中力など要らない、時間を細切れに使えという提案ですが、聞くという解はあると思います。さすがに私も本を読む集中力は頻繁に切れます。Twitter は見ちゃうし、格闘技系 YouTube も気になる。そんな課題がある中で、Podcast や Voicy は異様に捗っていました。どうやら今の生活にマッチしていたようです。だったら本も聞いてしまえば、集中力が切れる課題を解決できるかな？と試した最初の本が『読む力 最新スキル大全』でした。伏線回収？もしかしたら、佐々木さんの Voicy を聞いているうちに「集中力なんか要らない」という仮説を認識し、それと Podcast や Voicy が生活にマッチしていることがうまく結びついて、課題を解決できたのかもしれません。などと、この記事を書いていて思いました。「Kindle 読み上げ」を使って、どのように本を聞いているかは、近々記事にする予定です。いろいろあって大変でした。(^^;ではまた明日。","contentSnippet":"コロナ禍に突入して丸２年。よく散歩をするようになりました。基本在宅ワークなので、意識的に散歩しないとさすがに健康リスクが高いからです。散歩は考えを整理するのにもとても良くて、直近の課題への良いアイディアが出てきたり、寝かせた課題への解決策がふっと浮き上がってきたりします。[2021-01-05-1] でも書いた件です。馴染みの曲を聞きながら、いつもと同じコースを歩くと、特に効果的です。それと相反してはしまうのですが、最近はそれに飽きてしまい、散歩中に技術系や格闘技系、歴史系の Podcast をよく聞くようになりました。ちなみにインプットモードになるので、思考の整理にはなりません。(^^;そんな中、格闘家の青木選手きっかけで Voicy の存在を知り、他に聞くものないかなーと探して見つけたのが、佐々木俊尚さんの Voicy でした。佐々木さんは @sasakitoshinao での朝のキュレーションが有名なジャーナリストで、私は 2011 年ごろからフォローしていたと思います。※ よくアンチが湧いていますが、そんな変なことは言ってないと思うんだよなあ。私、朝はツイッターをあまり見ないので、佐々木さんとは一方的に疎遠みたいになってました。そんなこんなで懐かしい気持ちで聞き始め、とうとう過去の放送を全部聞いてしまいました。放送開始は去年の 9 月で、佐々木さんは毎朝 Voicy を配信しているので、それなりの数です。そんな佐々木さんが本を出しました。お礼の気持ち半分、佐々木さんの情報収集方法を知ること半分で購入してみました。読んだ感想としては「良い本だとは思うけど、マッチする人とそうでもない人がいると思う」かなあ？私の情報収集方法は、佐々木さんほど深くはありませんが、似たりよったりです。肝心の「マルチタスクワーキング」は、ちょっと使わないかなあ？なんでだろう？私がプログラマーだから、割とガッツリしたタスクが多いから？会社員だから、請求書作るだとかの細かいタスクが少ないから？ ※ 過去にポモドーロやタスクシュート [2016-10-26-1] は試した上での感想です。だいたい毎日、仕事を始めたら溜まった Slack 読んでウォーミングアップして、あとはそれなりの大きさのタスクをガーッと処理する感じです。不惑の年はとうに越しましたが、集中力が続かない悩みはあまり感じたことはありません。あ、キリが悪いところで止めるテクニックは、プログラマーの間ではテストを失敗させた状態で作業を止めるテクニックとして知られていて、私もたまに使いますね。一方でビジネス職の人には、情報収集方法や仕事の仕方は参考になるかもしれません。Feedly, Pocket, Twitter（のリスト）など、存在や良さげな使い方はプログラマーよりは知らないかもしれませんし、タスクの粒度は小さく、種類は多い印象があります。ということで、気になる方はポチッとすると良いと思いました。ここまでで、私ひとつ嘘をつきました。「『読む力 最新スキル大全』を読んだ」と書きましたが、実際には Fire HD 8 の「Kindle 読み上げ」で全部聞きました。読んでいません。皮肉みたいになって、なんだかすみません。「マルチタスクワーキング」は集中力など要らない、時間を細切れに使えという提案ですが、聞くという解はあると思います。さすがに私も本を読む集中力は頻繁に切れます。Twitter は見ちゃうし、格闘技系 YouTube も気になる。そんな課題がある中で、Podcast や Voicy は異様に捗っていました。どうやら今の生活にマッチしていたようです。だったら本も聞いてしまえば、集中力が切れる課題を解決できるかな？と試した最初の本が『読む力 最新スキル大全』でした。伏線回収？もしかしたら、佐々木さんの Voicy を聞いているうちに「集中力なんか要らない」という仮説を認識し、それと Podcast や Voicy が生活にマッチしていることがうまく結びついて、課題を解決できたのかもしれません。などと、この記事を書いていて思いました。「Kindle 読み上げ」を使って、どのように本を聞いているかは、近々記事にする予定です。いろいろあって大変でした。(^^;ではまた明日。","link":"https://masutaka.net/chalow/2022-03-06-1.html","isoDate":"2022-03-06T14:59:59.000Z","dateMiliSeconds":1646578799000,"authorName":"masutaka"},{"title":"『GitHubセキュリティ Organization運用のベストプラクティス』を読んだ","content":"昨日、職場の同僚から教えてもらった、昨日公開されたこちらの本を読みました。GitHubセキュリティ Organization運用のベストプラクティス著者は @tmknom さん。[2019-05-07-1] に読んだ『Pragmatic Terraform on AWS』改め『実践Terraform』の著者でもあります。今の会社は 2014 年から GitHub を使っています。当初は全部分かりまっせ！という設定ボリュームでしたが、時を経てものすごくてんこ盛りになり、把握しきれない設定項目も増えてきました。本書によって、それらの棚卸しが出来た気がします。本自体のボリュームは大きくないので、流し読みすることも出来ますし、適度に GiHub Docs へのリンクになっているため、ガッツリ読むことも出来ます。いたく感動したため、少額ながらサポートさせて頂きました。(^^)欲張りすぎずにコツコツ改善していくことが大事だと、自分をリセット出来た気がします。","contentSnippet":"昨日、職場の同僚から教えてもらった、昨日公開されたこちらの本を読みました。GitHubセキュリティ Organization運用のベストプラクティス著者は @tmknom さん。[2019-05-07-1] に読んだ『Pragmatic Terraform on AWS』改め『実践Terraform』の著者でもあります。今の会社は 2014 年から GitHub を使っています。当初は全部分かりまっせ！という設定ボリュームでしたが、時を経てものすごくてんこ盛りになり、把握しきれない設定項目も増えてきました。本書によって、それらの棚卸しが出来た気がします。本自体のボリュームは大きくないので、流し読みすることも出来ますし、適度に GiHub Docs へのリンクになっているため、ガッツリ読むことも出来ます。いたく感動したため、少額ながらサポートさせて頂きました。(^^)欲張りすぎずにコツコツ改善していくことが大事だと、自分をリセット出来た気がします。","link":"https://masutaka.net/chalow/2022-03-03-1.html","isoDate":"2022-03-03T14:59:59.000Z","dateMiliSeconds":1646319599000,"authorName":"masutaka"},{"title":"Wi-Fi 6 ルーターを買うまでの長い検討メモと結論、そして数日使った感想","content":"2019/4/1 に買った WN-AX2033GR2/E を Wi-Fi 6 対応ルーターにグレードアップしたくなった。￥5,980 という超安値で買って、特に不満はないどころかかなり満足して使っていたのだけど、ウェブに関わるものとしては最新技術を追いかけたほうが良いと思うし、Wi-Fi 6 ルーターを体感してはみたい。変わるのか変わらないのかを知りたかった。※ 人はそれを物欲と呼びます。などと @meihong のツイートを見て勝手に意識が高まっていた。loading...※ 補足すると、[2018-04-30-1] に某 B 社のルーターを買ったものの失敗し、1 年後に上の WN-AX2033GR2/E で取り返した感じです。今までの Wi-Fi 規格名は「IEEE 802.11ac」だったんだね。もはや忘れていた。Wi-Fi 6 が出たタイミングで、\"Wi-Fi 5\" という新呼称が付いたらしい。Wi-Fi 5 に 2.4GHz 帯がないことも知らなかった。いや気にしてなかった？初心者向け 次世代Wi-Fi規格“Wi-Fi 6”とは？ Happy Wi-Fi Life - エレコム株式会社Wi-Fi 規格名最大通信速度周波数新呼称IEEE 802.11a54Mbps5GHz 帯-IEEE 802.11b11Mbps2.4GHz 帯-IEEE 802.11g54Mbps2.4GHz 帯-IEEE 802.11n600Mbps2.4GHz 帯、5GHz 帯Wi-Fi 4IEEE 802.11ac6.9Gbps5GHz 帯Wi-Fi 5IEEE 802.11ax9.6Gbps2.4GHz 帯、5GHz 帯Wi-Fi 6現在の Wi-Fi 5 ルーター情報先に今まで使っていた Wi-Fi 5 ルーター情報をまとめる。利用目安はどちらも「4LDK/3階建て」。型番接続台数目安5GHz 速度2.4GHz 速度備考WN-AX2033GR2/E16台1733Mbps300Mbps (Wi-Fi 4)現在利用WN-DX2033GR/E24台1733Mbps300Mbps (Wi-Fi 4)上の後継機（参考）アンテナの数も確認しておく。型番アンテナ方式備考WN-AX2033GR2/E内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2、5GHz送受信用×2）現在利用WN-DX2033GR/E内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2、5GHz送受信用×2）上の後継機候補とする Wi-Fi 6 ルーター情報次に候補とする Wi-Fi 6 ルーター情報をまとめた。某 B 社と違って、I-O DATA には非常に満足しているので、引き続きお世話になってみる。これらの利用目安も全部「4LDK/3階建て」。No.型番Amazon 価格目安接続台数目安5GHz 速度2.4GHz 速度備考1WN-DAX3600QR￥14,45932台2402Mbps1147Mbps有線インターネットポートのみ 2.5GBASE-T2WN-DAX3600XR￥20,04532台2402Mbps1150Mbpsクアッドコア CPU、有線 10GBASE-T3WN-DAX3000QR￥22,80030台2402Mbps574Mbpsクアッドコア CPU、有線インターネットポート、LAN×1 のみ 2.5GBASE-T、2022/2/21 発売4WN-DAX1800GR￥8,98020台1201Mbps574Mbps-5WN-DEAX1800GR￥7,20020台1201Mbps574Mbps-速度に違いがあるのは、アンテナの数が違うから。「現在利用」のルーターを基準として考える。No.型番アンテナ方式1WN-DAX3600QR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×4）2WN-DAX3600XR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×4）3WN-DAX3000QR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2 ＆ 5GHz送受信専用×2）4WN-DAX1800GR内蔵アンテナ×2（2.4GHz＆5GHz送受信用×2）5WN-DEAX1800GR外付けアンテナ×2（2.4GHz＆5GHz送受信用×2）結論No. 1 の WN-DAX3600QR に決めた。￥5,980 から ￥14,459 はなかなかのジャンプアップ。でも前の前に使ってた AirMac Extreme は 2 万円くらいしたからね。理由１：アンテナの数今の 4 本からは減らしたくはなかった。一人暮らしとは言え同時に利用するデバイスはあるし、WFH はまだまだ続きそうだし。そうなると No. 4~5 は候補から外したい。理由２：CPU の性能CPU はクアッドコアまで必要なのかなあ？オンラインゲームしないなら要らない気はする。理由３：大きさが気になったNo. 2~3 は大きさが気になった。半年くらい待って No. 3 の価格は下がるかもしれないが、小さくはならない。今の置き場所だと邪魔になる恐れがある。No.型番サイズ重量備考0WN-AX2033GR2/E180(W)×120(D)×186(H)mm約410g現在利用1WN-DAX3600QR196(W)×52(D)×197(H)mm約600g購入決定2WN-DAX3600XR238(W)×84(D)×248(H)mm約970g3WN-DAX3000QR270(W)×67(D)×218(H)mm約730g理由３：有線 LAN の性能10GBASE-T の要/不要も考慮したい。これはデバイス（クライアント）も対応していないと意味がない。その時は LAN ケーブルも変えないとね。現時点では有線 LAN 接続は、PS4 Pro, nasne, NAS (LS210D0201C) だけなので、10GBASE-T は一旦無視した。これら 3 つで 10GBASE-T に対応しているのは PS4 Pro だけ。他の 2 つは 1GBASE-T。あと、No. 1 もインターネット側は 2.5GBASE-T 対応なので遅いわけではない。以上のことから、現時点では 10GBASE-T は要らない気がする。ルーターのメトリクス（利用状況）が分からないので、全体的に勘に頼らざるを得なかった...。購入後数日経った感想特に問題なく使えている。ただ、セットアップ時にインターネット（IPv4）に繋がらなくなる現象が発生して、2 回くらい初期化はした。DHCP の IP range を少し変更したせい？ WPA2(AES) を WPA2/WPA3(AES) に変更したせい？分からない。このまま 3 ヶ月くらい再起動が必要なければ合格としよう。某 B 社の Wi-Fi ルーターは月に 1 回くらいインターネットに繋がらなくなり、再起動を余儀なくされたので慎重になっている。肝心の Wi-Fi 6 の体感だけど、まあ分からない。https://fast.com/ で測ると 200Mbps が 230Mbps くらいには上がっているような？自己満足の世界。有線インターネットポートが 1GBASE-T から 2.5GBASE-T に上がったことも影響しているのかも。あと、買ってから Wi-Fi ルーターはアンテナ数よりもストリーム数が大事らしいと知った。でもなぜか公式スペックには見つけられず...。価格.comで調べたのがこちら。No.型番アンテナ数ストリーム数備考0WN-AX2033GR2/E42今までの機種1WN-DAX3600QR44今回購入2WN-DAX3600XR443WN-DAX3000QR444WN-DAX1800GR225WN-DEAX1800GR22ここで初めて、今まで使っていた No. 1 と同じ組み合わせはなかったと知った。No. 4 でも問題はなかっただろうなあ。でも後悔はしていない。","contentSnippet":"2019/4/1 に買った WN-AX2033GR2/E を Wi-Fi 6 対応ルーターにグレードアップしたくなった。￥5,980 という超安値で買って、特に不満はないどころかかなり満足して使っていたのだけど、ウェブに関わるものとしては最新技術を追いかけたほうが良いと思うし、Wi-Fi 6 ルーターを体感してはみたい。変わるのか変わらないのかを知りたかった。※ 人はそれを物欲と呼びます。などと @meihong のツイートを見て勝手に意識が高まっていた。loading...※ 補足すると、[2018-04-30-1] に某 B 社のルーターを買ったものの失敗し、1 年後に上の WN-AX2033GR2/E で取り返した感じです。今までの Wi-Fi 規格名は「IEEE 802.11ac」だったんだね。もはや忘れていた。Wi-Fi 6 が出たタイミングで、\"Wi-Fi 5\" という新呼称が付いたらしい。Wi-Fi 5 に 2.4GHz 帯がないことも知らなかった。いや気にしてなかった？初心者向け 次世代Wi-Fi規格“Wi-Fi 6”とは？ Happy Wi-Fi Life - エレコム株式会社Wi-Fi 規格名最大通信速度周波数新呼称IEEE 802.11a54Mbps5GHz 帯-IEEE 802.11b11Mbps2.4GHz 帯-IEEE 802.11g54Mbps2.4GHz 帯-IEEE 802.11n600Mbps2.4GHz 帯、5GHz 帯Wi-Fi 4IEEE 802.11ac6.9Gbps5GHz 帯Wi-Fi 5IEEE 802.11ax9.6Gbps2.4GHz 帯、5GHz 帯Wi-Fi 6現在の Wi-Fi 5 ルーター情報先に今まで使っていた Wi-Fi 5 ルーター情報をまとめる。利用目安はどちらも「4LDK/3階建て」。型番接続台数目安5GHz 速度2.4GHz 速度備考WN-AX2033GR2/E16台1733Mbps300Mbps (Wi-Fi 4)現在利用WN-DX2033GR/E24台1733Mbps300Mbps (Wi-Fi 4)上の後継機（参考）アンテナの数も確認しておく。型番アンテナ方式備考WN-AX2033GR2/E内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2、5GHz送受信用×2）現在利用WN-DX2033GR/E内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2、5GHz送受信用×2）上の後継機候補とする Wi-Fi 6 ルーター情報次に候補とする Wi-Fi 6 ルーター情報をまとめた。某 B 社と違って、I-O DATA には非常に満足しているので、引き続きお世話になってみる。これらの利用目安も全部「4LDK/3階建て」。No.型番Amazon 価格目安接続台数目安5GHz 速度2.4GHz 速度備考1WN-DAX3600QR￥14,45932台2402Mbps1147Mbps有線インターネットポートのみ 2.5GBASE-T2WN-DAX3600XR￥20,04532台2402Mbps1150Mbpsクアッドコア CPU、有線 10GBASE-T3WN-DAX3000QR￥22,80030台2402Mbps574Mbpsクアッドコア CPU、有線インターネットポート、LAN×1 のみ 2.5GBASE-T、2022/2/21 発売4WN-DAX1800GR￥8,98020台1201Mbps574Mbps-5WN-DEAX1800GR￥7,20020台1201Mbps574Mbps-速度に違いがあるのは、アンテナの数が違うから。「現在利用」のルーターを基準として考える。No.型番アンテナ方式1WN-DAX3600QR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×4）2WN-DAX3600XR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×4）3WN-DAX3000QR内蔵アンテナ×4（2.4GHz＆5GHz送受信用×2 ＆ 5GHz送受信専用×2）4WN-DAX1800GR内蔵アンテナ×2（2.4GHz＆5GHz送受信用×2）5WN-DEAX1800GR外付けアンテナ×2（2.4GHz＆5GHz送受信用×2）結論No. 1 の WN-DAX3600QR に決めた。￥5,980 から ￥14,459 はなかなかのジャンプアップ。でも前の前に使ってた AirMac Extreme は 2 万円くらいしたからね。理由１：アンテナの数今の 4 本からは減らしたくはなかった。一人暮らしとは言え同時に利用するデバイスはあるし、WFH はまだまだ続きそうだし。そうなると No. 4~5 は候補から外したい。理由２：CPU の性能CPU はクアッドコアまで必要なのかなあ？オンラインゲームしないなら要らない気はする。理由３：大きさが気になったNo. 2~3 は大きさが気になった。半年くらい待って No. 3 の価格は下がるかもしれないが、小さくはならない。今の置き場所だと邪魔になる恐れがある。No.型番サイズ重量備考0WN-AX2033GR2/E180(W)×120(D)×186(H)mm約410g現在利用1WN-DAX3600QR196(W)×52(D)×197(H)mm約600g購入決定2WN-DAX3600XR238(W)×84(D)×248(H)mm約970g3WN-DAX3000QR270(W)×67(D)×218(H)mm約730g理由３：有線 LAN の性能10GBASE-T の要/不要も考慮したい。これはデバイス（クライアント）も対応していないと意味がない。その時は LAN ケーブルも変えないとね。現時点では有線 LAN 接続は、PS4 Pro, nasne, NAS (LS210D0201C) だけなので、10GBASE-T は一旦無視した。これら 3 つで 10GBASE-T に対応しているのは PS4 Pro だけ。他の 2 つは 1GBASE-T。あと、No. 1 もインターネット側は 2.5GBASE-T 対応なので遅いわけではない。以上のことから、現時点では 10GBASE-T は要らない気がする。ルーターのメトリクス（利用状況）が分からないので、全体的に勘に頼らざるを得なかった...。購入後数日経った感想特に問題なく使えている。ただ、セットアップ時にインターネット（IPv4）に繋がらなくなる現象が発生して、2 回くらい初期化はした。DHCP の IP range を少し変更したせい？ WPA2(AES) を WPA2/WPA3(AES) に変更したせい？分からない。このまま 3 ヶ月くらい再起動が必要なければ合格としよう。某 B 社の Wi-Fi ルーターは月に 1 回くらいインターネットに繋がらなくなり、再起動を余儀なくされたので慎重になっている。肝心の Wi-Fi 6 の体感だけど、まあ分からない。https://fast.com/ で測ると 200Mbps が 230Mbps くらいには上がっているような？自己満足の世界。有線インターネットポートが 1GBASE-T から 2.5GBASE-T に上がったことも影響しているのかも。あと、買ってから Wi-Fi ルーターはアンテナ数よりもストリーム数が大事らしいと知った。でもなぜか公式スペックには見つけられず...。価格.comで調べたのがこちら。No.型番アンテナ数ストリーム数備考0WN-AX2033GR2/E42今までの機種1WN-DAX3600QR44今回購入2WN-DAX3600XR443WN-DAX3000QR444WN-DAX1800GR225WN-DEAX1800GR22ここで初めて、今まで使っていた No. 1 と同じ組み合わせはなかったと知った。No. 4 でも問題はなかっただろうなあ。でも後悔はしていない。","link":"https://masutaka.net/chalow/2022-02-16-1.html","isoDate":"2022-02-16T14:59:59.000Z","dateMiliSeconds":1645023599000,"authorName":"masutaka"},{"title":"Gmail のフィルターをコード管理して心の平穏を得ることが出来た","content":"最近は人間からのメールは減り、機械からのメールが多くを占めるようになりました。その中にはメールを停止できなかったり、メール購読を義務付けられた酷いサービスもあります。私は仕事もプライベートもインボックス・ゼロを実践しています。それもあって今まで Gmail の検索演算子をチマチマと調べて、チマチマと設定していましたが、以前から全てを自分の管理下に起きたい欲求がありました。この度ついに強い衝動にかられたので、ゴリッと管理し始めました。gmailctl を使うことにしたこちらの記事にも影響されて、私的には gmailctl が良いという結論に達しました。Gmail filters as a code. Using gmailctl to create filters and…｜by Hans Jakob Emmel｜The Startup｜Medium最初は gmailfilters を試したのですが、既存の Gmail フィルターがほとんど消えてしまいました。本末転倒。つらすぎます...。(ToT)Export や例外処理にバグがあるように見えました。gmailctl の README.md Comparison with existing projects でも言及されている gmail-britta は Ruby 製で任意のコードを書けてしまうので、こちらも選択肢から外しました。任意のコードを書けてしまうと、凝った設定をする可能性があります。今回は単なる設定に過ぎないので、Terraform の HCL のような宣言型で設定できる gmailctl を採用しました。作者が Google で働いていることも少し考慮に入れました。(^^)vgmailctl の導入方法\"$ gmailctl init\" のテキストナビゲーションに従います。Google の OAuth クライアントを作る必要がありますが、これが結構厄介でした。$ gmailctl initThe credentials are not initialized.To do so, head to https://console.developers.google.com1. Create a new project if you don't have one.1. Go to 'Enable API and services' and select Gmail.2. Go to credentials and create a new one, by selecting 'Help me choose'. 2a. Select the Gmail API. 2b. Select 'Other UI'. 2c. Access 'User data'.3. Go to 'OAuth consent screen'. 3a. If your account is managed by an organization, you have to select 'Internal' as 'User Type' and Create (otherwise ignore). 3b. Set an application name (e.g. 'gmailctl'). 3c. Update 'Scopes for Google API', by adding: * https://www.googleapis.com/auth/gmail.labels * https://www.googleapis.com/auth/gmail.settings.basic5. IMPORTANT: you don't need to submit your changes for verification, as you're only going to access your own data. Save and 'Go back to Dashboard'. 5a. Make sure that the 'Publishig status' is set to 'In production'. If it's set to 'Testing', Publish the app and ignore the verification. Using the testing mode will make your tokens expire every 7 days and require re-authentication.6. Go back to Credentials. 6a. Click 'Create credentials'. 6b. Select 'OAuth client ID'. 6c. Select 'Desktop app' as 'Application type' and give it a name. 6d. Create.7. Download the credentials file into '/home/masutaka/.gmailctl/credentials.json' and execute the 'init' command again.Documentation about Gmail API authorization can be foundat: https://developers.google.com/gmail/api/auth/about-authError: opening credentials: open /home/masutaka/.gmailctl/credentials.json: no such file or directory一時的にでも GCP の言語を English にしたほうが上のナビに悩みづらいと思います。\"Help me choose\" の日本語訳が \"ウィザードで選択\" だなんて無理でしょ...。私は gmailctl という GCP プロジェクトを作って、その中に OAuth クライアントを作りました。自分だけが使うので「公開」はしませんでした。↓ これは面倒すぎる...。[OAuth クライアント アプリを公開ダイアログ]「認証情報」の JSON をダウンロードできるようになるので、~/.gmailctl/credentials.json として保存します。もう一度 \"$ gmailctl init\" すると認可用 URL が出てくるので、ブラウザで開いて認可を進めます。Authorization code を取得できるので、コンソールに貼り付けて Enter で完了です。トークンが ~/.gmailctl/token.json に保存されます。Go to the following link in your browser then type the authorization code:https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;client_id=（以下略）Authorization code:gmailctl init のナビに書いてあるとおり、テストモードだと 7 日ごとにトークンが失効するので、再認可が必要になります。gmailfilters の例ですが、ここまでの流れはだいたい同じなので、参考になるかもしれません。最高すぎる！Gmail のフィルタ設定をデプロイできる CLI「gmailfilters」 - kakakakakku blogあとは \"$ gmailctl download\" で設定を全部エクスポートして ~/.gmailctl/config.jsonnet に保存すればスタートラインに立てます。Gmail のフィルター（や場合によってはラベル）は ~/.gmailctl/config.jsonnet の内容で全て置き換えられるのでご注意を。でも \"$ gmailctl diff\" で確認できますし、\"$ gmailctl apply\" で Yes/No を聞かれるのでそこまで危険ではないと思います。gmailctl のルール例ほんの一部です。{ // xxx カードの都度利用通知はそこまで重要でないと、ひと目で分かるようにする filter: { and: [ { subject: 'xxx カードより「カードご利用のお知らせ」' }, { from: 'info@example.jp' }, ], }, actions: { labels: ['notifications'], markSpam: false, },},{ // xxx カードからの毎月のリボ払いのススメはウザいので全部削除 filter: { and: [ { subject: '【xxx カード】リボ・分割変更' }, { from: 'info@example.jp' }, ], }, actions: { delete: true, },},{ // xxx 新聞からのメールは多すぎてウザいので全部削除 filter: { to: 'masutaka.net+xxx@gmail.com', }, actions: { delete: true, },},{ // このブログのデプロイ失敗通知を Pushover で受け取る filter: { and: [ { from: 'heroku' }, { or: [ { subject: 'Automatic deployment of masutaka-net failed' }, { subject: '[masutaka-net] Release phase command failed to execute' }, ], }, ], }, actions: { archive: true, markRead: true, markSpam: false, forward: 'example@pomail.net', },},Gmail の検索演算子は gmailctl の \"query\" operator で使えますが、私はそれは使わずに \"and\" や \"or\" operator を使うようにしました。Gmail 側のフィルターよりも、gmailctl のコードの可読性を重視しています。gmailctl に任せると、フィルターの数が増えることはありますが、すっきりとした検索クエリに変換されることもあります。どちらにせよ、gmailctl を使うのであれば gmailctl のレールに乗ったほうが良いと思います。便利関数の紹介~/.gmailctl/config.jsonnet から import している ~/.gmailctl/gmailctl.libsonnet にはいくつかの便利関数があります。興味深かったので紹介しておきます。リポジトリの README.md にも言及があります。chainFiltersGmail のフィルターには if-else 構文が存在しない。この関数を使えば、前のフィルターに一致したら次のフィルターは適用させないことが出来る。directlyToGmail の検索演算子 to は cc や bcc にもマッチするそう。知らなかった。この関数を使えば、to のみにマッチしたフィルターを簡潔に書くことが出来る。rulesLabels存在していないラベルを rules が参照すると、gmailctl apply でエラーが発生する。この関数を使えばそれを回避出来る。ただ、gmailctl とは関係のないラベルも管理下に置く必要がある。まとめgmailctl を導入して、Gmail のフィルターとラベルをコード管理しました。全てを手中に納めた気がして、とても良いです。心の平穏を得ることが出来ました。・コード管理することで Git に履歴が残るので、要らなくなったフィルターを気軽に削除できる。戻すことも簡単・Gmail のフィルターにはコメントを書けなかったが、~/.gmailctl/config.jsonnet には書けるand や or の論理演算子と戯れるのも楽しかった。","contentSnippet":"最近は人間からのメールは減り、機械からのメールが多くを占めるようになりました。その中にはメールを停止できなかったり、メール購読を義務付けられた酷いサービスもあります。私は仕事もプライベートもインボックス・ゼロを実践しています。それもあって今まで Gmail の検索演算子をチマチマと調べて、チマチマと設定していましたが、以前から全てを自分の管理下に起きたい欲求がありました。この度ついに強い衝動にかられたので、ゴリッと管理し始めました。gmailctl を使うことにしたこちらの記事にも影響されて、私的には gmailctl が良いという結論に達しました。Gmail filters as a code. Using gmailctl to create filters and…｜by Hans Jakob Emmel｜The Startup｜Medium最初は gmailfilters を試したのですが、既存の Gmail フィルターがほとんど消えてしまいました。本末転倒。つらすぎます...。(ToT)Export や例外処理にバグがあるように見えました。gmailctl の README.md Comparison with existing projects でも言及されている gmail-britta は Ruby 製で任意のコードを書けてしまうので、こちらも選択肢から外しました。任意のコードを書けてしまうと、凝った設定をする可能性があります。今回は単なる設定に過ぎないので、Terraform の HCL のような宣言型で設定できる gmailctl を採用しました。作者が Google で働いていることも少し考慮に入れました。(^^)vgmailctl の導入方法\"$ gmailctl init\" のテキストナビゲーションに従います。Google の OAuth クライアントを作る必要がありますが、これが結構厄介でした。$ gmailctl initThe credentials are not initialized.To do so, head to https://console.developers.google.com1. Create a new project if you don't have one.1. Go to 'Enable API and services' and select Gmail.2. Go to credentials and create a new one, by selecting 'Help me choose'. 2a. Select the Gmail API. 2b. Select 'Other UI'. 2c. Access 'User data'.3. Go to 'OAuth consent screen'. 3a. If your account is managed by an organization, you have to select 'Internal' as 'User Type' and Create (otherwise ignore). 3b. Set an application name (e.g. 'gmailctl'). 3c. Update 'Scopes for Google API', by adding: * https://www.googleapis.com/auth/gmail.labels * https://www.googleapis.com/auth/gmail.settings.basic5. IMPORTANT: you don't need to submit your changes for verification, as you're only going to access your own data. Save and 'Go back to Dashboard'. 5a. Make sure that the 'Publishig status' is set to 'In production'. If it's set to 'Testing', Publish the app and ignore the verification. Using the testing mode will make your tokens expire every 7 days and require re-authentication.6. Go back to Credentials. 6a. Click 'Create credentials'. 6b. Select 'OAuth client ID'. 6c. Select 'Desktop app' as 'Application type' and give it a name. 6d. Create.7. Download the credentials file into '/home/masutaka/.gmailctl/credentials.json' and execute the 'init' command again.Documentation about Gmail API authorization can be foundat: https://developers.google.com/gmail/api/auth/about-authError: opening credentials: open /home/masutaka/.gmailctl/credentials.json: no such file or directory一時的にでも GCP の言語を English にしたほうが上のナビに悩みづらいと思います。\"Help me choose\" の日本語訳が \"ウィザードで選択\" だなんて無理でしょ...。私は gmailctl という GCP プロジェクトを作って、その中に OAuth クライアントを作りました。自分だけが使うので「公開」はしませんでした。↓ これは面倒すぎる...。[OAuth クライアント アプリを公開ダイアログ]「認証情報」の JSON をダウンロードできるようになるので、~/.gmailctl/credentials.json として保存します。もう一度 \"$ gmailctl init\" すると認可用 URL が出てくるので、ブラウザで開いて認可を進めます。Authorization code を取得できるので、コンソールに貼り付けて Enter で完了です。トークンが ~/.gmailctl/token.json に保存されます。Go to the following link in your browser then type the authorization code:https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=（以下略）Authorization code:gmailctl init のナビに書いてあるとおり、テストモードだと 7 日ごとにトークンが失効するので、再認可が必要になります。gmailfilters の例ですが、ここまでの流れはだいたい同じなので、参考になるかもしれません。最高すぎる！Gmail のフィルタ設定をデプロイできる CLI「gmailfilters」 - kakakakakku blogあとは \"$ gmailctl download\" で設定を全部エクスポートして ~/.gmailctl/config.jsonnet に保存すればスタートラインに立てます。Gmail のフィルター（や場合によってはラベル）は ~/.gmailctl/config.jsonnet の内容で全て置き換えられるのでご注意を。でも \"$ gmailctl diff\" で確認できますし、\"$ gmailctl apply\" で Yes/No を聞かれるのでそこまで危険ではないと思います。gmailctl のルール例ほんの一部です。{ // xxx カードの都度利用通知はそこまで重要でないと、ひと目で分かるようにする filter: { and: [ { subject: 'xxx カードより「カードご利用のお知らせ」' }, { from: 'info@example.jp' }, ], }, actions: { labels: ['notifications'], markSpam: false, },},{ // xxx カードからの毎月のリボ払いのススメはウザいので全部削除 filter: { and: [ { subject: '【xxx カード】リボ・分割変更' }, { from: 'info@example.jp' }, ], }, actions: { delete: true, },},{ // xxx 新聞からのメールは多すぎてウザいので全部削除 filter: { to: 'masutaka.net+xxx@gmail.com', }, actions: { delete: true, },},{ // このブログのデプロイ失敗通知を Pushover で受け取る filter: { and: [ { from: 'heroku' }, { or: [ { subject: 'Automatic deployment of masutaka-net failed' }, { subject: '[masutaka-net] Release phase command failed to execute' }, ], }, ], }, actions: { archive: true, markRead: true, markSpam: false, forward: 'example@pomail.net', },},Gmail の検索演算子は gmailctl の \"query\" operator で使えますが、私はそれは使わずに \"and\" や \"or\" operator を使うようにしました。Gmail 側のフィルターよりも、gmailctl のコードの可読性を重視しています。gmailctl に任せると、フィルターの数が増えることはありますが、すっきりとした検索クエリに変換されることもあります。どちらにせよ、gmailctl を使うのであれば gmailctl のレールに乗ったほうが良いと思います。便利関数の紹介~/.gmailctl/config.jsonnet から import している ~/.gmailctl/gmailctl.libsonnet にはいくつかの便利関数があります。興味深かったので紹介しておきます。リポジトリの README.md にも言及があります。chainFiltersGmail のフィルターには if-else 構文が存在しない。この関数を使えば、前のフィルターに一致したら次のフィルターは適用させないことが出来る。directlyToGmail の検索演算子 to は cc や bcc にもマッチするそう。知らなかった。この関数を使えば、to のみにマッチしたフィルターを簡潔に書くことが出来る。rulesLabels存在していないラベルを rules が参照すると、gmailctl apply でエラーが発生する。この関数を使えばそれを回避出来る。ただ、gmailctl とは関係のないラベルも管理下に置く必要がある。まとめgmailctl を導入して、Gmail のフィルターとラベルをコード管理しました。全てを手中に納めた気がして、とても良いです。心の平穏を得ることが出来ました。・コード管理することで Git に履歴が残るので、要らなくなったフィルターを気軽に削除できる。戻すことも簡単・Gmail のフィルターにはコメントを書けなかったが、~/.gmailctl/config.jsonnet には書けるand や or の論理演算子と戯れるのも楽しかった。","link":"https://masutaka.net/chalow/2022-02-13-1.html","isoDate":"2022-02-13T14:59:59.000Z","dateMiliSeconds":1644764399000,"authorName":"masutaka"},{"title":"『ボッチLookML開発者兼データ整備人を連れてきたよ！』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『ボッチLookML開発者兼データ整備人を連れてきたよ！』というひどいタイトルの発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTv911SmUBM9fAk-IKQM9139Q29fU7INnUHwbFeOBxolqyybPdlcFHW2dAHBTgr3P9J_kL0Xdhbe38L/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"410\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>2020 年 4 月から Looker に関わって得たことをまとめた内容であるとともに、1 年半近く前からのアップデートになります。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2020/10/23/190000\">developer.feedforce.jp</a></cite></p>\n\n<p>世に出ている Looker の情報はキラキラしているものが多く、ツラい話をそれほど目にしません。<s>絶対にあるはずなのに！😭</s></p>\n\n<p>それならば！とツラい話や解決が困難な話を散りばめさせてもらいました。課題が共有されて初めて知見が役に立つと思いますからね。<em>解決した課題もあるよ（小声）。</em></p>\n\n<p>それでは良い週末を！(^^)/</p>\n","contentSnippet":"こんにちは id:masutaka26 です。本日、週次の社内勉強会 FFTT で『ボッチLookML開発者兼データ整備人を連れてきたよ！』というひどいタイトルの発表をしました。2020 年 4 月から Looker に関わって得たことをまとめた内容であるとともに、1 年半近く前からのアップデートになります。developer.feedforce.jp世に出ている Looker の情報はキラキラしているものが多く、ツラい話をそれほど目にしません。絶対にあるはずなのに！😭それならば！とツラい話や解決が困難な話を散りばめさせてもらいました。課題が共有されて初めて知見が役に立つと思いますからね。解決した課題もあるよ（小声）。それでは良い週末を！(^^)/","link":"https://developer.feedforce.jp/entry/2022/02/04/180000","isoDate":"2022-02-04T09:00:00.000Z","dateMiliSeconds":1643965200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"仮想通貨ウォレットを知るために MetaMask と Coincheck のアカウントを作って、仮想通貨を送金してみた","content":"最近、PodCast や Voicy をよく聞くようになりました。今さらながら散歩や掃除中の「ながら聞き」を覚えたからです。格闘技や歴史、テック系をよく聞きます。Off Topic も分からないなりに最近は聞く関係で、仮想通貨やウォレット、Web3 関連の話題は気にはなってました。何も分からない...。という流れで、先週会社でこのツイートが共有されていて「あ、これ進研ゼミで見た Off Topic で聞いたやつだ！」と思い、勢いで試してみました。loading...この記事も共有されていたので、一旦何も考えずに従いました。MetaMask(メタマスク)とは？使い方やログイン方法をスマホ版・PC版ごとに解説｜InvestNavi（インヴェストナビ）ビッコレのアカウント作成は不要いきなりですが不要です。記事中の動画には登場人物が３人います。① MetaMask② Coincheck③ ビッコレこれ、最後まで関係が分からず混乱していたのですが、私は③ビッコレのアカウント作成は不要でした。記事を書いている会社が運営しているサービスなので、紹介するのは分かるのですがね。ビッコレは「ポイ活」をしてビットコインをゲットするサービスみたいです。ポイ活とか、ビッコレとか略称っぽいのが多くてワイは疲れました...。LINE の友達になると 250 円相当のビットコインはもらえるのですが、如何せん少なすぎて Coincheck に送金できません。あと、友達をビッコレに招待すると 1,000 円もらえるみたいですが、私は仮想通貨自体には夢を持っていないのでね...。今回はあくまで雰囲気を知ることが目的なので、私にはビッコレアカウント作成は不要でした。結果的には、動画をざっと見て①MetaMaskと②Coincheckのアカウントを作るだけで良かったです。記事はより詳しく書いてあって、動画の後に読むと分かりやすかったです。仮想通貨の体験だけなら MetaMask も不要ちなみに Coincheck もウォレットの機能は持っているので、MetaMask は必須ではないのですが、記事によるとイーサリアムブロックチェーンに連動する金融サービス、ゲーム、NFTを利用するには、仮想通貨ウォレットであるMetaMaskを通して決済しなくてはいけません。という話はあるみたいです。なるほど。分からん。あとは秘密鍵（シークレットリカバリーフレーズ）がオフラインで管理されることになるため、Coincheck などよりリスクが分散されてはいる理解です。心が折れそうになった Coincheck の本人確認Coincheck のアカウントを作った後に必要な「本人確認」が非常に厄介でした。私は４回失敗しました。２０回くらい動画撮りましたよ...。５回目に、本人確認に使う書類をマイナンバーカードから運転免許証に変えたら、一発で通りました。何も分からない...。仮想通貨の購入あとは Coincheck の銀行口座に日本円を振り込めば、仮想通貨を購入できます。私は一旦 5,000 円振り込みました。22:00 過ぎだったと思いますが、まもなく Coincheck のスマホアプリで入金を確認できました。ここ一番注意なのですが、MetaMask にはイーサリアム系の仮想通貨しか入れられないので、誤って先頭にある BTC（ビットコイン）を購入しないようにしましょう。ETH（イーサリアム）を購入すれば OK です。私は間違えて BTC を買ってしまい、泣く泣く BTC を売って ETH を購入しました。それでもう 2,500 円くらいに減ってしまいました。手数料怖い。MetaMask への送金いよいよ今回の目玉、MetaMask への送金です。Coincheck のスマホアプリまたは Web から、MetaMask のスマホアプリで確認できるアドレスに送金するだけです。手数料は ETH でかかります。これで今回のミッションは終了です。やったぜ！とツイートしたところ、loading...ひゃー！（↑への返信を見るとわかります）ものの数秒で 10 件くらい返信やメンションが来ました。loading...ご注意ください。全部無視すれば OK です。loading...今は BAN されたのか確認できませんが、MetaMask のサポートに見えるアカウントからも返信が来てました。もちろん偽物です。まとめ仮想通貨ウォレットを知るために MetaMask と Coincheck のアカウントを作ってみました。やってみて罠を踏んだり、腑に落ちたりと、実りある体験でした。[おまけ] マネーフォワード ME との連携Coincheck はマネーフォワードと連携できます。API キーを作って、マネーフォワードから連携するだけです。今は 800 円ほど入ってます。一方の MetaMask はマネーフォワードと連携できません。なんだか損した気になりますが、多分気のせいです。MetaMask のスマホアプリを見ると 1,800 円ほど入っています。Coincheck と合わせて 2,600 円。2,400 円が亜空間に飲み込まれた計算になります。","contentSnippet":"最近、PodCast や Voicy をよく聞くようになりました。今さらながら散歩や掃除中の「ながら聞き」を覚えたからです。格闘技や歴史、テック系をよく聞きます。Off Topic も分からないなりに最近は聞く関係で、仮想通貨やウォレット、Web3 関連の話題は気にはなってました。何も分からない...。という流れで、先週会社でこのツイートが共有されていて「あ、これ進研ゼミで見た Off Topic で聞いたやつだ！」と思い、勢いで試してみました。loading...この記事も共有されていたので、一旦何も考えずに従いました。MetaMask(メタマスク)とは？使い方やログイン方法をスマホ版・PC版ごとに解説｜InvestNavi（インヴェストナビ）ビッコレのアカウント作成は不要いきなりですが不要です。記事中の動画には登場人物が３人います。① MetaMask② Coincheck③ ビッコレこれ、最後まで関係が分からず混乱していたのですが、私は③ビッコレのアカウント作成は不要でした。記事を書いている会社が運営しているサービスなので、紹介するのは分かるのですがね。ビッコレは「ポイ活」をしてビットコインをゲットするサービスみたいです。ポイ活とか、ビッコレとか略称っぽいのが多くてワイは疲れました...。LINE の友達になると 250 円相当のビットコインはもらえるのですが、如何せん少なすぎて Coincheck に送金できません。あと、友達をビッコレに招待すると 1,000 円もらえるみたいですが、私は仮想通貨自体には夢を持っていないのでね...。今回はあくまで雰囲気を知ることが目的なので、私にはビッコレアカウント作成は不要でした。結果的には、動画をざっと見て①MetaMaskと②Coincheckのアカウントを作るだけで良かったです。記事はより詳しく書いてあって、動画の後に読むと分かりやすかったです。仮想通貨の体験だけなら MetaMask も不要ちなみに Coincheck もウォレットの機能は持っているので、MetaMask は必須ではないのですが、記事によるとイーサリアムブロックチェーンに連動する金融サービス、ゲーム、NFTを利用するには、仮想通貨ウォレットであるMetaMaskを通して決済しなくてはいけません。という話はあるみたいです。なるほど。分からん。あとは秘密鍵（シークレットリカバリーフレーズ）がオフラインで管理されることになるため、Coincheck などよりリスクが分散されてはいる理解です。心が折れそうになった Coincheck の本人確認Coincheck のアカウントを作った後に必要な「本人確認」が非常に厄介でした。私は４回失敗しました。２０回くらい動画撮りましたよ...。５回目に、本人確認に使う書類をマイナンバーカードから運転免許証に変えたら、一発で通りました。何も分からない...。仮想通貨の購入あとは Coincheck の銀行口座に日本円を振り込めば、仮想通貨を購入できます。私は一旦 5,000 円振り込みました。22:00 過ぎだったと思いますが、まもなく Coincheck のスマホアプリで入金を確認できました。ここ一番注意なのですが、MetaMask にはイーサリアム系の仮想通貨しか入れられないので、誤って先頭にある BTC（ビットコイン）を購入しないようにしましょう。ETH（イーサリアム）を購入すれば OK です。私は間違えて BTC を買ってしまい、泣く泣く BTC を売って ETH を購入しました。それでもう 2,500 円くらいに減ってしまいました。手数料怖い。MetaMask への送金いよいよ今回の目玉、MetaMask への送金です。Coincheck のスマホアプリまたは Web から、MetaMask のスマホアプリで確認できるアドレスに送金するだけです。手数料は ETH でかかります。これで今回のミッションは終了です。やったぜ！とツイートしたところ、loading...ひゃー！（↑への返信を見るとわかります）ものの数秒で 10 件くらい返信やメンションが来ました。loading...ご注意ください。全部無視すれば OK です。loading...今は BAN されたのか確認できませんが、MetaMask のサポートに見えるアカウントからも返信が来てました。もちろん偽物です。まとめ仮想通貨ウォレットを知るために MetaMask と Coincheck のアカウントを作ってみました。やってみて罠を踏んだり、腑に落ちたりと、実りある体験でした。[おまけ] マネーフォワード ME との連携Coincheck はマネーフォワードと連携できます。API キーを作って、マネーフォワードから連携するだけです。今は 800 円ほど入ってます。一方の MetaMask はマネーフォワードと連携できません。なんだか損した気になりますが、多分気のせいです。MetaMask のスマホアプリを見ると 1,800 円ほど入っています。Coincheck と合わせて 2,600 円。2,400 円が亜空間に飲み込まれた計算になります。","link":"https://masutaka.net/chalow/2022-01-19-1.html","isoDate":"2022-01-19T14:59:59.000Z","dateMiliSeconds":1642604399000,"authorName":"masutaka"},{"title":"Manjaro で CD をリッピングする","content":"Asunder という GUI ツールを使えば、簡単にリッピング出来る。$ sudo pacman -S asunderエンコーダがないので、Asunder 上で直接 AAC(.m4a) に変換出来ない。「設定」で促されるがままに fdkaac をインストールすれば OK 。$ sudo pacman -S fdkaacデフォルトの CDDB サーバ gnudb.gnudb.org:8880 だと、『青天を衝けI』のサントラは引けなかった。有志の方が立てたサーバだと引けた。サーバ: freedbtest.dyndns.orgポート: 80ただ『青天を衝けII』は引けなかった。Linux からでもこの freedbtest サーバに登録は出来ると思うが、サイトに書かれているのは Windows アプリ CDex での登録方法のみ。iTunes だとどちらのサントラも引けた。iTunes は Gracenote という CDDB サーバを使っているらしい？ちなみに CDDB は Gracenote の登録商標らしい。freedbtest サーバに登録できたとしても、YouTube Music に登録するためには、各 .m4a ファイルにアートワークを登録しないと寂しいことになる。なんらかの方法で .m4a ファイルを編集する必要がある。そういえば .mp3 ファイルの時は Emacs の mpg123.el 経由で id3put を使って編集した記憶。当時はアートワークなんてものはなかったけどね。懐かしい...。いろいろ面倒くさいので、結局 Windows の iTunes でリッピングするのが一番楽なのであった...。・Wikipedia - CDDB・freedb 日本語・Asunderで参照先CDDBサーバーを変更: k のガジェット日記・「まだ自作CDをCDDBに登録してないの？」実はあなたも出来ていない？！CDDBへの登録について - 夕立ノート","contentSnippet":"Asunder という GUI ツールを使えば、簡単にリッピング出来る。$ sudo pacman -S asunderエンコーダがないので、Asunder 上で直接 AAC(.m4a) に変換出来ない。「設定」で促されるがままに fdkaac をインストールすれば OK 。$ sudo pacman -S fdkaacデフォルトの CDDB サーバ gnudb.gnudb.org:8880 だと、『青天を衝けI』のサントラは引けなかった。有志の方が立てたサーバだと引けた。サーバ: freedbtest.dyndns.orgポート: 80ただ『青天を衝けII』は引けなかった。Linux からでもこの freedbtest サーバに登録は出来ると思うが、サイトに書かれているのは Windows アプリ CDex での登録方法のみ。iTunes だとどちらのサントラも引けた。iTunes は Gracenote という CDDB サーバを使っているらしい？ちなみに CDDB は Gracenote の登録商標らしい。freedbtest サーバに登録できたとしても、YouTube Music に登録するためには、各 .m4a ファイルにアートワークを登録しないと寂しいことになる。なんらかの方法で .m4a ファイルを編集する必要がある。そういえば .mp3 ファイルの時は Emacs の mpg123.el 経由で id3put を使って編集した記憶。当時はアートワークなんてものはなかったけどね。懐かしい...。いろいろ面倒くさいので、結局 Windows の iTunes でリッピングするのが一番楽なのであった...。・Wikipedia - CDDB・freedb 日本語・Asunderで参照先CDDBサーバーを変更: k のガジェット日記・「まだ自作CDをCDDBに登録してないの？」実はあなたも出来ていない？！CDDBへの登録について - 夕立ノート","link":"https://masutaka.net/chalow/2021-12-30-1.html","isoDate":"2021-12-30T14:59:59.000Z","dateMiliSeconds":1640876399000,"authorName":"masutaka"},{"title":"2021 年に買って良かったもの 7 選（ガチ）","content":"年末ということで、今年買って良かったものを紹介します。月に 1 本書くことにしている、ブログ記事のネタが思いつかないこともあり...。1. Anker Magnetic Cable Holderこれはマジおすすめです。机の下にケーブルが落ちて拾うストレスがなくなりました。当時の机の天板は少しツルツルで、今はザラザラですが、どちらも全く問題なく吸着しています。シールタイプではないので、剥がした時に跡が残らないのも良いです。詳しくは [2021-03-24-1] をどうぞ。2. ノートパソコンスタンドこれも良かったです。パソコンを使わない時、個人用と仕事用のどちらも邪魔なく縦置き出来るようになりました。会社の同僚曰く「複数台を縦置きするスタンドの発想はなかったかも……」とのこと。詳しくは [2021-04-04-1] をどうぞ。3. スマホスタンドスタンド絡みでもう一丁。個人的には今年の MVP です。今使っている Pixel 3a XL [2020-07-14-1] は裏側に指紋センサーがあります。今まで机の上に平置きしていたので、スマホを使おうとすると以下の 2 ステップ必要でした。1. スマホを持ち上げる2. 指紋認証するこのスタンドのおかげで 1 ステップ減らせました。1. 指紋認証する横置きも出来るし、裏側のリングを伸ばして壁などにかけられるし、スマホリングにもなるので、万能感があります。普通のスマホスタンドと違って場所を取ることもありません。お値段も 1,000 円ちょっとです。4. MacBook Pro 用クーラー机の上がらみでさらにもう一丁。私の 2 代目 MacBook Pro 用クーラーです。これがないと指先が熱くて仕事になりません。完全に仕事用に買いました。個人用の VivoBook では全く不要です。自分の中では正直言って、MacBook Pro は欠陥商品です。あ、ディスってしまった...。M1 MacBook Pro では不要なことを祈ります。詳しくは [2021-05-23-1] をどうぞ。5. チェアマット今度は机の下です。これも地味に良い買い物でした。会社の Slack で聞いたら教えてくれたやつです。床に傷が付かない、掃除機をかけやすい、剥がしても床に跡が残らない、と良いことづくめです。おまけに値段も 2,000 円ちょっと。ブラックやブラウンだとホコリが目立ちやすい気がしたので、ライトグレーを買いました。ホコリは気になっていません。6. ソーダストリームWFH (Work From Home) に突入してすぐに買えば良かったやつです。以前は毎日コンビニで数本の炭酸水を買って、2 週に 1 回は溜まったペットボトルを資源物回収に出していました。結構面倒でした。躊躇していたのはうちの狭いキッチンには邪魔かと思っていたからです。意外とコンパクトで邪魔になりませんでした。買ったのは電動ではなく手動タイプです。慣れれば十分かな。コードもありませんからね。ガスシリンダーの扱いが独特で、ゴミに出すことは出来ず、購入時に空のシリンダーを返却というフローです。シリンダーは 2 本以上所持することも出来て、それぞれ初回は少し高かったかも。うちから少し歩いたところのライフで売っているので、切れたらテクテク歩いて買いに行っています。そろそろ切れそう。ガスシリンダーは宅配も可能だそうです。7. 番外編: ブレインスリープのマットレスと枕・ブレインスリープ マットレス （オーバーレイ）・ブレインスリープ ピロー + カバー合う合わないは人によるので紹介だけ。[2015-12-15-1] に買った布団がヘタりすぎて、起きると腰痛ということが続いていたので、人生で一度くらい高いマットレスを買ってもいいか！と思って買いました。YouTube で見つけた マットレス 20% OFF キャンペーンと、15,000 円 OFF クーボンを使って、お値段をそれなりに抑えることが出来ました。￥88,000 マットレス + マットレスカバー￥33,000 枕 + 枕カバー x 2- ￥18,370 キャンペーン- ￥15,000 クーポンーーーーーーーーーーーーーーーーーーー￥87,630さらに↑これで溜まったポイントを使って 2 枚目のマットレスカバーを購入。￥6,600 マットレスカバー- ￥1,376 ポイントーーーーーーーーーーーーーーーーーーー￥5,224起きがけの腰痛がほぼなくなったので、私は多分合いました（そう信じたい）。お値段相応か？と言われるとどうなんだろう？まとめ2021 年に買って良かったもの 7 選を紹介しました。あいかわらず WFH が続いているので、それ関連への投資が多く、おかげでどんどん仕事環境が良くなっています。来年も、より良い環境を作る予定です。それではよいお年を！","contentSnippet":"年末ということで、今年買って良かったものを紹介します。月に 1 本書くことにしている、ブログ記事のネタが思いつかないこともあり...。1. Anker Magnetic Cable Holderこれはマジおすすめです。机の下にケーブルが落ちて拾うストレスがなくなりました。当時の机の天板は少しツルツルで、今はザラザラですが、どちらも全く問題なく吸着しています。シールタイプではないので、剥がした時に跡が残らないのも良いです。詳しくは [2021-03-24-1] をどうぞ。2. ノートパソコンスタンドこれも良かったです。パソコンを使わない時、個人用と仕事用のどちらも邪魔なく縦置き出来るようになりました。会社の同僚曰く「複数台を縦置きするスタンドの発想はなかったかも……」とのこと。詳しくは [2021-04-04-1] をどうぞ。3. スマホスタンドスタンド絡みでもう一丁。個人的には今年の MVP です。今使っている Pixel 3a XL [2020-07-14-1] は裏側に指紋センサーがあります。今まで机の上に平置きしていたので、スマホを使おうとすると以下の 2 ステップ必要でした。1. スマホを持ち上げる2. 指紋認証するこのスタンドのおかげで 1 ステップ減らせました。1. 指紋認証する横置きも出来るし、裏側のリングを伸ばして壁などにかけられるし、スマホリングにもなるので、万能感があります。普通のスマホスタンドと違って場所を取ることもありません。お値段も 1,000 円ちょっとです。4. MacBook Pro 用クーラー机の上がらみでさらにもう一丁。私の 2 代目 MacBook Pro 用クーラーです。これがないと指先が熱くて仕事になりません。完全に仕事用に買いました。個人用の VivoBook では全く不要です。自分の中では正直言って、MacBook Pro は欠陥商品です。あ、ディスってしまった...。M1 MacBook Pro では不要なことを祈ります。詳しくは [2021-05-23-1] をどうぞ。5. チェアマット今度は机の下です。これも地味に良い買い物でした。会社の Slack で聞いたら教えてくれたやつです。床に傷が付かない、掃除機をかけやすい、剥がしても床に跡が残らない、と良いことづくめです。おまけに値段も 2,000 円ちょっと。ブラックやブラウンだとホコリが目立ちやすい気がしたので、ライトグレーを買いました。ホコリは気になっていません。6. ソーダストリームWFH (Work From Home) に突入してすぐに買えば良かったやつです。以前は毎日コンビニで数本の炭酸水を買って、2 週に 1 回は溜まったペットボトルを資源物回収に出していました。結構面倒でした。躊躇していたのはうちの狭いキッチンには邪魔かと思っていたからです。意外とコンパクトで邪魔になりませんでした。買ったのは電動ではなく手動タイプです。慣れれば十分かな。コードもありませんからね。ガスシリンダーの扱いが独特で、ゴミに出すことは出来ず、購入時に空のシリンダーを返却というフローです。シリンダーは 2 本以上所持することも出来て、それぞれ初回は少し高かったかも。うちから少し歩いたところのライフで売っているので、切れたらテクテク歩いて買いに行っています。そろそろ切れそう。ガスシリンダーは宅配も可能だそうです。7. 番外編: ブレインスリープのマットレスと枕・ブレインスリープ マットレス （オーバーレイ）・ブレインスリープ ピロー + カバー合う合わないは人によるので紹介だけ。[2015-12-15-1] に買った布団がヘタりすぎて、起きると腰痛ということが続いていたので、人生で一度くらい高いマットレスを買ってもいいか！と思って買いました。YouTube で見つけた マットレス 20% OFF キャンペーンと、15,000 円 OFF クーボンを使って、お値段をそれなりに抑えることが出来ました。￥88,000 マットレス + マットレスカバー￥33,000 枕 + 枕カバー x 2- ￥18,370 キャンペーン- ￥15,000 クーポンーーーーーーーーーーーーーーーーーーー￥87,630さらに↑これで溜まったポイントを使って 2 枚目のマットレスカバーを購入。￥6,600 マットレスカバー- ￥1,376 ポイントーーーーーーーーーーーーーーーーーーー￥5,224起きがけの腰痛がほぼなくなったので、私は多分合いました（そう信じたい）。お値段相応か？と言われるとどうなんだろう？まとめ2021 年に買って良かったもの 7 選を紹介しました。あいかわらず WFH が続いているので、それ関連への投資が多く、おかげでどんどん仕事環境が良くなっています。来年も、より良い環境を作る予定です。それではよいお年を！","link":"https://masutaka.net/chalow/2021-12-26-1.html","isoDate":"2021-12-26T14:59:59.000Z","dateMiliSeconds":1640530799000,"authorName":"masutaka"},{"title":"LookML 開発で使っているディレクトリ構造を紹介する","content":"<p>こんにちは、<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Looker Advent Calendar 2021 の 13 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2021%2Flooker\" title=\"Calendar for Looker | Advent Calendar 2021 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2021/looker\">qiita.com</a></cite></p>\n\n<p>昨日は Yappli 阿部さんの「<a href=\"https://tech.yappli.io/entry/2021/12/12/Sexy_Tech_for_You_9\">Lookerの目標値やストップワードを、Googleスプレッドシート連携でお手軽管理【Sexy Tech for You #9】</a>」でした。Looker を使うとこのような LookML を書くだけで、ビジネスユーザーが SQL を書くことなく、本業に集中できるのはとても良いですよね。</p>\n\n<p>個人的には、SQL ベースの派生テーブルの中で join するよりも、explore で join したほうが Looker らしく、メンテナンス性が良い気がしました。<a href=\"https://help.looker.com/hc/en-us/articles/360023722974\">symmetric 集計</a>が働くため、ファンアウトも避けられます。wikipedia テーブルに関しては、永続的な派生テーブル（PDT）を使って BigQuery のスキャンサイズを抑えるのも良さそうです。</p>\n\n<p>、、、( ﾟдﾟ)ハッ！ついマジレスをしてしまいました。💦</p>\n\n<p>今回は dimension が null の measure を（0 ではなく）ø にする少しマニアックな記事を書く予定でしたが、先日の <a href=\"https://looker-japan-user-group.connpass.com/event/233775/\">Looker User Meetup Online #7</a> で、LookML のディレクトリ構造を知りたいというチャットをお見かけしたので、今回はその話を書くことにしました。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#今回のプロジェクトの規模感\">今回のプロジェクトの規模感</a></li>\n    <li><a href=\"#デフォルトのディレクトリ構造\">デフォルトのディレクトリ構造？</a></li>\n    <li><a href=\"#特別なファイル形式を知る\">特別なファイル形式を知る</a></li>\n    <li><a href=\"#最近使っているディレクトリ構造\">最近使っているディレクトリ構造</a><ul>\n            <li><a href=\"#bigquery\">bigquery/</a></li>\n            <li><a href=\"#model1modellkml\">model1.model.lkml</a></li>\n            <li><a href=\"#explores\">explores/</a></li>\n            <li><a href=\"#views\">views/</a></li>\n            <li><a href=\"#tests\">tests/</a></li>\n            <li><a href=\"#manifestlkml\">manifest.lkml</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#2021-12-29-追記\">2021-12-29 追記</a></li>\n</ul>\n\n<h2 id=\"今回のプロジェクトの規模感\">今回のプロジェクトの規模感</h2>\n\n<p>プロジェクトの規模感によってディレクトリ構造は変わると思うので、先に書いておきます。</p>\n\n<ul>\n<li>Looker インスタンスに 1 つだけ LookML プロジェクトが存在する</li>\n<li>BigQuery Dataset 76 個</li>\n<li><code>.lkml</code> ファイル 277 個\n\n<ul>\n<li><code>.model.lkml</code> ファイル 1 個</li>\n<li><code>.explore.lkml</code> ファイル 56 個</li>\n<li><code>.view.lkml</code> ファイル 139 個</li>\n<li><code>.test.lkml</code> ファイル 78 個</li>\n</ul>\n</li>\n<li>LookML 開発者 1 名</li>\n</ul>\n\n\n<h2 id=\"デフォルトのディレクトリ構造\">デフォルトのディレクトリ構造？</h2>\n\n<p>この記事を書くまで誤解をしていたのですが、デフォルトのディレクトリ構造というものはなかったのですね。この記事を書くために改めて Blank Project を作ったら、ファイルもディレクトリも何もないプロジェクトが作られました。</p>\n\n<p>モデルファイルを作るとこのようなコードが展開されるので、<code>.view.lkml</code> に関しては <code>/views/</code> 以下に作る方が多いと思います。私もそうでした。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;/views/*.view.lkml&#34;                # include all views in the views/ folder in this project\n# include: &#34;/**/*.view.lkml&#34;                 # include all views in this project\n# include: &#34;my_dashboard.dashboard.lookml&#34;   # include a lookml dashboard called my_dashboard</pre>\n\n\n<p>例えばこのようになります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>feedmatic.model.lkml\nviews\n├── all_media.view.lkml\n└── ga.view.lkml</pre>\n\n\n<p>開発初期は <code>feedmatic.model.lkml</code> に view 以外の、explore や datagroup などをズラズラと書いていました。</p>\n\n<h2 id=\"特別なファイル形式を知る\">特別なファイル形式を知る</h2>\n\n<p>ご存知の通り、LookML のファイル形式は <code>.lkml</code> です。</p>\n\n<p>LookML 開発が続くと <code>.model.lkml</code> や <code>.view.lkml</code> などが増えていきますが、この中で唯一意味を持つのが <code>.model.lkml</code> です<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。その他のファイル形式は整理のために自由に作ることが出来ます。</p>\n\n<p>例えば <code>feedmatic.model.lkml</code> を作ると、<code>feedmatic</code> というモデルが定義されます。<code>https://{{your looker domain}}/projects</code> で確認できます。<code>all_media.view.lkml</code> を作っても、何かが作られるわけではありません。</p>\n\n<p>以上の知識を持った上で、公式ドキュメントを読むと理解が深まるかもしれません。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.looker.com%2Fja%2Fdata-modeling%2Flearning-lookml%2Flookml-terms-and-concepts\" title=\"LookMLの用語と概念\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<h2 id=\"最近使っているディレクトリ構造\">最近使っているディレクトリ構造</h2>\n\n<p>こんな感じです。それぞれ解説していきます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bigquery\n├── spreadsheet1\n│   ├── define.json\n│   └── schema.json\n└── spreadsheet2\n    ├── define.json\n    └── schema.json\nmodel1.model.lkml\nexplores\n├── corp\n│   ├── base.explore.lkml\n│   ├── name1.explore.lkml\n│   └── name2.explore.lkml\n├── explore1.explore.lkml\n└── explore2.explore.lkml\nviews\n├── corp\n│   ├── base.view.lkml\n│   ├── name1.view.lkml\n│   └── name2.view.lkml\n├── view1.view.lkml\n└── view2.view.lkml\ntests\n└── model1\n    ├── corp\n    │   ├── name1.test.lkml\n    │   └── name2.test.lkml\n    ├── explore1.test.lkml\n    └── explore2.test.lkml\nmanifest.lkml</pre>\n\n\n<h3 id=\"bigquery\">bigquery/</h3>\n\n<p>いきなり LookML 関係ありません。💦</p>\n\n<p>BigQuery はデータソースに Google スプレッドシートを指定でき、そのスキーマ定義はコード化することが出来ます。</p>\n\n<p>コード化することで変更履歴を Git で管理できますし、BigQuery CLI を使って簡単に Dataset や Table を作ったり、削除したりが出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bq mk spreadsheet1\n$ bq mk --external_table_definition=./define.json spreadsheet1.gsheet\n$ bq rm -r spreadsheet1</pre>\n\n\n<p>破壊的な変更をする時は、バージョン名を付けた Dataset を新規作成し、LookML から参照先を変えます。こうすることで、本番環境に影響を与えずに開発することが出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bq mk spreadsheet1_v2\n$ bq mk --external_table_definition=./define.json spreadsheet1_v2.gsheet</pre>\n\n\n<p>スキーマ定義は公式ドキュメントをご覧下さい。需要があればそんな記事を書きます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcloud.google.com%2Fconfig-connector%2Fdocs%2Freference%2Fresource-docs%2Fbigquery%2Fbigquerytable%3Fhl%3Dja\" title=\"BigQueryTable  |  Config Connector Documentation  |  Google Cloud\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>他の Dataset は ETL ツール<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>が作るためコード化はしていません。</p>\n\n<h3 id=\"model1modellkml\">model1.model.lkml</h3>\n\n<p>中心となるこのファイルは軽いです。本当にこの程度しか書いていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>connection: &#34;docs_bigquery_db&#34;\n\ninclude: &#34;/explores/**/*.explore&#34;\ninclude: &#34;/tests/model1/**/*.test&#34;\n\nnamed_value_format: jpy_0 {\n  value_format: &#34;\\¥#,##0&#34;\n}\n\nnamed_value_format: jpy_1 {\n  value_format: &#34;\\¥#,##0.0&#34;\n}\n\n# for test\naccess_grant: can_view_explores_for_tests {\n  user_attribute: view_explores_for_tests\n  allowed_values: [&#34;yes&#34;]\n}</pre>\n\n\n<p>必要な定義は <code>connection</code> と <code>include</code> だけです。</p>\n\n<p>include 対象を全ての <code>.explore.lkml</code> と、このモデルに関連するテスト（<code>tests/feedmatic/</code> 以下全ての <code>.test.lkml</code>）だけにしていることがポイントです。つまり <code>.model.lkml</code> は <code>.explore.lkml</code> と自分の <code>.test.lkml</code> しか知りません。</p>\n\n<p>あとは蛇足で、<code>named_value_format</code> と、<a href=\"/entry/2021/08/30/150000\">前回紹介したテスト</a>に必要な <code>access_grant</code> だけです。</p>\n\n<h3 id=\"explores\">explores/</h3>\n\n<p>1 つの explore を 1 つのファイルに定義しています。</p>\n\n<p><code>explores/explore1.explore.lkml</code> はこのように書いています。<code>.explore.lkml</code> は <code>.view.lkml</code> しか知りません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;/views/**/*.view&#34;\n\nexplore: explore1 {\n  # ...\n}</pre>\n\n\n<p>紆余曲折あり、<code>explores/corp/name1.explore.lkml</code> のような取引先ごとの explore もあります。</p>\n\n<p>基本となる <code>explores/corp/base.explore.lkml</code> はこのような定義です。ファイル名と explore 名を変えていることがポイントです。Ruby の慣習を参考にしました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: corp_base {\n  extension: required\n  # ...\n}</pre>\n\n\n<p><code>corp_base</code> explore を継承する、各取引先の explore はこのような定義です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;./base.explore&#34;\ninclude: &#34;/views/**/*.view&#34;\n\nexplore: corp_name1 {\n  extends: [corp_base]\n  # ...\n}</pre>\n\n\n<h3 id=\"views\">views/</h3>\n\n<p>view も explore と同様に、1 view 1 ファイルに定義しています。</p>\n\n<p><code>views/view1.view.lkml</code> です。<code>.view.lkml</code> は <code>.model.lkml</code>, <code>.explore.lkml</code>, <code>.test.lkml</code> の誰も知りません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: view1 {\n  # ...\n}</pre>\n\n\n<p>取引先ごとの view も同じです。<code>views/corp/base.view.lkml</code> はこんな感じで、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: corp_base {\n  extension: required\n  # ...\n}</pre>\n\n\n<p>継承先の <code>views/corp/name1.view.lkml</code> はこんな感じです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;./base.view&#34;\n\nview: corp_name1 {\n  extends: [corp_base]\n  # ...\n}</pre>\n\n\n<h3 id=\"tests\">tests/</h3>\n\n<p>テストはかなり書いており、2021-12-13 現在、184 もあります。</p>\n\n<p>ほぼ explore 単位でファイル分割しています。分割することで、ファイル単位のテストが可能になっています。</p>\n\n<p>こちらのベストプラクティスに従っています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815\" title=\"LookML Data Tests: Recommendations and Best Practices | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>テスト対象はこんな感じです。</p>\n\n<ul>\n<li>(1) LookML で特別な実装をしていて、壊れても気づくのが難しそうな実装</li>\n<li>(2) <code>primary_key</code> が重複していないか？ null になっていないか？を全ての view に対して</li>\n</ul>\n\n\n<p>(2) は前回詳しく書きました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F08%2F30%2F150000\" title=\"Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>実行に時間がかかることが悩みで以前こんな Topic を作りましたが、反応ゼロでした。みなさん課題ではないのかしら？💦</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Fis-it-possible-to-run-tests-in-parallel-28222\" title=\"Is it possible to run tests in parallel? | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p><code>primary_key</code> は壊れた時に気づくのが難しく、LookML 開発者が私だけということもあるため、機械的に全ての <code>primary_key</code> をテスト出来るようにしています。ただ、全テストは結構時間がかかるので、日に 1 回くらいの頻度で手動実行しています。CI したい...。</p>\n\n<h3 id=\"manifestlkml\">manifest.lkml</h3>\n\n<p>ディレクトリ構造とは関係ありませんが、manifest.lkml についても触れておきましょう。</p>\n\n<p><code>bigquery/</code> の項で書いたとおり、テーブル定義に破壊的な変更を加える時は <code>dataset_v2</code> のように Dataset 名にゆるふわバージョンを付けています。つまり割とカジュアルに Dataset 名が変わります。</p>\n\n<p>そのため、このように manifest.lkml で全ての Dataset 名を定義しています<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>。Dataset 名は複数箇所で使われ得るためです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>constant: table_name1  { value: &#34;`table1_v2.gsheet`&#34; }\nconstant: table_name2  { value: &#34;`table2.view`&#34; }</pre>\n\n\n<p>利用例です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sql_table_name: @{table_name1} ;;</pre>\n\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>現在 LookML 開発で使っているディレクトリ構造を紹介しました。中規模くらいまでの LookML プロジェクトには使える実感があります。</p>\n\n<p>ただ、最近はファイル数が多くなってきて、<code>.view.lkml</code> を追加した時に変更する <code>.explore.lkml</code> と <code>.test.lkml</code> の距離が遠く、実装しづらい課題があります。</p>\n\n<p>Refinements を使えば解決できるのだろうか、もっと再利用性のあるコードにしたいなど、悩みは尽きないです。</p>\n\n<p>こちらの記事は読んで手も動かしたのですが、巨大なファイルを分割する、Blocks のようなライブラリをカスタマイズする（？）、以外の使い方を見いだせていません。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2F%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%25A0-103%2Frefinements%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6lookml%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B-18809\" title=\"Refinementsを使ってLookMLのコードを整理する | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>皆さんのディレクトリ構造も是非教えて下さい！</p>\n\n<h2 id=\"2021-12-29-追記\">2021-12-29 追記</h2>\n\n<p><a href=\"https://community.looker.com/lookml-5/what-is-the-looker-recommended-folder-structure-for-lookml-development-28826\">What is the looker recommended folder structure for LookML development ? | Looker Community</a></p>\n\n<p>Looker Community にもお悩みの方がいらっしゃいました。返信している Dawid さんはよくお見かけする方で、かなりの熟練者だと思います。</p>\n\n<p>そんな彼も、今回私が書いた記事のような物理的な構造が良いのか、論理的な構造が良いのか、未だに試行錯誤しているようです。</p>\n\n<p>始めは物理的なディレクトリ構造から始めて、徐々に変化しながら論理的な構造に近づくのかもしれません。その頃にはステージに応じたベストプラクティスが出ていると良いですね。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>正確に書くと <code>manifest.lkml</code> や <code>.strings.json</code> などもありますが、一旦考えなくて良いと思います。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p><a href=\"https://funnel.io/\">Funnel.io</a> を使っています。<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:3\">\n<p>1 行で書いているのはソートしやすくするためです。<a href=\"#fnref:3\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは、id:masutaka26 です。この記事は Looker Advent Calendar 2021 の 13 日目の記事です。qiita.com昨日は Yappli 阿部さんの「Lookerの目標値やストップワードを、Googleスプレッドシート連携でお手軽管理【Sexy Tech for You #9】」でした。Looker を使うとこのような LookML を書くだけで、ビジネスユーザーが SQL を書くことなく、本業に集中できるのはとても良いですよね。個人的には、SQL ベースの派生テーブルの中で join するよりも、explore で join したほうが Looker らしく、メンテナンス性が良い気がしました。symmetric 集計が働くため、ファンアウトも避けられます。wikipedia テーブルに関しては、永続的な派生テーブル（PDT）を使って BigQuery のスキャンサイズを抑えるのも良さそうです。、、、( ﾟдﾟ)ハッ！ついマジレスをしてしまいました。💦今回は dimension が null の measure を（0 ではなく）ø にする少しマニアックな記事を書く予定でしたが、先日の Looker User Meetup Online #7 で、LookML のディレクトリ構造を知りたいというチャットをお見かけしたので、今回はその話を書くことにしました。今回のプロジェクトの規模感デフォルトのディレクトリ構造？特別なファイル形式を知る最近使っているディレクトリ構造bigquery/model1.model.lkmlexplores/views/tests/manifest.lkmlまとめ2021-12-29 追記今回のプロジェクトの規模感プロジェクトの規模感によってディレクトリ構造は変わると思うので、先に書いておきます。Looker インスタンスに 1 つだけ LookML プロジェクトが存在するBigQuery Dataset 76 個.lkml ファイル 277 個.model.lkml ファイル 1 個.explore.lkml ファイル 56 個.view.lkml ファイル 139 個.test.lkml ファイル 78 個LookML 開発者 1 名デフォルトのディレクトリ構造？この記事を書くまで誤解をしていたのですが、デフォルトのディレクトリ構造というものはなかったのですね。この記事を書くために改めて Blank Project を作ったら、ファイルもディレクトリも何もないプロジェクトが作られました。モデルファイルを作るとこのようなコードが展開されるので、.view.lkml に関しては /views/ 以下に作る方が多いと思います。私もそうでした。include: \"/views/*.view.lkml\"                # include all views in the views/ folder in this project# include: \"/**/*.view.lkml\"                 # include all views in this project# include: \"my_dashboard.dashboard.lookml\"   # include a lookml dashboard called my_dashboard例えばこのようになります。feedmatic.model.lkmlviews├── all_media.view.lkml└── ga.view.lkml開発初期は feedmatic.model.lkml に view 以外の、explore や datagroup などをズラズラと書いていました。特別なファイル形式を知るご存知の通り、LookML のファイル形式は .lkml です。LookML 開発が続くと .model.lkml や .view.lkml などが増えていきますが、この中で唯一意味を持つのが .model.lkml です1。その他のファイル形式は整理のために自由に作ることが出来ます。例えば feedmatic.model.lkml を作ると、feedmatic というモデルが定義されます。https://{{your looker domain}}/projects で確認できます。all_media.view.lkml を作っても、何かが作られるわけではありません。以上の知識を持った上で、公式ドキュメントを読むと理解が深まるかもしれません。最近使っているディレクトリ構造こんな感じです。それぞれ解説していきます。bigquery├── spreadsheet1│   ├── define.json│   └── schema.json└── spreadsheet2    ├── define.json    └── schema.jsonmodel1.model.lkmlexplores├── corp│   ├── base.explore.lkml│   ├── name1.explore.lkml│   └── name2.explore.lkml├── explore1.explore.lkml└── explore2.explore.lkmlviews├── corp│   ├── base.view.lkml│   ├── name1.view.lkml│   └── name2.view.lkml├── view1.view.lkml└── view2.view.lkmltests└── model1    ├── corp    │   ├── name1.test.lkml    │   └── name2.test.lkml    ├── explore1.test.lkml    └── explore2.test.lkmlmanifest.lkmlbigquery/いきなり LookML 関係ありません。💦BigQuery はデータソースに Google スプレッドシートを指定でき、そのスキーマ定義はコード化することが出来ます。コード化することで変更履歴を Git で管理できますし、BigQuery CLI を使って簡単に Dataset や Table を作ったり、削除したりが出来ます。$ bq mk spreadsheet1$ bq mk --external_table_definition=./define.json spreadsheet1.gsheet$ bq rm -r spreadsheet1破壊的な変更をする時は、バージョン名を付けた Dataset を新規作成し、LookML から参照先を変えます。こうすることで、本番環境に影響を与えずに開発することが出来ます。$ bq mk spreadsheet1_v2$ bq mk --external_table_definition=./define.json spreadsheet1_v2.gsheetスキーマ定義は公式ドキュメントをご覧下さい。需要があればそんな記事を書きます。他の Dataset は ETL ツール2が作るためコード化はしていません。model1.model.lkml中心となるこのファイルは軽いです。本当にこの程度しか書いていません。connection: \"docs_bigquery_db\"include: \"/explores/**/*.explore\"include: \"/tests/model1/**/*.test\"named_value_format: jpy_0 {  value_format: \"\\¥#,##0\"}named_value_format: jpy_1 {  value_format: \"\\¥#,##0.0\"}# for testaccess_grant: can_view_explores_for_tests {  user_attribute: view_explores_for_tests  allowed_values: [\"yes\"]}必要な定義は connection と include だけです。include 対象を全ての .explore.lkml と、このモデルに関連するテスト（tests/feedmatic/ 以下全ての .test.lkml）だけにしていることがポイントです。つまり .model.lkml は .explore.lkml と自分の .test.lkml しか知りません。あとは蛇足で、named_value_format と、前回紹介したテストに必要な access_grant だけです。explores/1 つの explore を 1 つのファイルに定義しています。explores/explore1.explore.lkml はこのように書いています。.explore.lkml は .view.lkml しか知りません。include: \"/views/**/*.view\"explore: explore1 {  # ...}紆余曲折あり、explores/corp/name1.explore.lkml のような取引先ごとの explore もあります。基本となる explores/corp/base.explore.lkml はこのような定義です。ファイル名と explore 名を変えていることがポイントです。Ruby の慣習を参考にしました。explore: corp_base {  extension: required  # ...}corp_base explore を継承する、各取引先の explore はこのような定義です。include: \"./base.explore\"include: \"/views/**/*.view\"explore: corp_name1 {  extends: [corp_base]  # ...}views/view も explore と同様に、1 view 1 ファイルに定義しています。views/view1.view.lkml です。.view.lkml は .model.lkml, .explore.lkml, .test.lkml の誰も知りません。view: view1 {  # ...}取引先ごとの view も同じです。views/corp/base.view.lkml はこんな感じで、view: corp_base {  extension: required  # ...}継承先の views/corp/name1.view.lkml はこんな感じです。include: \"./base.view\"view: corp_name1 {  extends: [corp_base]  # ...}tests/テストはかなり書いており、2021-12-13 現在、184 もあります。ほぼ explore 単位でファイル分割しています。分割することで、ファイル単位のテストが可能になっています。こちらのベストプラクティスに従っています。テスト対象はこんな感じです。(1) LookML で特別な実装をしていて、壊れても気づくのが難しそうな実装(2) primary_key が重複していないか？ null になっていないか？を全ての view に対して(2) は前回詳しく書きました。実行に時間がかかることが悩みで以前こんな Topic を作りましたが、反応ゼロでした。みなさん課題ではないのかしら？💦primary_key は壊れた時に気づくのが難しく、LookML 開発者が私だけということもあるため、機械的に全ての primary_key をテスト出来るようにしています。ただ、全テストは結構時間がかかるので、日に 1 回くらいの頻度で手動実行しています。CI したい...。manifest.lkmlディレクトリ構造とは関係ありませんが、manifest.lkml についても触れておきましょう。bigquery/ の項で書いたとおり、テーブル定義に破壊的な変更を加える時は dataset_v2 のように Dataset 名にゆるふわバージョンを付けています。つまり割とカジュアルに Dataset 名が変わります。そのため、このように manifest.lkml で全ての Dataset 名を定義しています3。Dataset 名は複数箇所で使われ得るためです。constant: table_name1  { value: \"`table1_v2.gsheet`\" }constant: table_name2  { value: \"`table2.view`\" }利用例です。sql_table_name: @{table_name1} ;;まとめ現在 LookML 開発で使っているディレクトリ構造を紹介しました。中規模くらいまでの LookML プロジェクトには使える実感があります。ただ、最近はファイル数が多くなってきて、.view.lkml を追加した時に変更する .explore.lkml と .test.lkml の距離が遠く、実装しづらい課題があります。Refinements を使えば解決できるのだろうか、もっと再利用性のあるコードにしたいなど、悩みは尽きないです。こちらの記事は読んで手も動かしたのですが、巨大なファイルを分割する、Blocks のようなライブラリをカスタマイズする（？）、以外の使い方を見いだせていません。皆さんのディレクトリ構造も是非教えて下さい！2021-12-29 追記What is the looker recommended folder structure for LookML development ? | Looker CommunityLooker Community にもお悩みの方がいらっしゃいました。返信している Dawid さんはよくお見かけする方で、かなりの熟練者だと思います。そんな彼も、今回私が書いた記事のような物理的な構造が良いのか、論理的な構造が良いのか、未だに試行錯誤しているようです。始めは物理的なディレクトリ構造から始めて、徐々に変化しながら論理的な構造に近づくのかもしれません。その頃にはステージに応じたベストプラクティスが出ていると良いですね。正確に書くと manifest.lkml や .strings.json などもありますが、一旦考えなくて良いと思います。↩Funnel.io を使っています。↩1 行で書いているのはソートしやすくするためです。↩","link":"https://developer.feedforce.jp/entry/2021/12/13/110000","isoDate":"2021-12-13T02:00:00.000Z","dateMiliSeconds":1639360800000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"『論理が伝わる　世界標準の「書く技術」』を読んだ","content":"職場の同僚が勧めていたので遅ればせながら読みました。私が 20 年近くかけてたどり着いた技術（未だに不完全です）を、この本で習得出来る人が羨ましいです。仕事で少しでも文章を書く人全てにオススメします。ブログを書く人にもオススメできます。反対に、物語を書くための技術ではありません。欧米では論理的な文章はパラグラフを使って書くそうです。パラグラフで書けば各パラグラフの先頭文をつまみ食いする、流し読みが出来ます。副次効果として、速読出来る文章になります。もちろんじっくり読むことも出来ます。論理的な文章は物語などと違って、関係者以外は流し読みしたいことが多いですからね。特筆すべきことは、この本自体がパラグラフで書かれていることです。流し読みできます。しました。パラグラフを適切に使っていれば、文字どおり見た目が良くなると感じてきました。良いメールやブログを書けた時は、見た目に惚れ惚れして何度も眺めたものです。社内の日報や手順書、インシデントレポートなどの文書に目を向けると、なんでも箇条書きにされていることが多い印象です。関係性がないものが羅列されており、すごくネストしていることもあります。パラグラフで書けば良いのにと、よく思ってきましたが、今まで説得するすべがありませんでした。これからは「この本読んで」で良さそうです。私もこれから意識的にこの本の技術を使います。プログラミングにも通じそうです。悪いプログラムは全部読まないと理解できませんが、良いプログラムは先頭の一文（interface）を読めば何となく理解できます。同じ著者のプレゼン版もあり、Kindle 版は 330 円割引だったので積みました。いつか読もう。あかん...。","contentSnippet":"職場の同僚が勧めていたので遅ればせながら読みました。私が 20 年近くかけてたどり着いた技術（未だに不完全です）を、この本で習得出来る人が羨ましいです。仕事で少しでも文章を書く人全てにオススメします。ブログを書く人にもオススメできます。反対に、物語を書くための技術ではありません。欧米では論理的な文章はパラグラフを使って書くそうです。パラグラフで書けば各パラグラフの先頭文をつまみ食いする、流し読みが出来ます。副次効果として、速読出来る文章になります。もちろんじっくり読むことも出来ます。論理的な文章は物語などと違って、関係者以外は流し読みしたいことが多いですからね。特筆すべきことは、この本自体がパラグラフで書かれていることです。流し読みできます。しました。パラグラフを適切に使っていれば、文字どおり見た目が良くなると感じてきました。良いメールやブログを書けた時は、見た目に惚れ惚れして何度も眺めたものです。社内の日報や手順書、インシデントレポートなどの文書に目を向けると、なんでも箇条書きにされていることが多い印象です。関係性がないものが羅列されており、すごくネストしていることもあります。パラグラフで書けば良いのにと、よく思ってきましたが、今まで説得するすべがありませんでした。これからは「この本読んで」で良さそうです。私もこれから意識的にこの本の技術を使います。プログラミングにも通じそうです。悪いプログラムは全部読まないと理解できませんが、良いプログラムは先頭の一文（interface）を読めば何となく理解できます。同じ著者のプレゼン版もあり、Kindle 版は 330 円割引だったので積みました。いつか読もう。あかん...。","link":"https://masutaka.net/chalow/2021-11-29-1.html","isoDate":"2021-11-29T14:59:59.000Z","dateMiliSeconds":1638197999000,"authorName":"masutaka"},{"title":"サービス側にメールアドレスを公開しない方法を調べた（Firefox Relay や 1Password + Fastmail のお話）","content":"[2021-08-07-1] にデフォルトブラウザを Firefox に変えて、3 ヶ月くらい続いている。昔と違って、基本的な使い勝手や見た目は Chrome と違いがない。当たり前だけど Chrome と比べて良い点も悪い点もある。総合的に割と良い選択をしたと思っている。※ 変化できないことやロックインされることを、最近極端に恐れるようになった事情あり。なにかの通知で Firefox Monitor から、自分のメールアドレスやパスワードの流出を確認できることを知った。1Password でも出来るやつね。その Firefox Monitor 経由で Firefox Relay も知った。リリース当時のニュースは見ていたと思うので、「思い出した」が正確だと思うけど。無料でアカウント作成時に使える捨てメアドを自動生成して本来のメールアドレスを守る「Firefox Relay」レビュー - GIGAZINEということで、せっかくなので軽く調べてみた。流れで、類似サービスである 1Password+Fastmail や Apple のやつも。Firefox Relayhttps://relay.firefox.com無料だと 5 つまでランダムなメールアドレスを作れる。日曜日はそれ以上作れなかったので、ベータリリースから 1 年以上経ってまだ正式リリースされてないんだ？と改めてログインして確認したら、Premium⁩ プランが現れていた・・・！[Firefox Relay Premium]PayPal 払いの $0.99⁩/month。本格的に使うとなるとロックインされるのは確か。さてどう判断するか。[Firefox Relay Premium Amount]メールエイリアスを 5 つ作ったから Premium プランが現れたのか、ログイン後数日経ったから現れたのか。どっちだろう？オフィシャルで Add-on があるので、割と簡単に作れそう。Firefox Relay – 🦊 Firefox (ja) 向け拡張機能を入手追記(2021-11-18):なんとびっくり！このタイミングでの正式リリースでした。メールエイリアスのドメインも relay.firefox.com から mozmail.com に変わってた。Firefox上でサービス登録用の捨てメアドを無限に自動生成して管理してくれる「Firefox Relay Premium」が登場 - GIGAZINE1Password + Fastmailhttps://1password.com/jp/fastmail/1Password でも同じことが出来る。正確には、1Password と提携した Fastmail でだけどね。1Password ユーザーは無料かと思いきや、料金が発生する（Fastmail Pricing）。$3/month, $5/month, $9/month のプランがある。最初の１年間は 25% OFF らしい。セキュリティ関係のサービスだから、安さを重視してはいけないとは思うけど、ロックインされるサービスなのでいろいろ悩ましい。サブスク地獄...。Apple の「メールを非公開」「メールを非公開」とは？ - Apple サポート (日本)Apple ユーザーならこれだよね。ただしこれも iCloud のサブスクリプションが必要。最低 ¥130/month私はつい最近まで Apple ユーザーだったから分かるけど、ガジェットでロックインされまくって、各種サービスのログインまで Apple にロックインされるのは、なかなかつらいものがある。※ 個人の感想です。自前で頑張るAmazon SES と自ドメインとか使って、サービスごとに異なるメールアドレスを発行する方法もあるにはある。よほどのモチベーションがないと無理だなー。自分のオペミスや AWS のインシデント等で使えなくリスクはあるし、止めたくなった時に、各サービスのメールアドレスを変更しなおすのも面倒。ちなみに hoge+aaa@gmail.com とかだと、メールアドレスがどこで流出したかはワンチャン分かるけど、自分のメールアドレス自体は隠せない。関連記事: Gmailでメアドが無限に増殖できるワザの名前と起源について - in between days追記(2021-11-17):会社の同僚から、さくらのメール専用プランを教えてもらいました。自前で頑張るよりは良いかもしれません。87円/monthhttps://rs.sakura.ad.jp/mail/追記(2021-12-05):Firefox Relay のバグチケットはこちら。日本ではまだ Premium プランに出来ないし、使えないサービス多いし、まだ全然実用的でない。550 5.7.1 TLS required by recipient · Issue #757 · mozilla/fx-private-relay","contentSnippet":"[2021-08-07-1] にデフォルトブラウザを Firefox に変えて、3 ヶ月くらい続いている。昔と違って、基本的な使い勝手や見た目は Chrome と違いがない。当たり前だけど Chrome と比べて良い点も悪い点もある。総合的に割と良い選択をしたと思っている。※ 変化できないことやロックインされることを、最近極端に恐れるようになった事情あり。なにかの通知で Firefox Monitor から、自分のメールアドレスやパスワードの流出を確認できることを知った。1Password でも出来るやつね。その Firefox Monitor 経由で Firefox Relay も知った。リリース当時のニュースは見ていたと思うので、「思い出した」が正確だと思うけど。無料でアカウント作成時に使える捨てメアドを自動生成して本来のメールアドレスを守る「Firefox Relay」レビュー - GIGAZINEということで、せっかくなので軽く調べてみた。流れで、類似サービスである 1Password+Fastmail や Apple のやつも。Firefox Relayhttps://relay.firefox.com無料だと 5 つまでランダムなメールアドレスを作れる。日曜日はそれ以上作れなかったので、ベータリリースから 1 年以上経ってまだ正式リリースされてないんだ？と改めてログインして確認したら、Premium⁩ プランが現れていた・・・！[Firefox Relay Premium]PayPal 払いの $0.99⁩/month。本格的に使うとなるとロックインされるのは確か。さてどう判断するか。[Firefox Relay Premium Amount]メールエイリアスを 5 つ作ったから Premium プランが現れたのか、ログイン後数日経ったから現れたのか。どっちだろう？オフィシャルで Add-on があるので、割と簡単に作れそう。Firefox Relay – 🦊 Firefox (ja) 向け拡張機能を入手追記(2021-11-18):なんとびっくり！このタイミングでの正式リリースでした。メールエイリアスのドメインも relay.firefox.com から mozmail.com に変わってた。Firefox上でサービス登録用の捨てメアドを無限に自動生成して管理してくれる「Firefox Relay Premium」が登場 - GIGAZINE1Password + Fastmailhttps://1password.com/jp/fastmail/1Password でも同じことが出来る。正確には、1Password と提携した Fastmail でだけどね。1Password ユーザーは無料かと思いきや、料金が発生する（Fastmail Pricing）。$3/month, $5/month, $9/month のプランがある。最初の１年間は 25% OFF らしい。セキュリティ関係のサービスだから、安さを重視してはいけないとは思うけど、ロックインされるサービスなのでいろいろ悩ましい。サブスク地獄...。Apple の「メールを非公開」「メールを非公開」とは？ - Apple サポート (日本)Apple ユーザーならこれだよね。ただしこれも iCloud のサブスクリプションが必要。最低 ¥130/month私はつい最近まで Apple ユーザーだったから分かるけど、ガジェットでロックインされまくって、各種サービスのログインまで Apple にロックインされるのは、なかなかつらいものがある。※ 個人の感想です。自前で頑張るAmazon SES と自ドメインとか使って、サービスごとに異なるメールアドレスを発行する方法もあるにはある。よほどのモチベーションがないと無理だなー。自分のオペミスや AWS のインシデント等で使えなくリスクはあるし、止めたくなった時に、各サービスのメールアドレスを変更しなおすのも面倒。ちなみに hoge+aaa@gmail.com とかだと、メールアドレスがどこで流出したかはワンチャン分かるけど、自分のメールアドレス自体は隠せない。関連記事: Gmailでメアドが無限に増殖できるワザの名前と起源について - in between days追記(2021-11-17):会社の同僚から、さくらのメール専用プランを教えてもらいました。自前で頑張るよりは良いかもしれません。87円/monthhttps://rs.sakura.ad.jp/mail/追記(2021-12-05):Firefox Relay のバグチケットはこちら。日本ではまだ Premium プランに出来ないし、使えないサービス多いし、まだ全然実用的でない。550 5.7.1 TLS required by recipient · Issue #757 · mozilla/fx-private-relay","link":"https://masutaka.net/chalow/2021-11-17-1.html","isoDate":"2021-11-17T14:59:59.000Z","dateMiliSeconds":1637161199000,"authorName":"masutaka"},{"title":"ニチレイフーズダイレクトが自分に合うかも","content":"ニチレイフーズダイレクトが良い感じです。loading...loading...loading...サービスを知ったのはこのサイトです。ひとり暮らしの僕が「宅食＆食材宅配サービス」を15個試したら、自炊の“苦手度”が下がった一食あたり 700 円ちょっと。全体的に油控えめなのか、薄味なのか、自分に合います。容器が薄いので冷凍庫を有効に使えるのも良い感じです。うちの中型冷蔵庫だと 8 食は余裕で入りました。今だけなのか、500 円クーポンが毎回入っています。まあ私は飲食系に割引はあまり求めないですけどね。ワンショットでの注文も、定期での注文も対応しています。そろそろ定期にしようかな。なぜ使い始めたのかこの前に nosh を２ヶ月くらい試していました。悪くはなかったのですが、微妙に胃もたれするのと、カロリーを抑えるためか甘味料を使っていたので、代わりのサービスを探していました。甘味料はスクラロースやアスパルテームがよく使われていました。私はそこまで抵抗はないのですが、今は特にカロリーを抑える理由はないので、nosh を選択する理由もないのかなと。お菓子に甘味料はまだ分かるけど、食事に甘味料はなあ？（それは抵抗があると言うのでは？）あと、容器が微妙に大きくて冷凍庫に 6 食入れるのがやっとでした。そもそもなぜ nosh を使い始めたのかというと、自炊に飽きたからですね。最近は野菜炒めかトマトソースしか作っていませんでした。(^^;3 年くらい前は意識高い系（）だったので、マッスルデリも少し使ってました。温めがうまくいかず、ご飯はパリパリ、おかずは冷たいってことがよくあったので止めた記憶です。一食あたり 1200 円と高かったので長く続けるつもりもなかったですけどね。残念なところサイトが微妙に残念です。サイトのログインセッションが 1 日くらいしかもたないかも？ EC サイトでこれは珍しい。不便なだけでは？あと、1Password でログイン情報を入力するとパスワードが倍になる（abc だったら abcabc）っぽいです。変なところが残念です。サインアップの時のパスワード再入力がコピペ禁止だったかもしれないです。こういうのは若干○意が湧きますね。(^^)","contentSnippet":"ニチレイフーズダイレクトが良い感じです。loading...loading...loading...サービスを知ったのはこのサイトです。ひとり暮らしの僕が「宅食＆食材宅配サービス」を15個試したら、自炊の“苦手度”が下がった一食あたり 700 円ちょっと。全体的に油控えめなのか、薄味なのか、自分に合います。容器が薄いので冷凍庫を有効に使えるのも良い感じです。うちの中型冷蔵庫だと 8 食は余裕で入りました。今だけなのか、500 円クーポンが毎回入っています。まあ私は飲食系に割引はあまり求めないですけどね。ワンショットでの注文も、定期での注文も対応しています。そろそろ定期にしようかな。なぜ使い始めたのかこの前に nosh を２ヶ月くらい試していました。悪くはなかったのですが、微妙に胃もたれするのと、カロリーを抑えるためか甘味料を使っていたので、代わりのサービスを探していました。甘味料はスクラロースやアスパルテームがよく使われていました。私はそこまで抵抗はないのですが、今は特にカロリーを抑える理由はないので、nosh を選択する理由もないのかなと。お菓子に甘味料はまだ分かるけど、食事に甘味料はなあ？（それは抵抗があると言うのでは？）あと、容器が微妙に大きくて冷凍庫に 6 食入れるのがやっとでした。そもそもなぜ nosh を使い始めたのかというと、自炊に飽きたからですね。最近は野菜炒めかトマトソースしか作っていませんでした。(^^;3 年くらい前は意識高い系（）だったので、マッスルデリも少し使ってました。温めがうまくいかず、ご飯はパリパリ、おかずは冷たいってことがよくあったので止めた記憶です。一食あたり 1200 円と高かったので長く続けるつもりもなかったですけどね。残念なところサイトが微妙に残念です。サイトのログインセッションが 1 日くらいしかもたないかも？ EC サイトでこれは珍しい。不便なだけでは？あと、1Password でログイン情報を入力するとパスワードが倍になる（abc だったら abcabc）っぽいです。変なところが残念です。サインアップの時のパスワード再入力がコピペ禁止だったかもしれないです。こういうのは若干○意が湧きますね。(^^)","link":"https://masutaka.net/chalow/2021-10-27-1.html","isoDate":"2021-10-27T14:59:59.000Z","dateMiliSeconds":1635346799000,"authorName":"masutaka"},{"title":"RIZIN LANDMARK vol.1 の時間帯に発生した U-NEXT の障害体験メモ #RIZIN_LANDMARK #RIZIN_LANDMARK01","content":"RIZIN 初の、配信に特化した格闘技イベント RIZIN LANDMARK vol.1 が 2021-10-02（土）19:00 から開催されるはずだった。ちなみに 4 試合で ¥3,800 と、オトクな料金設定ではない。その時間に合わせて 18:45 頃に PC ブラウザで https://video.unext.jp/ にアクセスしたら、しばらく待たされた後 502 Bad Gateway が返ってきた。[502 Bad Gateway]U-NEXT 公式アカウントからはお知らせがあった。https://video.unext.jp/ 自体にアクセス出来ないため、サイト上でのお知らせは確認できず。loading...しばらく待ってもアクセスできなかった。スマホアプリならアクセスできるとの情報を目にしたため Android 版をダウンロードしたところ、エラーにはならず静止画を見られた。幸い Chromecast を持っていたため、テレビにキャストして大画面には出来た。PC ブラウザだと相変わらず 502 Bad Gateway が発生。その後 404 Not Found のケースや、CloudFront が返す nginx らしきエラー文言も確認できた。スマホアプリはしばらくお待ちくださいメッセージと BGM が流れるのみ。自分の経験上、Chromecast でスマホアプリをテレビにキャストするより、PC をテレビに HDMI 接続するほうが安定性が高いので、見られはしたが不安要素はあった。19:45 にスタジオの映像が繋がり、RIZIN CEO 榊原さんからお詫びとともに 20:00 に開催するとのお知らせがあった。実際開催され、21:30 頃の終了まで、特に問題なく視聴することが出来た。ただし、その間 PC ブラウザはエラーになり続けたようだ。途中でブラウザのタブを閉じたため、復旧時間は分からない。試合の合間に U-NEXT の CM が入ったのは視聴者体験として最悪だった。それも RIZIN に合わせたわけではない普通の U-NEXT の CM。もちろんその時はまだ障害発生中。いやー、最悪だったw参考: 当日の私のツイート勝手に想像したことPC ブラウザ経由のアクセスについて、RIZIN LANDMARK 視聴者だけでなく、U-NEXT 視聴者全体に影響が出ていたと思われる。PC ブラウザはエラーになり、スマホアプリは問題なかったことと、502 Bad Gateway という事象から、両者のバックエンドサーバー群は別だったと考えられる。ちなみに成人向けの https://video.hnext.jp/ に PC ブラウザでアクセスしたらこちらも問題なかった。こちらも別だと考えられる。PC ブラウザは 20:00 以降もエラーが解消されなかった。バックエンドサーバーをスケールアウトするのにそこまで時間がかかるものだろうか？video.unext.jp は CloudFront の IP アドレスと紐付いていた。https://video.unext.jp から適当に見つけた in.unext.jp は AWS ELB の IP アドレスだった。$ dig +short video.unext.jpd1p8rc5i9ac9qt.cloudfront.net.13.225.159.6813.225.159.10013.225.159.5613.225.159.96$ dig +short in.unext.jptd-bridge-43693737.ap-northeast-1.elb.amazonaws.com.35.74.87.6254.65.156.10152.193.64.209勝手に想像するに、バックエンドサーバーは素の EC2 インスタンスで、運用の事情でスケールアウトに時間がかかったのかな。ECS を使っていたにしても、EC2 インスタンスの台数の上限に達してしまったのかもしれない。AWS のサポートに連絡するも、すぐには上限を開放できなかったとか、もしくは土曜日ということもあり、障害発生時に当番エンジニアに連絡がつかなかったとか。格闘技イベントならではの事情榊原さんの総括によると、格闘技イベントは間際の購入が多いそう。RIZIN Live は前日までの購入だと 500 円安いけど、U-NEXT は何もない。視聴者としては、今回早く買うインセンティブはなかった。ちなみに私は前日に買った。計画的奴。それもあって調達すべきサーバーの台数を見誤り、今回の障害が発生したのだと思う。U-NEXT では今まで音楽イベントのライブ配信はあったそうだが、外でも配信をしていたそう（噂レベル）。格闘技の独占配信ライブは初めてだったようなので完全な見積もりミス。初めての時は、見積もりの 2 倍くらいにはすると思うのですがね。ちなみにライブ視聴数は公式にはお知らせはないが 10 万人には行かないそう。RIZIN としては「U-NEXT 独占配信」が仇となった。まとめ2021-10-02（土）18:30 頃から 21:00 過ぎまで（？）に U-NEXT を PC ブラウザで見られない障害が発生した。スマホアプリでは見られた。同時間帯は RIZIN LANDMARK vol.1 のライブ配信のまっただ中。格闘技イベントという性質上、ネット上では不満が爆発した。選手もいつまでか分からない中待たされて、大変だったと思う。RIZIN は U-NEXT とのタッグを今後も続けるのであれば、早く買えば少し安くなるなど、見積もりの制度を上げる施策は必須。加えて、試合の高揚感をぶち壊すような CM を流さないことはもちろん、U-NEXT 上でも RIZIN のユーザー体験が出来るような、コミュニケーションのすり合わせも。配信プラットフォームを冗長化することも必要かもしれないが、アライアンスという意味では難しいのかな？そもそも今後、朝倉海選手の海外転向、那須川選手のボクシング転向など、スター選手が減る中で、配信特化型イベントを続けられるかという問題はあると思う。その後の動き2021/10/04 に U-NEXT から謝罪のお知らせがありました。格闘技イベント『RIZIN LANDMARK』の配信につきまして - お知らせ｜U-NEXTヘルプセンター2021/12/24 に 500 ポイントのギフトコード付与のお知らせメールが来ました。2022/02/25 時点でまだ決着が付いていないそう。loading...","contentSnippet":"RIZIN 初の、配信に特化した格闘技イベント RIZIN LANDMARK vol.1 が 2021-10-02（土）19:00 から開催されるはずだった。ちなみに 4 試合で ¥3,800 と、オトクな料金設定ではない。その時間に合わせて 18:45 頃に PC ブラウザで https://video.unext.jp/ にアクセスしたら、しばらく待たされた後 502 Bad Gateway が返ってきた。[502 Bad Gateway]U-NEXT 公式アカウントからはお知らせがあった。https://video.unext.jp/ 自体にアクセス出来ないため、サイト上でのお知らせは確認できず。loading...しばらく待ってもアクセスできなかった。スマホアプリならアクセスできるとの情報を目にしたため Android 版をダウンロードしたところ、エラーにはならず静止画を見られた。幸い Chromecast を持っていたため、テレビにキャストして大画面には出来た。PC ブラウザだと相変わらず 502 Bad Gateway が発生。その後 404 Not Found のケースや、CloudFront が返す nginx らしきエラー文言も確認できた。スマホアプリはしばらくお待ちくださいメッセージと BGM が流れるのみ。自分の経験上、Chromecast でスマホアプリをテレビにキャストするより、PC をテレビに HDMI 接続するほうが安定性が高いので、見られはしたが不安要素はあった。19:45 にスタジオの映像が繋がり、RIZIN CEO 榊原さんからお詫びとともに 20:00 に開催するとのお知らせがあった。実際開催され、21:30 頃の終了まで、特に問題なく視聴することが出来た。ただし、その間 PC ブラウザはエラーになり続けたようだ。途中でブラウザのタブを閉じたため、復旧時間は分からない。試合の合間に U-NEXT の CM が入ったのは視聴者体験として最悪だった。それも RIZIN に合わせたわけではない普通の U-NEXT の CM。もちろんその時はまだ障害発生中。いやー、最悪だったw参考: 当日の私のツイート勝手に想像したことPC ブラウザ経由のアクセスについて、RIZIN LANDMARK 視聴者だけでなく、U-NEXT 視聴者全体に影響が出ていたと思われる。PC ブラウザはエラーになり、スマホアプリは問題なかったことと、502 Bad Gateway という事象から、両者のバックエンドサーバー群は別だったと考えられる。ちなみに成人向けの https://video.hnext.jp/ に PC ブラウザでアクセスしたらこちらも問題なかった。こちらも別だと考えられる。PC ブラウザは 20:00 以降もエラーが解消されなかった。バックエンドサーバーをスケールアウトするのにそこまで時間がかかるものだろうか？video.unext.jp は CloudFront の IP アドレスと紐付いていた。https://video.unext.jp から適当に見つけた in.unext.jp は AWS ELB の IP アドレスだった。$ dig +short video.unext.jpd1p8rc5i9ac9qt.cloudfront.net.13.225.159.6813.225.159.10013.225.159.5613.225.159.96$ dig +short in.unext.jptd-bridge-43693737.ap-northeast-1.elb.amazonaws.com.35.74.87.6254.65.156.10152.193.64.209勝手に想像するに、バックエンドサーバーは素の EC2 インスタンスで、運用の事情でスケールアウトに時間がかかったのかな。ECS を使っていたにしても、EC2 インスタンスの台数の上限に達してしまったのかもしれない。AWS のサポートに連絡するも、すぐには上限を開放できなかったとか、もしくは土曜日ということもあり、障害発生時に当番エンジニアに連絡がつかなかったとか。格闘技イベントならではの事情榊原さんの総括によると、格闘技イベントは間際の購入が多いそう。RIZIN Live は前日までの購入だと 500 円安いけど、U-NEXT は何もない。視聴者としては、今回早く買うインセンティブはなかった。ちなみに私は前日に買った。計画的奴。それもあって調達すべきサーバーの台数を見誤り、今回の障害が発生したのだと思う。U-NEXT では今まで音楽イベントのライブ配信はあったそうだが、外でも配信をしていたそう（噂レベル）。格闘技の独占配信ライブは初めてだったようなので完全な見積もりミス。初めての時は、見積もりの 2 倍くらいにはすると思うのですがね。ちなみにライブ視聴数は公式にはお知らせはないが 10 万人には行かないそう。RIZIN としては「U-NEXT 独占配信」が仇となった。まとめ2021-10-02（土）18:30 頃から 21:00 過ぎまで（？）に U-NEXT を PC ブラウザで見られない障害が発生した。スマホアプリでは見られた。同時間帯は RIZIN LANDMARK vol.1 のライブ配信のまっただ中。格闘技イベントという性質上、ネット上では不満が爆発した。選手もいつまでか分からない中待たされて、大変だったと思う。RIZIN は U-NEXT とのタッグを今後も続けるのであれば、早く買えば少し安くなるなど、見積もりの制度を上げる施策は必須。加えて、試合の高揚感をぶち壊すような CM を流さないことはもちろん、U-NEXT 上でも RIZIN のユーザー体験が出来るような、コミュニケーションのすり合わせも。配信プラットフォームを冗長化することも必要かもしれないが、アライアンスという意味では難しいのかな？そもそも今後、朝倉海選手の海外転向、那須川選手のボクシング転向など、スター選手が減る中で、配信特化型イベントを続けられるかという問題はあると思う。その後の動き2021/10/04 に U-NEXT から謝罪のお知らせがありました。格闘技イベント『RIZIN LANDMARK』の配信につきまして - お知らせ｜U-NEXTヘルプセンター2021/12/24 に 500 ポイントのギフトコード付与のお知らせメールが来ました。2022/02/25 時点でまだ決着が付いていないそう。loading...","link":"https://masutaka.net/chalow/2021-10-03-1.html","isoDate":"2021-10-03T14:59:59.000Z","dateMiliSeconds":1633273199000,"authorName":"masutaka"},{"title":"Terraform を使わずに Route 53 の DNS レコードを管理する方法を調べてみた","content":"この１年半はインフラエンジニアっぽい仕事から離れて、LookML 開発者として仕事をしています。自分としてはジョブチェンジで、モチベーションはめっちゃ高いです。うぉー！🔥LookML 開発に出来るだけ専念できるように配慮して頂いたり、自分でもそう心がけていますが、それでも DNS レコードの登録依頼や、その他諸々の相談がちょいちょいあります。DNS レコードは Route 53 で管理しています。言われるがままに登録していけば悩みはないのですが、何のために登録するのか？や、登録されているこのレコードは何だ？とか考え始めると地味に悩ましいものがあります。今の仕事では Terraform は使っていないし、このためだけに Terraform を導入するのはオーバー過ぎます。Terraform を導入したらアップデートし続けない選択肢はありませんが、変なエラーでハマって何時間も浪費することがあります。今の仕事の性質上、それは絶対に避けたいので、Terraform 以外で Route 53 の DNS レコードを管理する方法を調べてみました。SAM で管理できるか？つまり CloudFormation 管理下に置くか？ということです。Terraform ではツールのアップデートに追随する必要がありますが、SAM なら serverless-application-model のバージョンに追随すれば良いだけです。最新は 2016/10/31 なので、あまり考えなくて良さそうです。結論としては、止めたほうが良いと思いました。良くも悪くも CloudFormation 管理下に置かれるので、Route 53 Console 上で気軽に変更するとコードと乖離してしまいます。そのため常に SAM で変更する必要があります。もっとカジュアルに管理したいのです。ちなみにこんな template.yaml で DNS レコードを作れます。ただ更新がうまく出来なかった。それ以上は調べてない...。AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: Managed by AWS SAMResources: Hoge: Type: AWS::Route53::RecordSet Properties: HostedZoneId: xxxxxxxxxxxxxx Name: hoge.masutaka.net. Type: TXT TTL: 300 ResourceRecords: - '\"abcdefgxyz\"'AWS CLI で管理できるか？そもそもエネルギーを注ぐところではないので、新しいツールは増やしたくないところ。そういう意味では AWS CLI でどこまで出来るかは興味がありました。AWS CLI を使った DNS レコードの設定方法はクラスメソッドさんのブログ記事が分かりやすいです。AWS CLI で Route53 のホストゾーンのレコードを操作してみた｜DevelopersIO作成したいレコード設定を書いて、それに対して CREATE/DELETE/UPSERT をするイメージです。UPSERT は UPDATE+INSERT の造語です。なければ作るし、あれば更新する。こんな Makefile があれば管理できるか検討しました。latest-update.json に変更したい設定を書き、route53-records.json に現在のレコードを全部記録します。AWS := awsIGNORE_EXIT_STATUS := || :JSON_FILE := latest-update.jsonROUTE53_RECORDS := route53-records.jsonWAIT_SEC := 5ZONE_ID := xxxxxxxxxxxxxx.PHONY: listlist:@$(AWS) route53 list-resource-record-sets --hosted-zone-id $(ZONE_ID).PHONY: applyapply:@$(AWS) route53 change-resource-record-sets --hosted-zone-id $(ZONE_ID) --change-batch file://$(JSON_FILE) $(IGNORE_EXIT_STATUS)@echo \"Wait $(WAIT_SEC) seconds...\"@sleep $(WAIT_SEC)@make --no-print-directory list &gt; $(ROUTE53_RECORDS)結論としては、変更は出来るけど管理をするのは難しいと思いました。運用できなくはないのですが、管理のための管理になる気がしました。特に DELETE ではレコード名以外に TTL など現在の設定を全て指定する必要があります。面倒です。せめて各レコードのコメントを route53-records.json に残せれば良いのですが、json にはコメントを書けないので、コード管理する旨味がありません。Roadworker で管理できるか？最後に Roadworker を検討しました。Roadworker は Ruby 製のツールです。\"$ roadwork -e -o Routefile\" で Routefile ファイルにエクスポートして、以後は Routefile を変更し、\"$ roadwork -a\" で Route 53 に適用します。Routefile は Ruby の DSL なので、各レコードにコメントも残せます。Route 53 Console 上で変更するとコードと乖離するのは SAM と同じですが、状態もコードも Routefile に集約されるので、そこまで気にしなくて良いかもしれません。※ SAM は状態が CloudFormation に、コードは template.yaml に分かれるという理解。問題は Routefile 自体にはバージョンがないため、Roadworker 自体のバージョンを気にする必要があることでしょうか。Gemfile で Roadworker のバージョンを管理した方が良いと思います。でも今回のコンテキストではやりたくありません。まあ、気にせずグローバルにインストールすれば良いのですがね。自分が気にし過ぎなのか...。結論DNS レコード一覧の esa 記事作って、ゆるふわで把握することにします。（なんだそりゃ今回の課題を掘り下げると、DNS レコードにメモを残したいだけなんですよね。特に TXT レコードはよく分からないものが残りがちで、消して良いのか判断が難しいです。今回の中では Roadworker が及第点ではありますが、Routefile のための GitHub リポジトリが増える、新たなツールが登場するなど、デメリットがメリットを地味に上回り、オーバーだと判断しました。Route 53 の各レコードに「メモ」を書きたいだけだった。😭","contentSnippet":"この１年半はインフラエンジニアっぽい仕事から離れて、LookML 開発者として仕事をしています。自分としてはジョブチェンジで、モチベーションはめっちゃ高いです。うぉー！🔥LookML 開発に出来るだけ専念できるように配慮して頂いたり、自分でもそう心がけていますが、それでも DNS レコードの登録依頼や、その他諸々の相談がちょいちょいあります。DNS レコードは Route 53 で管理しています。言われるがままに登録していけば悩みはないのですが、何のために登録するのか？や、登録されているこのレコードは何だ？とか考え始めると地味に悩ましいものがあります。今の仕事では Terraform は使っていないし、このためだけに Terraform を導入するのはオーバー過ぎます。Terraform を導入したらアップデートし続けない選択肢はありませんが、変なエラーでハマって何時間も浪費することがあります。今の仕事の性質上、それは絶対に避けたいので、Terraform 以外で Route 53 の DNS レコードを管理する方法を調べてみました。SAM で管理できるか？つまり CloudFormation 管理下に置くか？ということです。Terraform ではツールのアップデートに追随する必要がありますが、SAM なら serverless-application-model のバージョンに追随すれば良いだけです。最新は 2016/10/31 なので、あまり考えなくて良さそうです。結論としては、止めたほうが良いと思いました。良くも悪くも CloudFormation 管理下に置かれるので、Route 53 Console 上で気軽に変更するとコードと乖離してしまいます。そのため常に SAM で変更する必要があります。もっとカジュアルに管理したいのです。ちなみにこんな template.yaml で DNS レコードを作れます。ただ更新がうまく出来なかった。それ以上は調べてない...。AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: Managed by AWS SAMResources: Hoge: Type: AWS::Route53::RecordSet Properties: HostedZoneId: xxxxxxxxxxxxxx Name: hoge.masutaka.net. Type: TXT TTL: 300 ResourceRecords: - '\"abcdefgxyz\"'AWS CLI で管理できるか？そもそもエネルギーを注ぐところではないので、新しいツールは増やしたくないところ。そういう意味では AWS CLI でどこまで出来るかは興味がありました。AWS CLI を使った DNS レコードの設定方法はクラスメソッドさんのブログ記事が分かりやすいです。AWS CLI で Route53 のホストゾーンのレコードを操作してみた｜DevelopersIO作成したいレコード設定を書いて、それに対して CREATE/DELETE/UPSERT をするイメージです。UPSERT は UPDATE+INSERT の造語です。なければ作るし、あれば更新する。こんな Makefile があれば管理できるか検討しました。latest-update.json に変更したい設定を書き、route53-records.json に現在のレコードを全部記録します。AWS := awsIGNORE_EXIT_STATUS := || :JSON_FILE := latest-update.jsonROUTE53_RECORDS := route53-records.jsonWAIT_SEC := 5ZONE_ID := xxxxxxxxxxxxxx.PHONY: listlist:@$(AWS) route53 list-resource-record-sets --hosted-zone-id $(ZONE_ID).PHONY: applyapply:@$(AWS) route53 change-resource-record-sets --hosted-zone-id $(ZONE_ID) --change-batch file://$(JSON_FILE) $(IGNORE_EXIT_STATUS)@echo \"Wait $(WAIT_SEC) seconds...\"@sleep $(WAIT_SEC)@make --no-print-directory list > $(ROUTE53_RECORDS)結論としては、変更は出来るけど管理をするのは難しいと思いました。運用できなくはないのですが、管理のための管理になる気がしました。特に DELETE ではレコード名以外に TTL など現在の設定を全て指定する必要があります。面倒です。せめて各レコードのコメントを route53-records.json に残せれば良いのですが、json にはコメントを書けないので、コード管理する旨味がありません。Roadworker で管理できるか？最後に Roadworker を検討しました。Roadworker は Ruby 製のツールです。\"$ roadwork -e -o Routefile\" で Routefile ファイルにエクスポートして、以後は Routefile を変更し、\"$ roadwork -a\" で Route 53 に適用します。Routefile は Ruby の DSL なので、各レコードにコメントも残せます。Route 53 Console 上で変更するとコードと乖離するのは SAM と同じですが、状態もコードも Routefile に集約されるので、そこまで気にしなくて良いかもしれません。※ SAM は状態が CloudFormation に、コードは template.yaml に分かれるという理解。問題は Routefile 自体にはバージョンがないため、Roadworker 自体のバージョンを気にする必要があることでしょうか。Gemfile で Roadworker のバージョンを管理した方が良いと思います。でも今回のコンテキストではやりたくありません。まあ、気にせずグローバルにインストールすれば良いのですがね。自分が気にし過ぎなのか...。結論DNS レコード一覧の esa 記事作って、ゆるふわで把握することにします。（なんだそりゃ今回の課題を掘り下げると、DNS レコードにメモを残したいだけなんですよね。特に TXT レコードはよく分からないものが残りがちで、消して良いのか判断が難しいです。今回の中では Roadworker が及第点ではありますが、Routefile のための GitHub リポジトリが増える、新たなツールが登場するなど、デメリットがメリットを地味に上回り、オーバーだと判断しました。Route 53 の各レコードに「メモ」を書きたいだけだった。😭","link":"https://masutaka.net/chalow/2021-09-27-1.html","isoDate":"2021-09-27T14:59:59.000Z","dateMiliSeconds":1632754799000,"authorName":"masutaka"},{"title":"Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた","content":"<p>こんにちは、<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。\n先週はまるっと夏休みにしてました。今日からまた <a href=\"https://ja.looker.com/\">Looker</a> と戯れる日々が始まります。</p>\n\n<p>丸１年 Looker と戯れてきて最近ようやく、<strong>Join 先の view でも</strong> primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Looker-における-primary_key-の役割\">Looker における primary_key の役割</a></li>\n    <li><a href=\"#primary_key-の実装例\">primary_key の実装例</a></li>\n    <li><a href=\"#LookML-開発におけるテスト\">LookML 開発におけるテスト</a></li>\n    <li><a href=\"#Join-先の-view-は-primary_key-をテスト出来ないことがある\">Join 先の view は primary_key をテスト出来ないことがある</a></li>\n    <li><a href=\"#Join-先の-view-の-primary_key-をいい感じにテストする\">Join 先の view の primary_key をいい感じにテストする</a></li>\n    <li><a href=\"#まとめと所感\">まとめと所感</a></li>\n    <li><a href=\"#おまけ\">おまけ</a></li>\n</ul>\n\n<h2 id=\"Looker-における-primary_key-の役割\">Looker における primary_key の役割</h2>\n\n<p>Looker には <a href=\"https://help.looker.com/hc/en-us/articles/360023722974\">Symmetric Aggregates</a> という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>その Symmetric Aggregates では <a href=\"https://docs.looker.com/reference/field-params/primary_key\">primary_key</a> が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。</p>\n\n<ul>\n<li>primary_key が重複すると fanout エラーが発生することがある</li>\n<li>primary_key が null だと Measure が 0 になることがある</li>\n</ul>\n\n\n<p>このような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。</p>\n\n<h2 id=\"primary_key-の実装例\">primary_key の実装例</h2>\n\n<p>私が所属する <a href=\"https://feedmatic.net/\">Feedmatic</a> では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。</p>\n\n<p>そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>dimension: id {\n  primary_key: yes\n  type: string\n  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, &#39;&#39;)) ;;\n  hidden: yes\n}</pre>\n\n\n<p>※ <a href=\"https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%8F%E3%82%A6%E3%82%B9\">DWH</a> は BigQuery を使っています。</p>\n\n<p>これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭</p>\n\n<h2 id=\"LookML-開発におけるテスト\">LookML 開発におけるテスト</h2>\n\n<p>以上の課題を解決するために、<a href=\"https://docs.looker.com/reference/model-params/test\">test</a> パラメータが使えます。</p>\n\n<p>例えばこのような <code>parent</code> explore があったとします。Join がないのでシンプルです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: parent {\n  ...\n}\n\nview: parent {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n  }\n}</pre>\n\n\n<p>私はこのようなテストを書いて、全ての <code>parent.id</code> が null でないことと、重複しないことを保証させています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>test: parent_id_is_not_null {\n  explore_source: parent {\n    column: id {}\n    sorts: [parent.id: asc]\n    limit: 1\n  }\n  assert: id_is_not_null {\n    expression: NOT is_null(${parent.id}) ;;\n  }\n}\n\ntest: parent_id_is_unique {\n  explore_source: parent {\n    column: id {}\n    column: count {}\n    sorts: [parent.count: desc]\n    limit: 1\n  }\n  assert: id_is_unique {\n    expression: ${parent.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。</p>\n\n<h2 id=\"Join-先の-view-は-primary_key-をテスト出来ないことがある\">Join 先の view は primary_key をテスト出来ないことがある</h2>\n\n<p>さて、<code>child</code> view を Join する必要が出てきました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: parent {\n  join: child {\n    type: left_outer\n    relationship: one_to_many\n    sql_on: ... ;;\n  }\n}\n\nview: parent {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n  }\n}\n\nview: child {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n    hidden: yes\n  }\n}</pre>\n\n\n<p>同じように <code>child.id</code> のテストを書きましたが、うまくいきません。<code>is_not_null</code> はまだしも、<code>is_unique</code> がダメです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># これは OK\ntest: parent_child_id_is_not_null {\n  explore_source: parent {\n    column: id { field: child.id }\n    sorts: [child.id: asc]\n    limit: 1\n  }\n  assert: child_id_is_not_null {\n    expression: NOT is_null(${child.id}) ;;\n  }\n}\n\n# parent の count になり、テストが通らない。\ntest: parent_child_id_is_unique {\n  explore_source: parent {\n    column: id { field: child.id }\n    column: count { field: child.count }\n    sorts: [parent.count: desc]\n    limit: 1\n  }\n  assert: child_id_is_unique {\n    expression: ${child.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも <code>child</code> view の primary_key のテストをしたいだけなのに、Join は邪魔です。</p>\n\n<h2 id=\"Join-先の-view-の-primary_key-をいい感じにテストする\">Join 先の view の primary_key をいい感じにテストする</h2>\n\n<p><code>child</code> view と同じファイルに、こっそり <code>child</code> explore を定義します。<a href=\"https://docs.looker.com/ja/reference/explore-params/hidden-for-explore\">hidden</a> にして存在を消しています。さらに <a href=\"https://docs.looker.com/reference/explore-params/required_access_grants-for-explore\">required_access_grants</a> で、開発者以外の URL 直打ちによるアクセスも防いでいます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: child {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n    hidden: yes\n  }\n}\n\n# Define for test\nexplore: child {\n  hidden: yes\n  required_access_grants: [can_view_explores_for_tests]\n}</pre>\n\n\n<p><a href=\"https://docs.looker.com/reference/model-params/access_grant\">access_grant</a> である <code>can_view_explores_for_tests</code> はこのような定義です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># For tests\naccess_grant: can_view_explores_for_tests {\n  user_attribute: view_explores_for_tests\n  allowed_values: [&#34;yes&#34;]\n}</pre>\n\n\n<p><a href=\"https://docs.looker.com/admin-options/settings/user-attributes\">User attribute</a> である <code>view_explores_for_tests</code> は、今回のような「Join 先の view をテストすること」全般に使います。User Access は <code>None</code>、Default Value も <code>no</code> です。開発者用の Group を作り、その Group value を <code>yes</code> にしました。</p>\n\n<p>ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。</p>\n\n<p>あとは <code>parent</code> explore と同じようにテストを書くだけです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>test: child_id_is_not_null {\n  explore_source: child {\n    column: id {}\n    sorts: [child.id: asc]\n    limit: 1\n  }\n  assert: id_is_not_null {\n    expression: NOT is_null(${child.id}) ;;\n  }\n}\n\ntest: child_id_is_unique {\n  explore_source: child {\n    column: id {}\n    column: count {}\n    sorts: [child.count: desc]\n    limit: 1\n  }\n  assert: id_is_unique {\n    expression: ${child.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>テストは通っても、LookML validation error が発生するかもしれません。その時は <a href=\"https://docs.looker.com/ja/reference/explore-params/fields-for-explore\">fields</a> パラメータを使って、露出する field を限定すると良いでしょう。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># Define for test\nexplore: child {\n  hidden: yes\n  required_access_grants: [can_view_explores_for_tests]\n  fields: [child.id, child.count] # Avoid LookML validation error\n}</pre>\n\n\n<p>このテクニックは <a href=\"https://help.looker.com/hc/en-us/articles/360023586293-Error-Unknown-or-Inaccessible-Field\">Error: Unknown or Inaccessible Field – Looker Help Center</a> でも紹介されています。</p>\n\n<h2 id=\"まとめと所感\">まとめと所感</h2>\n\n<p>LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。</p>\n\n<p>もっと良い方法や、今回のやり方はここがマズイとかあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> にお知らせ頂けると大変うれしいです。🙏</p>\n\n<p>Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。</p>\n\n<p>Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。</p>\n\n<p>それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。</p>\n\n<h2 id=\"おまけ\">おまけ</h2>\n\n<p>今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815\" title=\"LookML Data Tests: Recommendations and Best Practices | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。</p>\n","contentSnippet":"こんにちは、id:masutaka26 です。先週はまるっと夏休みにしてました。今日からまた Looker と戯れる日々が始まります。丸１年 Looker と戯れてきて最近ようやく、Join 先の view でも primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。Looker における primary_key の役割primary_key の実装例LookML 開発におけるテストJoin 先の view は primary_key をテスト出来ないことがあるJoin 先の view の primary_key をいい感じにテストするまとめと所感おまけLooker における primary_key の役割Looker には Symmetric Aggregates という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。その Symmetric Aggregates では primary_key が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。primary_key が重複すると fanout エラーが発生することがあるprimary_key が null だと Measure が 0 になることがあるこのような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。primary_key の実装例私が所属する Feedmatic では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。dimension: id {  primary_key: yes  type: string  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, '')) ;;  hidden: yes}※ DWH は BigQuery を使っています。これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭LookML 開発におけるテスト以上の課題を解決するために、test パラメータが使えます。例えばこのような parent explore があったとします。Join がないのでシンプルです。explore: parent {  ...}view: parent {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count  }}私はこのようなテストを書いて、全ての parent.id が null でないことと、重複しないことを保証させています。test: parent_id_is_not_null {  explore_source: parent {    column: id {}    sorts: [parent.id: asc]    limit: 1  }  assert: id_is_not_null {    expression: NOT is_null(${parent.id}) ;;  }}test: parent_id_is_unique {  explore_source: parent {    column: id {}    column: count {}    sorts: [parent.count: desc]    limit: 1  }  assert: id_is_unique {    expression: ${parent.count} = 1 ;;  }}👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。Join 先の view は primary_key をテスト出来ないことがあるさて、child view を Join する必要が出てきました。explore: parent {  join: child {    type: left_outer    relationship: one_to_many    sql_on: ... ;;  }}view: parent {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count  }}view: child {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count    hidden: yes  }}同じように child.id のテストを書きましたが、うまくいきません。is_not_null はまだしも、is_unique がダメです。# これは OKtest: parent_child_id_is_not_null {  explore_source: parent {    column: id { field: child.id }    sorts: [child.id: asc]    limit: 1  }  assert: child_id_is_not_null {    expression: NOT is_null(${child.id}) ;;  }}# parent の count になり、テストが通らない。test: parent_child_id_is_unique {  explore_source: parent {    column: id { field: child.id }    column: count { field: child.count }    sorts: [parent.count: desc]    limit: 1  }  assert: child_id_is_unique {    expression: ${child.count} = 1 ;;  }}よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも child view の primary_key のテストをしたいだけなのに、Join は邪魔です。Join 先の view の primary_key をいい感じにテストするchild view と同じファイルに、こっそり child explore を定義します。hidden にして存在を消しています。さらに required_access_grants で、開発者以外の URL 直打ちによるアクセスも防いでいます。view: child {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count    hidden: yes  }}# Define for testexplore: child {  hidden: yes  required_access_grants: [can_view_explores_for_tests]}access_grant である can_view_explores_for_tests はこのような定義です。# For testsaccess_grant: can_view_explores_for_tests {  user_attribute: view_explores_for_tests  allowed_values: [\"yes\"]}User attribute である view_explores_for_tests は、今回のような「Join 先の view をテストすること」全般に使います。User Access は None、Default Value も no です。開発者用の Group を作り、その Group value を yes にしました。ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。あとは parent explore と同じようにテストを書くだけです。test: child_id_is_not_null {  explore_source: child {    column: id {}    sorts: [child.id: asc]    limit: 1  }  assert: id_is_not_null {    expression: NOT is_null(${child.id}) ;;  }}test: child_id_is_unique {  explore_source: child {    column: id {}    column: count {}    sorts: [child.count: desc]    limit: 1  }  assert: id_is_unique {    expression: ${child.count} = 1 ;;  }}テストは通っても、LookML validation error が発生するかもしれません。その時は fields パラメータを使って、露出する field を限定すると良いでしょう。# Define for testexplore: child {  hidden: yes  required_access_grants: [can_view_explores_for_tests]  fields: [child.id, child.count] # Avoid LookML validation error}このテクニックは Error: Unknown or Inaccessible Field – Looker Help Center でも紹介されています。まとめと所感LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。もっと良い方法や、今回のやり方はここがマズイとかあれば @masutaka にお知らせ頂けると大変うれしいです。🙏Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。おまけ今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。","link":"https://developer.feedforce.jp/entry/2021/08/30/150000","isoDate":"2021-08-30T06:00:00.000Z","dateMiliSeconds":1630303200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"Manjaro でハイバネート出来るようにしたメモ","content":"４月から個人 PC を MacBook Air から Linux マシンに変えました。[2021-05-06-1]スライド P41 に書いたとおり、たまにスリープから復帰しなくてつらいです。仕方がないので「スリープしない設定にする。常にAC電源ON🤗」という運用でカバー（）をしていました。😭いつまでも続けるわけにもいかないので、今回重い腰を上げてハイバネート出来るようにしました。Linux (Xfce4) のスリープ方式私が使っているウィンドウマネージャーは Xfce4 です。電源管理の設定等で出てくるスリープ関連の用語と、自分なりの理解は以下のとおりです。情報源は Wikipedia です。😆・サスペンドメモリ以外の給電停止した状態。ACPI では S3 に相当する。・ハイバネートメモリの内容をストレージに移し電源断。ACPI では S4 に相当する。・ハイブリッドスリープサスペンドとハイバネートの中間だと思われるが、試したらすぐハイバネートしただけだった...。macOS (Big Sur) のスリープ方式macOS ではサスペンドやハイバネートの使い分けは不要で、意識するのは「スリープ」のみです。以下のような「セーフスリープ」という機構を備えているそうです。・スリープ状態になると、メモリの内容を保持したままストレージにも保存する・スリープ中にバッテリーが切れていなければ、復帰時にメモリの内容を使う・スリープ中にバッテリーが切れていたら、復帰時にストレージの内容を使う奨励はされていませんが、pmset コマンドでスリープ方式を「セーフスリープ」から「スリープ」または「ディープスリープ」に変更は出来るようです。「スリープ」は ACPI の S3 に相当し、「ディープスリープ」は S4 に相当するようなので、Xfce4 の「ハイブリッドスリープ」は「セーフスリープ」が本来の振る舞いなのかも。※ 状態としての「スリープ」と、その種類としての「スリープ」（と「セーフスリープ」「ディープスリープ」）があるので、文章がややこしいです。Linux と macOS の振る舞いの違いmacOS の素晴らしい点に、ユーザーにスリープをほぼ意識させない設計があると思います。サスペンドやハイバネートのような用語が現れないこともさることながら、MacBook なら蓋を開けばログイン画面が表示されるだけです。多少復帰がもたつくことはあるのはご愛嬌。Linux はサスペンドは同じとしても、ハイバネートは OS の起動から始まるので、「あれ？バッテリー切れてた？」と一瞬不安になります。Windows も同じという理解です。どの OS もバックグラウンドの処理は同じだと思います。macOS はユーザーへの見せ方がきれいですね。Manjaro でのハイバネート設定方法「サスペンドとハイバネート - ArchWiki」に従いました。以下の流れです。1. スワップファイルを作る2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する3. 関連するフックを initramfs に追加する1. スワップファイルを作る今回は /swapfile という 18GB のスワップファイルを作りました。$ sudo fallocate -l 18G /swapfile$ sudo chmod 600 /swapfile$ sudo mkswap /swapfile$ sudo swapon /swapfileこの VivoBook のメモリは 16GB です。RedHat の記事に従い、スワップファイルのサイズは 18GB にしました。無事作られました。$ swapon -showFilename Type Size Used Priority/swapfile file 18874364 0 -2永続化するために /etc/fstab に以下を追記しました。/swapfile none swap defaults 0 0ちなみに、今回のような任意サイズのファイルは dd でも作れます。ただ、dd は実際にファイル書き込みが発生するため、可能なら fallocate を使うほうが無駄がなくて良いと思います。参考記事: Linuxでサイズ指定してダミーファイルを作成する方法 - conf t2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する/etc/default/grub を以下のように変更しました。/swapfile が、どのデバイスの、どの位置（オフセット）に存在するかを教えています。--- /tmp/grub.orig2021-08-25 01:12:57.415049508 +0900+++ /etc/default/grub2021-08-23 23:42:08.875333968 +0900@@ -2,7 +2,7 @@ GRUB_TIMEOUT=5 GRUB_TIMEOUT_STYLE=hidden GRUB_DISTRIBUTOR=\"Manjaro\"-GRUB_CMDLINE_LINUX_DEFAULT=\"quiet apparmor=1 security=apparmor udev.log_priority=3\"+GRUB_CMDLINE_LINUX_DEFAULT=\"quiet apparmor=1 security=apparmor udev.log_priority=3 resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9 resume_offset=52037632\" GRUB_CMDLINE_LINUX=\"\" # If you want to enable the save default function, uncomment the followingGRUB_CMDLINE_LINUX がユーザー用の変数かと思い、初めはこれを使ってしまいましたが、リカバリモード用でした（GNU GRUB Manual 2.06: Simple configuration）。\"resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9\" で、/swapfile が置いてあるデバイスを教えています。雑に調べると /dev/nvme0n1p5 です。/swapfile なので当たり前ですが、\"/\" がマウントポイントです。$ df /swapfileFilesystem 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p5 527306168 62862840 437583404 13% /\"resume=/dev/nvme0n1p5\" でも問題はないとは思いますが、外付けストレージの追加等で名前が変わるリスクはゼロではないため、UUID による永続的な命名方法を使いました。各デバイスの UUID 確認方法は簡単です（永続的なブロックデバイスの命名 - ArchWiki）。$ ls -alF /dev/disk/by-uuidtotal 0drwxr-xr-x 2 root root 100 8月 24 00:14 ./drwxr-xr-x 8 root root 160 8月 24 00:14 ../lrwxrwxrwx 1 root root 15 8月 24 00:14 2E80-83B2 -&gt; ../../nvme0n1p1lrwxrwxrwx 1 root root 15 8月 24 00:14 52d772c6-e49d-4be0-9963-c9aae2a9e4f9 -&gt; ../../nvme0n1p5lrwxrwxrwx 1 root root 15 8月 24 00:14 DA82730D8272ECFF -&gt; ../../nvme0n1p4\"resume_offset=52037632\" で、/swapfile が /dev/nvme0n1p5 の先頭からどの位置（オフセット）に存在するかを教えています。filefrag というコマンドで分かるようです。$ sudo filefrag -v /swapfile | head -n 5Filesystem type is: ef53File size of /swapfile is 19327352832 (4718592 blocks of 4096 bytes) ext: logical_offset: physical_offset: length: expected: flags: 0: 0.. 0: 52037632.. 52037632: 1: 1: 1.. 2047: 52037633.. 52039679: 2047: unwrittenext4 はフラグメンテーションが起きづらいそうだけど、e4defrag で手動デフラグしたらオフセットは変わり得るのでは？と思いました。ちょっと怖いな。どうなんでしょう？/etc/default/grub を変更したら /boot/grub/grub.cfg を再作成します。$ sudo grub-mkconfig -o /boot/grub/grub.cfg3. 関連するフックを initramfs に追加する/etc/mkinitcpio.conf を以下のように変更しました。カーネル起動時に resume というモジュールがロードされるのかな。filesystems の前に追加するのがとても重要だそうです。--- /tmp/mkinitcpio.conf.orig2021-08-25 01:40:50.793227026 +0900+++ /etc/mkinitcpio.conf2021-08-23 23:07:04.396638336 +0900@@ -49,7 +49,7 @@ # ## NOTE: If you have /usr on a separate partition, you MUST include the # usr, fsck and shutdown hooks.-HOOKS=\"base udev autodetect modconf block keyboard keymap filesystems fsck\"+HOOKS=\"base udev autodetect modconf block keyboard keymap resume filesystems fsck\" # COMPRESSION # Use this to compress the initramfs image. By default, gzip compression/etc/mkinitcpio.conf を変更したら /boot/initramfs-*.img を再作成します。$ sudo mkinitcpio -p linux510linux510 は /etc/mkinitcpio.d/ 以下のファイルと対応していました。今回は /etc/mkinitcpio.d/linux510.preset しかなかったので、linux510 になりました。ちなみに mkinitcpio を引数なしで実行すると、dry run モードによる確認が出来ます。$ sudo mkinitcpio==&gt; Starting dry run: 5.10.59-1-MANJARO -&gt; Running build hook: [base] -&gt; Running build hook: [udev] -&gt; Running build hook: [autodetect] -&gt; Running build hook: [modconf] -&gt; Running build hook: [block] -&gt; Running build hook: [keyboard] -&gt; Running build hook: [keymap] -&gt; Running build hook: [resume] -&gt; Running build hook: [filesystems] -&gt; Running build hook: [fsck]==&gt; Generating module dependencies==&gt; Dry run complete, use -g IMAGE to generate a real image注意点GRUB や Linux カーネルが更新されたら、2 や 3 の再設定が必要みたいです。面倒なので私は mitamae でゆるふわ構成管理しています。まとめハイバネート出来た時は、思わずおぉー！と声が出ました。他の OS では当たり前すぎるハイバネートですが、自分で設定すると感慨深いものがあります。これで VivoBook から気軽に AC 電源コードを抜けるようになりました。なんと当たり前な...。今までは気がつくと電源が落ちていたので、AC 電源コードも気も抜けませんでした。😭サスペンドは復帰時に画面が表示されず、電源ボタンを長押しするしかなくなることがあるので、まだ使えていません。前述の「サスペンドとハイバネート - ArchWiki」によると、この現象は多数報告されているそうです。そして、そのデバッグのベストプラクティスがこの記事とのこと。長いので気が向いたら調べます。たぶん、Linux カーネルと ATI のドライバの相性（）が悪いのだと思います。他の参考記事・Arch Linux 快適デスクトップ環境の構築 2019 - Qiita・Linux におけるラップトップマシン向け電力管理スイートの紹介（Pm-utils, Laptop-mode-tools, Powertop, TLP） – 怠惰の形而上学初めからインストールされていた TLP があればサスペンド（スリープ）は問題なく管理されているそう。Laptop-mode-tools はもう古いそう。なのにサスペンドだけだと数時間しかバッテリーがもたないのは、推して知るべし...。","contentSnippet":"４月から個人 PC を MacBook Air から Linux マシンに変えました。[2021-05-06-1]スライド P41 に書いたとおり、たまにスリープから復帰しなくてつらいです。仕方がないので「スリープしない設定にする。常にAC電源ON🤗」という運用でカバー（）をしていました。😭いつまでも続けるわけにもいかないので、今回重い腰を上げてハイバネート出来るようにしました。Linux (Xfce4) のスリープ方式私が使っているウィンドウマネージャーは Xfce4 です。電源管理の設定等で出てくるスリープ関連の用語と、自分なりの理解は以下のとおりです。情報源は Wikipedia です。😆・サスペンドメモリ以外の給電停止した状態。ACPI では S3 に相当する。・ハイバネートメモリの内容をストレージに移し電源断。ACPI では S4 に相当する。・ハイブリッドスリープサスペンドとハイバネートの中間だと思われるが、試したらすぐハイバネートしただけだった...。macOS (Big Sur) のスリープ方式macOS ではサスペンドやハイバネートの使い分けは不要で、意識するのは「スリープ」のみです。以下のような「セーフスリープ」という機構を備えているそうです。・スリープ状態になると、メモリの内容を保持したままストレージにも保存する・スリープ中にバッテリーが切れていなければ、復帰時にメモリの内容を使う・スリープ中にバッテリーが切れていたら、復帰時にストレージの内容を使う奨励はされていませんが、pmset コマンドでスリープ方式を「セーフスリープ」から「スリープ」または「ディープスリープ」に変更は出来るようです。「スリープ」は ACPI の S3 に相当し、「ディープスリープ」は S4 に相当するようなので、Xfce4 の「ハイブリッドスリープ」は「セーフスリープ」が本来の振る舞いなのかも。※ 状態としての「スリープ」と、その種類としての「スリープ」（と「セーフスリープ」「ディープスリープ」）があるので、文章がややこしいです。Linux と macOS の振る舞いの違いmacOS の素晴らしい点に、ユーザーにスリープをほぼ意識させない設計があると思います。サスペンドやハイバネートのような用語が現れないこともさることながら、MacBook なら蓋を開けばログイン画面が表示されるだけです。多少復帰がもたつくことはあるのはご愛嬌。Linux はサスペンドは同じとしても、ハイバネートは OS の起動から始まるので、「あれ？バッテリー切れてた？」と一瞬不安になります。Windows も同じという理解です。どの OS もバックグラウンドの処理は同じだと思います。macOS はユーザーへの見せ方がきれいですね。Manjaro でのハイバネート設定方法「サスペンドとハイバネート - ArchWiki」に従いました。以下の流れです。1. スワップファイルを作る2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する3. 関連するフックを initramfs に追加する1. スワップファイルを作る今回は /swapfile という 18GB のスワップファイルを作りました。$ sudo fallocate -l 18G /swapfile$ sudo chmod 600 /swapfile$ sudo mkswap /swapfile$ sudo swapon /swapfileこの VivoBook のメモリは 16GB です。RedHat の記事に従い、スワップファイルのサイズは 18GB にしました。無事作られました。$ swapon -showFilename Type Size Used Priority/swapfile file 18874364 0 -2永続化するために /etc/fstab に以下を追記しました。/swapfile none swap defaults 0 0ちなみに、今回のような任意サイズのファイルは dd でも作れます。ただ、dd は実際にファイル書き込みが発生するため、可能なら fallocate を使うほうが無駄がなくて良いと思います。参考記事: Linuxでサイズ指定してダミーファイルを作成する方法 - conf t2. 関連するカーネルパラメータを GRUB（ブートローダー）に追加する/etc/default/grub を以下のように変更しました。/swapfile が、どのデバイスの、どの位置（オフセット）に存在するかを教えています。--- /tmp/grub.orig2021-08-25 01:12:57.415049508 +0900+++ /etc/default/grub2021-08-23 23:42:08.875333968 +0900@@ -2,7 +2,7 @@ GRUB_TIMEOUT=5 GRUB_TIMEOUT_STYLE=hidden GRUB_DISTRIBUTOR=\"Manjaro\"-GRUB_CMDLINE_LINUX_DEFAULT=\"quiet apparmor=1 security=apparmor udev.log_priority=3\"+GRUB_CMDLINE_LINUX_DEFAULT=\"quiet apparmor=1 security=apparmor udev.log_priority=3 resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9 resume_offset=52037632\" GRUB_CMDLINE_LINUX=\"\" # If you want to enable the save default function, uncomment the followingGRUB_CMDLINE_LINUX がユーザー用の変数かと思い、初めはこれを使ってしまいましたが、リカバリモード用でした（GNU GRUB Manual 2.06: Simple configuration）。\"resume=UUID=52d772c6-e49d-4be0-9963-c9aae2a9e4f9\" で、/swapfile が置いてあるデバイスを教えています。雑に調べると /dev/nvme0n1p5 です。/swapfile なので当たり前ですが、\"/\" がマウントポイントです。$ df /swapfileFilesystem 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p5 527306168 62862840 437583404 13% /\"resume=/dev/nvme0n1p5\" でも問題はないとは思いますが、外付けストレージの追加等で名前が変わるリスクはゼロではないため、UUID による永続的な命名方法を使いました。各デバイスの UUID 確認方法は簡単です（永続的なブロックデバイスの命名 - ArchWiki）。$ ls -alF /dev/disk/by-uuidtotal 0drwxr-xr-x 2 root root 100 8月 24 00:14 ./drwxr-xr-x 8 root root 160 8月 24 00:14 ../lrwxrwxrwx 1 root root 15 8月 24 00:14 2E80-83B2 -> ../../nvme0n1p1lrwxrwxrwx 1 root root 15 8月 24 00:14 52d772c6-e49d-4be0-9963-c9aae2a9e4f9 -> ../../nvme0n1p5lrwxrwxrwx 1 root root 15 8月 24 00:14 DA82730D8272ECFF -> ../../nvme0n1p4\"resume_offset=52037632\" で、/swapfile が /dev/nvme0n1p5 の先頭からどの位置（オフセット）に存在するかを教えています。filefrag というコマンドで分かるようです。$ sudo filefrag -v /swapfile | head -n 5Filesystem type is: ef53File size of /swapfile is 19327352832 (4718592 blocks of 4096 bytes) ext: logical_offset: physical_offset: length: expected: flags: 0: 0.. 0: 52037632.. 52037632: 1: 1: 1.. 2047: 52037633.. 52039679: 2047: unwrittenext4 はフラグメンテーションが起きづらいそうだけど、e4defrag で手動デフラグしたらオフセットは変わり得るのでは？と思いました。ちょっと怖いな。どうなんでしょう？/etc/default/grub を変更したら /boot/grub/grub.cfg を再作成します。$ sudo grub-mkconfig -o /boot/grub/grub.cfg3. 関連するフックを initramfs に追加する/etc/mkinitcpio.conf を以下のように変更しました。カーネル起動時に resume というモジュールがロードされるのかな。filesystems の前に追加するのがとても重要だそうです。--- /tmp/mkinitcpio.conf.orig2021-08-25 01:40:50.793227026 +0900+++ /etc/mkinitcpio.conf2021-08-23 23:07:04.396638336 +0900@@ -49,7 +49,7 @@ # ## NOTE: If you have /usr on a separate partition, you MUST include the # usr, fsck and shutdown hooks.-HOOKS=\"base udev autodetect modconf block keyboard keymap filesystems fsck\"+HOOKS=\"base udev autodetect modconf block keyboard keymap resume filesystems fsck\" # COMPRESSION # Use this to compress the initramfs image. By default, gzip compression/etc/mkinitcpio.conf を変更したら /boot/initramfs-*.img を再作成します。$ sudo mkinitcpio -p linux510linux510 は /etc/mkinitcpio.d/ 以下のファイルと対応していました。今回は /etc/mkinitcpio.d/linux510.preset しかなかったので、linux510 になりました。ちなみに mkinitcpio を引数なしで実行すると、dry run モードによる確認が出来ます。$ sudo mkinitcpio==> Starting dry run: 5.10.59-1-MANJARO -> Running build hook: [base] -> Running build hook: [udev] -> Running build hook: [autodetect] -> Running build hook: [modconf] -> Running build hook: [block] -> Running build hook: [keyboard] -> Running build hook: [keymap] -> Running build hook: [resume] -> Running build hook: [filesystems] -> Running build hook: [fsck]==> Generating module dependencies==> Dry run complete, use -g IMAGE to generate a real image注意点GRUB や Linux カーネルが更新されたら、2 や 3 の再設定が必要みたいです。面倒なので私は mitamae でゆるふわ構成管理しています。まとめハイバネート出来た時は、思わずおぉー！と声が出ました。他の OS では当たり前すぎるハイバネートですが、自分で設定すると感慨深いものがあります。これで VivoBook から気軽に AC 電源コードを抜けるようになりました。なんと当たり前な...。今までは気がつくと電源が落ちていたので、AC 電源コードも気も抜けませんでした。😭サスペンドは復帰時に画面が表示されず、電源ボタンを長押しするしかなくなることがあるので、まだ使えていません。前述の「サスペンドとハイバネート - ArchWiki」によると、この現象は多数報告されているそうです。そして、そのデバッグのベストプラクティスがこの記事とのこと。長いので気が向いたら調べます。たぶん、Linux カーネルと ATI のドライバの相性（）が悪いのだと思います。他の参考記事・Arch Linux 快適デスクトップ環境の構築 2019 - Qiita・Linux におけるラップトップマシン向け電力管理スイートの紹介（Pm-utils, Laptop-mode-tools, Powertop, TLP） – 怠惰の形而上学初めからインストールされていた TLP があればサスペンド（スリープ）は問題なく管理されているそう。Laptop-mode-tools はもう古いそう。なのにサスペンドだけだと数時間しかバッテリーがもたないのは、推して知るべし...。","link":"https://masutaka.net/chalow/2021-08-25-1.html","isoDate":"2021-08-25T14:59:59.000Z","dateMiliSeconds":1629903599000,"authorName":"masutaka"},{"title":"私が１年かけて辿り着いた Looker の情報収集方法を紹介する","content":"<p>こんばんは、<del>徳川家ｙ</del> <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>以前紹介したように、去年から <a href=\"https://ja.looker.com/\">Looker</a> を使ったウェブ広告数値の可視化や BI <a href=\"#f-25b67c2a\" name=\"fn-25b67c2a\" title=\"Business Intelligence\">*1</a> に取り組んでいます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。</p>\n\n<p>LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。</p>\n\n<p>現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#情報源をリストアップする\">「情報源」をリストアップする</a></li>\n    <li><a href=\"#少し脱線\">少し脱線...</a></li>\n    <li><a href=\"#情報源の取得方法への課題\">「情報源」の取得方法への課題</a></li>\n    <li><a href=\"#今はどうなったか\">今はどうなったか？</a></li>\n    <li><a href=\"#Looker-Communityのフィードが存在した件\">「Looker Community」のフィードが存在した件</a></li>\n    <li><a href=\"#Looker-の記事一覧--DevelopersIOのフィードを作った件\">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#追記\">追記</a></li>\n</ul>\n\n<h2 id=\"情報源をリストアップする\">「情報源」をリストアップする</h2>\n\n<p>初めはこれらをたまに見に行ったり、Slack の <code>/feed subscribe</code> <a href=\"#f-e46aea89\" name=\"fn-e46aea89\" title=\"Slack に RSS フィードを追加する | Slack\">*2</a> で購読したりしてました。</p>\n\n<ul>\n<li><a href=\"https://community.looker.com/\">Looker Community</a>\n\n<ul>\n<li>公式フォーラム。英語で Question や Conversation が出来る</li>\n</ul>\n</li>\n<li><p><a href=\"https://community.looker.com/%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0-japanese-161\">Looker 日本語コミュニティフォーラム</a></p>\n\n<ul>\n<li>「Looker Community」の日本語版。<a href=\"https://docs.looker.com/relnotes/intro\">Release Notes</a> の日本語訳には本当に感謝 🙏</li>\n<li><p>「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される</p>\n\n<p>  <figure class=\"figure-image figure-image-fotolife\" title=\"Looker 日本語コミュニティフォーラム\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815145002.png\" alt=\"f:id:masutaka26:20210815145002p:plain\" width=\"1200\" height=\"382\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker 日本語コミュニティフォーラム</figcaption></figure></p></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/721814241538725\">Looker APAC Forum | Facebook</a></p>\n\n<ul>\n<li>リリース案内や事例紹介など</li>\n</ul>\n</li>\n<li><a href=\"https://dev.classmethod.jp/tags/looker/\">Looker の記事一覧 | DevelopersIO</a>\n\n<ul>\n<li>ご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度</li>\n</ul>\n</li>\n<li><a href=\"https://zenn.dev/topics/looker\">Lookerの記事一覧 | Zenn</a>\n\n<ul>\n<li>Zenn にもそれなりの頻度で投稿される</li>\n</ul>\n</li>\n<li><a href=\"https://qiita.com/tags/looker\">Looker - Qiita</a>\n\n<ul>\n<li>Qiita はもう少し頻度は落ちるかな</li>\n</ul>\n</li>\n<li><a href=\"https://twitter.com/search?q=%23looker%20lang%3Aja&amp;f=live&amp;vertical=default\">#looker lang:ja - Twitter 検索</a>\n\n<ul>\n<li>以上の情報をふわっと取得できる。<code>looker lang:ja</code> や <code>#looker</code> だとノイズが多いのでこれに落ち着いた</li>\n</ul>\n</li>\n</ul>\n\n\n<h2 id=\"少し脱線\">少し脱線...</h2>\n\n<p>Looker Community には過去一度だけ質問しました。</p>\n\n<p><a href=\"https://community.looker.com/lookml-5/how-do-i-dynamically-switch-view-name-in-sql-parameter-of-dimension-27831\">How do I dynamically switch view name in sql parameter of dimension? | Looker Community</a></p>\n\n<p>私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。</p>\n\n<p>扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀</p>\n\n<p>Looker の水野さんが日本語訳して下さっている、Looker のリリースノート <a href=\"#f-c898f381\" name=\"fn-c898f381\" title=\"例: Looker 21.12 リリースノート | Looker Community\">*3</a> は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Looker 21.12 のリリースノートを眺めてみた\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160438.png\" alt=\"f:id:masutaka26:20210815160438p:plain\" width=\"1200\" height=\"849\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker 21.12 のリリースノートを眺めてみた</figcaption></figure></p>\n\n<p>今まで書いた記事です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Looker のリリースノートを眺めてみたシリーズ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160356.png\" alt=\"f:id:masutaka26:20210815160356p:plain\" width=\"1200\" height=\"887\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker のリリースノートを眺めてみたシリーズ</figcaption></figure></p>\n\n<h2 id=\"情報源の取得方法への課題\">「情報源」の取得方法への課題</h2>\n\n<p>RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。</p>\n\n<p>そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。</p>\n\n<h2 id=\"今はどうなったか\">今はどうなったか？</h2>\n\n<p>ほぼすべてを社内の Slack channel <code>#news-looker</code> に集約させることが出来ました。</p>\n\n<p>以下が実際に購読しているフィードです。</p>\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/buzzcapture\">https://community.looker.com/feed/buzzcapture</a>\n\n<ul>\n<li>「Looker Community」のフィード。後述する</li>\n</ul>\n</li>\n<li><a href=\"https://feed43.com/developersio-looker.xml\">https://feed43.com/developersio-looker.xml</a>\n\n<ul>\n<li>「Looker の記事一覧 | DevelopersIO」のフィード。後述する</li>\n</ul>\n</li>\n<li><a href=\"https://zenn.dev/topics/looker/feed\">https://zenn.dev/topics/looker/feed</a>\n\n<ul>\n<li>「Lookerの記事一覧 | Zenn」のフィード</li>\n</ul>\n</li>\n<li><a href=\"https://qiita.com/tags/looker/feed\">https://qiita.com/tags/looker/feed</a>\n\n<ul>\n<li>「Looker - Qiita」のフィード</li>\n</ul>\n</li>\n</ul>\n\n\n<p>Twitter は <a href=\"https://ifttt.com/\">IFTTT</a> を使って、同 channel に POST しています。</p>\n\n<ul>\n<li><code>If</code> New tweet from search <code>#looker OR LookML lang:ja -rt</code></li>\n<li><code>Then</code> Post to channel\n\n<ul>\n<li>Channel: <code>#news-looker</code></li>\n<li>Message: <code>@{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。</p>\n\n<h2 id=\"Looker-Communityのフィードが存在した件\">「Looker Community」のフィードが存在した件</h2>\n\n<p><a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA-the-kitchen-table-%E3%81%8C%E5%85%AC%E9%96%8B%E3%81%95%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F-24032?postid=45126#post45126\">Looker の水野さんに聞いたら、調べて教えて下さいました。</a>🙏</p>\n\n<ul>\n<li>(1) 新しいトピックの投稿\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/topics\">https://community.looker.com/feed/topics</a></li>\n</ul>\n</li>\n<li>(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/buzzcapture\">https://community.looker.com/feed/buzzcapture</a></li>\n</ul>\n</li>\n</ul>\n\n\n<p>アナウンス記事です。\n<a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AErss%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89-25553?postid=46404#post46404\">LookerコミュニティのRSSフィード | Looker Community</a></p>\n\n<p>(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。</p>\n\n<p>今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。</p>\n\n<p><a href=\"https://community.looker.com/\">https://community.looker.com/</a> の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。</p>\n\n<h2 id=\"Looker-の記事一覧--DevelopersIOのフィードを作った件\">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</h2>\n\n<p>ないものは仕方がないので、<a href=\"https://feed43.com/\">Feed43</a> というサービスで作りました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2021-03-14-1.html\" title=\"フィード（RSS/Atom）を配信していないサイトのフィードを Feed43 で作成する\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>出来たのが <a href=\"https://feed43.com/developersio-looker.xml\">https://feed43.com/developersio-looker.xml</a> です。どなたでも購読可能です。よろしければどうぞ。</p>\n\n<p>HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。</p>\n\n<p>本当は <a href=\"https://dev.classmethod.jp/tags/looker/\">https://dev.classmethod.jp/tags/looker/</a> のフィードがあれば良いのですけどね。今後に期待です。</p>\n\n<p>[Update] そのものズバリ <a href=\"https://dev.classmethod.jp/feed/?tag=looker\">https://dev.classmethod.jp/feed/?tag=looker</a> を <a href=\"https://twitter.com/sh19910711/status/1427429573117964306\">Twitterで教えて</a>頂きました。ありがとうございます！</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。</p>\n\n<p>これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥\n※ ネタは少しあるけど、時間がない。(^^;</p>\n\n<p>皆さんにも参考になれば幸いです。他にもあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> に教えて下さい！</p>\n\n<h2 id=\"追記\">追記</h2>\n\n<blockquote><p>他にもあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> に教えて下さい！</p></blockquote>\n\n<p>記事にも登場して頂いた Looker の水野さん <a href=\"https://twitter.com/tomoya_cs\">@tomoya_cs</a> をフォローするとさらに捗ると思います。</p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭<br>あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） <a href=\"https://t.co/eDQz8A5VCC\">https://t.co/eDQz8A5VCC</a></p>&mdash; tomoya | Looker CS (@tomoya_cs) <a href=\"https://twitter.com/tomoya_cs/status/1428194155943972872?ref_src=twsrc%5Etfw\">2021年8月19日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-25b67c2a\" name=\"f-25b67c2a\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://ja.wikipedia.org/wiki/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%86%E3%83%AA%E3%82%B8%E3%82%A7%E3%83%B3%E3%82%B9\">Business Intelligence</a></span></p>\n<p class=\"footnote\"><a href=\"#fn-e46aea89\" name=\"f-e46aea89\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://slack.com/intl/ja-jp/help/articles/218688467-Slack-%E3%81%AB-RSS-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">Slack に RSS フィードを追加する | Slack</a></span></p>\n<p class=\"footnote\"><a href=\"#fn-c898f381\" name=\"f-c898f381\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">例: <a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker-21-12-%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88-27799\">Looker 21.12 リリースノート | Looker Community</a></span></p>\n</div>","contentSnippet":"こんばんは、徳川家ｙ id:masutaka26 です。以前紹介したように、去年から Looker を使ったウェブ広告数値の可視化や BI *1 に取り組んでいます。LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。「情報源」をリストアップする少し脱線...「情報源」の取得方法への課題今はどうなったか？「Looker Community」のフィードが存在した件「Looker の記事一覧 | DevelopersIO」のフィードを作った件まとめ追記「情報源」をリストアップする初めはこれらをたまに見に行ったり、Slack の /feed subscribe *2 で購読したりしてました。Looker Community公式フォーラム。英語で Question や Conversation が出来るLooker 日本語コミュニティフォーラム「Looker Community」の日本語版。Release Notes の日本語訳には本当に感謝 🙏「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される  Looker 日本語コミュニティフォーラムLooker APAC Forum | Facebookリリース案内や事例紹介などLooker の記事一覧 | DevelopersIOご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度Lookerの記事一覧 | ZennZenn にもそれなりの頻度で投稿されるLooker - QiitaQiita はもう少し頻度は落ちるかな#looker lang:ja - Twitter 検索以上の情報をふわっと取得できる。looker lang:ja や #looker だとノイズが多いのでこれに落ち着いた少し脱線...Looker Community には過去一度だけ質問しました。How do I dynamically switch view name in sql parameter of dimension? | Looker Community私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀Looker の水野さんが日本語訳して下さっている、Looker のリリースノート *3 は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。Looker 21.12 のリリースノートを眺めてみた今まで書いた記事です。Looker のリリースノートを眺めてみたシリーズ「情報源」の取得方法への課題RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。今はどうなったか？ほぼすべてを社内の Slack channel #news-looker に集約させることが出来ました。以下が実際に購読しているフィードです。https://community.looker.com/feed/buzzcapture「Looker Community」のフィード。後述するhttps://feed43.com/developersio-looker.xml「Looker の記事一覧 | DevelopersIO」のフィード。後述するhttps://zenn.dev/topics/looker/feed「Lookerの記事一覧 | Zenn」のフィードhttps://qiita.com/tags/looker/feed「Looker - Qiita」のフィードTwitter は IFTTT を使って、同 channel に POST しています。If New tweet from search #looker OR LookML lang:ja -rtThen Post to channelChannel: #news-lookerMessage: @{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。「Looker Community」のフィードが存在した件Looker の水野さんに聞いたら、調べて教えて下さいました。🙏(1) 新しいトピックの投稿https://community.looker.com/feed/topics(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）https://community.looker.com/feed/buzzcaptureアナウンス記事です。LookerコミュニティのRSSフィード | Looker Community(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。https://community.looker.com/ の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。「Looker の記事一覧 | DevelopersIO」のフィードを作った件ないものは仕方がないので、Feed43 というサービスで作りました。出来たのが https://feed43.com/developersio-looker.xml です。どなたでも購読可能です。よろしければどうぞ。HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。本当は https://dev.classmethod.jp/tags/looker/ のフィードがあれば良いのですけどね。今後に期待です。[Update] そのものズバリ https://dev.classmethod.jp/feed/?tag=looker を Twitterで教えて頂きました。ありがとうございます！まとめ私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥※ ネタは少しあるけど、時間がない。(^^;皆さんにも参考になれば幸いです。他にもあれば @masutaka に教えて下さい！追記他にもあれば @masutaka に教えて下さい！記事にも登場して頂いた Looker の水野さん @tomoya_cs をフォローするとさらに捗ると思います。Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） https://t.co/eDQz8A5VCC— tomoya | Looker CS (@tomoya_cs) 2021年8月19日  *1:Business Intelligence*2:Slack に RSS フィードを追加する | Slack*3:例: Looker 21.12 リリースノート | Looker Community","link":"https://developer.feedforce.jp/entry/2021/08/16/150000","isoDate":"2021-08-16T06:00:00.000Z","dateMiliSeconds":1629093600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"Chrome から Firefox に乗り換えたよ","content":"[2011-06-03-1] に Firefox から Chrome に乗り換えて以来です。ちょうど 10 年。iPhone から Android への乗り換え [2020-07-14-1] も 10 年だったし、飽きづらいマスタカも 10 年が周期みたいです。まあ、普通の人は乗り換えたことをいちいち記録しないし、もっとカジュアルにあっちこっち使う気はしてます。このブログの名前が「マスタカの ChangeLog メモ」なので記録せざるを得ないのです。もう大変。(>o<)飽きたのはありますが、この Issue がきっかけではあります。Xkeysnail と Chrome の組み合わせで、カーソル移動やタブ移動のキーが 2 回発行されてしまう問題です。もう修正されたようですが、回避方法がダウングレードしかなく地味に厄介でした。そんな私はブラウザ乗り換えで回避したという...。10 年前は Firefox と Keysnail を使っていました。個人 PC を Linux にしたことで、また同じ作者である mooz さん作の Xkeysnail を Firefox でも使うことには感慨深いものがあります。そういえば Manjaro (Linux) のデフォルトブラウザは Firefox でした。それも戻った理由ではあるかな。Chrome だと AUR でインストールする必要があるのですよね。10 年と書きましたが、その間 2 回ほど Firefox に戻ろうとしていました。2017 年の時は、20 日程度戻ってました。当時は Quantum として大型アップデートされた直後で、アドオンが割と壊れていた記憶。1Password アドオンはまだなかった。あと、Multi-Account Containers に惑わされてしまった。loading...loading...2019 年は 15 日くらい頑張っていました。2014 年製の MacBook Air が遅いのが諦めた要因だったような。> 買えよ (^^;loading...loading...今回は乗り換えのハードルを低くするために個人 PC だけ乗り換えました。PC も速くなった [2021-05-06-1] ので、2019 年とは違います。会社の MacBook Pro はまだ（？）Chrome です。Firefox でまず戸惑うのが、Chrome のユーザー（プロファイル）切り替えに相当する機能が見当たらないことです。4 年前と変わらず、なぜか Multi-Account Containers を推してきますが、これはタブ単位でセッションを切り替える機能です。Firefox アカウントは切り替えられないので代わりにはなりません。代わりに \"about:profiles\" が使えます。アドレスバーにこれを入力して開くと、素朴な画面が開いてプロファイルの管理や起動が出来ます。\"$ firefox -P\" などと \"-P\" オプション付きで Firefox を開いても、似た機能を持つプロファイルマネージャーが起動します。公式ヘルプ: プロファイルマネージャーを使用して、Firefox のプロファイルを作成または削除する｜Firefox ヘルプ前回と同じように、私が使う数少ないアドオンの乗り換え記録も残しておきます。今まで使っていた Chrome 拡張と移行先1Passwordこれは普通にあります。X は気にしないでください。1Password X – パスワード保管庫 - Firefox Add-onsChrome 版は２つあって初心者を悩ませそうです。前者が X です。気にしないでください...。1Password – パスワード保管庫 - Chrome ウェブストア1Password 拡張機能 (パソコンのアプリが必要) - Chrome ウェブストアato-ichinenato-ichinen - Chrome ウェブストアON にしている間、Google 検索を直近 1 年にするだけの Chrome 拡張です。技術系の調査は鮮度が大事なことがあるからです。よく考えたらブックマークレットで十分なので、こんなのを作りました。どうでも良いですが、名前は G1nen にしました。javascript:location.href=location.href+'&amp;tbs=qdr:y'ついでに G2en というブックマークレットも作りました。これは Google の検索対象を英語サイトにします（情報源）。日本語の情報はノイズになることが多いので。だったら常に英語にしろよという意見は認めます。javascript:location.href=location.href+'&amp;gl=us&amp;hl=en&amp;gws_rd=cr&amp;pws=0'Create LinkCreate Link - Chrome ウェブストア今開いているページや選択したリンクを、Markdown や任意のフォーマットでクリップボードにコピーする Chrome 拡張です。esa とか書いてるとよく使いますよね。Format Link に移行しました。若干上位互換風で、正規表現を使った置換も出来ます。EmotyEmoty - Chrome ウェブストア絵文字を一覧から選んでクリップボードにコピー出来る Chrome 拡張です。フォーマットは :smile: などで、Unicode 絵文字ではありません。Emoji Cheatsheet に移行しました。こちらは Unicode 絵文字にも対応しています。Google Analytics オプトアウト アドオンGoogle Analytics オプトアウト アドオン (by Google) - Chrome ウェブストアその名の通りの Chrome 拡張です。Chrome の機能を使って、自分のサイトや会社のサイトだけをオプトアウトしていました。宗教上の理由（）がないので、全サイトはオプトアウトしていません。良さげなアドオンが見つかっていません。情報求む。Google 翻訳Google 翻訳 - Chrome ウェブストアその名の通りの Chrome 拡張です。選択範囲だけを翻訳したり、ページ全体を日本語に置き換えたり便利ですよね。To Google Translate に移行しました。https://translate.google.com/ が別タブで開いてしまうので大げさではあります。まあいいか...。Grammarly for ChromeGrammarly for Chrome - Chrome ウェブストアスペルチェッカーサービス Grammarly の Chrome 拡張です。今年も気がついたら課金していたので、来年は課金しないようにしました。Grammarly for Firefox があります。ただ、Chrome と違って動作するサイトを絞れないので、フォームへの書き込みを邪魔することが多いです...。Keepa - Amazon Price TrackerKeepa - Amazon Price Tracker - Chrome ウェブストアAmazon の商品ページに価格変動グラフを挿入してくれる Chrome 拡張です。「安くなった。買い時だ。」「高いけど買っちゃおう。」などと判断の助けになります。← 結局買う奴Amazon Price Tracker - Keepa.com があります。LINELINE - Chrome ウェブストアLINE の Chrome アプリです。長めの文章が面倒な時に使ってました。Firefox 版はないみたいです。LINE をあまり使わないので問題なし。Save to PocketSave to Pocket - Chrome ウェブストアPocket の Chrome 拡張です。結局 Pocket に戻って来てしまいます。Firefox にはこの機能が組み込まれています。2015-04-21 にそんなニュースがありました。速報： MozillaがPocket（旧Read It Later）をFirefox本体に統合（追記あり） - Mozilla Fluxtwitter画像原寸ボタンtwitter画像原寸ボタン - Chrome ウェブストアtwitter.com や TweetDeck で小さくて見づらい画像を原寸サイズで、別タブにバババッと開く Chrome 拡張です。Twitter 原寸びゅーに移行しました。モーダルで開き、ショートカットキーでサイズを変えられるので、こちらの方が便利です。はてなブックマークはてなブックマーク - Chrome ウェブストアご存知はてブの Chrome 拡張です。Hatena Bookmark があります。なぜか英語。追記(2022-04-24):Hatena Bookmark はなくなり、はてなブックマーク ブックマーク機能に移行しました。新たに Firefox にインストールしたアドオンChrome では要らなかったが、Firefox でインストールしたアドオンを書いていきます。Copy Link TextCopy Link Text - Firefox Add-onsリンクテキストをコピーするアドオンです。↑ だと \"Copy Link Text\" をコピーできます。信じられないことに Firefox ではこれが出来ないのです。4 年前のやつが残ってて、何をするアドオンか思い出すのに時間がかかりました...。Firefox で不要になったアドオン反対に、Chrome で使っていたが、Firefox で代わりは要らなかった Chrome 拡張を書いていきます。Close download barClose download bar - Firefox Add-onsファイルをダウンロードすると現れるうざいフッターを Option-w や Alt-w で閉じられる Chrome 拡張です。地味だけど便利です。まとめ10 年ぶりに Firefox に戻ってきました。1 週間使っていますが、課題はありつつも、Firefox だと忘れてしまう程度には主張してきません。割と快適です。アドオンがエラーを起こすのはたまたまなんですかね？この記事を書いている間、Format Link が使えませんでした...。","contentSnippet":"[2011-06-03-1] に Firefox から Chrome に乗り換えて以来です。ちょうど 10 年。iPhone から Android への乗り換え [2020-07-14-1] も 10 年だったし、飽きづらいマスタカも 10 年が周期みたいです。まあ、普通の人は乗り換えたことをいちいち記録しないし、もっとカジュアルにあっちこっち使う気はしてます。このブログの名前が「マスタカの ChangeLog メモ」なので記録せざるを得ないのです。もう大変。(>o 買えよ (^^;loading...loading...今回は乗り換えのハードルを低くするために個人 PC だけ乗り換えました。PC も速くなった [2021-05-06-1] ので、2019 年とは違います。会社の MacBook Pro はまだ（？）Chrome です。Firefox でまず戸惑うのが、Chrome のユーザー（プロファイル）切り替えに相当する機能が見当たらないことです。4 年前と変わらず、なぜか Multi-Account Containers を推してきますが、これはタブ単位でセッションを切り替える機能です。Firefox アカウントは切り替えられないので代わりにはなりません。代わりに \"about:profiles\" が使えます。アドレスバーにこれを入力して開くと、素朴な画面が開いてプロファイルの管理や起動が出来ます。\"$ firefox -P\" などと \"-P\" オプション付きで Firefox を開いても、似た機能を持つプロファイルマネージャーが起動します。公式ヘルプ: プロファイルマネージャーを使用して、Firefox のプロファイルを作成または削除する｜Firefox ヘルプ前回と同じように、私が使う数少ないアドオンの乗り換え記録も残しておきます。今まで使っていた Chrome 拡張と移行先1Passwordこれは普通にあります。X は気にしないでください。1Password X – パスワード保管庫 - Firefox Add-onsChrome 版は２つあって初心者を悩ませそうです。前者が X です。気にしないでください...。1Password – パスワード保管庫 - Chrome ウェブストア1Password 拡張機能 (パソコンのアプリが必要) - Chrome ウェブストアato-ichinenato-ichinen - Chrome ウェブストアON にしている間、Google 検索を直近 1 年にするだけの Chrome 拡張です。技術系の調査は鮮度が大事なことがあるからです。よく考えたらブックマークレットで十分なので、こんなのを作りました。どうでも良いですが、名前は G1nen にしました。javascript:location.href=location.href+'&tbs=qdr:y'ついでに G2en というブックマークレットも作りました。これは Google の検索対象を英語サイトにします（情報源）。日本語の情報はノイズになることが多いので。だったら常に英語にしろよという意見は認めます。javascript:location.href=location.href+'&gl=us&hl=en&gws_rd=cr&pws=0'Create LinkCreate Link - Chrome ウェブストア今開いているページや選択したリンクを、Markdown や任意のフォーマットでクリップボードにコピーする Chrome 拡張です。esa とか書いてるとよく使いますよね。Format Link に移行しました。若干上位互換風で、正規表現を使った置換も出来ます。EmotyEmoty - Chrome ウェブストア絵文字を一覧から選んでクリップボードにコピー出来る Chrome 拡張です。フォーマットは :smile: などで、Unicode 絵文字ではありません。Emoji Cheatsheet に移行しました。こちらは Unicode 絵文字にも対応しています。Google Analytics オプトアウト アドオンGoogle Analytics オプトアウト アドオン (by Google) - Chrome ウェブストアその名の通りの Chrome 拡張です。Chrome の機能を使って、自分のサイトや会社のサイトだけをオプトアウトしていました。宗教上の理由（）がないので、全サイトはオプトアウトしていません。良さげなアドオンが見つかっていません。情報求む。Google 翻訳Google 翻訳 - Chrome ウェブストアその名の通りの Chrome 拡張です。選択範囲だけを翻訳したり、ページ全体を日本語に置き換えたり便利ですよね。To Google Translate に移行しました。https://translate.google.com/ が別タブで開いてしまうので大げさではあります。まあいいか...。Grammarly for ChromeGrammarly for Chrome - Chrome ウェブストアスペルチェッカーサービス Grammarly の Chrome 拡張です。今年も気がついたら課金していたので、来年は課金しないようにしました。Grammarly for Firefox があります。ただ、Chrome と違って動作するサイトを絞れないので、フォームへの書き込みを邪魔することが多いです...。Keepa - Amazon Price TrackerKeepa - Amazon Price Tracker - Chrome ウェブストアAmazon の商品ページに価格変動グラフを挿入してくれる Chrome 拡張です。「安くなった。買い時だ。」「高いけど買っちゃおう。」などと判断の助けになります。← 結局買う奴Amazon Price Tracker - Keepa.com があります。LINELINE - Chrome ウェブストアLINE の Chrome アプリです。長めの文章が面倒な時に使ってました。Firefox 版はないみたいです。LINE をあまり使わないので問題なし。Save to PocketSave to Pocket - Chrome ウェブストアPocket の Chrome 拡張です。結局 Pocket に戻って来てしまいます。Firefox にはこの機能が組み込まれています。2015-04-21 にそんなニュースがありました。速報： MozillaがPocket（旧Read It Later）をFirefox本体に統合（追記あり） - Mozilla Fluxtwitter画像原寸ボタンtwitter画像原寸ボタン - Chrome ウェブストアtwitter.com や TweetDeck で小さくて見づらい画像を原寸サイズで、別タブにバババッと開く Chrome 拡張です。Twitter 原寸びゅーに移行しました。モーダルで開き、ショートカットキーでサイズを変えられるので、こちらの方が便利です。はてなブックマークはてなブックマーク - Chrome ウェブストアご存知はてブの Chrome 拡張です。Hatena Bookmark があります。なぜか英語。追記(2022-04-24):Hatena Bookmark はなくなり、はてなブックマーク ブックマーク機能に移行しました。新たに Firefox にインストールしたアドオンChrome では要らなかったが、Firefox でインストールしたアドオンを書いていきます。Copy Link TextCopy Link Text - Firefox Add-onsリンクテキストをコピーするアドオンです。↑ だと \"Copy Link Text\" をコピーできます。信じられないことに Firefox ではこれが出来ないのです。4 年前のやつが残ってて、何をするアドオンか思い出すのに時間がかかりました...。Firefox で不要になったアドオン反対に、Chrome で使っていたが、Firefox で代わりは要らなかった Chrome 拡張を書いていきます。Close download barClose download bar - Firefox Add-onsファイルをダウンロードすると現れるうざいフッターを Option-w や Alt-w で閉じられる Chrome 拡張です。地味だけど便利です。まとめ10 年ぶりに Firefox に戻ってきました。1 週間使っていますが、課題はありつつも、Firefox だと忘れてしまう程度には主張してきません。割と快適です。アドオンがエラーを起こすのはたまたまなんですかね？この記事を書いている間、Format Link が使えませんでした...。","link":"https://masutaka.net/chalow/2021-08-07-1.html","isoDate":"2021-08-07T14:59:59.000Z","dateMiliSeconds":1628348399000,"authorName":"masutaka"},{"title":"３月に無償提供となった Microsoft Power Automate Desktop を今さらながら使ってみた","content":"※ 会社の「インフラ共有会」用に書いた記事の転載です。Windows PC を買った [2021-05-06-1] ので、個人で試せることに気づいてちょろっと試したって経緯です。Microsoft、自社製RPAツールを全Windows 10ユーザーに無償提供　マウスクリックやキーボード入力をGUIで自動化：Microsoft Ignite 2021 - ITmedia NEWS・動作するのは目の前の Windows PC。エクセルとかのマクロをパワーアップしたものに近いかも・ スケジュール（時間を指定した自動実行）の機能は見つけられなかった。寝ている間に自動実行とかは出来ない気がした・Chrome の「要素を検証」みたいな感覚で、クリックやフォームの位置を指定できる・要素名を変更するなど細かい微調整は出来ないようなので、id 名等が少しでも変わるとフローが動かなくなるかも・アクションの種類は多彩で、頑張れば「LINEビジネスアカウントでログインして、レポートをローカルフォルダにダウンロードし、それを Google スプレッドシートにインポート」は出来ると思う・今起動しているブラウザにも接続できるようなので、２段階認証突破のハードルは多少低そうPower Automate と Power Automate Desktop との違いはイマイチ理解できていない。難しい...。・Power Automate・Power Automate Desktop ← 今回はこっち多彩なアクション※ フローの新規作成画面です。[多彩なアクション]フローを作った様子https://www.myfitnesspal.com/ja/account/login にログインして csv ファイルをダウンロードするフローを作ったが、MyFitnesspal は「CSV ファイルをダウンロードするためのリンクを含んだメールが届きます」だと知った。試しに作るには大きすぎるため心が折れた。(^^;[設定例]インストール方法や実行方法などの紹介動画うぃんどうずしょしんしゃなので、わかりやすいどうがをみたよ。","contentSnippet":"※ 会社の「インフラ共有会」用に書いた記事の転載です。Windows PC を買った [2021-05-06-1] ので、個人で試せることに気づいてちょろっと試したって経緯です。Microsoft、自社製RPAツールを全Windows 10ユーザーに無償提供　マウスクリックやキーボード入力をGUIで自動化：Microsoft Ignite 2021 - ITmedia NEWS・動作するのは目の前の Windows PC。エクセルとかのマクロをパワーアップしたものに近いかも・ スケジュール（時間を指定した自動実行）の機能は見つけられなかった。寝ている間に自動実行とかは出来ない気がした・Chrome の「要素を検証」みたいな感覚で、クリックやフォームの位置を指定できる・要素名を変更するなど細かい微調整は出来ないようなので、id 名等が少しでも変わるとフローが動かなくなるかも・アクションの種類は多彩で、頑張れば「LINEビジネスアカウントでログインして、レポートをローカルフォルダにダウンロードし、それを Google スプレッドシートにインポート」は出来ると思う・今起動しているブラウザにも接続できるようなので、２段階認証突破のハードルは多少低そうPower Automate と Power Automate Desktop との違いはイマイチ理解できていない。難しい...。・Power Automate・Power Automate Desktop ← 今回はこっち多彩なアクション※ フローの新規作成画面です。[多彩なアクション]フローを作った様子https://www.myfitnesspal.com/ja/account/login にログインして csv ファイルをダウンロードするフローを作ったが、MyFitnesspal は「CSV ファイルをダウンロードするためのリンクを含んだメールが届きます」だと知った。試しに作るには大きすぎるため心が折れた。(^^;[設定例]インストール方法や実行方法などの紹介動画うぃんどうずしょしんしゃなので、わかりやすいどうがをみたよ。","link":"https://masutaka.net/chalow/2021-07-28-1.html","isoDate":"2021-07-28T14:59:59.000Z","dateMiliSeconds":1627484399000,"authorName":"masutaka"},{"title":"『ここがつらいよ普段使いのLinux』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。いよいよ明後日は <a href=\"https://jp.rizinff.com/_ct/17440570\">RIZIN.28</a> ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTBXZg9pczERJABgT3Uuu922Ktcc91HHl00QOtySt7fFtxrL4NZOcco1BtkK_pDuFkO0Uo-JuAwBkoC/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。</p>\n\n<p>そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。</p>\n\n<p>数々の諸問題が発生しましたが、無事全部解決（？）したお話です。</p>\n\n<ul>\n<li>キーボードショートカットがつらい</li>\n<li>タッチパッドがつらい</li>\n<li>指紋認証出来なくてつらい</li>\n<li>たまにスリープから復帰しなくてつらい（一番つらい）</li>\n<li>ちょっとした画像編集に GIMP を使うのはつらい</li>\n</ul>\n\n\n<p>みんなも Mac を捨てて Linux を使うといいと思うよ！</p>\n\n<p>それでは！</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" class=\"hatena-asin-detail-image-link\" target=\"_blank\" rel=\"noopener\"><img src=\"https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg\" class=\"hatena-asin-detail-image\" alt=\"だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス\" title=\"だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" target=\"_blank\" rel=\"noopener\">だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス</a></p><ul class=\"hatena-asin-detail-meta\"><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%20%C5%AF%BA%C8\" class=\"keyword\">鈴木 哲哉</a></li><li>オーエス出版</li></ul><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" class=\"asin-detail-buy\" target=\"_blank\" rel=\"noopener\">Amazon</a></div></div></p>\n","contentSnippet":"こんにちは id:masutaka26 です。いよいよ明後日は RIZIN.28 ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。本日、週次の社内勉強会 FFTT で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。数々の諸問題が発生しましたが、無事全部解決（？）したお話です。キーボードショートカットがつらいタッチパッドがつらい指紋認証出来なくてつらいたまにスリープから復帰しなくてつらい（一番つらい）ちょっとした画像編集に GIMP を使うのはつらいみんなも Mac を捨てて Linux を使うといいと思うよ！それでは！だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス作者:鈴木 哲哉オーエス出版Amazon","link":"https://developer.feedforce.jp/entry/2021/06/11/180000","isoDate":"2021-06-11T09:00:00.000Z","dateMiliSeconds":1623402000000,"imageUrl":"https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg","authorName":"masutaka"},{"title":"Dependabot の Terraform 1.0 対応が完了した件","content":"[2021-05-27-1] のつづき。この間に 1.0 がリリースされてましたね。先ほど、Lockfile (.terraform.lock.hcl) の対応が完了したそうです。https://github.com/dependabot/dependabot-core/issues/1176#issuecomment-858490407これで Dependabot での terraform 対応が完了しました。・terraform version は自動更新できない・provider version を自動更新できる。その際、.terraform.lock.hcl も更新されるはず・以前の Dependabot で対応されていた module version はどうなんだろう？使ってないので分からないdependabot.yml のドキュメントはこちら。circleci-tfupdate-orb はそろそろアーカイブしたいな。でも Dependabot だと terraform version は更新出来ないんだよね...。追記(2021-06-11):公式でもアナウンスされてました。Dependabot now supports Terraform 1.0｜GitHub Changelog","contentSnippet":"[2021-05-27-1] のつづき。この間に 1.0 がリリースされてましたね。先ほど、Lockfile (.terraform.lock.hcl) の対応が完了したそうです。https://github.com/dependabot/dependabot-core/issues/1176#issuecomment-858490407これで Dependabot での terraform 対応が完了しました。・terraform version は自動更新できない・provider version を自動更新できる。その際、.terraform.lock.hcl も更新されるはず・以前の Dependabot で対応されていた module version はどうなんだろう？使ってないので分からないdependabot.yml のドキュメントはこちら。circleci-tfupdate-orb はそろそろアーカイブしたいな。でも Dependabot だと terraform version は更新出来ないんだよね...。追記(2021-06-11):公式でもアナウンスされてました。Dependabot now supports Terraform 1.0｜GitHub Changelog","link":"https://masutaka.net/chalow/2021-06-10-1.html","isoDate":"2021-06-10T14:59:59.000Z","dateMiliSeconds":1623337199000,"authorName":"masutaka"},{"title":"暑がりの私にはマスクチェーンがとても合ってる","content":"去年の秋くらいからマスクチェーン（ストラップ）を使っています。私はとても暑がりなのと、マスクの着用感が好きではないので、かなり重宝しています。どのくらい暑がりかと言うと、中学生の時は暑くない水泳部に入ったり、毎日スーツを着る会社には絶対に入社しなかったり、今の会社が上場した時も暑かったので（スーツが必要な）東証には行かなかったり、まあそんな感じです。外に出た時にスッと外せるのがとても良いです。店で食事をする時、ベタッと置かずに済むのも良いです。弱点は強風です。一度強風に煽られて外れたことがあります。どうにかならないかな...？最近買って、とても気に入ったのがこちらです。約 70cm あり、チェーンもしっかりしています。男性向けらしいです。その少し前に買ったのがこちら。メンズと書いてありますが、女性向けかなと思いました。55cm と少し短いのと、見た目よりもチェーンがずっと細いからです。細いせいでやや絡まりやすいです。クロスの飾りは結構きれいで、マスクをした時に主張してくれます。チェーンの長さが足りないので常用はしませんが、特別な日（）には付けようと思いました。こちらは入門者向けかな？最初に買いました。当時の値段も ￥398 でとても安かったです。ストラップの長さは 60cm です。このくらいは欲しいところです。後ろで止めると、耳が痛くならないみたいです。しかし４本は要らなかった...。これから暑い夏が始まるので、さらに活躍してくれそうです。","contentSnippet":"去年の秋くらいからマスクチェーン（ストラップ）を使っています。私はとても暑がりなのと、マスクの着用感が好きではないので、かなり重宝しています。どのくらい暑がりかと言うと、中学生の時は暑くない水泳部に入ったり、毎日スーツを着る会社には絶対に入社しなかったり、今の会社が上場した時も暑かったので（スーツが必要な）東証には行かなかったり、まあそんな感じです。外に出た時にスッと外せるのがとても良いです。店で食事をする時、ベタッと置かずに済むのも良いです。弱点は強風です。一度強風に煽られて外れたことがあります。どうにかならないかな...？最近買って、とても気に入ったのがこちらです。約 70cm あり、チェーンもしっかりしています。男性向けらしいです。その少し前に買ったのがこちら。メンズと書いてありますが、女性向けかなと思いました。55cm と少し短いのと、見た目よりもチェーンがずっと細いからです。細いせいでやや絡まりやすいです。クロスの飾りは結構きれいで、マスクをした時に主張してくれます。チェーンの長さが足りないので常用はしませんが、特別な日（）には付けようと思いました。こちらは入門者向けかな？最初に買いました。当時の値段も ￥398 でとても安かったです。ストラップの長さは 60cm です。このくらいは欲しいところです。後ろで止めると、耳が痛くならないみたいです。しかし４本は要らなかった...。これから暑い夏が始まるので、さらに活躍してくれそうです。","link":"https://masutaka.net/chalow/2021-05-30-1.html","isoDate":"2021-05-30T14:59:59.000Z","dateMiliSeconds":1622386799000,"authorName":"masutaka"},{"title":"Dependabot の Terraform 0.15 対応が進んでいる件","content":"最近この Issue が活発になってきました。Terraform 0.15 support · Issue #1176 · dependabot/dependabot-core実はプロバイダーバージョンのアップデートだけならもう使えます。・プロバイダーバージョンのアップデートはもう動く・↑の後に必要な .terraform.lock.hcl の更新は実装中とのこと。現在は手動で \"$ terraform init -upgrade\" が必要・terraform バージョンのアップデートはロードマップに含まれていない↓プライベートリポジトリで動いている様子。[dependabot terraform1][dependabot terraform2]dependabot.yml のドキュメントはここにあるので、試してみるのも良いかもしれません。↓このブログが置いてあるリポジトリの .github/dependabot.yml です。daily はやり過ぎなのであとで減らそう。version: 2updates: - package-ecosystem: \"terraform\" directory: \"/terraform/aws\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10 - package-ecosystem: \"terraform\" directory: \"/terraform/heroku\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10今までの経緯とかTerraform 0.11 まで、Dependabot はモジュールのアップデートだけ対応していました。https://dependabot.com/docs/config-file/ でその痕跡を確認できます。※ Dependabot は GitHub に統合されたので、https://dependabot.com はもう古いです。ですが、Terraform 0.12 で HCL2 が導入されてから、全く動かなくなりました。前述の Issue も要望の嵐。@minamijoyo が tfupdate を作ってくれたので、私もその CircleCI Orb を作ってみるなど。※ 現在この Orb は terraform 本体とプロバイダーバージョンのアップデートのみ対応しています。terraform.lock.hcl の更新には対応していないので、手動で $ terraform init -upgrade が必要です。https://github.com/minamijoyo/tfupdate-circleci-example のサンプルコードは対応しているみたいです。","contentSnippet":"最近この Issue が活発になってきました。Terraform 0.15 support · Issue #1176 · dependabot/dependabot-core実はプロバイダーバージョンのアップデートだけならもう使えます。・プロバイダーバージョンのアップデートはもう動く・↑の後に必要な .terraform.lock.hcl の更新は実装中とのこと。現在は手動で \"$ terraform init -upgrade\" が必要・terraform バージョンのアップデートはロードマップに含まれていない↓プライベートリポジトリで動いている様子。[dependabot terraform1][dependabot terraform2]dependabot.yml のドキュメントはここにあるので、試してみるのも良いかもしれません。↓このブログが置いてあるリポジトリの .github/dependabot.yml です。daily はやり過ぎなのであとで減らそう。version: 2updates: - package-ecosystem: \"terraform\" directory: \"/terraform/aws\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10 - package-ecosystem: \"terraform\" directory: \"/terraform/heroku\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10今までの経緯とかTerraform 0.11 まで、Dependabot はモジュールのアップデートだけ対応していました。https://dependabot.com/docs/config-file/ でその痕跡を確認できます。※ Dependabot は GitHub に統合されたので、https://dependabot.com はもう古いです。ですが、Terraform 0.12 で HCL2 が導入されてから、全く動かなくなりました。前述の Issue も要望の嵐。@minamijoyo が tfupdate を作ってくれたので、私もその CircleCI Orb を作ってみるなど。※ 現在この Orb は terraform 本体とプロバイダーバージョンのアップデートのみ対応しています。terraform.lock.hcl の更新には対応していないので、手動で $ terraform init -upgrade が必要です。https://github.com/minamijoyo/tfupdate-circleci-example のサンプルコードは対応しているみたいです。","link":"https://masutaka.net/chalow/2021-05-27-1.html","isoDate":"2021-05-27T14:59:59.000Z","dateMiliSeconds":1622127599000,"authorName":"masutaka"},{"title":"ノートパソコンクーラーを買い替えた","content":"2 年使っていた冷却パッドが寿命っぽいので、エレコムのノートパソコンクーラーを買いました。心配していた冷却効果は申し分なく、ひとまずホッとしています。元々こちらの冷却パッドを使っていました。ゲーミング PC 向けみたいです。この動画お気に入りです。つい何度も見てしまう中毒性があります。少々デカイのが難点でしたが、冷却効果は申し分ありませんでした。ただ 2 年も使うとホコリが溜まってきます。分解は無理そうで、掃除機で吸うのも限度があります。おまけに 1 本しかないオスオス USB ケーブルがほぼ断線し、5 つあるファンのうち 2 つも回らなくなりました。ホコリさえ取れれば使い続けるモチベーションはあったのですが、それが無理なので交換するか！という気持ちになりました。今思えばエアダスター使えばよかったのかな。まあいいか...。冷却パッドは仕事用です。私は仕事で MacBook Pro 13inch (2019) を使っています。MacBook Pro はアルミの筐体全体から放熱する設計は良いのですが、一緒にキーボードまで熱くなります。激しく集中を削がれるため、やむを得ずこの手のクーラーを使っています。今回買ったクーラーの話に戻します。[ELECOM COOLER]先程書いたとおり冷却効果は申し分ありません。3 段階に調節できる風量は一番小さい 1 で十分です。ただ、風が手前に吹き付けるため、机の上にティッシュとか置いてると吹き飛ばされます。他はこんな感じです。ホコリは溜まっちゃいそうです。次溜まったらエアダスターを使ってみるか。良いところ：軽くてコンパクト。たまの出社日にも持って行けそう卓上扇風機でもあるけど、実際使っても良さそうな軽さと見た目、それに風量良くないところ：micro USB でもなく Type-C でもない謎端子。手持ちの程よい長さのケーブルを使えないスタンドの傾斜角度がおかしい。ノートパソコンの奥側をどうしても２点で支えることになる。どんな意図で設計したのだろう？それもあって中華製スマートウォッチ [2018-01-28-1] と干渉して手首が痛い。仕方がないので外してるホコリが溜まりそうで掃除も難しそう。この手の冷却器の運命なのか...それなりにうるさい。仕事だと気にならないけど、プライベートだと気になるかもそんなわけでノートパソコンクーラーにまあまあ満足したお話でした。＜おまけ＞ファンでホコリが溜まるのなら、ファンがないやつを買えば良いじゃないということで、先にこちらを買ってました。結果は大失敗。「うん、冷却台が温まったね」ってだけで冷却効果は皆無でした。返品しました。","contentSnippet":"2 年使っていた冷却パッドが寿命っぽいので、エレコムのノートパソコンクーラーを買いました。心配していた冷却効果は申し分なく、ひとまずホッとしています。元々こちらの冷却パッドを使っていました。ゲーミング PC 向けみたいです。この動画お気に入りです。つい何度も見てしまう中毒性があります。少々デカイのが難点でしたが、冷却効果は申し分ありませんでした。ただ 2 年も使うとホコリが溜まってきます。分解は無理そうで、掃除機で吸うのも限度があります。おまけに 1 本しかないオスオス USB ケーブルがほぼ断線し、5 つあるファンのうち 2 つも回らなくなりました。ホコリさえ取れれば使い続けるモチベーションはあったのですが、それが無理なので交換するか！という気持ちになりました。今思えばエアダスター使えばよかったのかな。まあいいか...。冷却パッドは仕事用です。私は仕事で MacBook Pro 13inch (2019) を使っています。MacBook Pro はアルミの筐体全体から放熱する設計は良いのですが、一緒にキーボードまで熱くなります。激しく集中を削がれるため、やむを得ずこの手のクーラーを使っています。今回買ったクーラーの話に戻します。[ELECOM COOLER]先程書いたとおり冷却効果は申し分ありません。3 段階に調節できる風量は一番小さい 1 で十分です。ただ、風が手前に吹き付けるため、机の上にティッシュとか置いてると吹き飛ばされます。他はこんな感じです。ホコリは溜まっちゃいそうです。次溜まったらエアダスターを使ってみるか。良いところ：軽くてコンパクト。たまの出社日にも持って行けそう卓上扇風機でもあるけど、実際使っても良さそうな軽さと見た目、それに風量良くないところ：micro USB でもなく Type-C でもない謎端子。手持ちの程よい長さのケーブルを使えないスタンドの傾斜角度がおかしい。ノートパソコンの奥側をどうしても２点で支えることになる。どんな意図で設計したのだろう？それもあって中華製スマートウォッチ [2018-01-28-1] と干渉して手首が痛い。仕方がないので外してるホコリが溜まりそうで掃除も難しそう。この手の冷却器の運命なのか...それなりにうるさい。仕事だと気にならないけど、プライベートだと気になるかもそんなわけでノートパソコンクーラーにまあまあ満足したお話でした。＜おまけ＞ファンでホコリが溜まるのなら、ファンがないやつを買えば良いじゃないということで、先にこちらを買ってました。結果は大失敗。「うん、冷却台が温まったね」ってだけで冷却効果は皆無でした。返品しました。","link":"https://masutaka.net/chalow/2021-05-23-1.html","isoDate":"2021-05-23T14:59:59.000Z","dateMiliSeconds":1621781999000,"authorName":"masutaka"},{"title":"スマホ専用テプラ LR30 を買った","content":"私はテプラが苦手です。あのワープロみたいなキーボードがダメ。パソコンと微妙に似ているけどちょっと違う、csh や tcsh みたいな立ち位置がダメです。← 分かりづらいでもこのテプラはスマホで文字を打てます。発表された当初から気にはなっていて、今さらながら買ってみました。6,000 円弱とそこまで高くないことと、あったら便利で邪魔にもならないと思ったからです。使った感想としては「そこまでオススメはしないけど悪くもない」です。良いところ：・Bluetooth 接続がとても楽。ペアリングが必要ない・スマホ操作なので普通のテプラよりは打ちやすい・電源が電池なので取り回しが楽。会社でコンセント探したなあ...良くないところ：・感熱プリントなので印刷が１年くらいしかもたない・同じ理由で印刷が安っぽい・良さそうな色のテープがない画像は見てのとおりオレガノです。たまたま家にあった赤ちゃん用のミルカーに入れています。これでバジリコと間違えることはないでしょう。[Tepra oregano]オレガノの容器はもっと良いのを探しています。なかなかないんだよなあ...。もし普通のテプラと同じ印刷方式と同じテープが使えて、スマホから使えて、そこそこの値段だったら買うかも。と思って改めて探したらあった・・・！(ToT) ただしアプリはヒドイみたい。","contentSnippet":"私はテプラが苦手です。あのワープロみたいなキーボードがダメ。パソコンと微妙に似ているけどちょっと違う、csh や tcsh みたいな立ち位置がダメです。← 分かりづらいでもこのテプラはスマホで文字を打てます。発表された当初から気にはなっていて、今さらながら買ってみました。6,000 円弱とそこまで高くないことと、あったら便利で邪魔にもならないと思ったからです。使った感想としては「そこまでオススメはしないけど悪くもない」です。良いところ：・Bluetooth 接続がとても楽。ペアリングが必要ない・スマホ操作なので普通のテプラよりは打ちやすい・電源が電池なので取り回しが楽。会社でコンセント探したなあ...良くないところ：・感熱プリントなので印刷が１年くらいしかもたない・同じ理由で印刷が安っぽい・良さそうな色のテープがない画像は見てのとおりオレガノです。たまたま家にあった赤ちゃん用のミルカーに入れています。これでバジリコと間違えることはないでしょう。[Tepra oregano]オレガノの容器はもっと良いのを探しています。なかなかないんだよなあ...。もし普通のテプラと同じ印刷方式と同じテープが使えて、スマホから使えて、そこそこの値段だったら買うかも。と思って改めて探したらあった・・・！(ToT) ただしアプリはヒドイみたい。","link":"https://masutaka.net/chalow/2021-05-20-1.html","isoDate":"2021-05-20T14:59:59.000Z","dateMiliSeconds":1621522799000,"authorName":"masutaka"},{"title":"Windows ノートパソコン（ASUS VivoBook S15 M533IA）を買った","content":"1 ヶ月ほど前になりますが、10 数年ぶりに Windows ノートパソコンを買いました。とても満足しています。ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）[ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）][2020-07-14-1] に iPhone から Android に乗り換えたことと関係していて、脱 Apple 計画の最終章（？）です。スペックはこんな感じです。トラックパッド右上に指紋認証用のセンサーも付いています。CPUAMD Ryzen™ 7 4700UMemory16GBStorage1TB SSDMonitor15.6inchKeyboard109 日本語（画像は 104 英語キーボード）今まで持っていたノートパソコンが Early 2014 の（！）MacBook Air だったので、めちゃめちゃ速くなりました。Ryzen いいですねー！Intel 版もあったのですが、Ryzen への興味とお値段から Ryzen にしました。そのお値段は ￥110,900 に 11,090 ヨドバシポイントが付いた形です。Amazon.co.jp は ￥99,810 だったので、Amazon.co.jp にしようかとは思いましたが、ヨドバシカメラ上野店で話しかけてきた店員さん 2 人に少しだけ敬意を払って、ヨドバシ.comで購入しました。今見たら在庫がなくなっているし、だいぶ高くなってます。ひゃー・ヨドバシ.com（￥134,150 - 13,415pt）・Amazon.co.jp（￥125,821 - 1,258pt）ここ 10 年はほぼ Apple 製品で暮らしていたので、Windows PC や CPU 事情は全く分からない人になっていました。ヨドバシカメラに視察に行ったあと、最終的にこの 3 つに絞ってうんうん考えていました。お値段はそれぞれ 20万、10万、14万と割と違います。・LG Gram 16Z90P-KA78J（インテル® Core™ i7-1165G7）・ASUS VivoBook S15 M533IA（AMD Ryzen™ 7 4700U）・ASUS VivoBook S15 S533EA（インテル® Core™ i7-1165G7）本当は英語キーボードが欲しかったのですよねえ...。でも国内だと VAIO を BTO するくらいしかないらしく、Amazon.com や eBay とか見てました。・Amazon.com > LG Gram 16Z90P-K.AAB8U1（当時約￥190,535）・Amazon.com > ASUS VivoBook S15 M533IA（売り切れ...）・Amazon.com > ASUS VivoBook S15 S533EA（当時約￥140,802）少し前なら ASUS の物理ストアにキーボード換装サービスがあったらしいです。でも去年の 8/16 をもって閉店とのこと...。それもあって Amazon.com の VivoBook S15 M533IA 売り切れは本当に涙です。仕方がないので Amazon.com で Intel 版の S533EA をポチりましたが、英語キーボードに４万円は出せないなーと思い直しキャンセル。頭を冷やして考えを整理しました。・久しぶりの Windows PC なので、失敗する可能性はある・だとしたら、敢えて一番安い選択肢を採用してみよう。経験値をためて、2~3 年後により良い機種を買えば良いし・VivoBook は４色から選べるけど、それは無視して一番安い色にする・英語キーボードも今回はこだわらない。アプリで変えれば良いだろうそうなると、ASUS VivoBook S15 M533IA インディーブラックの日本語キーボード一択です。今度は迷いなく、ヨドバシ.comでポチりました。ポチったのが 3/29（月）、届いたのがその翌日です。さすがのヨドバシエクストリームです。結果的にスペック的には大満足でした。インディーブラックも落ち着いていて悪くないです。日本語キーボードになると、スペースキーがこんなに小さくなるのは驚きました。キーボードにこだわりがある人はきついかも。Windows PC は 15inch を超えると、テンキーがつく傾向があるのかな...？全く要らない...。Windows には慣れない...。Windows をまともに使ったのは XP が最後だったので全く変わったような、Vista や 7 を考えると XP と少しは似ているような...。頑張ります！P.S.ちゃんとしたレビューはこちらの記事が良いかと。ASUS VivoBook S15 M533IA レビュー：Ryzen 7 4700U搭載の高品質15.6インチスタンダードノートPC – こまめブログ","contentSnippet":"1 ヶ月ほど前になりますが、10 数年ぶりに Windows ノートパソコンを買いました。とても満足しています。ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）[ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）][2020-07-14-1] に iPhone から Android に乗り換えたことと関係していて、脱 Apple 計画の最終章（？）です。スペックはこんな感じです。トラックパッド右上に指紋認証用のセンサーも付いています。CPUAMD Ryzen™ 7 4700UMemory16GBStorage1TB SSDMonitor15.6inchKeyboard109 日本語（画像は 104 英語キーボード）今まで持っていたノートパソコンが Early 2014 の（！）MacBook Air だったので、めちゃめちゃ速くなりました。Ryzen いいですねー！Intel 版もあったのですが、Ryzen への興味とお値段から Ryzen にしました。そのお値段は ￥110,900 に 11,090 ヨドバシポイントが付いた形です。Amazon.co.jp は ￥99,810 だったので、Amazon.co.jp にしようかとは思いましたが、ヨドバシカメラ上野店で話しかけてきた店員さん 2 人に少しだけ敬意を払って、ヨドバシ.comで購入しました。今見たら在庫がなくなっているし、だいぶ高くなってます。ひゃー・ヨドバシ.com（￥134,150 - 13,415pt）・Amazon.co.jp（￥125,821 - 1,258pt）ここ 10 年はほぼ Apple 製品で暮らしていたので、Windows PC や CPU 事情は全く分からない人になっていました。ヨドバシカメラに視察に行ったあと、最終的にこの 3 つに絞ってうんうん考えていました。お値段はそれぞれ 20万、10万、14万と割と違います。・LG Gram 16Z90P-KA78J（インテル® Core™ i7-1165G7）・ASUS VivoBook S15 M533IA（AMD Ryzen™ 7 4700U）・ASUS VivoBook S15 S533EA（インテル® Core™ i7-1165G7）本当は英語キーボードが欲しかったのですよねえ...。でも国内だと VAIO を BTO するくらいしかないらしく、Amazon.com や eBay とか見てました。・Amazon.com > LG Gram 16Z90P-K.AAB8U1（当時約￥190,535）・Amazon.com > ASUS VivoBook S15 M533IA（売り切れ...）・Amazon.com > ASUS VivoBook S15 S533EA（当時約￥140,802）少し前なら ASUS の物理ストアにキーボード換装サービスがあったらしいです。でも去年の 8/16 をもって閉店とのこと...。それもあって Amazon.com の VivoBook S15 M533IA 売り切れは本当に涙です。仕方がないので Amazon.com で Intel 版の S533EA をポチりましたが、英語キーボードに４万円は出せないなーと思い直しキャンセル。頭を冷やして考えを整理しました。・久しぶりの Windows PC なので、失敗する可能性はある・だとしたら、敢えて一番安い選択肢を採用してみよう。経験値をためて、2~3 年後により良い機種を買えば良いし・VivoBook は４色から選べるけど、それは無視して一番安い色にする・英語キーボードも今回はこだわらない。アプリで変えれば良いだろうそうなると、ASUS VivoBook S15 M533IA インディーブラックの日本語キーボード一択です。今度は迷いなく、ヨドバシ.comでポチりました。ポチったのが 3/29（月）、届いたのがその翌日です。さすがのヨドバシエクストリームです。結果的にスペック的には大満足でした。インディーブラックも落ち着いていて悪くないです。日本語キーボードになると、スペースキーがこんなに小さくなるのは驚きました。キーボードにこだわりがある人はきついかも。Windows PC は 15inch を超えると、テンキーがつく傾向があるのかな...？全く要らない...。Windows には慣れない...。Windows をまともに使ったのは XP が最後だったので全く変わったような、Vista や 7 を考えると XP と少しは似ているような...。頑張ります！P.S.ちゃんとしたレビューはこちらの記事が良いかと。ASUS VivoBook S15 M533IA レビュー：Ryzen 7 4700U搭載の高品質15.6インチスタンダードノートPC – こまめブログ","link":"https://masutaka.net/chalow/2021-05-06-1.html","isoDate":"2021-05-06T14:59:59.000Z","dateMiliSeconds":1620313199000,"authorName":"masutaka"},{"title":"『こども地政学』を読んだ","content":"以前から地政学には興味があったのでポチって読んでみました。子供向けの本で、漢字には全部ルビが振ってあります。でも大人向けの入門書としても良い気がしました。久々にさらっと読めて良い気分転換になったし、地政学の基礎の基礎を知れた気がします。日本って、ランドパワーの中国にとっては海に出ていくための邪魔な蓋でしかないのかー。追々、他の地政学の本も読んでみよう。","contentSnippet":"以前から地政学には興味があったのでポチって読んでみました。子供向けの本で、漢字には全部ルビが振ってあります。でも大人向けの入門書としても良い気がしました。久々にさらっと読めて良い気分転換になったし、地政学の基礎の基礎を知れた気がします。日本って、ランドパワーの中国にとっては海に出ていくための邪魔な蓋でしかないのかー。追々、他の地政学の本も読んでみよう。","link":"https://masutaka.net/chalow/2021-04-10-1.html","isoDate":"2021-04-10T14:59:59.000Z","dateMiliSeconds":1618066799000,"authorName":"masutaka"},{"title":"Android の TODO アプリは TickTick が鉄板かも","content":"iPhone から Android (Pixel 3a XL) に乗り換えて [2020-07-14-1]、普通に使える TODO アプリを探していました。私は基本デフォルト厨なので、Google の ToDo リスト か Google Keep で続けようと頑張りましたが、断念しました。ToDo リストは一度でも繰り返しを設定したタスクは他のリストに移動できないという、理解不能な仕様（？）でした。Google Keep は頑張って３ヶ月使いましたが、リマインダーアプリとしては xxx（伏せ字）でした。※ Note アプリとしては普通に便利なので、今も使っています。・未来のリマインダーを完了できない（早めに終わっても、その時間にならないと完了できない）・リマインダーを完了しても残る。さらにアーカイブする必要がある。Note 機能との魔合体の弊害と思われる・繰り返しのリマインダーを視界から消すのが面倒。完了してもアーカイブしてもまた現れる・他にもあったかも？そんな中行き着いたのが TickTick です。TikTok じゃないよ。とても良かったのでプレミアム会員（$27.99/year）になりましたが、無料でも十分使えます。普通のリマインダーアプリとして使える何が普通なのか難しいところですが、、こんな分類をしていると言えば分かりますかね？[TickTick のリスト]２週間毎とかのリマインダーも設定できるたまにこういうリマインダーがあるのですよね。加湿器の掃除とか。もちろん隔週や隔月なども出来ます。１時間後とかに思い出させるとかも出来るすぐ出来ない時ありますよね？そんな時にも後で思い出させてくれます。習慣づけの機能がある自分にはとても合いました。[TickTick の習慣]私はログを取るのが好きみたいで、なるべく途切れさせないように行動するようになりました。「飲酒をやめる」に至っては、今年の 1/31 以来続いています。そこまでストイックになる必要もないのですが、続けることが目的になっています。それに何もしなければ良いだけなので、この中では一番簡単です。その他私は使っていませんが、ポモドーロテクニックを支援する機能もあります。プレミアム会員用の機能かも？Android と iOS、Web など、さまざまなプラットフォームに対応しています。今使っているリマインダーアプリからの移行など、まとまった量の作業は Web 版でゴリッとやると良いかもです。あと、書き忘れましたが、私は仕事では TickTick を使ってません。プライベートだけです。仕事では Slack リマインダーや Gmail（Inbox Zero 運用、Snooze 機能）あたりでゆるふわ運用しています。仕事で使うツールはあまり増やしたくないのですよね。気にするものが増えてしまうので。Slack から Gmail に簡単に送信できれば、Gmail に集約できるんだけど...。まとめAndroid で普通の TODO アプリを求めて TickTick に行き着いたという話をしました。特に Android で TODO アプリに悩んでいる人は試すと良いと思います。無料でも十分使えますんで！","contentSnippet":"iPhone から Android (Pixel 3a XL) に乗り換えて [2020-07-14-1]、普通に使える TODO アプリを探していました。私は基本デフォルト厨なので、Google の ToDo リスト か Google Keep で続けようと頑張りましたが、断念しました。ToDo リストは一度でも繰り返しを設定したタスクは他のリストに移動できないという、理解不能な仕様（？）でした。Google Keep は頑張って３ヶ月使いましたが、リマインダーアプリとしては xxx（伏せ字）でした。※ Note アプリとしては普通に便利なので、今も使っています。・未来のリマインダーを完了できない（早めに終わっても、その時間にならないと完了できない）・リマインダーを完了しても残る。さらにアーカイブする必要がある。Note 機能との魔合体の弊害と思われる・繰り返しのリマインダーを視界から消すのが面倒。完了してもアーカイブしてもまた現れる・他にもあったかも？そんな中行き着いたのが TickTick です。TikTok じゃないよ。とても良かったのでプレミアム会員（$27.99/year）になりましたが、無料でも十分使えます。普通のリマインダーアプリとして使える何が普通なのか難しいところですが、、こんな分類をしていると言えば分かりますかね？[TickTick のリスト]２週間毎とかのリマインダーも設定できるたまにこういうリマインダーがあるのですよね。加湿器の掃除とか。もちろん隔週や隔月なども出来ます。１時間後とかに思い出させるとかも出来るすぐ出来ない時ありますよね？そんな時にも後で思い出させてくれます。習慣づけの機能がある自分にはとても合いました。[TickTick の習慣]私はログを取るのが好きみたいで、なるべく途切れさせないように行動するようになりました。「飲酒をやめる」に至っては、今年の 1/31 以来続いています。そこまでストイックになる必要もないのですが、続けることが目的になっています。それに何もしなければ良いだけなので、この中では一番簡単です。その他私は使っていませんが、ポモドーロテクニックを支援する機能もあります。プレミアム会員用の機能かも？Android と iOS、Web など、さまざまなプラットフォームに対応しています。今使っているリマインダーアプリからの移行など、まとまった量の作業は Web 版でゴリッとやると良いかもです。あと、書き忘れましたが、私は仕事では TickTick を使ってません。プライベートだけです。仕事では Slack リマインダーや Gmail（Inbox Zero 運用、Snooze 機能）あたりでゆるふわ運用しています。仕事で使うツールはあまり増やしたくないのですよね。気にするものが増えてしまうので。Slack から Gmail に簡単に送信できれば、Gmail に集約できるんだけど...。まとめAndroid で普通の TODO アプリを求めて TickTick に行き着いたという話をしました。特に Android で TODO アプリに悩んでいる人は試すと良いと思います。無料でも十分使えますんで！","link":"https://masutaka.net/chalow/2021-04-07-1.html","isoDate":"2021-04-07T14:59:59.000Z","dateMiliSeconds":1617807599000,"authorName":"masutaka"},{"title":"縦置きスタンドを買って、ノートパソコンを床に置いちゃう問題を解消した","content":"ここ１年はずっと家で仕事しているので、ノートパソコンは会社用と合わせて２台あります。最近 ASUS の Vivobook も買ったので、一時的に３台あります。そうなってくると地味に困るのが、使ってないパソコンの置き場所です。今までこういうダメな置き方をしていました。気をつけてはいますが、椅子が当たるかもしれませんし、パタンと倒れるかもしれません。[床に置く図]そこで、こんな縦置きスタンドを買いました。￥2,650 というお値段以外はとても満足しています。使ってみた図です。奥が 15.6inch の Vivobook、手前が 13inch MacBook Pro です。Vivobook はやや厚いので、付属の六角レンチで調節しました。[使ってみた図]このモデルは手前にタブレットやスマホも置けます。置いたのは 9.7inch の ZenPad です。３つ置いても、重量感があり安定しています。重さは 580g です。[タブレットも置いてみた図]サイズは 横 x 奥行き x 高さ = 15cm x 12cm x 4.8 cm なので、意外とコンパクトです。ゴムパッドも付いているので、デバイスに傷は付きづらいと思います。同じメーカーで別のモデルもあったので紹介しておきます。こちらはノートパソコン１台、タブレットまたはスマホ２台用です。奥行きが 9.5cm と多少小さいです。こちらはノートパソコン２台、タブレットまたはスマホ２台用です。大きそうに見えますが、私が買ったモデルと同じサイズです。前回のマグネットケーブルホルダー [2021-03-24-1] に引き続き、当たりを引けて良かったです。","contentSnippet":"ここ１年はずっと家で仕事しているので、ノートパソコンは会社用と合わせて２台あります。最近 ASUS の Vivobook も買ったので、一時的に３台あります。そうなってくると地味に困るのが、使ってないパソコンの置き場所です。今までこういうダメな置き方をしていました。気をつけてはいますが、椅子が当たるかもしれませんし、パタンと倒れるかもしれません。[床に置く図]そこで、こんな縦置きスタンドを買いました。￥2,650 というお値段以外はとても満足しています。使ってみた図です。奥が 15.6inch の Vivobook、手前が 13inch MacBook Pro です。Vivobook はやや厚いので、付属の六角レンチで調節しました。[使ってみた図]このモデルは手前にタブレットやスマホも置けます。置いたのは 9.7inch の ZenPad です。３つ置いても、重量感があり安定しています。重さは 580g です。[タブレットも置いてみた図]サイズは 横 x 奥行き x 高さ = 15cm x 12cm x 4.8 cm なので、意外とコンパクトです。ゴムパッドも付いているので、デバイスに傷は付きづらいと思います。同じメーカーで別のモデルもあったので紹介しておきます。こちらはノートパソコン１台、タブレットまたはスマホ２台用です。奥行きが 9.5cm と多少小さいです。こちらはノートパソコン２台、タブレットまたはスマホ２台用です。大きそうに見えますが、私が買ったモデルと同じサイズです。前回のマグネットケーブルホルダー [2021-03-24-1] に引き続き、当たりを引けて良かったです。","link":"https://masutaka.net/chalow/2021-04-04-1.html","isoDate":"2021-04-04T14:59:59.000Z","dateMiliSeconds":1617548399000,"authorName":"masutaka"},{"title":"Anker のマグネットケーブルホルダーを使って、ケーブルが下に落ちちゃう問題を解消できた","content":"今まではこんなんでした。3 本のケーブルを洗濯バサミ（）でまとめて、Anker の USB 急速充電器に引っかけています。かろうじて落ちません。すみません嘘つきました。たまに落ちます。[購入前]Anker のマグネットケーブルホルダーを使えばアラすっきり！少し様子がおかしいのは気にしない。[購入後]付属のクリップでケーブルを挟み込んで、台座に磁石で付く仕組みなのですが、直径 3.5mm 以下という制約がなかなかキツイ。今どき珍しい Mini DisplayPort ケーブルは無理だったので、別のクリップで凌ぎました。こちらの記事を見て買いました。商品レビューはこちらを見たほうが良いと思います。Ankerの「マグネットケーブルホルダー」を使い始めたら、デスクワークの快適性が格段に向上しちゃいました｜ROOMIE（ルーミー）","contentSnippet":"今まではこんなんでした。3 本のケーブルを洗濯バサミ（）でまとめて、Anker の USB 急速充電器に引っかけています。かろうじて落ちません。すみません嘘つきました。たまに落ちます。[購入前]Anker のマグネットケーブルホルダーを使えばアラすっきり！少し様子がおかしいのは気にしない。[購入後]付属のクリップでケーブルを挟み込んで、台座に磁石で付く仕組みなのですが、直径 3.5mm 以下という制約がなかなかキツイ。今どき珍しい Mini DisplayPort ケーブルは無理だったので、別のクリップで凌ぎました。こちらの記事を見て買いました。商品レビューはこちらを見たほうが良いと思います。Ankerの「マグネットケーブルホルダー」を使い始めたら、デスクワークの快適性が格段に向上しちゃいました｜ROOMIE（ルーミー）","link":"https://masutaka.net/chalow/2021-03-24-1.html","isoDate":"2021-03-24T14:59:59.000Z","dateMiliSeconds":1616597999000,"authorName":"masutaka"},{"title":"現在の GitHub flow は v2 かな？","content":"@kyanny さんの記事を自分なりに整理してみる。ずっと「マージした後にメインブランチを production デプロイする」というワークフローだと勘違いしていた。昔は「マージ後にデプロイ」だったが、いつの頃からか「マージ前にデプロイ」に変わったらしい。どこかでそんな話は聞いていたけど、実際のところはどうなんだろう？と以前から疑問だった。やっぱりそうだったか。現在の GitHub flowというか、GiHub の公式ガイドにそのものズバリ書いてあったのね。灯台下暗し...。Understanding the GitHub flow · GitHub Guides\">\" を数回クリックし、\"Deploy\" に進むと書いてある。With GitHub, you can deploy from a branch for final testing in production before merging to main.main ブランチにマージする前に、最後の確認をするために本番環境にデプロイする。If your branch causes issues, you can roll it back by deploying the existing main branch into production.もし問題が発生したら、main ブランチを本番環境にデプロイすることでロールバック出来る。main ブランチの protection rule は \"Require branches to be up to date before merging\" を有効にしているのかな。いずれにせよ、main ブランチの commit 全部入りのブランチをデプロイしているはず。以前の GitHub flow2011/8/31 の GitHub Flow – Scott Chacon にまとまっている。この頃の GitHub は従業員 35 人だったそう。\"we can merge it into master for deployment\" とあるので、この頃は確かに master ブランチにマージしたあとにデプロイしていたようだ。自分なりの整理Git は元々 Linux カーネルのバージョン管理をするためのツールとして開発された。その Linux カーネルの開発ではその性質上、Git Flow という重厚なブランチ戦略が使われていた。GitHub flow は Web アプリケーションに合った軽量なブランチ戦略として誕生し、時を経てその内容も変わっていた。以前の GitHub flow を v1、現在の GitHub flow を v2 と勝手にバージョニングすることにした。P.S.Apple っぽくするのだったら「新しい GitHub flow」なのかな？(^^;追記(2021-03-15):会社の同僚から「main（デフォルト）ブランチを常にリリース可能な状態に保つ」というルールが守られていれば、それが広義の GitHub flow でいいんじゃない？みたいな話を聞きました。なるほど。","contentSnippet":"@kyanny さんの記事を自分なりに整理してみる。ずっと「マージした後にメインブランチを production デプロイする」というワークフローだと勘違いしていた。昔は「マージ後にデプロイ」だったが、いつの頃からか「マージ前にデプロイ」に変わったらしい。どこかでそんな話は聞いていたけど、実際のところはどうなんだろう？と以前から疑問だった。やっぱりそうだったか。現在の GitHub flowというか、GiHub の公式ガイドにそのものズバリ書いてあったのね。灯台下暗し...。Understanding the GitHub flow · GitHub Guides\">\" を数回クリックし、\"Deploy\" に進むと書いてある。With GitHub, you can deploy from a branch for final testing in production before merging to main.main ブランチにマージする前に、最後の確認をするために本番環境にデプロイする。If your branch causes issues, you can roll it back by deploying the existing main branch into production.もし問題が発生したら、main ブランチを本番環境にデプロイすることでロールバック出来る。main ブランチの protection rule は \"Require branches to be up to date before merging\" を有効にしているのかな。いずれにせよ、main ブランチの commit 全部入りのブランチをデプロイしているはず。以前の GitHub flow2011/8/31 の GitHub Flow – Scott Chacon にまとまっている。この頃の GitHub は従業員 35 人だったそう。\"we can merge it into master for deployment\" とあるので、この頃は確かに master ブランチにマージしたあとにデプロイしていたようだ。自分なりの整理Git は元々 Linux カーネルのバージョン管理をするためのツールとして開発された。その Linux カーネルの開発ではその性質上、Git Flow という重厚なブランチ戦略が使われていた。GitHub flow は Web アプリケーションに合った軽量なブランチ戦略として誕生し、時を経てその内容も変わっていた。以前の GitHub flow を v1、現在の GitHub flow を v2 と勝手にバージョニングすることにした。P.S.Apple っぽくするのだったら「新しい GitHub flow」なのかな？(^^;追記(2021-03-15):会社の同僚から「main（デフォルト）ブランチを常にリリース可能な状態に保つ」というルールが守られていれば、それが広義の GitHub flow でいいんじゃない？みたいな話を聞きました。なるほど。","link":"https://masutaka.net/chalow/2021-03-15-1.html","isoDate":"2021-03-15T14:59:59.000Z","dateMiliSeconds":1615820399000,"authorName":"masutaka"},{"title":"全ての esa 新着記事を読みきれないので、最近はこの方法を使ってる","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近好きな YouTuber はシバターです。シバターかわいいよ...。シバター...</p>\n\n<p>フィードフォースでは先日紹介したとおり、ドキュメント共有ツールに <a href=\"https://esa.io/\">esa</a> を使っています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F02%2F03%2F110000\" title=\"変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>メンバー数は 90、デイリーアクティブメンバーは 69 くらいです。2/10 の新着記事数は 106 でした。情報共有が活発な会社で、体感でもとても多いです。</p>\n\n<p>全ての新着記事と記事へのコメントは Slack の <code>#esa-notify</code> に通知されます。そこを全部読めば追えはしますが、いかんせんこの数です。</p>\n\n<p>真面目に全部読むと、私の場合はかける時間に見合わないなと感じたので、最近は esa の検索を利用した方法を使っています。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使っている方法\">使っている方法</a><ul>\n            <li><a href=\"#フォローした人の新着記事を読む\">フォローした人の新着記事を読む</a></li>\n            <li><a href=\"#エゴサーチする\">エゴサーチする</a></li>\n            <li><a href=\"#気になるキーワードに言及した新着記事を読む\">気になるキーワードに言及した新着記事を読む</a></li>\n            <li><a href=\"#日報以外の最近更新された記事を読む\">日報以外の最近更新された記事を読む</a></li>\n            <li><a href=\"#直近の記事を読む\">直近の記事を読む</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#公式ドキュメント\">公式ドキュメント</a></li>\n    <li><a href=\"#ちょっとした悩み\">ちょっとした悩み</a></li>\n    <li><a href=\"#所感\">所感</a></li>\n    <li><a href=\"#おまけ-ボツにした方法\">おまけ: ボツにした方法</a></li>\n</ul>\n\n<h2 id=\"使っている方法\">使っている方法</h2>\n\n<h3 id=\"フォローした人の新着記事を読む\">フォローした人の新着記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>@alice OR @bob OR @sapp sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=%40alice+OR+%40bob+OR+%40sapp+sort%3Acreated-desc\">Follow</a></p>\n\n<p>上の例では alice, bob, sapp をフォローしているイメージです。</p>\n\n<p>社長やプロダクトオーナーをフォローして、最近の会社の状況を把握するようにしています。他、自分が関心がある人もフォローしています。</p>\n\n<p>メンバーは固定ではなくたまに入れ替えます。現在 16 人をフォローしています。</p>\n\n<h3 id=\"エゴサーチする\">エゴサーチする</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>マスタカ -@me OR ますたか -@me OR masutaka -@me OR 増田 -@me sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=%E3%83%9E%E3%82%B9%E3%82%BF%E3%82%AB+-%40me+OR+%E3%81%BE%E3%81%99%E3%81%9F%E3%81%8B+-%40me+OR+masutaka+-%40me+OR+%E5%A2%97%E7%94%B0+-%40me+sort%3Acreated-desc\">Egosearch</a></p>\n\n<p>「マスタカ」「ますたか」「masutaka」「増田」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>\n\n<p>空メンション <code>masutaka</code> やアイコン絵文字 <code>:@masutaka:</code>、<code>&lt;!-- Boku ha masutaka nari. --&gt;</code> のような HTML コメントも捕捉出来ます。👁</p>\n\n<h3 id=\"気になるキーワードに言及した新着記事を読む\">気になるキーワードに言及した新着記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>looker -@me sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=looker+-%40me+sort%3Acreated-desc\">Search Looker</a></p>\n\n<p>「looker」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>\n\n<h3 id=\"日報以外の最近更新された記事を読む\">日報以外の最近更新された記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>-category:日報 sort:updated-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=-category%3A%E6%97%A5%E5%A0%B1+sort%3Aupdated-desc\">日報以外</a></p>\n\n<p><code>日報/</code> カテゴリ以外で、最近更新された記事をたまに読んでいます。新着記事でないことがポイントです。良さそうな WIP 記事を先取りできることがあります。🤗</p>\n\n<h3 id=\"直近の記事を読む\">直近の記事を読む</h3>\n\n<p>退勤後とかは、新着記事一覧 <code>/posts</code> も見ます。</p>\n\n<h2 id=\"公式ドキュメント\">公式ドキュメント</h2>\n\n<p>ここまで使った検索クエリは、公式ドキュメント「<a href=\"https://docs.esa.io/posts/104\">help/記事の検索方法</a>」に書かれています。</p>\n\n<p>OR 検索よりも AND 検索のほうが優先度が高いとは書かれていないので、行間を読む必要があります。括弧は使えないので、前述の「エゴサーチする」は自分にとって難易度が高かったです。</p>\n\n<p>esa の皆様、その節はサポートありがとうございました。🙏</p>\n\n<h2 id=\"ちょっとした悩み\">ちょっとした悩み</h2>\n\n<p>スマホだと「フォローした人の新着記事を読む」が検索対象のメンバーアイコンで埋まるので、結構スクロールしないと記事にたどり着けません。メンバーアイコンと記事の境界も曖昧で、スクロールしすぎることがあります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"スマホだと数スクロールがメンバーアイコンで埋まる\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210211/20210211183124.png\" alt=\"f:id:masutaka26:20210211183124p:plain\" width=\"200\" height=\"400\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>スマホだと数スクロールがメンバーアイコンで埋まる</figcaption></figure></p>\n\n<p>もう少しメンバーアイコンのサイズが小さいと良いと思います。ﾁﾗｯﾁﾗｯ</p>\n\n<h2 id=\"所感\">所感</h2>\n\n<p>全ての新着記事を読む代わりに、テーマを決めた複数の方法で esa 記事を読み、かける時間を減らしました。２ヶ月ほど使っており、なかなか満足しています。</p>\n\n<p>ただ、関心外のことが入って来づらくなることは、特にこのフルリモートワーク下では怖さを感じます。</p>\n\n<p>カッチリやらずに、たまに <code>#esa-notify</code> を覗けばよいのですけどね。記事へのコメントだけを通知する Slack チャンネルでも作れば良いのかしら？</p>\n\n<h2 id=\"おまけ-ボツにした方法\">おまけ: ボツにした方法</h2>\n\n<p>コメントもエゴサーチしようとしましたが、なんか期待通りの振る舞いではなかったです。</p>\n\n<pre><code>comment:マスタカ OR comment:ますたか OR comment:masutaka OR comment:増田 sort:created-desc\n</code></pre>\n\n<p>コメント本文はきちんと検索出来ているようですが、検索結果はあくまで（コメント単位ではなく）記事単位なので、すでに読んだ記事のことが多いからかな？</p>\n\n<p>他の方法で網羅できているようなので、まあいいかあと思いました。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近好きな YouTuber はシバターです。シバターかわいいよ...。シバター...フィードフォースでは先日紹介したとおり、ドキュメント共有ツールに esa を使っています。メンバー数は 90、デイリーアクティブメンバーは 69 くらいです。2/10 の新着記事数は 106 でした。情報共有が活発な会社で、体感でもとても多いです。全ての新着記事と記事へのコメントは Slack の #esa-notify に通知されます。そこを全部読めば追えはしますが、いかんせんこの数です。真面目に全部読むと、私の場合はかける時間に見合わないなと感じたので、最近は esa の検索を利用した方法を使っています。使っている方法フォローした人の新着記事を読むエゴサーチする気になるキーワードに言及した新着記事を読む日報以外の最近更新された記事を読む直近の記事を読む公式ドキュメントちょっとした悩み所感おまけ: ボツにした方法使っている方法フォローした人の新着記事を読む検索クエリの例:@alice OR @bob OR @sapp sort:created-desc🔖 ブラウザのブックマーク: Follow上の例では alice, bob, sapp をフォローしているイメージです。社長やプロダクトオーナーをフォローして、最近の会社の状況を把握するようにしています。他、自分が関心がある人もフォローしています。メンバーは固定ではなくたまに入れ替えます。現在 16 人をフォローしています。エゴサーチする検索クエリの例:マスタカ -@me OR ますたか -@me OR masutaka -@me OR 増田 -@me sort:created-desc🔖 ブラウザのブックマーク: Egosearch「マスタカ」「ますたか」「masutaka」「増田」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。空メンション masutaka やアイコン絵文字 :@masutaka:、<!-- Boku ha masutaka nari. --> のような HTML コメントも捕捉出来ます。👁気になるキーワードに言及した新着記事を読む検索クエリの例:looker -@me sort:created-desc🔖 ブラウザのブックマーク: Search Looker「looker」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。日報以外の最近更新された記事を読む検索クエリの例:-category:日報 sort:updated-desc🔖 ブラウザのブックマーク: 日報以外日報/ カテゴリ以外で、最近更新された記事をたまに読んでいます。新着記事でないことがポイントです。良さそうな WIP 記事を先取りできることがあります。🤗直近の記事を読む退勤後とかは、新着記事一覧 /posts も見ます。公式ドキュメントここまで使った検索クエリは、公式ドキュメント「help/記事の検索方法」に書かれています。OR 検索よりも AND 検索のほうが優先度が高いとは書かれていないので、行間を読む必要があります。括弧は使えないので、前述の「エゴサーチする」は自分にとって難易度が高かったです。esa の皆様、その節はサポートありがとうございました。🙏ちょっとした悩みスマホだと「フォローした人の新着記事を読む」が検索対象のメンバーアイコンで埋まるので、結構スクロールしないと記事にたどり着けません。メンバーアイコンと記事の境界も曖昧で、スクロールしすぎることがあります。スマホだと数スクロールがメンバーアイコンで埋まるもう少しメンバーアイコンのサイズが小さいと良いと思います。ﾁﾗｯﾁﾗｯ所感全ての新着記事を読む代わりに、テーマを決めた複数の方法で esa 記事を読み、かける時間を減らしました。２ヶ月ほど使っており、なかなか満足しています。ただ、関心外のことが入って来づらくなることは、特にこのフルリモートワーク下では怖さを感じます。カッチリやらずに、たまに #esa-notify を覗けばよいのですけどね。記事へのコメントだけを通知する Slack チャンネルでも作れば良いのかしら？おまけ: ボツにした方法コメントもエゴサーチしようとしましたが、なんか期待通りの振る舞いではなかったです。comment:マスタカ OR comment:ますたか OR comment:masutaka OR comment:増田 sort:created-descコメント本文はきちんと検索出来ているようですが、検索結果はあくまで（コメント単位ではなく）記事単位なので、すでに読んだ記事のことが多いからかな？他の方法で網羅できているようなので、まあいいかあと思いました。","link":"https://developer.feedforce.jp/entry/2021/02/15/110000","isoDate":"2021-02-15T02:00:00.000Z","dateMiliSeconds":1613354400000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210212/20210212181026.png","authorName":"masutaka"},{"title":"変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。夜の散歩（意味深）に勤しむ毎日です。</p>\n\n<p>フィードフォースではドキュメント共有ツールには <a href=\"https://esa.io/\">esa</a> と <a href=\"https://www.google.com/intl/ja/docs/about/\">Google ドキュメント</a><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>を、コミュニケーションツールには <a href=\"https://slack.com/\">Slack</a> を採用しています。</p>\n\n<p>情報共有はかなり活発で、2021/2/1 現在の esa 記事数は 81,324 です<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#現在のカテゴリ構成と課題\">現在のカテゴリ構成と課題</a></li>\n    <li><a href=\"#チームのスピードを上げるための大原則\">チームのスピードを上げるための大原則</a></li>\n    <li><a href=\"#チームのスピードを上げるための情報整理\">チームのスピードを上げるための情報整理</a><ul>\n            <li><a href=\"#1-Flow-型と-Stock-型の記事を理解する\">1. Flow 型と Stock 型の記事を理解する</a></li>\n            <li><a href=\"#2-基本は-Flow-型の記事にする\">2. 基本は Flow 型の記事にする</a></li>\n            <li><a href=\"#3-議事録カテゴリは出来るだけ作らない\">3. 議事録カテゴリは出来るだけ作らない</a></li>\n            <li><a href=\"#4-Slack-に流れていく情報も-Flow-型の記事にする\">4. Slack に流れていく情報も Flow 型の記事にする</a></li>\n            <li><a href=\"#5-使い続けられる情報を-Stock-記事として引き上げる\">5. 使い続けられる情報を Stock 記事として引き上げる</a></li>\n            <li><a href=\"#6-整理を頑張らないことで整理の難易度が低くなった\">6. 整理を頑張らないことで整理の難易度が低くなった</a></li>\n            <li><a href=\"#7-esa-を全ての情報の起点にする\">7. esa を全ての情報の起点にする</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#それをチームでやるのは難しすぎない\">それをチームでやるのは難しすぎない？</a></li>\n    <li><a href=\"#esa-は難しい\">esa は難しい</a></li>\n    <li><a href=\"#esa-の本当の正体\">esa の本当の正体</a></li>\n    <li><a href=\"#esa-への要望\">esa への要望</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#esa-公式アカウントからのアドバイス\">esa 公式アカウントからのアドバイス</a></li>\n    <li><a href=\"#コラム\">コラム</a><ul>\n            <li><a href=\"#記事のカテゴリ整理を頑張らない理由\">記事のカテゴリ整理を頑張らない理由</a></li>\n            <li><a href=\"#Flow-カテゴリをどこまで許容するか\">Flow カテゴリをどこまで許容するか</a></li>\n        </ul>\n    </li>\n</ul>\n\n<h2 id=\"現在のカテゴリ構成と課題\">現在のカテゴリ構成と課題</h2>\n\n<p>トップカテゴリは厳密にルール化されていて、これらの種類以外のカテゴリが増えることはありません。</p>\n\n<ul>\n<li><code>日報/</code>\n\n<ul>\n<li><code>2021/02/01 (月)/masutaka</code> といった記事が置かれる</li>\n<li>曜日がないなど、型から外れた日報は小人さんによって速やかに修正される。Bot 並に早いw</li>\n</ul>\n</li>\n<li><code>プロダクト1/</code>\n\n<ul>\n<li>実際には <code>Feedmatic</code> などのプロダクト名が入る</li>\n</ul>\n</li>\n<li>︙</li>\n<li><code>プロダクトN/</code></li>\n<li><code>プロジェクト/</code>\n\n<ul>\n<li>期間が決まっている系のプロジェクトカテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>チーム/</code>\n\n<ul>\n<li>人事や情報セキュリティなどのチーム系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>コミュニティ/</code>\n\n<ul>\n<li>技術系や読書会などのコミュニティ系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>ノウハウ/</code>\n\n<ul>\n<li>各種ツールのノウハウ系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>Feedforce Inc./</code>\n\n<ul>\n<li>会社全体に関係する記事が置かれる</li>\n</ul>\n</li>\n<li><code>Users/</code></li>\n<li><code>Templates/</code></li>\n<li><code>Archived/</code></li>\n</ul>\n\n\n<p>例えば「プロダクト1」の下は、議事録系を除き基本的に <a href=\"https://docs.esa.io/posts/298\">Stock 型の記事</a>になっており、「マニュアル」カテゴリの下にはさらに 15 の子カテゴリが生えているとします。</p>\n\n<ul>\n<li><code>プロダクト1/</code>\n\n<ul>\n<li><code>議事録/</code></li>\n<li><code>開発/</code></li>\n<li><code>コンサルティング/</code></li>\n<li><code>マーケティング/</code></li>\n<li><code>インシデント/</code></li>\n<li><code>ナレッジ/</code></li>\n<li><code>マニュアル/</code>\n\n<ul>\n<li>子カテゴリ数は 15</li>\n</ul>\n</li>\n<li>︙</li>\n<li><code>その他/</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>※ 複数のプロダクトから作った架空カテゴリです。</p>\n\n<p>ここまでならよく整理されているように見えますが、実際は古くてメンテナンスされていない記事が多く、言ってしまえばノイズが多い状況です。情報共有されればされるほど、ノイズが増えてしまう悪循環です。</p>\n\n<p>Slack に目を向けると、こちらもオープンではありますが、時にブログ記事並みのメッセージが投稿されることがあります。未読メッセージを読み進めると手が止まり、読み切るのが難しいと想像されます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ブログ記事並みのメッセージ例。これで半分です。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210202/20210202171748.png\" alt=\"f:id:masutaka26:20210202171748p:plain\" width=\"800\" height=\"674\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ブログ記事並みのメッセージ例。これで半分です。</figcaption></figure></p>\n\n<p>細切れの情報も多く川の流れのようで、断片化した情報をつなぎ合わせるのは難しいと思います。</p>\n\n<p>世の中には情報共有が足りないことに悩む組織は多いと思いますが、活発になったとしても、適切に整理されていなければその量に溺れてしまいます。</p>\n\n<p>一方で、最近のコロナ禍もあって 10 年前と今とでは変化のスピードは上がっています。変化に強いチーム設計、つまりは変化に強い情報整理設計が重要です。これをやらなければ、チームのスピードは徐々に下がっていくでしょう。</p>\n\n<h2 id=\"チームのスピードを上げるための大原則\">チームのスピードを上げるための大原則</h2>\n\n<p>私が社内で様々なプロダクトを渡り歩いた経験上、チームのスピードを上げるためには以下の 2 点が重要だと感じています。</p>\n\n<ul>\n<li>ノイズを減らす</li>\n<li>情報を一ヶ所に集める</li>\n</ul>\n\n\n<p>マネージャーはこれらの阻害要因を減らす仕掛けを作る必要があります。</p>\n\n<p>ただ、そういったことが得意な方ばかりではありません。むしろ情報量が一番多く、一番困っているのは彼らかもしれません。マネージャーに余裕がなければ、それがボトルネックとなりチームのスピードが下がります。</p>\n\n<p>これからその対策を考察していきます。</p>\n\n<h2 id=\"チームのスピードを上げるための情報整理\">チームのスピードを上げるための情報整理</h2>\n\n<p>はじめに書いておくと、出来るだけ整理を頑張らないことが重要です。</p>\n\n<h3 id=\"1-Flow-型と-Stock-型の記事を理解する\">1. Flow 型と Stock 型の記事を理解する</h3>\n\n<p>まずは公式ドキュメント「<a href=\"https://docs.esa.io/posts/298\">記事のストック・フローの分類と検索</a>」を読んで、Flow 型と Stock 型の記事の存在を知り、理解します。</p>\n\n<h3 id=\"2-基本は-Flow-型の記事にする\">2. 基本は Flow 型の記事にする</h3>\n\n<p>全て Flow 型にするくらいの気持ちで記事を作ります。記事が多くなっても視界に入りづらいし、整理する必要もないためです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Flow 型記事の例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131224825.png\" alt=\"f:id:masutaka26:20210131224825p:plain\" width=\"1024\" height=\"309\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Flow 型記事の例</figcaption></figure></p>\n\n<p>書き捨ての記事であれば <code>プロダクト1/2021/02/01/タイトル</code>、今月中は更新する記事であれば <code>プロダクト1/2021/02/タイトル</code> で良いと思います。ただ、さすがに今年中更新する記事は Stock 型の記事にしたほうが良いと思います。</p>\n\n<h3 id=\"3-議事録カテゴリは出来るだけ作らない\">3. 議事録カテゴリは出来るだけ作らない</h3>\n\n<p><code>プロダクト1/議事録/</code> のような議事録カテゴリはできるだけ作らず、<code>プロダクト1/2021/02/01/〇〇会議 議事録</code> のようなカテゴリとタイトルにします。議事録のような使い続けない記事を視界に入れるのは、どちらかと言えばノイズだからです。</p>\n\n<p>社内で以下のような階層をよく見かけますが<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>、一回限りの会議の置き場所に悩んでしまいます。</p>\n\n<ul>\n<li><code>プロダクト1/議事録/</code>\n\n<ul>\n<li><code>〇〇会議/YYYY/MM/DD/〇〇会議</code></li>\n<li><code>プランニング/YYYY/MM/DD/プランニング</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p><code>プロダクト1/議事録/20210201 〇×会議 議事録</code> のような自由なパターンも現れたりして、さらに悩ましくなります。</p>\n\n<p>過去の議事録をたどる目的でカテゴリを分けたいのであれば、記事の最初に「議事録一覧はこちら」みたいな検索リンクがあれば十分でしょう。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"「議事録一覧はこちら」の一例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210203/20210203114624.png\" alt=\"f:id:masutaka26:20210203114624p:plain\" width=\"800\" height=\"274\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>「議事録一覧はこちら」の一例</figcaption></figure></p>\n\n<p>それでも作りたい場合は <code>プロダクト1/議事録/〇〇会議/2021/02/01/〇〇会議 議事録</code> のような記事名にして、後から <code>プロダクト1/2021/02/01/〇〇会議 議事録</code> に一括変換して視界から消せるように、設計するのが良いと思います。</p>\n\n<p>一括変換の仕方は公式ドキュメント「<a href=\"https://docs.esa.io/posts/207\">記事のカテゴリを一括変更</a>」が分かりやすいです。</p>\n\n<h3 id=\"4-Slack-に流れていく情報も-Flow-型の記事にする\">4. Slack に流れていく情報も Flow 型の記事にする</h3>\n\n<p>Slack にはブログ記事並みのメッセージが投稿されることがあります。</p>\n\n<p>そうなりそうになったら迷わず <code>プロダクト1/2021/02/01/○○のお願い</code> といった Flow 型の記事を作り、その URL を Slack で共有します。</p>\n\n<p>他の場面で引用したい時は意外とあるものですし、内容をあとで更新したいこともあります。Slack だと特にあとからの更新には不向きです。</p>\n\n<p>何より当該記事をブラウザで開き、残りの Slack 未読メッセージをスイスイと読むことが出来ます。Slack に投稿されてしまうと、その長いメッセージを読みながら、他の channel に移動するのは億劫です。</p>\n\n<h3 id=\"5-使い続けられる情報を-Stock-記事として引き上げる\">5. 使い続けられる情報を Stock 記事として引き上げる</h3>\n\n<p>結局のところ、ほとんどの情報は使い続けることはありません。具体的すぎるからです。そのような具体的な情報は寝かすことで、抽象度の高い情報、例えばカテゴリ名を炙り出せることがあります。</p>\n\n<p>良いカテゴリ名が思いつかない時は、まだ抽象度が高くないと思うので、引き上げないほうが良いでしょう。</p>\n\n<p>いくつかの Flow 記事をしばらく寝かしたら、あとから汎用的な抽象度の高い Stock 記事のアイディアが湧くこともあります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"あとで Stock 記事として抽出する\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210201/20210201002905.png\" alt=\"f:id:masutaka26:20210201002905p:plain\" width=\"250\" height=\"466\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></figure></p>\n\n<h3 id=\"6-整理を頑張らないことで整理の難易度が低くなった\">6. 整理を頑張らないことで整理の難易度が低くなった</h3>\n\n<p>ここまででほとんどの記事は Flow 型の記事のはずです。冒頭に述べたノイズになるような記事は少なく、情報に溺れる確率は低いと思います。</p>\n\n<p>使い回しが効かない具体的な情報を Flow 型の記事に追いやることで、整理の難易度を低くすることが出来ました。</p>\n\n<h3 id=\"7-esa-を全ての情報の起点にする\">7. esa を全ての情報の起点にする</h3>\n\n<p>では、Google ドキュメントも同じようにしましょう！とは思っていません。esa を全ての情報の起点にする勢いで、適宜 Google ドキュメントにリンクを張ると良いでしょう。</p>\n\n<p>Google ドキュメントのフォルダ整理は出来るだけやらないほうが良いです。時間がいくらあっても足りません。Google Drive はただの情報プールです。Google Drive 内検索も優秀です。</p>\n\n<h2 id=\"それをチームでやるのは難しすぎない\">それをチームでやるのは難しすぎない？</h2>\n\n<p>そう思った方、正しい感覚です。</p>\n\n<p>「チームのスピードを上げるための情報整理」は「私が考える esa 原理主義」に振り切って書きました。情報整理のスキルに関して少数精鋭チームでないと、運用するのは難しいと思います。</p>\n\n<p>現在私は開発者 1 人、ビジネスメンバー 2 人のチームに所属しています。私主導でカテゴリを決めているので、これまで書いた方法で整理し、うまくいっている実感があります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Flow 型の記事に対して、Stock 型の記事を少なく保てている\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231051.png\" alt=\"f:id:masutaka26:20210131231051p:plain\" width=\"250\" height=\"373\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Flow 型の記事に対して、Stock 型の記事を少なく保てている。</figcaption></figure></p>\n\n<p>そういえば初期は Flow 型の記事しか作りませんでした。</p>\n\n<h2 id=\"esa-は難しい\">esa は難しい</h2>\n\n<p>フィードフォースでは 1 年半ほど前まで Qiita:Team を使っていました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F08%2F22%2F141055\" title=\"社内の情報共有ツールを Qiita:Team から esa に乗り換えました - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>Qiita:Team はほぼ Flow 型の記事しか書けないため、これまで話した問題は出てきませんでした。いや「表面化しなかった」が正確でしょう。</p>\n\n<p>esa は Stock 型の記事も書けます。ブログと wiki が合体したようなツールなので、難しくないわけがありません。</p>\n\n<p>wiki を書くためには抽象的思考が必要です。私の観測範囲では、半分以上の方は具体的思考に寄り過ぎているため、得意ではないという実感です。意識したことがないかもしれません。</p>\n\n<h2 id=\"esa-の本当の正体\">esa の本当の正体</h2>\n\n<p>正直言って現在の esa は「情報整理のスキルに関して少数精鋭チーム」でないと、乗りこなすのは難しいと思います。</p>\n\n<p>これに気づいた時、Ruby という言語に似ていると思いました。</p>\n\n<p>Ruby は esa で採用されているプログラミング言語です。初心者はにこやかに迎えてくれますが、本番環境で使い続けるためには、コードで表現されていない振る舞いを読み解く必要があるなど、実は少数精鋭チーム向けの言語です。</p>\n\n<p><a href=\"https://team.esa.io/\">esa LLC</a> は少数精鋭チームのようなので、良くも悪くも「コンウェイの法則」が働いて、そのようなサービスになったのだと勝手に想像します。</p>\n\n<h2 id=\"esa-への要望\">esa への要望</h2>\n\n<p>社員数 100 人オーバーが見えてくると、型（制約）の必要性を感じます。</p>\n\n<ul>\n<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？\n\n<ul>\n<li>例: <code>プロダクト1/</code> 以下での新規作成は、デフォルトカテゴリが <code>プロダクト1/YYYY/MM/DD/</code> になる</li>\n</ul>\n</li>\n<li>フレームワーク的に、何らかのパターン以外のカテゴリを作れないようにする？</li>\n<li>第一階層カテゴリ以下で、そのようなパターンを数種類から選べるようにする？</li>\n</ul>\n\n\n<p>どれも難しい話ですかね...？</p>\n\n<p>現在社内で抱えている課題として「記事整理にハードルがある」は間違いなくあると思います。</p>\n\n<ul>\n<li>たくさんの記事を移動すると、<code>/posts</code> がその情報で埋まる<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></li>\n<li>移動しただけなのに、記事に自分の小さなアイコンが付く</li>\n<li>そもそも記事を 1 つ 1 つ移動するのが大変</li>\n<li>タイトルに入れてしまった日付をカテゴリにして...とかまですると、API を使わざるを得ない</li>\n</ul>\n\n\n<p>出来れば Windows のエクスプローラのようなカジュアルさで、且つ履歴が残るとうれしいです。</p>\n\n<p>あと、要望したことはありますが、現在の「カテゴリ以下の記事全て」に加えて、「カテゴリ直下の記事」「アーカイブした記事」を切り替えるような機能が欲しいです。</p>\n\n<p>イメージとしては、GitHub の UI に「カテゴリ直下の記事」を加えたものです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"In, On, Archived を切り替えられるイメージ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231704.png\" alt=\"f:id:masutaka26:20210131231704p:plain\" width=\"400\" height=\"55\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>In, On, Archived を切り替えられるイメージ</figcaption></figure></p>\n\n<p>「カテゴリ直下の記事」は <code>on:カテゴリ</code> で検索できますが、知っているユーザーはごく僅かです。</p>\n\n<p>アーカイブの認知も怪しくて、古い記事が残る要因かもしれません。一部カテゴリではこんな工夫をしています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"アーカイブという手段を認知させている例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131232059.png\" alt=\"f:id:masutaka26:20210131232059p:plain\" width=\"800\" height=\"438\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>アーカイブという手段を認知させている例</figcaption></figure></p>\n\n<p>難しいと思いますが、情報整理のスキルがそれほど高くなくても使える UI 設計をお願いしたいところです。🙏</p>\n\n<p>もし、もっと詳しく私にヒアリングしたいなどあれば、masutaka@feedforce.jp または <a href=\"https://twitter.com/masutaka\">@masutaka</a> の DM までお知らせ下さい。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>私から見える、フィードフォースで抱えている情報整理の課題をまとめ、チームのスピードを上げるための整理方法を提案しました。</p>\n\n<p>ただ、それは「私が考える esa 原理主義」に振り切っているため、チームで採用するのは難しいと思います。</p>\n\n<p>カテゴリがデフォルト Flow 型になるなど、情報整理を頑張らず済む使い勝手になると、とてもうれしいです。</p>\n\n<h2 id=\"esa-公式アカウントからのアドバイス\">esa 公式アカウントからのアドバイス</h2>\n\n<blockquote><ul>\n<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？</li>\n</ul>\n</blockquote>\n\n<p>こちらのアドバイスを頂いたので早速試しました。良さそうです！</p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">あるカテゴリ配下で &quot;Create a new post&quot; ボタンで記事を新規作成するときに、カテゴリが一致するFlowのテンプレートがあれば、そのテンプレートが自動的にプリセットされるという機能があります。（続く→）</p>&mdash; esa_io (@esa_io) <a href=\"https://twitter.com/esa_io/status/1356808249601712128?ref_src=twsrc%5Etfw\">2021年2月3日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">例えば以下のテンプレートがあったとして<br><br>- Templates/カテゴリ1/YYYY/MM/DD/テンプレートA<br>- Templates/カテゴリ1/サブカテゴリ1/YYYY/MM/DD/テンプレートB<br><br>「カテゴリ1」配下で記事作成→ テンプレートA <br>「カテゴリ1/サブカテゴリ2」配下で記事作成 →テンプレートB <br><br>がそれぞれ自動適用されます</p>&mdash; esa_io (@esa_io) <a href=\"https://twitter.com/esa_io/status/1356808846379937795?ref_src=twsrc%5Etfw\">2021年2月3日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<p>後日アンサー記事も頂きました！「所感」にこの記事の感想が書いてあります。\n<a href=\"https://docs.esa.io/posts/394\">ProTip/2021/02/03/特定のカテゴリ配下の記事作成時に、テンプレートを適用する - docs.esa.io</a></p>\n\n<h2 id=\"コラム\">コラム</h2>\n\n<p>自分の思いを書ききれないので、コラムに逃しました。(^^;</p>\n\n<h3 id=\"記事のカテゴリ整理を頑張らない理由\">記事のカテゴリ整理を頑張らない理由</h3>\n\n<p>こんな理由からです。</p>\n\n<ol>\n<li>歴史が証明している</li>\n<li>esa の検索がそこそこ優秀</li>\n</ol>\n\n\n<p>今では信じられないかもしれませんが、1990 年代の Yahoo! JAPAN は、人間のスタッフがウェブサイトの情報を収集してカテゴリ分類して登録する、ディレクトリ型検索サービスでした<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>。今はロボット型検索が使われているのは周知のとおりです。</p>\n\n<p>そのため Stock 型の記事だけを作り続けるといずれ破綻することは、<code>1</code> 歴史が証明していると言えます（やや大げさ）。</p>\n\n<p><code>2</code> については、公式ドキュメント「<a href=\"https://docs.esa.io/posts/104\">記事の検索方法</a>」にある検索クエリで、それなりに検索できます（諸説あり）。「<a href=\"https://docs.esa.io/posts/389\">キーワード検索しやすい記事にするコツ</a>」も参考にすると良いでしょう。</p>\n\n<h3 id=\"Flow-カテゴリをどこまで許容するか\">Flow カテゴリをどこまで許容するか</h3>\n\n<p>Flow カテゴリをどこまで許容するかは、悩ましいところです。</p>\n\n<p>(a) 制約をつけずに自由に作ることを許容するか。</p>\n\n<ul>\n<li>プロダクト1\n\n<ul>\n<li>セールス\n\n<ul>\n<li>...</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>開発\n\n<ul>\n<li>○○機能\n\n<ul>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<p>(b) 原理主義っぽく、１つの Flow カテゴリしか許容しないか。</p>\n\n<ul>\n<li>プロダクト1\n\n<ul>\n<li>セールス\n\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>開発\n\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<p>(a) は職種横断的な情報共有を重視しないチームに合うと思います。中規模以上のチームです。</p>\n\n<p>(b) は職種横断的な情報共有を重視するチームに合うと思います。小さなチームです。</p>\n\n<p>はじめは (b) で作ってみて、やりづらくなってきたら (a) にすると良いでしょう。ただし、(a) の <code>プロダクト1/開発/○○機能/YYYY/MM/DD/</code> まで細かく Flow カテゴリを作るのは、把握が難しくなりそうですので、オススメはしません。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p><a href=\"https://workspace.google.co.jp/intl/ja/\">Google Workspace</a>（旧称 G Suite）を契約しています。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>現在のメンバー数は 90、最古の記事は 2014/4/3 です。<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:3\">\n<p>過去に推奨したことあります。ｽﾏﾇｽﾏﾇ&hellip;。<a href=\"#fnref:3\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:4\">\n<p><code>Archived/</code> 以下への移動は更新日時が変わらず <code>/posts</code> に現れないので、<a href=\"https://docs.esa.io/posts/207\">カテゴリ一括変更</a>と組み合わせれば、一応回避はできます。<a href=\"#fnref:4\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:5\">\n<p>今回の件で調べたところ、その<a href=\"https://jp.techcrunch.com/2017/06/29/yahoo-to-shut-down-directory-search/\">「Yahoo!カテゴリ」は2018年3月29日まで動いていた</a>ことを知りびっくりしました<a href=\"#fnref:5\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは id:masutaka26 です。夜の散歩（意味深）に勤しむ毎日です。フィードフォースではドキュメント共有ツールには esa と Google ドキュメント1を、コミュニケーションツールには Slack を採用しています。情報共有はかなり活発で、2021/2/1 現在の esa 記事数は 81,324 です2。現在のカテゴリ構成と課題チームのスピードを上げるための大原則チームのスピードを上げるための情報整理1. Flow 型と Stock 型の記事を理解する2. 基本は Flow 型の記事にする3. 議事録カテゴリは出来るだけ作らない4. Slack に流れていく情報も Flow 型の記事にする5. 使い続けられる情報を Stock 記事として引き上げる6. 整理を頑張らないことで整理の難易度が低くなった7. esa を全ての情報の起点にするそれをチームでやるのは難しすぎない？esa は難しいesa の本当の正体esa への要望まとめesa 公式アカウントからのアドバイスコラム記事のカテゴリ整理を頑張らない理由Flow カテゴリをどこまで許容するか現在のカテゴリ構成と課題トップカテゴリは厳密にルール化されていて、これらの種類以外のカテゴリが増えることはありません。日報/2021/02/01 (月)/masutaka といった記事が置かれる曜日がないなど、型から外れた日報は小人さんによって速やかに修正される。Bot 並に早いwプロダクト1/実際には Feedmatic などのプロダクト名が入る︙プロダクトN/プロジェクト/期間が決まっている系のプロジェクトカテゴリが並ぶチーム/人事や情報セキュリティなどのチーム系カテゴリが並ぶコミュニティ/技術系や読書会などのコミュニティ系カテゴリが並ぶノウハウ/各種ツールのノウハウ系カテゴリが並ぶFeedforce Inc./会社全体に関係する記事が置かれるUsers/Templates/Archived/例えば「プロダクト1」の下は、議事録系を除き基本的に Stock 型の記事になっており、「マニュアル」カテゴリの下にはさらに 15 の子カテゴリが生えているとします。プロダクト1/議事録/開発/コンサルティング/マーケティング/インシデント/ナレッジ/マニュアル/子カテゴリ数は 15︙その他/※ 複数のプロダクトから作った架空カテゴリです。ここまでならよく整理されているように見えますが、実際は古くてメンテナンスされていない記事が多く、言ってしまえばノイズが多い状況です。情報共有されればされるほど、ノイズが増えてしまう悪循環です。Slack に目を向けると、こちらもオープンではありますが、時にブログ記事並みのメッセージが投稿されることがあります。未読メッセージを読み進めると手が止まり、読み切るのが難しいと想像されます。ブログ記事並みのメッセージ例。これで半分です。細切れの情報も多く川の流れのようで、断片化した情報をつなぎ合わせるのは難しいと思います。世の中には情報共有が足りないことに悩む組織は多いと思いますが、活発になったとしても、適切に整理されていなければその量に溺れてしまいます。一方で、最近のコロナ禍もあって 10 年前と今とでは変化のスピードは上がっています。変化に強いチーム設計、つまりは変化に強い情報整理設計が重要です。これをやらなければ、チームのスピードは徐々に下がっていくでしょう。チームのスピードを上げるための大原則私が社内で様々なプロダクトを渡り歩いた経験上、チームのスピードを上げるためには以下の 2 点が重要だと感じています。ノイズを減らす情報を一ヶ所に集めるマネージャーはこれらの阻害要因を減らす仕掛けを作る必要があります。ただ、そういったことが得意な方ばかりではありません。むしろ情報量が一番多く、一番困っているのは彼らかもしれません。マネージャーに余裕がなければ、それがボトルネックとなりチームのスピードが下がります。これからその対策を考察していきます。チームのスピードを上げるための情報整理はじめに書いておくと、出来るだけ整理を頑張らないことが重要です。1. Flow 型と Stock 型の記事を理解するまずは公式ドキュメント「記事のストック・フローの分類と検索」を読んで、Flow 型と Stock 型の記事の存在を知り、理解します。2. 基本は Flow 型の記事にする全て Flow 型にするくらいの気持ちで記事を作ります。記事が多くなっても視界に入りづらいし、整理する必要もないためです。Flow 型記事の例書き捨ての記事であれば プロダクト1/2021/02/01/タイトル、今月中は更新する記事であれば プロダクト1/2021/02/タイトル で良いと思います。ただ、さすがに今年中更新する記事は Stock 型の記事にしたほうが良いと思います。3. 議事録カテゴリは出来るだけ作らないプロダクト1/議事録/ のような議事録カテゴリはできるだけ作らず、プロダクト1/2021/02/01/〇〇会議 議事録 のようなカテゴリとタイトルにします。議事録のような使い続けない記事を視界に入れるのは、どちらかと言えばノイズだからです。社内で以下のような階層をよく見かけますが3、一回限りの会議の置き場所に悩んでしまいます。プロダクト1/議事録/〇〇会議/YYYY/MM/DD/〇〇会議プランニング/YYYY/MM/DD/プランニングプロダクト1/議事録/20210201 〇×会議 議事録 のような自由なパターンも現れたりして、さらに悩ましくなります。過去の議事録をたどる目的でカテゴリを分けたいのであれば、記事の最初に「議事録一覧はこちら」みたいな検索リンクがあれば十分でしょう。「議事録一覧はこちら」の一例それでも作りたい場合は プロダクト1/議事録/〇〇会議/2021/02/01/〇〇会議 議事録 のような記事名にして、後から プロダクト1/2021/02/01/〇〇会議 議事録 に一括変換して視界から消せるように、設計するのが良いと思います。一括変換の仕方は公式ドキュメント「記事のカテゴリを一括変更」が分かりやすいです。4. Slack に流れていく情報も Flow 型の記事にするSlack にはブログ記事並みのメッセージが投稿されることがあります。そうなりそうになったら迷わず プロダクト1/2021/02/01/○○のお願い といった Flow 型の記事を作り、その URL を Slack で共有します。他の場面で引用したい時は意外とあるものですし、内容をあとで更新したいこともあります。Slack だと特にあとからの更新には不向きです。何より当該記事をブラウザで開き、残りの Slack 未読メッセージをスイスイと読むことが出来ます。Slack に投稿されてしまうと、その長いメッセージを読みながら、他の channel に移動するのは億劫です。5. 使い続けられる情報を Stock 記事として引き上げる結局のところ、ほとんどの情報は使い続けることはありません。具体的すぎるからです。そのような具体的な情報は寝かすことで、抽象度の高い情報、例えばカテゴリ名を炙り出せることがあります。良いカテゴリ名が思いつかない時は、まだ抽象度が高くないと思うので、引き上げないほうが良いでしょう。いくつかの Flow 記事をしばらく寝かしたら、あとから汎用的な抽象度の高い Stock 記事のアイディアが湧くこともあります。6. 整理を頑張らないことで整理の難易度が低くなったここまででほとんどの記事は Flow 型の記事のはずです。冒頭に述べたノイズになるような記事は少なく、情報に溺れる確率は低いと思います。使い回しが効かない具体的な情報を Flow 型の記事に追いやることで、整理の難易度を低くすることが出来ました。7. esa を全ての情報の起点にするでは、Google ドキュメントも同じようにしましょう！とは思っていません。esa を全ての情報の起点にする勢いで、適宜 Google ドキュメントにリンクを張ると良いでしょう。Google ドキュメントのフォルダ整理は出来るだけやらないほうが良いです。時間がいくらあっても足りません。Google Drive はただの情報プールです。Google Drive 内検索も優秀です。それをチームでやるのは難しすぎない？そう思った方、正しい感覚です。「チームのスピードを上げるための情報整理」は「私が考える esa 原理主義」に振り切って書きました。情報整理のスキルに関して少数精鋭チームでないと、運用するのは難しいと思います。現在私は開発者 1 人、ビジネスメンバー 2 人のチームに所属しています。私主導でカテゴリを決めているので、これまで書いた方法で整理し、うまくいっている実感があります。Flow 型の記事に対して、Stock 型の記事を少なく保てている。そういえば初期は Flow 型の記事しか作りませんでした。esa は難しいフィードフォースでは 1 年半ほど前まで Qiita:Team を使っていました。Qiita:Team はほぼ Flow 型の記事しか書けないため、これまで話した問題は出てきませんでした。いや「表面化しなかった」が正確でしょう。esa は Stock 型の記事も書けます。ブログと wiki が合体したようなツールなので、難しくないわけがありません。wiki を書くためには抽象的思考が必要です。私の観測範囲では、半分以上の方は具体的思考に寄り過ぎているため、得意ではないという実感です。意識したことがないかもしれません。esa の本当の正体正直言って現在の esa は「情報整理のスキルに関して少数精鋭チーム」でないと、乗りこなすのは難しいと思います。これに気づいた時、Ruby という言語に似ていると思いました。Ruby は esa で採用されているプログラミング言語です。初心者はにこやかに迎えてくれますが、本番環境で使い続けるためには、コードで表現されていない振る舞いを読み解く必要があるなど、実は少数精鋭チーム向けの言語です。esa LLC は少数精鋭チームのようなので、良くも悪くも「コンウェイの法則」が働いて、そのようなサービスになったのだと勝手に想像します。esa への要望社員数 100 人オーバーが見えてくると、型（制約）の必要性を感じます。新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？例: プロダクト1/ 以下での新規作成は、デフォルトカテゴリが プロダクト1/YYYY/MM/DD/ になるフレームワーク的に、何らかのパターン以外のカテゴリを作れないようにする？第一階層カテゴリ以下で、そのようなパターンを数種類から選べるようにする？どれも難しい話ですかね...？現在社内で抱えている課題として「記事整理にハードルがある」は間違いなくあると思います。たくさんの記事を移動すると、/posts がその情報で埋まる4移動しただけなのに、記事に自分の小さなアイコンが付くそもそも記事を 1 つ 1 つ移動するのが大変タイトルに入れてしまった日付をカテゴリにして...とかまですると、API を使わざるを得ない出来れば Windows のエクスプローラのようなカジュアルさで、且つ履歴が残るとうれしいです。あと、要望したことはありますが、現在の「カテゴリ以下の記事全て」に加えて、「カテゴリ直下の記事」「アーカイブした記事」を切り替えるような機能が欲しいです。イメージとしては、GitHub の UI に「カテゴリ直下の記事」を加えたものです。In, On, Archived を切り替えられるイメージ「カテゴリ直下の記事」は on:カテゴリ で検索できますが、知っているユーザーはごく僅かです。アーカイブの認知も怪しくて、古い記事が残る要因かもしれません。一部カテゴリではこんな工夫をしています。アーカイブという手段を認知させている例難しいと思いますが、情報整理のスキルがそれほど高くなくても使える UI 設計をお願いしたいところです。🙏もし、もっと詳しく私にヒアリングしたいなどあれば、masutaka@feedforce.jp または @masutaka の DM までお知らせ下さい。まとめ私から見える、フィードフォースで抱えている情報整理の課題をまとめ、チームのスピードを上げるための整理方法を提案しました。ただ、それは「私が考える esa 原理主義」に振り切っているため、チームで採用するのは難しいと思います。カテゴリがデフォルト Flow 型になるなど、情報整理を頑張らず済む使い勝手になると、とてもうれしいです。esa 公式アカウントからのアドバイス新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？こちらのアドバイスを頂いたので早速試しました。良さそうです！あるカテゴリ配下で \"Create a new post\" ボタンで記事を新規作成するときに、カテゴリが一致するFlowのテンプレートがあれば、そのテンプレートが自動的にプリセットされるという機能があります。（続く→）— esa_io (@esa_io) 2021年2月3日  例えば以下のテンプレートがあったとして- Templates/カテゴリ1/YYYY/MM/DD/テンプレートA- Templates/カテゴリ1/サブカテゴリ1/YYYY/MM/DD/テンプレートB「カテゴリ1」配下で記事作成→ テンプレートA 「カテゴリ1/サブカテゴリ2」配下で記事作成 →テンプレートB がそれぞれ自動適用されます— esa_io (@esa_io) 2021年2月3日  後日アンサー記事も頂きました！「所感」にこの記事の感想が書いてあります。ProTip/2021/02/03/特定のカテゴリ配下の記事作成時に、テンプレートを適用する - docs.esa.ioコラム自分の思いを書ききれないので、コラムに逃しました。(^^;記事のカテゴリ整理を頑張らない理由こんな理由からです。歴史が証明しているesa の検索がそこそこ優秀今では信じられないかもしれませんが、1990 年代の Yahoo! JAPAN は、人間のスタッフがウェブサイトの情報を収集してカテゴリ分類して登録する、ディレクトリ型検索サービスでした5。今はロボット型検索が使われているのは周知のとおりです。そのため Stock 型の記事だけを作り続けるといずれ破綻することは、1 歴史が証明していると言えます（やや大げさ）。2 については、公式ドキュメント「記事の検索方法」にある検索クエリで、それなりに検索できます（諸説あり）。「キーワード検索しやすい記事にするコツ」も参考にすると良いでしょう。Flow カテゴリをどこまで許容するかFlow カテゴリをどこまで許容するかは、悩ましいところです。(a) 制約をつけずに自由に作ることを許容するか。プロダクト1セールス...YYYYMMDD開発○○機能YYYYMMDDYYYYMMDDYYYYMMDD(b) 原理主義っぽく、１つの Flow カテゴリしか許容しないか。プロダクト1セールス...開発...YYYYMMDD(a) は職種横断的な情報共有を重視しないチームに合うと思います。中規模以上のチームです。(b) は職種横断的な情報共有を重視するチームに合うと思います。小さなチームです。はじめは (b) で作ってみて、やりづらくなってきたら (a) にすると良いでしょう。ただし、(a) の プロダクト1/開発/○○機能/YYYY/MM/DD/ まで細かく Flow カテゴリを作るのは、把握が難しくなりそうですので、オススメはしません。Google Workspace（旧称 G Suite）を契約しています。↩現在のメンバー数は 90、最古の記事は 2014/4/3 です。↩過去に推奨したことあります。ｽﾏﾇｽﾏﾇ…。↩Archived/ 以下への移動は更新日時が変わらず /posts に現れないので、カテゴリ一括変更と組み合わせれば、一応回避はできます。↩今回の件で調べたところ、その「Yahoo!カテゴリ」は2018年3月29日まで動いていたことを知りびっくりしました↩","link":"https://developer.feedforce.jp/entry/2021/02/03/110000","isoDate":"2021-02-03T02:00:00.000Z","dateMiliSeconds":1612317600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210202/20210202122517.png","authorName":"masutaka"},{"title":"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近の趣味はリハビリと YouTube 鑑賞です。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQWgD1o2eZC69Mt9F9ln3xQL6Wx82W782cHe1YJEIPHWAdqp6tLEH_I29CyrMBbA9Ag0jmkMoQZ0QQp/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>4 月から <a href=\"https://jp.feedmatic.net/\">Feedmatic</a> という弊社フィードフォースの広告運用サービスに BI ツールである <a href=\"https://ja.looker.com/\">Looker</a> を導入すべく、検討と実装をしてきました。</p>\n\n<p>関わっているエンジニアは私一人で、社内の他のエンジニアからは何やってきたか分からないと思っていたので、今までのまとめ的な発表をしました。</p>\n\n<p>ネット上を探しても導入時の具体的な話は見つけられなかったので、誰かの参考になることも期待して、外向けも意識しています。</p>\n\n<p>Looker ユーザ向けには P30 から「Symmetric 集計」を頑張って解説しています。説明が雑なのは認めます。🙏</p>\n\n<p>Looker は学習コストは高いですが、かなりパワフルなツールなので、個人的には非常にやる気を出して燃えています。🔥</p>\n\n<p>それでは！</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近の趣味はリハビリと YouTube 鑑賞です。本日、週次の社内勉強会 FFTT で『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をしました。4 月から Feedmatic という弊社フィードフォースの広告運用サービスに BI ツールである Looker を導入すべく、検討と実装をしてきました。関わっているエンジニアは私一人で、社内の他のエンジニアからは何やってきたか分からないと思っていたので、今までのまとめ的な発表をしました。ネット上を探しても導入時の具体的な話は見つけられなかったので、誰かの参考になることも期待して、外向けも意識しています。Looker ユーザ向けには P30 から「Symmetric 集計」を頑張って解説しています。説明が雑なのは認めます。🙏Looker は学習コストは高いですが、かなりパワフルなツールなので、個人的には非常にやる気を出して燃えています。🔥それでは！","link":"https://developer.feedforce.jp/entry/2020/10/23/190000","isoDate":"2020-10-23T10:00:00.000Z","dateMiliSeconds":1603447200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"個人的に実践している、Slack に振り回されない方法","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。足底筋膜炎は誤診のようでした。リハビリに勤しむ日々です。</p>\n\n<p>今回は社内向けに書いた esa 記事が好評でしたので、少し改変してお届けします。</p>\n\n<p>フィードフォースでは Slack を使っており、リモートワークにおけるコミュニケーションの手段も Slack がメインです。</p>\n\n<p>Slack はチャットツールであるため、ある程度のリアルタイム性を求められますが、ただそれに従っていると振り回されてしまいます。</p>\n\n<p>今回は私が実践しているいくつかの工夫を紹介します。他に良い方法があれば、是非教えてください。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#今すぐできないことあとでやるあとで確認するは自分にリマインドする\">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</a></li>\n    <li><a href=\"#自分が他の人に依頼した時もリマインドを設定する\">自分が他の人に依頼した時もリマインドを設定する</a></li>\n    <li><a href=\"#チャンネルは優先度を付ける\">チャンネルは優先度を付ける</a></li>\n    <li><a href=\"#見なくなったチャンネルからはこまめに抜ける\">見なくなったチャンネルからはこまめに抜ける</a></li>\n    <li><a href=\"#未読チャンネルはショートカットキーで移動する\">未読チャンネルはショートカットキーで移動する</a></li>\n</ul>\n\n<h2 id=\"今すぐできないことあとでやるあとで確認するは自分にリマインドする\">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</h2>\n\n<p>自分にリマインドすることで忘れることが出来る。同期的コミュニケーションを非同期に逃がす感じ。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014903.png\" alt=\"f:id:masutaka26:20200627014903p:plain\" title=\"f:id:masutaka26:20200627014903p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>👇 <code>slackbot</code> からの DM で通知される。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013415.jpg\" alt=\"f:id:masutaka26:20200627013415j:plain\" title=\"f:id:masutaka26:20200627013415j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>すぐ出来なくてさらに先延ばししたければ、Snooze する。出来ない時はゆるふわで良いので Snooze することが大事。放置しないようにしている。</p>\n\n<p>👇 たまに <code>slackbot</code> の DM とかで <code>/remind list</code> して確認している。Snooze し忘れたりして、過去のリマインドが残っているとこんな感じになる。→ <code>Past and Incomplete</code></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013716.png\" alt=\"f:id:masutaka26:20200627013716p:plain\" title=\"f:id:masutaka26:20200627013716p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>🌀 本当は Gmail の Inbox（受信トレイ）でリマインド管理したい。Snooze が使いやすいし。</p>\n\n<h2 id=\"自分が他の人に依頼した時もリマインドを設定する\">自分が他の人に依頼した時もリマインドを設定する</h2>\n\n<p>相手が忘れても大丈夫になる。これも同期コミュニケーションから非同期への変換。</p>\n\n<h2 id=\"チャンネルは優先度を付ける\">チャンネルは優先度を付ける</h2>\n\n<p>私の場合は <code>Starred</code> > <code>Low Priority</code> > <code>Channels</code> という優先度にしてます。\n（優先度が分からなくなるので、<a href=\"https://slack.com/intl/ja-jp/help/articles/226410907-%E5%85%A8%E3%81%A6%E3%81%AE%E6%9C%AA%E8%AA%AD%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">全未読機能</a>は使っていません）</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014706.png\" alt=\"f:id:masutaka26:20200627014706p:plain\" title=\"f:id:masutaka26:20200627014706p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><code>Starred</code> と <code>Channels</code> は最初からあるグルーピングです。<code>Low Priority</code> は自分で作りました。</p>\n\n<p>公式ヘルプ: <a href=\"https://slack.com/intl/ja-jp/help/articles/201331016-%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%82%84%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AB%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B\">チャンネルやダイレクトメッセージにスターを付ける | Slack</a></p>\n\n<p>💡 <code>Channels</code> の中には mute しているチャンネルもあります。</p>\n\n<h2 id=\"見なくなったチャンネルからはこまめに抜ける\">見なくなったチャンネルからはこまめに抜ける</h2>\n\n<p>抜けたいチャンネルで <code>/leave</code> と発言すると、一瞬で抜けられるよ。</p>\n\n<h2 id=\"未読チャンネルはショートカットキーで移動する\">未読チャンネルはショートカットキーで移動する</h2>\n\n<ul>\n<li>Windows\n\n<ul>\n<li>前の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↑</code></li>\n<li>次の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↓</code></li>\n</ul>\n</li>\n<li>Mac\n\n<ul>\n<li>前の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↑</code></li>\n<li>次の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↓</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>公式ヘルプ: <a href=\"https://slack.com/intl/ja-jp/help/articles/201374536-Slack-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88\">Slack のキーボードショートカット | Slack</a></p>\n","contentSnippet":"こんにちは id:masutaka26 です。足底筋膜炎は誤診のようでした。リハビリに勤しむ日々です。今回は社内向けに書いた esa 記事が好評でしたので、少し改変してお届けします。フィードフォースでは Slack を使っており、リモートワークにおけるコミュニケーションの手段も Slack がメインです。Slack はチャットツールであるため、ある程度のリアルタイム性を求められますが、ただそれに従っていると振り回されてしまいます。今回は私が実践しているいくつかの工夫を紹介します。他に良い方法があれば、是非教えてください。今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする自分が他の人に依頼した時もリマインドを設定するチャンネルは優先度を付ける見なくなったチャンネルからはこまめに抜ける未読チャンネルはショートカットキーで移動する今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする自分にリマインドすることで忘れることが出来る。同期的コミュニケーションを非同期に逃がす感じ。👇 slackbot からの DM で通知される。すぐ出来なくてさらに先延ばししたければ、Snooze する。出来ない時はゆるふわで良いので Snooze することが大事。放置しないようにしている。👇 たまに slackbot の DM とかで /remind list して確認している。Snooze し忘れたりして、過去のリマインドが残っているとこんな感じになる。→ Past and Incomplete🌀 本当は Gmail の Inbox（受信トレイ）でリマインド管理したい。Snooze が使いやすいし。自分が他の人に依頼した時もリマインドを設定する相手が忘れても大丈夫になる。これも同期コミュニケーションから非同期への変換。チャンネルは優先度を付ける私の場合は Starred > Low Priority > Channels という優先度にしてます。（優先度が分からなくなるので、全未読機能は使っていません）Starred と Channels は最初からあるグルーピングです。Low Priority は自分で作りました。公式ヘルプ: チャンネルやダイレクトメッセージにスターを付ける | Slack💡 Channels の中には mute しているチャンネルもあります。見なくなったチャンネルからはこまめに抜ける抜けたいチャンネルで /leave と発言すると、一瞬で抜けられるよ。未読チャンネルはショートカットキーで移動するWindows前の未読チャンネルや DM に移動: Alt Shift ↑次の未読チャンネルや DM に移動: Alt Shift ↓Mac前の未読チャンネルや DM に移動: Option Shift ↑次の未読チャンネルや DM に移動: Option Shift ↓公式ヘルプ: Slack のキーボードショートカット | Slack","link":"https://developer.feedforce.jp/entry/2020/06/29/140000","isoDate":"2020-06-29T05:00:00.000Z","dateMiliSeconds":1593406800000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627155056.png","authorName":"masutaka"},{"title":"『HerokuでSidekiqを監視する方法を確立した』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近はドラクエウォークと足底筋膜炎との両立に悩んでいます。</p>\n\n<p>先週の金曜日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『HerokuでSidekiqを監視する方法を確立した』という発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTZAByBIEhPjehZJ8Jb3atZBJSpu1R371Z3qQZcolE99poCpdYHWfWl5tlH2pQxwBedoCBPYK8rTwoI/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Heroku で Sidekiq を監視する知見を見つけられなかったのが、このお題を選んだ経緯です。どなたかが参考になるとうれしいです。</p>\n\n<p>今回は自宅からのリモート発表でした。物理発表と違って、話した内容よりもリアクションの分からなさによる戸惑いが気になってしまいました。（オイ</p>\n\n<p>※ リアクションはしてくれてたみたいです。🙏</p>\n\n<p>複数モニター必須とか、いろいろ知見がありそうなので、今後蓄積出来ると良さそうです。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近はドラクエウォークと足底筋膜炎との両立に悩んでいます。先週の金曜日、週次の社内勉強会 FFTT で『HerokuでSidekiqを監視する方法を確立した』という発表をしました。Heroku で Sidekiq を監視する知見を見つけられなかったのが、このお題を選んだ経緯です。どなたかが参考になるとうれしいです。今回は自宅からのリモート発表でした。物理発表と違って、話した内容よりもリアクションの分からなさによる戸惑いが気になってしまいました。（オイ※ リアクションはしてくれてたみたいです。🙏複数モニター必須とか、いろいろ知見がありそうなので、今後蓄積出来ると良さそうです。","link":"https://developer.feedforce.jp/entry/2020/03/02/140000","isoDate":"2020-03-02T05:00:00.000Z","dateMiliSeconds":1583125200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200302/20200302102630.png","authorName":"masutaka"},{"title":"Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べた","content":"<p>こんにちは。<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>半年くらい前から <a href=\"https://devcenter.heroku.com/articles/language-runtime-metrics-ruby\">Heroku の Ruby Language Metrics</a> (Public Beta) を使い始めました。その時、どのようにメトリクスを収集しているか調べたので、この記事にまとめます。（なぜこのタイミング...）</p>\n\n<p>有効にする方法は前述の公式ドキュメントをどうぞ。<a href=\"http://blog.hatena.ne.jp/sho7650/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/sho7650/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:sho7650</a> の記事も併せて読むと分かりやすいと思います。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsho7650%2Fitems%2F7315e78fa3e6aa75b85b\" title=\"[Ruby] より細かくMetricsを取得したい [Heroku] - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/sho7650/items/7315e78fa3e6aa75b85b\">qiita.com</a></cite></p>\n\n<p>ところで、いつから Public Beta だったのですかね？ GA はいつになるのかな...？</p>\n\n<h2>概要</h2>\n\n<p>今回は Rails 前提で説明します。このような仕組みでメトリクスの収集と送信が行われます。</p>\n\n<ol>\n<li><a href=\"https://github.com/heroku/heroku-buildpack-metrics/\">heroku/metrics buildpack</a> により、Dyno 起動時に <a href=\"https://github.com/heroku/agentmon\">agentmon</a> がインストールされ、常駐する</li>\n<li>Rails が起動すると、<a href=\"https://github.com/heroku/barnes\">barnes</a> gem がメトリクスを収集し始め、定期的に localhost の agentmon に送信する</li>\n<li>agentmon は <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> にメトリクスを送信する</li>\n<li>エンジニアは Heroku Dashboard から Ruby のメトリクスを閲覧できる</li>\n</ol>\n\n\n<h2>agentmon のインストールと起動</h2>\n\n<p><a href=\"https://github.com/heroku/heroku-buildpack-metrics/\">heroku/metrics buildpack</a> によって、agentmon というデーモンがインストールされます。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/heroku/agentmon\">heroku/agentmon</a></p>\n\n<p>agentmon は後述する barnes gem から受け取ったメトリクスを <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> に送信します。</p>\n\n<p>この URL は環境変数 <code>HEROKU_METRICS_URL</code> の値で、Heroku Dashboard から Enhanced Language Metrics を有効にすると、各 Dyno で定義されます。</p>\n\n<p>面白いのは、Slug 生成時には <a href=\"https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/bin/compile#L15-L17\">/app/.profile.d/heroku-metrics-daemon.sh がインストールされる</a>だけで、Dyno 起動時にこのスクリプトが実行され、<a href=\"https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/.profile.d/heroku-metrics-daemon.sh\">agentmon のインストールと起動が行われる</a>ことです。</p>\n\n<p>Dyno では通常 Puma などのプロセスしか起動されませんが、このような方法を使えばデーモンも起動できることを初めて知りました。</p>\n\n<p>ちなみに <a href=\"https://devcenter.heroku.com/articles/buildpack-api#profile-d-scripts\">Dyno が起動する時 /etc/profile によって <code>/app/.profile.d/*.sh</code> がすべて実行されます</a>。</p>\n\n<h2>barnes gem によるメトリクス収集と送信</h2>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/heroku/barnes\">heroku/barnes</a></p>\n\n<p>Rails が起動すると、<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L40-L64\">Barnes.start</a> から呼ばれる <a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/periodic.rb#L31-L67\">Barnes::Periodic.new</a> で Ruby のスレッドが作られます。</p>\n\n<p><code>Barnes.start</code> はすぐに終了しますが、作られたスレッドは非同期で実行されます。無限ループのスレッドなので、Rails が起動している間、起動し続けます。</p>\n\n<p>この無限ループでは 10 秒に 1 回、後述するメトリクスを収集し、localhost の agentmon に送信します。</p>\n\n<p>送信するのはスレッド中のインスタンス変数 <code>@reporter</code> です。これは <a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/reporter.rb\">Barnes::Reporter</a> のインスタンスで、<code>statsd_client</code> を介して agentmon に送信します。</p>\n\n<p><code>statsd_client</code> は <code>Barnes::Reporter.new</code> 時に渡されます。\n<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51</a></p>\n\n<h2>収集されるメトリクス</h2>\n\n<p><code>Barnes::ResourceUsage</code> では収集されるメトリクスを一望できます。\n<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63</a></p>\n\n<p>収集されるメトリクスと、収集方法です。</p>\n\n<ul>\n<li>Puma のメトリクス（ <code>Barnes::Instruments::PumaInstrument</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48</a></li>\n</ul>\n</li>\n<li>CPU 実行時間等のメトリクス（ <code>Barnes::Instruments::Stopwatch</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.ruby-lang.org/ja/2.7.0/class/ObjectSpace.html#M_COUNT_OBJECTS\">ObjectSpace.count_objects</a> の結果（ <code>Barnes::Instruments::ObjectSpaceCounter</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.ruby-lang.org/ja/2.7.0/method/GC/s/stat.html\">GC.stat</a> の結果（ <code>Barnes::Instruments::RubyGC</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84</a></li>\n</ul>\n</li>\n</ul>\n\n\n<h2>まとめ</h2>\n\n<p>Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べました。</p>\n\n<p>ただ有効にするだけだと、他のエンジニアに説明することができなかったことが、今回調べた動機です。</p>\n\n<p>今回に限りませんが、Heroku は完全なブラックボックスではなく、調べると実装が透けて見えるのがとても良いと思います。</p>\n\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n","contentSnippet":"こんにちは。id:masutaka26 です。半年くらい前から Heroku の Ruby Language Metrics (Public Beta) を使い始めました。その時、どのようにメトリクスを収集しているか調べたので、この記事にまとめます。（なぜこのタイミング...）有効にする方法は前述の公式ドキュメントをどうぞ。id:sho7650 の記事も併せて読むと分かりやすいと思います。qiita.comところで、いつから Public Beta だったのですかね？ GA はいつになるのかな...？概要今回は Rails 前提で説明します。このような仕組みでメトリクスの収集と送信が行われます。heroku/metrics buildpack により、Dyno 起動時に agentmon がインストールされ、常駐するRails が起動すると、barnes gem がメトリクスを収集し始め、定期的に localhost の agentmon に送信するagentmon は https://app.metrics.heroku.com/<dyno id> にメトリクスを送信するエンジニアは Heroku Dashboard から Ruby のメトリクスを閲覧できるagentmon のインストールと起動heroku/metrics buildpack によって、agentmon というデーモンがインストールされます。heroku/agentmonagentmon は後述する barnes gem から受け取ったメトリクスを https://app.metrics.heroku.com/<dyno id> に送信します。この URL は環境変数 HEROKU_METRICS_URL の値で、Heroku Dashboard から Enhanced Language Metrics を有効にすると、各 Dyno で定義されます。面白いのは、Slug 生成時には /app/.profile.d/heroku-metrics-daemon.sh がインストールされるだけで、Dyno 起動時にこのスクリプトが実行され、agentmon のインストールと起動が行われることです。Dyno では通常 Puma などのプロセスしか起動されませんが、このような方法を使えばデーモンも起動できることを初めて知りました。ちなみに Dyno が起動する時 /etc/profile によって /app/.profile.d/*.sh がすべて実行されます。barnes gem によるメトリクス収集と送信heroku/barnesRails が起動すると、Barnes.start から呼ばれる Barnes::Periodic.new で Ruby のスレッドが作られます。Barnes.start はすぐに終了しますが、作られたスレッドは非同期で実行されます。無限ループのスレッドなので、Rails が起動している間、起動し続けます。この無限ループでは 10 秒に 1 回、後述するメトリクスを収集し、localhost の agentmon に送信します。送信するのはスレッド中のインスタンス変数 @reporter です。これは Barnes::Reporter のインスタンスで、statsd_client を介して agentmon に送信します。statsd_client は Barnes::Reporter.new 時に渡されます。https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51収集されるメトリクスBarnes::ResourceUsage では収集されるメトリクスを一望できます。https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63収集されるメトリクスと、収集方法です。Puma のメトリクス（ Barnes::Instruments::PumaInstrument ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48CPU 実行時間等のメトリクス（ Barnes::Instruments::Stopwatch ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58ObjectSpace.count_objects の結果（ Barnes::Instruments::ObjectSpaceCounter ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30GC.stat の結果（ Barnes::Instruments::RubyGC ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84まとめHeroku Ruby Language Metrics のメトリクス収集の仕組みを調べました。ただ有効にするだけだと、他のエンジニアに説明することができなかったことが、今回調べた動機です。今回に限りませんが、Heroku は完全なブラックボックスではなく、調べると実装が透けて見えるのがとても良いと思います。","link":"https://developer.feedforce.jp/entry/2020/02/13/150000","isoDate":"2020-02-13T06:00:00.000Z","dateMiliSeconds":1581573600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"Heroku Meetup #27 で『デプロイで止まらないバッチ処理を求めて』という話をしてきた #herokujp","content":"<p>土曜日にこんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Heroku Advent Calendar 2019 の 14 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2Fheroku\" title=\"Heroku Advent Calendar 2019 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2019/heroku\">qiita.com</a></cite></p>\n\n<p>昨日は <a href=\"https://qiita.com/takahito0508\">@takahito0508</a> さんの『<a href=\"https://qiita.com/takahito0508/items/0f30e441dd5fba673560\">Salesforce の Org Development 用の Buildpack を作った話</a>』でした。Heroku の Buildpack は割と簡単な仕組みなので、ハードルが低いですよね。</p>\n\n<p>さて、同じ日（2019/12/13）に開催された <a href=\"https://herokujp.doorkeeper.jp/events/99972\">Heroku Meetup #27 \"Heroku Vitamin!\"</a> で『デプロイで止まらないバッチ処理を求めて』というお題で発表してきました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRVD7Gx345OvUDpoGaRxv5sYQB9uCpvFORJvhgKWySCxNd3WqQQEM4Gfpx0OJYoOyf2sY8GVUKD3spA/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Heroku meetup は<a href=\"https://herokujp.doorkeeper.jp/events/93092\">前々回 #25</a> 以来の参加と登壇です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F07%2F29%2F140000\" title=\"Heroku Meetup #25 &quot;Heroku Ghost&quot; で 2 回話してきた #herokujp - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2019/07/29/140000\">developer.feedforce.jp</a></cite></p>\n\n<h2>所感</h2>\n\n<p>世の中では割と多くのバッチ処理が動いていると思います。ですが、Heroku 上でのバッチ処理はあまり情報がないので、今回紹介させて頂きました。技術スタックとしては、Rails の Active Job と Sidekiq です。</p>\n\n<p>今回もニッチな発表ができてとても満足しています。会場にいる一人に刺されば大成功くらいの気持ちで発表していました。</p>\n\n<p>中の人曰く、こんな One-Off Dyno の使い方をする人は初めて見たとのこと。(^^;</p>\n\n<p>使い方としては問題ないそうですが、<a href=\"https://devcenter.heroku.com/articles/dyno-runtime#private-spaces-runtime\">Private Spaces</a> では Dyno の起動が遅いそうなので、そこはやや注意とのこと。</p>\n\n<p>※ <a href=\"https://ecbooster.jp/\">EC Booster</a> では一般向けの <a href=\"https://devcenter.heroku.com/articles/dyno-runtime#common-runtime\">Common Runtime</a> を使っています。</p>\n\n<p>とは言え、<a href=\"https://devcenter.heroku.com/articles/platform-api-reference#dyno-create\">Dyno Create API</a> は Dyno の起動完了を待たずに即座に終了するため、Private Spaces でも大丈夫みたいです。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">.<a href=\"https://twitter.com/masutaka?ref_src=twsrc%5Etfw\">@masutaka</a> さんのお話 <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a> <a href=\"https://t.co/RZnLFWq9qn\">pic.twitter.com/RZnLFWq9qn</a></p>&mdash; Satoshi Nagano (@thisisnagano) <a href=\"https://twitter.com/thisisnagano/status/1205437869453500416?ref_src=twsrc%5Etfw\">2019年12月13日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>明日は <a href=\"https://qiita.com/seijikohara\">@seijikohara</a> さんです。お楽しみに。</p>\n","contentSnippet":"土曜日にこんにちは id:masutaka26 です。この記事は Heroku Advent Calendar 2019 の 14 日目の記事です。qiita.com昨日は @takahito0508 さんの『Salesforce の Org Development 用の Buildpack を作った話』でした。Heroku の Buildpack は割と簡単な仕組みなので、ハードルが低いですよね。さて、同じ日（2019/12/13）に開催された Heroku Meetup #27 \"Heroku Vitamin!\" で『デプロイで止まらないバッチ処理を求めて』というお題で発表してきました。Heroku meetup は前々回 #25 以来の参加と登壇です。developer.feedforce.jp所感世の中では割と多くのバッチ処理が動いていると思います。ですが、Heroku 上でのバッチ処理はあまり情報がないので、今回紹介させて頂きました。技術スタックとしては、Rails の Active Job と Sidekiq です。今回もニッチな発表ができてとても満足しています。会場にいる一人に刺されば大成功くらいの気持ちで発表していました。中の人曰く、こんな One-Off Dyno の使い方をする人は初めて見たとのこと。(^^;使い方としては問題ないそうですが、Private Spaces では Dyno の起動が遅いそうなので、そこはやや注意とのこと。※ EC Booster では一般向けの Common Runtime を使っています。とは言え、Dyno Create API は Dyno の起動完了を待たずに即座に終了するため、Private Spaces でも大丈夫みたいです。.@masutaka さんのお話 #herokujp pic.twitter.com/RZnLFWq9qn— Satoshi Nagano (@thisisnagano) 2019年12月13日明日は @seijikohara さんです。お楽しみに。","link":"https://developer.feedforce.jp/entry/2019/12/14/153000","isoDate":"2019-12-14T06:30:00.000Z","dateMiliSeconds":1576305000000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20191214/20191214151304.jpg","authorName":"masutaka"},{"title":"月末に起動したいバッチを sidekiq-cron で指定し、healthchecks.io で監視する","content":"<p>こんにちは。<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>去年の 6/30 からジムに通い始めて、なんとか週に 2~3 のペースで続いています。サプリメントも半信半疑ながら毎日飲んでいますが、ドラッグストアや Amazon で買うと割と高いと思います。</p>\n\n<p>個人的には <a href=\"https://jp.iherb.com/\">iHerb</a> がだいぶオススメです。以前 3.6kg のプロテインを買ったらなぜかキャンペーンが適用されて、30% オフの 6,517 円になりました。</p>\n\n<p>さらにこの<a href=\"https://www.youtube.com/watch?v=ue0EFA_SxZc\">案件動画</a>を見て、プレワークアウトサプリ（C4 SPORT）にも手を出してしまいました。BCAA も飲んでいます。</p>\n\n<p>Twitter とかで検索すると、初回 10% OFF の紹介コードが見つかると思います。さらにお得です。</p>\n\n<p>何の記事でしたっけ...？そうだ、この記事は <a href=\"https://adventar.org/calendars/4169\">Feedforce Advent Calendar 2019</a> の 5 日目の記事です！</p>\n\n<p>昨日は <a href=\"http://blog.hatena.ne.jp/kano-e/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:kano-e</a> の「2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち」でした。変わらぬボドゲ愛・・・！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fff-boardgame.hatenablog.com%2Fentry%2F2019%2F12%2F04%2F000000\" title=\"2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち - フィードフォース ボドゲ部\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://ff-boardgame.hatenablog.com/entry/2019/12/04/000000\">ff-boardgame.hatenablog.com</a></cite></p>\n\n<h2>sidekiq-cron で月末を指定する</h2>\n\n<p>脈絡ありませんが、<a href=\"https://github.com/ondrejbartas/sidekiq-cron\">sidekiq-cron</a> では <code>last</code> で月末を指定することが出来ます。</p>\n\n<p>例えば <code>0 12 last * * Asia/Tokyo</code> の次回実行は <code>2019/12/31 12:00 JST</code> です。<code>2019/11/30 12:00 JST</code> は無事動きました。</p>\n\n<p>このような設定になります。</p>\n\n<pre class=\"code lang-yaml\" data-lang=\"yaml\" data-unlink><span class=\"synIdentifier\">sample_job</span><span class=\"synSpecial\">:</span>\n  <span class=\"synIdentifier\">active_job</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">true</span>\n  <span class=\"synIdentifier\">cron</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;0 12 last * * Asia/Tokyo&quot;</span>\n  <span class=\"synIdentifier\">class</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;SampleJob&quot;</span>\n  <span class=\"synIdentifier\">queue</span><span class=\"synSpecial\">:</span> default\n</pre>\n\n\n<p>この cron 書式は sidekiq-cron が依存する <a href=\"https://github.com/floraison/fugit\">fugit</a> による実装です。</p>\n\n<p>確認はしていませんが、<code>last</code> の他にも <code>-1</code> や <code>L</code> などが使えるようです。</p>\n\n<p>🔗 <a href=\"https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747\">https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747</a></p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>context <span class=\"synSpecial\">'</span><span class=\"synConstant\">negative monthdays</span><span class=\"synSpecial\">'</span> <span class=\"synStatement\">do</span>\n\n  [\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7--1 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1--27 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -31,-30,-29,-28,-27,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7--1/2 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-5,-3,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * L * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7-L * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * last * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n  ].each { |<span class=\"synIdentifier\">c</span>, <span class=\"synIdentifier\">e</span>|\n    it(<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">parses </span><span class=\"synSpecial\">#{</span>c<span class=\"synSpecial\">}&quot;</span>) { expect(<span class=\"synType\">Fugit</span>::<span class=\"synType\">Cron</span>.parse(c).to_cron_s).to eq(e) }\n  }\n<span class=\"synStatement\">end</span>\n</pre>\n\n\n<p><code>negative monthdays</code> って表現は面白い。</p>\n\n<h2>healthchecks.io で月末のバッチを監視する</h2>\n\n<p>バッチが本当に起動したかを監視するのは難しいと思います。月末の監視はさらに難しいと思います。</p>\n\n<p>過度な依存は禁物ですが、<a href=\"https://healthchecks.io/\">healthchecks.io</a> は選択肢に入れても良いかもしれません。以下の記事をどうぞ。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F09%2F140000\" title=\"terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2018/10/09/140000\">developer.feedforce.jp</a></cite></p>\n\n<p>前述の cron 設定だと <code>0 12 l * *</code> で監視することが出来ます。<code>l</code> は小文字のエルです。</p>\n\n<p>terraform-provider-healthchecksio の設定例です。</p>\n\n<pre class=\"code lang-tf\" data-lang=\"tf\" data-unlink>resource &quot;<span class=\"synConstant\">healthchecksio_check</span>&quot; &quot;<span class=\"synConstant\">sample_job</span>&quot; <span class=\"synSpecial\">{</span>\n  name     <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">SampleJob</span>&quot;\n  tags     <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span>&quot;<span class=\"synConstant\">production</span>&quot;<span class=\"synSpecial\">]</span>\n  grace    <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">60</span>&quot;\n  schedule <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">0 12 l * *</span>&quot;\n  timezone <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">Asia/Tokyo</span>&quot;\n  channels <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span>data.healthchecksio_channel.slack.id<span class=\"synSpecial\">]</span>\n<span class=\"synSpecial\">}</span>\n\ndata &quot;<span class=\"synConstant\">healthchecksio_channel</span>&quot; &quot;<span class=\"synConstant\">slack</span>&quot; <span class=\"synSpecial\">{</span>\n  kind <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">slack</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>こちらの cron 書式は <a href=\"https://github.com/healthchecks/healthchecks\">healthchecks</a> が依存する <a href=\"https://github.com/taichino/croniter\">croniter</a> による実装です。</p>\n\n<p><code>l</code> 以外の指定は見当たりませんでした。</p>\n\n<p>🔗 <a href=\"https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223\">https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223</a></p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">testLastDayOfMonth</span>(self):\n    base = datetime(<span class=\"synConstant\">2015</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">4</span>)\n    itr = croniter(<span class=\"synConstant\">'0 0 l * *'</span>, base)\n    n1 = itr.get_next(datetime)\n    self.assertEqual(n1.month, <span class=\"synConstant\">9</span>)\n    self.assertEqual(n1.day, <span class=\"synConstant\">30</span>)\n    n2 = itr.get_next(datetime)\n    self.assertEqual(n2.month, <span class=\"synConstant\">10</span>)\n    self.assertEqual(n2.day, <span class=\"synConstant\">31</span>)\n    n3 = itr.get_next(datetime)\n    self.assertEqual(n3.month, <span class=\"synConstant\">11</span>)\n    self.assertEqual(n3.day, <span class=\"synConstant\">30</span>)\n    n4 = itr.get_next(datetime)\n    self.assertEqual(n4.month, <span class=\"synConstant\">12</span>)\n    self.assertEqual(n4.day, <span class=\"synConstant\">31</span>)\n</pre>\n\n\n<p>2019 年もそろそろ終わりです。年末にだけ動くバッチを設定＆監視するのも良いかもしれません。</p>\n\n<p>明日は、こばりゅうの記事です。ひこうきかっけー！？お楽しみに。</p>\n","contentSnippet":"こんにちは。id:masutaka26 です。去年の 6/30 からジムに通い始めて、なんとか週に 2~3 のペースで続いています。サプリメントも半信半疑ながら毎日飲んでいますが、ドラッグストアや Amazon で買うと割と高いと思います。個人的には iHerb がだいぶオススメです。以前 3.6kg のプロテインを買ったらなぜかキャンペーンが適用されて、30% オフの 6,517 円になりました。さらにこの案件動画を見て、プレワークアウトサプリ（C4 SPORT）にも手を出してしまいました。BCAA も飲んでいます。Twitter とかで検索すると、初回 10% OFF の紹介コードが見つかると思います。さらにお得です。何の記事でしたっけ...？そうだ、この記事は Feedforce Advent Calendar 2019 の 5 日目の記事です！昨日は id:kano-e の「2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち」でした。変わらぬボドゲ愛・・・！ff-boardgame.hatenablog.comsidekiq-cron で月末を指定する脈絡ありませんが、sidekiq-cron では last で月末を指定することが出来ます。例えば 0 12 last * * Asia/Tokyo の次回実行は 2019/12/31 12:00 JST です。2019/11/30 12:00 JST は無事動きました。このような設定になります。sample_job:  active_job: true  cron: \"0 12 last * * Asia/Tokyo\"  class: \"SampleJob\"  queue: defaultこの cron 書式は sidekiq-cron が依存する fugit による実装です。確認はしていませんが、last の他にも -1 や L などが使えるようです。🔗 https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747context 'negative monthdays' do  [    [ '* * -1 * *', '* * -1 * *' ],    [ '* * -7--1 * *', '* * -7,-6,-5,-4,-3,-2,-1 * *' ],    [ '* * -1--27 * *', '* * -31,-30,-29,-28,-27,-1 * *' ],    [ '* * -7--1/2 * *', '* * -7,-5,-3,-1 * *' ],    [ '* * L * *', '* * -1 * *' ],    [ '* * -7-L * *', '* * -7,-6,-5,-4,-3,-2,-1 * *' ],    [ '* * last * *', '* * -1 * *' ],  ].each { |c, e|    it(\"parses #{c}\") { expect(Fugit::Cron.parse(c).to_cron_s).to eq(e) }  }endnegative monthdays って表現は面白い。healthchecks.io で月末のバッチを監視するバッチが本当に起動したかを監視するのは難しいと思います。月末の監視はさらに難しいと思います。過度な依存は禁物ですが、healthchecks.io は選択肢に入れても良いかもしれません。以下の記事をどうぞ。developer.feedforce.jp前述の cron 設定だと 0 12 l * * で監視することが出来ます。l は小文字のエルです。terraform-provider-healthchecksio の設定例です。resource \"healthchecksio_check\" \"sample_job\" {  name     = \"SampleJob\"  tags     = [\"production\"]  grace    = \"60\"  schedule = \"0 12 l * *\"  timezone = \"Asia/Tokyo\"  channels = [data.healthchecksio_channel.slack.id]}data \"healthchecksio_channel\" \"slack\" {  kind = \"slack\"}こちらの cron 書式は healthchecks が依存する croniter による実装です。l 以外の指定は見当たりませんでした。🔗 https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223def testLastDayOfMonth(self):    base = datetime(2015, 9, 4)    itr = croniter('0 0 l * *', base)    n1 = itr.get_next(datetime)    self.assertEqual(n1.month, 9)    self.assertEqual(n1.day, 30)    n2 = itr.get_next(datetime)    self.assertEqual(n2.month, 10)    self.assertEqual(n2.day, 31)    n3 = itr.get_next(datetime)    self.assertEqual(n3.month, 11)    self.assertEqual(n3.day, 30)    n4 = itr.get_next(datetime)    self.assertEqual(n4.month, 12)    self.assertEqual(n4.day, 31)2019 年もそろそろ終わりです。年末にだけ動くバッチを設定＆監視するのも良いかもしれません。明日は、こばりゅうの記事です。ひこうきかっけー！？お楽しみに。","link":"https://developer.feedforce.jp/entry/2019/12/05/101931","isoDate":"2019-12-05T01:19:31.000Z","dateMiliSeconds":1575508771000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20191205/20191205000250.png","authorName":"masutaka"},{"title":"Heroku Meetup #25 \"Heroku Ghost\" で 2 回話してきた #herokujp","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>先週金曜日（2019/7/26）に開催された <a href=\"https://herokujp.doorkeeper.jp/events/93092\">Heroku Meetup #25 \"Heroku Ghost\"</a> で『デプロイ元をCircleCIからHerokuに乗り換えた』というお題で発表してきました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRy7z2A77VE4UNCp7EhpFgeQr7fl8XqHolYwsaokN76rGCvoeo1SKh1hkNg3ew2D4pSLoQAz-iefLnR/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>つい先日、現在関わっている <a href=\"https://app.ecbooster.jp/\">EC Booster</a> のデプロイフローを改善し、それなりに知見を得られたためです。</p>\n\n<p>Heroku Meetup の参加は<a href=\"https://herokujp.doorkeeper.jp/events/91348\">前回 #24</a> に引き続き、セッションでの発表は<a href=\"https://herokujp.doorkeeper.jp/events/82754\">前々回 #23</a> 以来です。</p>\n\n<p>前々回 #23 については自分のブログにも書きました。</p>\n\n<p><a href=\"https://masutaka.net/chalow/2018-11-28-1.html\">Heroku Meetup #23 \"Heroku Dynamite!!\" で話してきた #herokujp / マスタカの ChangeLog メモ</a></p>\n\n<h2>LT でも話した</h2>\n\n<p>LT でも飛び込みで話しました。内容は <a href=\"https://github.com/heroku/heroku-buildpack-google-chrome\">heroku-buildpack-google-chrome</a> と <a href=\"https://github.com/heroku/heroku-buildpack-chromedriver\">heroku-buildpack-chromedriver</a> の細かすぎる話です。動かない Chrome や chromedriver のバイナリが本番環境にデプロイされることを防ぐ方法や、それに関して PR を出した話など。スライドの 41~43 ページ目が相当します。</p>\n\n<p>無駄に元気な 1 日でした。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">今日は会社で LT 1 本やって、Heroku meetup で通常セッション 1 本、その後に飛び込み（？）で LT 1 本やった。さすがにもうこの数をやることないかな？ <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a></p>&mdash; Takashi MASUDA (@masutaka) <a href=\"https://twitter.com/masutaka/status/1154719579374936065?ref_src=twsrc%5Etfw\">2019年7月26日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>※ 44~45 ページ目は、尺の関係で削ったブランチ戦略のメモです。ベストな戦略ではないので改善予定。</p>\n\n<h2>雑感</h2>\n\n<p>初心者向けの知見に比べて、一歩進んだ Heroku 知見はあまり Web 上に存在しない印象です。</p>\n\n<p>ここ 1 年近く、それなりに Heroku を学習してきて「かなりの規模まで Heroku で十分では？」「デプロイや Dyno の再起動で中断されるため苦手とされがちなバッチ処理も、簡単に克服できるのでは？」などと、考えが変わってきています。</p>\n\n<p>これからもブログや登壇などで、コミュニティに還元していきます。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">本日の頂き物。キャップはスピーカー特典 <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a> <a href=\"https://t.co/Whc3UVJrbg\">pic.twitter.com/Whc3UVJrbg</a></p>&mdash; Takashi MASUDA (@masutaka) <a href=\"https://twitter.com/masutaka/status/1154746086814150658?ref_src=twsrc%5Etfw\">2019年7月26日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n","contentSnippet":"こんにちは id:masutaka26 です。先週金曜日（2019/7/26）に開催された Heroku Meetup #25 \"Heroku Ghost\" で『デプロイ元をCircleCIからHerokuに乗り換えた』というお題で発表してきました。つい先日、現在関わっている EC Booster のデプロイフローを改善し、それなりに知見を得られたためです。Heroku Meetup の参加は前回 #24 に引き続き、セッションでの発表は前々回 #23 以来です。前々回 #23 については自分のブログにも書きました。Heroku Meetup #23 \"Heroku Dynamite!!\" で話してきた #herokujp / マスタカの ChangeLog メモLT でも話したLT でも飛び込みで話しました。内容は heroku-buildpack-google-chrome と heroku-buildpack-chromedriver の細かすぎる話です。動かない Chrome や chromedriver のバイナリが本番環境にデプロイされることを防ぐ方法や、それに関して PR を出した話など。スライドの 41~43 ページ目が相当します。無駄に元気な 1 日でした。今日は会社で LT 1 本やって、Heroku meetup で通常セッション 1 本、その後に飛び込み（？）で LT 1 本やった。さすがにもうこの数をやることないかな？ #herokujp— Takashi MASUDA (@masutaka) 2019年7月26日※ 44~45 ページ目は、尺の関係で削ったブランチ戦略のメモです。ベストな戦略ではないので改善予定。雑感初心者向けの知見に比べて、一歩進んだ Heroku 知見はあまり Web 上に存在しない印象です。ここ 1 年近く、それなりに Heroku を学習してきて「かなりの規模まで Heroku で十分では？」「デプロイや Dyno の再起動で中断されるため苦手とされがちなバッチ処理も、簡単に克服できるのでは？」などと、考えが変わってきています。これからもブログや登壇などで、コミュニティに還元していきます。本日の頂き物。キャップはスピーカー特典 #herokujp pic.twitter.com/Whc3UVJrbg— Takashi MASUDA (@masutaka) 2019年7月26日","link":"https://developer.feedforce.jp/entry/2019/07/29/140000","isoDate":"2019-07-29T05:00:00.000Z","dateMiliSeconds":1564376400000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"esa をネタに Emacs Lisp と Elm を無理やり繋げた発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。今回はネタ探しに特に苦労しました。</p>\n\n<p>週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『esaを支えたい技術』という発表をしました。</p>\n\n<p><a href=\"https://esa.io/\">esa</a> をネタに Emacs Lisp と <a href=\"https://elm-lang.org/\">Elm</a> を無理やり繋げた内容です。ちょっと強引だった。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"61df048e1aec4413bd797af156bc5f21\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>流れとしては、↓ こんな感じです。</p>\n\n<ul>\n<li>先月 <a href=\"https://github.com/masutaka/emacs-helm-esa\">emacs-helm-esa</a> というツールを作ったよ</li>\n<li>Elm を学んだら、Emacs Lisp と Syntax が似ていたよ</li>\n<li><a href=\"https://github.com/masutaka/sandbox-elm-esa\">esa の検索をするだけの簡単なツール</a>を作ったよ</li>\n</ul>\n\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>関数型言語について学んでみたいと思っていたので、おすすめの順序を提示してくださり、参考になりました！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 良かったです。Elm はだいぶ学びやすかったです</li>\n</ul>\n</li>\n<li>Elm、こうして見てみると Haskell にめっちゃ似てますね！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですね</li>\n</ul>\n</li>\n<li>発表の流れで Elm の話になると思わなかった\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 強引でしたね (^^;</li>\n</ul>\n</li>\n<li>Elm ならふだんバックエンドのコード書いている人でもモダンなフロントエンド書けるって聞いたので勉強がんばる（決意）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 刺激になってよかったです</li>\n</ul>\n</li>\n<li>良かったです！規模が大きくなってきても同じノリで書けるのも Elm は良い\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そういう感じなんですね。コンパイルが通ればだいたい動くのが楽でした</li>\n</ul>\n</li>\n<li>Elm の HTML を作るのがすごいですね！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですよね。<a href=\"https://github.com/masutaka/sandbox-elm-esa/blob/b46bb8d405030a96ab3049a8aac1450decf0adf9/src/Main.elm#L93\">この辺りの div や i</a> は全部関数ですからね</li>\n</ul>\n</li>\n<li>ネタバレに慎重になりすぎでは！？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 自分でも全く理解できません</li>\n</ul>\n</li>\n<li>来週にはこれが Chrome 拡張になっているんですかね？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> はい、次回以降の当番の方が必ず・・・！</li>\n</ul>\n</li>\n<li>Elm おもしろそう 🏃‍♀️🚶‍♂️ emacs ってすごいんですね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> とは言え、今の時代は emacs の他に優先順位の高いものがたくさんありますね 💦</li>\n</ul>\n</li>\n<li>まさかの Elm とは！？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 考えに考えた末の Elm です...</li>\n</ul>\n</li>\n<li>これで EC Booster Front 開発できますね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 見ててくださいよ！これからのマスタカを！！１</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>所感</h2>\n\n<p>正直、外したかな？と思いながら発表してましたが、感想を読むと良い刺激を与えられたようで良かったです。</p>\n\n<p>一方で新しい言語の説明は難しいうえ、皆さんに馴染みがない Emacs Lisp との比較をしたので、余計に分かりづらかったという...。</p>\n\n<p>こうするとあまり盛り上がらないという学びを得たことと、個人的には大変満足のいく内容だったので、結果的には良かったです。</p>\n\n<p>さて、次回の勉強会のネタはどうするかな...。</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/\"><img src=\"https://m.media-amazon.com/images/I/51G32HC7rSL.jpg\" class=\"hatena-asin-detail-image\" alt=\"基礎からわかる Elm\" title=\"基礎からわかる Elm\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/\">基礎からわかる Elm</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/%C4%BB%B5%EF%20%CD%DB%B2%F0\" class=\"keyword\">鳥居 陽介</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2019/02/27</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。今回はネタ探しに特に苦労しました。週次の社内勉強会 FFTT で『esaを支えたい技術』という発表をしました。esa をネタに Emacs Lisp と Elm を無理やり繋げた内容です。ちょっと強引だった。発表の内容流れとしては、↓ こんな感じです。先月 emacs-helm-esa というツールを作ったよElm を学んだら、Emacs Lisp と Syntax が似ていたよesa の検索をするだけの簡単なツールを作ったよ発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。関数型言語について学んでみたいと思っていたので、おすすめの順序を提示してくださり、参考になりました！ 良かったです。Elm はだいぶ学びやすかったですElm、こうして見てみると Haskell にめっちゃ似てますね！ そうなんですね発表の流れで Elm の話になると思わなかった 強引でしたね (^^;Elm ならふだんバックエンドのコード書いている人でもモダンなフロントエンド書けるって聞いたので勉強がんばる（決意） 刺激になってよかったです良かったです！規模が大きくなってきても同じノリで書けるのも Elm は良い そういう感じなんですね。コンパイルが通ればだいたい動くのが楽でしたElm の HTML を作るのがすごいですね！ ですよね。この辺りの div や i は全部関数ですからねネタバレに慎重になりすぎでは！？ 自分でも全く理解できません来週にはこれが Chrome 拡張になっているんですかね？ はい、次回以降の当番の方が必ず・・・！Elm おもしろそう 🏃‍♀️🚶‍♂️ emacs ってすごいんですね とは言え、今の時代は emacs の他に優先順位の高いものがたくさんありますね 💦まさかの Elm とは！？ 考えに考えた末の Elm です...これで EC Booster Front 開発できますね 見ててくださいよ！これからのマスタカを！！１所感正直、外したかな？と思いながら発表してましたが、感想を読むと良い刺激を与えられたようで良かったです。一方で新しい言語の説明は難しいうえ、皆さんに馴染みがない Emacs Lisp との比較をしたので、余計に分かりづらかったという...。こうするとあまり盛り上がらないという学びを得たことと、個人的には大変満足のいく内容だったので、結果的には良かったです。さて、次回の勉強会のネタはどうするかな...。基礎からわかる Elm作者:鳥居 陽介発売日: 2019/02/27メディア: 単行本（ソフトカバー）","link":"https://developer.feedforce.jp/entry/2019/07/01/140000","isoDate":"2019-07-01T05:00:00.000Z","dateMiliSeconds":1561957200000,"imageUrl":"https://images-fe.ssl-images-amazon.com/images/I/51G32HC7rSL._SL160_.jpg","authorName":"masutaka"},{"title":"Heroku で Chrome を使ったクローラの IP アドレスを固定する","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>少し前に、Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化出来ないか調査しました。</p>\n\n<p>実装は見送られましたが、想定よりも難しく調査に時間がかかったので、この記事に残しておきます。</p>\n\n<p>方法だけ知りたい方は、下の方にある「手順」をご覧ください。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Heroku-Add-on-を比較する\">Heroku Add-on を比較する</a><ul>\n            <li><a href=\"#開発組織\">開発組織</a></li>\n            <li><a href=\"#実装\">実装</a></li>\n            <li><a href=\"#プラン\">プラン</a></li>\n            <li><a href=\"#CLI-のインストール\">CLI のインストール</a></li>\n            <li><a href=\"#Heroku-Buildpack\">Heroku Buildpack</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#コラム-固定-IP-アドレスへの私見\">[コラム] 固定 IP アドレスへの私見</a></li>\n    <li><a href=\"#Chrome-のクローラで-IP-アドレスを固定化する\">Chrome のクローラで IP アドレスを固定化する</a><ul>\n            <li><a href=\"#試行錯誤の日々\">試行錯誤の日々</a></li>\n            <li><a href=\"#ついに成功\">ついに成功</a></li>\n            <li><a href=\"#手順\">手順</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#QuotaGuard-Static-の注意事項\">QuotaGuard Static の注意事項</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"Heroku-Add-on-を比較する\">Heroku Add-on を比較する</h2>\n\n<p>今回は <a href=\"https://elements.heroku.com/addons/proximo\">Proximo</a> と <a href=\"https://elements.heroku.com/addons/quotaguardstatic\">QuotaGuard Static</a> を検討し、最終的に QuotaGuard Static を採用しました。</p>\n\n<p>💡 他に <a href=\"https://elements.heroku.com/addons/fixie\">Fixie</a>, <a href=\"https://elements.heroku.com/addons/fixie-socks\">Fixie Socks</a>, <a href=\"https://elements.heroku.com/addons/guru301\">Guru301</a> などがあるようです。</p>\n\n<p>以下、その理由です。</p>\n\n<h3 id=\"開発組織\">開発組織</h3>\n\n<p>Proximo は <a href=\"https://github.com/pirateradio\">https://github.com/pirateradio</a> を見た感じ <a href=\"https://github.com/ddollar\">@ddollar</a> の個人開発のようです。この方は <a href=\"https://github.com/ddollar/foreman\">foreman</a> などを作っており、多分すごい人です。</p>\n\n<p>QuotaGuard Static は <a href=\"https://www.quotaguard.com/\">https://www.quotaguard.com/</a> によると <a href=\"https://www.alpineshark.com/\">Alpine Shark, LLC</a> のようです。会社のほうがちょっとだけ安心できます。</p>\n\n<h3 id=\"実装\">実装</h3>\n\n<p>Proximo は 1 つのようですが、QuotaGuard Static は 2 つの Proxy サーバで冗長化されているようです。Proxy サーバが落ちる確率は低いかもしれませんが、冗長化されているに越したことはありません。</p>\n\n<p>🔗 <a href=\"https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on\">https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on</a></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ heroku addons:create proximo:development\nAdding proximo to sharp-mountain-4005... done, v18 ($5/mo)\nYour static IP address is 10.9.8.7</pre>\n\n\n<p>🔗 <a href=\"https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on\">https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on</a></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ heroku addons:create quotaguardstatic:starter\n-----&gt; Adding quotaguardstatic:starter to sharp-mountain-4005... done, v18 (free)\n-----&gt; Your static IPs are [10.11.12.13, 14.15.16.17]</pre>\n\n\n<h3 id=\"プラン\">プラン</h3>\n\n<p>QuotaGuard Static は無料プランがあるので始めやすいです。Proximo のプランは <code>$5/mo</code> からです。</p>\n\n<p>ちなみにどちらも <code>PROXIMO_MASK</code> や <code>QUOTAGUARDSTATIC_MASK</code> という環境変数を設定すると、一部のレンジの送信だけこれらのサービス経由にすることができ、料金を節約できます。</p>\n\n<p>💡 正確に書くと <code>QUOTAGUARDSTATIC_MASK</code> は後述する qgsocksify 用の環境変数です。</p>\n\n<h3 id=\"CLI-のインストール\">CLI のインストール</h3>\n\n<p>どちらも CLI が提供されており、必要に応じてインストールします。</p>\n\n<p>Proximo はインストール元が http なのがイマイチでした。https に変えてもアクセス不可です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl http://downloads.proximo.io/proximo-stacklet.tgz | tar xz</pre>\n\n\n<p>QuotaGuard Static は普通に https でインストール出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz\n$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xz</pre>\n\n\n<h3 id=\"Heroku-Buildpack\">Heroku Buildpack</h3>\n\n<p>今回の調査の過程で Heroku Buildpack を作りました。バイナリファイルをリポジトリに commit せずに済みます。よかったらどうぞ。</p>\n\n<ul>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-proximo\">https://github.com/masutaka/heroku-buildpack-proximo</a></li>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-qgtunnel\">https://github.com/masutaka/heroku-buildpack-qgtunnel</a></li>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-qgsocksify\">https://github.com/masutaka/heroku-buildpack-qgsocksify</a></li>\n</ul>\n\n\n<h2 id=\"コラム-固定-IP-アドレスへの私見\">[コラム] 固定 IP アドレスへの私見</h2>\n\n<p>IP アドレスを固定化したいのは、どんなケースでしょうか。</p>\n\n<p>多くはセキュリティ要件だと思いますが、私はあまり賛同できないです。</p>\n\n<p>そもそも当該 IP アドレスは認証されておらず、所有者が変わることがあります。仕組み上それに気づくことは難しいため、逆にセキュリティリスクを増やすことになります。そういう意味では電話番号とよく似ています。</p>\n\n<p>サービスのスケールの観点からもデメリットがあります。例えば Heroku から AWS に引っ越す時、固定 IP アドレスは変わってしまうでしょう。顧客との調整が必要ですし、間に開発会社が入っていると、より時間がかかります。</p>\n\n<h2 id=\"Chrome-のクローラで-IP-アドレスを固定化する\">Chrome のクローラで IP アドレスを固定化する</h2>\n\n<p>今回のケースでは Heroku の worker Dyno 上に <a href=\"https://rubygems.org/gems/sidekiq\">sidekiq</a> が起動しており、<a href=\"https://rubygems.org/gems/selenium-webdriver\">selenium-webdriver</a> 経由で Chrome が子プロセスとして起動し、クロールします。</p>\n\n<pre><code>sidekiq\n└ Chrome\n   ↓\n   クロール先\n</code></pre>\n\n<h3 id=\"試行錯誤の日々\">試行錯誤の日々</h3>\n\n<p>当初は sidekiq 自体に qgtunnel や qgsocksify をラップしましたが、うまくいきませんでした。よく考えたら納得です。</p>\n\n<p>Chrome に <code>--proxy-server=http://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;</code> や <code>--proxy-auth=&lt;USERNAME&gt;:&lt;PASSWORD&gt;</code> を指定してもダメ。</p>\n\n<p>どうやら少なくとも Chrome 73 ではセキュリティ上の理由から、コマンドラインオプションから認証情報を設定できないようです。認証なしプロクシなら大丈夫ですが、QuotaGuard Static は商用サービスなので認証は必須です。</p>\n\n<h3 id=\"ついに成功\">ついに成功</h3>\n\n<p>ダメ元で QuotaGuard Static のサポートに聞いたら、方法を知っており、無事クロール先にアクセスすることが出来ました。</p>\n\n<p>👇 Dyno とクロール先を SOCKS5 トンネルで繋ぎ、それ経由でアクセスします。</p>\n\n<pre><code>sidekiq\n└ Chrome (4443 port)\n   ↓ (SOCKS5 tunnel)\n   QuotaGuard Static\n   ↓ (SOCKS5 tunnel)\n   クロール先 (443 port)\n</code></pre>\n\n<p>TCP アクセスならなんでも IP アドレスを固定化出来そうです。</p>\n\n<h3 id=\"手順\">手順</h3>\n\n<p>(1) 当該 Heroku App に QuotaGuard Static Add-on をインストールします。</p>\n\n<p>(2) qgtunnel CLI もインストールします。前述の heroku-buildpack-qgtunnel を使うとお手軽です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz</pre>\n\n\n<p>(3) Heroku のダッシュボードから、QuotaGuard Static のダッシュボードに進み、<code>Settings</code> → <code>Setup</code> とクリックします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193848.png\" alt=\"f:id:masutaka26:20190425193848p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(4) さらに <code>Tunnel</code> → <code>Create Tunnel</code> とクリックします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425192905.png\" alt=\"f:id:masutaka26:20190425192905p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(5) <code>Remote Destination</code> にクロール先を、<code>Local Port</code> は 4443、<code>Transparent</code> は true に設定します。<code>Encrypted</code> は設定しません。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193342.png\" alt=\"f:id:masutaka26:20190425193342p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(6) トンネルが出来ました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193614.png\" alt=\"f:id:masutaka26:20190425193614p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li>127.0.0.1:4443 へのアクセスは destination.example.com:443 へのトンネルになります</li>\n<li><code>Transparent</code> を有効したことにより、destination.example.com の DNS が 127.0.0.1 に上書きされました。destination.example.com:4443 へのアクセスは destination.example.com:443 と等価になります</li>\n<li>すでに HTTPS を使っているため、<code>Encrypted</code> は必要ありません</li>\n</ul>\n\n\n<p>(7) selenium-webdriver に与える Chrome のバイナリを qgtunnel でラッピングします。今回は以下のようなシェルスクリプト bin/google-chrome-qgtunnel を作り、selenium-webdriver に指定しました。</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\">#!/bin/sh -eu</span>\n\n<span class=\"synStatement\">exec</span> bin/qgtunnel <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$GOOGLE_CHROME_SHIM</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$@</span><span class=\"synStatement\">&quot;</span>\n</pre>\n\n\n<p>💡 <a href=\"https://github.com/heroku/heroku-buildpack-google-chrome\">heroku-buildpack-google-chrome</a> と <a href=\"https://github.com/heroku/heroku-buildpack-chromedriver.git\">heroku-buildpack-chromedriver</a> を使っています。環境変数 <code>GOOGLE_CHROME_SHIM</code> は <code>/app/.apt/usr/bin/google-chrome</code> です。</p>\n\n<p>(8) 左側の <code>Outbound</code> をクリックし、SOCKS5 url を Heroku の環境変数 <code>QUOTAGUARDSTATIC_URL</code> に上書きします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425191501.png\" alt=\"f:id:masutaka26:20190425191501p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(9) 左側の <code>Tunnel</code> から <code>Download Configuration</code> をクリックし、<code>.qgtunnel</code> ファイルをリポジトリに commit します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425203447.png\" alt=\"f:id:masutaka26:20190425203447p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(10) 以上の設定により、destination.example.com:4443 へのアクセスが destination.example.com:443 に変換され、且つ IP アドレスも固定されます。</p>\n\n<p>なにかトラブルがあったら Heroku の環境変数 <code>QGTUNNEL_DEBUG</code> に true をセットして、ログを確認すると良いと思います。</p>\n\n<h2 id=\"QuotaGuard-Static-の注意事項\">QuotaGuard Static の注意事項</h2>\n\n<p>app.json の addons に <code>quotaguardstatic</code> を追加して、Review App を作ると Micro plan <code>$19/mo</code> で作られてしまいます。<code>quotaguardstatic:starter</code> とかにしても同じです。</p>\n\n<p>QuotaGuard Static のサポートに聞いたところ、Heroku のアカウント単位で設定を変える必要があるそう。問い合わせが必要です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化しました。</p>\n\n<p>固定 IP アドレス対応は出来るだけ避けたほうが良いと思いますが、どうしても必要な時にこの記事が参考になれば幸いです。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。少し前に、Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化出来ないか調査しました。実装は見送られましたが、想定よりも難しく調査に時間がかかったので、この記事に残しておきます。方法だけ知りたい方は、下の方にある「手順」をご覧ください。Heroku Add-on を比較する開発組織実装プランCLI のインストールHeroku Buildpack[コラム] 固定 IP アドレスへの私見Chrome のクローラで IP アドレスを固定化する試行錯誤の日々ついに成功手順QuotaGuard Static の注意事項まとめHeroku Add-on を比較する今回は Proximo と QuotaGuard Static を検討し、最終的に QuotaGuard Static を採用しました。💡 他に Fixie, Fixie Socks, Guru301 などがあるようです。以下、その理由です。開発組織Proximo は https://github.com/pirateradio を見た感じ @ddollar の個人開発のようです。この方は foreman などを作っており、多分すごい人です。QuotaGuard Static は https://www.quotaguard.com/ によると Alpine Shark, LLC のようです。会社のほうがちょっとだけ安心できます。実装Proximo は 1 つのようですが、QuotaGuard Static は 2 つの Proxy サーバで冗長化されているようです。Proxy サーバが落ちる確率は低いかもしれませんが、冗長化されているに越したことはありません。🔗 https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on$ heroku addons:create proximo:developmentAdding proximo to sharp-mountain-4005... done, v18 ($5/mo)Your static IP address is 10.9.8.7🔗 https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on$ heroku addons:create quotaguardstatic:starter-----> Adding quotaguardstatic:starter to sharp-mountain-4005... done, v18 (free)-----> Your static IPs are [10.11.12.13, 14.15.16.17]プランQuotaGuard Static は無料プランがあるので始めやすいです。Proximo のプランは $5/mo からです。ちなみにどちらも PROXIMO_MASK や QUOTAGUARDSTATIC_MASK という環境変数を設定すると、一部のレンジの送信だけこれらのサービス経由にすることができ、料金を節約できます。💡 正確に書くと QUOTAGUARDSTATIC_MASK は後述する qgsocksify 用の環境変数です。CLI のインストールどちらも CLI が提供されており、必要に応じてインストールします。Proximo はインストール元が http なのがイマイチでした。https に変えてもアクセス不可です。$ curl http://downloads.proximo.io/proximo-stacklet.tgz | tar xzQuotaGuard Static は普通に https でインストール出来ます。$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xzHeroku Buildpack今回の調査の過程で Heroku Buildpack を作りました。バイナリファイルをリポジトリに commit せずに済みます。よかったらどうぞ。https://github.com/masutaka/heroku-buildpack-proximohttps://github.com/masutaka/heroku-buildpack-qgtunnelhttps://github.com/masutaka/heroku-buildpack-qgsocksify[コラム] 固定 IP アドレスへの私見IP アドレスを固定化したいのは、どんなケースでしょうか。多くはセキュリティ要件だと思いますが、私はあまり賛同できないです。そもそも当該 IP アドレスは認証されておらず、所有者が変わることがあります。仕組み上それに気づくことは難しいため、逆にセキュリティリスクを増やすことになります。そういう意味では電話番号とよく似ています。サービスのスケールの観点からもデメリットがあります。例えば Heroku から AWS に引っ越す時、固定 IP アドレスは変わってしまうでしょう。顧客との調整が必要ですし、間に開発会社が入っていると、より時間がかかります。Chrome のクローラで IP アドレスを固定化する今回のケースでは Heroku の worker Dyno 上に sidekiq が起動しており、selenium-webdriver 経由で Chrome が子プロセスとして起動し、クロールします。sidekiq└ Chrome   ↓   クロール先試行錯誤の日々当初は sidekiq 自体に qgtunnel や qgsocksify をラップしましたが、うまくいきませんでした。よく考えたら納得です。Chrome に --proxy-server=http://<USERNAME>:<PASSWORD>@<HOSTNAME>:<PORT> や --proxy-auth=<USERNAME>:<PASSWORD> を指定してもダメ。どうやら少なくとも Chrome 73 ではセキュリティ上の理由から、コマンドラインオプションから認証情報を設定できないようです。認証なしプロクシなら大丈夫ですが、QuotaGuard Static は商用サービスなので認証は必須です。ついに成功ダメ元で QuotaGuard Static のサポートに聞いたら、方法を知っており、無事クロール先にアクセスすることが出来ました。👇 Dyno とクロール先を SOCKS5 トンネルで繋ぎ、それ経由でアクセスします。sidekiq└ Chrome (4443 port)   ↓ (SOCKS5 tunnel)   QuotaGuard Static   ↓ (SOCKS5 tunnel)   クロール先 (443 port)TCP アクセスならなんでも IP アドレスを固定化出来そうです。手順(1) 当該 Heroku App に QuotaGuard Static Add-on をインストールします。(2) qgtunnel CLI もインストールします。前述の heroku-buildpack-qgtunnel を使うとお手軽です。$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz(3) Heroku のダッシュボードから、QuotaGuard Static のダッシュボードに進み、Settings → Setup とクリックします。(4) さらに Tunnel → Create Tunnel とクリックします。(5) Remote Destination にクロール先を、Local Port は 4443、Transparent は true に設定します。Encrypted は設定しません。(6) トンネルが出来ました。127.0.0.1:4443 へのアクセスは destination.example.com:443 へのトンネルになりますTransparent を有効したことにより、destination.example.com の DNS が 127.0.0.1 に上書きされました。destination.example.com:4443 へのアクセスは destination.example.com:443 と等価になりますすでに HTTPS を使っているため、Encrypted は必要ありません(7) selenium-webdriver に与える Chrome のバイナリを qgtunnel でラッピングします。今回は以下のようなシェルスクリプト bin/google-chrome-qgtunnel を作り、selenium-webdriver に指定しました。#!/bin/sh -euexec bin/qgtunnel \"$GOOGLE_CHROME_SHIM\" \"$@\"💡 heroku-buildpack-google-chrome と heroku-buildpack-chromedriver を使っています。環境変数 GOOGLE_CHROME_SHIM は /app/.apt/usr/bin/google-chrome です。(8) 左側の Outbound をクリックし、SOCKS5 url を Heroku の環境変数 QUOTAGUARDSTATIC_URL に上書きします。(9) 左側の Tunnel から Download Configuration をクリックし、.qgtunnel ファイルをリポジトリに commit します。(10) 以上の設定により、destination.example.com:4443 へのアクセスが destination.example.com:443 に変換され、且つ IP アドレスも固定されます。なにかトラブルがあったら Heroku の環境変数 QGTUNNEL_DEBUG に true をセットして、ログを確認すると良いと思います。QuotaGuard Static の注意事項app.json の addons に quotaguardstatic を追加して、Review App を作ると Micro plan $19/mo で作られてしまいます。quotaguardstatic:starter とかにしても同じです。QuotaGuard Static のサポートに聞いたところ、Heroku のアカウント単位で設定を変える必要があるそう。問い合わせが必要です。まとめHeroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化しました。固定 IP アドレス対応は出来るだけ避けたほうが良いと思いますが、どうしても必要な時にこの記事が参考になれば幸いです。","link":"https://developer.feedforce.jp/entry/2019/04/26/154540","isoDate":"2019-04-26T06:45:40.000Z","dateMiliSeconds":1556261140000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"Heroku の Preboot 機能を深掘りした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Heroku Advent Calendar 2018 の 12 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2018%2Fheroku\" title=\"heroku Advent Calendar 2018 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2018/heroku\">qiita.com</a></cite></p>\n\n<p>昨日は <a href=\"https://qiita.com/takuchalle\">@takuchalle</a> さんの『<a href=\"https://blog.takuchalle.me/post/2018/12/11/heroku_use_wkhtmltoimage/\">Heroku で wkhtmltoimage を使う方法</a>』でした。似たツールの <a href=\"http://www.paulhammond.org/webkit2png/\">webkit2png</a> は使ったことがあります。webkit2png が動作するのは macOS だけですが、<a href=\"https://wkhtmltopdf.org/\">wkhtmltoimage</a> は Windows と Linux でも動作するのですね。へぇー。</p>\n\n<p>先月、Heroku の Preboot 機能を調べる機会がありました。Web 上の日本語記事は Preboot が GA になった 2014 年頃の情報が多く、若干情報が古かったため、2018 年時点の最新の情報をまとめます。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Preboot-機能とは何か\">Preboot 機能とは何か</a></li>\n    <li><a href=\"#どのように有効にするのか\">どのように有効にするのか</a></li>\n    <li><a href=\"#使用する-Procfile\">使用する Procfile</a></li>\n    <li><a href=\"#デプロイによる-heroku-ps-の変化\">デプロイによる heroku ps の変化</a></li>\n    <li><a href=\"#デプロイ時の挙動\">デプロイ時の挙動</a></li>\n    <li><a href=\"#デプロイ時のログ\">デプロイ時のログ</a></li>\n    <li><a href=\"#再起動時の挙動\">再起動時の挙動</a></li>\n    <li><a href=\"#再起動時のログ\">再起動時のログ</a><ul>\n            <li><a href=\"#Web-dyno-1-台目\">Web dyno 1 台目</a></li>\n            <li><a href=\"#Web-dyno-2-台目\">Web dyno 2 台目</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#注意事項\">注意事項</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"Preboot-機能とは何か\">Preboot 機能とは何か</h2>\n\n<p><a href=\"https://devcenter.heroku.com/articles/production-check#dyno-redundancy\">Production Check > Dyno redundancy</a> に書いてあるとおり、Heroku では冗長性確保のため、本番環境の Web Dyno は 2 台以上が奨励されています。</p>\n\n<blockquote><p>Running at least 2 web dynos for any mission-critical app increases the probability that the app will remain available during a catastrophic event. Multiple dynos are also more likely to run on different physical infrastructure (for example, separate AWS Availability Zones), further increasing redundancy.</p></blockquote>\n\n<p>ただし、それだけだとデプロイや 1 日 1 回の自動再起動で、処理の遅延（<a href=\"https://devcenter.heroku.com/articles/error-codes#h27-client-request-interrupted\">H27 - Client Request Interrupted</a>）や <a href=\"https://devcenter.heroku.com/articles/error-codes#h28-client-connection-idle\">H28 - Client Connection Idle</a> が発生することがあります。</p>\n\n<p>以下のグラフは Dyno Restart のタイミングで H27 と H28 Error が発生している様子です。このグラフはダッシュボードの Metrics から確認できます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181210/20181210191451.png\" alt=\"f:id:masutaka26:20181210191451p:plain\" title=\"f:id:masutaka26:20181210191451p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>これを回避できるのが <a href=\"https://devcenter.heroku.com/articles/preboot\">Preboot</a> 機能です。</p>\n\n<h2 id=\"どのように有効にするのか\">どのように有効にするのか</h2>\n\n<p>Heroku CLI で有効にできます。</p>\n\n<pre class=\"code console\" data-lang=\"console\" data-unlink>$ heroku features:enable preboot -a YOUR_APP_NAME</pre>\n\n\n<p>有効になりました。簡単ですね。</p>\n\n<pre class=\"code console\" data-lang=\"console\" data-unlink>$ heroku features:info preboot -a YOUR_APP_NAME\n=== preboot\nDescription: Provide seamless web dyno deploys [general]\nDocs:        https://devcenter.heroku.com/articles/preboot\nEnabled:     true</pre>\n\n\n<h2 id=\"使用する-Procfile\">使用する Procfile</h2>\n\n<p>今回はこの Procfile を使います。</p>\n\n<pre class=\"code lang-apache\" data-lang=\"apache\" data-unlink>release: bin/rails <span class=\"synConstant\">db</span>:migrate <span class=\"synConstant\">db</span>:seed\n\n<span class=\"synComment\"># Web app</span>\nweb: bin/rails s -p $PORT -e $RAILS_ENV\nworker: PROCESS_TYPE=worker bundle exec sidekiq -C config/sidekiq.yml\n\n<span class=\"synComment\"># Ad app</span>\nad_worker: PROCESS_TYPE=ad_worker bundle exec sidekiq -C config/sidekiq.yml\n</pre>\n\n\n<p><code>web</code>, <code>worker</code>, <code>ad_worker</code> という 3 つの process type を定義しています。今回注目する process type は <code>web</code> だけです。</p>\n\n<p>1 行目で <code>release</code> も定義しているため、デプロイ時には One-Off Dyno<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> で release 処理をしたあと、生成した Slug が Dyno に展開されていきます。</p>\n\n<h2 id=\"デプロイによる-heroku-ps-の変化\">デプロイによる heroku ps の変化</h2>\n\n<p>それでは <code>$ watch 'heroku ps -a YOUR_APP_NAME'</code> しつつ、デプロイの様子を観察していきましょう。macOS では watch コマンドは <code>$ brew install watch</code> 等でインストール出来ます。</p>\n\n<p>Web Dyno 1 台の場合、release Dyno の実行が終わると、web.1 Dyno のステータスが up → starting → up と変化します。starting 中にリクエストがあると、クライアントは待たされ、前述の H27 や H28 Error が発生します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 1 台でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131034.gif\" alt=\"f:id:masutaka26:20181211131034g:plain\" title=\"f:id:masutaka26:20181211131034g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 1 台でデプロイした様子</figcaption></figure></p>\n\n<p>Web Dyno 2 台かつ Preboot 無効でも、基本的に同じです。2 台同時に up → starting → up と変化します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 2 台かつ Preboot 無効でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131128.gif\" alt=\"f:id:masutaka26:20181211131128g:plain\" title=\"f:id:masutaka26:20181211131128g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 2 台かつ Preboot 無効でデプロイした様子</figcaption></figure></p>\n\n<p>Web Dyno 2 台かつ Preboot を有効にすると、期待した通り、1 台ずつ up → starting → up に<strong>なりませんでした・・・！あれ？</strong></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 2 台かつ Preboot 有効でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211133556.gif\" alt=\"f:id:masutaka26:20181211133556g:plain\" title=\"f:id:masutaka26:20181211133556g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 2 台かつ Preboot 有効でデプロイした様子</figcaption></figure></p>\n\n<blockquote><ul>\n<li>Logs will show new dynos starting soon after the slug compile is finished. The output of <code>heroku ps</code> will immediately show the state (for example, <code>starting</code> or <code>up</code>) of the new dynos. Old dynos are still running but won’t appear in <code>heroku ps</code>.</li>\n</ul>\n</blockquote>\n\n<p><a href=\"https://devcenter.heroku.com/articles/preboot\">Preboot のドキュメント</a>によると、heroku ps では確認できないようです。ただしログでは確認できるそう。</p>\n\n<h2 id=\"デプロイ時の挙動\">デプロイ時の挙動</h2>\n\n<blockquote><ul>\n<li>Approximately 3 minutes after the deploy completes (or 2 minutes after your app’s boot timeout limit, which defaults to 1 minute), HTTP requests will start routing to the new dynos and simultaneously stop routing to the old dynos.</li>\n</ul>\n</blockquote>\n\n<p>遅くともデプロイ完了から約 3 分後、もしくはアプリケーションの起動タイムアウトリミット 2 分（デフォルトは 1 分）後、HTTP リクエストは新 Dyno に Routing されるそうです。</p>\n\n<blockquote><ul>\n<li>Shortly after the new dynos are fully live and serving user requests, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</li>\n</ul>\n</blockquote>\n\n<p>新 Dyno が完全に起動し、ユーザリクエストを処理するとすぐに、旧 Dyno はシャットダウンされるようです。これもログで確認可能とのこと。</p>\n\n<p>では実際にログを見てみましょう。</p>\n\n<h2 id=\"デプロイ時のログ\">デプロイ時のログ</h2>\n\n<p>git push 後まもなく、Web dyno の状態が <code>up</code> から <code>starting</code> に変わりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:58:51 heroku[web] notice Restarting\nNov 28 14:58:51 heroku[web] notice State changed from up to starting\nNov 28 14:58:51 heroku[web] notice Restarting\nNov 28 14:58:51 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 2 台で Puma (Web server) がそれぞれ起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:59:17 heroku[web] notice Starting process with command `bin/rails s -p 24256 -e production`\nNov 28 14:59:19 heroku[web] notice Starting process with command `bin/rails s -p 15417 -e production`\nNov 28 14:59:21 app[web] info [heroku-exec] Starting\nNov 28 14:59:22 app[web] info [heroku-exec] Starting\nNov 28 14:59:31 app[web] info =&gt; Booting Puma\nNov 28 14:59:31 app[web] info =&gt; Rails 5.2.1 application starting in production\nNov 28 14:59:31 app[web] info =&gt; Run `rails server -h` for more startup options\nNov 28 14:59:32 app[web] info =&gt; Booting Puma\nNov 28 14:59:32 app[web] info =&gt; Rails 5.2.1 application starting in production\nNov 28 14:59:32 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:59:33 heroku[web] notice State changed from starting to up\nNov 28 14:59:34 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。問題はありませんが、手元で起動するよりずいぶん遅い気がします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:02:03 app[web] info Puma starting in single mode...\nNov 28 15:02:03 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 28 15:02:03 app[web] info * Min threads: 11, max threads: 11\nNov 28 15:02:03 app[web] info * Environment: production\nNov 28 15:02:03 app[web] info * Listening on tcp://0.0.0.0:24256\nNov 28 15:02:03 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 3 分とあるため合っています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:02:19 heroku[web] notice Stopping all processes with SIGTERM\nNov 28 15:02:19 app[web] info Gracefully stopping, waiting for requests to finish\nNov 28 15:02:19 app[web] info === puma shutdown: 2018-11-28 06:02:19 +0000 ===\nNov 28 15:02:19 app[web] info Goodbye!\nNov 28 15:02:19 app[web] info Exiting\nNov 28 15:02:19 heroku[web] notice Process exited with status 143</pre>\n\n\n<p>もうひとつの旧 Web dyno 1 台で Puma が終了しました。これも意訳のとおりです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:03:25 heroku[web] notice Stopping all processes with SIGTERM\nNov 28 15:03:25 app[web] info Gracefully stopping, waiting for requests to finish\nNov 28 15:03:25 app[web] info === puma shutdown: 2018-11-28 06:03:25 +0000 ===\nNov 28 15:03:25 app[web] info Goodbye!\nNov 28 15:03:25 app[web] info Exiting\nNov 28 15:03:25 heroku[web] notice Process exited with status 143</pre>\n\n\n<p>もうひとつの新 Web dyno 1 台で Puma が起動しきりました。<code>Booting Puma</code> からずいぶんと時間がかかりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:05:08 app[web] info Puma starting in single mode...\nNov 28 15:05:08 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 28 15:05:08 app[web] info * Min threads: 11, max threads: 11\nNov 28 15:05:08 app[web] info * Environment: production\nNov 28 15:05:08 app[web] info * Listening on tcp://0.0.0.0:15417\nNov 28 15:05:08 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>Puma の起動に時間がかかるのは謎ですが、Preboot のドキュメントと相違ないと理解しました。</p>\n\n<h2 id=\"再起動時の挙動\">再起動時の挙動</h2>\n\n<p>再起動時の挙動も確認します。</p>\n\n<p>Heroku ではアプリケーションの健全性を維持するため、<a href=\"https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts\">Dyno は 1 日に 1 回、自動的に再起動します</a>。Dyno は差し替えられるため、ローカルファイルシステムの変更はすべて破棄されます。</p>\n\n<blockquote><p>The new dynos will start receiving requests as soon as it binds to its assigned port. At this point, both the old and new dynos are receiving requests.</p></blockquote>\n\n<p>新 Dyno は割り当てられたポートにバインドされると、すぐにリクエストを受信し始めます。この時点で、新旧の Dyno がリクエストを受信するそう。</p>\n\n<blockquote><p>Approximately 4 to 6 minutes after the restart is invoked, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</p></blockquote>\n\n<p>再起動が行われてから、約 4~6 分後に旧 Dyno がシャットダウンされるようです。これもログで確認可能とのこと。</p>\n\n<p>Preboot が GA になった 2014 年頃は、まだ 1 日 1 回の再起動には対応していないようでした。現在は対応しているようです。</p>\n\n<h2 id=\"再起動時のログ\">再起動時のログ</h2>\n\n<p>結論から書くと、1 台目が再起動し終えてから 2 台目が再起動していました。再起動においても、ドキュメントの通りに Preboot が機能しているようです。</p>\n\n<h3 id=\"Web-dyno-1-台目\">Web dyno 1 台目</h3>\n\n<p>Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:22 heroku[web] notice Cycling\nNov 30 11:41:22 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:42 heroku[web] notice Starting process with command `bin/rails s -p 32434 -e production`\nNov 30 11:41:44 app[web] info [heroku-exec] Starting\nNov 30 11:41:50 app[web] info =&gt; Booting Puma\nNov 30 11:41:50 app[web] info =&gt; Rails 5.2.1.1 application starting in production\nNov 30 11:41:50 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:51 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。相変わらず時間がかかります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:45:45 app[web] info Puma starting in single mode...\nNov 30 11:45:45 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 30 11:45:45 app[web] info * Min threads: 11, max threads: 11\nNov 30 11:45:45 app[web] info * Environment: production\nNov 30 11:45:45 app[web] info * Listening on tcp://0.0.0.0:32434\nNov 30 11:45:45 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 4~6 分後とありましたが、間を置かずに終了しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:45:55 heroku[web] notice Stopping all processes with SIGTERM\nNov 30 11:45:56 app[web] info Gracefully stopping, waiting for requests to finish\nNov 30 11:45:56 app[web] info === puma shutdown: 2018-11-30 02:45:55 +0000 ===\nNov 30 11:45:56 app[web] info Goodbye!\nNov 30 11:45:56 app[web] info Exiting\nNov 30 11:45:56 heroku[web] notice Process exited with status 143</pre>\n\n\n<h3 id=\"Web-dyno-2-台目\">Web dyno 2 台目</h3>\n\n<p>もうひとつの Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。14 分くらい差があります。<a href=\"https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts\">最大 216 分のランダムな差がある</a>ようなので、記載通りです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:00:41 heroku[web] notice Cycling\nNov 30 12:00:41 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:00:59 heroku[web] notice Starting process with command `bin/rails s -p 16965 -e production`\nNov 30 12:01:01 app[web] info [heroku-exec] Starting\nNov 30 12:01:08 app[web] info =&gt; Booting Puma\nNov 30 12:01:08 app[web] info =&gt; Rails 5.2.1.1 application starting in production\nNov 30 12:01:08 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:01:10 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。今回は時間がかかりませんでした。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:01:15 app[web] info Puma starting in single mode...\nNov 30 12:01:15 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 30 12:01:15 app[web] info * Min threads: 11, max threads: 11\nNov 30 12:01:15 app[web] info * Environment: production\nNov 30 12:01:15 app[web] info * Listening on tcp://0.0.0.0:16965\nNov 30 12:01:15 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。今度は時間がかかりました。前述の意訳では約 4~6 分後とあるため合っています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:05:14 heroku[web] notice Stopping all processes with SIGTERM\nNov 30 12:05:14 app[web] info Gracefully stopping, waiting for requests to finish\nNov 30 12:05:14 app[web] info === puma shutdown: 2018-11-30 03:05:14 +0000 ===\nNov 30 12:05:14 app[web] info Goodbye!\nNov 30 12:05:14 app[web] info Exiting\nNov 30 12:05:14 heroku[web] notice Process exited with status 143</pre>\n\n\n<h2 id=\"注意事項\">注意事項</h2>\n\n<p>Preboot を有効にしてデプロイすると、無効時よりも時間をかけて Dyno が差し替わります。全ての Dyno に反映されるまで数分かかることもあるようです。この点はチームで把握しておく必要があります。</p>\n\n<p>最大 3 分間、新旧の Dyno が重複するため、Add-on の同時接続数の制限に達する可能性があります。Heroku Postgres の場合は <a href=\"https://github.com/heroku/heroku-buildpack-pgbouncer\">pgbouncer buildpack</a> を使うことが奨励されています。</p>\n\n<p>新旧の Dyno が混在することにより、一度のデプロイで DB schema とアプリケーションコードを変更すると、不具合が発生する可能性があります。Preboot 機能を一旦無効にすることを勧めています。でも、Procfile に <code>release</code> process type を定義していれば同じなので、個人的には気にならないですね。</p>\n\n<p>Preboot 機能を使うためには、<strong>Dyno type が Standard-1X 以上</strong>である必要があります。Dyno type が <code>Free</code> と <code>Hobby</code> では Preboot を有効に出来ません。</p>\n\n<p><strong>Preboot が適用されるのは Web Dyno だけ</strong>です。自分で定義した <code>worker</code> Dyno 等は対象外です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>Heroku の Preboot 機能を深掘りし、有効にする必要性を理解しました。</p>\n\n<ul>\n<li>Web Dyno を 2 台以上にしたら Preboot を有効にすると良さそう</li>\n<li>前述の「注意事項」には留意したほうが良い</li>\n</ul>\n\n\n<p>しかし、こんなに長い記事になるとは...。</p>\n\n<p>明日の <a href=\"https://qiita.com/advent-calendar/2018/heroku\">heroku Advent Calendar 2018</a> はまたまた <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。Bitbar の便利な Heroku plugin を紹介してくれるみたいです。お楽しみに。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>このような使い捨ての Dyno を <a href=\"https://devcenter.heroku.com/articles/one-off-dynos\">One-Off Dyno</a> と呼びます。heroku run で使われる Dyno もそうです。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは id:masutaka26 です。この記事は Heroku Advent Calendar 2018 の 12 日目の記事です。qiita.com昨日は @takuchalle さんの『Heroku で wkhtmltoimage を使う方法』でした。似たツールの webkit2png は使ったことがあります。webkit2png が動作するのは macOS だけですが、wkhtmltoimage は Windows と Linux でも動作するのですね。へぇー。先月、Heroku の Preboot 機能を調べる機会がありました。Web 上の日本語記事は Preboot が GA になった 2014 年頃の情報が多く、若干情報が古かったため、2018 年時点の最新の情報をまとめます。Preboot 機能とは何かどのように有効にするのか使用する Procfileデプロイによる heroku ps の変化デプロイ時の挙動デプロイ時のログ再起動時の挙動再起動時のログWeb dyno 1 台目Web dyno 2 台目注意事項まとめPreboot 機能とは何かProduction Check > Dyno redundancy に書いてあるとおり、Heroku では冗長性確保のため、本番環境の Web Dyno は 2 台以上が奨励されています。Running at least 2 web dynos for any mission-critical app increases the probability that the app will remain available during a catastrophic event. Multiple dynos are also more likely to run on different physical infrastructure (for example, separate AWS Availability Zones), further increasing redundancy.ただし、それだけだとデプロイや 1 日 1 回の自動再起動で、処理の遅延（H27 - Client Request Interrupted）や H28 - Client Connection Idle が発生することがあります。以下のグラフは Dyno Restart のタイミングで H27 と H28 Error が発生している様子です。このグラフはダッシュボードの Metrics から確認できます。これを回避できるのが Preboot 機能です。どのように有効にするのかHeroku CLI で有効にできます。$ heroku features:enable preboot -a YOUR_APP_NAME有効になりました。簡単ですね。$ heroku features:info preboot -a YOUR_APP_NAME=== prebootDescription: Provide seamless web dyno deploys [general]Docs:        https://devcenter.heroku.com/articles/prebootEnabled:     true使用する Procfile今回はこの Procfile を使います。release: bin/rails db:migrate db:seed# Web appweb: bin/rails s -p $PORT -e $RAILS_ENVworker: PROCESS_TYPE=worker bundle exec sidekiq -C config/sidekiq.yml# Ad appad_worker: PROCESS_TYPE=ad_worker bundle exec sidekiq -C config/sidekiq.ymlweb, worker, ad_worker という 3 つの process type を定義しています。今回注目する process type は web だけです。1 行目で release も定義しているため、デプロイ時には One-Off Dyno1 で release 処理をしたあと、生成した Slug が Dyno に展開されていきます。デプロイによる heroku ps の変化それでは $ watch 'heroku ps -a YOUR_APP_NAME' しつつ、デプロイの様子を観察していきましょう。macOS では watch コマンドは $ brew install watch 等でインストール出来ます。Web Dyno 1 台の場合、release Dyno の実行が終わると、web.1 Dyno のステータスが up → starting → up と変化します。starting 中にリクエストがあると、クライアントは待たされ、前述の H27 や H28 Error が発生します。Web Dyno 1 台でデプロイした様子Web Dyno 2 台かつ Preboot 無効でも、基本的に同じです。2 台同時に up → starting → up と変化します。Web Dyno 2 台かつ Preboot 無効でデプロイした様子Web Dyno 2 台かつ Preboot を有効にすると、期待した通り、1 台ずつ up → starting → up になりませんでした・・・！あれ？Web Dyno 2 台かつ Preboot 有効でデプロイした様子Logs will show new dynos starting soon after the slug compile is finished. The output of heroku ps will immediately show the state (for example, starting or up) of the new dynos. Old dynos are still running but won’t appear in heroku ps.Preboot のドキュメントによると、heroku ps では確認できないようです。ただしログでは確認できるそう。デプロイ時の挙動Approximately 3 minutes after the deploy completes (or 2 minutes after your app’s boot timeout limit, which defaults to 1 minute), HTTP requests will start routing to the new dynos and simultaneously stop routing to the old dynos.遅くともデプロイ完了から約 3 分後、もしくはアプリケーションの起動タイムアウトリミット 2 分（デフォルトは 1 分）後、HTTP リクエストは新 Dyno に Routing されるそうです。Shortly after the new dynos are fully live and serving user requests, the old dynos will be shut down. You’ll see them shut down in the logs as usual.新 Dyno が完全に起動し、ユーザリクエストを処理するとすぐに、旧 Dyno はシャットダウンされるようです。これもログで確認可能とのこと。では実際にログを見てみましょう。デプロイ時のログgit push 後まもなく、Web dyno の状態が up から starting に変わりました。Nov 28 14:58:51 heroku[web] notice RestartingNov 28 14:58:51 heroku[web] notice State changed from up to startingNov 28 14:58:51 heroku[web] notice RestartingNov 28 14:58:51 heroku[web] notice State changed from up to starting新 Web dyno 2 台で Puma (Web server) がそれぞれ起動を開始しました。Nov 28 14:59:17 heroku[web] notice Starting process with command `bin/rails s -p 24256 -e production`Nov 28 14:59:19 heroku[web] notice Starting process with command `bin/rails s -p 15417 -e production`Nov 28 14:59:21 app[web] info [heroku-exec] StartingNov 28 14:59:22 app[web] info [heroku-exec] StartingNov 28 14:59:31 app[web] info => Booting PumaNov 28 14:59:31 app[web] info => Rails 5.2.1 application starting in productionNov 28 14:59:31 app[web] info => Run `rails server -h` for more startup optionsNov 28 14:59:32 app[web] info => Booting PumaNov 28 14:59:32 app[web] info => Rails 5.2.1 application starting in productionNov 28 14:59:32 app[web] info => Run `rails server -h` for more startup optionsWeb dyno の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 28 14:59:33 heroku[web] notice State changed from starting to upNov 28 14:59:34 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。問題はありませんが、手元で起動するよりずいぶん遅い気がします。Nov 28 15:02:03 app[web] info Puma starting in single mode...Nov 28 15:02:03 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 28 15:02:03 app[web] info * Min threads: 11, max threads: 11Nov 28 15:02:03 app[web] info * Environment: productionNov 28 15:02:03 app[web] info * Listening on tcp://0.0.0.0:24256Nov 28 15:02:03 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 3 分とあるため合っています。Nov 28 15:02:19 heroku[web] notice Stopping all processes with SIGTERMNov 28 15:02:19 app[web] info Gracefully stopping, waiting for requests to finishNov 28 15:02:19 app[web] info === puma shutdown: 2018-11-28 06:02:19 +0000 ===Nov 28 15:02:19 app[web] info Goodbye!Nov 28 15:02:19 app[web] info ExitingNov 28 15:02:19 heroku[web] notice Process exited with status 143もうひとつの旧 Web dyno 1 台で Puma が終了しました。これも意訳のとおりです。Nov 28 15:03:25 heroku[web] notice Stopping all processes with SIGTERMNov 28 15:03:25 app[web] info Gracefully stopping, waiting for requests to finishNov 28 15:03:25 app[web] info === puma shutdown: 2018-11-28 06:03:25 +0000 ===Nov 28 15:03:25 app[web] info Goodbye!Nov 28 15:03:25 app[web] info ExitingNov 28 15:03:25 heroku[web] notice Process exited with status 143もうひとつの新 Web dyno 1 台で Puma が起動しきりました。Booting Puma からずいぶんと時間がかかりました。Nov 28 15:05:08 app[web] info Puma starting in single mode...Nov 28 15:05:08 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 28 15:05:08 app[web] info * Min threads: 11, max threads: 11Nov 28 15:05:08 app[web] info * Environment: productionNov 28 15:05:08 app[web] info * Listening on tcp://0.0.0.0:15417Nov 28 15:05:08 app[web] info Use Ctrl-C to stopPuma の起動に時間がかかるのは謎ですが、Preboot のドキュメントと相違ないと理解しました。再起動時の挙動再起動時の挙動も確認します。Heroku ではアプリケーションの健全性を維持するため、Dyno は 1 日に 1 回、自動的に再起動します。Dyno は差し替えられるため、ローカルファイルシステムの変更はすべて破棄されます。The new dynos will start receiving requests as soon as it binds to its assigned port. At this point, both the old and new dynos are receiving requests.新 Dyno は割り当てられたポートにバインドされると、すぐにリクエストを受信し始めます。この時点で、新旧の Dyno がリクエストを受信するそう。Approximately 4 to 6 minutes after the restart is invoked, the old dynos will be shut down. You’ll see them shut down in the logs as usual.再起動が行われてから、約 4~6 分後に旧 Dyno がシャットダウンされるようです。これもログで確認可能とのこと。Preboot が GA になった 2014 年頃は、まだ 1 日 1 回の再起動には対応していないようでした。現在は対応しているようです。再起動時のログ結論から書くと、1 台目が再起動し終えてから 2 台目が再起動していました。再起動においても、ドキュメントの通りに Preboot が機能しているようです。Web dyno 1 台目Web dyno 1 台の状態が up から starting に変わりました。Nov 30 11:41:22 heroku[web] notice CyclingNov 30 11:41:22 heroku[web] notice State changed from up to starting新 Web dyno 1 台で Puma が起動を開始しました。Nov 30 11:41:42 heroku[web] notice Starting process with command `bin/rails s -p 32434 -e production`Nov 30 11:41:44 app[web] info [heroku-exec] StartingNov 30 11:41:50 app[web] info => Booting PumaNov 30 11:41:50 app[web] info => Rails 5.2.1.1 application starting in productionNov 30 11:41:50 app[web] info => Run `rails server -h` for more startup optionsWeb dyno 1 台の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 30 11:41:51 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。相変わらず時間がかかります。Nov 30 11:45:45 app[web] info Puma starting in single mode...Nov 30 11:45:45 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 30 11:45:45 app[web] info * Min threads: 11, max threads: 11Nov 30 11:45:45 app[web] info * Environment: productionNov 30 11:45:45 app[web] info * Listening on tcp://0.0.0.0:32434Nov 30 11:45:45 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 4~6 分後とありましたが、間を置かずに終了しました。Nov 30 11:45:55 heroku[web] notice Stopping all processes with SIGTERMNov 30 11:45:56 app[web] info Gracefully stopping, waiting for requests to finishNov 30 11:45:56 app[web] info === puma shutdown: 2018-11-30 02:45:55 +0000 ===Nov 30 11:45:56 app[web] info Goodbye!Nov 30 11:45:56 app[web] info ExitingNov 30 11:45:56 heroku[web] notice Process exited with status 143Web dyno 2 台目もうひとつの Web dyno 1 台の状態が up から starting に変わりました。14 分くらい差があります。最大 216 分のランダムな差があるようなので、記載通りです。Nov 30 12:00:41 heroku[web] notice CyclingNov 30 12:00:41 heroku[web] notice State changed from up to starting新 Web dyno 1 台で Puma が起動を開始しました。Nov 30 12:00:59 heroku[web] notice Starting process with command `bin/rails s -p 16965 -e production`Nov 30 12:01:01 app[web] info [heroku-exec] StartingNov 30 12:01:08 app[web] info => Booting PumaNov 30 12:01:08 app[web] info => Rails 5.2.1.1 application starting in productionNov 30 12:01:08 app[web] info => Run `rails server -h` for more startup optionsWeb dyno 1 台の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 30 12:01:10 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。今回は時間がかかりませんでした。Nov 30 12:01:15 app[web] info Puma starting in single mode...Nov 30 12:01:15 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 30 12:01:15 app[web] info * Min threads: 11, max threads: 11Nov 30 12:01:15 app[web] info * Environment: productionNov 30 12:01:15 app[web] info * Listening on tcp://0.0.0.0:16965Nov 30 12:01:15 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。今度は時間がかかりました。前述の意訳では約 4~6 分後とあるため合っています。Nov 30 12:05:14 heroku[web] notice Stopping all processes with SIGTERMNov 30 12:05:14 app[web] info Gracefully stopping, waiting for requests to finishNov 30 12:05:14 app[web] info === puma shutdown: 2018-11-30 03:05:14 +0000 ===Nov 30 12:05:14 app[web] info Goodbye!Nov 30 12:05:14 app[web] info ExitingNov 30 12:05:14 heroku[web] notice Process exited with status 143注意事項Preboot を有効にしてデプロイすると、無効時よりも時間をかけて Dyno が差し替わります。全ての Dyno に反映されるまで数分かかることもあるようです。この点はチームで把握しておく必要があります。最大 3 分間、新旧の Dyno が重複するため、Add-on の同時接続数の制限に達する可能性があります。Heroku Postgres の場合は pgbouncer buildpack を使うことが奨励されています。新旧の Dyno が混在することにより、一度のデプロイで DB schema とアプリケーションコードを変更すると、不具合が発生する可能性があります。Preboot 機能を一旦無効にすることを勧めています。でも、Procfile に release process type を定義していれば同じなので、個人的には気にならないですね。Preboot 機能を使うためには、Dyno type が Standard-1X 以上である必要があります。Dyno type が Free と Hobby では Preboot を有効に出来ません。Preboot が適用されるのは Web Dyno だけです。自分で定義した worker Dyno 等は対象外です。まとめHeroku の Preboot 機能を深掘りし、有効にする必要性を理解しました。Web Dyno を 2 台以上にしたら Preboot を有効にすると良さそう前述の「注意事項」には留意したほうが良いしかし、こんなに長い記事になるとは...。明日の heroku Advent Calendar 2018 はまたまた id:masutaka26 です。Bitbar の便利な Heroku plugin を紹介してくれるみたいです。お楽しみに。このような使い捨ての Dyno を One-Off Dyno と呼びます。heroku run で使われる Dyno もそうです。↩","link":"https://developer.feedforce.jp/entry/2018/12/12/120000","isoDate":"2018-12-12T03:00:00.000Z","dateMiliSeconds":1544583600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。以前住んだ街を訪れるのが趣味です。</p>\n\n<p>週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をしました。</p>\n\n<p>まさかのダブルタイトル・・・！ スライドを作っていたら別々の話のような気がして、こうなりました。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"868618a13fbb4e8d8baf8f00c1f2e962\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>『Heroku と EC Booster と私』は主に社内向けの話です。最近の EC Booster のインフラを紹介する機会がなかったので、今回の発表の場を借りました。</p>\n\n<p>『Heroku ちょこっと Deep Dive』では Heroku の Slug について、ちょこっと調べました。</p>\n\n<p>Heroku では <a href=\"https://jp.heroku.com/dynos\">Dyno</a> という軽量コンテナ上で、アプリケーションが動作します。アプリケーションは <a href=\"https://devcenter.heroku.com/articles/slug-compiler\">Slug というパッケージに固められて</a>います。Slug にはアプリケーションコードの他に Buildpack や、Ruby なら bundle install されたライブラリ等が含められています。</p>\n\n<p>最近 Heroku を Terraform で管理し始めた時に、<a href=\"https://www.terraform.io/docs/providers/heroku/r/slug.html\">heroku_slug</a> というリソースを見つけました。使いはしなかったのですが、自分で Slug を変更できる感覚がよく分からなくて調べたことが始まりでした。</p>\n\n<p>まさか Scratch から作れるとは思いませんでしたし、Slug の中身やサイズの増減を把握する方法が分かったことは大きな収穫でした。</p>\n\n<p>発表では話し忘れたのですが、Heroku は Stack に日々セキュリティパッチが当たって、24 時間以内に適用されることは大きなメリットです。小さなチームで当てるべきパッチの把握や適用をするのは、相当しんどいですからね。</p>\n\n<p>それでは、発表後に書いてくれた付箋への返信です。</p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181112/20181112233219.jpg\" alt=\"Heroku by yousuke?\" title=\"f:id:masutaka26:20181112233219j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> いつもありがとうございます</li>\n</ul>\n</li>\n<li>ふだん Heroku Review App しか使ってなかったんですが、興味を持ちました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> Rails アプリの公開にも、小さなスクリプトの定期実行にも使えるので便利ですよ</li>\n</ul>\n</li>\n<li>マッスル マスタカ！💪\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> マッスル マッスル！💪</li>\n</ul>\n</li>\n<li>Heroku 未だに HTTP 1.1 なんですよね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですよねー 💦 さすがにそろそろ...</li>\n</ul>\n</li>\n<li>早く AWS + CloudFront 使いたい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> assets は CDN に逃したいですねー</li>\n</ul>\n</li>\n<li>(dfplus.)io はいまだにフロントは Heroku 使ってマスタカ\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうでありマスタカ</li>\n</ul>\n</li>\n<li>Push された tar ball に build された file が入るんですか\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そんな感じですー</li>\n</ul>\n</li>\n<li>EC Booster のリリース時に Heroku を徹底的につかいたおすことを目標にしていたので、この発表もマスタカさんのふだんの仕事もとても感謝しています\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もったいないお言葉、ありがとうございます！</li>\n</ul>\n</li>\n<li>「Heroku は良いサービス」めっちゃわかる\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> だよねー</li>\n</ul>\n</li>\n<li>Heroku は良しなにやってくれるけど、その「良しなに」部分もちゃんとオープンになっているのすばらしい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですねー。ずっと謎だった Slug の正体が分かってよかったです</li>\n</ul>\n</li>\n<li>プロダクション環境での Heroku 運用、勉強になりました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> まだまだ小さなサービスですからね。これから大きくなると、問題がたくさん出てきそうです</li>\n</ul>\n</li>\n<li>なんか push したら動かしてくれる Heroku が裏で何やってるか知れてよかったです！ 最近便利な機能知って Heroku いいなーってなってます！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。他にも <a href=\"https://www.heroku.com/continuous-integration\">Heroku CI</a> や <a href=\"https://devcenter.heroku.com/articles/pipelines#promoting\">Promoting</a> など、まだ試せていない機能がありますねー</li>\n</ul>\n</li>\n<li>資料が分かりやすいです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 安心安全な資料作りを心がけて参ります</li>\n</ul>\n</li>\n<li>資料の文字数がちょうど良くてとても見やすいと思いました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 本当はもっと減らしたいのですが、あとから読める資料としても作ったので、今回の長さになりました</li>\n</ul>\n</li>\n<li>ボトルネックがないようなら Heroku 便利そう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> とは言え、パフォーマンスを突き詰めると厳しいと感じています。現在は割とバックグラウンド＆バッチ処理にフォーカスしています</li>\n</ul>\n</li>\n<li>さすが弊社で Heroku に一番詳しい男！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 引き続きニッチな領域を攻めていきます</li>\n</ul>\n</li>\n<li>マスタカさんは説明が上手だなと思いました（こなみ）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます！</li>\n</ul>\n</li>\n<li>Heroku..... なんだかんだ、難しいイメージがあります...\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私も最初はそうでしたねー</li>\n</ul>\n</li>\n<li>身近に仕事で Heroku 使ってる人だー\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> いえす！</li>\n</ul>\n</li>\n<li>初心者でも使えるけど奥が深い Heroku\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですねー</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>発表の感想の感想</h2>\n\n<p>Heroku はバックエンドエンジニアには概ね好評ですが、フロントエンドエンジニアには割と不評な印象を受けました。</p>\n\n<p>HTTP/3 という話が出てきた今、未だに HTTP/1.1 なのはだいぶ遅れてますし、パフォーマンスを突き詰めると、どうしてもレイテンシー問題に直面してしまいます。逆に言えば、この辺どうにかなれば最強だと思うのですが。🌀</p>\n\n<p>Heroku の先を見据えてやっていきます。💪</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。以前住んだ街を訪れるのが趣味です。週次の社内勉強会 FFTT で『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をしました。まさかのダブルタイトル・・・！ スライドを作っていたら別々の話のような気がして、こうなりました。発表の内容『Heroku と EC Booster と私』は主に社内向けの話です。最近の EC Booster のインフラを紹介する機会がなかったので、今回の発表の場を借りました。『Heroku ちょこっと Deep Dive』では Heroku の Slug について、ちょこっと調べました。Heroku では Dyno という軽量コンテナ上で、アプリケーションが動作します。アプリケーションは Slug というパッケージに固められています。Slug にはアプリケーションコードの他に Buildpack や、Ruby なら bundle install されたライブラリ等が含められています。最近 Heroku を Terraform で管理し始めた時に、heroku_slug というリソースを見つけました。使いはしなかったのですが、自分で Slug を変更できる感覚がよく分からなくて調べたことが始まりでした。まさか Scratch から作れるとは思いませんでしたし、Slug の中身やサイズの増減を把握する方法が分かったことは大きな収穫でした。発表では話し忘れたのですが、Heroku は Stack に日々セキュリティパッチが当たって、24 時間以内に適用されることは大きなメリットです。小さなチームで当てるべきパッチの把握や適用をするのは、相当しんどいですからね。それでは、発表後に書いてくれた付箋への返信です。発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。 いつもありがとうございますふだん Heroku Review App しか使ってなかったんですが、興味を持ちました Rails アプリの公開にも、小さなスクリプトの定期実行にも使えるので便利ですよマッスル マスタカ！💪 マッスル マッスル！💪Heroku 未だに HTTP 1.1 なんですよね そうなんですよねー 💦 さすがにそろそろ...早く AWS + CloudFront 使いたい assets は CDN に逃したいですねー(dfplus.)io はいまだにフロントは Heroku 使ってマスタカ そうでありマスタカPush された tar ball に build された file が入るんですか そんな感じですーEC Booster のリリース時に Heroku を徹底的につかいたおすことを目標にしていたので、この発表もマスタカさんのふだんの仕事もとても感謝しています もったいないお言葉、ありがとうございます！「Heroku は良いサービス」めっちゃわかる だよねーHeroku は良しなにやってくれるけど、その「良しなに」部分もちゃんとオープンになっているのすばらしい ですねー。ずっと謎だった Slug の正体が分かってよかったですプロダクション環境での Heroku 運用、勉強になりました まだまだ小さなサービスですからね。これから大きくなると、問題がたくさん出てきそうですなんか push したら動かしてくれる Heroku が裏で何やってるか知れてよかったです！ 最近便利な機能知って Heroku いいなーってなってます！ ありがとうございます。他にも Heroku CI や Promoting など、まだ試せていない機能がありますねー資料が分かりやすいです 安心安全な資料作りを心がけて参ります資料の文字数がちょうど良くてとても見やすいと思いました 本当はもっと減らしたいのですが、あとから読める資料としても作ったので、今回の長さになりましたボトルネックがないようなら Heroku 便利そう とは言え、パフォーマンスを突き詰めると厳しいと感じています。現在は割とバックグラウンド＆バッチ処理にフォーカスしていますさすが弊社で Heroku に一番詳しい男！！ 引き続きニッチな領域を攻めていきますマスタカさんは説明が上手だなと思いました（こなみ） ありがとうございます！Heroku..... なんだかんだ、難しいイメージがあります... 私も最初はそうでしたねー身近に仕事で Heroku 使ってる人だー いえす！初心者でも使えるけど奥が深い Heroku ですねー発表の感想の感想Heroku はバックエンドエンジニアには概ね好評ですが、フロントエンドエンジニアには割と不評な印象を受けました。HTTP/3 という話が出てきた今、未だに HTTP/1.1 なのはだいぶ遅れてますし、パフォーマンスを突き詰めると、どうしてもレイテンシー問題に直面してしまいます。逆に言えば、この辺どうにかなれば最強だと思うのですが。🌀Heroku の先を見据えてやっていきます。💪","link":"https://developer.feedforce.jp/entry/2018/11/14/140000","isoDate":"2018-11-14T05:00:00.000Z","dateMiliSeconds":1542171600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた","content":"<p>こんにちは、増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。秋は体が急に冷え、一年で一番体調を崩しやすいので、意識して風呂に浸かっています。元気です。</p>\n\n<p><a href=\"http://blog.hatena.ne.jp/critical_alert/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/critical_alert/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:critical_alert</a> から <a href=\"https://healthchecks.io/\">https://healthchecks.io/</a> を教えてもらいました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181007/20181007221520.png\" alt=\"f:id:masutaka26:20181007221520p:plain\" title=\"f:id:masutaka26:20181007221520p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>cron 系の定期実行ジョブが本当に実行されたかを監視してくれるサービスです。</p>\n\n<p>以前、<a href=\"https://github.com/ondrejbartas/sidekiq-cron\">sidekiq-cron</a> のバグで定期実行ジョブが実行されないことがあったので、なんらかの方法でお手軽に監視したいモチベーションがありました。</p>\n\n<h2>terraform-provider-healthchecksio を発見</h2>\n\n<p>コード化したいなーと思って調べたら、非公式の Terraform provider を発見。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio\">kristofferahl/terraform-provider-healthchecksio</a></p>\n\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n\n<p>こういった設定は属人化しやすいため、Terraform でコード化できるのは助かります。</p>\n\n<p>ただ、この時点では schedule や timezone などに対応していなかったため、採用は断念しました。</p>\n\n<p>healthchecks.io 上でポチポチと監視用のエンドポイントを作成し、ビジネスロジックにも ping するコードを埋め込み、いい感じに動作していました。</p>\n\n<h2>実装開始</h2>\n\n<p>悶々とした日を送り続けたある日、調べてみたら意外と簡単に機能が実装できそうなことが分かりました。</p>\n\n<p>👇 それで送ったのがこの PR。可能な限りのパラメータを使えるようになりました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/1\">Add parameters by masutaka · Pull Request #1</a></li>\n</ul>\n\n\n<p>terraform import もしたいなーと調べたら、たったの 3 行で対応出来ることが判明。👇 2 つ目の PR を出して無事マージされました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/2\">Introduce terraform import by masutaka · Pull Request #2</a></li>\n</ul>\n\n\n<p>ついでにしれっとコラボレータに招待してくれて、commit 権を頂けました。やったぜ！</p>\n\n<p>👇 先ほど 3 つ目の PR を出しました。非公式の Terraform provider なので、自分でバイナリを設置する必要があるのですよね。参考になりそうな Makefile を作りました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/3\">Add examples/Makefile by masutaka · Pull Request #3</a></li>\n</ul>\n\n\n<h2>今後の予定</h2>\n\n<blockquote><p>The database failover process is manual, and the ops team consists of a single person, so multi-hour or even multi-day outages are possible!</p>\n\n<p>While we can only guarantee a best effort availability, in practice the availability has exceeded 99.9% since the service publicly launched in July 2015.</p>\n\n<p><a href=\"https://healthchecks.io/about/\">https://healthchecks.io/about/</a></p></blockquote>\n\n<p>healthchecks.io は安定稼働しており、2015 年 7 月のサービス開始以来、稼働率は 99.9% を超えているそうです。ただあくまでベストエフォート型の可用性しか保証していないので、過信は禁物です。いわゆる 1 人開発プロジェクトでもあります。</p>\n\n<p>今後は Datadog で同じ監視が出来るか調査して、healthchecks.io と併用したいなーと思っています。<a href=\"https://cronitor.io/\">Cronitor</a> も頭の片隅にあるけど、少しオーバースペック感があります。</p>\n\n<h2>おまけ</h2>\n\n<p>healthchecks.io は OSS でもあり、GitHub 上にコードが公開されています。Django で実装されています。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/healthchecks/healthchecks\">healthchecks/healthchecks</a></p>\n","contentSnippet":"こんにちは、増田（id:masutaka26）です。秋は体が急に冷え、一年で一番体調を崩しやすいので、意識して風呂に浸かっています。元気です。id:critical_alert から https://healthchecks.io/ を教えてもらいました。cron 系の定期実行ジョブが本当に実行されたかを監視してくれるサービスです。以前、sidekiq-cron のバグで定期実行ジョブが実行されないことがあったので、なんらかの方法でお手軽に監視したいモチベーションがありました。terraform-provider-healthchecksio を発見コード化したいなーと思って調べたら、非公式の Terraform provider を発見。kristofferahl/terraform-provider-healthchecksioこういった設定は属人化しやすいため、Terraform でコード化できるのは助かります。ただ、この時点では schedule や timezone などに対応していなかったため、採用は断念しました。healthchecks.io 上でポチポチと監視用のエンドポイントを作成し、ビジネスロジックにも ping するコードを埋め込み、いい感じに動作していました。実装開始悶々とした日を送り続けたある日、調べてみたら意外と簡単に機能が実装できそうなことが分かりました。👇 それで送ったのがこの PR。可能な限りのパラメータを使えるようになりました。Add parameters by masutaka · Pull Request #1terraform import もしたいなーと調べたら、たったの 3 行で対応出来ることが判明。👇 2 つ目の PR を出して無事マージされました。Introduce terraform import by masutaka · Pull Request #2ついでにしれっとコラボレータに招待してくれて、commit 権を頂けました。やったぜ！👇 先ほど 3 つ目の PR を出しました。非公式の Terraform provider なので、自分でバイナリを設置する必要があるのですよね。参考になりそうな Makefile を作りました。Add examples/Makefile by masutaka · Pull Request #3今後の予定The database failover process is manual, and the ops team consists of a single person, so multi-hour or even multi-day outages are possible!While we can only guarantee a best effort availability, in practice the availability has exceeded 99.9% since the service publicly launched in July 2015.https://healthchecks.io/about/healthchecks.io は安定稼働しており、2015 年 7 月のサービス開始以来、稼働率は 99.9% を超えているそうです。ただあくまでベストエフォート型の可用性しか保証していないので、過信は禁物です。いわゆる 1 人開発プロジェクトでもあります。今後は Datadog で同じ監視が出来るか調査して、healthchecks.io と併用したいなーと思っています。Cronitor も頭の片隅にあるけど、少しオーバースペック感があります。おまけhealthchecks.io は OSS でもあり、GitHub 上にコードが公開されています。Django で実装されています。healthchecks/healthchecks","link":"https://developer.feedforce.jp/entry/2018/10/09/140000","isoDate":"2018-10-09T05:00:00.000Z","dateMiliSeconds":1539061200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181007/20181007221520.png","authorName":"masutaka"},{"title":"先期の MVP に選ばれた","content":"<p>お元気にしてますか。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。</p>\n\n<p>先週の金曜日にフィードフォースにおける 2017 年度（2017年6月 〜 2018年5月）の納会が行われ、その中で初の MVP を受賞することができました。🎉</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"喜びのコメントを表明中のしがないますたか\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180608/20180608194920.jpg\" alt=\"f:id:masutaka26:20180608194920j:plain\" title=\"f:id:masutaka26:20180608194920j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>喜びのコメントを表明中のしがないますたか</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"チーム賞ももらったヨ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180614/20180614005507.jpg\" alt=\"f:id:masutaka26:20180614005507j:plain\" title=\"f:id:masutaka26:20180614005507j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>チーム賞ももらったヨ</figcaption></figure></p>\n\n<p>会社で賞を頂いたのは 4 年前のルーキー賞以来です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2014-06-13-1.html\" title=\"会社でルーキー賞に選ばれた\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://masutaka.net/chalow/2014-06-13-1.html\">masutaka.net</a></cite></p>\n\n<p><del>四年寝太郎としては、取るべくして取った賞だと思いました（ｷﾘｯ</del></p>\n\n<p>正直なところ、頑張ったで賞くらいはもらえたりして？とボンヤリ思っていましたが<a href=\"#f-3841f537\" name=\"fn-3841f537\" title=\"そのような賞はありません\">*1</a>、まさか MVP とは思いもよらず、発表の瞬間は素で驚きました。</p>\n\n<p>2017 年度は以下のチームに所属していました。</p>\n\n<ul>\n<li>2017 年 6 月 〜 2018 年 3 月\n\n<ul>\n<li><a href=\"https://dfplus.feedforce.jp/\">DF PLUS</a>（社内では DF Maker と呼ばれる）</li>\n</ul>\n</li>\n<li>2018 年 4 月 〜 2018 年 5 月\n\n<ul>\n<li><a href=\"https://ecbooster.jp/\">EC Booster</a></li>\n</ul>\n</li>\n</ul>\n\n\n<p>DF Maker ではサービスの信頼性向上にひたすら努める毎日でした。ECS でとんでもない量のエラーが発生して、３連休の間は暇を見つけてエラーログを確認してたなー（遠い目）。</p>\n\n<p>EC Booster ではチームビルディングから始めました。👇️以下の記事にまとまっています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F05%2F21%2F150000\" title=\"『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2018/05/21/150000\">developer.feedforce.jp</a></cite></p>\n\n<p>どちらにも共通することが、2 年目の優秀な若者と仕事ができたことです。私が若者を引っ張っていくぜーという感じではなくむしろ逆で、すでにサービスを知り尽くした若者から学ぶ日々でした（今もそうです）。</p>\n\n<p>その中で、「こうすればチーム開発がドライブするだろう」や「こうすればサービスの質を高められるだろう」というアイディアを出し、実践し、小さな改善と失敗を繰り返したことが、結果としてチームの状況を良くしたりサービスの質を高めることが出来たのだと思います（現在進行系）。</p>\n\n<p>もちろん、一緒に働くことができたチームの皆さんの協力があっての賞です。ありがとうございます。🙏</p>\n\n<p>それではまた 4 年後にお会いしましょう💤</p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-3841f537\" name=\"f-3841f537\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">そのような賞はありません</span></p>\n</div>","contentSnippet":"お元気にしてますか。増田（id:masutaka26）です。先週の金曜日にフィードフォースにおける 2017 年度（2017年6月 〜 2018年5月）の納会が行われ、その中で初の MVP を受賞することができました。🎉喜びのコメントを表明中のしがないますたかチーム賞ももらったヨ会社で賞を頂いたのは 4 年前のルーキー賞以来です。masutaka.net四年寝太郎としては、取るべくして取った賞だと思いました（ｷﾘｯ正直なところ、頑張ったで賞くらいはもらえたりして？とボンヤリ思っていましたが*1、まさか MVP とは思いもよらず、発表の瞬間は素で驚きました。2017 年度は以下のチームに所属していました。2017 年 6 月 〜 2018 年 3 月DF PLUS（社内では DF Maker と呼ばれる）2018 年 4 月 〜 2018 年 5 月EC BoosterDF Maker ではサービスの信頼性向上にひたすら努める毎日でした。ECS でとんでもない量のエラーが発生して、３連休の間は暇を見つけてエラーログを確認してたなー（遠い目）。EC Booster ではチームビルディングから始めました。👇️以下の記事にまとまっています。developer.feedforce.jpどちらにも共通することが、2 年目の優秀な若者と仕事ができたことです。私が若者を引っ張っていくぜーという感じではなくむしろ逆で、すでにサービスを知り尽くした若者から学ぶ日々でした（今もそうです）。その中で、「こうすればチーム開発がドライブするだろう」や「こうすればサービスの質を高められるだろう」というアイディアを出し、実践し、小さな改善と失敗を繰り返したことが、結果としてチームの状況を良くしたりサービスの質を高めることが出来たのだと思います（現在進行系）。もちろん、一緒に働くことができたチームの皆さんの協力があっての賞です。ありがとうございます。🙏それではまた 4 年後にお会いしましょう💤*1:そのような賞はありません","link":"https://developer.feedforce.jp/entry/2018/06/15/130000","isoDate":"2018-06-15T04:00:00.000Z","dateMiliSeconds":1529035200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180614/20180614005507.jpg","authorName":"masutaka"},{"title":"『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。発表が無事終わり、何かゲームでも買おうかなと思ってます。</p>\n\n<p>さて、フィードフォースでは毎週金曜日 16:00 から、社内技術勉強会を開催しています。当番制の持ち回りで技術に関連したことを発表します。</p>\n\n<p>先週金曜日は私の当番で『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をしました。</p>\n\n<p>技術チーム以外の方もたくさん聞きに来てくれて、ありがたかったです。🙏</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"978c7016bb7b473693f547116e8e704f\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p><a href=\"http://developer.feedforce.jp/entry/2017/10/16/150000\">前回</a>含めて、これまでの発表は全てコードが登場していました。今回のようなコードが登場しないマネジメントの話は、内容が拡散しがちで難しかったです。結局まとまりませんでした...。</p>\n\n<p>今回は敢えて後から読めるプレゼン資料にしました。なのでプレゼン資料としては冗長な書き方になっています。</p>\n\n<p>まとめるとこんな内容です。</p>\n\n<ul>\n<li>コミュニケーションの不確実性を解消することが、マネジメント（やチームビルディング）に必要なはず</li>\n<li>そのため自ら場に飛び込んで、情報の非対称性を解消していった</li>\n<li>これからもソフトウェアを書くこと以外に課題解決の手段があればやっていく</li>\n<li>そして徐々にマネジメントにかける時間を減らし、コードを書く時間を増やしていく</li>\n</ul>\n\n\n<p>今思えば、話し忘れたことがポロポロと出てきます。</p>\n\n<ul>\n<li>そもそもチームメンバーは自走できる方々で、ホワイトボード整理の時も方針だけ話したら勝手に整理されていった\n\n<ul>\n<li>私は方向性を決めただけ</li>\n</ul>\n</li>\n<li>チームに入りたてのときは少々オーバーリアクションを心がけ、徐々に普通に戻していく。\n\n<ul>\n<li>何考えている人か分かってもらうことで、その後のコミュニケーションをスムーズにする</li>\n</ul>\n</li>\n</ul>\n\n\n<p>完璧な発表などありませんね。</p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>ジョハリの窓の紹介ありがとうございます。勉強になります！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私も『<a href=\"https://www.amazon.co.jp/dp/B079TLW41L/\">エンジニアリング組織論への招待</a>』で初めて知りました。数年前にプロダクトオーナーの学習をした以来ですから...</li>\n</ul>\n</li>\n<li>自分はまだマネジメントからは程遠い存在なのですが、話しかけやすいオーラを出すことや、くだらないと思うことも質問することなどは、今すぐにでも実行出来るし、目指すことだと思いました。ありがとうございました！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> はい、個々が意識することが自走するチームや、個々のリーダーシップに繋がると思います</li>\n</ul>\n</li>\n<li>共感できる良い話でした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> あざす！</li>\n</ul>\n</li>\n<li>初公開の画像が見られて良かったです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> お粗末さまでした...</li>\n</ul>\n</li>\n<li>早くインフラ朝会にもどって来てください\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 今回の件が落ち着いたらインフラ朝会にもどりますよ。待っていてくださいね！</li>\n</ul>\n</li>\n<li>必要な情報とそうでもない情報の整理はものすごい HP/MP を消費しそう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね...</li>\n</ul>\n</li>\n<li>マネジメントの成果はすぐには結果に現れないかも？どの位の頻度で振り返るべきなのか？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> イテレーションごとの振り返りで、チームを観察すれば良いです。マネジメントの成果かどうかは重要ではないと思います</li>\n</ul>\n</li>\n<li>◯◯を支える技術\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 次回はコードの話をしよう...</li>\n</ul>\n</li>\n<li>知識科学やり直さなきゃ・・・\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私は今回で終了ですw</li>\n</ul>\n</li>\n<li>チームの問題点を発見して、それを解決する手段を選ばないスタンスがすごい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もう必死ですよ（笑）</li>\n</ul>\n</li>\n<li>「内心ではなく行動に注目する」は、認知行動療法などでも使われていますね（最近のトレンド？）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> へぇ〜</li>\n</ul>\n</li>\n<li>なかなかボリュームある資料でしたが、作るのにどれくらいかかったのか気になります\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 先週土曜日の夜に草稿を作り「これでいけそう」という感触を得て、今週は平日の夜２日くらいで整理をしました。話す内容については一ヶ月くらい前から頭の中で考えたり、『<a href=\"https://www.amazon.co.jp/dp/B079TLW41L/\">エンジニアリング組織論への招待</a>』を全部読んだりしてました</li>\n</ul>\n</li>\n<li>最近疲弊してそうで心配でしたが、今日の発表で色々アウトプットしてもらって安心しました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 気にかけて頂いてありがとうございます。これからも安心安全のマスタカをお届けして参ります</li>\n</ul>\n</li>\n<li>うなずきすぎて首もげる\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。参考になったことが各チームに還元されるとうれしいです</li>\n</ul>\n</li>\n<li>マスタカさん自体はマネジメントよりコード書く方が好きなんでしょうか？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね。引き篭もってコードを書きたいです</li>\n</ul>\n</li>\n<li>ますたかさんのおかげでチームがちゃんと回りはじめた気がします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そう言って頂けるとうれしいです。今がスタート地点だと捉え、精進してまいります</li>\n</ul>\n</li>\n<li>増田さんが参加されてから何かがスムーズになった実感があります（情報や知識だけでなく）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> うれしいですね。マネジメントは空気のような存在が良いと考えています</li>\n</ul>\n</li>\n<li>マネジメントってどうやるか？のテクニックの面もあるけど、誰がやるか？の面も大きい気がしてます\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね。例えば入ったばかりの職場だと、信頼関係を築くことから始まると思います。今回は同じ会社ということと、過去に一緒に働いたメンバーがいたことに助けられました</li>\n</ul>\n</li>\n<li>EC Booster のこれからに期待しています！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 💪</li>\n</ul>\n</li>\n<li>「場に飛び込む」「正しく伝わったと思わない」肝に銘じます！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> よろしくお願いします！</li>\n</ul>\n</li>\n<li>「エンジニアが発見した課題の解決フロー」読みたいです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> Slack で書いたとおり、割と普通のフローです。発表で話したエンジニア以外の方からの依頼と整合性を合わせてこうしました。まだ始めて間もなく 1 イテレーションも回してない状態ですがね...\n\n<ol>\n<li> Issue を作ると EC Booster waffle.io の Planning カラムに入る</li>\n<li> 次の開発ミーティングで Planning カラムを空にする</li>\n<li> スプリントでは Sprint Backlog に集中する</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>feedforce だとマネジメントオンリーじゃなくて、開発+マネジメントが最強という話を昨日クリストフとした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 最強かは分かりませんが、コードも分かったほうが捗ると思います</li>\n</ul>\n</li>\n<li>仕事でもプライベートでも、コミュニティ内でオープンな発信をする人が多いと、円滑に物事が進みやすいなと考えられました。その逆もまた然りだったので...。かつ、人に伝えるときは具体的にするというのも大切かと思いました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 他人は自分でないので、分かりやすく具体的なコミュニケーションが大事ですね</li>\n</ul>\n</li>\n<li><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180519/20180519155210.jpg\" alt=\"masutaka by yousuke\" title=\"f:id:masutaka26:20180519155210j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> え、誰？（困惑）</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>最後に</h2>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51zMvVL4MeL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング\" title=\"エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/\">エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 広木大地</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> 技術評論社</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2018/02/22</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><a href=\"http://d.hatena.ne.jp/asin/4774196053/hatena-blog-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>良かったぞ。「エンジニア組織論」ではないことに注目。プロダクトオーナーやエンジニア以外の職種の方にも是非読んでもらいたいです。</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。発表が無事終わり、何かゲームでも買おうかなと思ってます。さて、フィードフォースでは毎週金曜日 16:00 から、社内技術勉強会を開催しています。当番制の持ち回りで技術に関連したことを発表します。先週金曜日は私の当番で『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をしました。技術チーム以外の方もたくさん聞きに来てくれて、ありがたかったです。🙏発表の内容前回含めて、これまでの発表は全てコードが登場していました。今回のようなコードが登場しないマネジメントの話は、内容が拡散しがちで難しかったです。結局まとまりませんでした...。今回は敢えて後から読めるプレゼン資料にしました。なのでプレゼン資料としては冗長な書き方になっています。まとめるとこんな内容です。コミュニケーションの不確実性を解消することが、マネジメント（やチームビルディング）に必要なはずそのため自ら場に飛び込んで、情報の非対称性を解消していったこれからもソフトウェアを書くこと以外に課題解決の手段があればやっていくそして徐々にマネジメントにかける時間を減らし、コードを書く時間を増やしていく今思えば、話し忘れたことがポロポロと出てきます。そもそもチームメンバーは自走できる方々で、ホワイトボード整理の時も方針だけ話したら勝手に整理されていった私は方向性を決めただけチームに入りたてのときは少々オーバーリアクションを心がけ、徐々に普通に戻していく。何考えている人か分かってもらうことで、その後のコミュニケーションをスムーズにする完璧な発表などありませんね。発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。ジョハリの窓の紹介ありがとうございます。勉強になります！ 私も『エンジニアリング組織論への招待』で初めて知りました。数年前にプロダクトオーナーの学習をした以来ですから...自分はまだマネジメントからは程遠い存在なのですが、話しかけやすいオーラを出すことや、くだらないと思うことも質問することなどは、今すぐにでも実行出来るし、目指すことだと思いました。ありがとうございました！ はい、個々が意識することが自走するチームや、個々のリーダーシップに繋がると思います共感できる良い話でした あざす！初公開の画像が見られて良かったです お粗末さまでした...早くインフラ朝会にもどって来てください 今回の件が落ち着いたらインフラ朝会にもどりますよ。待っていてくださいね！必要な情報とそうでもない情報の整理はものすごい HP/MP を消費しそう そうですね...マネジメントの成果はすぐには結果に現れないかも？どの位の頻度で振り返るべきなのか？ イテレーションごとの振り返りで、チームを観察すれば良いです。マネジメントの成果かどうかは重要ではないと思います◯◯を支える技術 次回はコードの話をしよう...知識科学やり直さなきゃ・・・ 私は今回で終了ですwチームの問題点を発見して、それを解決する手段を選ばないスタンスがすごい もう必死ですよ（笑）「内心ではなく行動に注目する」は、認知行動療法などでも使われていますね（最近のトレンド？） へぇ〜なかなかボリュームある資料でしたが、作るのにどれくらいかかったのか気になります 先週土曜日の夜に草稿を作り「これでいけそう」という感触を得て、今週は平日の夜２日くらいで整理をしました。話す内容については一ヶ月くらい前から頭の中で考えたり、『エンジニアリング組織論への招待』を全部読んだりしてました最近疲弊してそうで心配でしたが、今日の発表で色々アウトプットしてもらって安心しました 気にかけて頂いてありがとうございます。これからも安心安全のマスタカをお届けして参りますうなずきすぎて首もげる ありがとうございます。参考になったことが各チームに還元されるとうれしいですマスタカさん自体はマネジメントよりコード書く方が好きなんでしょうか？ そうですね。引き篭もってコードを書きたいですますたかさんのおかげでチームがちゃんと回りはじめた気がします そう言って頂けるとうれしいです。今がスタート地点だと捉え、精進してまいります増田さんが参加されてから何かがスムーズになった実感があります（情報や知識だけでなく） うれしいですね。マネジメントは空気のような存在が良いと考えていますマネジメントってどうやるか？のテクニックの面もあるけど、誰がやるか？の面も大きい気がしてます そうですね。例えば入ったばかりの職場だと、信頼関係を築くことから始まると思います。今回は同じ会社ということと、過去に一緒に働いたメンバーがいたことに助けられましたEC Booster のこれからに期待しています！ 💪「場に飛び込む」「正しく伝わったと思わない」肝に銘じます！ よろしくお願いします！「エンジニアが発見した課題の解決フロー」読みたいです Slack で書いたとおり、割と普通のフローです。発表で話したエンジニア以外の方からの依頼と整合性を合わせてこうしました。まだ始めて間もなく 1 イテレーションも回してない状態ですがね... Issue を作ると EC Booster waffle.io の Planning カラムに入る 次の開発ミーティングで Planning カラムを空にする スプリントでは Sprint Backlog に集中するfeedforce だとマネジメントオンリーじゃなくて、開発+マネジメントが最強という話を昨日クリストフとした 最強かは分かりませんが、コードも分かったほうが捗ると思います仕事でもプライベートでも、コミュニティ内でオープンな発信をする人が多いと、円滑に物事が進みやすいなと考えられました。その逆もまた然りだったので...。かつ、人に伝えるときは具体的にするというのも大切かと思いました 他人は自分でないので、分かりやすく具体的なコミュニケーションが大事ですね え、誰？（困惑）最後にエンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング作者: 広木大地出版社/メーカー: 技術評論社発売日: 2018/02/22メディア: 単行本（ソフトカバー）この商品を含むブログ (2件) を見る良かったぞ。「エンジニア組織論」ではないことに注目。プロダクトオーナーやエンジニア以外の職種の方にも是非読んでもらいたいです。","link":"https://developer.feedforce.jp/entry/2018/05/21/150000","isoDate":"2018-05-21T06:00:00.000Z","dateMiliSeconds":1526882400000,"imageUrl":"https://images-fe.ssl-images-amazon.com/images/I/51zMvVL4MeL._SL160_.jpg","authorName":"masutaka"},{"title":"github-nippou という gem を golang で書き直したという発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn1.www.st-hatena.com/users/ma/masutaka26/profile.gif\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。社内勉強会の順番が来ると、２ヶ月前くらいからソワソワしてきます。</p>\n\n<p>そんなわけで今回は『日報を golang で支える技術』というお題で発表しました。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"b96e99d03504492f85e58bff0c8d1171\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>以下、スライドからの抜粋です。</p>\n\n<ul>\n<li>背景など\n\n<ul>\n<li><a href=\"https://masutaka.net/chalow/2016-04-09-1.html\">以前の社内勉強会で github-nippou という gem を紹介した</a></li>\n<li>ひとつの ruby スクリプトからそこそこ作り込み、毎日便利に使っている</li>\n<li>先日も同僚の <a href=\"https://github.com/ryz310\">@ryz310</a> から pull request をもらって、さらに便利になった</li>\n<li>からの、golang への書き換えをした。その場でライブリリース</li>\n</ul>\n</li>\n<li>モチベーション\n\n<ul>\n<li>以前 <a href=\"https://github.com/github/hub/releases/tag/v2.2.0\">hub コマンドが ruby から golang に移行した</a>のを見て、一度やってみたかった</li>\n<li>rubygems の CLI を Dockerize してポータビリティを高めるのは何かが違うという気持ち</li>\n<li><a href=\"https://github.com/ryz310\">@ryz310</a> からもらった元気</li>\n</ul>\n</li>\n<li>当たり前だけど、全て代わりの方法を調べて実装しなければいけなかった\n\n<ul>\n<li>octokit → go-github, thor → cobra など。Assets の取り扱いも変わる</li>\n</ul>\n</li>\n<li>良かったこと\n\n<ul>\n<li>１バイナリになったのでインストールやアップデートが容易になった</li>\n<li>パフォーマンスも予想外に上がった（当社比約２倍）\n\n<ul>\n<li>以前調べた時は GitHub への API アクセスがボトルネックだったので、そこまで変わらないと思っていた</li>\n</ul>\n</li>\n<li>結果的にいろんなライブラリを使えて、良い素振りになった</li>\n</ul>\n</li>\n<li>困ったこと\n\n<ul>\n<li>とにかく関数が長くなりがち</li>\n<li>getXXX() 多くなりすぎ</li>\n<li>ファイル分割の意味</li>\n<li>書けば書くほど golang っぽい書き方が分からなくなる</li>\n<li>OOP ではないことへの戸惑い</li>\n<li>ruby が柔軟すぎて移植は難しかった。オススメはしない</li>\n</ul>\n</li>\n<li>疑問など\n\n<ul>\n<li>class設計で便利だった、private method の代わり\n\n<ul>\n<li>設計し直すべきか</li>\n<li>classを 使わなかった頃の JS の知見を知りたい</li>\n</ul>\n</li>\n<li>ビジネスロジックのパッケージ名はどうすれば\n\n<ul>\n<li>今回は lib にした</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>感想\n\n<ul>\n<li>今後、rubygems で CLI ツールを作ることはないと思う。継続利用を考えると勧めづらい</li>\n<li>golang は単一ファイルでの実装と実行に一番ハードルが低い気がしている\n\n<ul>\n<li>もっと楽な言語あったら教えて</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>今後の予定\n\n<ul>\n<li>golang っぽい書き方にする</li>\n<li>もっとテストを書く</li>\n<li>golang on Lambda や API サーバも学習する</li>\n<li>『<a href=\"https://www.amazon.co.jp/dp/B01FH3KRTI\">スターティングGo言語</a>』を読み切る</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>結果</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163806.png\" alt=\"f:id:masutaka26:20171014163806p:plain\" title=\"f:id:masutaka26:20171014163806p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>↓</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163802.png\" alt=\"f:id:masutaka26:20171014163802p:plain\" title=\"f:id:masutaka26:20171014163802p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><a href=\"https://github.com/masutaka/github-nippou\">https://github.com/masutaka/github-nippou</a></p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>クラス設計周りの話は自分も悩んでいます\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ライブラリとか読んで学習します！</li>\n</ul>\n</li>\n<li>GraphQL 対応の PR 出すぞ\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> お待ちしております！</li>\n</ul>\n</li>\n<li>Go の GraphQL のクライアント側はまだなさそう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> <a href=\"https://github.com/graphql-go/graphql\">github.com/graphql-go/graphql</a> を見つけました。API リクエストを 1 回に出来るのかな？</li>\n</ul>\n</li>\n<li>CLI は ruby &lt; golang わかる。mruby も良いかも\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> mruby はエコシステムが大変そうで...</li>\n</ul>\n</li>\n<li>Makefile 参考にします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> あざす！</li>\n</ul>\n</li>\n<li>Makefile 全く分からない... 勉強しないと！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 基本だったら１日くらいで分かりますよ。make はビルドを必要な時だけに抑えられるので良いです</li>\n</ul>\n</li>\n<li>流石ますたかさん とても面白く熱量ある発表でした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。熱量は大事にしてます</li>\n</ul>\n</li>\n<li>神回ですね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もっと技術レベル上げていきます！</li>\n</ul>\n</li>\n<li>刺激を受けるいい話だった\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 刺激を与えるのがエンジニアとして使命のひとつだと思っています</li>\n</ul>\n</li>\n<li>スピード up は nice 発見\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですね</li>\n</ul>\n</li>\n<li><p>やっぱりはやくなるものなんだなー</p>\n\n<p>  <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160652.jpg\" alt=\"f:id:masutaka26:20171014160652j:plain\" title=\"f:id:masutaka26:20171014160652j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 速いだけでテンションが上がります</li>\n</ul>\n</li>\n<li>golang 熱の高まり・・・！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> やりましょう！</li>\n</ul>\n</li>\n<li>go モチベーションの高さの理由が分かりました！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もう必死ですよ</li>\n</ul>\n</li>\n<li>ずっと Go 書いてたのはこれだったのかー（棒）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですよー（棒）</li>\n</ul>\n</li>\n<li>Go 書きたい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 今書きましょう！</li>\n</ul>\n</li>\n<li><p>ゴー書いてく！！</p>\n\n<p>  <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160710.jpg\" alt=\"f:id:masutaka26:20171014160710j:plain\" title=\"f:id:masutaka26:20171014160710j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ｱ､ﾊｲ</li>\n</ul>\n</li>\n<li>ざんねん！！わたし（@ryz310）の PR はここでおわってしまった！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> またお待ちしております！（笑）</li>\n</ul>\n</li>\n<li>バイナリ配布うれしい！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ユーザの皆様のことを第一に考えております</li>\n</ul>\n</li>\n<li>CLI は golang <del>Web やる気にはなら…</del>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 配布を考えるとそうですねー。今は GitHub でリリースしておけば、Homebrew や zplug など配布手段はいろいろありますし</li>\n</ul>\n</li>\n<li>ディストリビューション大変だなー\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> gox で簡単に並列ビルドできるので、それほど大変ではなかったですね</li>\n</ul>\n</li>\n<li>知見 ライブデプロイ is つらい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もうハラハラドキドキですよ</li>\n</ul>\n</li>\n<li>ライブデプロイメント\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> やはり初回の CI は絶対失敗しますね...</li>\n</ul>\n</li>\n<li>（社内 Slack の）#golang を今後ともよろしくお願いします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> こちらこそ！</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>最後に</h2>\n\n<p>とにかく設計が目下の悩みです。良い情報があれば教えてください！</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。社内勉強会の順番が来ると、２ヶ月前くらいからソワソワしてきます。そんなわけで今回は『日報を golang で支える技術』というお題で発表しました。発表の内容以下、スライドからの抜粋です。背景など以前の社内勉強会で github-nippou という gem を紹介したひとつの ruby スクリプトからそこそこ作り込み、毎日便利に使っている先日も同僚の @ryz310 から pull request をもらって、さらに便利になったからの、golang への書き換えをした。その場でライブリリースモチベーション以前 hub コマンドが ruby から golang に移行したのを見て、一度やってみたかったrubygems の CLI を Dockerize してポータビリティを高めるのは何かが違うという気持ち@ryz310 からもらった元気当たり前だけど、全て代わりの方法を調べて実装しなければいけなかったoctokit → go-github, thor → cobra など。Assets の取り扱いも変わる良かったこと１バイナリになったのでインストールやアップデートが容易になったパフォーマンスも予想外に上がった（当社比約２倍）以前調べた時は GitHub への API アクセスがボトルネックだったので、そこまで変わらないと思っていた結果的にいろんなライブラリを使えて、良い素振りになった困ったこととにかく関数が長くなりがちgetXXX() 多くなりすぎファイル分割の意味書けば書くほど golang っぽい書き方が分からなくなるOOP ではないことへの戸惑いruby が柔軟すぎて移植は難しかった。オススメはしない疑問などclass設計で便利だった、private method の代わり設計し直すべきかclassを 使わなかった頃の JS の知見を知りたいビジネスロジックのパッケージ名はどうすれば今回は lib にした感想今後、rubygems で CLI ツールを作ることはないと思う。継続利用を考えると勧めづらいgolang は単一ファイルでの実装と実行に一番ハードルが低い気がしているもっと楽な言語あったら教えて今後の予定golang っぽい書き方にするもっとテストを書くgolang on Lambda や API サーバも学習する『スターティングGo言語』を読み切る結果↓https://github.com/masutaka/github-nippou発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。クラス設計周りの話は自分も悩んでいます ライブラリとか読んで学習します！GraphQL 対応の PR 出すぞ お待ちしております！Go の GraphQL のクライアント側はまだなさそう github.com/graphql-go/graphql を見つけました。API リクエストを 1 回に出来るのかな？CLI は ruby < golang わかる。mruby も良いかも mruby はエコシステムが大変そうで...Makefile 参考にします あざす！Makefile 全く分からない... 勉強しないと！！ 基本だったら１日くらいで分かりますよ。make はビルドを必要な時だけに抑えられるので良いです流石ますたかさん とても面白く熱量ある発表でした ありがとうございます。熱量は大事にしてます神回ですね もっと技術レベル上げていきます！刺激を受けるいい話だった 刺激を与えるのがエンジニアとして使命のひとつだと思っていますスピード up は nice 発見 ですねやっぱりはやくなるものなんだなー   速いだけでテンションが上がりますgolang 熱の高まり・・・！！ やりましょう！go モチベーションの高さの理由が分かりました！！ もう必死ですよずっと Go 書いてたのはこれだったのかー（棒） そうなんですよー（棒）Go 書きたい 今書きましょう！ゴー書いてく！！   ｱ､ﾊｲざんねん！！わたし（@ryz310）の PR はここでおわってしまった！！ またお待ちしております！（笑）バイナリ配布うれしい！ ユーザの皆様のことを第一に考えておりますCLI は golang Web やる気にはなら… 配布を考えるとそうですねー。今は GitHub でリリースしておけば、Homebrew や zplug など配布手段はいろいろありますしディストリビューション大変だなー gox で簡単に並列ビルドできるので、それほど大変ではなかったですね知見 ライブデプロイ is つらい もうハラハラドキドキですよライブデプロイメント やはり初回の CI は絶対失敗しますね...（社内 Slack の）#golang を今後ともよろしくお願いします こちらこそ！最後にとにかく設計が目下の悩みです。良い情報があれば教えてください！","link":"https://developer.feedforce.jp/entry/2017/10/16/150000","isoDate":"2017-10-16T06:00:00.000Z","dateMiliSeconds":1508133600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163802.png","authorName":"masutaka"}]},"__N_SSG":true}