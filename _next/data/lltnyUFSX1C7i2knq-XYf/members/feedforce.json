{"pageProps":{"member":{"name":"feedforce","bio":"Feedforce Developer Blog","avatarSrc":"/avatars/feedforce.jpg","sources":["https://developer.feedforce.jp/rss"]},"postItems":[{"title":"Causal Impactを用いた入札単価調整の効果検証","content":"<p>こんにちは　機械学習エンジニアの<a href=\"https://twitter.com/feed_yao\">八百俊哉</a>です。最近はバレーボールをやることにハマっており、激しめに運動しています。今日も筋肉痛です。</p>\n\n<p>今回はGoogle広告の入札単価調整が広告成果にどのような影響を与えるのかCausal Impactを用いて検証を実施しましたので、その結果を共有したいと思います。</p>\n\n<h1>分析背景</h1>\n\n<p>弊社のサービス<a href=\"https://ecbooster.jp/\">EC Booster</a>は、Google ショッピング広告の自動運用による自社EC自動集客サービスです。主要ECシステムと連携することで、Google の検索結果画面に画像付きで自社商品を訴求することが可能となります。</p>\n\n<p>Google 広告には<a href=\"https://support.google.com/google-ads/answer/2732132?hl=ja\">入札単価調整</a>という機能があり、それをショッピング広告でも使用することによって効率的に広告配信を行うことができるとされています。\nそこで<strong>今回はEC Boosterで入札単価調整を実施することで、どれほど広告の実績がよくなるのかを検証しました。</strong></p>\n\n<h1>Causal Impactを用いた効果検証</h1>\n\n<p>今回使用した効果検証の方法である<a href=\"https://google.github.io/CausalImpact/CausalImpact.html\">Causal Impact</a>をご紹介します。</p>\n\n<p><strong>Causal ImpactとはGoogleが作成したベイズ構造時系列モデルを使用した因果推論のためのパッケージになります。</strong></p>\n\n<p>仕組みを簡単に表現すると、あるイベントが介入した日を境に「過去の実績から推定される反事実」と「実際に観測された事実」を比較することによって、イベントの効果の大きさを測ると言うものです。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211215/20211215120354.png\" alt=\"f:id:newton800:20211215120354p:plain\" width=\"761\" height=\"261\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>今回は実際に検証したことを紹介する記事になりますので、これ以上詳しくCausal Impactの仕組みについては言及しないです。\nより詳しくCausal Impactについて知りたい方は以下の書籍が参考になるので是非読んでみてください。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.amazon.co.jpdp%2F400006973X\" title=\"データ解析のための統計モデリング入門――一般化線形モデル・階層ベイズモデル・MCMC (確率と情報の科学) | 久保 拓弥 |本 | 通販 | Amazon\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.amazon.co.jp/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E2%80%95%E2%80%95%E4%B8%80%E8%88%AC%E5%8C%96%E7%B7%9A%E5%BD%A2%E3%83%A2%E3%83%87%E3%83%AB%E3%83%BB%E9%9A%8E%E5%B1%A4%E3%83%99%E3%82%A4%E3%82%BA%E3%83%A2%E3%83%87%E3%83%AB%E3%83%BBMCMC-%E7%A2%BA%E7%8E%87%E3%81%A8%E6%83%85%E5%A0%B1%E3%81%AE%E7%A7%91%E5%AD%A6-%E4%B9%85%E4%BF%9D-%E6%8B%93%E5%BC%A5/dp/400006973X\">www.amazon.co.jp</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.amazon.co.jp%2F%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%25E5%2588%2586%25E6%259E%2590%25E3%2581%25A8%25E7%258A%25B6%25E6%2585%258B%25E7%25A9%25BA%25E9%2596%2593%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E-R%25E3%2581%25A8Stan%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E7%2590%2586%25E8%25AB%2596%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585-%25E9%25A6%25AC%25E5%25A0%25B4-%25E7%259C%259F%25E5%2593%2589%2Fdp%2F4903814874\" title=\"時系列分析と状態空間モデルの基礎: RとStanで学ぶ理論と実装 | 真哉, 馬場 |本 | 通販 | Amazon\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.amazon.co.jp/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90%E3%81%A8%E7%8A%B6%E6%85%8B%E7%A9%BA%E9%96%93%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E5%9F%BA%E7%A4%8E-R%E3%81%A8Stan%E3%81%A7%E5%AD%A6%E3%81%B6%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E9%A6%AC%E5%A0%B4-%E7%9C%9F%E5%93%89/dp/4903814874\">www.amazon.co.jp</a></cite></p>\n\n<h1>入札単価調整はコンバージョン率に良い効果をもたらしている</h1>\n\n<p>入札単価調整を実施することで、広告効果の高いユーザーに対して積極的に入札を行うようになり、逆に広告効果の低いユーザーに対しては入札を控えるようになります。</p>\n\n<p>そのようにすることで、コンバージョン率の向上が期待されていました。コンバージョン率が向上するとコンバージョン数が上がり、最終的には費用対効果であるROASの向上までが考えられます。</p>\n\n<p>実際に分析前に立てられた仮説は以下です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"分析前に立てた仮説\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211221/20211221153325.png\" alt=\"f:id:newton800:20211221153325p:plain\" width=\"691\" height=\"171\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>分析前に立てた仮説</figcaption></figure></p>\n\n<p>それでは実際に入札単価調整を実施することで、広告成果がどう変化したのかを紹介します。</p>\n\n<p>入札単価調整を行う前の実績と入札単価調整を行った後の実績を用いてCausal Impactを実施しました。</p>\n\n<p>その結果以下のようにそれぞれの広告成果に入札単価調整が影響を与えているということがわかりました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"分析を実施することで分かった結果の一部抜粋\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211221/20211221153346.png\" alt=\"f:id:newton800:20211221153346p:plain\" width=\"691\" height=\"171\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>分析を実施することで分かった結果の一部抜粋</figcaption></figure></p>\n\n<p>結果から<strong>コンバージョン率が向上することによってコンバージョン数が向上していることが確認されました。</strong>（他の要素も向上していますが、今回はコンバージョン率に焦点を当てています）</p>\n\n<p>実際にCVRに関してのCausal Impactの実行結果は以下のようになっていました。（一部公開できない部分は黒くしてます）</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211215/20211215123528.png\" alt=\"f:id:newton800:20211215123528p:plain\" width=\"1180\" height=\"590\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>上段に図示された実線が実際に観測されたコンバージョン率で青い点線が過去の傾向を元にした予測コンバージョン率になります。入札単価調を開始した縦の点線の位置から、予測コンバージョン率（入札単価調整を仮にやっていない場合）よりも実際に観測されたコンバージョン率（入札単価調整を実施した場合）の方が大きくなっていることがわかります。</p>\n\n<p>中段に図示されたものが入札単価調整の効果となります。入札単価調整を実施してから、コンバージョン率が増加したといえそうです。</p>\n\n<p>下段に図示されたものは増加したコンバージョン率の累計値になります。</p>\n\n<p><strong>このようなことから入札単価調整は、コンバージョン率向上に貢献していることがわかりました。</strong></p>\n\n<h1>そして現在入札単価調整は</h1>\n\n<p>このような分析もあり、EC Boosterでは現在入札単価調整は全てのユーザーに対して適用されるように設定されています。</p>\n\n<p>このようにEC Boosterの裏側では効果検証を繰り返し、より広告成果が良くなるように最適化を実施しています。</p>\n\n<h1>さいごに</h1>\n\n<p>最後までお付き合いいただきありがとうございます。\n弊社のデータ分析チームに新卒入社してはや2年弱ほど経過し、少しずつ成果が出せるようになってきました。</p>\n\n<p>今後はより積極的にデータ分析に関する情報発信を行っていきたいと考えています。よろしくお願いします。</p>\n\n<p>P.S.祖父母に自分の仕事伝えるのが難しいです。</p>\n","contentSnippet":"こんにちは　機械学習エンジニアの八百俊哉です。最近はバレーボールをやることにハマっており、激しめに運動しています。今日も筋肉痛です。今回はGoogle広告の入札単価調整が広告成果にどのような影響を与えるのかCausal Impactを用いて検証を実施しましたので、その結果を共有したいと思います。分析背景弊社のサービスEC Boosterは、Google ショッピング広告の自動運用による自社EC自動集客サービスです。主要ECシステムと連携することで、Google の検索結果画面に画像付きで自社商品を訴求することが可能となります。Google 広告には入札単価調整という機能があり、それをショッピング広告でも使用することによって効率的に広告配信を行うことができるとされています。そこで今回はEC Boosterで入札単価調整を実施することで、どれほど広告の実績がよくなるのかを検証しました。Causal Impactを用いた効果検証今回使用した効果検証の方法であるCausal Impactをご紹介します。Causal ImpactとはGoogleが作成したベイズ構造時系列モデルを使用した因果推論のためのパッケージになります。仕組みを簡単に表現すると、あるイベントが介入した日を境に「過去の実績から推定される反事実」と「実際に観測された事実」を比較することによって、イベントの効果の大きさを測ると言うものです。今回は実際に検証したことを紹介する記事になりますので、これ以上詳しくCausal Impactの仕組みについては言及しないです。より詳しくCausal Impactについて知りたい方は以下の書籍が参考になるので是非読んでみてください。www.amazon.co.jpwww.amazon.co.jp入札単価調整はコンバージョン率に良い効果をもたらしている入札単価調整を実施することで、広告効果の高いユーザーに対して積極的に入札を行うようになり、逆に広告効果の低いユーザーに対しては入札を控えるようになります。そのようにすることで、コンバージョン率の向上が期待されていました。コンバージョン率が向上するとコンバージョン数が上がり、最終的には費用対効果であるROASの向上までが考えられます。実際に分析前に立てられた仮説は以下です。分析前に立てた仮説それでは実際に入札単価調整を実施することで、広告成果がどう変化したのかを紹介します。入札単価調整を行う前の実績と入札単価調整を行った後の実績を用いてCausal Impactを実施しました。その結果以下のようにそれぞれの広告成果に入札単価調整が影響を与えているということがわかりました。分析を実施することで分かった結果の一部抜粋結果からコンバージョン率が向上することによってコンバージョン数が向上していることが確認されました。（他の要素も向上していますが、今回はコンバージョン率に焦点を当てています）実際にCVRに関してのCausal Impactの実行結果は以下のようになっていました。（一部公開できない部分は黒くしてます）上段に図示された実線が実際に観測されたコンバージョン率で青い点線が過去の傾向を元にした予測コンバージョン率になります。入札単価調を開始した縦の点線の位置から、予測コンバージョン率（入札単価調整を仮にやっていない場合）よりも実際に観測されたコンバージョン率（入札単価調整を実施した場合）の方が大きくなっていることがわかります。中段に図示されたものが入札単価調整の効果となります。入札単価調整を実施してから、コンバージョン率が増加したといえそうです。下段に図示されたものは増加したコンバージョン率の累計値になります。このようなことから入札単価調整は、コンバージョン率向上に貢献していることがわかりました。そして現在入札単価調整はこのような分析もあり、EC Boosterでは現在入札単価調整は全てのユーザーに対して適用されるように設定されています。このようにEC Boosterの裏側では効果検証を繰り返し、より広告成果が良くなるように最適化を実施しています。さいごに最後までお付き合いいただきありがとうございます。弊社のデータ分析チームに新卒入社してはや2年弱ほど経過し、少しずつ成果が出せるようになってきました。今後はより積極的にデータ分析に関する情報発信を行っていきたいと考えています。よろしくお願いします。P.S.祖父母に自分の仕事伝えるのが難しいです。","link":"https://developer.feedforce.jp/entry/2021/12/21/154206","isoDate":"2021-12-21T06:42:06.000Z","dateMiliSeconds":1640068926000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20211215/20211215120354.png","authorName":"feedforce"},{"title":"Amazon EKS で高負荷時に CoreDNS が原因で稀にネットワークエラーが発生していた時のトラブルシュート","content":"<p>ソーシャルPLUS の開発チームでインフラエンジニア をやっています <a href=\"http://blog.hatena.ne.jp/mayuki123/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/mayuki123/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:mayuki123</a> です。今月からフィードフォースから分社化をした株式会社ソーシャルPLUS の所属となりましたが、仕事内容は変わらずにサービスのインフラ改善を進めていく事になるかと思います。</p>\n\n<p>2019年11月に技術スタックを整理してみたという記事から2年弱経過していますが、ソーシャルPLUSのインフラ環境は、一部アプリケーションについてはコンテナ環境を Amazon EKS にホスティングして本番運用するようになりました。あと数ヶ月ほどで全ての環境がEC2からコンテナに置き換えられると良いなと思っています(願望)。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F11%2F25%2F120000\" title=\"ソーシャルPLUS の技術スタックを整理してみた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2019/11/25/120000\">developer.feedforce.jp</a></cite></p>\n\n<p>そして、既に利用されている機能の一部を Amazon EKS に移行して、しばらく経過した時にアプリケーションでネットワークエラーが稀に発生していました。原因調査をした結果が CoreDNS の負荷によるものと発覚するまでのトラブルシュートの流れについて、記事として書き残しておきます。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#発生していた事象\">発生していた事象</a></li>\n    <li><a href=\"#Datadog-を活用した原因調査\">Datadog を活用した原因調査</a><ul>\n            <li><a href=\"#アプリケーションの負荷状況\">アプリケーションの負荷状況</a></li>\n            <li><a href=\"#EKS-上のコンテナの調査\">EKS 上のコンテナの調査</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#EKS-のCoreDNS-の調査\">EKS のCoreDNS の調査</a><ul>\n            <li><a href=\"#CoreDNS-のデバッグログの有効化\">CoreDNS のデバッグログの有効化</a></li>\n            <li><a href=\"#Kubernetes-の名前解決について\">Kubernetes の名前解決について</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#CoreDNS-の負荷軽減\">CoreDNS の負荷軽減</a><ul>\n            <li><a href=\"#ドメインの末尾にドット--を追加する\">ドメインの末尾にドット (.) を追加する</a></li>\n            <li><a href=\"#etcresolvconf-で-ndots1-の設定をする\">/etc/resolv.conf で ndots:1 の設定をする</a></li>\n            <li><a href=\"#その他の-CoreDNS-の負荷軽減の方法\">その他の CoreDNS の負荷軽減の方法</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#最終的な結果\">最終的な結果</a></li>\n    <li><a href=\"#おわりに\">おわりに</a></li>\n    <li><a href=\"#おまけ\">おまけ</a></li>\n</ul>\n\n<h2 id=\"発生していた事象\">発生していた事象</h2>\n\n<p>ソーシャルPLUSでは、バックエンドのアプリケーションでエラーが発生した時に、Bugsnag を利用して Slack 通知するようにしています。ある時に<code>Mysql2::Error::ConnectionError</code> が発生しました。単発のネットワークエラーの場合はアプリケーションがリトライする事でサービス影響がない事も多く、一時的な問題と思って静観する事があるかと思います。しかし、また数日後に同じ事象が発生しました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210830/20210830152912.png\" alt=\"f:id:mayuki123:20210830152912p:plain\" width=\"667\" height=\"258\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%A4%E3%83%B3%E3%83%AA%E3%83%83%E3%83%92%E3%81%AE%E6%B3%95%E5%89%87\">ハインリッヒの1：29：300の法則</a>のように、ちょっとした異常を見落としていると重大なサービス障害となってしまう可能性があるので、原因調査を始めます。</p>\n\n<h2 id=\"Datadog-を活用した原因調査\">Datadog を活用した原因調査</h2>\n\n<p>ソーシャルPLUSでは、モニタリングサービスの Datadog を利用しているのでメトリクスやログの調査を出来るようになっています。どこが原因かを探り始めました。</p>\n\n<h3 id=\"アプリケーションの負荷状況\">アプリケーションの負荷状況</h3>\n\n<p>まずはアプリケーションで利用するサーバの負荷状況を確認する所から始めました。<code>Mysql2::Error::ConnectionError</code> が発生した時刻は EKS の Node の CPU 使用率が 70% ほどで、アプリケーションで負荷のかかる処理の最中でした。また、データベースの負荷は少し前に負荷対策の改善をした事もあって、今回の事件の犯人ではなさそうです。他にもEC2 と DB 間でネットワークのボトルネックがないかなどの確認はしましたが、CPU 使用率が高い以外の問題は特に見つかりませんでした。完全犯罪でしょうか。</p>\n\n<h3 id=\"EKS-上のコンテナの調査\">EKS 上のコンテナの調査</h3>\n\n<p>サーバ単体の問題ではないとすると、Amazon EKS で何か起きている事を疑うことにしました。EKSで動かしているコンテナのログは Datadog Logs に送っているので、<strong>エラーが発生していたアプリケーション以外のログ</strong> を確認していると、MySQL の ConnectionError が発生した時間帯に下記の Warning のメッセージが出ている事に気づきました。このログは Amazon Kinesis Data Firehose にログを送る Fluent Bit のコンテナで発生しており、エラーが発生してたアプリケーションとは異なるノードに存在してました。</p>\n\n<blockquote><p>[yyyy/mm/dd hh:mm:ss] [ warn] [net] getaddrinfo(host='kinesis.ap-northeast-1.amazonaws.com'): Name or service not known</p></blockquote>\n\n<p>同時刻に特定のアプリケーション以外のコンテナも影響を受けていることから、EKS の中で問題がありそうです。元々、EKSに関する技術ブログは目を通すようにしていた事もあり、Kubernetes の DNS の名前解決で問題が発生する場合があるというのは知っていたので、CoreDNSに焦点を当てて調べることにしました。アウトプットをしてくれる人たちには、いつも感謝をしています。</p>\n\n<ul>\n<li><a href=\"https://medium.com/cloutive/production-ready-eks-coredns-configuration-6fea830606f8\">Production Ready EKS CoreDNS Configuration | by Serkan Capkan | Cloutive Technology Solutions - Tech Blog | Medium</a></li>\n<li><a href=\"https://creators-note.chatwork.com/entry/2021/01/05/104206#%E4%B8%80%E5%AE%9A%E6%95%B0%E3%81%AEPod%E4%BB%A5%E4%B8%8A%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E4%B8%8D%E5%AE%89%E5%AE%9A%E3%81%AB%E3%81%AA%E3%82%8B\">EKS&#x3067;DNS&#x3092;&#x5B89;&#x5B9A;&#x3055;&#x305B;&#x308B;&#x305F;&#x3081;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x3053;&#x3068; - Chatwork Creator&#39;s Note</a></li>\n<li><a href=\"https://labs.gree.jp/blog/2020/01/20271/\">&#x30B9;&#x30DE;&#x30DB;&#x30B2;&#x30FC;&#x30E0;&#x306E; API &#x30B5;&#x30FC;&#x30D0;&#x306B;&#x304A;&#x3051;&#x308B; EKS &#x306E;&#x904B;&#x7528;&#x4E8B;&#x4F8B; | &#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x30D6;&#x30ED;&#x30B0; | GREE Engineering</a></li>\n</ul>\n\n\n<h2 id=\"EKS-のCoreDNS-の調査\">EKS のCoreDNS の調査</h2>\n\n<p>Datadog Agent で Kurbernetes の各種メトリクスを収集していて、EKS の CoreDNS の状況も Datadog の Metric Explorer で確認する事が出来るようになっています。</p>\n\n<ul>\n<li><a href=\"https://docs.datadoghq.com/ja/integrations/coredns/?tab=docker#%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9\">Datadog で取得可能な CoreDNS のメトリクス</a></li>\n</ul>\n\n\n<p><code>coredns.request_count</code> を確認すると特定の時間帯で CoreDNS へのリクエストが多い状態で、このタイミングでの CoreDNS Pod の CPU 負荷は10％前後でしたが、それ以外に不審なメトリクスは存在しませんでした。まだ事象の原因との確信は持てないですが、負荷がそれなりにかかっていることは確かなのでリクエストが多くなる理由を調べます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831151005.png\" alt=\"f:id:mayuki123:20210831151005p:plain\" width=\"522\" height=\"200\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h3 id=\"CoreDNS-のデバッグログの有効化\">CoreDNS のデバッグログの有効化</h3>\n\n<p>まずは CoreDNS のデバッグログを確認したいとなるかと思いますが、EKS の CoreDNS はデフォルトだとデバッグログの出力がオフの状態のため、どのようなリクエストが到達しているのかは確認する事ができません。CoreDNS のログを有効化する方法は AWS のナレッジベースにある記事に方法が記載されています。</p>\n\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/\">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>\n</ul>\n\n\n<p>この記事によると、Namespace(<code>kube-system</code>) に Configmap (<code>coredns</code>) があるので、Corefile 設定に <code>log</code> を追加するとデバッグログ が出力されるようになります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># kubectl -n kube-system edit configmap coredns\nkind: ConfigMap\napiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        log    # Enabling CoreDNS Logging\n        errors\n        health\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n          pods insecure\n          upstream\n          fallthrough in-addr.arpa ip6.arpa\n        }\n        ...</pre>\n\n\n<p>上記の設定をすると CoreDNS のPod の標準出力にデバッグログ が出力されるようになります。私の触っていた EKS の環境の場合は、数分ほどで CoreDNS の Pod で reload が発生して元の設定（デバッグログ がオフ）に戻るようになってました。</p>\n\n<h3 id=\"Kubernetes-の名前解決について\">Kubernetes の名前解決について</h3>\n\n<p>次にKubernetes 上のコンテナはどのように名前解決するのかを知っておく必要があります。Kurbernetes の Pod の DNS リゾルバー(<code>/etc/resolv.conf</code>) のデフォルト設定は下記のようになっています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>% kubectl exec fluent-bit-46zvl -- cat /etc/resolv.conf\nnameserver 172.20.0.10\nsearch logging.svc.cluster.local svc.cluster.local cluster.local\noptions ndots:5</pre>\n\n\n<p>この状態で Fluent Bit のコンテナから Amazon Kinesis の API エンドポイントに疎通する場合は、CoreDNS に8回のリクエストが発生します。これは、IPv4 , IPv6 の2種類の名前解決を <code>search</code> の数だけ名前解決を試みた後で EKS 外に名前解決をする設定になっているからです。この設定になっているおかげで Kubernetes の Service を使った名前解決が出来るようになっています。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831154909.png\" alt=\"f:id:mayuki123:20210831154909p:plain\" width=\"1200\" height=\"328\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>また、<code>options ndots:5</code> の設定は <code>.</code> の数が 5個以上の時は最初から外部に名前解決するようになります。そのため、Amazon Aurora や ElastiCache などのデータベースへの クラスターエンドポイントは <code>.</code> の数が五個以上あるので、CoreDNSへのリクエスト回数は少なくて済みます。ここを意識しなくてよいのはありがたいですね。</p>\n\n<p>ソーシャルPLUSというプロダクトの特性上、EKS 内のアプリケーションから外部サービスの API を実行する機会が多々あります。特定のタイミングで外部のサービスに大量のAPIリクエストを実行した際に、CoreDNS へのリクエストが増大してしまい不安定になってしまったのではと考えられます。</p>\n\n<h2 id=\"CoreDNS-の負荷軽減\">CoreDNS の負荷軽減</h2>\n\n<p>Kurbernetes 上のコンテナの名前解決を知ると、外部サービスのAPI を実行する際には CoreDNS へのリクエストが多くなる事が分かりました。ここで、CoreDNS へのリクエスト数を減らす方法は下記の二つがあります。これも AWS のナレッジベースに方法が記載されているので、詳細は下記の記事を読む方が良いと思います。</p>\n\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/eks-dns-failure/\">Amazon EKS &#x3067;&#x306E; DNS &#x969C;&#x5BB3;&#x306E;&#x30C8;&#x30E9;&#x30D6;&#x30EB;&#x30B7;&#x30E5;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;</a></li>\n</ul>\n\n\n<h3 id=\"ドメインの末尾にドット--を追加する\">ドメインの末尾にドット (.) を追加する</h3>\n\n<p>接続先のドメインの最後に <code>.</code> をつけると、EKS の内部で名前解決を複数回しないようになり、CoreDNS へのリクエストの総数が減ります。一例をあげると、<code>example.com</code> ではなく、 <code>example.com.</code> とする事で最初から EKS の外部に名前解決をしてくれるようになります。ドメインが SDK の内部で定義されているような場合など、変更出来ない場合はこの方法は利用出来ないかと思います。</p>\n\n<h3 id=\"etcresolvconf-で-ndots1-の設定をする\"><code>/etc/resolv.conf</code> で ndots:1 の設定をする</h3>\n\n<p><code>/etc/resolv.conf</code> に <code>options ndots:5</code> とデフォルトで設定されている数値を <code>1</code> にする事で、ドメインに <code>.</code> が含まれている場合は常に EKS の外部に名前解決するようになります。Kubernetes の Manifest に <code>spec.dnsConfig</code> パラメータを設定する事で Pod 単位で変更が出来ます。ただし、この設定をすると EKS 内部で名前解決をしなくなってしまいますが、<code>&lt;name&gt;.&lt;namespace&gt;.svc.cluster.local.</code> のように最後に <code>.</code> をつけると名前解決出来ました。Kurbernetes の Service の数が多いとこの方法を周知させるのも大変だと思います。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hoge\nspec:\n  template:\n    spec:\n      dnsConfig:\n        options:\n          - name: ndots\n            value: &#34;1&#34;</pre>\n\n\n<h3 id=\"その他の-CoreDNS-の負荷軽減の方法\">その他の CoreDNS の負荷軽減の方法</h3>\n\n<p>上記の二つの方法は CoreDNS へのリクエスト数を減らすことで、負荷を軽減するようなアプローチでした。CoreDNS の Pod 数はデフォルトで 2個となりますが、CoreDNS のPod をオートスケールする手段もあります。</p>\n\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/\">Autoscale the DNS Service in a Cluster</a></li>\n</ul>\n\n\n<p>また、Daemonset で DNS キャッシュをノード単位で配置するという方法もあります。</p>\n\n<ul>\n<li><a href=\"https://kubernetes.io/ja/docs/tasks/administer-cluster/nodelocaldns/\">KubernetesクラスターでNodeLocal DNSキャッシュを使用する</a></li>\n</ul>\n\n\n<p>この辺りは他の方が書いた技術ブログも多くあるかと思うので、この記事では特に説明はしないです。</p>\n\n<h2 id=\"最終的な結果\">最終的な結果</h2>\n\n<p>ソーシャルPLUSでは最終的に根本原因の CoreDNS へのリクエスト数を減らすために <code>/etc/resolv.conf</code> で <code>ndots:1</code> の設定をするようにしました。この設定をアプリケーションの Pod に適応した所、CoreDNS へのリクエスト数は 25% ほどと目に見えて減少させる事が出来ました。キャプチャは載せてないですが、CoreDNS の Pod の CPU使用率も 以前の半分ほどになったので、負荷軽減の目的は達成しました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210831/20210831171734.png\" alt=\"f:id:mayuki123:20210831171734p:plain\" width=\"527\" height=\"187\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>ここまで、確信を持てないまま CoreDNS の負荷軽減に取り組みましたが、元々のネットワークエラーであった <code>Mysql2::Error::ConnectionError</code> のエラーは再発しなくなりました。また、EKS 上の他のコンテナも <code>Name or service not known</code> のような名前解決が出来ないといったエラーも発生しなくなりました。CoreDNS の負荷を減らす事で悩まされていた問題の解消が出来たと思います。今回のように比較的早い段階で気づく事が出来たので、お客さんへのサービス影響のある問題に発展せずに済みました。</p>\n\n<p>今後、利用者数が増えてより負荷のかかる状況になってきた時には再発する可能性はありますが、早い段階で気付けるように日々確認するダッシュボードにメトリクスを追加するようにしています。その時がきた場合は CoreDNS の Pod 数の調整や DNS キャッシュの導入が必要になりそうです。</p>\n\n<h2 id=\"おわりに\">おわりに</h2>\n\n<p>最終的には Pod の DNS 設定を調整するだけでネットワークエラーは解決しました。この記事では、結果だけではなくて解決に至るまでの経緯をメインにまとめてみました。実施していて良かったと思うことを下記にまとめます。これらの事が出来ていなければ、今回のようなネットワークエラーはたまに発生する事象として、根本原因の追及は出来なかったと思うので、サービスのオブザーバビリティを整備する事や日々の情報収集は大事ですね。</p>\n\n<ul>\n<li>アプリケーションのエラーを Slack に通知していた</li>\n<li>Kurbernetes のメトリクスを Datadog で確認できる状態だった</li>\n<li>コンテナのログを一元的に Datadog Logs  で閲覧できるようにしていた</li>\n<li>他の人の技術ブログから Kubernetes の CoreDNS が不安定になることを知っていた</li>\n</ul>\n\n\n<p>この記事に間違っている内容や、もっと良い改善方法がある事をご存知の方がいましたら、優しく教えてください。</p>\n\n<h2 id=\"おまけ\">おまけ</h2>\n\n<p>現在、ソーシャルPLUS では作りたい機能が山ほどある状況でまだまだ成長するサービスになると思うので、成長を続けるサービスに携わりたいエンジニアやデザイナーのご応募をお待ちしております！サイトにはまだないですが、インフラエンジニアも近いうちに募集をする事にはなると思います。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21802\" title=\"Railsエンジニア【Shopify App開発/ID連携サービス】 / 株式会社フィードフォース\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://open.talentio.com/1/c/feedforce/requisitions/detail/21802\">open.talentio.com</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21755\" title=\"フロントエンドエンジニア【Shopifyアプリ開発/ID連携サービス/React/TypeScript】 / 株式会社フィードフォース\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://open.talentio.com/1/c/feedforce/requisitions/detail/21755\">open.talentio.com</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopen.talentio.com%2F1%2Fc%2Ffeedforce%2Frequisitions%2Fdetail%2F21760\" title=\"UI/UXデザイナー【ID連携サービス/マーケティング支援SaaS】 / 株式会社フィードフォース\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://open.talentio.com/1/c/feedforce/requisitions/detail/21760\">open.talentio.com</a></cite></p>\n\n<p>フィードフォース の他のサービスもエンジニアを募集してますので、興味があればご応募お待ちしております！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fengineers.recruit.feedforce.jp%2F%3F_ga%3D2.157559610.1029003260.1630297434-1923366822.1626416415%23entry\" title=\"フィードフォース エンジニア・デザイナー採用サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://engineers.recruit.feedforce.jp/?_ga=2.157559610.1029003260.1630297434-1923366822.1626416415#entry\">engineers.recruit.feedforce.jp</a></cite></p>\n","contentSnippet":"ソーシャルPLUS の開発チームでインフラエンジニア をやっています id:mayuki123 です。今月からフィードフォースから分社化をした株式会社ソーシャルPLUS の所属となりましたが、仕事内容は変わらずにサービスのインフラ改善を進めていく事になるかと思います。2019年11月に技術スタックを整理してみたという記事から2年弱経過していますが、ソーシャルPLUSのインフラ環境は、一部アプリケーションについてはコンテナ環境を Amazon EKS にホスティングして本番運用するようになりました。あと数ヶ月ほどで全ての環境がEC2からコンテナに置き換えられると良いなと思っています(願望)。developer.feedforce.jpそして、既に利用されている機能の一部を Amazon EKS に移行して、しばらく経過した時にアプリケーションでネットワークエラーが稀に発生していました。原因調査をした結果が CoreDNS の負荷によるものと発覚するまでのトラブルシュートの流れについて、記事として書き残しておきます。発生していた事象Datadog を活用した原因調査アプリケーションの負荷状況EKS 上のコンテナの調査EKS のCoreDNS の調査CoreDNS のデバッグログの有効化Kubernetes の名前解決についてCoreDNS の負荷軽減ドメインの末尾にドット (.) を追加する/etc/resolv.conf で ndots:1 の設定をするその他の CoreDNS の負荷軽減の方法最終的な結果おわりにおまけ発生していた事象ソーシャルPLUSでは、バックエンドのアプリケーションでエラーが発生した時に、Bugsnag を利用して Slack 通知するようにしています。ある時にMysql2::Error::ConnectionError が発生しました。単発のネットワークエラーの場合はアプリケーションがリトライする事でサービス影響がない事も多く、一時的な問題と思って静観する事があるかと思います。しかし、また数日後に同じ事象が発生しました。ハインリッヒの1：29：300の法則のように、ちょっとした異常を見落としていると重大なサービス障害となってしまう可能性があるので、原因調査を始めます。Datadog を活用した原因調査ソーシャルPLUSでは、モニタリングサービスの Datadog を利用しているのでメトリクスやログの調査を出来るようになっています。どこが原因かを探り始めました。アプリケーションの負荷状況まずはアプリケーションで利用するサーバの負荷状況を確認する所から始めました。Mysql2::Error::ConnectionError が発生した時刻は EKS の Node の CPU 使用率が 70% ほどで、アプリケーションで負荷のかかる処理の最中でした。また、データベースの負荷は少し前に負荷対策の改善をした事もあって、今回の事件の犯人ではなさそうです。他にもEC2 と DB 間でネットワークのボトルネックがないかなどの確認はしましたが、CPU 使用率が高い以外の問題は特に見つかりませんでした。完全犯罪でしょうか。EKS 上のコンテナの調査サーバ単体の問題ではないとすると、Amazon EKS で何か起きている事を疑うことにしました。EKSで動かしているコンテナのログは Datadog Logs に送っているので、エラーが発生していたアプリケーション以外のログ を確認していると、MySQL の ConnectionError が発生した時間帯に下記の Warning のメッセージが出ている事に気づきました。このログは Amazon Kinesis Data Firehose にログを送る Fluent Bit のコンテナで発生しており、エラーが発生してたアプリケーションとは異なるノードに存在してました。[yyyy/mm/dd hh:mm:ss] [ warn] [net] getaddrinfo(host='kinesis.ap-northeast-1.amazonaws.com'): Name or service not known同時刻に特定のアプリケーション以外のコンテナも影響を受けていることから、EKS の中で問題がありそうです。元々、EKSに関する技術ブログは目を通すようにしていた事もあり、Kubernetes の DNS の名前解決で問題が発生する場合があるというのは知っていたので、CoreDNSに焦点を当てて調べることにしました。アウトプットをしてくれる人たちには、いつも感謝をしています。Production Ready EKS CoreDNS Configuration | by Serkan Capkan | Cloutive Technology Solutions - Tech Blog | MediumEKSでDNSを安定させるために対応したこと - Chatwork Creator's Noteスマホゲームの API サーバにおける EKS の運用事例 | エンジニアブログ | GREE EngineeringEKS のCoreDNS の調査Datadog Agent で Kurbernetes の各種メトリクスを収集していて、EKS の CoreDNS の状況も Datadog の Metric Explorer で確認する事が出来るようになっています。Datadog で取得可能な CoreDNS のメトリクスcoredns.request_count を確認すると特定の時間帯で CoreDNS へのリクエストが多い状態で、このタイミングでの CoreDNS Pod の CPU 負荷は10％前後でしたが、それ以外に不審なメトリクスは存在しませんでした。まだ事象の原因との確信は持てないですが、負荷がそれなりにかかっていることは確かなのでリクエストが多くなる理由を調べます。CoreDNS のデバッグログの有効化まずは CoreDNS のデバッグログを確認したいとなるかと思いますが、EKS の CoreDNS はデフォルトだとデバッグログの出力がオフの状態のため、どのようなリクエストが到達しているのかは確認する事ができません。CoreDNS のログを有効化する方法は AWS のナレッジベースにある記事に方法が記載されています。Amazon EKS での DNS 障害のトラブルシューティングこの記事によると、Namespace(kube-system) に Configmap (coredns) があるので、Corefile 設定に log を追加するとデバッグログ が出力されるようになります。# kubectl -n kube-system edit configmap corednskind: ConfigMapapiVersion: v1data:  Corefile: |    .:53 {        log    # Enabling CoreDNS Logging        errors        health        kubernetes cluster.local in-addr.arpa ip6.arpa {          pods insecure          upstream          fallthrough in-addr.arpa ip6.arpa        }        ...上記の設定をすると CoreDNS のPod の標準出力にデバッグログ が出力されるようになります。私の触っていた EKS の環境の場合は、数分ほどで CoreDNS の Pod で reload が発生して元の設定（デバッグログ がオフ）に戻るようになってました。Kubernetes の名前解決について次にKubernetes 上のコンテナはどのように名前解決するのかを知っておく必要があります。Kurbernetes の Pod の DNS リゾルバー(/etc/resolv.conf) のデフォルト設定は下記のようになっています。% kubectl exec fluent-bit-46zvl -- cat /etc/resolv.confnameserver 172.20.0.10search logging.svc.cluster.local svc.cluster.local cluster.localoptions ndots:5この状態で Fluent Bit のコンテナから Amazon Kinesis の API エンドポイントに疎通する場合は、CoreDNS に8回のリクエストが発生します。これは、IPv4 , IPv6 の2種類の名前解決を search の数だけ名前解決を試みた後で EKS 外に名前解決をする設定になっているからです。この設定になっているおかげで Kubernetes の Service を使った名前解決が出来るようになっています。また、options ndots:5 の設定は . の数が 5個以上の時は最初から外部に名前解決するようになります。そのため、Amazon Aurora や ElastiCache などのデータベースへの クラスターエンドポイントは . の数が五個以上あるので、CoreDNSへのリクエスト回数は少なくて済みます。ここを意識しなくてよいのはありがたいですね。ソーシャルPLUSというプロダクトの特性上、EKS 内のアプリケーションから外部サービスの API を実行する機会が多々あります。特定のタイミングで外部のサービスに大量のAPIリクエストを実行した際に、CoreDNS へのリクエストが増大してしまい不安定になってしまったのではと考えられます。CoreDNS の負荷軽減Kurbernetes 上のコンテナの名前解決を知ると、外部サービスのAPI を実行する際には CoreDNS へのリクエストが多くなる事が分かりました。ここで、CoreDNS へのリクエスト数を減らす方法は下記の二つがあります。これも AWS のナレッジベースに方法が記載されているので、詳細は下記の記事を読む方が良いと思います。Amazon EKS での DNS 障害のトラブルシューティングドメインの末尾にドット (.) を追加する接続先のドメインの最後に . をつけると、EKS の内部で名前解決を複数回しないようになり、CoreDNS へのリクエストの総数が減ります。一例をあげると、example.com ではなく、 example.com. とする事で最初から EKS の外部に名前解決をしてくれるようになります。ドメインが SDK の内部で定義されているような場合など、変更出来ない場合はこの方法は利用出来ないかと思います。/etc/resolv.conf で ndots:1 の設定をする/etc/resolv.conf に options ndots:5 とデフォルトで設定されている数値を 1 にする事で、ドメインに . が含まれている場合は常に EKS の外部に名前解決するようになります。Kubernetes の Manifest に spec.dnsConfig パラメータを設定する事で Pod 単位で変更が出来ます。ただし、この設定をすると EKS 内部で名前解決をしなくなってしまいますが、<name>.<namespace>.svc.cluster.local. のように最後に . をつけると名前解決出来ました。Kurbernetes の Service の数が多いとこの方法を周知させるのも大変だと思います。apiVersion: apps/v1kind: Deploymentmetadata:  name: hogespec:  template:    spec:      dnsConfig:        options:          - name: ndots            value: \"1\"その他の CoreDNS の負荷軽減の方法上記の二つの方法は CoreDNS へのリクエスト数を減らすことで、負荷を軽減するようなアプローチでした。CoreDNS の Pod 数はデフォルトで 2個となりますが、CoreDNS のPod をオートスケールする手段もあります。Autoscale the DNS Service in a Clusterまた、Daemonset で DNS キャッシュをノード単位で配置するという方法もあります。KubernetesクラスターでNodeLocal DNSキャッシュを使用するこの辺りは他の方が書いた技術ブログも多くあるかと思うので、この記事では特に説明はしないです。最終的な結果ソーシャルPLUSでは最終的に根本原因の CoreDNS へのリクエスト数を減らすために /etc/resolv.conf で ndots:1 の設定をするようにしました。この設定をアプリケーションの Pod に適応した所、CoreDNS へのリクエスト数は 25% ほどと目に見えて減少させる事が出来ました。キャプチャは載せてないですが、CoreDNS の Pod の CPU使用率も 以前の半分ほどになったので、負荷軽減の目的は達成しました。ここまで、確信を持てないまま CoreDNS の負荷軽減に取り組みましたが、元々のネットワークエラーであった Mysql2::Error::ConnectionError のエラーは再発しなくなりました。また、EKS 上の他のコンテナも Name or service not known のような名前解決が出来ないといったエラーも発生しなくなりました。CoreDNS の負荷を減らす事で悩まされていた問題の解消が出来たと思います。今回のように比較的早い段階で気づく事が出来たので、お客さんへのサービス影響のある問題に発展せずに済みました。今後、利用者数が増えてより負荷のかかる状況になってきた時には再発する可能性はありますが、早い段階で気付けるように日々確認するダッシュボードにメトリクスを追加するようにしています。その時がきた場合は CoreDNS の Pod 数の調整や DNS キャッシュの導入が必要になりそうです。おわりに最終的には Pod の DNS 設定を調整するだけでネットワークエラーは解決しました。この記事では、結果だけではなくて解決に至るまでの経緯をメインにまとめてみました。実施していて良かったと思うことを下記にまとめます。これらの事が出来ていなければ、今回のようなネットワークエラーはたまに発生する事象として、根本原因の追及は出来なかったと思うので、サービスのオブザーバビリティを整備する事や日々の情報収集は大事ですね。アプリケーションのエラーを Slack に通知していたKurbernetes のメトリクスを Datadog で確認できる状態だったコンテナのログを一元的に Datadog Logs  で閲覧できるようにしていた他の人の技術ブログから Kubernetes の CoreDNS が不安定になることを知っていたこの記事に間違っている内容や、もっと良い改善方法がある事をご存知の方がいましたら、優しく教えてください。おまけ現在、ソーシャルPLUS では作りたい機能が山ほどある状況でまだまだ成長するサービスになると思うので、成長を続けるサービスに携わりたいエンジニアやデザイナーのご応募をお待ちしております！サイトにはまだないですが、インフラエンジニアも近いうちに募集をする事にはなると思います。open.talentio.comopen.talentio.comopen.talentio.comフィードフォース の他のサービスもエンジニアを募集してますので、興味があればご応募お待ちしております！engineers.recruit.feedforce.jp","link":"https://developer.feedforce.jp/entry/2021/09/02/134725","isoDate":"2021-09-02T04:47:25.000Z","dateMiliSeconds":1630558045000,"imageUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/4268819/1588226000876991","authorName":"feedforce"},{"title":"Firestore エミュレーターを使ったテスト同士の競合が起きないようにしていい感じにテストできるようにした話","content":"<p>こんにちは、エンジニアの <a href=\"http://blog.hatena.ne.jp/len_prog/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/len_prog/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:len_prog</a> です。</p>\n\n<p>私が所属している <a href=\"https://ecbooster.jp/\">EC Booster</a> チームでは、「<a href=\"https://support.ecbooster.jp/ja/articles/4854572-%E3%82%AB%E3%82%A4%E3%82%BC%E3%83%B3%E3%82%AB%E3%83%BC%E3%83%89%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">カイゼンカード</a>」機能の開発に Firebase を採用しています。<br />\nその中でも特に Cloud Functions for Firebase と Cloud Firestore をメインで使用しており、これらの採用により短い開発期間で機能をリリースすることができました 🎉</p>\n\n<p>しかし、Firebase を採用したことで苦労したことが全く無かったわけではありません。<br />\n特に、テスト周りはインターネット上にもあまり情報が多くない状況で、色々ハマりながら開発をしてきました。</p>\n\n<p>そこで、今回の記事では、いくつかあったハマりごとの中でも特に厄介だったものについて対策を書いていきます。</p>\n\n<h1>Firestore Emulator のプロジェクト共有時のデータ競合</h1>\n\n<p><a href=\"https://firebase.google.com/docs/emulator-suite?hl=ja\">Firebase Local Emulator Suite</a> を使って Firestore に接続するテストを書いていた際に、<br />\nテストを単体で実行した場合には通るのに、他のテストと並列に実行した場合のみドキュメントの状態が予期せぬものになりテストが落ちてしまうことに悩まされました。</p>\n\n<p>調査の結果、これは、接続先プロジェクトがすべてのテストで同じになってしまっているのが原因ということが分かりました。</p>\n\n<p>この状態で同じドキュメントを書き換えるテストが並列で走ってしまった場合、実行タイミングによってはドキュメントが予期せぬ状態になってしまいます。<br />\nまた、テスト結果が不安定だとテストが信用できず、実装を保証するものになりません。</p>\n\n<p>このままでは役に立つテストが書けないと思い試行錯誤した結果、<strong>テストごとに違うプロジェクトの Firestore に接続する</strong>ことでそれぞれのテストが独立した状態で実行でき、結果としてデータ競合が防げることが分かりました。</p>\n\n<p>以下、サンプルアプリケーションを用いてこの方法について書いていきます。</p>\n\n<h1>サンプルアプリケーションの概要</h1>\n\n<p>今回は、サンプルとして簡易的な RPG を開発することを想定します。<br />\nゲームに登場するキャラクターは、以下のような構造のドキュメントを持つ <code>characters</code> コレクションで管理されています。</p>\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synIdentifier\">{</span>\n  name: <span class=\"synType\">string</span><span class=\"synStatement\">;</span>\n  level: <span class=\"synType\">number</span><span class=\"synStatement\">;</span>\n  job: <span class=\"synType\">string</span><span class=\"synStatement\">;</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<p>また、このゲームでは以下の行動のみが可能と仮定します(これだけじゃゲームとして成り立たないと思いますが、簡単のためということでお許しください)</p>\n\n<ul>\n<li>キャラクターは、レベルアップすることができる</li>\n<li>キャラクターは、転職することができる\n\n<ul>\n<li>転職すると、キャラクターのレベルが1に戻る</li>\n</ul>\n</li>\n</ul>\n\n\n<p>なお、アプリケーション上においてキャラクターのレベルアップは、<code>characterLevelUpUseCase</code>、キャラクターの転職は <code>characterJobChangeUseCase</code> という関数を呼ぶことで行えることとします。</p>\n\n<p>ここからは、実際にこれら2つの関数のテストコードが競合する様子を見ていきます。</p>\n\n<h1>データ競合発生時の構成</h1>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210624/20210624165133.png\" alt=\"f:id:len_prog:20210624165133p:plain:w500\" width=\"1200\" height=\"790\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" style=\"width:500px\" itemprop=\"image\"></span></p>\n\n<p><code>characterJobChangeUseCase</code> と <code>characterLevelUpUseCase</code> が <code>my-game</code> プロジェクトの Firestore を共有してしまっています。<br />\nこの状態で両方の関数から同じドキュメントを書き換えてしまった場合、データ競合が発生する可能性があります。<br />\nこの場合、実際のコードは以下のようになります。</p>\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>\n<span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> admin <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;firebase-admin&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> characterJobChangeUseCase <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class=\"synStatement\">;</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;my-game&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">// ここが問題</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">const</span> charactersCollection <span class=\"synStatement\">=</span> admin\n  .firestore<span class=\"synStatement\">()</span>\n  .collection<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;characters&quot;</span><span class=\"synStatement\">);</span>\n\ndescribe<span class=\"synStatement\">(</span>characterJobChangeUseCase<span class=\"synStatement\">,</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> targetCharacterId <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;target-character-id&quot;</span><span class=\"synStatement\">;</span>\n\n  beforeEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.set<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n        name: <span class=\"synConstant\">&quot;アルス&quot;</span><span class=\"synStatement\">,</span>\n        level: <span class=\"synConstant\">10</span><span class=\"synStatement\">,</span>\n        job: <span class=\"synConstant\">&quot;すっぴん&quot;</span><span class=\"synStatement\">;</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  afterEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.<span class=\"synStatement\">delete();</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  it<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class=\"synStatement\">,</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> characterJobChangeUseCase<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">);</span> <span class=\"synComment\">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>\n    <span class=\"synStatement\">const</span> jobChangedCharacter <span class=\"synStatement\">=</span> <span class=\"synStatement\">(await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.get<span class=\"synStatement\">())</span>.data<span class=\"synStatement\">();</span>\n\n    expect<span class=\"synStatement\">(</span>jobChangedCharacter.level<span class=\"synStatement\">)</span>.toBe<span class=\"synStatement\">(</span><span class=\"synConstant\">1</span><span class=\"synStatement\">);</span> <span class=\"synComment\">// 実行タイミング次第では、1になるはずが11になってしまう！</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>\n<span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> admin <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;firebase-admin&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> characterLevelUpUseCase <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class=\"synStatement\">;</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;my-game&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">// ここが問題</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synStatement\">const</span> charactersCollection <span class=\"synStatement\">=</span> admin\n  .firestore<span class=\"synStatement\">()</span>\n  .collection<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;characters&quot;</span><span class=\"synStatement\">);</span>\n\ndescribe<span class=\"synStatement\">(</span>characterLevelUpUseCase<span class=\"synStatement\">,</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> targetCharacterId <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;target-character-id&quot;</span><span class=\"synStatement\">;</span>\n\n  beforeEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.set<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n        name: <span class=\"synConstant\">&quot;アルス&quot;</span><span class=\"synStatement\">,</span>\n        level: <span class=\"synConstant\">10</span><span class=\"synStatement\">,</span>\n        job: <span class=\"synConstant\">&quot;すっぴん&quot;</span><span class=\"synStatement\">;</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  afterEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.<span class=\"synStatement\">delete();</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  it<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class=\"synStatement\">,</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> characterLevelUpUseCase<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">);</span> <span class=\"synComment\">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>\n    <span class=\"synStatement\">const</span> grownCharacter <span class=\"synStatement\">=</span> <span class=\"synStatement\">(await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.get<span class=\"synStatement\">())</span>.data<span class=\"synStatement\">();</span>\n\n    expect<span class=\"synStatement\">(</span>grownCharacter.level<span class=\"synStatement\">)</span>.toBe<span class=\"synStatement\">(</span><span class=\"synConstant\">11</span><span class=\"synStatement\">);</span> <span class=\"synComment\">// 実行タイミング次第では、11になるはずが1に戻ってしまう！</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n<p>見ての通り、両方のテストが <code>my-game</code> プロジェクトの Firestore の、ID: <code>target-character-id</code> のドキュメントを更新してしまっています。<br />\nこれらのテストコードを並列で実行した場合、<strong>キャラクターが転職したのにレベルが1に戻らない</strong>、<strong>キャラクターがレベルアップしたはずなのになぜかレベル1に戻ってしまう</strong>など予期せぬ状態になってしまい、\nテストが落ちてしまう可能性があります。</p>\n\n<p>この状態ではテストコードが信用できないので、テストごとに向き先プロジェクトを変えてこの問題を解決していきます。</p>\n\n<h1>データ競合解決後の構成</h1>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png\" alt=\"f:id:len_prog:20210705113933p:plain:w500\" width=\"1200\" height=\"779\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" style=\"width:500px\" itemprop=\"image\"></span></p>\n\n<p>上図②③のようにテストごとに接続先プロジェクトを独立させることで、他のテストとの並列実行が原因のデータ競合を防ぐことができます。<br />\n具体的には、以下のように <code>admin.initializeApp()</code>の第一引数に他のテストと重複しないプロジェクトID を渡すようにします。</p>\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;character-job-change-use-case-spec&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">//  図の②に対応</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synComment\">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;character-level-up-use-case-spec&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">// 図の③に対応</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n<p>変更後のコードの全体像は以下のようになります。</p>\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// functions/src/usecases/characterJobChangeUseCase.spec.ts</span>\n<span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> admin <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;firebase-admin&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> characterJobChangeUseCase <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@/usecases/characterJobChangeUseCase&quot;</span><span class=\"synStatement\">;</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;character-job-change-use-case-spec&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">//  図の②に対応</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synComment\">// ここから下は構成変更前のコードと同じ</span>\n\n<span class=\"synStatement\">const</span> charactersCollection <span class=\"synStatement\">=</span> admin\n  .firestore<span class=\"synStatement\">()</span>\n  .collection<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;characters&quot;</span><span class=\"synStatement\">);</span>\n\ndescribe<span class=\"synStatement\">(</span>characterJobChangeUseCase<span class=\"synStatement\">,</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> targetCharacterId <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;target-character-id&quot;</span><span class=\"synStatement\">;</span>\n\n  beforeEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.set<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n        name: <span class=\"synConstant\">&quot;アルス&quot;</span><span class=\"synStatement\">,</span>\n        level: <span class=\"synConstant\">10</span><span class=\"synStatement\">,</span>\n        job: <span class=\"synConstant\">&quot;すっぴん&quot;</span><span class=\"synStatement\">;</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  afterEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.<span class=\"synStatement\">delete();</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  it<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;キャラクターが転職した場合、レベルが1に戻ること&quot;</span><span class=\"synStatement\">,</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> characterJobChangeUseCase<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">);</span> <span class=\"synComment\">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る</span>\n    <span class=\"synStatement\">const</span> jobChangedCharacter <span class=\"synStatement\">=</span> <span class=\"synStatement\">(await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.get<span class=\"synStatement\">())</span>.data<span class=\"synStatement\">();</span>\n\n    expect<span class=\"synStatement\">(</span>jobChangedCharacter.level<span class=\"synStatement\">)</span>.toBe<span class=\"synStatement\">(</span><span class=\"synConstant\">1</span><span class=\"synStatement\">);</span> <span class=\"synComment\">// 転職するとレベルが1に戻ることを検証できるようになった</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synComment\">// functions/src/usecases/characterLevelUpUseCase.spec.ts</span>\n<span class=\"synStatement\">import</span> * <span class=\"synStatement\">as</span> admin <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;firebase-admin&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> characterLevelUpUseCase <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;@/usecases/characterLevelUpUseCase&quot;</span><span class=\"synStatement\">;</span>\n\nadmin.initializeApp<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n  projectId: <span class=\"synConstant\">&quot;character-level-up-use-case-spec&quot;</span><span class=\"synStatement\">,</span> <span class=\"synComment\">// 図の③に対応</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n<span class=\"synComment\">// ここから下は構成変更前のコードと同じ</span>\n\n<span class=\"synStatement\">const</span> charactersCollection <span class=\"synStatement\">=</span> admin\n  .firestore<span class=\"synStatement\">()</span>\n  .collection<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;characters&quot;</span><span class=\"synStatement\">);</span>\n\ndescribe<span class=\"synStatement\">(</span>characterLevelUpUseCase<span class=\"synStatement\">,</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> targetCharacterId <span class=\"synStatement\">=</span> <span class=\"synConstant\">&quot;target-character-id&quot;</span><span class=\"synStatement\">;</span>\n\n  beforeEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.set<span class=\"synStatement\">(</span><span class=\"synIdentifier\">{</span>\n        name: <span class=\"synConstant\">&quot;アルス&quot;</span><span class=\"synStatement\">,</span>\n        level: <span class=\"synConstant\">10</span><span class=\"synStatement\">,</span>\n        job: <span class=\"synConstant\">&quot;すっぴん&quot;</span><span class=\"synStatement\">;</span>\n    <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  afterEach<span class=\"synStatement\">(async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.<span class=\"synStatement\">delete();</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n\n  it<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;キャラクターがレベルアップした場合、レベルが1上がること&quot;</span><span class=\"synStatement\">,</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">await</span> characterLevelUpUseCase<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">);</span> <span class=\"synComment\">// characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる</span>\n    <span class=\"synStatement\">const</span> grownCharacter <span class=\"synStatement\">=</span> <span class=\"synStatement\">(await</span> charactersCollection.doc<span class=\"synStatement\">(</span>targetCharacterId<span class=\"synStatement\">)</span>.get<span class=\"synStatement\">())</span>.data<span class=\"synStatement\">();</span>\n\n    expect<span class=\"synStatement\">(</span>grownCharacter.level<span class=\"synStatement\">)</span>.toBe<span class=\"synStatement\">(</span><span class=\"synConstant\">11</span><span class=\"synStatement\">);</span> <span class=\"synComment\">// レベルアップした場合にレベルが1上がることを検証できるようになった</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n<p>このようにテストごとに向き先プロジェクトを変えることで、それぞれのテストで担保したいことをちゃんと担保できるようになります。</p>\n\n<h1>ちょっと微妙な点</h1>\n\n<p>上記の方法でテストごとに独立した環境の Firestore を操作できるようになり、データ競合を防げるようになりました。</p>\n\n<p>しかし、この方法にはひとつだけ微妙な点があります。<br />\n問題の説明のために、先程掲載した<code>競合解決後の構成図</code>を再掲します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png\" alt=\"f:id:len_prog:20210705113933p:plain:w500\" width=\"1200\" height=\"779\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" style=\"width:500px\" itemprop=\"image\"></span></p>\n\n<p>上図①の接続先は、<code>$ firebase use</code> で指定したプロジェクトか、<code>$ firebase emulators:start</code> に <code>--project</code>を渡した場合にはそのプロジェクトになり、そのほかの方法で変えることは今のところできないようです。</p>\n\n<p>そのため、プロジェクトをテストごとに分けた場合、上図②③のテスト中にテスト自体は動くものの、Firebase Emulator の UI からデータの内容を見ることはできなくなります。</p>\n\n<p>一応、接続先を <code>$ firebase use</code> で指定しているものに切り替えるようコードを書き換えたりすればデバッグはできますが、\nいちいち書き換えの手間が生じるので若干面倒です。</p>\n\n<p>また、これは Firebase Enulator の UI で立ち上がっているすべてのプロジェクトの Firestore を見られるようになれば解決する問題ではあり、実際に <a href=\"https://github.com/firebase/firebase-tools-ui\">firebase/firebase-tools-ui</a> リポジトリに <a href=\"https://github.com/firebase/firebase-tools-ui/issues/281\">issue</a> も立っていますが、すぐに対応が終わりそうには見えない状況なので、しばらくは不便な状況が続くことが予想されます。</p>\n\n<h1>所感</h1>\n\n<p>Firebase は便利ですが、当然ながら全くハマらずに開発できる銀の弾丸ではないですね。<br />\nしかし、基本的には便利でドキュメントもそれなりに読みやすく、個人的には使っていて満足感があります。</p>\n\n<p>今後も日々の開発で得た Firebase や GCP 周りの TIPS を書いていけたらと思っておりますので、よろしくお願いいたします 🙏</p>\n","contentSnippet":"こんにちは、エンジニアの id:len_prog です。私が所属している EC Booster チームでは、「カイゼンカード」機能の開発に Firebase を採用しています。しかし、Firebase を採用したことで苦労したことが全く無かったわけではありません。そこで、今回の記事では、いくつかあったハマりごとの中でも特に厄介だったものについて対策を書いていきます。Firestore Emulator のプロジェクト共有時のデータ競合Firebase Local Emulator Suite を使って Firestore に接続するテストを書いていた際に、調査の結果、これは、接続先プロジェクトがすべてのテストで同じになってしまっているのが原因ということが分かりました。この状態で同じドキュメントを書き換えるテストが並列で走ってしまった場合、実行タイミングによってはドキュメントが予期せぬ状態になってしまいます。このままでは役に立つテストが書けないと思い試行錯誤した結果、テストごとに違うプロジェクトの Firestore に接続することでそれぞれのテストが独立した状態で実行でき、結果としてデータ競合が防げることが分かりました。以下、サンプルアプリケーションを用いてこの方法について書いていきます。サンプルアプリケーションの概要今回は、サンプルとして簡易的な RPG を開発することを想定します。characters コレクションで管理されています。{  name: string;  level: number;  job: string;}また、このゲームでは以下の行動のみが可能と仮定します(これだけじゃゲームとして成り立たないと思いますが、簡単のためということでお許しください)キャラクターは、レベルアップすることができるキャラクターは、転職することができる転職すると、キャラクターのレベルが1に戻るなお、アプリケーション上においてキャラクターのレベルアップは、characterLevelUpUseCase、キャラクターの転職は characterJobChangeUseCase という関数を呼ぶことで行えることとします。ここからは、実際にこれら2つの関数のテストコードが競合する様子を見ていきます。データ競合発生時の構成characterJobChangeUseCase と characterLevelUpUseCase が my-game プロジェクトの Firestore を共有してしまっています。// functions/src/usecases/characterJobChangeUseCase.spec.tsimport * as admin from \"firebase-admin\";import { characterJobChangeUseCase } from \"@/usecases/characterJobChangeUseCase\";admin.initializeApp({  projectId: \"my-game\", // ここが問題});const charactersCollection = admin  .firestore()  .collection(\"characters\");describe(characterJobChangeUseCase, () => {  const targetCharacterId = \"target-character-id\";  beforeEach(async () => {    await charactersCollection.doc(targetCharacterId).set({        name: \"アルス\",        level: 10,        job: \"すっぴん\";    });  });  afterEach(async () => {    await charactersCollection.doc(targetCharacterId).delete();  });  it(\"キャラクターが転職した場合、レベルが1に戻ること\", async () => {    await characterJobChangeUseCase(targetCharacterId); // characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る    const jobChangedCharacter = (await charactersCollection.doc(targetCharacterId).get()).data();    expect(jobChangedCharacter.level).toBe(1); // 実行タイミング次第では、1になるはずが11になってしまう！  });});// functions/src/usecases/characterLevelUpUseCase.spec.tsimport * as admin from \"firebase-admin\";import { characterLevelUpUseCase } from \"@/usecases/characterLevelUpUseCase\";admin.initializeApp({  projectId: \"my-game\", // ここが問題});const charactersCollection = admin  .firestore()  .collection(\"characters\");describe(characterLevelUpUseCase, () => {  const targetCharacterId = \"target-character-id\";  beforeEach(async () => {    await charactersCollection.doc(targetCharacterId).set({        name: \"アルス\",        level: 10,        job: \"すっぴん\";    });  });  afterEach(async () => {    await charactersCollection.doc(targetCharacterId).delete();  });  it(\"キャラクターがレベルアップした場合、レベルが1上がること\", async () => {    await characterLevelUpUseCase(targetCharacterId); // characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる    const grownCharacter = (await charactersCollection.doc(targetCharacterId).get()).data();    expect(grownCharacter.level).toBe(11); // 実行タイミング次第では、11になるはずが1に戻ってしまう！  });});見ての通り、両方のテストが my-game プロジェクトの Firestore の、ID: target-character-id のドキュメントを更新してしまっています。キャラクターが転職したのにレベルが1に戻らない、キャラクターがレベルアップしたはずなのになぜかレベル1に戻ってしまうなど予期せぬ状態になってしまい、テストが落ちてしまう可能性があります。この状態ではテストコードが信用できないので、テストごとに向き先プロジェクトを変えてこの問題を解決していきます。データ競合解決後の構成上図②③のようにテストごとに接続先プロジェクトを独立させることで、他のテストとの並列実行が原因のデータ競合を防ぐことができます。admin.initializeApp()の第一引数に他のテストと重複しないプロジェクトID を渡すようにします。// functions/src/usecases/characterJobChangeUseCase.spec.tsadmin.initializeApp({  projectId: \"character-job-change-use-case-spec\", //  図の②に対応});// functions/src/usecases/characterLevelUpUseCase.spec.tsadmin.initializeApp({  projectId: \"character-level-up-use-case-spec\", // 図の③に対応});変更後のコードの全体像は以下のようになります。// functions/src/usecases/characterJobChangeUseCase.spec.tsimport * as admin from \"firebase-admin\";import { characterJobChangeUseCase } from \"@/usecases/characterJobChangeUseCase\";admin.initializeApp({  projectId: \"character-job-change-use-case-spec\", //  図の②に対応});// ここから下は構成変更前のコードと同じconst charactersCollection = admin  .firestore()  .collection(\"characters\");describe(characterJobChangeUseCase, () => {  const targetCharacterId = \"target-character-id\";  beforeEach(async () => {    await charactersCollection.doc(targetCharacterId).set({        name: \"アルス\",        level: 10,        job: \"すっぴん\";    });  });  afterEach(async () => {    await charactersCollection.doc(targetCharacterId).delete();  });  it(\"キャラクターが転職した場合、レベルが1に戻ること\", async () => {    await characterJobChangeUseCase(targetCharacterId); // characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1に戻る    const jobChangedCharacter = (await charactersCollection.doc(targetCharacterId).get()).data();    expect(jobChangedCharacter.level).toBe(1); // 転職するとレベルが1に戻ることを検証できるようになった  });});// functions/src/usecases/characterLevelUpUseCase.spec.tsimport * as admin from \"firebase-admin\";import { characterLevelUpUseCase } from \"@/usecases/characterLevelUpUseCase\";admin.initializeApp({  projectId: \"character-level-up-use-case-spec\", // 図の③に対応});// ここから下は構成変更前のコードと同じconst charactersCollection = admin  .firestore()  .collection(\"characters\");describe(characterLevelUpUseCase, () => {  const targetCharacterId = \"target-character-id\";  beforeEach(async () => {    await charactersCollection.doc(targetCharacterId).set({        name: \"アルス\",        level: 10,        job: \"すっぴん\";    });  });  afterEach(async () => {    await charactersCollection.doc(targetCharacterId).delete();  });  it(\"キャラクターがレベルアップした場合、レベルが1上がること\", async () => {    await characterLevelUpUseCase(targetCharacterId); // characterJobChangeUsecase#handle に渡された引数の ID を持つユーザーのレベルが1上がる    const grownCharacter = (await charactersCollection.doc(targetCharacterId).get()).data();    expect(grownCharacter.level).toBe(11); // レベルアップした場合にレベルが1上がることを検証できるようになった  });});このようにテストごとに向き先プロジェクトを変えることで、それぞれのテストで担保したいことをちゃんと担保できるようになります。ちょっと微妙な点上記の方法でテストごとに独立した環境の Firestore を操作できるようになり、データ競合を防げるようになりました。しかし、この方法にはひとつだけ微妙な点があります。競合解決後の構成図を再掲します。上図①の接続先は、$ firebase use で指定したプロジェクトか、$ firebase emulators:start に --projectを渡した場合にはそのプロジェクトになり、そのほかの方法で変えることは今のところできないようです。そのため、プロジェクトをテストごとに分けた場合、上図②③のテスト中にテスト自体は動くものの、Firebase Emulator の UI からデータの内容を見ることはできなくなります。一応、接続先を $ firebase use で指定しているものに切り替えるようコードを書き換えたりすればデバッグはできますが、いちいち書き換えの手間が生じるので若干面倒です。また、これは Firebase Enulator の UI で立ち上がっているすべてのプロジェクトの Firestore を見られるようになれば解決する問題ではあり、実際に firebase/firebase-tools-ui リポジトリに issue も立っていますが、すぐに対応が終わりそうには見えない状況なので、しばらくは不便な状況が続くことが予想されます。所感Firebase は便利ですが、当然ながら全くハマらずに開発できる銀の弾丸ではないですね。今後も日々の開発で得た Firebase や GCP 周りの TIPS を書いていけたらと思っておりますので、よろしくお願いいたします 🙏","link":"https://developer.feedforce.jp/entry/2021/07/07/103917","isoDate":"2021-07-07T01:39:17.000Z","dateMiliSeconds":1625621957000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/l/len_prog/20210705/20210705113933.png","authorName":"feedforce"},{"title":"【2021年夏】半期に1度の Engineer’s Principles Award 受賞者を紹介します","content":"<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/feedforce_recruit/20210611/20210611163915.jpg\" alt=\"f:id:feedforce_recruit:20210611163915j:plain\" width=\"1200\" height=\"700\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>こんにちは。人事の今岡と申します。\n2021年もあっという間に6月ですね。</p>\n\n<p>フィードフォースでは先日オンライン納会が開催され、半期に一度の「Engineer’s Principles Award 2021 Summer」の受賞者が発表されました。\n今回アワードを受賞した開発メンバーと表彰内容をご紹介します。</p>\n\n<p>前回の表彰者紹介はコチラ</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F28%2F131042\" title=\"半期に1度の Engineer’s Principles Award 受賞者を紹介します - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2020/12/28/131042\">developer.feedforce.jp</a></cite></p>\n\n<h2>Engineer’s Principles Award とは</h2>\n\n<p>Engineer’s Principles とは、フィードフォースの開発メンバー向けに現場が主体となって設定した、5つの行動指針です。\n半期に一度、開発メンバー同士で投票を行い、行動指針の項目ごとに最も体現しているメンバーが選ばれ表彰されます。</p>\n\n<p>Engineer’s Principles についてはこちら</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fnd1f2236470b3\" title=\"フィードフォースが目指すエンジニア像とは。「Engineer’s Principles」を紹介します｜フィードフォースのnote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://media.feedforce.jp/n/nd1f2236470b3\">media.feedforce.jp</a></cite></p>\n\n<h2>受賞者紹介</h2>\n\n<p>※表彰コメントは本来社内向けのものであるため一部変更させていただいています。受賞者によって各種アカウントを載せています。</p>\n\n<h3>🏆「Stay Humble; 常に謙虚であるべし」受賞者</h3>\n\n<h4>@len_prog さん</h4>\n\n<p>表彰コメント：<br />\n社内でメジャーな Rails 以外でバックエンドを実装する際に、なぜそうするのかという理由やレイヤーの切り方を他のメンバーにわかりやすく説明していました。\n一方、自分自身で苦手なことがあった場合に、他の人に相談したり、フィードバックを求めそれを受け入れる姿勢は、まさに Stay Humble だと思いました。</p>\n\n<p><i class=\"blogicon-twitter\"></i> <a href=\"https://twitter.com/len_prog\">Len (@len_prog)</a> , <i class=\"blogicon-entry\"></i> <a href=\"https://len-prog.hatenablog.com/\">Blog</a></p>\n\n<h4>@katsunn さん</h4>\n\n<p>表彰コメント：<br />\n事前に色々なアイデアを用意しつつも、相談の過程でお互いの認識や意図を踏まえたうえで改善を進めていく一方、ただ受け入れるだけではなく、\nプロフェッショナルとして自分なりに咀嚼したアウトプットにしていく姿勢が非常に素晴らしく、ベンチマークにすべきだと感じました。</p>\n\n<p><i class=\"blogicon-twitter\"></i>  <a href=\"https://twitter.com/nomo_017\">のもち(@nomo_017)</a></p>\n\n<h3>🏆「Be Positive &amp; Proactive; 常に肯定的・主体的であるべし」受賞者</h3>\n\n<h4>@sukechannnn さん</h4>\n\n<p>表彰コメント：<br />\nエンジニアとして様々なチームビルディングや開発手法を試しているだけではなく、ビジネス視点からも方向性を考え、\nプロダクトオーナーとしてプロダクトを成長させようとしている姿勢は、まさにこの言葉にぴったりだと思います。</p>\n\n<p><i class=\"blogicon-twitter\"></i> <a href=\"https://twitter.com/sukechannnn\"> sukechannnn (@sukechannnn)</a> , <i class=\"fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/sukechannnn\">sukechannnn</a></p>\n\n<h4>@daido1976 さん</h4>\n\n<p>表彰コメント：<br />\n分野を問わず新しいことに前向きに挑戦し、気になったことはどんどん質問するのに加え、\n育休中のメンバーに代わって、率先してチームを引っ張っている行動力が素晴らしいと思いました。</p>\n\n<p><i class=\"blogicon-twitter\"></i>  <a href=\"https://twitter.com/daido1976\">Daido Shota (@daido1976)</a> , <i class=\"fa fa-github\" aria-hidden=\"true\"></i>  <a href=\"https://github.com/daido1976\"> daido1976</a></p>\n\n<h3>🏆「Be Prepared; 常に来たるべき機会に備えるべし」受賞者</h3>\n\n<h4>@daido1976 さん</h4>\n\n<p>表彰コメント：<br />\n自分のキャリアや目指すべき方向を踏まえつつ、常にアンテナを立てて知識を広く持とうとしている姿勢がよいと感じています。\nさらに、そうして蓄積したスキルを開発だけではなく、自ら手を挙げ講師をつとめた新卒向け Web 研修にも活かしている点がまさに Be Prepared だと思いました。</p>\n\n<p><i class=\"blogicon-twitter\"></i>  <a href=\"https://twitter.com/daido1976\">Daido Shota (@daido1976)</a> , <i class=\"fa fa-github\" aria-hidden=\"true\"></i>  <a href=\"https://github.com/daido1976\"> daido1976</a></p>\n\n<h4>@namikingsoft さん</h4>\n\n<p>表彰コメント：<br />\nOmni Hub の開発において、あまり開発経験がなかったはずの Rust を使いこなしつつ WAF を含めたインフラ構築をしていて、\n@namikingsoft さんの強みが発揮される局面でした。また dfplus.io でもパフォーマンス改善でコアな知識を活かすなど、まさにこれまでの準備の賜物だと思います。</p>\n\n<p><i class=\"fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/namikingsoft\">namikingsoft</a></p>\n\n<h3>🏆「Share All; 己の知見、試行、失敗、遍く共有すべし」受賞者</h3>\n\n<h4>@masutaka さん</h4>\n\n<p>表彰コメント：<br />\nLooker 導入において知見や失敗など社内共有しているほか、そもそも  esa にどう記録すべきかといった、「共有のための知見の共有」にまで配慮しています。\nSlack や esa 、Blog への共有はエンジニアのみならず、全社的にプラスの影響を与えていて、まさに共有の神様と言えるでしょう。</p>\n\n<p><i class=\"blogicon-twitter\"></i> <a href=\"https://twitter.com/masutaka\">Takashi Masuda (@masutaka)</a> , <i class=\"fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/masutaka\">masutaka</a> , <i class=\"blogicon-entry\"></i> <a href=\"https://masutaka.net/\">Blog</a></p>\n\n<h4>@kogai さん</h4>\n\n<p>表彰コメント：<br />\nShopify 周りでは、社内だけでなく社外に対してのプレゼンスを示しています。また Omni Hub の開発で多忙な中、\n社内勉強会 Rust の会では実際の新規事業のプロダクトコードを題材に実践的な知見を共有するなど、その共有力はフィードフォースエンジニアの鑑（かがみ）だと思います。</p>\n\n<p><i class=\"blogicon-twitter\"></i> <a href=\"https://twitter.com/iamchawan\">茶碗 (@iamchawan)</a> ,<i class=\"fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/kogai\">kogai</a> , <i class=\"blogicon-entry\"></i> <a href=\"https://k9bookshelf.com/blogs/development\">Blog</a></p>\n\n<h3>🏆「Just Do It; 全力でやりきるべし」受賞者</h3>\n\n<h4>@namikingsoftさん</h4>\n\n<p>表彰コメント：<br />\nOmni  Hub リリースまでの道筋をきちんと立ててスケジュール以上の速さで完走して去っていくその姿は、まさに Just Do It でした。</p>\n\n<p><i class=\"fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/namikingsoft\">namikingsoft</a></p>\n\n<h2>周囲の賞賛・承認を共有するよい機会に</h2>\n\n<p>以上、延べ9名の受賞者でした。</p>\n\n<p>表彰コメントは、<strong>開発メンバー同士の投票時に自由記述できるコメントがもとになっているので</strong>、周囲からの賞賛・承認の声を全社で共有できるよい機会となっています。</p>\n\n<p>前回に引き続き連続受賞しているメンバーもいますが、投票コメントには毎回違ったエピソードが集まっており、日ごろから継続的に実践をしているからこそ周りのエンジニアの目に留まるのだと感じました。</p>\n\n<p>受賞者のみなさん、おめでとうございました！</p>\n","contentSnippet":"こんにちは。人事の今岡と申します。2021年もあっという間に6月ですね。フィードフォースでは先日オンライン納会が開催され、半期に一度の「Engineer’s Principles Award 2021 Summer」の受賞者が発表されました。今回アワードを受賞した開発メンバーと表彰内容をご紹介します。前回の表彰者紹介はコチラdeveloper.feedforce.jpEngineer’s Principles Award とはEngineer’s Principles とは、フィードフォースの開発メンバー向けに現場が主体となって設定した、5つの行動指針です。半期に一度、開発メンバー同士で投票を行い、行動指針の項目ごとに最も体現しているメンバーが選ばれ表彰されます。Engineer’s Principles についてはこちらmedia.feedforce.jp受賞者紹介※表彰コメントは本来社内向けのものであるため一部変更させていただいています。受賞者によって各種アカウントを載せています。🏆「Stay Humble; 常に謙虚であるべし」受賞者@len_prog さん表彰コメント： Len (@len_prog) ,  Blog@katsunn さん表彰コメント：  のもち(@nomo_017)🏆「Be Positive & Proactive; 常に肯定的・主体的であるべし」受賞者@sukechannnn さん表彰コメント：  sukechannnn (@sukechannnn) ,  sukechannnn@daido1976 さん表彰コメント：  Daido Shota (@daido1976) ,    daido1976🏆「Be Prepared; 常に来たるべき機会に備えるべし」受賞者@daido1976 さん表彰コメント：  Daido Shota (@daido1976) ,    daido1976@namikingsoft さん表彰コメント： namikingsoft🏆「Share All; 己の知見、試行、失敗、遍く共有すべし」受賞者@masutaka さん表彰コメント： Takashi Masuda (@masutaka) ,  masutaka ,  Blog@kogai さん表彰コメント： 茶碗 (@iamchawan) , kogai ,  Blog🏆「Just Do It; 全力でやりきるべし」受賞者@namikingsoftさん表彰コメント： namikingsoft周囲の賞賛・承認を共有するよい機会に以上、延べ9名の受賞者でした。表彰コメントは、開発メンバー同士の投票時に自由記述できるコメントがもとになっているので、周囲からの賞賛・承認の声を全社で共有できるよい機会となっています。前回に引き続き連続受賞しているメンバーもいますが、投票コメントには毎回違ったエピソードが集まっており、日ごろから継続的に実践をしているからこそ周りのエンジニアの目に留まるのだと感じました。受賞者のみなさん、おめでとうございました！","link":"https://developer.feedforce.jp/entry/2021/06/11/164253","isoDate":"2021-06-11T07:42:53.000Z","dateMiliSeconds":1623397373000,"imageUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/4268819/1588226000876991","authorName":"feedforce"},{"title":"プランニングの難しさを乗り越えて...スクラム開発が良い感じになった話","content":"<p>こんにちは。フィードフォースの <a href=\"https://ecbooster.jp/\">EC Booster</a> チームで開発（主にプロダクトオーナー）をしている <a href=\"https://twitter.com/sukechannnn\">@sukechannnn</a> です。元々ずっとバックエンドエンジニアでしたが、最近プロダクトオーナーをやるようになりました（理由はのちほど！）。</p>\n\n<p>昨年のアドベントカレンダーで <a href=\"https://developer.feedforce.jp/entry/2020/12/11/172338\">半年モブプロしたらチームが大きく成長した話</a> というブログを書いたのですが、2021年3月から <strong>モブプロを取り入れたスクラム開発</strong> をしています。それに伴って、\"モブプロ\" と \"個人タスク⇢レビュー\" の両軸で開発するようになりました（<a href=\"https://prtimes.jp/main/html/rd/p/000000040.000071307.html\">先日リリースしたカイゼンカード</a> はスクラムで開発しました）。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F12%2F11%2F172338\" title=\"半年モブプロしたらチームが大きく成長した話 - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>今は良い感じに回っていますが、そうなるまでに色々と試行錯誤したので、そこで得た学びをお伝えできればと思います。全員リモートワークで開発するなら、モブプロを取り入れたスクラムはおすすめです！</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#モブプロの良さと難しさ\">モブプロの良さと難しさ</a></li>\n    <li><a href=\"#そうだスクラムしよう\">そうだ、スクラムしよう！</a></li>\n    <li><a href=\"#プランニングが終わらない問題\">プランニングが終わらない問題</a></li>\n    <li><a href=\"#原因はissue-が散らかっていることだった\">原因は「issue が散らかっていること」だった</a></li>\n    <li><a href=\"#issue-をグルーピング優先順位はそれぞれで\">issue をグルーピング、優先順位はそれぞれで</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"モブプロの良さと難しさ\">モブプロの良さと難しさ</h2>\n\n<p>モブプロ中心の開発を初めた当初は、以下の利点を感じていました。</p>\n\n<ul>\n<li>ドメイン知識の共有がしやすい</li>\n<li>コンテキストの共有がしやすい（\"何をどう作るか\" という議論もしやすい）</li>\n<li>レビューが要らない</li>\n<li>リモートワークでもさみしくない（だいじ）</li>\n</ul>\n\n\n<p>しばらくモブプロを続ける中で、開発メンバー全員がドメイン知識やフロント〜バックエンド全体の技術的な知識を共有している状態になりました。なので、なにか悩みがあってモブプロで共有すると「わかる〜」となるし、何より単純に仲良くなったと思います（ﾖｼｯ!!）。</p>\n\n<p>一方で、だんだんと <strong>モブプロだけ</strong> の開発が窮屈になってきました。</p>\n\n<ul>\n<li>知識の共有が進んできて \"全員でやらなくても良くない？\" というタスクが増えてきた</li>\n<li>個人でじっくり考えた方が良いタスクもあるのが分かった（新しい技術の調査、設計の見直しなど）</li>\n</ul>\n\n\n<p>これはチームが成長したことで出てきた嬉しい悩みなのですが、とはいえ完全にモブプロを辞めるのも上述したメリットを失いそうで怖い...。チーム全員で「今後どう開発していこう？」というのを話し合い、<strong>モブプロを取り入れたスクラム開発</strong> を試してみることにしました。</p>\n\n<h2 id=\"そうだスクラムしよう\">そうだ、スクラムしよう！</h2>\n\n<p>スクラム開発をしようと思ったのは、ストーリーポイント<a href=\"#f-9495249b\" name=\"fn-9495249b\" title=\"ストーリーポイント：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる\">*1</a>で見積もって <strong>ベロシティ<a href=\"#f-33d76d3d\" name=\"fn-33d76d3d\" title=\"ベロシティ：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと\">*2</a>を測りたい</strong> という別の目的もありました。</p>\n\n<p>モブプロで開発していると新機能のメイン開発は着実に進んでいくのですが、それ以外の細かいタスク（主に保守系）が見積もりづらい状況で、空いた時間にやるという形になってしまっていました（それ用に時間は設けていましたが）。</p>\n\n<p>モブプロ以外の個人タスクを計画的にやりたい、見積もりもしっかりやりたい、ということで、スクラムを導入することで、<strong>モブプロと個人開発のいいとこ取り</strong> をしようと考えました。</p>\n\n<ul>\n<li>新機能開発などのコンテキストの共有が重要なタスクは引き続きモブプロでやる\n\n<ul>\n<li>ストーリーポイントで見積もる</li>\n</ul>\n</li>\n<li>それ以外は個人タスクとして各自で進められるように、プランニングでしっかり整理する\n\n<ul>\n<li>個人タスクもストーリーポイントで見積もる</li>\n</ul>\n</li>\n<li>全てのタスクをストーリーポイントで見積もるのでベロシティが測れるようになる\n\n<ul>\n<li>振り返りで見積もりの精度を上げられる</li>\n</ul>\n</li>\n</ul>\n\n\n<p>めっちゃ良さそう...そう思っていざやってみたところ、１つ大きな壁にぶち当たってしまいました。</p>\n\n<h2 id=\"プランニングが終わらない問題\">プランニングが終わらない問題</h2>\n\n<p><a href=\"https://www.shoeisha.co.jp/book/detail/9784798130507\">エッセンシャルスクラム</a>にもある通り、１週間のプランニングに２時間以上かけるべきではありません。僕らは「１スプリント=１週間」で回しているため、２時間の予定で始めたプランニングですが、これが終わらない...。最初から何回かは４時間以上かかり、全員ヘトヘトになってしまいました。</p>\n\n<p>モブプロはプランニングが簡単です。全員やることが同じなので、基本的にタスクが直列で繋がっていきます。そのため「今スプリントはここから⇢ここまで」という感じで Sprint Backlog 的なものを決めることができました。</p>\n\n<p>しかし、スクラムの見積もりはもっと横断的なものです。単純に、今取り組んでいるものだけ見れば良いのではなく、これから取り組むものをたくさんある issue から選ぶ必要があります。そう、この <strong>たくさんある issue の中から今スプリントにやるタスクを選ぶこと</strong> に時間がかかってしまうのです。</p>\n\n<p>以前にもスクラム開発を試したことがあるのですが、その時もこれが原因でプランニングがとても大変でした。気にするトピックが多すぎてだんだん何について議論してるか分からなくなり、空中戦になってしまうんですよね...。</p>\n\n<p>その原因は、主に以下の２つでした。</p>\n\n<ul>\n<li>バックログの整理/管理に責任を持つ人（プロダクトオーナー<a href=\"#f-339964b7\" name=\"fn-339964b7\" title=\"プロダクトオーナー：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）\">*3</a>）がいなかった</li>\n<li>issue の数と種類が多く、バックログリファインメント<a href=\"#f-f2375d03\" name=\"fn-f2375d03\" title=\"バックログリファインメント：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと\">*4</a>をしても整理しきれなかった</li>\n</ul>\n\n\n<p>プロダクトオーナー不在の問題は、元々それっぽいことをしていた僕が、改めてプロダクトオーナーやりますと手を上げ、バックログ管理の責任を持つことになりました。</p>\n\n<p>それでも、バックログリファインメントが上手く行かない問題は残っていました。リファインメントの概念は理解していて、しっかり時間も取っていたのに、いざプランニングをすると色々な issue を見すぎて伸びてしまう...。過去に何度も直面したこの問題に、改めて取り組むことにしました。</p>\n\n<h2 id=\"原因はissue-が散らかっていることだった\">原因は「issue が散らかっていること」だった</h2>\n\n<p>僕たちが開発している EC Booster は、ショッピング広告の自動運用やデータフィードの更新など、様々なジョブが裏で動いています。そのため、運用作業が日々発生し、運用の中で見つかる例外ケースやバグの修正が多々あります。\nまた、フロントエンドとバックエンドを全員が開発するため、１つのリポジトリで管理していることもあり、色々な種類の issue が１つのレーンに入り乱れてしまっていました。</p>\n\n<p>そのため、優先順位を付けるのも難しく、また「次スプリントで何をどこまでやるか？」を判断するのが難しくなってしまっていました。</p>\n\n<p>プロダクトバックログを整理しなければ、というのは分かっているのですが、スクラムに関する本やブログには整理の方法は書いてありません。どうやって整理したら分かりやすくなるかな...と考えていたところ、同僚が共有してくれた以下の記事が参考になりました。</p>\n\n<p><a href=\"https://note.com/gonjyu/n/nd7bf3efa0728\">エンジニア歴17年の俺が、事業系の開発タスクをバンバン投げてくる非エンジニアに、保守の必要性を死ぬほど分かりやすく説明する。</a></p>\n\n<p>この記事の中で「issueには \"種類\" がある」と言っていて、issue の種類別に整理された図が載っていました。これだ...！</p>\n\n<h2 id=\"issue-をグルーピング優先順位はそれぞれで\">issue をグルーピング、優先順位はそれぞれで</h2>\n\n<p>上記の記事を参考に、issue を <strong>新機能開発</strong>、<strong>バグ修正/運用改善</strong>、<strong>ライブラリーアップデート</strong> に分けて、それぞれのレーンで優先順位を付けるようにしました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"issue をグルーピング、優先順位はそれぞれで\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526215948.png\" alt=\"f:id:sukechannnn:20210526215948p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>issue をグルーピング、優先順位はそれぞれで</figcaption></figure></p>\n\n<p>issue の種類が同じなので、優先順位を付けるのは簡単です。さらに、スプリントバックログに入れるタスクを <strong>新機能開発：運用系 = ６：４</strong> の割合にする、という決めを作りました。さらに、何回かスプリントを回してベロシティも見えてきました。</p>\n\n<p>ここまで情報が揃うと <strong>次のスプリントで何をやるか決める基準</strong> ができてきます。</p>\n\n<p>そもそもの「次のプランニングでどの issue について話すか？」というのも、それぞれのレーンで優先順位が高い issue を６：４のバランスとベロシティを参考に選べるようになりました。<strong>プランニングの前</strong>にプロダクトオーナーが（開発チームと協力しながら）当たりを付けておくことで、プランニングで話すトピックを事前に共有できるようになり、開発メンバーそれぞれが事前に頭を整理しておくこともできるようになりました。</p>\n\n<p>これにより、プランニングがかなりスムーズに進むようになったので、いよいよスクラムが回り始めました。新機能開発はモブプロの同期的な開発で、それ以外のタスクは個人タスク⇢レビューという非同期な開発で進められるようになり、デリバリーの最大化を目指しつつ、個人の稼働率も上げられるようになりました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526212511.png\" alt=\"f:id:sukechannnn:20210526212511p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすい</figcaption></figure></p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>issue をグルーピングしそれぞれで優先順位を付けたことで、プランニングが時間内に収まるようになっただけでなく、プランニングで話すトピックを絞ったことでより深い議論をすることができるようになりました。今は「モブプロを取り入れたスクラム」がとても良い感じに回っています！</p>\n\n<p>↓ EC Booster チームでの「スプリントの回し方」資料を公開しているので、気になった方はぜひ見てみてください！（もっとこうしたら良いよ！という助言などあれば頂けると嬉しいです！）</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTQY639rUAwDDtLfj_c9WbU1E0IlDSFzAbrP-XFCmbg8V_sNKPX_pCvKpiy50CQpS02nXvZnQHBb6JT/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>こんな感じ開発している EC Booster ですが、ただ今 <strong>バックエンド（Ruby, Rails）が得意なエンジニアを猛烈に必要としています！！！</strong></p>\n\n<p>もしちょっっっとでも興味があれば、 <strong>僕とお話しましょう！</strong> 以下から気軽に応募してください！\n<a href=\"https://open.talentio.com/1/c/feedforce/requisitions/detail/19785\">https://open.talentio.com/1/c/feedforce/requisitions/detail/19785</a></p>\n\n<p>最後まで読んでいただき、ありがとうございました！</p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-9495249b\" name=\"f-9495249b\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://www.ryuzee.com/contents/blog/3716\">ストーリーポイント</a>：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる</span></p>\n<p class=\"footnote\"><a href=\"#fn-33d76d3d\" name=\"f-33d76d3d\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://www.ryuzee.com/contents/blog/4802\">ベロシティ</a>：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと</span></p>\n<p class=\"footnote\"><a href=\"#fn-339964b7\" name=\"f-339964b7\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://www.ryuzee.com/contents/blog/7143\">プロダクトオーナー</a>：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）</span></p>\n<p class=\"footnote\"><a href=\"#fn-f2375d03\" name=\"f-f2375d03\" class=\"footnote-number\">*4</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://www.ryuzee.com/contents/blog/5024\">バックログリファインメント</a>：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと</span></p>\n</div>","contentSnippet":"こんにちは。フィードフォースの EC Booster チームで開発（主にプロダクトオーナー）をしている @sukechannnn です。元々ずっとバックエンドエンジニアでしたが、最近プロダクトオーナーをやるようになりました（理由はのちほど！）。昨年のアドベントカレンダーで 半年モブプロしたらチームが大きく成長した話 というブログを書いたのですが、2021年3月から モブプロを取り入れたスクラム開発 をしています。それに伴って、\"モブプロ\" と \"個人タスク⇢レビュー\" の両軸で開発するようになりました（先日リリースしたカイゼンカード はスクラムで開発しました）。今は良い感じに回っていますが、そうなるまでに色々と試行錯誤したので、そこで得た学びをお伝えできればと思います。全員リモートワークで開発するなら、モブプロを取り入れたスクラムはおすすめです！モブプロの良さと難しさそうだ、スクラムしよう！プランニングが終わらない問題原因は「issue が散らかっていること」だったissue をグルーピング、優先順位はそれぞれでまとめモブプロの良さと難しさモブプロ中心の開発を初めた当初は、以下の利点を感じていました。ドメイン知識の共有がしやすいコンテキストの共有がしやすい（\"何をどう作るか\" という議論もしやすい）レビューが要らないリモートワークでもさみしくない（だいじ）しばらくモブプロを続ける中で、開発メンバー全員がドメイン知識やフロント〜バックエンド全体の技術的な知識を共有している状態になりました。なので、なにか悩みがあってモブプロで共有すると「わかる〜」となるし、何より単純に仲良くなったと思います（ﾖｼｯ!!）。一方で、だんだんと モブプロだけ の開発が窮屈になってきました。知識の共有が進んできて \"全員でやらなくても良くない？\" というタスクが増えてきた個人でじっくり考えた方が良いタスクもあるのが分かった（新しい技術の調査、設計の見直しなど）これはチームが成長したことで出てきた嬉しい悩みなのですが、とはいえ完全にモブプロを辞めるのも上述したメリットを失いそうで怖い...。チーム全員で「今後どう開発していこう？」というのを話し合い、モブプロを取り入れたスクラム開発 を試してみることにしました。そうだ、スクラムしよう！スクラム開発をしようと思ったのは、ストーリーポイント*1で見積もって ベロシティ*2を測りたい という別の目的もありました。モブプロで開発していると新機能のメイン開発は着実に進んでいくのですが、それ以外の細かいタスク（主に保守系）が見積もりづらい状況で、空いた時間にやるという形になってしまっていました（それ用に時間は設けていましたが）。モブプロ以外の個人タスクを計画的にやりたい、見積もりもしっかりやりたい、ということで、スクラムを導入することで、モブプロと個人開発のいいとこ取り をしようと考えました。新機能開発などのコンテキストの共有が重要なタスクは引き続きモブプロでやるストーリーポイントで見積もるそれ以外は個人タスクとして各自で進められるように、プランニングでしっかり整理する個人タスクもストーリーポイントで見積もる全てのタスクをストーリーポイントで見積もるのでベロシティが測れるようになる振り返りで見積もりの精度を上げられるめっちゃ良さそう...そう思っていざやってみたところ、１つ大きな壁にぶち当たってしまいました。プランニングが終わらない問題エッセンシャルスクラムにもある通り、１週間のプランニングに２時間以上かけるべきではありません。僕らは「１スプリント=１週間」で回しているため、２時間の予定で始めたプランニングですが、これが終わらない...。最初から何回かは４時間以上かかり、全員ヘトヘトになってしまいました。モブプロはプランニングが簡単です。全員やることが同じなので、基本的にタスクが直列で繋がっていきます。そのため「今スプリントはここから⇢ここまで」という感じで Sprint Backlog 的なものを決めることができました。しかし、スクラムの見積もりはもっと横断的なものです。単純に、今取り組んでいるものだけ見れば良いのではなく、これから取り組むものをたくさんある issue から選ぶ必要があります。そう、この たくさんある issue の中から今スプリントにやるタスクを選ぶこと に時間がかかってしまうのです。以前にもスクラム開発を試したことがあるのですが、その時もこれが原因でプランニングがとても大変でした。気にするトピックが多すぎてだんだん何について議論してるか分からなくなり、空中戦になってしまうんですよね...。その原因は、主に以下の２つでした。バックログの整理/管理に責任を持つ人（プロダクトオーナー*3）がいなかったissue の数と種類が多く、バックログリファインメント*4をしても整理しきれなかったプロダクトオーナー不在の問題は、元々それっぽいことをしていた僕が、改めてプロダクトオーナーやりますと手を上げ、バックログ管理の責任を持つことになりました。それでも、バックログリファインメントが上手く行かない問題は残っていました。リファインメントの概念は理解していて、しっかり時間も取っていたのに、いざプランニングをすると色々な issue を見すぎて伸びてしまう...。過去に何度も直面したこの問題に、改めて取り組むことにしました。原因は「issue が散らかっていること」だった僕たちが開発している EC Booster は、ショッピング広告の自動運用やデータフィードの更新など、様々なジョブが裏で動いています。そのため、運用作業が日々発生し、運用の中で見つかる例外ケースやバグの修正が多々あります。また、フロントエンドとバックエンドを全員が開発するため、１つのリポジトリで管理していることもあり、色々な種類の issue が１つのレーンに入り乱れてしまっていました。そのため、優先順位を付けるのも難しく、また「次スプリントで何をどこまでやるか？」を判断するのが難しくなってしまっていました。プロダクトバックログを整理しなければ、というのは分かっているのですが、スクラムに関する本やブログには整理の方法は書いてありません。どうやって整理したら分かりやすくなるかな...と考えていたところ、同僚が共有してくれた以下の記事が参考になりました。エンジニア歴17年の俺が、事業系の開発タスクをバンバン投げてくる非エンジニアに、保守の必要性を死ぬほど分かりやすく説明する。この記事の中で「issueには \"種類\" がある」と言っていて、issue の種類別に整理された図が載っていました。これだ...！issue をグルーピング、優先順位はそれぞれで上記の記事を参考に、issue を 新機能開発、バグ修正/運用改善、ライブラリーアップデート に分けて、それぞれのレーンで優先順位を付けるようにしました。issue をグルーピング、優先順位はそれぞれでissue の種類が同じなので、優先順位を付けるのは簡単です。さらに、スプリントバックログに入れるタスクを 新機能開発：運用系 = ６：４ の割合にする、という決めを作りました。さらに、何回かスプリントを回してベロシティも見えてきました。ここまで情報が揃うと 次のスプリントで何をやるか決める基準 ができてきます。そもそもの「次のプランニングでどの issue について話すか？」というのも、それぞれのレーンで優先順位が高い issue を６：４のバランスとベロシティを参考に選べるようになりました。プランニングの前にプロダクトオーナーが（開発チームと協力しながら）当たりを付けておくことで、プランニングで話すトピックを事前に共有できるようになり、開発メンバーそれぞれが事前に頭を整理しておくこともできるようになりました。これにより、プランニングがかなりスムーズに進むようになったので、いよいよスクラムが回り始めました。新機能開発はモブプロの同期的な開発で、それ以外のタスクは個人タスク⇢レビューという非同期な開発で進められるようになり、デリバリーの最大化を目指しつつ、個人の稼働率も上げられるようになりました。GitHub Project を使ってタスク管理してる様子...横に長いんですが、情報が整理されてる方が優先順位を付けやすいまとめissue をグルーピングしそれぞれで優先順位を付けたことで、プランニングが時間内に収まるようになっただけでなく、プランニングで話すトピックを絞ったことでより深い議論をすることができるようになりました。今は「モブプロを取り入れたスクラム」がとても良い感じに回っています！↓ EC Booster チームでの「スプリントの回し方」資料を公開しているので、気になった方はぜひ見てみてください！（もっとこうしたら良いよ！という助言などあれば頂けると嬉しいです！）こんな感じ開発している EC Booster ですが、ただ今 バックエンド（Ruby, Rails）が得意なエンジニアを猛烈に必要としています！！！もしちょっっっとでも興味があれば、 僕とお話しましょう！ 以下から気軽に応募してください！https://open.talentio.com/1/c/feedforce/requisitions/detail/19785最後まで読んでいただき、ありがとうございました！*1:ストーリーポイント：プロダクトバックログ（タスク）を見積もるためにチームが使う単位で、前回の見積もりに対する相対評価を用いる*2:ベロシティ：スプリントの期間でチームが届けることができる見積もり（ストーリーポイント）の合計のこと*3:プロダクトオーナー：プロダクトバックログの管理をする人で、優先順位を付けることに責任を持つ（１人の人間が務める、委員会ではない）*4:バックログリファインメント：プランニングの前にプロダクトバックログを見直し、プランニング可能な状態にしておくこと","link":"https://developer.feedforce.jp/entry/2021/05/31/104813","isoDate":"2021-05-31T01:48:13.000Z","dateMiliSeconds":1622425693000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sukechannnn/20210526/20210526215948.png","authorName":"feedforce"},{"title":"エンジニアキャリアパスをアップデートしました","content":"<p>こんにちは、<a href=\"https://twitter.com/meihong\">meihong</a> です。</p>\n\n<p>株式会社フィードフォースでは<a href=\"https://media.feedforce.jp/n/nc7a2e89635eb\">定期評価ではなく本人の希望するタイミングで評価を行う制度</a>を導入しています。具体的には、各等級ごとに満たすべき基準・条件、またはスキルがあらかじめ提示されており、それを満たしていれば次の等級に進める制度になります。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn222a08fd3e2b\" title=\"半年に1回の評価制度を毎月の評価制度に変えた話｜フィードフォースのnote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://media.feedforce.jp/n/n222a08fd3e2b\">media.feedforce.jp</a></cite></p>\n\n<p>この基準やスキルを私たちはキャリアパスと呼んでいますが、今回、エンジニアのキャリアパスをアップデートしましたのでご紹介したいと思います。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524010544.png\" alt=\"f:id:meihong:20210524010544p:plain\" width=\"1200\" height=\"630\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>なぜキャリアパスをアップデートしたのか</h2>\n\n<p>もともとのキャリアパスは<a href=\"https://media.feedforce.jp/n/n222a08fd3e2b\">導入当初に設計されたもの</a>をベースに、マネージャやエンジニア、新規事業向けエンジニアといった個々人の志向に応じて細分化されていました。</p>\n\n<p>これはこれでよくできたものだったのですが、しばらく運用している中でいくつかの課題点を感じるようになってきました。\n例えば、</p>\n\n<ul>\n<li>志向ごとに分かれすぎていて、志向を横断した動きが想定しづらくなった。</li>\n<li>独り立ちと判断される等級であるメンバーとその一つ上のシニアの境界に「見えない高い壁」が存在するようになった。</li>\n<li>シニア以上の等級になるとチームや会社を牽引することを求められ、技術をそれ以上深掘りすることに対して会社がどう考えているのかが見えづらくなった。</li>\n</ul>\n\n\n<p>といったところです。</p>\n\n<p>特にキャリアパス全体として、職種問わず等級が上がれば上がるほどチームや会社への影響力が求められる設計になっています。</p>\n\n<p>もちろんエンジニアも全体への影響力は持つべきなのですが、その持ち方は他の職種と異なり、技術力の広さ、深さといった持ち方もあるのではないかと考えるようになりました。</p>\n\n<p>ここで、個人的にはプロフェッショナルとしてのスキルは体積であり、その底面積はスキルの幅広さだと考えています。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210523/20210523235853.png\" alt=\"f:id:meihong:20210523235853p:plain\" width=\"1200\" height=\"731\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>極端に底面積が狭いのはさすがに現時点では厳しいとは思いますが、</p>\n\n<ul>\n<li>底面積がそれなりである代わりに高さ(= 深さ)がある</li>\n<li>底面積が広い (= 引き出しが多い) 反面高さはそこまででもない</li>\n</ul>\n\n\n<p>の両者は体積という意味では同じはずです。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524000640.png\" alt=\"f:id:meihong:20210524000640p:plain\" width=\"1200\" height=\"576\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>この両者が共存できる余地が欲しいと考えていました。</p>\n\n<p>そんな中、弊社デザイナーのキャリアパスがアップデートされました。その中でも目を引いたのは、必須スキルと専門スキルという考え方です。</p>\n\n<p>必須スキルはデザイナーとして必ず持っていて欲しいスキルである一方、専門スキルは本人の志向、特性に応じてピックアップできるというもので、大学の専攻を思い出す建て付けでした。</p>\n\n<p><s>これをパクる</s>これにインスパイアされて、エンジニアのキャリアパスもアップデートすることにしました。</p>\n\n<h2>どのように更新したのか</h2>\n\n<p>結果から先にお伝えしておくと、大まかに以下のような方向性に改訂しました。</p>\n\n<ul>\n<li>志向ごとのキャリアパスは止めた。</li>\n<li>旧来の「志向」を専門スキルに分解し、専門スキルの組み合わせで個々人の志向・特性を表現できるようにした。</li>\n<li>等級が上がれば上がるほど満たすべき専門スキルの最低数が増えるようにした。</li>\n</ul>\n\n\n<p>その結果として、例えば</p>\n\n<ul>\n<li>バックエンドエンジニアに特化</li>\n<li>フルスタックエンジニア</li>\n<li>フルスタックな知識をベースに事業の 0 → 1 フェイズに参画できるエンジニア</li>\n<li>カスタマーサクセスエンジニア</li>\n<li>アジャイルコーチ</li>\n</ul>\n\n\n<p>といった、実際に社内に存在している各エンジニアの志向や得意なポイントを表現できるようになりました。</p>\n\n<h2>産みの苦しみ</h2>\n\n<p>ここに至るまでには色々な葛藤がありました。\n社内の esa にキャリアパスを更新したいと宣言はしたものの、社内のエンジニア個々人の顔を思い浮かべつつ何を専門スキルとして設定するかを考えると想像以上に難しい問題だということに気付きました。</p>\n\n<h3>必須スキルと専門スキル</h3>\n\n<p>そもそも必須スキルと専門スキルとは何か、そこの定義から考えることにしました。</p>\n\n<p>必須スキルとは文字通り、全てのエンジニアが共通に要求されるスキルセットのことです。どちらかというと「バックエンド」「フロントエンド」といった用語で定義されるスキルセットというよりも「フィードフォースに所属するエンジニアとしての振る舞い方」ではないでしょうか。</p>\n\n<p>そう考えながら改訂前のキャリアパスを改めて眺めていると、改訂前のキャリアパスはその振る舞いを定義していることに気付きました。その結果、改訂前のキャリアパスが必須スキルのベースとなりました。</p>\n\n<p>そうです、キャリアパスの改訂によって、より要求水準が上がったとも言えます。</p>\n\n<p>一方、専門スキルは、本人の得意分野、志向、特性を定義するものです。\nその志向・方向性で貢献するのであれば、各等級ごとにどの水準の成果を出すべきか。それを定義するものが専門スキルになります。</p>\n\n<h3>専門スキルとはどうあるべきか</h3>\n\n<p>本人の志向を定義するものが専門スキルと説明しましたが、例えばカスタマーサクセスエンジニアやエンジニアリングマネージャといった職種にしてもエンジニアの延長である以上はエンジニアとしての「共通言語」を身につけているべきです。</p>\n\n<p>その「共通言語」とは、例えば設計力であったり、フロントエンドやバックエンドのスキルが該当します。</p>\n\n<p>こういった知識を前提として例えば事業開発であったりチームビルディングを行うべきで、これらの知識がなければエンジニアとの「共通言語」を持っていないと判断せざるを得ません。</p>\n\n<p>一方で、「フロントエンド力」と「バックエンド力」が同じくらい強いエンジニアというのは SSR エンジニアで、そうそう市場には存在しません。そこで、フルスタックとはいえどこかの分野に軸足を置くことができる制度というのも必須に感じました。</p>\n\n<p>ただ、ここの軸足とはあくまでも「フロントエンド」「バックエンド」「インフラ」といった区分けで、エンジニアとしてコードを書き続ける選択をするのであれば、フロントエンド/バックエンド/インフラといった区分に関係なく設計力・実装力が担保されているべきでしょう。</p>\n\n<h3>17 の専門スキル</h3>\n\n<p>ここのバランス感が非常に難しい点でしたが、これを元に 17 の専門スキルを定義しました。\nただし、17 の専門スキルは完全に独立しているわけではなく、以下 6 つは本人の志向を定義するものとして、必ずどれか一つが必須選択としました。</p>\n\n<ul>\n<li>バックエンド</li>\n<li>フロントエンド</li>\n<li>データベース</li>\n<li>基盤</li>\n<li>カスタマーサクセス</li>\n<li>組織支援</li>\n</ul>\n\n\n<p>さらに、上記のうち以下 4 つを選択した場合は「実装・設計」と呼ばれるスキルが必須となります。</p>\n\n<ul>\n<li>バックエンド</li>\n<li>フロントエンド</li>\n<li>データベース</li>\n<li>基盤</li>\n</ul>\n\n\n<p>これにより、コードを書き続けるのであればただコードを書くだけでなく、実装力・設計力が要求される建て付けを実現しました。</p>\n\n<p>また、詳細は省きますが、さらにいくつかの例外を設置することで、「全ての分野で等しく強い SSR なフルスタックエンジニア」が求められないようにしています。</p>\n\n<hr />\n\n<p>様々なエッジケースを考慮したせいでちょっと複雑になった感の否めない新しいキャリアパスですが、以前のものと比べるとその分より柔軟なものになったと思います。</p>\n\n<p>今回は敢えて詳細を省きましたが、<a href=\"https://engineers.recruit.feedforce.jp/#entry\">ご興味をお持ちいただけたら是非カジュアル面談でねっちょりとご説明します</a>！</p>\n","contentSnippet":"こんにちは、meihong です。株式会社フィードフォースでは定期評価ではなく本人の希望するタイミングで評価を行う制度を導入しています。具体的には、各等級ごとに満たすべき基準・条件、またはスキルがあらかじめ提示されており、それを満たしていれば次の等級に進める制度になります。media.feedforce.jpこの基準やスキルを私たちはキャリアパスと呼んでいますが、今回、エンジニアのキャリアパスをアップデートしましたのでご紹介したいと思います。なぜキャリアパスをアップデートしたのかもともとのキャリアパスは導入当初に設計されたものをベースに、マネージャやエンジニア、新規事業向けエンジニアといった個々人の志向に応じて細分化されていました。これはこれでよくできたものだったのですが、しばらく運用している中でいくつかの課題点を感じるようになってきました。例えば、志向ごとに分かれすぎていて、志向を横断した動きが想定しづらくなった。独り立ちと判断される等級であるメンバーとその一つ上のシニアの境界に「見えない高い壁」が存在するようになった。シニア以上の等級になるとチームや会社を牽引することを求められ、技術をそれ以上深掘りすることに対して会社がどう考えているのかが見えづらくなった。といったところです。特にキャリアパス全体として、職種問わず等級が上がれば上がるほどチームや会社への影響力が求められる設計になっています。もちろんエンジニアも全体への影響力は持つべきなのですが、その持ち方は他の職種と異なり、技術力の広さ、深さといった持ち方もあるのではないかと考えるようになりました。ここで、個人的にはプロフェッショナルとしてのスキルは体積であり、その底面積はスキルの幅広さだと考えています。極端に底面積が狭いのはさすがに現時点では厳しいとは思いますが、底面積がそれなりである代わりに高さ(= 深さ)がある底面積が広い (= 引き出しが多い) 反面高さはそこまででもないの両者は体積という意味では同じはずです。この両者が共存できる余地が欲しいと考えていました。そんな中、弊社デザイナーのキャリアパスがアップデートされました。その中でも目を引いたのは、必須スキルと専門スキルという考え方です。必須スキルはデザイナーとして必ず持っていて欲しいスキルである一方、専門スキルは本人の志向、特性に応じてピックアップできるというもので、大学の専攻を思い出す建て付けでした。これをパクるこれにインスパイアされて、エンジニアのキャリアパスもアップデートすることにしました。どのように更新したのか結果から先にお伝えしておくと、大まかに以下のような方向性に改訂しました。志向ごとのキャリアパスは止めた。旧来の「志向」を専門スキルに分解し、専門スキルの組み合わせで個々人の志向・特性を表現できるようにした。等級が上がれば上がるほど満たすべき専門スキルの最低数が増えるようにした。その結果として、例えばバックエンドエンジニアに特化フルスタックエンジニアフルスタックな知識をベースに事業の 0 → 1 フェイズに参画できるエンジニアカスタマーサクセスエンジニアアジャイルコーチといった、実際に社内に存在している各エンジニアの志向や得意なポイントを表現できるようになりました。産みの苦しみここに至るまでには色々な葛藤がありました。社内の esa にキャリアパスを更新したいと宣言はしたものの、社内のエンジニア個々人の顔を思い浮かべつつ何を専門スキルとして設定するかを考えると想像以上に難しい問題だということに気付きました。必須スキルと専門スキルそもそも必須スキルと専門スキルとは何か、そこの定義から考えることにしました。必須スキルとは文字通り、全てのエンジニアが共通に要求されるスキルセットのことです。どちらかというと「バックエンド」「フロントエンド」といった用語で定義されるスキルセットというよりも「フィードフォースに所属するエンジニアとしての振る舞い方」ではないでしょうか。そう考えながら改訂前のキャリアパスを改めて眺めていると、改訂前のキャリアパスはその振る舞いを定義していることに気付きました。その結果、改訂前のキャリアパスが必須スキルのベースとなりました。そうです、キャリアパスの改訂によって、より要求水準が上がったとも言えます。一方、専門スキルは、本人の得意分野、志向、特性を定義するものです。その志向・方向性で貢献するのであれば、各等級ごとにどの水準の成果を出すべきか。それを定義するものが専門スキルになります。専門スキルとはどうあるべきか本人の志向を定義するものが専門スキルと説明しましたが、例えばカスタマーサクセスエンジニアやエンジニアリングマネージャといった職種にしてもエンジニアの延長である以上はエンジニアとしての「共通言語」を身につけているべきです。その「共通言語」とは、例えば設計力であったり、フロントエンドやバックエンドのスキルが該当します。こういった知識を前提として例えば事業開発であったりチームビルディングを行うべきで、これらの知識がなければエンジニアとの「共通言語」を持っていないと判断せざるを得ません。一方で、「フロントエンド力」と「バックエンド力」が同じくらい強いエンジニアというのは SSR エンジニアで、そうそう市場には存在しません。そこで、フルスタックとはいえどこかの分野に軸足を置くことができる制度というのも必須に感じました。ただ、ここの軸足とはあくまでも「フロントエンド」「バックエンド」「インフラ」といった区分けで、エンジニアとしてコードを書き続ける選択をするのであれば、フロントエンド/バックエンド/インフラといった区分に関係なく設計力・実装力が担保されているべきでしょう。17 の専門スキルここのバランス感が非常に難しい点でしたが、これを元に 17 の専門スキルを定義しました。ただし、17 の専門スキルは完全に独立しているわけではなく、以下 6 つは本人の志向を定義するものとして、必ずどれか一つが必須選択としました。バックエンドフロントエンドデータベース基盤カスタマーサクセス組織支援さらに、上記のうち以下 4 つを選択した場合は「実装・設計」と呼ばれるスキルが必須となります。バックエンドフロントエンドデータベース基盤これにより、コードを書き続けるのであればただコードを書くだけでなく、実装力・設計力が要求される建て付けを実現しました。また、詳細は省きますが、さらにいくつかの例外を設置することで、「全ての分野で等しく強い SSR なフルスタックエンジニア」が求められないようにしています。様々なエッジケースを考慮したせいでちょっと複雑になった感の否めない新しいキャリアパスですが、以前のものと比べるとその分より柔軟なものになったと思います。今回は敢えて詳細を省きましたが、ご興味をお持ちいただけたら是非カジュアル面談でねっちょりとご説明します！","link":"https://developer.feedforce.jp/entry/career_path_revised_2021","isoDate":"2021-05-24T02:00:00.000Z","dateMiliSeconds":1621821600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/meihong/20210524/20210524010544.png","authorName":"feedforce"},{"title":"広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分を計算しよう","content":"<p>こんにちは　機械学習エンジニアの<a href=\"https://twitter.com/feed_yao\">八百俊哉</a>です。</p>\n\n<p>今回は複数媒体へ広告を出稿する際に、多くの方が悩まれるであろう「各媒体への予算配分」に関して有効な配分手法を紹介します。</p>\n\n<p><strong>今回の記事で登場する広告用語</strong></p>\n\n<ul>\n<li>媒体・・・広告の配信先や配信手法</li>\n<li>ROAS・・・広告経由で発生した売り上げを広告費用で割った値(広告の費用対効果)</li>\n<li>CPA・・・1件のコンバージョン(目標)を獲得するのにかかった広告コスト</li>\n</ul>\n\n\n<h1>広告運用者が抱える課題とは？</h1>\n\n<p>1つの媒体のみで運用している場合は別ですが、<strong>複数の媒体で広告配信を行っている場合は、どの媒体に対していくら予算を割り振れば良いのかわからない場合があると思います。</strong></p>\n\n<p>過去の実績を元に成果が良い媒体に対して、多く予算を割り振れば良いことは理解しているものの、<strong>「どれくらい」「どの媒体から」予算を割り振れば良いのか</strong>は経験則や簡単な分析で決めている方も多いのではないでしょうか？</p>\n\n<p>今回はこれらの課題を解決するために、<strong>数学的に根拠のある予算配分方法</strong>について紹介しようと思います。</p>\n\n<p>まず今回の手法を紹介するにあたり、例題がある方が話が進めやすいので以下の広告運用者さんを例に考えます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>広告運用者○○さん\n\n現在A,B,Cの３媒体で広告配信を行っています。\n\n全体のROASを高めるために予算配分を見直したいと考えています。\n\n３媒体での合計予算は3万円です。</pre>\n\n\n<p>では、実際にどのようにして最適な予算を求めるのか見ていきましょう。</p>\n\n<h1>過去の実績から各媒体の実績をシミュレーションします</h1>\n\n<p>最初に過去の実績から各媒体での予算とROASの傾向を、式で表現します。</p>\n\n<p>ここで<strong>ROASを最大化するということは、限られた予算の中で売り上げを最大化すると言い換えることができる</strong>ので、今回は <img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29\" alt=\" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)\"/> を2次回帰で近似します。</p>\n\n<p>今回の例だと媒体A,B,Cに対してそれぞれ近似式が用意できるので以下のように表現できます。(各媒体の予算を<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3\" alt=\" x_1,x_2,x_3\"/>とします)</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AA%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%0A\" alt=\" \\displaystyle\nA&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) = a_A x_1^2 + b_A x_1\n\"/>\n</div>\n\n\n\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AB%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%3D%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%0A\" alt=\" \\displaystyle\nB&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) = a_B x_2^2 + b_B x_2\n\"/>\n</div>\n\n\n\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%5Cdisplaystyle%0AC%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%3D%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A\" alt=\" \\displaystyle\nC&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) = a_C x_3^2 + b_C x_3\n\"/>\n</div>\n\n\n<p><br>\n予算が0円の時は、原点を通る(売り上げが0円)になるように切片は使用していないです。</p>\n\n<h1>ラグランジュの未定乗数法を用いて最適な予算配分を見つける</h1>\n\n<h2>ラグランジュの未定乗数法とは？</h2>\n\n<p>ラグランジュの未定乗数法とは、</p>\n\n<blockquote><p>束縛条件のもとで最適化を行うための数学的な方法である。いくつかの変数に対して、いくつかの関数の値を固定するという束縛条件のもとで、別のある1つの関数の極値を求める</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fja.wikipedia.org%2Fwiki%2F%25E3%2583%25A9%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25A5%25E3%2581%25AE%25E6%259C%25AA%25E5%25AE%259A%25E4%25B9%2597%25E6%2595%25B0%25E6%25B3%2595\" title=\"ラグランジュの未定乗数法 - Wikipedia\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B0%E3%83%A9%E3%83%B3%E3%82%B8%E3%83%A5%E3%81%AE%E6%9C%AA%E5%AE%9A%E4%B9%97%E6%95%B0%E6%B3%95\">ja.wikipedia.org</a></cite></p></blockquote>\n\n<p>少し小難しく聞こえますが、今回の例題に当てはめて考えてみます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>いくつかの変数に対して(各媒体の予算)\n\nいくつかの関数の値を固定する束縛条件(3媒体の総予算は3万円)\n\n別のある関数の極値を求める(3媒体の売り上げが最大となるポイントを求める)</pre>\n\n\n<p>ラグランジュの未定乗数法とは、上のような条件を満たす予算<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3\" alt=\" x_1,x_2,x_3\"/>を見つけてくれる手法です。</p>\n\n<p>ラグランジュの未定乗数法では、媒体A,B,Cのそれぞれの<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%28%E4%BA%88%E7%AE%97%2C%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%29\" alt=\" (&#x4E88;&#x7B97;,&#x58F2;&#x308A;&#x4E0A;&#x3052;)\"/> に対して<strong>近似式が二階微分可能である必要がある</strong>ため、今回の例では2次回帰で近似を行いました。</p>\n\n<p>また今回は、<strong>3媒体の総予算(束縛条件)が広告によって全て使用される</strong>という仮説のもとで計算しています。予算を全て使わない場合は、計算が複雑になってしまうので今回は紹介しません。</p>\n\n<h2>実際にどのように計算するのか検証します</h2>\n\n<p>まず初めに束縛条件<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3\" alt=\" x_1,x_2,x_3\"/> を定義します。今回の束縛条件は、それぞれの予算<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3\" alt=\" x_1,x_2,x_3\"/>を足し合わせたものが30000円になるということですので、以下のように書けます。</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%0Ax_1%20%2B%20x_2%20%2B%20x_3%20%3D%2030000%0A%5Ctag%7B1%7D%0A\" alt=\" \nx_1 + x_2 + x_3 = 30000\n\\tag{1}\n\"/></div>\n\n\n<p><br>\nここで式(1)を変換し、<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20g%28x_1%2Cx_2%2Cx_3%29\" alt=\" g(x_1,x_2,x_3)\"/>とおきます。</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%0Ag%28x_1%2Cx_2%2Cx_3%29%20%3D%20x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%20%3D%200%0A\" alt=\"\ng(x_1,x_2,x_3) = x_1 + x_2 + x_3 - 30000 = 0\n\"/></div>\n\n\n<p><br>\nまた、今回最大にしたい3媒体の総売り上げを<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29\" alt=\" f(x_1,x_2,x_3)\"/>と置きます。</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%20f%28x_1%2Cx_2%2Cx_3%29%20%26%3D%20A%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_1%29%20%2B%20B%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_2%29%20%2B%20C%E3%81%AE%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%28x_3%29%20%5C%5C%0A%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%0A%5Cend%7Baligned%7D%0A\" alt=\"\n\\begin{aligned}\n f(x_1,x_2,x_3) &amp;= A&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_1) + B&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_2) + C&#x306E;&#x58F2;&#x308A;&#x4E0A;&#x3052;(x_3) \\\\\n&amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3\n\\end{aligned}\n\"/></div>\n\n\n<p><br>\nここで未定乗数<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%5Clambda%20\" alt=\" \\lambda \"/>と<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20f%28x_1%2Cx_2%2Cx_3%29%2Cg%28x_1%2Cx_2%2Cx_3%29\" alt=\" f(x_1,x_2,x_3),g(x_1,x_2,x_3)\"/>を用いてラグランジュ関数<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20L\" alt=\" L\"/>を作ります。</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0AL%28x_1%2Cx_2%2Cx_3%2C%5Clambda%29%20%26%3D%20a_A%20x_1%5E2%20%2B%20b_A%20x_1%20%2B%20a_B%20x_2%5E2%20%2B%20b_B%20x_2%20%2B%20a_C%20x_3%5E2%20%2B%20b_C%20x_3%20-%20%5Clambda%20%28x_1%20%2B%20x_2%20%2B%20x_3%20-%2030000%29%0A%5Cend%7Baligned%7D%0A\" alt=\"\n\\begin{aligned}\nL(x_1,x_2,x_3,\\lambda) &amp;= a_A x_1^2 + b_A x_1 + a_B x_2^2 + b_B x_2 + a_C x_3^2 + b_C x_3 - \\lambda (x_1 + x_2 + x_3 - 30000)\n\\end{aligned}\n\"/></div>\n\n\n<p><br>\nそれぞれの変数で偏微分すると以下のようになります。</p>\n\n<div align=\"center\"><img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_1%7D%20%26%3D%202%20a_A%20x_1%20%2B%20b_A%20-%20%5Clambda%20%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_2%7D%20%26%3D%202%20a_B%20x_2%20%2B%20b_B%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20x_3%7D%20%26%3D%202%20a_C%20x_3%20%2B%20b_C%20-%20%5Clambda%20%3D%200%5C%5C%0A%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Clambda%7D%20%26%3D%20-%20x_1%20-%20x_2%20-%20x_3%20%2B%2030000%20%3D%200%5C%5C%0A%5Cend%7Baligned%7D%0A\" alt=\"\n\\begin{aligned}\n\\frac{\\partial L}{\\partial x_1} &amp;= 2 a_A x_1 + b_A - \\lambda  = 0\\\\\n\\frac{\\partial L}{\\partial x_2} &amp;= 2 a_B x_2 + b_B - \\lambda = 0\\\\\n\\frac{\\partial L}{\\partial x_3} &amp;= 2 a_C x_3 + b_C - \\lambda = 0\\\\\n\\frac{\\partial L}{\\partial \\lambda} &amp;= - x_1 - x_2 - x_3 + 30000 = 0\\\\\n\\end{aligned}\n\"/></div>\n\n\n<p><br>\nこれら4変数の4元連立方程式を説くと、予算30000円で総売り上げが最大になる予算配分<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20x_1%2Cx_2%2Cx_3\" alt=\" x_1,x_2,x_3\"/>が求まります。</p>\n\n<p>今回は、ROASを最大化するための方法を紹介しましたがCPAを最小化する場合は2次回帰式を求める際に<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%28cost%2Ccv%29\" alt=\" (cost,cv)\"/>としてcvを最大化するようにラグランジュを適応することで求めることができます。</p>\n\n<p>また今回の例では3媒体までの予算配分を計算しましたが、<strong>媒体数を増やしても計算速度が極端に遅くなることがない</strong>ところが今回の手法の良いところです。</p>\n\n<h1>この手法の課題点</h1>\n\n<p>ここまで「ネット広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分」を紹介しましたが、この手法には2つほど課題があります。</p>\n\n<p>まず一つ目が、最適予算<img src=\"https://chart.apis.google.com/chart?cht=tx&chl=%20%28x_1%2Cx_2%2Cx_3%29\" alt=\" (x_1,x_2,x_3)\"/>にマイナスの結果が得られる可能性があるということです。売り上げを最大化しようとするあまり、もともとROASが低い媒体に対しては予算を割り振らずにマイナスの予算を割り振り、そのほかのROASが高い媒体により多くの予算を割り振ろうとしてしまうことが確認できています。</p>\n\n<p>次に、媒体の周期性や外部要因を一切考慮していないということです。広告は少なからず外部要因によって成果が左右されますが、この手法では過去の実績のみを用いて最適予算を割り振るので外部要因は一切考慮されていないということに注意が必要です。</p>\n\n<h1>まとめ</h1>\n\n<p>いかがだったでしょうか。\n今回は、ラグランジュの未定乗数法を用いて複数媒体への予算配分方法を紹介しました。流石に手作業では計算できないので私はpythonで上記の流れを実装しています。</p>\n\n<p>ラグランジュの未定乗数法は、理系の方は大学の数学の講義で習っていたかもしれないです。私も大学の時に習いましたが、当時は何に使うのか一切わかりませんでした。社会人になって学生の時に学んだことが活用できると、学んだ甲斐があったと感じることができて良いです。</p>\n\n<p>最後まで読んでいただきありがとうございます。</p>\n","contentSnippet":"こんにちは　機械学習エンジニアの八百俊哉です。今回は複数媒体へ広告を出稿する際に、多くの方が悩まれるであろう「各媒体への予算配分」に関して有効な配分手法を紹介します。今回の記事で登場する広告用語媒体・・・広告の配信先や配信手法ROAS・・・広告経由で発生した売り上げを広告費用で割った値(広告の費用対効果)CPA・・・1件のコンバージョン(目標)を獲得するのにかかった広告コスト広告運用者が抱える課題とは？1つの媒体のみで運用している場合は別ですが、複数の媒体で広告配信を行っている場合は、どの媒体に対していくら予算を割り振れば良いのかわからない場合があると思います。過去の実績を元に成果が良い媒体に対して、多く予算を割り振れば良いことは理解しているものの、「どれくらい」「どの媒体から」予算を割り振れば良いのかは経験則や簡単な分析で決めている方も多いのではないでしょうか？今回はこれらの課題を解決するために、数学的に根拠のある予算配分方法について紹介しようと思います。まず今回の手法を紹介するにあたり、例題がある方が話が進めやすいので以下の広告運用者さんを例に考えます。広告運用者○○さん現在A,B,Cの３媒体で広告配信を行っています。全体のROASを高めるために予算配分を見直したいと考えています。３媒体での合計予算は3万円です。では、実際にどのようにして最適な予算を求めるのか見ていきましょう。過去の実績から各媒体の実績をシミュレーションします最初に過去の実績から各媒体での予算とROASの傾向を、式で表現します。ここでROASを最大化するということは、限られた予算の中で売り上げを最大化すると言い換えることができるので、今回は  を2次回帰で近似します。今回の例だと媒体A,B,Cに対してそれぞれ近似式が用意できるので以下のように表現できます。(各媒体の予算をとします)ラグランジュの未定乗数法を用いて最適な予算配分を見つけるラグランジュの未定乗数法とは？ラグランジュの未定乗数法とは、束縛条件のもとで最適化を行うための数学的な方法である。いくつかの変数に対して、いくつかの関数の値を固定するという束縛条件のもとで、別のある1つの関数の極値を求めるja.wikipedia.org少し小難しく聞こえますが、今回の例題に当てはめて考えてみます。いくつかの変数に対して(各媒体の予算)いくつかの関数の値を固定する束縛条件(3媒体の総予算は3万円)別のある関数の極値を求める(3媒体の売り上げが最大となるポイントを求める)ラグランジュの未定乗数法とは、上のような条件を満たす予算を見つけてくれる手法です。ラグランジュの未定乗数法では、媒体A,B,Cのそれぞれの に対して近似式が二階微分可能である必要があるため、今回の例では2次回帰で近似を行いました。また今回は、3媒体の総予算(束縛条件)が広告によって全て使用されるという仮説のもとで計算しています。予算を全て使わない場合は、計算が複雑になってしまうので今回は紹介しません。実際にどのように計算するのか検証しますまず初めに束縛条件 を定義します。今回の束縛条件は、それぞれの予算を足し合わせたものが30000円になるということですので、以下のように書けます。ここで式(1)を変換し、とおきます。また、今回最大にしたい3媒体の総売り上げをと置きます。ここで未定乗数とを用いてラグランジュ関数を作ります。それぞれの変数で偏微分すると以下のようになります。これら4変数の4元連立方程式を説くと、予算30000円で総売り上げが最大になる予算配分が求まります。今回は、ROASを最大化するための方法を紹介しましたがCPAを最小化する場合は2次回帰式を求める際にとしてcvを最大化するようにラグランジュを適応することで求めることができます。また今回の例では3媒体までの予算配分を計算しましたが、媒体数を増やしても計算速度が極端に遅くなることがないところが今回の手法の良いところです。この手法の課題点ここまで「ネット広告の複数媒体に対するCPA最小化・ROAS最大化となる予算配分」を紹介しましたが、この手法には2つほど課題があります。まず一つ目が、最適予算にマイナスの結果が得られる可能性があるということです。売り上げを最大化しようとするあまり、もともとROASが低い媒体に対しては予算を割り振らずにマイナスの予算を割り振り、そのほかのROASが高い媒体により多くの予算を割り振ろうとしてしまうことが確認できています。次に、媒体の周期性や外部要因を一切考慮していないということです。広告は少なからず外部要因によって成果が左右されますが、この手法では過去の実績のみを用いて最適予算を割り振るので外部要因は一切考慮されていないということに注意が必要です。まとめいかがだったでしょうか。今回は、ラグランジュの未定乗数法を用いて複数媒体への予算配分方法を紹介しました。流石に手作業では計算できないので私はpythonで上記の流れを実装しています。ラグランジュの未定乗数法は、理系の方は大学の数学の講義で習っていたかもしれないです。私も大学の時に習いましたが、当時は何に使うのか一切わかりませんでした。社会人になって学生の時に学んだことが活用できると、学んだ甲斐があったと感じることができて良いです。最後まで読んでいただきありがとうございます。","link":"https://developer.feedforce.jp/entry/2021/05/13/093842","isoDate":"2021-05-17T00:38:42.000Z","dateMiliSeconds":1621211922000,"imageUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/4268819/1588226000876991","authorName":"feedforce"},{"title":"ふりかえりカンファレンスのスタッフをやりました！","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/pokotyamu/\">id:pokotyamu</a> です！\n最近は、モンハンライズにハマっています！ハンマー担いでブンブンしてます！</p>\n\n<p>4月16日(土)に行われた「ふりかえりカンファレンス」のスタッフをやりました！</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/p/pokotyamu/20210416/20210416155303.png\" alt=\"f:id:pokotyamu:20210416155303p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>今回はそこでの学びや感じたことを社内勉強会で発表したので、スライドとコメントをまとめます。</p>\n\n<h2>FFTT 発表資料</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"1f772bfe5abd4fa28ff738df3a5e76a2\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h2>勉強会の感想コメント</h2>\n\n<blockquote><p> なんのためにふりかえりやってるの？</p></blockquote>\n\n<p>明日の自分やチームを1歩でも楽しくなるためにやってほしいですね！\n連続したサイクルの中にふりかえりを組み込むことで、安全に転んで、次の1歩を早く出せるようになると思います！</p>\n\n<blockquote><p>オンラインセミナーは当日参加が多い\n結構人数集まったようなので準備とか大変そう</p></blockquote>\n\n<p>場所の制約がなくなったのが非常に大きいですね〜！\n国内・国外関係なく、どこでもいけるのが本当に便利！</p>\n\n<blockquote><p>振り返り手法ってあんなにたくさんあるのだなぁ\n振り返りの手法も多いようなのでどのタイミングで何を使うのが適切かを考えるの難しそう\n会社やチームよって向き不向きがありそうだけど、選ぶには知らないといけないので専門的な人がいる意味がよく分かる</p></blockquote>\n\n<p>そーなんですよね。\n次の Action を決めたい時や、関係構築したい時など、用途に合わせてやるのがいいと思います！\nもちろん KPT も素晴らしい手法なので、たまに気分を変えてみるみたいな感じでどうぞ！</p>\n\n<blockquote><p>振り返りとの因果関係を感じられる強い人やチームの実例を見たら、もう少しイメージが付くのかな\nと思っていたが、21卒の方の日報をザッピングしていたら、振り返りが役に立った、楽しいという風に書かれていた</p></blockquote>\n\n<p>今年は特に楽しいにフォーカスしてふりかえりをしているのもあると思います！</p>\n\n<blockquote><p>オンラインカンファレンスのスタッフの話って結構レアな気がするので興味深かった</p></blockquote>\n\n<p>楽しいのでぜひぜひ！</p>\n\n<h2>感想</h2>\n\n<p>私は、初めてカンファレンスのスタッフをやらせてもらったのですが、非常に楽しかったです！\n他の人の感想やブログレポートを見るのも、それそれ！その言葉待ってた！という感じでいつもの一般参加とは違う感覚で聞くことができました！</p>\n\n<p>今回のスタッフを経験したことで、「楽しくふりかえる」の意味を体で感じることができたと思います。もちろん当日の発表もどれも素晴らしくてそれも含みで楽しかったところではありましたが ☺️\n気軽に試す、実験してみるを最近のふりかえりでも挑戦中です。</p>\n\n<p>また、オンラインカンファレンスということもあり、夜の2次会が3時ぐらいまで盛り上がっていたのも楽しかったポイントでした。\n新しいつながりも持てたので、社内の知見をどんどん外に発信して自分の魅力を高めていければと思います。</p>\n\n<p>改めて、スタッフに誘っていただいた <a href=\"https://twitter.com/viva_tweet_x\">@viva_tweet_x</a> さんに改めて感謝です！ありがとうございました！これからもよろしくおねがいします！</p>\n","contentSnippet":"こんにちは id:pokotyamu です！最近は、モンハンライズにハマっています！ハンマー担いでブンブンしてます！4月16日(土)に行われた「ふりかえりカンファレンス」のスタッフをやりました！今回はそこでの学びや感じたことを社内勉強会で発表したので、スライドとコメントをまとめます。FFTT 発表資料勉強会の感想コメント なんのためにふりかえりやってるの？明日の自分やチームを1歩でも楽しくなるためにやってほしいですね！連続したサイクルの中にふりかえりを組み込むことで、安全に転んで、次の1歩を早く出せるようになると思います！オンラインセミナーは当日参加が多い結構人数集まったようなので準備とか大変そう場所の制約がなくなったのが非常に大きいですね〜！国内・国外関係なく、どこでもいけるのが本当に便利！振り返り手法ってあんなにたくさんあるのだなぁ振り返りの手法も多いようなのでどのタイミングで何を使うのが適切かを考えるの難しそう会社やチームよって向き不向きがありそうだけど、選ぶには知らないといけないので専門的な人がいる意味がよく分かるそーなんですよね。次の Action を決めたい時や、関係構築したい時など、用途に合わせてやるのがいいと思います！もちろん KPT も素晴らしい手法なので、たまに気分を変えてみるみたいな感じでどうぞ！振り返りとの因果関係を感じられる強い人やチームの実例を見たら、もう少しイメージが付くのかなと思っていたが、21卒の方の日報をザッピングしていたら、振り返りが役に立った、楽しいという風に書かれていた今年は特に楽しいにフォーカスしてふりかえりをしているのもあると思います！オンラインカンファレンスのスタッフの話って結構レアな気がするので興味深かった楽しいのでぜひぜひ！感想私は、初めてカンファレンスのスタッフをやらせてもらったのですが、非常に楽しかったです！他の人の感想やブログレポートを見るのも、それそれ！その言葉待ってた！という感じでいつもの一般参加とは違う感覚で聞くことができました！今回のスタッフを経験したことで、「楽しくふりかえる」の意味を体で感じることができたと思います。もちろん当日の発表もどれも素晴らしくてそれも含みで楽しかったところではありましたが ☺️気軽に試す、実験してみるを最近のふりかえりでも挑戦中です。また、オンラインカンファレンスということもあり、夜の2次会が3時ぐらいまで盛り上がっていたのも楽しかったポイントでした。新しいつながりも持てたので、社内の知見をどんどん外に発信して自分の魅力を高めていければと思います。改めて、スタッフに誘っていただいた @viva_tweet_x さんに改めて感謝です！ありがとうございました！これからもよろしくおねがいします！","link":"https://developer.feedforce.jp/entry/2021/04/19/141153","isoDate":"2021-04-19T05:11:53.000Z","dateMiliSeconds":1618809113000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/p/pokotyamu/20210416/20210416155303.png","authorName":"feedforce"},{"title":" 夜間光データから土地価格を予測 コンペの参加記録","content":"<p>こんにちは\n株式会社フィードフォース2020年入社の機械学習エンジニア\n<a href=\"https://twitter.com/feed_yao\">八百　俊哉</a>と申します。</p>\n\n<p>今回は、solafuneで開催された「<a href=\"https://solafune.com/#/competitions/f03f39cc-597b-4819-b1a5-41479d4b73d6\">夜間光データから土地価格を予測</a>」という機械学習コンペに参加したので工夫した点や反省点などを紹介します。</p>\n\n<p>コンペ参加の目標設定としては、「賞金獲得！！（4位以内）」を設定していましたが、36位/201人中と目標達成できませんでした。残念な結果に終わってしまいましたが、多くのことを学ぶことができました。</p>\n\n<h1>参加経緯</h1>\n\n<p>私は、2020年10月から2021年2月ごろまで顧客の課題解決のために機械学習を応用する方法を学ぶためにAI Questというイベントに参加していました。そのイベントをきっかけに私は精度の高いモデルや良い特徴量を作成することに興味を持ちました。</p>\n\n<p>そこでより多くのコンペに参加することで精度を上げるためのノウハウを身に付けたいと思ったことが今回のコンペに参加したきっかけです。</p>\n\n<p>また、今回参加したコンペは与えられている特徴量が4つしかないので、初心者が参加しやすいコンペだったということも魅力的なポイントでした。</p>\n\n<h1>課題と与えられているデータ</h1>\n\n<p>課題としては、「夜間光データを元に土地価格を予測するアルゴリズムを開発する」というものです。\n使用可能なデータとしては、以下のものが与えられました。</p>\n\n<ul>\n<li>地域ごとのデータ・・・地域固有のID</li>\n<li>年代・・・1992~2013年まで</li>\n<li>土地の平均価格（目的変数）・・・1992~2013年まで</li>\n<li>夜間光量の平均値・・・0~63までのレンジでその地域の平均光量</li>\n<li>夜間光量の合計値・・・その地域の合計光量</li>\n</ul>\n\n\n<h1>全体構成</h1>\n\n<p>今回最終submitとして選択したモデルの全体構成は以下です。\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210409/20210409155716.png\" alt=\"f:id:newton800:20210409155716p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>前処理に関して</h1>\n\n<h2>集約的特徴量について</h2>\n\n<p>集約的特徴量の作成にあたっては<a href=\"https://twitter.com/mst_8823\">masato8823 (@mst_8823) | Twitter</a>さんがBaseLineとして公開されていた以下のものを使用しました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fzenn.dev%2Fmst8823%2Farticles%2Fcd40cb971f702e\" title=\"[solafune] 夜間光データから土地価格を予測 BaseLine\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://zenn.dev/mst8823/articles/cd40cb971f702e\">zenn.dev</a></cite></p>\n\n<p>作成した特徴量としては以下です。</p>\n\n<table>\n<thead>\n<tr>\n<th>    </th>\n<th>    </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  面積  </td>\n<td>  夜間光量の合計値/夜間光量の平均値を行い面積を算出した </td>\n</tr>\n<tr>\n<td>   PlaceID,Yearごとの統計情報 </td>\n<td>  PlaceID,Yearをキーとして平均光量、合計光量、面積のmin,max,median,mean,std,max-min,q75-q25を算出した  </td>\n</tr>\n<tr>\n<td> PlaceID をキーにしたグループ内差分</td>\n<td>  平均光量、合計光量の年ごとの差分を算出した</td>\n</tr>\n<tr>\n<td>PlaceID をキーにしたグループ内シフト </td>\n<td> 平均光量、合計光量の年ごとの値をシフトした</td>\n</tr>\n<tr>\n<td>ピボットテーブルを用いた特徴量</td>\n<td>index=PlaceID,columns=Yearとして平均光量、合計光量、面積のピボットテーブルを作成し、PCAで次元削減したものを算出した</td>\n</tr>\n<tr>\n<td>PlaceIDをキーにしたグループ内相関係数</td>\n<td>PlaceIDごとにデータを集約しYearと平均光量、合計光量、面積との相関係数を算出した</td>\n</tr>\n<tr>\n<td>平均光量が63であった回数</td>\n<td>平均光量の最大値が63であることから平均光量が63である数を追加した</td>\n</tr>\n</tbody>\n</table>\n\n\n<h2>Area特徴量について</h2>\n\n<p>先ほど<i>集約的特徴量について</i>で面積の求め方について書きました。面積=合計光量/平均光量で算出しています。ここで求められる<b>土地の面積は、年が変化しようと変化しないと思われますが、実際のデータを確認すると年が変化すると面積も変化していました。</b></p>\n\n<p>そこで<b>合計光量/平均光量より算出された面積をPlaceIDをキーとして平均を取ったものを新たな面積としました。</b>\n新たな面積が求まると <b>新たな合計光量 =  平均光量×新たな面積,新たな平均面積 = 合計光量/新たな面積</b> が求まります。</p>\n\n<p>これらより求まる新たな合計光量、新たな平均光量、新たな面積を元々の合計光量、平均光量、面積と置き換えて集約的特徴量の作成を行いました。</p>\n\n<h2>gplearnについて</h2>\n\n<p>上で紹介した集約的特徴量とArea特徴量のそれぞれに対して<a href=\"https://gplearn.readthedocs.io/en/stable/\">gplearn</a>というライブラリを用いて新たな特徴量を作成しました。このライブラリは遺伝的アルゴリズムにより目的変数をよく表している変数を作成してくれるものです。</p>\n\n<p>このライブラリを用いて新しい特徴量を10個,25個,50個作成し、元々の集約的特徴量、Area特徴量と組み合わせてそれぞれに対して予測を行いました。</p>\n\n<p>gplearnでの特徴量作成については以下のサイトが参考になります。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FHatomugi%2Fitems%2F3bb16ed9c6bdc15f1e00\" title=\"遺伝的アルゴリズムを使って特徴量エンジニアリングしてみた - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/Hatomugi/items/3bb16ed9c6bdc15f1e00\">qiita.com</a></cite></p>\n\n<h1>モデル構築に関して</h1>\n\n<p>モデルの構築としてはgroup k fold(fold=5)でStackingのモデルを採用しました。</p>\n\n<p>1層目はrandom forest,lgb,multi regression,catboost,xgboostに加えてAutoMLの<a href=\"https://auto.gluon.ai/stable/index.html\">Autogluon</a>を採用しました。</p>\n\n<p>Autogluonは以下のようにデータを渡すだけで、11個のモデルを検証し最後に出力結果を重量平均で作成してくれます。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>\npredictor = TabularPredictor(\n                                label=<span class=\"synConstant\">'label'</span>,\n                                problem_type=<span class=\"synConstant\">'regression'</span>, \n                                eval_metric=<span class=\"synConstant\">'root_mean_squared_error'</span>, <span class=\"synComment\"># 評価指標</span>\n)\n\nX_train[<span class=\"synConstant\">'label'</span>] = y_train\nX_test[<span class=\"synConstant\">'label'</span>] = y_test\n\npredictor.fit(\n            train_data=X_train,\n            tuning_data=X_test, <span class=\"synComment\"># これを渡さない場合はランダムスプリット</span>\n            time_limit=<span class=\"synIdentifier\">None</span>, <span class=\"synComment\"># おおよその時間制限を設けられる</span>\n)\n</pre>\n\n\n<p>そして2層目は1層目でも採用しているAutogluonで出力を作成しました。</p>\n\n<h1>感想・反省点</h1>\n\n<p>Public Scoreの時点では6位と賞金獲得の可能性が十分にありましたが、Private Scoreでは36位と大幅にshake downしてしまいました。今回目標達成できなかった理由としては以下の2つが考えられます。</p>\n\n<p><b>1 CVの値とPublic ScoreからPrivate Scoreについて考えられなかった\n</b></p>\n\n<p>1つ目の要因としては、Public Scoreが下がることのみを考えてモデルの改善・特徴量の作成を行っていたということです。その時CVの値とPublic Scoreをどこかに記録しておけばよかったのですが、どこにも保存せずPublic Scoreが下がることが最も良いことであると捉えていました。実際は、CVが下がったモデル・特徴量においてPublic Scoreも同じように下がることが望ましく、その記録を取っておくべきでした。</p>\n\n<p>実際これまで提出していたファイルの中にPrivate Scoreが0.48774というものがあり、このファイルを最終提出としておけば3位に入ることができていました。しっかりとPrivate Scoreに効いているであろう提出ファイルが選べるようにCVとPublic Scoreに着目できるようにならないといけないと感じました。</p>\n\n<p><b>2 gplearnを行う位置が悪かった\n</b></p>\n\n<p>2つめは、group k foldを行う前にgplearnを行ったことによって、validationの目的変数が確認できる状態でgplearnが特徴量作成を行ってたことです。これは本来見ることができないデータを確認しながらデータ生成を行っていることになるので過学習を引き起こす可能性がありました。\n　\n　<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413095008.png\" alt=\"f:id:newton800:20210413095008p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>あるべき姿としては、group k foldでtrainをtrain,validationに分割した後にtrainのみのデータを用いてgplearnをfitさせるべきだったと思います。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210413/20210413112402.png\" alt=\"f:id:newton800:20210413112402p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>次回コンペでは</h1>\n\n<p>今回のコンペを通じて集約的特徴量の作成方法、Stackingの実装方法、gplearnの実行位置、CVとPublic Scoreの関係性の重要度について学ぶことができました。\nテーブルコンペ において有効な手法を多く学ぶことができたので、次回参加するコンペでは賞金獲得を目標に頑張ります！！</p>\n","contentSnippet":"こんにちは株式会社フィードフォース2020年入社の機械学習エンジニア八百　俊哉と申します。今回は、solafuneで開催された「夜間光データから土地価格を予測」という機械学習コンペに参加したので工夫した点や反省点などを紹介します。コンペ参加の目標設定としては、「賞金獲得！！（4位以内）」を設定していましたが、36位/201人中と目標達成できませんでした。残念な結果に終わってしまいましたが、多くのことを学ぶことができました。参加経緯私は、2020年10月から2021年2月ごろまで顧客の課題解決のために機械学習を応用する方法を学ぶためにAI Questというイベントに参加していました。そのイベントをきっかけに私は精度の高いモデルや良い特徴量を作成することに興味を持ちました。そこでより多くのコンペに参加することで精度を上げるためのノウハウを身に付けたいと思ったことが今回のコンペに参加したきっかけです。また、今回参加したコンペは与えられている特徴量が4つしかないので、初心者が参加しやすいコンペだったということも魅力的なポイントでした。課題と与えられているデータ課題としては、「夜間光データを元に土地価格を予測するアルゴリズムを開発する」というものです。使用可能なデータとしては、以下のものが与えられました。地域ごとのデータ・・・地域固有のID年代・・・1992~2013年まで土地の平均価格（目的変数）・・・1992~2013年まで夜間光量の平均値・・・0~63までのレンジでその地域の平均光量夜間光量の合計値・・・その地域の合計光量全体構成今回最終submitとして選択したモデルの全体構成は以下です。前処理に関して集約的特徴量について集約的特徴量の作成にあたってはmasato8823 (@mst_8823) | TwitterさんがBaseLineとして公開されていた以下のものを使用しました。zenn.dev作成した特徴量としては以下です。          面積    夜間光量の合計値/夜間光量の平均値を行い面積を算出した    PlaceID,Yearごとの統計情報   PlaceID,Yearをキーとして平均光量、合計光量、面積のmin,max,median,mean,std,max-min,q75-q25を算出した   PlaceID をキーにしたグループ内差分  平均光量、合計光量の年ごとの差分を算出したPlaceID をキーにしたグループ内シフト  平均光量、合計光量の年ごとの値をシフトしたピボットテーブルを用いた特徴量index=PlaceID,columns=Yearとして平均光量、合計光量、面積のピボットテーブルを作成し、PCAで次元削減したものを算出したPlaceIDをキーにしたグループ内相関係数PlaceIDごとにデータを集約しYearと平均光量、合計光量、面積との相関係数を算出した平均光量が63であった回数平均光量の最大値が63であることから平均光量が63である数を追加したArea特徴量について先ほど集約的特徴量についてで面積の求め方について書きました。面積=合計光量/平均光量で算出しています。ここで求められる土地の面積は、年が変化しようと変化しないと思われますが、実際のデータを確認すると年が変化すると面積も変化していました。そこで合計光量/平均光量より算出された面積をPlaceIDをキーとして平均を取ったものを新たな面積としました。新たな面積が求まると 新たな合計光量 =  平均光量×新たな面積,新たな平均面積 = 合計光量/新たな面積 が求まります。これらより求まる新たな合計光量、新たな平均光量、新たな面積を元々の合計光量、平均光量、面積と置き換えて集約的特徴量の作成を行いました。gplearnについて上で紹介した集約的特徴量とArea特徴量のそれぞれに対してgplearnというライブラリを用いて新たな特徴量を作成しました。このライブラリは遺伝的アルゴリズムにより目的変数をよく表している変数を作成してくれるものです。このライブラリを用いて新しい特徴量を10個,25個,50個作成し、元々の集約的特徴量、Area特徴量と組み合わせてそれぞれに対して予測を行いました。gplearnでの特徴量作成については以下のサイトが参考になります。qiita.comモデル構築に関してモデルの構築としてはgroup k fold(fold=5)でStackingのモデルを採用しました。1層目はrandom forest,lgb,multi regression,catboost,xgboostに加えてAutoMLのAutogluonを採用しました。Autogluonは以下のようにデータを渡すだけで、11個のモデルを検証し最後に出力結果を重量平均で作成してくれます。'label',                                problem_type='regression',                                 eval_metric='root_mean_squared_error', # 評価指標)X_train['label'] = y_trainX_test['label'] = y_testpredictor.fit(            train_data=X_train,            tuning_data=X_test, # これを渡さない場合はランダムスプリット            time_limit=None, # おおよその時間制限を設けられる)そして2層目は1層目でも採用しているAutogluonで出力を作成しました。感想・反省点Public Scoreの時点では6位と賞金獲得の可能性が十分にありましたが、Private Scoreでは36位と大幅にshake downしてしまいました。今回目標達成できなかった理由としては以下の2つが考えられます。1 CVの値とPublic ScoreからPrivate Scoreについて考えられなかった1つ目の要因としては、Public Scoreが下がることのみを考えてモデルの改善・特徴量の作成を行っていたということです。その時CVの値とPublic Scoreをどこかに記録しておけばよかったのですが、どこにも保存せずPublic Scoreが下がることが最も良いことであると捉えていました。実際は、CVが下がったモデル・特徴量においてPublic Scoreも同じように下がることが望ましく、その記録を取っておくべきでした。実際これまで提出していたファイルの中にPrivate Scoreが0.48774というものがあり、このファイルを最終提出としておけば3位に入ることができていました。しっかりとPrivate Scoreに効いているであろう提出ファイルが選べるようにCVとPublic Scoreに着目できるようにならないといけないと感じました。2 gplearnを行う位置が悪かった2つめは、group k foldを行う前にgplearnを行ったことによって、validationの目的変数が確認できる状態でgplearnが特徴量作成を行ってたことです。これは本来見ることができないデータを確認しながらデータ生成を行っていることになるので過学習を引き起こす可能性がありました。　　あるべき姿としては、group k foldでtrainをtrain,validationに分割した後にtrainのみのデータを用いてgplearnをfitさせるべきだったと思います。次回コンペでは今回のコンペを通じて集約的特徴量の作成方法、Stackingの実装方法、gplearnの実行位置、CVとPublic Scoreの関係性の重要度について学ぶことができました。テーブルコンペ において有効な手法を多く学ぶことができたので、次回参加するコンペでは賞金獲得を目標に頑張ります！！","link":"https://developer.feedforce.jp/entry/2021/04/13/174808","isoDate":"2021-04-13T08:48:08.000Z","dateMiliSeconds":1618303688000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210409/20210409155716.png","authorName":"feedforce"},{"title":"エンジニア向けミートアップを開催します！","content":"<p>こんにちは。人事チームからエンジニアミートアップについてお知らせです。</p>\n\n<p>3月26日（金）19：00から、エンジニア向けのミートアップを開催することになりました！\n選考とは関係ないので、純粋に「どんなエンジニアがいるかみてみたい」「会社の雰囲気を知りたい」\nという方もぜひご参加いただけたら嬉しいです。</p>\n\n<p>初回のLT登壇者は <a href=\"https://twitter.com/daido1976\">@daido1976</a>です！</br>\n詳しくは下記記事をご覧ください。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedia.feedforce.jp%2Fn%2Fn53b8be5eae4a\" title=\"現場エンジニアと気軽に話せる！エンジニアミートアップを開催します｜フィードフォースのnote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://media.feedforce.jp/n/n53b8be5eae4a\">media.feedforce.jp</a></cite></p>\n\n<p>ご参加お待ちしています！</p>\n","contentSnippet":"こんにちは。人事チームからエンジニアミートアップについてお知らせです。3月26日（金）19：00から、エンジニア向けのミートアップを開催することになりました！選考とは関係ないので、純粋に「どんなエンジニアがいるかみてみたい」「会社の雰囲気を知りたい」という方もぜひご参加いただけたら嬉しいです。初回のLT登壇者は @daido1976です！media.feedforce.jpご参加お待ちしています！","link":"https://developer.feedforce.jp/entry/2021/03/15/113230","isoDate":"2021-03-15T02:32:30.000Z","dateMiliSeconds":1615775550000,"imageUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/4268819/1588226000876991","authorName":"feedforce"},{"title":"Self-Attentionを用いてGoogle 無料リスティングの「拡張リスティングの不承認」に挑んだ話","content":"<p>こんにちは\n株式会社フィードフォース2020年入社の機械学習エンジニア\n<a href=\"https://twitter.com/feed_yao\">&#x516B;&#x767E;&#x4FCA;&#x54C9;@Feedforce (@feed_yao) | Twitter</a>と申します。</p>\n\n<p>最近はロードバイク にはまっており、ロードバイク購入後一ヶ月で一日100km走行に成功しました。</p>\n\n<p>今回、<b>Google無料リスティングで不承認アカウントが発生する要因を調査する分析</b>を行いました。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Google-無料リスティングとは\">Google 無料リスティングとは？</a></li>\n    <li><a href=\"#なぜ今回分析が必要とされたのか\">なぜ今回分析が必要とされたのか？</a></li>\n    <li><a href=\"#結果と考察\">結果と考察</a></li>\n    <li><a href=\"#Self-Attentionを採用した理由\">Self-Attentionを採用した理由</a></li>\n    <li><a href=\"#実装手順\">実装手順</a><ul>\n            <li><a href=\"#使用データのフォーマット\">使用データのフォーマット</a></li>\n            <li><a href=\"#必要ライブラリのインストールインポート\">必要ライブラリのインストール・インポート</a></li>\n            <li><a href=\"#データの前処理\">データの前処理</a></li>\n            <li><a href=\"#学習\">学習</a></li>\n            <li><a href=\"#評価出力\">評価・出力</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h1 id=\"Google-無料リスティングとは\">Google 無料リスティングとは？</h1>\n\n<p>2020年10月にGoogleから公開された<b>Googleショッピングタブに無料で商品掲載ができる「無料リスティング」のことです。</b></p>\n\n<p>Google 検索にサイトがインデックス登録されても料金が発生しないのと同様に、EC事業者は無料で利用可能になりました。\nGoogle 無料リスティングについての詳細は以下のサイトが参考になります。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flab.ecbooster.jp%2Fabout-google-free-listings%2F\" title=\"Googleに無料で自社商品が掲載できる「無料リスティング」とは？\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://lab.ecbooster.jp/about-google-free-listings/\">lab.ecbooster.jp</a></cite></p>\n\n<h1 id=\"なぜ今回分析が必要とされたのか\">なぜ今回分析が必要とされたのか？</h1>\n\n<p>無料リスティングでは自社製品を無料でGoogleに掲載できます。\nしかしながら、課題として<b>一部商品掲載が不承認となるケースが見受けられました。</b></p>\n\n<p>不承認となってしまうと自社商品の掲載ができていない状況が発生しています。不承認となる理由としては、「Googleが定める基準に対して、登録している商品データの属性数が足りない、内容が仕様に沿っていない場合、商品データの品質が低いため不承認になり、Googleの検索結果に表示させることができません。」とされています。</p>\n\n<p>これらを<b>定量的に分析することで不承認となる理由を見つけ出す試み</b>が始まりました。</p>\n\n<p>そのため今回の分析の目的は、<b>商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する</b>ことです。</p>\n\n<h1 id=\"結果と考察\">結果と考察</h1>\n\n<p>今回の目的である「商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する」は、<b>達成できませんでした。</b></p>\n\n<p>目的が達成できなかった理由として考えられる要因は、<b>承認・不承認は商品のtitle,descriptionだけでは判断されていない</b>ということです。商品ごとのtitle,descriptionのみで承認・不承認が判断されているのではなく、商品データ全体またはアカウント全体のデータを総合的に見て、判断されている可能性が高いということがわかりました。</p>\n\n<p>承認・不承認予測のAccuracyとしては5割〜６割ほどで、承認・不承認を予測するという点でも低い精度となってしまいました。</p>\n\n<h1 id=\"Self-Attentionを採用した理由\">Self-Attentionを採用した理由</h1>\n\n<p>今回はSelf-Attentionという手法を用いてこの課題解決を試みました。</p>\n\n<p>Self-Attentionとは、<b>文章全体で重要とされるキーワードが予測結果と一緒に確認できるようになる</b>手法です。</p>\n\n<p>Self-Attentionの仕組みについては詳しく書かれている方が多くいますので、ここでは割愛します。</p>\n\n<p>最初は、word2vecを用いて文章特徴量を作成し、承認・不承認を予測して終了という一連の流れを想定していました。</p>\n\n<p>しかし、<b>今回の目的は</b>承認・不承認を予測したいわけではなく、<b>どの単語が承認・不承認と関わっているのかを確認し、不承認となっているアカウントを承認にすること</b>です。\nもし仮にword2vecを用いた手法を採用すると予測結果の要因や理由が明確にならないので、不承認のアカウントを承認に改善する施策を考えることはできません。</p>\n\n<p>そのため今回は、<b>Self-Attentionを用いて分類モデルを構築することで、承認・不承認の要因が文章内のどこにあるのかを分析する</b>ために、この手法を選択しました。</p>\n\n<h1 id=\"実装手順\">実装手順</h1>\n\n<p>本来の目的は達成できませんでしたが、Self-Attentionでの分類モデルの実装はできましたので、実装方法を記載します。\n今回はkerasを用いてSelf-Attention + LSTMで予測を行いました。\n検証環境はGoogle Colaboratoryを想定しています。</p>\n\n<h2 id=\"使用データのフォーマット\">使用データのフォーマット</h2>\n\n<p>今回使用できるデータとしては以下のようなデータになっています。</p>\n\n<p>各アカウント・各商品ごとに商品IDが割り振られており、それぞれの商品にtitle,descriptionが割り振られています。</p>\n\n<p><b>承認・不承認のラベルは、アカウントごとに付加されています。\n</b></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210224/20210224172435.png\" alt=\"f:id:newton800:20210224172435p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2 id=\"必要ライブラリのインストールインポート\">必要ライブラリのインストール・インポート</h2>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>!pip install text_vectorian\n!pip install mojimoji\n!apt install aptitude\n!aptitude install mecab libmecab-dev mecab-ipadic-utf8 git make curl xz-utils <span class=\"synIdentifier\">file</span> -y\n!pip install mecab-python3==<span class=\"synConstant\">0.7</span>\n</pre>\n\n\n\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synPreProc\">import</span> pandas <span class=\"synStatement\">as</span> pd\n<span class=\"synPreProc\">import</span> numpy <span class=\"synStatement\">as</span> np\n<span class=\"synPreProc\">import</span> keras\n<span class=\"synPreProc\">import</span> os\n<span class=\"synPreProc\">import</span> warnings\nwarnings.simplefilter(<span class=\"synConstant\">'ignore'</span>)\n<span class=\"synPreProc\">import</span> subprocess\n<span class=\"synPreProc\">import</span> mojimoji\n<span class=\"synPreProc\">import</span> re\n<span class=\"synPreProc\">import</span> MeCab\n<span class=\"synPreProc\">import</span> matplotlib.pyplot <span class=\"synStatement\">as</span> plt\n\n<span class=\"synPreProc\">from</span> keras.layers <span class=\"synPreProc\">import</span> Dense, Dropout, LSTM, Embedding, BatchNormalization\n<span class=\"synPreProc\">from</span> keras.layers.wrappers <span class=\"synPreProc\">import</span> Bidirectional\n<span class=\"synPreProc\">from</span> keras.callbacks <span class=\"synPreProc\">import</span> EarlyStopping, ModelCheckpoint\n<span class=\"synPreProc\">from</span> keras <span class=\"synPreProc\">import</span> Input, Model, utils\n<span class=\"synPreProc\">from</span> keras.preprocessing.sequence <span class=\"synPreProc\">import</span> pad_sequences\n<span class=\"synPreProc\">from</span> keras.callbacks <span class=\"synPreProc\">import</span> EarlyStopping\n\n<span class=\"synPreProc\">from</span> text_vectorian <span class=\"synPreProc\">import</span> SentencePieceVectorian\n<span class=\"synPreProc\">from</span> keras_self_attention <span class=\"synPreProc\">import</span> SeqSelfAttention\n<span class=\"synPreProc\">from</span> sklearn.model_selection <span class=\"synPreProc\">import</span> train_test_split\n<span class=\"synPreProc\">from</span> sklearn.metrics <span class=\"synPreProc\">import</span> classification_report\n</pre>\n\n\n<h2 id=\"データの前処理\">データの前処理</h2>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synComment\"># データの読み込み</span>\napp = pd.read_csv(<span class=\"synConstant\">'data/app.csv'</span>) <span class=\"synComment\"># 承認データ</span>\ndisapp = pd.read_csv(<span class=\"synConstant\">'data/disapp.csv'</span>) <span class=\"synComment\"># 不承認データ</span>\n\napp[<span class=\"synConstant\">'target'</span>] = <span class=\"synConstant\">'app'</span> <span class=\"synComment\"># targetにlabelを代入する</span>\ndisapp[<span class=\"synConstant\">'target'</span>] = <span class=\"synConstant\">'disapp'</span>\n\n<span class=\"synComment\"># 今回は、titleとdescriptionを用いて予測するので、それら二つの変数を一つにまとめる</span>\napp[<span class=\"synConstant\">'sentence'</span>] = app[<span class=\"synConstant\">'title'</span>] + app[<span class=\"synConstant\">'description'</span>] \ndisapp[<span class=\"synConstant\">'sentence'</span>] = disapp[<span class=\"synConstant\">'title'</span>] + disapp[<span class=\"synConstant\">'description'</span>]\n\n<span class=\"synComment\"># これまで別々に処理していたappとdisappをまとめてdfとする</span>\ndf = app.append(disapp)\n</pre>\n\n\n<p>今回のデータは特殊で、承認・不承認は商品ごとについているラベルではなくアカウントと紐づいたラベルとなっています。それらを各商品と承認・不承認が紐づいているとして各商品ごとに予測することを行ってます。</p>\n\n<p>ここで注意が必要なのは、データの分割方法です。<b>アカウントを無視してデータを分割してしまうとリークを起こす可能性があります</b>（リークとは、本来予測では使用できないデータが学習時に入ってしまっていることです）。</p>\n\n<p><b>そのため同じアカウントのデータが訓練データ、検証データ、テストデータに渡って存在しないようにしなければなりません</b>。</p>\n\n<p>例えば、アカウントAの商品データは全て訓練データとする,アカウントBの商品データは全てテストデータにするといったようなことを意味しています。</p>\n\n<p>アカウントごとにデータを分割するには、各アカウントごとの商品数がある程度同じである方がlabelが不均衡にならないと考え、データ数を揃える処理を施しました。\n（これらはGroupKFoldを使用すれば解決できると考えられますが、分析実施時はGroupKFoldを知らなかった）</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synComment\"># アカウントごとに商品数が異なるので50以上商品数がある場合は50までの商品を使用する</span>\n<span class=\"synComment\"># アカウントごとに商品数を揃えることで、labelが不均衡になることを緩和している</span>\n<span class=\"synComment\"># アカウントごとにlabelがふられるが、商品ごとに予測結果を出す時のみ実施</span>\ncutted_df = pd.DataFrame([])\n<span class=\"synStatement\">for</span> acc <span class=\"synStatement\">in</span> df.account_name.unique():\n  data = df[df.account_name == acc]\n  <span class=\"synStatement\">if</span> data.shape[<span class=\"synConstant\">0</span>] &gt; <span class=\"synConstant\">50</span>: \n    data = data[:<span class=\"synConstant\">50</span>]\n  cutted_df = pd.concat([cutted_df,data],<span class=\"synConstant\">0</span>)  \n\ndf = cutted_df.sample(frac=<span class=\"synConstant\">1</span>,random_state=<span class=\"synConstant\">1</span>).reset_index(drop=<span class=\"synIdentifier\">True</span>)\n</pre>\n\n\n<p>次は、データの前処理についてです。</p>\n\n<p>自然言語処理の前処理で有効と言われている半角->全角、数字は全て0にする、スペース文字の消去を行いました。\nまた、これまでlabelが'app'または'disapp'だったのでそれらを入力できる形式に変換しています。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>\n<span class=\"synStatement\">def</span> <span class=\"synIdentifier\">PreprocessData</span>(df,dirname):\n  <span class=\"synComment\"># データの前処理関数</span>\n  <span class=\"synComment\"># 辞書型を返す</span>\n\n  mecab = MeCab.Tagger(<span class=\"synConstant\">'-Ochasen'</span>)\n\n  <span class=\"synComment\"># textデータの前処理</span>\n  df = TextPreprocess(df)\n\n  label2index = {k: i <span class=\"synStatement\">for</span> i, k <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">enumerate</span>(df.target.unique())}\n  index2label = {i: k <span class=\"synStatement\">for</span> i, k <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">enumerate</span>(df.target.unique())}\n\n  class_count = <span class=\"synIdentifier\">len</span>(label2index)\n  labels = utils.to_categorical([label2index[label] <span class=\"synStatement\">for</span> label <span class=\"synStatement\">in</span> df.target], num_classes=class_count)\n\n  features,sentences,vectorian,account = MakeFeatures(df)\n\n  <span class=\"synStatement\">return</span> {\n      <span class=\"synConstant\">'class_count'</span>: class_count,\n      <span class=\"synConstant\">'label2index'</span>: label2index,\n      <span class=\"synConstant\">'index2label'</span>: index2label,\n      <span class=\"synConstant\">'labels'</span>: labels,\n      <span class=\"synConstant\">'features'</span>: features,\n      <span class=\"synConstant\">'sentences'</span>:sentences,\n      <span class=\"synConstant\">'input_len'</span>: vectorian.max_tokens_len,\n      <span class=\"synConstant\">'vectorian'</span>:vectorian,\n      <span class=\"synConstant\">'account'</span>:account\n  }\n\n<span class=\"synStatement\">def</span> <span class=\"synIdentifier\">TextPreprocess</span>(df):\n  <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> df.index:\n    sen = df.loc[i,<span class=\"synConstant\">'sentence'</span>]\n    sen = mojimoji.han_to_zen(sen)\n    sen = re.sub(<span class=\"synConstant\">r'\\d+'</span>,<span class=\"synConstant\">'0'</span>,sen)\n    df.loc[i,<span class=\"synConstant\">'sentence'</span>] = sen.replace(<span class=\"synConstant\">'</span><span class=\"synSpecial\">\\u3000</span><span class=\"synConstant\">'</span>,<span class=\"synConstant\">''</span>)\n  <span class=\"synStatement\">return</span> df\n\n<span class=\"synStatement\">def</span> <span class=\"synIdentifier\">MakeFeatures</span>(df):\n  vectorian = SentencePieceVectorian()\n\n  features = []\n  sentences = []\n  accounts = []\n  <span class=\"synStatement\">for</span> feature,account <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">zip</span>(df[<span class=\"synConstant\">'sentence'</span>],df[<span class=\"synConstant\">'account_name'</span>]):\n    f = vectorian.fit(feature).indices\n    features.append(f)\n    sentences.append(feature)\n    accounts.append(account)\n\n  features = pad_sequences(features, maxlen=vectorian.max_tokens_len)\n\n  <span class=\"synStatement\">return</span> features,sentences,vectorian,accounts\n</pre>\n\n\n<p>では、ここまでの前処理を流します。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>data = PreprocessData(df,dirname) <span class=\"synComment\"># dirnameは、出力結果などを入れたいpath入れてください</span>\n</pre>\n\n\n<p>次はtrain_test_splitを行いますが、先ほども記述した通り通常の手法ではリークするので、以下のようにしました。\n（上述の通りGroupKFoldの実施で回避できる）</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">CollectData</span>(data,account):\n  features = []\n  sentences = []\n  labels = []\n  \n  <span class=\"synStatement\">for</span> ac <span class=\"synStatement\">in</span> account:\n    where_ = np.where(np.array(data[<span class=\"synConstant\">'account'</span>]) == ac)\n    features.extend(np.array(data[<span class=\"synConstant\">'features'</span>])[where_])\n    sentences.extend(np.array(data[<span class=\"synConstant\">'sentences'</span>])[where_])\n    labels.extend(np.array(data[<span class=\"synConstant\">'labels'</span>])[where_])\n  <span class=\"synStatement\">return</span> np.array(features),np.array(sentences),np.array(labels)\n\ntrain_account,test_account = train_test_split(<span class=\"synIdentifier\">list</span>(<span class=\"synIdentifier\">set</span>(data[<span class=\"synConstant\">'account'</span>])),test_size=<span class=\"synConstant\">0.2</span>,random_state=<span class=\"synConstant\">1</span>)\ntrain_account,val_account = train_test_split(train_account,test_size=<span class=\"synConstant\">0.25</span>,random_state=<span class=\"synConstant\">1</span>)\n\ntrain_features,train_sen,train_labels = CollectData(data,train_account)\nval_features,val_sen,val_labels = CollectData(data,val_account)\ntest_features,test_sen,test_labels = CollectData(data,test_account)\n</pre>\n\n\n<p>通常のデータセットであれば、以下のようにすることでデータの分割が行えます。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>(train_features,val_features,\n train_labels,val_labels,\n train_sen,val_sen) = train_test_split(data[<span class=\"synConstant\">'features'</span>], data[<span class=\"synConstant\">'labels'</span>], data[<span class=\"synConstant\">'sentences'</span>], test_size=<span class=\"synConstant\">0.2</span>, random_state=<span class=\"synConstant\">1</span>)\n\n(train_features,test_features,\n train_labels,test_labels,\n train_sen,test_sen) = train_test_split(train_features, train_labels, train_sen, test_size=<span class=\"synConstant\">0.25</span>, random_state=<span class=\"synConstant\">1</span>)\n</pre>\n\n\n<p>ここまででデータの整形が完了です。</p>\n\n<h2 id=\"学習\">学習</h2>\n\n<p>次は、モデルの定義を行います。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">_create_model</span>(input_shape, hidden, class_count,vectorian):\n    input_tensor = Input(input_shape)\n    common_input = vectorian.get_keras_layer(trainable=<span class=\"synIdentifier\">True</span>)(input_tensor)\n    x1 = SeqSelfAttention(name=<span class=\"synConstant\">'attention'</span>)(common_input)\n    x1 = Bidirectional(LSTM(hidden))(x1)\n    x1 = Dropout(<span class=\"synConstant\">0.5</span>)(x1)\n    x1 = Dense(<span class=\"synConstant\">32</span>)(x1)\n    x1 = Dropout(<span class=\"synConstant\">0.5</span>)(x1)\n    x1 = Dense(<span class=\"synConstant\">16</span>)(x1)\n    x1 = Dropout(<span class=\"synConstant\">0.5</span>)(x1)\n    output_tensor = Dense(class_count, activation=<span class=\"synConstant\">'softmax'</span>, name=<span class=\"synConstant\">'class'</span>)(x1)\n\n    model = Model(input_tensor, output_tensor)\n    model.compile(loss=<span class=\"synConstant\">'categorical_crossentropy'</span>, optimizer=<span class=\"synConstant\">'nadam'</span>, metrics=[<span class=\"synConstant\">'acc'</span>])\n\n    <span class=\"synStatement\">return</span> model\n\nhidden = <span class=\"synConstant\">356</span>\nmodel = _create_model(train_features[<span class=\"synConstant\">0</span>].shape, hidden, data[<span class=\"synConstant\">'class_count'</span>],data[<span class=\"synConstant\">'vectorian'</span>])\nmodel.summary()\n</pre>\n\n\n<p>作成したモデルにデータを流して学習を進めます。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>model_filename=<span class=\"synConstant\">'{0}/model.h5'</span>.format(dirname)\n\nhistory = model.fit(train_features, train_labels,\n                    epochs=<span class=\"synConstant\">50</span>,\n                    batch_size=<span class=\"synConstant\">32</span>,\n                    validation_data=(val_features, val_labels),\n                    shuffle=<span class=\"synIdentifier\">False</span>,\n                    callbacks = [\n                        EarlyStopping(patience=<span class=\"synConstant\">5</span>, monitor=<span class=\"synConstant\">'val_acc'</span>, mode=<span class=\"synConstant\">'max'</span>),\n                        ModelCheckpoint(filepath=model_filename, monitor=<span class=\"synConstant\">'val_acc'</span>, mode=<span class=\"synConstant\">'max'</span>, save_best_only=<span class=\"synIdentifier\">True</span>)\n                    ])\n</pre>\n\n\n<h2 id=\"評価出力\">評価・出力</h2>\n\n<p>ModelCheckpointで保存したmodelを読み取り、さらにSelf-Attentionの結果を得られるようにします。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synPreProc\">from</span> keras.models <span class=\"synPreProc\">import</span> load_model\nmodel = load_model(model_filename, custom_objects=SeqSelfAttention.get_custom_objects())\nmodel = Model(inputs=model.input, outputs=[model.output, model.get_layer(<span class=\"synConstant\">'attention'</span>).output])\n</pre>\n\n\n<p>modelにtest dataを入れて結果を取得します。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>out = model.predict(test_features)\n\ny = out[<span class=\"synConstant\">0</span>] <span class=\"synComment\"># 予測labelのsoftmaxが入っている</span>\nweight = out[<span class=\"synConstant\">1</span>] <span class=\"synComment\"># Self-Attentionのweighが入っている</span>\n\npred = np.argmax(y,<span class=\"synConstant\">1</span>) <span class=\"synComment\"># 予測値</span>\n<span class=\"synIdentifier\">max</span> = np.max(y,<span class=\"synConstant\">1</span>) <span class=\"synComment\"># 信頼値</span>\n\ndf_y = pd.DataFrame(np.array([np.argmax(test_labels,<span class=\"synConstant\">1</span>),pred,<span class=\"synIdentifier\">max</span>*<span class=\"synConstant\">100</span>]).T,columns=[<span class=\"synConstant\">'true'</span>,<span class=\"synConstant\">'pred'</span>,<span class=\"synConstant\">'trust'</span>]) <span class=\"synComment\"># 結果をまとめておくと精度確認に使える</span>\n</pre>\n\n\n<p>精度の確認を行います。</p>\n\n<p>ただ、testを入力し得られた結果を出力するだけでは精度が得られなかったので、信頼値が高いものだけを選別し、出力するようにしました。\n信頼値を90~55の間で出力し、<b>最もAccuracyが高い時の信頼値以上のものを出力</b>としました。</p>\n\n<p> 一方で信頼値を上げすぎるとわずかな出力しか得られないので、元のtestデータ数の1/3はデータ数が出力として確保できるような条件を加えました。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>report = classification_report(pred, np.argmax(test_labels,<span class=\"synConstant\">1</span>),output_dict=<span class=\"synIdentifier\">True</span>,target_names=[data[<span class=\"synConstant\">'index2label'</span>][i] <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> [<span class=\"synConstant\">0</span>,<span class=\"synConstant\">1</span>]])\nFirstReport_df = pd.DataFrame(report).T\n\n<span class=\"synIdentifier\">print</span>(FirstReport_df)\nFirstReport_df.to_csv(dirname+<span class=\"synConstant\">'NotCutReport.csv'</span>)\n\n<span class=\"synComment\"># 信頼値が高い予測だけを出力とすることで確からしいものだけをみる</span>\nAppSupport = FirstReport_df.loc[<span class=\"synConstant\">'app'</span>,<span class=\"synConstant\">'support'</span>] <span class=\"synComment\"># 予測した数を取得</span>\nDisappSupport = FirstReport_df.loc[<span class=\"synConstant\">'disapp'</span>,<span class=\"synConstant\">'support'</span>]\n\n<span class=\"synStatement\">for</span> UpperLimit <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">range</span>(<span class=\"synConstant\">90</span>,<span class=\"synConstant\">55</span>,-<span class=\"synConstant\">1</span>):\n  max_acc = <span class=\"synConstant\">0</span>\n  <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">range</span>(<span class=\"synConstant\">50</span>,UpperLimit,<span class=\"synConstant\">1</span>):\n    df_y_cut = df_y[df_y.trust &gt; i]\n    report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class=\"synIdentifier\">True</span>)\n    report_df = pd.DataFrame(report).T\n    acc = report_df.loc[<span class=\"synConstant\">'accuracy'</span>,<span class=\"synConstant\">'precision'</span>]\n    <span class=\"synStatement\">if</span> max_acc &lt; acc:\n      max_acc = acc\n      max_i = i\n  df_y_cut = df_y[df_y.trust &gt; max_i]\n  report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=<span class=\"synIdentifier\">True</span>,target_names=[data[<span class=\"synConstant\">'index2label'</span>][i] <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> [<span class=\"synConstant\">0</span>,<span class=\"synConstant\">1</span>]])\n  report_df = pd.DataFrame(report).T\n  <span class=\"synStatement\">if</span> (report_df.loc[<span class=\"synConstant\">'app'</span>,<span class=\"synConstant\">'support'</span>] &gt; HighSupport/<span class=\"synConstant\">3</span>) <span class=\"synStatement\">and</span> (report_df.loc[<span class=\"synConstant\">'disapp'</span>,<span class=\"synConstant\">'support'</span>] &gt; LowSupport/<span class=\"synConstant\">3</span>):\n    <span class=\"synComment\"># 元の予測値の1/3のデータ数が確保できていればクリア</span>\n    <span class=\"synIdentifier\">print</span>(<span class=\"synConstant\">'UpperLimit:'</span> + <span class=\"synIdentifier\">str</span>(UpperLimit))\n    <span class=\"synIdentifier\">print</span>(<span class=\"synConstant\">'max_i:'</span> + <span class=\"synIdentifier\">str</span>(max_i))\n    <span class=\"synIdentifier\">print</span>(report_df)\n    report_df.to_csv(dirname+<span class=\"synConstant\">'Report.csv'</span>)\n    <span class=\"synStatement\">break</span>\n</pre>\n\n\n<p>最後にSelf-AttentionのWeightをcsvで出力します。</p>\n\n<p>得られた出力結果は、予測値-承認と真値-承認、予測値-承認と真値-不承認、予測値-不承認と真値-承認、予測値-不承認と真値-不承認のように予測値と真値の結果に応じて4つに分けてcsvで出力するようになっています。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>app_app = pd.DataFrame([])\napp_disapp = pd.DataFrame([])\ndisapp_app = pd.DataFrame([])\ndisapp_disapp = pd.DataFrame([])\n\n<span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">range</span>(<span class=\"synIdentifier\">len</span>(test_features)):\n  input_text = test_sen[i]\n  tokens = data[<span class=\"synConstant\">'vectorian'</span>].tokenizer._tokenizer.encode_as_pieces(input_text)\n\n  conf = out[<span class=\"synConstant\">0</span>][i] * <span class=\"synConstant\">100</span>\n  wei = out[<span class=\"synConstant\">1</span>][i]\n\n  <span class=\"synStatement\">if</span> np.max(conf) &lt;= max_i:\n    <span class=\"synStatement\">continue</span>\n\n  pred = [data[<span class=\"synConstant\">'index2label'</span>][np.argmax(conf)]]\n  labels = [data[<span class=\"synConstant\">'index2label'</span>][np.argmax(test_labels[i])]]\n\n  weights = [w.max() <span class=\"synStatement\">for</span> w <span class=\"synStatement\">in</span> wei[-<span class=\"synIdentifier\">len</span>(tokens):]]\n\n  df = pd.DataFrame([tokens, weights], index=[<span class=\"synConstant\">'token'</span>, <span class=\"synConstant\">'weight'</span>]).T\n\n  mean = np.asarray(weights).mean()\n  <span class=\"synStatement\">for</span> j <span class=\"synStatement\">in</span> df.index:\n    <span class=\"synStatement\">if</span> df.loc[j,<span class=\"synConstant\">'weight'</span>] - mean &lt;= <span class=\"synConstant\">0</span>:\n      df.loc[j,<span class=\"synConstant\">'weight'</span>] = <span class=\"synConstant\">0</span>\n    <span class=\"synStatement\">else</span>:\n      df.loc[j,<span class=\"synConstant\">'weight'</span>] = df.loc[j,<span class=\"synConstant\">'weight'</span>] - mean\n  \n  pred += df.token.values.tolist()\n  labels += df.weight.values.tolist()\n\n  final = pd.DataFrame(np.array([pred,labels]).T,columns=[<span class=\"synConstant\">'pred'</span>,input_text])\n\n  <span class=\"synStatement\">if</span> (pred[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">'app'</span>) &amp; (labels[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">'app'</span>):\n    app_app = pd.concat([app_app,final],<span class=\"synConstant\">1</span>)\n  <span class=\"synStatement\">elif</span> (pred[<span class=\"synConstant\">0</span>]  == <span class=\"synConstant\">'app'</span>) &amp; (labels[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">'disapp'</span>):\n    app_disapp = pd.concat([app_disapp,final],<span class=\"synConstant\">1</span>)\n  <span class=\"synStatement\">elif</span> (pred[<span class=\"synConstant\">0</span>]  == <span class=\"synConstant\">'disapp'</span>) &amp; (labels[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">'app'</span>):\n    disapp_app = pd.concat([disapp_app,final],<span class=\"synConstant\">1</span>)\n  <span class=\"synStatement\">elif</span> (pred[<span class=\"synConstant\">0</span>]  == <span class=\"synConstant\">'disapp'</span>) &amp; (labels[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">'diaspp'</span>):\n    disapp_disapp = pd.concat([disapp_disapp,final],<span class=\"synConstant\">1</span>)\n\napp_app.to_csv(dirname+<span class=\"synConstant\">'app_app.csv'</span>,index=<span class=\"synIdentifier\">False</span>)\napp_disapp.to_csv(dirname+<span class=\"synConstant\">'app_disapp.csv'</span>,index=<span class=\"synIdentifier\">False</span>)\ndisapp_app.to_csv(dirname+<span class=\"synConstant\">'disapp_app.csv'</span>,index=<span class=\"synIdentifier\">False</span>)\ndisapp_disapp.to_csv(dirname+<span class=\"synConstant\">'disapp_disapp.csv'</span>,index=<span class=\"synIdentifier\">False</span>)\n</pre>\n\n\n<h1 id=\"まとめ\">まとめ</h1>\n\n<p>Self-Attentionを用いて無料リスティングの不承認理由を解き明かそうと分析しました。\nしかし、<b>title,descriptionのみからは承認と不承認を分類することができず、不承認理由の解明には貢献できせんでした。</b></p>\n\n<p>Self-Attentionとデータセットの相性が悪いという可能性も考えられるので、tfidf+lgbも試みましたが、こちらもうまくいきませんでした。やはりこちらの結果からもtitle,descriptionのみからは承認と不承認を分類することができないということが考えられます。</p>\n","contentSnippet":"こんにちは株式会社フィードフォース2020年入社の機械学習エンジニア八百俊哉@Feedforce (@feed_yao) | Twitterと申します。最近はロードバイク にはまっており、ロードバイク購入後一ヶ月で一日100km走行に成功しました。今回、Google無料リスティングで不承認アカウントが発生する要因を調査する分析を行いました。Google 無料リスティングとは？なぜ今回分析が必要とされたのか？結果と考察Self-Attentionを採用した理由実装手順使用データのフォーマット必要ライブラリのインストール・インポートデータの前処理学習評価・出力まとめGoogle 無料リスティングとは？2020年10月にGoogleから公開されたGoogleショッピングタブに無料で商品掲載ができる「無料リスティング」のことです。Google 検索にサイトがインデックス登録されても料金が発生しないのと同様に、EC事業者は無料で利用可能になりました。Google 無料リスティングについての詳細は以下のサイトが参考になります。lab.ecbooster.jpなぜ今回分析が必要とされたのか？無料リスティングでは自社製品を無料でGoogleに掲載できます。しかしながら、課題として一部商品掲載が不承認となるケースが見受けられました。不承認となってしまうと自社商品の掲載ができていない状況が発生しています。不承認となる理由としては、「Googleが定める基準に対して、登録している商品データの属性数が足りない、内容が仕様に沿っていない場合、商品データの品質が低いため不承認になり、Googleの検索結果に表示させることができません。」とされています。これらを定量的に分析することで不承認となる理由を見つけ出す試みが始まりました。そのため今回の分析の目的は、商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案することです。結果と考察今回の目的である「商品の属性情報（title,description）から承認・不承認の要因を見つけ出し、不承認の商品を承認へと改善するための施策を考案する」は、達成できませんでした。目的が達成できなかった理由として考えられる要因は、承認・不承認は商品のtitle,descriptionだけでは判断されていないということです。商品ごとのtitle,descriptionのみで承認・不承認が判断されているのではなく、商品データ全体またはアカウント全体のデータを総合的に見て、判断されている可能性が高いということがわかりました。承認・不承認予測のAccuracyとしては5割〜６割ほどで、承認・不承認を予測するという点でも低い精度となってしまいました。Self-Attentionを採用した理由今回はSelf-Attentionという手法を用いてこの課題解決を試みました。Self-Attentionとは、文章全体で重要とされるキーワードが予測結果と一緒に確認できるようになる手法です。Self-Attentionの仕組みについては詳しく書かれている方が多くいますので、ここでは割愛します。最初は、word2vecを用いて文章特徴量を作成し、承認・不承認を予測して終了という一連の流れを想定していました。しかし、今回の目的は承認・不承認を予測したいわけではなく、どの単語が承認・不承認と関わっているのかを確認し、不承認となっているアカウントを承認にすることです。もし仮にword2vecを用いた手法を採用すると予測結果の要因や理由が明確にならないので、不承認のアカウントを承認に改善する施策を考えることはできません。そのため今回は、Self-Attentionを用いて分類モデルを構築することで、承認・不承認の要因が文章内のどこにあるのかを分析するために、この手法を選択しました。実装手順本来の目的は達成できませんでしたが、Self-Attentionでの分類モデルの実装はできましたので、実装方法を記載します。今回はkerasを用いてSelf-Attention + LSTMで予測を行いました。検証環境はGoogle Colaboratoryを想定しています。使用データのフォーマット今回使用できるデータとしては以下のようなデータになっています。各アカウント・各商品ごとに商品IDが割り振られており、それぞれの商品にtitle,descriptionが割り振られています。承認・不承認のラベルは、アカウントごとに付加されています。必要ライブラリのインストール・インポート!pip install text_vectorian!pip install mojimoji!apt install aptitude!aptitude install mecab libmecab-dev mecab-ipadic-utf8 git make curl xz-utils file -y!pip install mecab-python3==0.7import pandas as pdimport numpy as npimport kerasimport osimport warningswarnings.simplefilter('ignore')import subprocessimport mojimojiimport reimport MeCabimport matplotlib.pyplot as pltfrom keras.layers import Dense, Dropout, LSTM, Embedding, BatchNormalizationfrom keras.layers.wrappers import Bidirectionalfrom keras.callbacks import EarlyStopping, ModelCheckpointfrom keras import Input, Model, utilsfrom keras.preprocessing.sequence import pad_sequencesfrom keras.callbacks import EarlyStoppingfrom text_vectorian import SentencePieceVectorianfrom keras_self_attention import SeqSelfAttentionfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import classification_reportデータの前処理# データの読み込みapp = pd.read_csv('data/app.csv') # 承認データdisapp = pd.read_csv('data/disapp.csv') # 不承認データapp['target'] = 'app' # targetにlabelを代入するdisapp['target'] = 'disapp'# 今回は、titleとdescriptionを用いて予測するので、それら二つの変数を一つにまとめるapp['sentence'] = app['title'] + app['description'] disapp['sentence'] = disapp['title'] + disapp['description']# これまで別々に処理していたappとdisappをまとめてdfとするdf = app.append(disapp)今回のデータは特殊で、承認・不承認は商品ごとについているラベルではなくアカウントと紐づいたラベルとなっています。それらを各商品と承認・不承認が紐づいているとして各商品ごとに予測することを行ってます。ここで注意が必要なのは、データの分割方法です。アカウントを無視してデータを分割してしまうとリークを起こす可能性があります（リークとは、本来予測では使用できないデータが学習時に入ってしまっていることです）。そのため同じアカウントのデータが訓練データ、検証データ、テストデータに渡って存在しないようにしなければなりません。例えば、アカウントAの商品データは全て訓練データとする,アカウントBの商品データは全てテストデータにするといったようなことを意味しています。アカウントごとにデータを分割するには、各アカウントごとの商品数がある程度同じである方がlabelが不均衡にならないと考え、データ数を揃える処理を施しました。（これらはGroupKFoldを使用すれば解決できると考えられますが、分析実施時はGroupKFoldを知らなかった）# アカウントごとに商品数が異なるので50以上商品数がある場合は50までの商品を使用する# アカウントごとに商品数を揃えることで、labelが不均衡になることを緩和している# アカウントごとにlabelがふられるが、商品ごとに予測結果を出す時のみ実施cutted_df = pd.DataFrame([])for acc in df.account_name.unique():  data = df[df.account_name == acc]  if data.shape[0] > 50:     data = data[:50]  cutted_df = pd.concat([cutted_df,data],0)  df = cutted_df.sample(frac=1,random_state=1).reset_index(drop=True)次は、データの前処理についてです。自然言語処理の前処理で有効と言われている半角->全角、数字は全て0にする、スペース文字の消去を行いました。また、これまでlabelが'app'または'disapp'だったのでそれらを入力できる形式に変換しています。def PreprocessData(df,dirname):  # データの前処理関数  # 辞書型を返す  mecab = MeCab.Tagger('-Ochasen')  # textデータの前処理  df = TextPreprocess(df)  label2index = {k: i for i, k in enumerate(df.target.unique())}  index2label = {i: k for i, k in enumerate(df.target.unique())}  class_count = len(label2index)  labels = utils.to_categorical([label2index[label] for label in df.target], num_classes=class_count)  features,sentences,vectorian,account = MakeFeatures(df)  return {      'class_count': class_count,      'label2index': label2index,      'index2label': index2label,      'labels': labels,      'features': features,      'sentences':sentences,      'input_len': vectorian.max_tokens_len,      'vectorian':vectorian,      'account':account  }def TextPreprocess(df):  for i in df.index:    sen = df.loc[i,'sentence']    sen = mojimoji.han_to_zen(sen)    sen = re.sub(r'\\d+','0',sen)    df.loc[i,'sentence'] = sen.replace('\\u3000','')  return dfdef MakeFeatures(df):  vectorian = SentencePieceVectorian()  features = []  sentences = []  accounts = []  for feature,account in zip(df['sentence'],df['account_name']):    f = vectorian.fit(feature).indices    features.append(f)    sentences.append(feature)    accounts.append(account)  features = pad_sequences(features, maxlen=vectorian.max_tokens_len)  return features,sentences,vectorian,accountsでは、ここまでの前処理を流します。data = PreprocessData(df,dirname) # dirnameは、出力結果などを入れたいpath入れてください次はtrain_test_splitを行いますが、先ほども記述した通り通常の手法ではリークするので、以下のようにしました。（上述の通りGroupKFoldの実施で回避できる）def CollectData(data,account):  features = []  sentences = []  labels = []    for ac in account:    where_ = np.where(np.array(data['account']) == ac)    features.extend(np.array(data['features'])[where_])    sentences.extend(np.array(data['sentences'])[where_])    labels.extend(np.array(data['labels'])[where_])  return np.array(features),np.array(sentences),np.array(labels)train_account,test_account = train_test_split(list(set(data['account'])),test_size=0.2,random_state=1)train_account,val_account = train_test_split(train_account,test_size=0.25,random_state=1)train_features,train_sen,train_labels = CollectData(data,train_account)val_features,val_sen,val_labels = CollectData(data,val_account)test_features,test_sen,test_labels = CollectData(data,test_account)通常のデータセットであれば、以下のようにすることでデータの分割が行えます。(train_features,val_features, train_labels,val_labels, train_sen,val_sen) = train_test_split(data['features'], data['labels'], data['sentences'], test_size=0.2, random_state=1)(train_features,test_features, train_labels,test_labels, train_sen,test_sen) = train_test_split(train_features, train_labels, train_sen, test_size=0.25, random_state=1)ここまででデータの整形が完了です。学習次は、モデルの定義を行います。def _create_model(input_shape, hidden, class_count,vectorian):    input_tensor = Input(input_shape)    common_input = vectorian.get_keras_layer(trainable=True)(input_tensor)    x1 = SeqSelfAttention(name='attention')(common_input)    x1 = Bidirectional(LSTM(hidden))(x1)    x1 = Dropout(0.5)(x1)    x1 = Dense(32)(x1)    x1 = Dropout(0.5)(x1)    x1 = Dense(16)(x1)    x1 = Dropout(0.5)(x1)    output_tensor = Dense(class_count, activation='softmax', name='class')(x1)    model = Model(input_tensor, output_tensor)    model.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=['acc'])    return modelhidden = 356model = _create_model(train_features[0].shape, hidden, data['class_count'],data['vectorian'])model.summary()作成したモデルにデータを流して学習を進めます。model_filename='{0}/model.h5'.format(dirname)history = model.fit(train_features, train_labels,                    epochs=50,                    batch_size=32,                    validation_data=(val_features, val_labels),                    shuffle=False,                    callbacks = [                        EarlyStopping(patience=5, monitor='val_acc', mode='max'),                        ModelCheckpoint(filepath=model_filename, monitor='val_acc', mode='max', save_best_only=True)                    ])評価・出力ModelCheckpointで保存したmodelを読み取り、さらにSelf-Attentionの結果を得られるようにします。from keras.models import load_modelmodel = load_model(model_filename, custom_objects=SeqSelfAttention.get_custom_objects())model = Model(inputs=model.input, outputs=[model.output, model.get_layer('attention').output])modelにtest dataを入れて結果を取得します。out = model.predict(test_features)y = out[0] # 予測labelのsoftmaxが入っているweight = out[1] # Self-Attentionのweighが入っているpred = np.argmax(y,1) # 予測値max = np.max(y,1) # 信頼値df_y = pd.DataFrame(np.array([np.argmax(test_labels,1),pred,max*100]).T,columns=['true','pred','trust']) # 結果をまとめておくと精度確認に使える精度の確認を行います。ただ、testを入力し得られた結果を出力するだけでは精度が得られなかったので、信頼値が高いものだけを選別し、出力するようにしました。信頼値を90~55の間で出力し、最もAccuracyが高い時の信頼値以上のものを出力としました。 一方で信頼値を上げすぎるとわずかな出力しか得られないので、元のtestデータ数の1/3はデータ数が出力として確保できるような条件を加えました。report = classification_report(pred, np.argmax(test_labels,1),output_dict=True,target_names=[data['index2label'][i] for i in [0,1]])FirstReport_df = pd.DataFrame(report).Tprint(FirstReport_df)FirstReport_df.to_csv(dirname+'NotCutReport.csv')# 信頼値が高い予測だけを出力とすることで確からしいものだけをみるAppSupport = FirstReport_df.loc['app','support'] # 予測した数を取得DisappSupport = FirstReport_df.loc['disapp','support']for UpperLimit in range(90,55,-1):  max_acc = 0  for i in range(50,UpperLimit,1):    df_y_cut = df_y[df_y.trust > i]    report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=True)    report_df = pd.DataFrame(report).T    acc = report_df.loc['accuracy','precision']    if max_acc < acc:      max_acc = acc      max_i = i  df_y_cut = df_y[df_y.trust > max_i]  report = classification_report(df_y_cut.pred, df_y_cut.true ,output_dict=True,target_names=[data['index2label'][i] for i in [0,1]])  report_df = pd.DataFrame(report).T  if (report_df.loc['app','support'] > HighSupport/3) and (report_df.loc['disapp','support'] > LowSupport/3):    # 元の予測値の1/3のデータ数が確保できていればクリア    print('UpperLimit:' + str(UpperLimit))    print('max_i:' + str(max_i))    print(report_df)    report_df.to_csv(dirname+'Report.csv')    break最後にSelf-AttentionのWeightをcsvで出力します。得られた出力結果は、予測値-承認と真値-承認、予測値-承認と真値-不承認、予測値-不承認と真値-承認、予測値-不承認と真値-不承認のように予測値と真値の結果に応じて4つに分けてcsvで出力するようになっています。app_app = pd.DataFrame([])app_disapp = pd.DataFrame([])disapp_app = pd.DataFrame([])disapp_disapp = pd.DataFrame([])for i in range(len(test_features)):  input_text = test_sen[i]  tokens = data['vectorian'].tokenizer._tokenizer.encode_as_pieces(input_text)  conf = out[0][i] * 100  wei = out[1][i]  if np.max(conf) <= max_i:    continue  pred = [data['index2label'][np.argmax(conf)]]  labels = [data['index2label'][np.argmax(test_labels[i])]]  weights = [w.max() for w in wei[-len(tokens):]]  df = pd.DataFrame([tokens, weights], index=['token', 'weight']).T  mean = np.asarray(weights).mean()  for j in df.index:    if df.loc[j,'weight'] - mean <= 0:      df.loc[j,'weight'] = 0    else:      df.loc[j,'weight'] = df.loc[j,'weight'] - mean    pred += df.token.values.tolist()  labels += df.weight.values.tolist()  final = pd.DataFrame(np.array([pred,labels]).T,columns=['pred',input_text])  if (pred[0] == 'app') & (labels[0] == 'app'):    app_app = pd.concat([app_app,final],1)  elif (pred[0]  == 'app') & (labels[0] == 'disapp'):    app_disapp = pd.concat([app_disapp,final],1)  elif (pred[0]  == 'disapp') & (labels[0] == 'app'):    disapp_app = pd.concat([disapp_app,final],1)  elif (pred[0]  == 'disapp') & (labels[0] == 'diaspp'):    disapp_disapp = pd.concat([disapp_disapp,final],1)app_app.to_csv(dirname+'app_app.csv',index=False)app_disapp.to_csv(dirname+'app_disapp.csv',index=False)disapp_app.to_csv(dirname+'disapp_app.csv',index=False)disapp_disapp.to_csv(dirname+'disapp_disapp.csv',index=False)まとめSelf-Attentionを用いて無料リスティングの不承認理由を解き明かそうと分析しました。しかし、title,descriptionのみからは承認と不承認を分類することができず、不承認理由の解明には貢献できせんでした。Self-Attentionとデータセットの相性が悪いという可能性も考えられるので、tfidf+lgbも試みましたが、こちらもうまくいきませんでした。やはりこちらの結果からもtitle,descriptionのみからは承認と不承認を分類することができないということが考えられます。","link":"https://developer.feedforce.jp/entry/2021/03/11/101244","isoDate":"2021-03-11T01:12:44.000Z","dateMiliSeconds":1615425164000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/n/newton800/20210224/20210224172435.png","authorName":"feedforce"},{"title":"データ指向アプリケーションデザイン 第三章 旅行記","content":"<p>こんにちは。<a href=\"http://blog.hatena.ne.jp/kano-e/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:kano-e</a> です。</p>\n\n<p>先日 <a href=\"https://developer.feedforce.jp/entry/2021/03/02/172959\">データ指向アプリケーションデザイン 第二章 旅行記</a> という記事を公開しました。<br />\n今日はその続き、第三章です。</p>\n\n<p>第三章も第二章と同じく、地図への書き込みという形で読書記録を作りました。</p>\n\n<p>第三章の章題は「ストレージと抽出」です。<br />\nその旅路は以下の画像の通り。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"データ指向アプリケーションデザイン 第三章 旅行記\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191216/20191216212951.jpg\" alt=\"f:id:kano-e:20191216212951j:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>データ指向アプリケーションデザイン 第三章 旅行記</figcaption></figure></p>\n\n<p>第三章では分散データ洋に浮かぶ島を舞台に、トランザクション共和国のログストラクチャ、B-Tree領、そして分析王国のデータウェアハウス領まで旅をしました。</p>\n\n<p>この旅の記録が、ツールの選定やチューニングの際の道標になるのでは、と思います。</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/\"><img src=\"https://m.media-amazon.com/images/I/51T+k4VRzpL.jpg\" class=\"hatena-asin-detail-image\" alt=\"データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理\" title=\"データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/\">データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/Martin%20Kleppmann\" class=\"keyword\">Martin Kleppmann</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2019/07/18</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>よろしければ第二章の記録もどうぞ。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F03%2F02%2F172959\" title=\"データ指向アプリケーションデザイン 第二章 旅行記 - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2021/03/02/172959\">developer.feedforce.jp</a></cite></p>\n\n<p>それでは、みなさま、良い旅を！</p>\n","contentSnippet":"こんにちは。id:kano-e です。先日 データ指向アプリケーションデザイン 第二章 旅行記 という記事を公開しました。第三章も第二章と同じく、地図への書き込みという形で読書記録を作りました。第三章の章題は「ストレージと抽出」です。データ指向アプリケーションデザイン 第三章 旅行記第三章では分散データ洋に浮かぶ島を舞台に、トランザクション共和国のログストラクチャ、B-Tree領、そして分析王国のデータウェアハウス領まで旅をしました。この旅の記録が、ツールの選定やチューニングの際の道標になるのでは、と思います。データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理作者:Martin Kleppmann発売日: 2019/07/18メディア: 単行本（ソフトカバー）よろしければ第二章の記録もどうぞ。developer.feedforce.jpそれでは、みなさま、良い旅を！","link":"https://developer.feedforce.jp/entry/2021/03/04/180304","isoDate":"2021-03-04T09:03:04.000Z","dateMiliSeconds":1614848584000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191216/20191216212951.jpg","authorName":"feedforce"},{"title":"データ指向アプリケーションデザイン 第二章 旅行記","content":"<p>こんにちは！\n<a href=\"http://blog.hatena.ne.jp/kano-e/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:kano-e</a> です。</p>\n\n<p>今日は『データ指向アプリケーションデザイン』という本の読書記録を公開しにきました。</p>\n\n<p>こちらの本、章毎にその章を象徴するような地図が挿絵として挿入されています。<br />\n地図が描かれている本て良いですよね。主人公たちの物語が進む旅に、地図を眺めに戻って「今この辺りかな」なんて思いを馳せたりするのが楽しくて、好きです。</p>\n\n<p>というわけで、この『データ指向アプリケーションデザイン』でも、そのように「今はこの地図のこの辺りだなあ」なんて思いながら読み進めていました。</p>\n\n<p>その読書記録、あるいは旅の記録が以下の画像です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"データ指向アプリケーションデザイン 第二章 旅行記\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191210/20191210215742.jpg\" alt=\"f:id:kano-e:20191210215742j:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>データ指向アプリケーションデザイン 第二章 旅行記</figcaption></figure></p>\n\n<p>第二章の章題は「データモデルとクエリ言語」。<br />\n様々なデータモデルを俯瞰して眺めるような旅になりました。</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/\"><img src=\"https://m.media-amazon.com/images/I/51T+k4VRzpL.jpg\" class=\"hatena-asin-detail-image\" alt=\"データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理\" title=\"データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4873118700/hatena-blog-22/\">データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/Martin%20Kleppmann\" class=\"keyword\">Martin Kleppmann</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2019/07/18</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>アプリケーションは常に変化し続けます。その中で、どのようにデータというものと向き合ってゆくのか。そんな内容が書かれている面白い本です。<br />\nぜひ一緒にこの本を旅しましょう。</p>\n\n<p>旅の記録を書きとめるのに使ったホワイトボードはこちら。</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B00V47UVK2/hatena-blog-22/\"><img src=\"https://m.media-amazon.com/images/I/41AGC8LpKML.jpg\" class=\"hatena-asin-detail-image\" alt=\"nu board (ヌーボード) A4判 NGA403FN08\" title=\"nu board (ヌーボード) A4判 NGA403FN08\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B00V47UVK2/hatena-blog-22/\">nu board (ヌーボード) A4判 NGA403FN08</a></p><ul><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2015/04/01</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> オフィス用品</li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>このタイプの nu board には透明シートがあるので、そのシートの下に地図のコピーを置いて、文字や旅路を辿った線は透明シートの上に書いています。<br />\n大きくてのびのび書き込めて便利です。</p>\n\n<p>それではみなさん、良い旅を！</p>\n","contentSnippet":"こんにちは！id:kano-e です。今日は『データ指向アプリケーションデザイン』という本の読書記録を公開しにきました。こちらの本、章毎にその章を象徴するような地図が挿絵として挿入されています。というわけで、この『データ指向アプリケーションデザイン』でも、そのように「今はこの地図のこの辺りだなあ」なんて思いながら読み進めていました。その読書記録、あるいは旅の記録が以下の画像です。データ指向アプリケーションデザイン 第二章 旅行記第二章の章題は「データモデルとクエリ言語」。データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理作者:Martin Kleppmann発売日: 2019/07/18メディア: 単行本（ソフトカバー）アプリケーションは常に変化し続けます。その中で、どのようにデータというものと向き合ってゆくのか。そんな内容が書かれている面白い本です。旅の記録を書きとめるのに使ったホワイトボードはこちら。nu board (ヌーボード) A4判 NGA403FN08発売日: 2015/04/01メディア: オフィス用品このタイプの nu board には透明シートがあるので、そのシートの下に地図のコピーを置いて、文字や旅路を辿った線は透明シートの上に書いています。それではみなさん、良い旅を！","link":"https://developer.feedforce.jp/entry/2021/03/02/172959","isoDate":"2021-03-02T08:29:59.000Z","dateMiliSeconds":1614673799000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kano-e/20191210/20191210215742.jpg","authorName":"feedforce"},{"title":"Terraform の terraform-provider-datadog で古い source から新しい source に更新する際の Warning を解消する方法","content":"<p>ソーシャルPLUS の開発チーム でインフラエンジニア をしている <a href=\"http://blog.hatena.ne.jp/mayuki123/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/mayuki123/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:mayuki123</a> です。</p>\n\n<p>ソーシャルPLUS のインフラ環境は基本的に Terraform を利用して管理をしています。今回は、Terraform の <a href=\"https://github.com/DataDog/terraform-provider-datadog\">terraform-provider-datadog</a> で <code>terraform init</code> を実行時の Warning を解消するのに頭を悩ませたので書き残しておきます。</p>\n\n<h2>発生していた事象</h2>\n\n<p>Datadog Provider を利用している所で <code>terraform init</code> を実行すると、下記のWarning が表示されるようになりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Warning: Additional provider information from registry\n\nThe remote registry returned warnings for\nregistry.terraform.io/terraform-providers/datadog:\n- For users on Terraform 0.13 or greater, this provider has moved to\nDataDog/datadog. Please update your source in required_providers.</pre>\n\n\n<p>Datadog Provider を導入した時は、 Source に <code>terraform-providers/datadog</code> を指定する必要がありましたが、現在は <code>DataDog/datadog</code> が推奨との事で変更する必要があるようです。Terraform のコードで Source を変更すればいとも簡単に解決するだろうとこの時の私は思っていました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210208/20210208175250.png\" alt=\"f:id:mayuki123:20210208175250p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>Terraform の コードを修正後に <code>terraform init</code> を実行して Provider を更新した後に、 <code>terraform providers</code> を実行してみると State では <code>registry.terraform.io/terraform-providers/datadog</code> を使い続ける事象に陥りました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>% terraform providers\nProviders required by configuration:\n.\n├── provider[registry.terraform.io/hashicorp/aws] 3.27.0\n├── provider[registry.terraform.io/datadog/datadog] 2.20.0\n\n/// 中略 ///\n\nProviders required by state:\n\n    provider[registry.terraform.io/hashicorp/aws]\n\n    provider[registry.terraform.io/terraform-providers/datadog]\n\n    provider[terraform.io/builtin/terraform]</pre>\n\n\n<p> Terraform v0.14.x で追加されるようになった <code>.terraform.lock.hcl</code> には Provider として <code>registry.terraform.io/datadog/datadog</code> が新しく追加はされますが、 <code>registry.terraform.io/terraform-providers/datadog</code> が残り続けていました。亡霊なのでしょうか。</p>\n\n<h2>解決方法</h2>\n\n<p><code>terraform state replace-provider</code> コマンドを実行する事で、State 上の既存のリソースに対して Terraform の Datadog provider の Source として <code>DataDog/datadog</code> を利用するように変更する必要がありました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>terraform state replace-provider \\\n&#39;registry.terraform.io/terraform-providers/datadog&#39; \\\n&#39;registry.terraform.io/datadog/datadog&#39;</pre>\n\n\n<p>実行すると下記のような確認が表示されるので、 <code>yes</code> を入力すると更新されます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>% terraform state replace-provider &#39;registry.terraform.io/terraform-providers/datadog&#39; &#39;registry.terraform.io/datadog/datadog&#39; \nTerraform will perform the following actions:\n\n  ~ Updating provider:\n    - registry.terraform.io/terraform-providers/datadog\n    + registry.terraform.io/datadog/datadog\n\nChanging 1 resources:\n\n  datadog_integration_aws.xxxx\n\nDo you want to make these changes?\nOnly &#39;yes&#39; will be accepted to continue.\n\nEnter a value: yes</pre>\n\n\n<p><code>terraform state replace-provider</code> コマンドを実行後に <code>terraform init</code> を実行すると Warning は解消されました。Terraform provider の Source の変更はあまり発生しない気はしますが、同じような事象にハマった時にはご参考になればと思います。</p>\n","contentSnippet":"ソーシャルPLUS の開発チーム でインフラエンジニア をしている id:mayuki123 です。ソーシャルPLUS のインフラ環境は基本的に Terraform を利用して管理をしています。今回は、Terraform の terraform-provider-datadog で terraform init を実行時の Warning を解消するのに頭を悩ませたので書き残しておきます。発生していた事象Datadog Provider を利用している所で terraform init を実行すると、下記のWarning が表示されるようになりました。Warning: Additional provider information from registryThe remote registry returned warnings forregistry.terraform.io/terraform-providers/datadog:- For users on Terraform 0.13 or greater, this provider has moved toDataDog/datadog. Please update your source in required_providers.Datadog Provider を導入した時は、 Source に terraform-providers/datadog を指定する必要がありましたが、現在は DataDog/datadog が推奨との事で変更する必要があるようです。Terraform のコードで Source を変更すればいとも簡単に解決するだろうとこの時の私は思っていました。Terraform の コードを修正後に terraform init を実行して Provider を更新した後に、 terraform providers を実行してみると State では registry.terraform.io/terraform-providers/datadog を使い続ける事象に陥りました。% terraform providersProviders required by configuration:.├── provider[registry.terraform.io/hashicorp/aws] 3.27.0├── provider[registry.terraform.io/datadog/datadog] 2.20.0/// 中略 ///Providers required by state:    provider[registry.terraform.io/hashicorp/aws]    provider[registry.terraform.io/terraform-providers/datadog]    provider[terraform.io/builtin/terraform] Terraform v0.14.x で追加されるようになった .terraform.lock.hcl には Provider として registry.terraform.io/datadog/datadog が新しく追加はされますが、 registry.terraform.io/terraform-providers/datadog が残り続けていました。亡霊なのでしょうか。解決方法terraform state replace-provider コマンドを実行する事で、State 上の既存のリソースに対して Terraform の Datadog provider の Source として DataDog/datadog を利用するように変更する必要がありました。terraform state replace-provider \\'registry.terraform.io/terraform-providers/datadog' \\'registry.terraform.io/datadog/datadog'実行すると下記のような確認が表示されるので、 yes を入力すると更新されます。% terraform state replace-provider 'registry.terraform.io/terraform-providers/datadog' 'registry.terraform.io/datadog/datadog' Terraform will perform the following actions:  ~ Updating provider:    - registry.terraform.io/terraform-providers/datadog    + registry.terraform.io/datadog/datadogChanging 1 resources:  datadog_integration_aws.xxxxDo you want to make these changes?Only 'yes' will be accepted to continue.Enter a value: yesterraform state replace-provider コマンドを実行後に terraform init を実行すると Warning は解消されました。Terraform provider の Source の変更はあまり発生しない気はしますが、同じような事象にハマった時にはご参考になればと思います。","link":"https://developer.feedforce.jp/entry/2021/02/09/114110","isoDate":"2021-02-09T02:41:10.000Z","dateMiliSeconds":1612838470000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mayuki123/20210208/20210208175250.png","authorName":"feedforce"}]},"__N_SSG":true}