{"pageProps":{"member":{"name":"masutaka","role":"LookML Developer","bio":"カレー大好き！","avatarSrc":"https://www.gravatar.com/avatar/d6c5403c0b6ef2f9fd51910ea38323a3?size=256","sources":["https://developer.feedforce.jp/rss/author/masutaka26","https://masutaka.net/chalow/cl.rss"],"twitterUsername":"masutaka","githubUsername":"masutaka","websiteUrl":"https://masutaka.net"},"postItems":[{"title":"『本を聴く毎日を送っています』という LT をした","content":"私が所属しているフィードフォースでは、毎月 FFLT という LT 大会があります。\n最近久しぶりに参加していて、昨日は本当に久しぶりに LT をしました。久しぶりすぎて LT が 5 分であることを気にかけなかったという&hellip;。いや、もちろん覚えてはいたのですが（汗）。\n お題は [2022-03-06-1] や [2022-03-30-1] でそれとなく書いていた「Kindle 本を聴く」方法です。\nすべてのケースに合うわけでも、ベストな方法でもありませんが、集中力が必要で眠くなりがちな本を読むという作業を省エネ化出来たことは、自分にとって価値あるものでした。\nまだまだ最適化が必要なので、やっていきます。","contentSnippet":"私が所属しているフィードフォースでは、毎月 FFLT という LT 大会があります。最近久しぶりに参加していて、昨日は本当に久しぶりに LT をしました。久しぶりすぎて LT が 5 分であることを気にかけなかったという…。いや、もちろん覚えてはいたのですが（汗）。 お題は [2022-03-06-1] や [2022-03-30-1] でそれとなく書いていた「Kindle 本を聴く」方法です。すべてのケースに合うわけでも、ベストな方法でもありませんが、集中力が必要で眠くなりがちな本を読むという作業を省エネ化出来たことは、自分にとって価値あるものでした。まだまだ最適化が必要なので、やっていきます。","link":"https://masutaka.net/2022-04-09-1/","isoDate":"2022-04-09T00:00:00.000Z","dateMiliSeconds":1649462400000,"authorName":"masutaka"},{"title":"『銃・病原菌・鉄』を読み終えた","content":"購入から６年半以上。下巻の途中で数年止まっていましたが、今月えいやっと読み終えました。\n※ 正確に書くと、Kindle 本をオーディオブック化して聴き終えました。\n上巻はもはや覚えていませんが、全体を通して覚えていることは「人種間に能力の優劣などなく、地理的環境的なアドバンテージが文化的な発展の違いに繋がった」ことです。\n例えばユーラシア大陸は大陸は横に長いため、作物や技術が伝播しやすいです。緯度が変わらないため、気候が似通っているからです。しかし、南北アメリカ大陸やアフリカ大陸は縦に長いため、ユーラシア大陸に比べて伝播が遅かったり、途中で止まったりします。こちらを知れただけで読んだ価値がありました。\n下巻の最後では、なぜヨーロッパの国々はアメリカ大陸やアジア諸国で植民地支配が広がったのに、中国はそうでなかったのかという興味深い話が解説されていました。\nヨーロッパは国の数が多く競争が激しいため、新しい技術が開発されたら取り入れざるを得ず、ある国の支援が得られなくても他の国でなら可能（コロンブスの話）という事情が生まれるそうです。\n一方で中国は１つの王朝が統一しているため、例えば外洋航海の禁止という決定事項が中国全土に浸透し、その決定が愚かだったかの検証さえ出来なくなってしまったそう。\nKindle 本をオーディオブック化するスキルを身に付けたので、これからもジャンジャン読んで聴いていきます。\n  P.S.\nこれから読む予定。\n日本の地理学は『銃・病原菌・鉄』をいかに語るのか―英語圏と日本における受容過程の比較検討から― ","contentSnippet":"購入から６年半以上。下巻の途中で数年止まっていましたが、今月えいやっと読み終えました。※ 正確に書くと、Kindle 本をオーディオブック化して聴き終えました。上巻はもはや覚えていませんが、全体を通して覚えていることは「人種間に能力の優劣などなく、地理的環境的なアドバンテージが文化的な発展の違いに繋がった」ことです。例えばユーラシア大陸は大陸は横に長いため、作物や技術が伝播しやすいです。緯度が変わらないため、気候が似通っているからです。しかし、南北アメリカ大陸やアフリカ大陸は縦に長いため、ユーラシア大陸に比べて伝播が遅かったり、途中で止まったりします。こちらを知れただけで読んだ価値がありました。下巻の最後では、なぜヨーロッパの国々はアメリカ大陸やアジア諸国で植民地支配が広がったのに、中国はそうでなかったのかという興味深い話が解説されていました。ヨーロッパは国の数が多く競争が激しいため、新しい技術が開発されたら取り入れざるを得ず、ある国の支援が得られなくても他の国でなら可能（コロンブスの話）という事情が生まれるそうです。一方で中国は１つの王朝が統一しているため、例えば外洋航海の禁止という決定事項が中国全土に浸透し、その決定が愚かだったかの検証さえ出来なくなってしまったそう。Kindle 本をオーディオブック化するスキルを身に付けたので、これからもジャンジャン読んで聴いていきます。  P.S.これから読む予定。日本の地理学は『銃・病原菌・鉄』をいかに語るのか―英語圏と日本における受容過程の比較検討から―","link":"https://masutaka.net/2022-03-30-1/","isoDate":"2022-03-30T00:00:00.000Z","dateMiliSeconds":1648598400000,"authorName":"masutaka"},{"title":"1Password に SSH キーをインポートしたら UX として良かった","content":" 1password 8 beta の macOS バージョンで ssh キーをすべて扱うようにした - HsbtDiary(2022-03-18)  SSH and Git, meet 1Password 🥰｜1Password   macOS はベータ版をインストールする必要があるが、メインマシンの Manjaro (Linux) の 1Password はすでに 8.6.1 だったので、試しに使ってみた。\n1Password には SSH 秘密鍵をインポートする。1Password 内では秘密鍵から公開鍵を作ってくれる。~/.ssh/ 以下の SSH キーは秘密鍵と公開鍵の両方とも不要になる。\nUNIX Socket ファイルが出来るようなので、~/.ssh/config で設定をそこに向ければ勝手に使ってくれる。こんなことが出来るんだ。\nHost * IdentityAgent &#34;~/.1password/agent.sock&#34; ただ、git fetch や git pull のたびに指紋認証が要求されるので、利用頻度が多い GitHub なんかは今まで通りが良い気はした。\nHost github.com IdentityFile &#34;~/.ssh/github_ed25519&#34; IdentityAgent none Host * IdentityAgent &#34;~/.1password/agent.sock&#34; ssh config は設定が上書かれないことには注意。先にマッチしたほうが優先される。\nssh_config(5) - Linux manual page ","contentSnippet":"1password 8 beta の macOS バージョンで ssh キーをすべて扱うようにした - HsbtDiary(2022-03-18)  SSH and Git, meet 1Password 🥰｜1Password   macOS はベータ版をインストールする必要があるが、メインマシンの Manjaro (Linux) の 1Password はすでに 8.6.1 だったので、試しに使ってみた。1Password には SSH 秘密鍵をインポートする。1Password 内では秘密鍵から公開鍵を作ってくれる。~/.ssh/ 以下の SSH キーは秘密鍵と公開鍵の両方とも不要になる。UNIX Socket ファイルが出来るようなので、~/.ssh/config で設定をそこに向ければ勝手に使ってくれる。こんなことが出来るんだ。Host * IdentityAgent \"~/.1password/agent.sock\" ただ、git fetch や git pull のたびに指紋認証が要求されるので、利用頻度が多い GitHub なんかは今まで通りが良い気はした。Host github.com IdentityFile \"~/.ssh/github_ed25519\" IdentityAgent none Host * IdentityAgent \"~/.1password/agent.sock\" ssh config は設定が上書かれないことには注意。先にマッチしたほうが優先される。ssh_config(5) - Linux manual page","link":"https://masutaka.net/2022-03-29-1/","isoDate":"2022-03-29T00:00:00.000Z","dateMiliSeconds":1648512000000,"authorName":"masutaka"},{"title":"『だから僕たちは、組織を変えていける』を読んだ","content":"組織に課題を持った同僚が紹介していたので、ポチッとしました。\n 読んだ感想としては、まあそうだよねって感じで異論とかはなかった。なんなら自分は読む前から理解していたつもりだし、やる気溢れるメンタルで実践してたつもり。※ 現在一人開発なので難易度が低い。\nでも、組織で実践出来る風景が全く思い浮かばない。\n日本は不満を撒き散らす社員が多く、やる気に満ちた社員が少ない　「とんでもなく時代遅れ」な組織が抱える問題点 - ログミーBiz こちらの記事が紹介記事。今の会社は不満を撒き散らす社員は思いつかないし、とんでもなく時代遅れな会社でもないと思う。やる気のありなしはフルリモートワークもあってよく分からない。\nバラバラなピースをどう完成させていけば良いのかな。自分はまだ正解が分からない。","contentSnippet":"組織に課題を持った同僚が紹介していたので、ポチッとしました。 読んだ感想としては、まあそうだよねって感じで異論とかはなかった。なんなら自分は読む前から理解していたつもりだし、やる気溢れるメンタルで実践してたつもり。※ 現在一人開発なので難易度が低い。でも、組織で実践出来る風景が全く思い浮かばない。日本は不満を撒き散らす社員が多く、やる気に満ちた社員が少ない　「とんでもなく時代遅れ」な組織が抱える問題点 - ログミーBiz こちらの記事が紹介記事。今の会社は不満を撒き散らす社員は思いつかないし、とんでもなく時代遅れな会社でもないと思う。やる気のありなしはフルリモートワークもあってよく分からない。バラバラなピースをどう完成させていけば良いのかな。自分はまだ正解が分からない。","link":"https://masutaka.net/2022-03-10-1/","isoDate":"2022-03-10T00:00:00.000Z","dateMiliSeconds":1646870400000,"authorName":"masutaka"},{"title":"『読む力 最新スキル大全』を読んだ","content":"コロナ禍に突入して丸２年。よく散歩をするようになりました。基本在宅ワークなので、意識的に散歩しないとさすがに健康リスクが高いからです。\n散歩は考えを整理するのにもとても良くて、直近の課題への良いアイディアが出てきたり、寝かせた課題への解決策がふっと浮き上がってきたりします。[2021-01-05-1] でも書いた件です。馴染みの曲を聞きながら、いつもと同じコースを歩くと、特に効果的です。\nそれと相反してはしまうのですが、最近はそれに飽きてしまい、散歩中に技術系や格闘技系、歴史系の Podcast をよく聞くようになりました。ちなみにインプットモードになるので、思考の整理にはなりません。(^^;\nそんな中、格闘家の青木選手 きっかけで Voicy の存在を知り、他に聞くものないかなーと探して見つけたのが、佐々木俊尚さんの Voicy でした。\n 佐々木さんは @sasakitoshinao での朝のキュレーションが有名なジャーナリストで、私は 2011 年ごろからフォローしていたと思います。※ よくアンチが湧いていますが、そんな変なことは言ってないと思うんだよなあ。\n私、朝はツイッターをあまり見ないので、佐々木さんとは一方的に疎遠みたいになってました。そんなこんなで懐かしい気持ちで聞き始め、とうとう過去の放送を全部聞いてしまいました。放送開始は去年の 9 月で、佐々木さんは毎朝 Voicy を配信しているので、それなりの数です。\nそんな佐々木さんが本を出しました。お礼の気持ち半分、佐々木さんの情報収集方法を知ること半分で購入してみました。\n 読んだ感想としては「良い本だとは思うけど、マッチする人とそうでもない人がいると思う」かなあ？\n私の情報収集方法は、佐々木さんほど深くはありませんが、似たりよったりです。肝心の「マルチタスクワーキング」は、ちょっと使わないかなあ？なんでだろう？\n私がプログラマーだから、割とガッツリしたタスクが多いから？会社員だから、請求書作るだとかの細かいタスクが少ないから？ ※ 過去にポモドーロやタスクシュート [2016-10-26-1] は試した上での感想です。\nだいたい毎日、仕事を始めたら溜まった Slack 読んでウォーミングアップして、あとはそれなりの大きさのタスクをガーッと処理する感じです。不惑の年はとうに越しましたが、集中力が続かない悩みはあまり感じたことはありません。\nあ、キリが悪いところで止めるテクニックは、プログラマーの間ではテストを失敗させた状態で作業を止めるテクニックとして知られていて、私もたまに使いますね。\n一方でビジネス職の人には、情報収集方法や仕事の仕方は参考になるかもしれません。Feedly, Pocket, Twitter（のリスト）など、存在や良さげな使い方はプログラマーよりは知らないかもしれませんし、タスクの粒度は小さく、種類は多い印象があります。\nということで、気になる方はポチッとすると良いと思いました。\nここまでで、私ひとつ嘘をつきました。\n「『読む力 最新スキル大全』を読んだ」と書きましたが、実際には Fire HD 8 の「Kindle 読み上げ」で全部聞きました。読んでいません。皮肉みたいになって、なんだかすみません。\n 「マルチタスクワーキング」は集中力など要らない、時間を細切れに使えという提案ですが、聞くという解はあると思います。\nさすがに私も本を読む集中力は頻繁に切れます。Twitter は見ちゃうし、格闘技系 YouTube も気になる。\nそんな課題がある中で、Podcast や Voicy は異様に捗っていました。どうやら今の生活にマッチしていたようです。\nだったら本も聞いてしまえば、集中力が切れる課題を解決できるかな？と試した最初の本が『読む力 最新スキル大全』でした。伏線回収？\nもしかしたら、佐々木さんの Voicy を聞いているうちに「集中力なんか要らない」という仮説を認識し、それと Podcast や Voicy が生活にマッチしていることがうまく結びついて、課題を解決できたのかもしれません。\nなどと、この記事を書いていて思いました。\n「Kindle 読み上げ」を使って、どのように本を聞いているかは、近々記事にする予定です。いろいろあって大変でした。(^^;","contentSnippet":"コロナ禍に突入して丸２年。よく散歩をするようになりました。基本在宅ワークなので、意識的に散歩しないとさすがに健康リスクが高いからです。散歩は考えを整理するのにもとても良くて、直近の課題への良いアイディアが出てきたり、寝かせた課題への解決策がふっと浮き上がってきたりします。[2021-01-05-1] でも書いた件です。馴染みの曲を聞きながら、いつもと同じコースを歩くと、特に効果的です。それと相反してはしまうのですが、最近はそれに飽きてしまい、散歩中に技術系や格闘技系、歴史系の Podcast をよく聞くようになりました。ちなみにインプットモードになるので、思考の整理にはなりません。(^^;そんな中、格闘家の青木選手 きっかけで Voicy の存在を知り、他に聞くものないかなーと探して見つけたのが、佐々木俊尚さんの Voicy でした。 佐々木さんは @sasakitoshinao での朝のキュレーションが有名なジャーナリストで、私は 2011 年ごろからフォローしていたと思います。※ よくアンチが湧いていますが、そんな変なことは言ってないと思うんだよなあ。私、朝はツイッターをあまり見ないので、佐々木さんとは一方的に疎遠みたいになってました。そんなこんなで懐かしい気持ちで聞き始め、とうとう過去の放送を全部聞いてしまいました。放送開始は去年の 9 月で、佐々木さんは毎朝 Voicy を配信しているので、それなりの数です。そんな佐々木さんが本を出しました。お礼の気持ち半分、佐々木さんの情報収集方法を知ること半分で購入してみました。 読んだ感想としては「良い本だとは思うけど、マッチする人とそうでもない人がいると思う」かなあ？私の情報収集方法は、佐々木さんほど深くはありませんが、似たりよったりです。肝心の「マルチタスクワーキング」は、ちょっと使わないかなあ？なんでだろう？私がプログラマーだから、割とガッツリしたタスクが多いから？会社員だから、請求書作るだとかの細かいタスクが少ないから？ ※ 過去にポモドーロやタスクシュート [2016-10-26-1] は試した上での感想です。だいたい毎日、仕事を始めたら溜まった Slack 読んでウォーミングアップして、あとはそれなりの大きさのタスクをガーッと処理する感じです。不惑の年はとうに越しましたが、集中力が続かない悩みはあまり感じたことはありません。あ、キリが悪いところで止めるテクニックは、プログラマーの間ではテストを失敗させた状態で作業を止めるテクニックとして知られていて、私もたまに使いますね。一方でビジネス職の人には、情報収集方法や仕事の仕方は参考になるかもしれません。Feedly, Pocket, Twitter（のリスト）など、存在や良さげな使い方はプログラマーよりは知らないかもしれませんし、タスクの粒度は小さく、種類は多い印象があります。ということで、気になる方はポチッとすると良いと思いました。ここまでで、私ひとつ嘘をつきました。「『読む力 最新スキル大全』を読んだ」と書きましたが、実際には Fire HD 8 の「Kindle 読み上げ」で全部聞きました。読んでいません。皮肉みたいになって、なんだかすみません。 「マルチタスクワーキング」は集中力など要らない、時間を細切れに使えという提案ですが、聞くという解はあると思います。さすがに私も本を読む集中力は頻繁に切れます。Twitter は見ちゃうし、格闘技系 YouTube も気になる。そんな課題がある中で、Podcast や Voicy は異様に捗っていました。どうやら今の生活にマッチしていたようです。だったら本も聞いてしまえば、集中力が切れる課題を解決できるかな？と試した最初の本が『読む力 最新スキル大全』でした。伏線回収？もしかしたら、佐々木さんの Voicy を聞いているうちに「集中力なんか要らない」という仮説を認識し、それと Podcast や Voicy が生活にマッチしていることがうまく結びついて、課題を解決できたのかもしれません。などと、この記事を書いていて思いました。「Kindle 読み上げ」を使って、どのように本を聞いているかは、近々記事にする予定です。いろいろあって大変でした。(^^;","link":"https://masutaka.net/2022-03-06-1/","isoDate":"2022-03-06T00:00:00.000Z","dateMiliSeconds":1646524800000,"authorName":"masutaka"},{"title":"『GitHubセキュリティ Organization運用のベストプラクティス』を読んだ","content":"昨日、職場の同僚から教えてもらった、昨日公開されたこちらの本を読みました。\nGitHubセキュリティ Organization運用のベストプラクティス 著者は @tmknom さん。[2019-05-07-1] に読んだ『Pragmatic Terraform on AWS』改め『実践Terraform 』の著者でもあります。\n今の会社は 2014 年から GitHub を使っています。当初は全部分かりまっせ！という設定ボリュームでしたが、時を経てものすごくてんこ盛りになり、把握しきれない設定項目も増えてきました。\n本書によって、それらの棚卸しが出来た気がします。\n本自体のボリュームは大きくないので、流し読みすることも出来ますし、適度に GiHub Docs へのリンクになっているため、ガッツリ読むことも出来ます。\nいたく感動したため、少額ながらサポートさせて頂きました。(^^)\n欲張りすぎずにコツコツ改善していくことが大事だと、自分をリセット出来た気がします。","contentSnippet":"昨日、職場の同僚から教えてもらった、昨日公開されたこちらの本を読みました。GitHubセキュリティ Organization運用のベストプラクティス 著者は @tmknom さん。[2019-05-07-1] に読んだ『Pragmatic Terraform on AWS』改め『実践Terraform 』の著者でもあります。今の会社は 2014 年から GitHub を使っています。当初は全部分かりまっせ！という設定ボリュームでしたが、時を経てものすごくてんこ盛りになり、把握しきれない設定項目も増えてきました。本書によって、それらの棚卸しが出来た気がします。本自体のボリュームは大きくないので、流し読みすることも出来ますし、適度に GiHub Docs へのリンクになっているため、ガッツリ読むことも出来ます。いたく感動したため、少額ながらサポートさせて頂きました。(^^)欲張りすぎずにコツコツ改善していくことが大事だと、自分をリセット出来た気がします。","link":"https://masutaka.net/2022-03-03-1/","isoDate":"2022-03-03T00:00:00.000Z","dateMiliSeconds":1646265600000,"authorName":"masutaka"},{"title":"Wi-Fi 6 ルーターを買うまでの長い検討メモと結論、そして数日使った感想","content":"2019/4/1 に買った WN-AX2033GR2/E を Wi-Fi 6 対応ルーターにグレードアップしたくなった。\n ￥5,980 という超安値で買って、特に不満はないどころかかなり満足して使っていたのだけど、ウェブに関わるものとしては最新技術を追いかけたほうが良いと思うし、Wi-Fi 6 ルーターを体感してはみたい。変わるのか変わらないのかを知りたかった。※ 人はそれを物欲と呼びます。\nなどと @meihong のツイートを見て勝手に意識が高まっていた。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ※ 補足すると、[2018-04-30-1] に某 B 社のルーターを買ったものの失敗し、1 年後に上の WN-AX2033GR2/E で取り返した感じです。\n今までの Wi-Fi 規格名は「IEEE 802.11ac」だったんだね。もはや忘れていた。Wi-Fi 6 が出たタイミングで、&ldquo;Wi-Fi 5&rdquo; という新呼称が付いたらしい。Wi-Fi 5 に 2.4GHz 帯がないことも知らなかった。いや気にしてなかった？\n初心者向け 次世代Wi-Fi規格“Wi-Fi 6”とは？ Happy Wi-Fi Life - エレコム株式会社    Wi-Fi 規格名 最大通信速度 周波数 新呼称     IEEE 802.","contentSnippet":"2019/4/1 に買った WN-AX2033GR2/E を Wi-Fi 6 対応ルーターにグレードアップしたくなった。 ￥5,980 という超安値で買って、特に不満はないどころかかなり満足して使っていたのだけど、ウェブに関わるものとしては最新技術を追いかけたほうが良いと思うし、Wi-Fi 6 ルーターを体感してはみたい。変わるのか変わらないのかを知りたかった。※ 人はそれを物欲と呼びます。などと @meihong のツイートを見て勝手に意識が高まっていた。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ※ 補足すると、[2018-04-30-1] に某 B 社のルーターを買ったものの失敗し、1 年後に上の WN-AX2033GR2/E で取り返した感じです。今までの Wi-Fi 規格名は「IEEE 802.11ac」だったんだね。もはや忘れていた。Wi-Fi 6 が出たタイミングで、“Wi-Fi 5” という新呼称が付いたらしい。Wi-Fi 5 に 2.4GHz 帯がないことも知らなかった。いや気にしてなかった？初心者向け 次世代Wi-Fi規格“Wi-Fi 6”とは？ Happy Wi-Fi Life - エレコム株式会社    Wi-Fi 規格名 最大通信速度 周波数 新呼称     IEEE 802.","link":"https://masutaka.net/2022-02-16-1/","isoDate":"2022-02-16T00:00:00.000Z","dateMiliSeconds":1644969600000,"authorName":"masutaka"},{"title":"Gmail のフィルターをコード管理して心の平穏を得ることが出来た","content":"最近は人間からのメールは減り、機械からのメールが多くを占めるようになりました。その中にはメールを停止できなかったり、メール購読を義務付けられた酷いサービスもあります。\n私は仕事もプライベートもインボックス・ゼロを実践しています。それもあって今まで Gmail の検索演算子 をチマチマと調べて、チマチマと設定していましたが、以前から全てを自分の管理下に起きたい欲求がありました。この度ついに強い衝動にかられたので、ゴリッと管理し始めました。\ngmailctl を使うことにした こちらの記事にも影響されて、私的には gmailctl が良いという結論に達しました。\nGmail filters as a code. Using gmailctl to create filters and…｜by Hans Jakob Emmel｜The Startup｜Medium   最初は gmailfilters を試したのですが、既存の Gmail フィルターがほとんど消えてしまいました。本末転倒。つらすぎます&hellip;。(ToT)\nExport や例外処理にバグがあるように見えました。\ngmailctl の README.md Comparison with existing projects でも言及されている gmail-britta は Ruby 製で任意のコードを書けてしまうので、こちらも選択肢から外しました。\n任意のコードを書けてしまうと、凝った設定をする可能性があります。今回は単なる設定に過ぎないので、Terraform の HCL のような宣言型で設定できる gmailctl を採用しました。作者が Google で働いていることも少し考慮に入れました。(^^)v\ngmailctl の導入方法 &ldquo;$ gmailctl init&rdquo; のテキストナビゲーションに従います。Google の OAuth クライアントを作る必要がありますが、これが結構厄介でした。\n$ gmailctl init The credentials are not initialized.","contentSnippet":"最近は人間からのメールは減り、機械からのメールが多くを占めるようになりました。その中にはメールを停止できなかったり、メール購読を義務付けられた酷いサービスもあります。私は仕事もプライベートもインボックス・ゼロを実践しています。それもあって今まで Gmail の検索演算子 をチマチマと調べて、チマチマと設定していましたが、以前から全てを自分の管理下に起きたい欲求がありました。この度ついに強い衝動にかられたので、ゴリッと管理し始めました。gmailctl を使うことにした こちらの記事にも影響されて、私的には gmailctl が良いという結論に達しました。Gmail filters as a code. Using gmailctl to create filters and…｜by Hans Jakob Emmel｜The Startup｜Medium   最初は gmailfilters を試したのですが、既存の Gmail フィルターがほとんど消えてしまいました。本末転倒。つらすぎます…。(ToT)Export や例外処理にバグがあるように見えました。gmailctl の README.md Comparison with existing projects でも言及されている gmail-britta は Ruby 製で任意のコードを書けてしまうので、こちらも選択肢から外しました。任意のコードを書けてしまうと、凝った設定をする可能性があります。今回は単なる設定に過ぎないので、Terraform の HCL のような宣言型で設定できる gmailctl を採用しました。作者が Google で働いていることも少し考慮に入れました。(^^)vgmailctl の導入方法 “$ gmailctl init” のテキストナビゲーションに従います。Google の OAuth クライアントを作る必要がありますが、これが結構厄介でした。$ gmailctl init The credentials are not initialized.","link":"https://masutaka.net/2022-02-13-1/","isoDate":"2022-02-13T00:00:00.000Z","dateMiliSeconds":1644710400000,"authorName":"masutaka"},{"title":"『ボッチLookML開発者兼データ整備人を連れてきたよ！』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『ボッチLookML開発者兼データ整備人を連れてきたよ！』というひどいタイトルの発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTv911SmUBM9fAk-IKQM9139Q29fU7INnUHwbFeOBxolqyybPdlcFHW2dAHBTgr3P9J_kL0Xdhbe38L/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"410\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>2020 年 4 月から Looker に関わって得たことをまとめた内容であるとともに、1 年半近く前からのアップデートになります。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2020/10/23/190000\">developer.feedforce.jp</a></cite></p>\n\n<p>世に出ている Looker の情報はキラキラしているものが多く、ツラい話をそれほど目にしません。<s>絶対にあるはずなのに！😭</s></p>\n\n<p>それならば！とツラい話や解決が困難な話を散りばめさせてもらいました。課題が共有されて初めて知見が役に立つと思いますからね。<em>解決した課題もあるよ（小声）。</em></p>\n\n<p>それでは良い週末を！(^^)/</p>\n","contentSnippet":"こんにちは id:masutaka26 です。本日、週次の社内勉強会 FFTT で『ボッチLookML開発者兼データ整備人を連れてきたよ！』というひどいタイトルの発表をしました。2020 年 4 月から Looker に関わって得たことをまとめた内容であるとともに、1 年半近く前からのアップデートになります。developer.feedforce.jp世に出ている Looker の情報はキラキラしているものが多く、ツラい話をそれほど目にしません。絶対にあるはずなのに！😭それならば！とツラい話や解決が困難な話を散りばめさせてもらいました。課題が共有されて初めて知見が役に立つと思いますからね。解決した課題もあるよ（小声）。それでは良い週末を！(^^)/","link":"https://developer.feedforce.jp/entry/2022/02/04/180000","isoDate":"2022-02-04T09:00:00.000Z","dateMiliSeconds":1643965200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"仮想通貨ウォレットを知るために MetaMask と Coincheck のアカウントを作って、仮想通貨を送金してみた","content":"最近、PodCast や Voicy をよく聞くようになりました。今さらながら散歩や掃除中の「ながら聞き」を覚えたからです。\n格闘技や歴史、テック系をよく聞きます。Off Topic も分からないなりに最近は聞く関係で、仮想通貨やウォレット、Web3 関連の話題は気にはなってました。何も分からない&hellip;。\nという流れで、先週会社でこのツイートが共有されていて「あ、これ進研ゼミで見た Off Topic で聞いたやつだ！」と思い、勢いで試してみました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  この記事も共有されていたので、一旦何も考えずに従いました。\nMetaMask(メタマスク)とは？使い方やログイン方法をスマホ版・PC版ごとに解説｜InvestNavi（インヴェストナビ） ビッコレのアカウント作成は不要 いきなりですが不要です。\n記事中の動画には登場人物が３人います。\n① MetaMask ② Coincheck ③ ビッコレ これ、最後まで関係が分からず混乱していたのですが、私は③ビッコレのアカウント作成は不要でした。記事を書いている会社が運営しているサービスなので、紹介するのは分かるのですがね。\nビッコレは「ポイ活」をしてビットコインをゲットするサービスみたいです。ポイ活とか、ビッコレとか略称っぽいのが多くてワイは疲れました&hellip;。\nLINE の友達になると 250 円相当のビットコインはもらえるのですが、如何せん少なすぎて Coincheck に送金できません。あと、友達をビッコレに招待すると 1,000 円もらえるみたいですが、私は仮想通貨自体には夢を持っていないのでね&hellip;。\n今回はあくまで雰囲気を知ることが目的なので、私にはビッコレアカウント作成は不要でした。\n結果的には、動画をざっと見て①MetaMaskと②Coincheckのアカウントを作るだけで良かったです。記事はより詳しく書いてあって、動画の後に読むと分かりやすかったです。\n仮想通貨の体験だけなら MetaMask も不要 ちなみに Coincheck もウォレットの機能は持っているので、MetaMask は必須ではないのですが、記事によると\n イーサリアムブロックチェーンに連動する金融サービス、ゲーム、NFTを利用するには、仮想通貨ウォレットであるMetaMaskを通して決済しなくてはいけません。\n という話はあるみたいです。なるほど。分からん。\nあとは秘密鍵（シークレットリカバリーフレーズ）がオフラインで管理されることになるため、Coincheck などよりリスクが分散されてはいる理解です。\n心が折れそうになった Coincheck の本人確認 Coincheck のアカウントを作った後に必要な「本人確認」が非常に厄介でした。私は４回失敗しました。２０回くらい動画撮りましたよ&hellip;。","contentSnippet":"最近、PodCast や Voicy をよく聞くようになりました。今さらながら散歩や掃除中の「ながら聞き」を覚えたからです。格闘技や歴史、テック系をよく聞きます。Off Topic も分からないなりに最近は聞く関係で、仮想通貨やウォレット、Web3 関連の話題は気にはなってました。何も分からない…。という流れで、先週会社でこのツイートが共有されていて「あ、これ進研ゼミで見た Off Topic で聞いたやつだ！」と思い、勢いで試してみました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  この記事も共有されていたので、一旦何も考えずに従いました。MetaMask(メタマスク)とは？使い方やログイン方法をスマホ版・PC版ごとに解説｜InvestNavi（インヴェストナビ） ビッコレのアカウント作成は不要 いきなりですが不要です。記事中の動画には登場人物が３人います。① MetaMask ② Coincheck ③ ビッコレ これ、最後まで関係が分からず混乱していたのですが、私は③ビッコレのアカウント作成は不要でした。記事を書いている会社が運営しているサービスなので、紹介するのは分かるのですがね。ビッコレは「ポイ活」をしてビットコインをゲットするサービスみたいです。ポイ活とか、ビッコレとか略称っぽいのが多くてワイは疲れました…。LINE の友達になると 250 円相当のビットコインはもらえるのですが、如何せん少なすぎて Coincheck に送金できません。あと、友達をビッコレに招待すると 1,000 円もらえるみたいですが、私は仮想通貨自体には夢を持っていないのでね…。今回はあくまで雰囲気を知ることが目的なので、私にはビッコレアカウント作成は不要でした。結果的には、動画をざっと見て①MetaMaskと②Coincheckのアカウントを作るだけで良かったです。記事はより詳しく書いてあって、動画の後に読むと分かりやすかったです。仮想通貨の体験だけなら MetaMask も不要 ちなみに Coincheck もウォレットの機能は持っているので、MetaMask は必須ではないのですが、記事によると イーサリアムブロックチェーンに連動する金融サービス、ゲーム、NFTを利用するには、仮想通貨ウォレットであるMetaMaskを通して決済しなくてはいけません。 という話はあるみたいです。なるほど。分からん。あとは秘密鍵（シークレットリカバリーフレーズ）がオフラインで管理されることになるため、Coincheck などよりリスクが分散されてはいる理解です。心が折れそうになった Coincheck の本人確認 Coincheck のアカウントを作った後に必要な「本人確認」が非常に厄介でした。私は４回失敗しました。２０回くらい動画撮りましたよ…。","link":"https://masutaka.net/2022-01-19-1/","isoDate":"2022-01-19T00:00:00.000Z","dateMiliSeconds":1642550400000,"authorName":"masutaka"},{"title":"Manjaro で CD をリッピングする","content":"Asunder という GUI ツールを使えば、簡単にリッピング出来る。\n$ sudo pacman -S asunder エンコーダがないので、Asunder 上で直接 AAC(.m4a) に変換出来ない。「設定」で促されるがままに fdkaac をインストールすれば OK 。\n$ sudo pacman -S fdkaac デフォルトの CDDB サーバ gnudb.gnudb.org:8880 だと、『青天を衝けI』のサントラは引けなかった。有志の方が立てたサーバだと引けた。\n サーバ: freedbtest.dyndns.org\nポート: 80\n ただ『青天を衝けII』は引けなかった。Linux からでもこの freedbtest サーバに登録は出来ると思うが、サイト に書かれているのは Windows アプリ CDex での登録方法のみ。\niTunes だとどちらのサントラも引けた。iTunes は Gracenote という CDDB サーバを使っているらしい？ちなみに CDDB は Gracenote の登録商標らしい。\nfreedbtest サーバに登録できたとしても、YouTube Music に登録するためには、各 .m4a ファイルにアートワークを登録しないと寂しいことになる。なんらかの方法で .m4a ファイルを編集する必要がある。\nそういえば .mp3 ファイルの時は Emacs の mpg123.el 経由で id3put を使って編集した記憶。当時はアートワークなんてものはなかったけどね。懐かしい&hellip;。","contentSnippet":"Asunder という GUI ツールを使えば、簡単にリッピング出来る。$ sudo pacman -S asunder エンコーダがないので、Asunder 上で直接 AAC(.m4a) に変換出来ない。「設定」で促されるがままに fdkaac をインストールすれば OK 。$ sudo pacman -S fdkaac デフォルトの CDDB サーバ gnudb.gnudb.org:8880 だと、『青天を衝けI』のサントラは引けなかった。有志の方が立てたサーバだと引けた。 サーバ: freedbtest.dyndns.orgポート: 80 ただ『青天を衝けII』は引けなかった。Linux からでもこの freedbtest サーバに登録は出来ると思うが、サイト に書かれているのは Windows アプリ CDex での登録方法のみ。iTunes だとどちらのサントラも引けた。iTunes は Gracenote という CDDB サーバを使っているらしい？ちなみに CDDB は Gracenote の登録商標らしい。freedbtest サーバに登録できたとしても、YouTube Music に登録するためには、各 .m4a ファイルにアートワークを登録しないと寂しいことになる。なんらかの方法で .m4a ファイルを編集する必要がある。そういえば .mp3 ファイルの時は Emacs の mpg123.el 経由で id3put を使って編集した記憶。当時はアートワークなんてものはなかったけどね。懐かしい…。","link":"https://masutaka.net/2021-12-30-1/","isoDate":"2021-12-30T00:00:00.000Z","dateMiliSeconds":1640822400000,"authorName":"masutaka"},{"title":"2021 年に買って良かったもの 7 選（ガチ）","content":"年末ということで、今年買って良かったものを紹介します。月に 1 本書くことにしている、ブログ記事のネタが思いつかないこともあり&hellip;。\n1. Anker Magnetic Cable Holder  これはマジおすすめです。机の下にケーブルが落ちて拾うストレスがなくなりました。\n当時の机の天板は少しツルツルで、今はザラザラですが、どちらも全く問題なく吸着しています。シールタイプではないので、剥がした時に跡が残らないのも良いです。\n詳しくは [2021-03-24-1] をどうぞ。\n2. ノートパソコンスタンド  これも良かったです。パソコンを使わない時、個人用と仕事用のどちらも邪魔なく縦置き出来るようになりました。会社の同僚曰く「複数台を縦置きするスタンドの発想はなかったかも……」とのこと。\n詳しくは [2021-04-04-1] をどうぞ。\n3. スマホスタンド  スタンド絡みでもう一丁。個人的には今年の MVP です。\n今使っている Pixel 3a XL [2020-07-14-1] は裏側に指紋センサーがあります。今まで机の上に平置きしていたので、スマホを使おうとすると以下の 2 ステップ必要でした。\n スマホを持ち上げる 指紋認証する  このスタンドのおかげで 1 ステップ減らせました。\n 指紋認証する  横置きも出来るし、裏側のリングを伸ばして壁などにかけられるし、スマホリングにもなるので、万能感があります。普通のスマホスタンドと違って場所を取ることもありません。お値段も 1,000 円ちょっとです。\n4. MacBook Pro 用クーラー  机の上がらみでさらにもう一丁。私の 2 代目 MacBook Pro 用クーラーです。これがないと指先が熱くて仕事になりません。\n完全に仕事用に買いました。個人用の VivoBook では全く不要です。自分の中では正直言って、MacBook Pro は欠陥商品です。あ、ディスってしまった&hellip;。M1 MacBook Pro では不要なことを祈ります。\n詳しくは [2021-05-23-1] をどうぞ。","contentSnippet":"年末ということで、今年買って良かったものを紹介します。月に 1 本書くことにしている、ブログ記事のネタが思いつかないこともあり…。1. Anker Magnetic Cable Holder  これはマジおすすめです。机の下にケーブルが落ちて拾うストレスがなくなりました。当時の机の天板は少しツルツルで、今はザラザラですが、どちらも全く問題なく吸着しています。シールタイプではないので、剥がした時に跡が残らないのも良いです。詳しくは [2021-03-24-1] をどうぞ。2. ノートパソコンスタンド  これも良かったです。パソコンを使わない時、個人用と仕事用のどちらも邪魔なく縦置き出来るようになりました。会社の同僚曰く「複数台を縦置きするスタンドの発想はなかったかも……」とのこと。詳しくは [2021-04-04-1] をどうぞ。3. スマホスタンド  スタンド絡みでもう一丁。個人的には今年の MVP です。今使っている Pixel 3a XL [2020-07-14-1] は裏側に指紋センサーがあります。今まで机の上に平置きしていたので、スマホを使おうとすると以下の 2 ステップ必要でした。 スマホを持ち上げる 指紋認証する  このスタンドのおかげで 1 ステップ減らせました。 指紋認証する  横置きも出来るし、裏側のリングを伸ばして壁などにかけられるし、スマホリングにもなるので、万能感があります。普通のスマホスタンドと違って場所を取ることもありません。お値段も 1,000 円ちょっとです。4. MacBook Pro 用クーラー  机の上がらみでさらにもう一丁。私の 2 代目 MacBook Pro 用クーラーです。これがないと指先が熱くて仕事になりません。完全に仕事用に買いました。個人用の VivoBook では全く不要です。自分の中では正直言って、MacBook Pro は欠陥商品です。あ、ディスってしまった…。M1 MacBook Pro では不要なことを祈ります。詳しくは [2021-05-23-1] をどうぞ。","link":"https://masutaka.net/2021-12-26-1/","isoDate":"2021-12-26T00:00:00.000Z","dateMiliSeconds":1640476800000,"authorName":"masutaka"},{"title":"LookML 開発で使っているディレクトリ構造を紹介する","content":"<p>こんにちは、<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Looker Advent Calendar 2021 の 13 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2021%2Flooker\" title=\"Calendar for Looker | Advent Calendar 2021 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2021/looker\">qiita.com</a></cite></p>\n\n<p>昨日は Yappli 阿部さんの「<a href=\"https://tech.yappli.io/entry/2021/12/12/Sexy_Tech_for_You_9\">Lookerの目標値やストップワードを、Googleスプレッドシート連携でお手軽管理【Sexy Tech for You #9】</a>」でした。Looker を使うとこのような LookML を書くだけで、ビジネスユーザーが SQL を書くことなく、本業に集中できるのはとても良いですよね。</p>\n\n<p>個人的には、SQL ベースの派生テーブルの中で join するよりも、explore で join したほうが Looker らしく、メンテナンス性が良い気がしました。<a href=\"https://help.looker.com/hc/en-us/articles/360023722974\">symmetric 集計</a>が働くため、ファンアウトも避けられます。wikipedia テーブルに関しては、永続的な派生テーブル（PDT）を使って BigQuery のスキャンサイズを抑えるのも良さそうです。</p>\n\n<p>、、、( ﾟдﾟ)ハッ！ついマジレスをしてしまいました。💦</p>\n\n<p>今回は dimension が null の measure を（0 ではなく）ø にする少しマニアックな記事を書く予定でしたが、先日の <a href=\"https://looker-japan-user-group.connpass.com/event/233775/\">Looker User Meetup Online #7</a> で、LookML のディレクトリ構造を知りたいというチャットをお見かけしたので、今回はその話を書くことにしました。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#今回のプロジェクトの規模感\">今回のプロジェクトの規模感</a></li>\n    <li><a href=\"#デフォルトのディレクトリ構造\">デフォルトのディレクトリ構造？</a></li>\n    <li><a href=\"#特別なファイル形式を知る\">特別なファイル形式を知る</a></li>\n    <li><a href=\"#最近使っているディレクトリ構造\">最近使っているディレクトリ構造</a><ul>\n            <li><a href=\"#bigquery\">bigquery/</a></li>\n            <li><a href=\"#model1modellkml\">model1.model.lkml</a></li>\n            <li><a href=\"#explores\">explores/</a></li>\n            <li><a href=\"#views\">views/</a></li>\n            <li><a href=\"#tests\">tests/</a></li>\n            <li><a href=\"#manifestlkml\">manifest.lkml</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#2021-12-29-追記\">2021-12-29 追記</a></li>\n</ul>\n\n<h2 id=\"今回のプロジェクトの規模感\">今回のプロジェクトの規模感</h2>\n\n<p>プロジェクトの規模感によってディレクトリ構造は変わると思うので、先に書いておきます。</p>\n\n<ul>\n<li>Looker インスタンスに 1 つだけ LookML プロジェクトが存在する</li>\n<li>BigQuery Dataset 76 個</li>\n<li><code>.lkml</code> ファイル 277 個\n\n<ul>\n<li><code>.model.lkml</code> ファイル 1 個</li>\n<li><code>.explore.lkml</code> ファイル 56 個</li>\n<li><code>.view.lkml</code> ファイル 139 個</li>\n<li><code>.test.lkml</code> ファイル 78 個</li>\n</ul>\n</li>\n<li>LookML 開発者 1 名</li>\n</ul>\n\n\n<h2 id=\"デフォルトのディレクトリ構造\">デフォルトのディレクトリ構造？</h2>\n\n<p>この記事を書くまで誤解をしていたのですが、デフォルトのディレクトリ構造というものはなかったのですね。この記事を書くために改めて Blank Project を作ったら、ファイルもディレクトリも何もないプロジェクトが作られました。</p>\n\n<p>モデルファイルを作るとこのようなコードが展開されるので、<code>.view.lkml</code> に関しては <code>/views/</code> 以下に作る方が多いと思います。私もそうでした。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;/views/*.view.lkml&#34;                # include all views in the views/ folder in this project\n# include: &#34;/**/*.view.lkml&#34;                 # include all views in this project\n# include: &#34;my_dashboard.dashboard.lookml&#34;   # include a lookml dashboard called my_dashboard</pre>\n\n\n<p>例えばこのようになります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>feedmatic.model.lkml\nviews\n├── all_media.view.lkml\n└── ga.view.lkml</pre>\n\n\n<p>開発初期は <code>feedmatic.model.lkml</code> に view 以外の、explore や datagroup などをズラズラと書いていました。</p>\n\n<h2 id=\"特別なファイル形式を知る\">特別なファイル形式を知る</h2>\n\n<p>ご存知の通り、LookML のファイル形式は <code>.lkml</code> です。</p>\n\n<p>LookML 開発が続くと <code>.model.lkml</code> や <code>.view.lkml</code> などが増えていきますが、この中で唯一意味を持つのが <code>.model.lkml</code> です<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。その他のファイル形式は整理のために自由に作ることが出来ます。</p>\n\n<p>例えば <code>feedmatic.model.lkml</code> を作ると、<code>feedmatic</code> というモデルが定義されます。<code>https://{{your looker domain}}/projects</code> で確認できます。<code>all_media.view.lkml</code> を作っても、何かが作られるわけではありません。</p>\n\n<p>以上の知識を持った上で、公式ドキュメントを読むと理解が深まるかもしれません。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.looker.com%2Fja%2Fdata-modeling%2Flearning-lookml%2Flookml-terms-and-concepts\" title=\"LookMLの用語と概念\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<h2 id=\"最近使っているディレクトリ構造\">最近使っているディレクトリ構造</h2>\n\n<p>こんな感じです。それぞれ解説していきます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>bigquery\n├── spreadsheet1\n│   ├── define.json\n│   └── schema.json\n└── spreadsheet2\n    ├── define.json\n    └── schema.json\nmodel1.model.lkml\nexplores\n├── corp\n│   ├── base.explore.lkml\n│   ├── name1.explore.lkml\n│   └── name2.explore.lkml\n├── explore1.explore.lkml\n└── explore2.explore.lkml\nviews\n├── corp\n│   ├── base.view.lkml\n│   ├── name1.view.lkml\n│   └── name2.view.lkml\n├── view1.view.lkml\n└── view2.view.lkml\ntests\n└── model1\n    ├── corp\n    │   ├── name1.test.lkml\n    │   └── name2.test.lkml\n    ├── explore1.test.lkml\n    └── explore2.test.lkml\nmanifest.lkml</pre>\n\n\n<h3 id=\"bigquery\">bigquery/</h3>\n\n<p>いきなり LookML 関係ありません。💦</p>\n\n<p>BigQuery はデータソースに Google スプレッドシートを指定でき、そのスキーマ定義はコード化することが出来ます。</p>\n\n<p>コード化することで変更履歴を Git で管理できますし、BigQuery CLI を使って簡単に Dataset や Table を作ったり、削除したりが出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bq mk spreadsheet1\n$ bq mk --external_table_definition=./define.json spreadsheet1.gsheet\n$ bq rm -r spreadsheet1</pre>\n\n\n<p>破壊的な変更をする時は、バージョン名を付けた Dataset を新規作成し、LookML から参照先を変えます。こうすることで、本番環境に影響を与えずに開発することが出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bq mk spreadsheet1_v2\n$ bq mk --external_table_definition=./define.json spreadsheet1_v2.gsheet</pre>\n\n\n<p>スキーマ定義は公式ドキュメントをご覧下さい。需要があればそんな記事を書きます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcloud.google.com%2Fconfig-connector%2Fdocs%2Freference%2Fresource-docs%2Fbigquery%2Fbigquerytable%3Fhl%3Dja\" title=\"BigQueryTable  |  Config Connector Documentation  |  Google Cloud\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>他の Dataset は ETL ツール<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>が作るためコード化はしていません。</p>\n\n<h3 id=\"model1modellkml\">model1.model.lkml</h3>\n\n<p>中心となるこのファイルは軽いです。本当にこの程度しか書いていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>connection: &#34;docs_bigquery_db&#34;\n\ninclude: &#34;/explores/**/*.explore&#34;\ninclude: &#34;/tests/model1/**/*.test&#34;\n\nnamed_value_format: jpy_0 {\n  value_format: &#34;\\¥#,##0&#34;\n}\n\nnamed_value_format: jpy_1 {\n  value_format: &#34;\\¥#,##0.0&#34;\n}\n\n# for test\naccess_grant: can_view_explores_for_tests {\n  user_attribute: view_explores_for_tests\n  allowed_values: [&#34;yes&#34;]\n}</pre>\n\n\n<p>必要な定義は <code>connection</code> と <code>include</code> だけです。</p>\n\n<p>include 対象を全ての <code>.explore.lkml</code> と、このモデルに関連するテスト（<code>tests/feedmatic/</code> 以下全ての <code>.test.lkml</code>）だけにしていることがポイントです。つまり <code>.model.lkml</code> は <code>.explore.lkml</code> と自分の <code>.test.lkml</code> しか知りません。</p>\n\n<p>あとは蛇足で、<code>named_value_format</code> と、<a href=\"/entry/2021/08/30/150000\">前回紹介したテスト</a>に必要な <code>access_grant</code> だけです。</p>\n\n<h3 id=\"explores\">explores/</h3>\n\n<p>1 つの explore を 1 つのファイルに定義しています。</p>\n\n<p><code>explores/explore1.explore.lkml</code> はこのように書いています。<code>.explore.lkml</code> は <code>.view.lkml</code> しか知りません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;/views/**/*.view&#34;\n\nexplore: explore1 {\n  # ...\n}</pre>\n\n\n<p>紆余曲折あり、<code>explores/corp/name1.explore.lkml</code> のような取引先ごとの explore もあります。</p>\n\n<p>基本となる <code>explores/corp/base.explore.lkml</code> はこのような定義です。ファイル名と explore 名を変えていることがポイントです。Ruby の慣習を参考にしました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: corp_base {\n  extension: required\n  # ...\n}</pre>\n\n\n<p><code>corp_base</code> explore を継承する、各取引先の explore はこのような定義です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;./base.explore&#34;\ninclude: &#34;/views/**/*.view&#34;\n\nexplore: corp_name1 {\n  extends: [corp_base]\n  # ...\n}</pre>\n\n\n<h3 id=\"views\">views/</h3>\n\n<p>view も explore と同様に、1 view 1 ファイルに定義しています。</p>\n\n<p><code>views/view1.view.lkml</code> です。<code>.view.lkml</code> は <code>.model.lkml</code>, <code>.explore.lkml</code>, <code>.test.lkml</code> の誰も知りません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: view1 {\n  # ...\n}</pre>\n\n\n<p>取引先ごとの view も同じです。<code>views/corp/base.view.lkml</code> はこんな感じで、</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: corp_base {\n  extension: required\n  # ...\n}</pre>\n\n\n<p>継承先の <code>views/corp/name1.view.lkml</code> はこんな感じです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>include: &#34;./base.view&#34;\n\nview: corp_name1 {\n  extends: [corp_base]\n  # ...\n}</pre>\n\n\n<h3 id=\"tests\">tests/</h3>\n\n<p>テストはかなり書いており、2021-12-13 現在、184 もあります。</p>\n\n<p>ほぼ explore 単位でファイル分割しています。分割することで、ファイル単位のテストが可能になっています。</p>\n\n<p>こちらのベストプラクティスに従っています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815\" title=\"LookML Data Tests: Recommendations and Best Practices | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>テスト対象はこんな感じです。</p>\n\n<ul>\n<li>(1) LookML で特別な実装をしていて、壊れても気づくのが難しそうな実装</li>\n<li>(2) <code>primary_key</code> が重複していないか？ null になっていないか？を全ての view に対して</li>\n</ul>\n\n\n<p>(2) は前回詳しく書きました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F08%2F30%2F150000\" title=\"Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>実行に時間がかかることが悩みで以前こんな Topic を作りましたが、反応ゼロでした。みなさん課題ではないのかしら？💦</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Fis-it-possible-to-run-tests-in-parallel-28222\" title=\"Is it possible to run tests in parallel? | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p><code>primary_key</code> は壊れた時に気づくのが難しく、LookML 開発者が私だけということもあるため、機械的に全ての <code>primary_key</code> をテスト出来るようにしています。ただ、全テストは結構時間がかかるので、日に 1 回くらいの頻度で手動実行しています。CI したい...。</p>\n\n<h3 id=\"manifestlkml\">manifest.lkml</h3>\n\n<p>ディレクトリ構造とは関係ありませんが、manifest.lkml についても触れておきましょう。</p>\n\n<p><code>bigquery/</code> の項で書いたとおり、テーブル定義に破壊的な変更を加える時は <code>dataset_v2</code> のように Dataset 名にゆるふわバージョンを付けています。つまり割とカジュアルに Dataset 名が変わります。</p>\n\n<p>そのため、このように manifest.lkml で全ての Dataset 名を定義しています<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>。Dataset 名は複数箇所で使われ得るためです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>constant: table_name1  { value: &#34;`table1_v2.gsheet`&#34; }\nconstant: table_name2  { value: &#34;`table2.view`&#34; }</pre>\n\n\n<p>利用例です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sql_table_name: @{table_name1} ;;</pre>\n\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>現在 LookML 開発で使っているディレクトリ構造を紹介しました。中規模くらいまでの LookML プロジェクトには使える実感があります。</p>\n\n<p>ただ、最近はファイル数が多くなってきて、<code>.view.lkml</code> を追加した時に変更する <code>.explore.lkml</code> と <code>.test.lkml</code> の距離が遠く、実装しづらい課題があります。</p>\n\n<p>Refinements を使えば解決できるのだろうか、もっと再利用性のあるコードにしたいなど、悩みは尽きないです。</p>\n\n<p>こちらの記事は読んで手も動かしたのですが、巨大なファイルを分割する、Blocks のようなライブラリをカスタマイズする（？）、以外の使い方を見いだせていません。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2F%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%25A0-103%2Frefinements%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6lookml%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B-18809\" title=\"Refinementsを使ってLookMLのコードを整理する | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>皆さんのディレクトリ構造も是非教えて下さい！</p>\n\n<h2 id=\"2021-12-29-追記\">2021-12-29 追記</h2>\n\n<p><a href=\"https://community.looker.com/lookml-5/what-is-the-looker-recommended-folder-structure-for-lookml-development-28826\">What is the looker recommended folder structure for LookML development ? | Looker Community</a></p>\n\n<p>Looker Community にもお悩みの方がいらっしゃいました。返信している Dawid さんはよくお見かけする方で、かなりの熟練者だと思います。</p>\n\n<p>そんな彼も、今回私が書いた記事のような物理的な構造が良いのか、論理的な構造が良いのか、未だに試行錯誤しているようです。</p>\n\n<p>始めは物理的なディレクトリ構造から始めて、徐々に変化しながら論理的な構造に近づくのかもしれません。その頃にはステージに応じたベストプラクティスが出ていると良いですね。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>正確に書くと <code>manifest.lkml</code> や <code>.strings.json</code> などもありますが、一旦考えなくて良いと思います。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p><a href=\"https://funnel.io/\">Funnel.io</a> を使っています。<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:3\">\n<p>1 行で書いているのはソートしやすくするためです。<a href=\"#fnref:3\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは、id:masutaka26 です。この記事は Looker Advent Calendar 2021 の 13 日目の記事です。qiita.com昨日は Yappli 阿部さんの「Lookerの目標値やストップワードを、Googleスプレッドシート連携でお手軽管理【Sexy Tech for You #9】」でした。Looker を使うとこのような LookML を書くだけで、ビジネスユーザーが SQL を書くことなく、本業に集中できるのはとても良いですよね。個人的には、SQL ベースの派生テーブルの中で join するよりも、explore で join したほうが Looker らしく、メンテナンス性が良い気がしました。symmetric 集計が働くため、ファンアウトも避けられます。wikipedia テーブルに関しては、永続的な派生テーブル（PDT）を使って BigQuery のスキャンサイズを抑えるのも良さそうです。、、、( ﾟдﾟ)ハッ！ついマジレスをしてしまいました。💦今回は dimension が null の measure を（0 ではなく）ø にする少しマニアックな記事を書く予定でしたが、先日の Looker User Meetup Online #7 で、LookML のディレクトリ構造を知りたいというチャットをお見かけしたので、今回はその話を書くことにしました。今回のプロジェクトの規模感デフォルトのディレクトリ構造？特別なファイル形式を知る最近使っているディレクトリ構造bigquery/model1.model.lkmlexplores/views/tests/manifest.lkmlまとめ2021-12-29 追記今回のプロジェクトの規模感プロジェクトの規模感によってディレクトリ構造は変わると思うので、先に書いておきます。Looker インスタンスに 1 つだけ LookML プロジェクトが存在するBigQuery Dataset 76 個.lkml ファイル 277 個.model.lkml ファイル 1 個.explore.lkml ファイル 56 個.view.lkml ファイル 139 個.test.lkml ファイル 78 個LookML 開発者 1 名デフォルトのディレクトリ構造？この記事を書くまで誤解をしていたのですが、デフォルトのディレクトリ構造というものはなかったのですね。この記事を書くために改めて Blank Project を作ったら、ファイルもディレクトリも何もないプロジェクトが作られました。モデルファイルを作るとこのようなコードが展開されるので、.view.lkml に関しては /views/ 以下に作る方が多いと思います。私もそうでした。include: \"/views/*.view.lkml\"                # include all views in the views/ folder in this project# include: \"/**/*.view.lkml\"                 # include all views in this project# include: \"my_dashboard.dashboard.lookml\"   # include a lookml dashboard called my_dashboard例えばこのようになります。feedmatic.model.lkmlviews├── all_media.view.lkml└── ga.view.lkml開発初期は feedmatic.model.lkml に view 以外の、explore や datagroup などをズラズラと書いていました。特別なファイル形式を知るご存知の通り、LookML のファイル形式は .lkml です。LookML 開発が続くと .model.lkml や .view.lkml などが増えていきますが、この中で唯一意味を持つのが .model.lkml です1。その他のファイル形式は整理のために自由に作ることが出来ます。例えば feedmatic.model.lkml を作ると、feedmatic というモデルが定義されます。https://{{your looker domain}}/projects で確認できます。all_media.view.lkml を作っても、何かが作られるわけではありません。以上の知識を持った上で、公式ドキュメントを読むと理解が深まるかもしれません。最近使っているディレクトリ構造こんな感じです。それぞれ解説していきます。bigquery├── spreadsheet1│   ├── define.json│   └── schema.json└── spreadsheet2    ├── define.json    └── schema.jsonmodel1.model.lkmlexplores├── corp│   ├── base.explore.lkml│   ├── name1.explore.lkml│   └── name2.explore.lkml├── explore1.explore.lkml└── explore2.explore.lkmlviews├── corp│   ├── base.view.lkml│   ├── name1.view.lkml│   └── name2.view.lkml├── view1.view.lkml└── view2.view.lkmltests└── model1    ├── corp    │   ├── name1.test.lkml    │   └── name2.test.lkml    ├── explore1.test.lkml    └── explore2.test.lkmlmanifest.lkmlbigquery/いきなり LookML 関係ありません。💦BigQuery はデータソースに Google スプレッドシートを指定でき、そのスキーマ定義はコード化することが出来ます。コード化することで変更履歴を Git で管理できますし、BigQuery CLI を使って簡単に Dataset や Table を作ったり、削除したりが出来ます。$ bq mk spreadsheet1$ bq mk --external_table_definition=./define.json spreadsheet1.gsheet$ bq rm -r spreadsheet1破壊的な変更をする時は、バージョン名を付けた Dataset を新規作成し、LookML から参照先を変えます。こうすることで、本番環境に影響を与えずに開発することが出来ます。$ bq mk spreadsheet1_v2$ bq mk --external_table_definition=./define.json spreadsheet1_v2.gsheetスキーマ定義は公式ドキュメントをご覧下さい。需要があればそんな記事を書きます。他の Dataset は ETL ツール2が作るためコード化はしていません。model1.model.lkml中心となるこのファイルは軽いです。本当にこの程度しか書いていません。connection: \"docs_bigquery_db\"include: \"/explores/**/*.explore\"include: \"/tests/model1/**/*.test\"named_value_format: jpy_0 {  value_format: \"\\¥#,##0\"}named_value_format: jpy_1 {  value_format: \"\\¥#,##0.0\"}# for testaccess_grant: can_view_explores_for_tests {  user_attribute: view_explores_for_tests  allowed_values: [\"yes\"]}必要な定義は connection と include だけです。include 対象を全ての .explore.lkml と、このモデルに関連するテスト（tests/feedmatic/ 以下全ての .test.lkml）だけにしていることがポイントです。つまり .model.lkml は .explore.lkml と自分の .test.lkml しか知りません。あとは蛇足で、named_value_format と、前回紹介したテストに必要な access_grant だけです。explores/1 つの explore を 1 つのファイルに定義しています。explores/explore1.explore.lkml はこのように書いています。.explore.lkml は .view.lkml しか知りません。include: \"/views/**/*.view\"explore: explore1 {  # ...}紆余曲折あり、explores/corp/name1.explore.lkml のような取引先ごとの explore もあります。基本となる explores/corp/base.explore.lkml はこのような定義です。ファイル名と explore 名を変えていることがポイントです。Ruby の慣習を参考にしました。explore: corp_base {  extension: required  # ...}corp_base explore を継承する、各取引先の explore はこのような定義です。include: \"./base.explore\"include: \"/views/**/*.view\"explore: corp_name1 {  extends: [corp_base]  # ...}views/view も explore と同様に、1 view 1 ファイルに定義しています。views/view1.view.lkml です。.view.lkml は .model.lkml, .explore.lkml, .test.lkml の誰も知りません。view: view1 {  # ...}取引先ごとの view も同じです。views/corp/base.view.lkml はこんな感じで、view: corp_base {  extension: required  # ...}継承先の views/corp/name1.view.lkml はこんな感じです。include: \"./base.view\"view: corp_name1 {  extends: [corp_base]  # ...}tests/テストはかなり書いており、2021-12-13 現在、184 もあります。ほぼ explore 単位でファイル分割しています。分割することで、ファイル単位のテストが可能になっています。こちらのベストプラクティスに従っています。テスト対象はこんな感じです。(1) LookML で特別な実装をしていて、壊れても気づくのが難しそうな実装(2) primary_key が重複していないか？ null になっていないか？を全ての view に対して(2) は前回詳しく書きました。実行に時間がかかることが悩みで以前こんな Topic を作りましたが、反応ゼロでした。みなさん課題ではないのかしら？💦primary_key は壊れた時に気づくのが難しく、LookML 開発者が私だけということもあるため、機械的に全ての primary_key をテスト出来るようにしています。ただ、全テストは結構時間がかかるので、日に 1 回くらいの頻度で手動実行しています。CI したい...。manifest.lkmlディレクトリ構造とは関係ありませんが、manifest.lkml についても触れておきましょう。bigquery/ の項で書いたとおり、テーブル定義に破壊的な変更を加える時は dataset_v2 のように Dataset 名にゆるふわバージョンを付けています。つまり割とカジュアルに Dataset 名が変わります。そのため、このように manifest.lkml で全ての Dataset 名を定義しています3。Dataset 名は複数箇所で使われ得るためです。constant: table_name1  { value: \"`table1_v2.gsheet`\" }constant: table_name2  { value: \"`table2.view`\" }利用例です。sql_table_name: @{table_name1} ;;まとめ現在 LookML 開発で使っているディレクトリ構造を紹介しました。中規模くらいまでの LookML プロジェクトには使える実感があります。ただ、最近はファイル数が多くなってきて、.view.lkml を追加した時に変更する .explore.lkml と .test.lkml の距離が遠く、実装しづらい課題があります。Refinements を使えば解決できるのだろうか、もっと再利用性のあるコードにしたいなど、悩みは尽きないです。こちらの記事は読んで手も動かしたのですが、巨大なファイルを分割する、Blocks のようなライブラリをカスタマイズする（？）、以外の使い方を見いだせていません。皆さんのディレクトリ構造も是非教えて下さい！2021-12-29 追記What is the looker recommended folder structure for LookML development ? | Looker CommunityLooker Community にもお悩みの方がいらっしゃいました。返信している Dawid さんはよくお見かけする方で、かなりの熟練者だと思います。そんな彼も、今回私が書いた記事のような物理的な構造が良いのか、論理的な構造が良いのか、未だに試行錯誤しているようです。始めは物理的なディレクトリ構造から始めて、徐々に変化しながら論理的な構造に近づくのかもしれません。その頃にはステージに応じたベストプラクティスが出ていると良いですね。正確に書くと manifest.lkml や .strings.json などもありますが、一旦考えなくて良いと思います。↩Funnel.io を使っています。↩1 行で書いているのはソートしやすくするためです。↩","link":"https://developer.feedforce.jp/entry/2021/12/13/110000","isoDate":"2021-12-13T02:00:00.000Z","dateMiliSeconds":1639360800000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"『論理が伝わる　世界標準の「書く技術」』を読んだ","content":"職場の同僚が勧めていたので遅ればせながら読みました。私が 20 年近くかけてたどり着いた技術（未だに不完全です）を、この本で習得出来る人が羨ましいです。\n 仕事で少しでも文章を書く人全てにオススメします。ブログを書く人にもオススメできます。反対に、物語を書くための技術ではありません。\n欧米では論理的な文章はパラグラフを使って書くそうです。パラグラフで書けば各パラグラフの先頭文をつまみ食いする、流し読みが出来ます。副次効果として、速読出来る文章になります。もちろんじっくり読むことも出来ます。論理的な文章は物語などと違って、関係者以外は流し読みしたいことが多いですからね。\n特筆すべきことは、この本自体がパラグラフで書かれていることです。流し読みできます。しました。\nパラグラフを適切に使っていれば、文字どおり見た目が良くなると感じてきました。良いメールやブログを書けた時は、見た目に惚れ惚れして何度も眺めたものです。\n社内の日報や手順書、インシデントレポートなどの文書に目を向けると、なんでも箇条書きにされていることが多い印象です。関係性がないものが羅列されており、すごくネストしていることもあります。\nパラグラフで書けば良いのにと、よく思ってきましたが、今まで説得するすべがありませんでした。これからは「この本読んで」で良さそうです。私もこれから意識的にこの本の技術を使います。\nプログラミングにも通じそうです。悪いプログラムは全部読まないと理解できませんが、良いプログラムは先頭の一文（interface）を読めば何となく理解できます。\n同じ著者のプレゼン版もあり、Kindle 版は 330 円割引だったので積みました。いつか読もう。あかん&hellip;。\n ","contentSnippet":"職場の同僚が勧めていたので遅ればせながら読みました。私が 20 年近くかけてたどり着いた技術（未だに不完全です）を、この本で習得出来る人が羨ましいです。 仕事で少しでも文章を書く人全てにオススメします。ブログを書く人にもオススメできます。反対に、物語を書くための技術ではありません。欧米では論理的な文章はパラグラフを使って書くそうです。パラグラフで書けば各パラグラフの先頭文をつまみ食いする、流し読みが出来ます。副次効果として、速読出来る文章になります。もちろんじっくり読むことも出来ます。論理的な文章は物語などと違って、関係者以外は流し読みしたいことが多いですからね。特筆すべきことは、この本自体がパラグラフで書かれていることです。流し読みできます。しました。パラグラフを適切に使っていれば、文字どおり見た目が良くなると感じてきました。良いメールやブログを書けた時は、見た目に惚れ惚れして何度も眺めたものです。社内の日報や手順書、インシデントレポートなどの文書に目を向けると、なんでも箇条書きにされていることが多い印象です。関係性がないものが羅列されており、すごくネストしていることもあります。パラグラフで書けば良いのにと、よく思ってきましたが、今まで説得するすべがありませんでした。これからは「この本読んで」で良さそうです。私もこれから意識的にこの本の技術を使います。プログラミングにも通じそうです。悪いプログラムは全部読まないと理解できませんが、良いプログラムは先頭の一文（interface）を読めば何となく理解できます。同じ著者のプレゼン版もあり、Kindle 版は 330 円割引だったので積みました。いつか読もう。あかん…。","link":"https://masutaka.net/2021-11-29-1/","isoDate":"2021-11-29T00:00:00.000Z","dateMiliSeconds":1638144000000,"authorName":"masutaka"},{"title":"サービス側にメールアドレスを公開しない方法を調べた（Firefox Relay や 1Password + Fastmail のお話）","content":"[2021-08-07-1] にデフォルトブラウザを Firefox に変えて、3 ヶ月くらい続いている。\n昔と違って、基本的な使い勝手や見た目は Chrome と違いがない。当たり前だけど Chrome と比べて良い点も悪い点もある。総合的に割と良い選択をしたと思っている。※ 変化できないことやロックインされることを、最近極端に恐れるようになった事情あり。\nなにかの通知で Firefox Monitor から、自分のメールアドレスやパスワードの流出を確認できることを知った。1Password でも出来るやつね。\nその Firefox Monitor 経由で Firefox Relay も知った。リリース当時のニュースは見ていたと思うので、「思い出した」が正確だと思うけど。\n無料でアカウント作成時に使える捨てメアドを自動生成して本来のメールアドレスを守る「Firefox Relay」レビュー - GIGAZINE ということで、せっかくなので軽く調べてみた。流れで、類似サービスである 1Password+Fastmail や Apple のやつも。\nFirefox Relay https://relay.firefox.com 無料だと 5 つまでランダムなメールアドレスを作れる。\n日曜日はそれ以上作れなかったので、ベータリリースから 1 年以上経ってまだ正式リリースされてないんだ？と改めてログインして確認したら、Premium⁩ プランが現れていた・・・！\nPayPal 払いの $0.99⁩/month。本格的に使うとなるとロックインされるのは確か。さてどう判断するか。\nメールエイリアスを 5 つ作ったから Premium プランが現れたのか、ログイン後数日経ったから現れたのか。どっちだろう？\nオフィシャルで Add-on があるので、割と簡単に作れそう。\nFirefox Relay – 🦊 Firefox (ja) 向け拡張機能を入手 追記(2021-11-18):\nなんとびっくり！このタイミングでの正式リリースでした。メールエイリアスのドメインも relay.firefox.com から mozmail.com に変わってた。\nFirefox上でサービス登録用の捨てメアドを無限に自動生成して管理してくれる「Firefox Relay Premium」が登場 - GIGAZINE 1Password + Fastmail https://1password.","contentSnippet":"[2021-08-07-1] にデフォルトブラウザを Firefox に変えて、3 ヶ月くらい続いている。昔と違って、基本的な使い勝手や見た目は Chrome と違いがない。当たり前だけど Chrome と比べて良い点も悪い点もある。総合的に割と良い選択をしたと思っている。※ 変化できないことやロックインされることを、最近極端に恐れるようになった事情あり。なにかの通知で Firefox Monitor から、自分のメールアドレスやパスワードの流出を確認できることを知った。1Password でも出来るやつね。その Firefox Monitor 経由で Firefox Relay も知った。リリース当時のニュースは見ていたと思うので、「思い出した」が正確だと思うけど。無料でアカウント作成時に使える捨てメアドを自動生成して本来のメールアドレスを守る「Firefox Relay」レビュー - GIGAZINE ということで、せっかくなので軽く調べてみた。流れで、類似サービスである 1Password+Fastmail や Apple のやつも。Firefox Relay https://relay.firefox.com 無料だと 5 つまでランダムなメールアドレスを作れる。日曜日はそれ以上作れなかったので、ベータリリースから 1 年以上経ってまだ正式リリースされてないんだ？と改めてログインして確認したら、Premium⁩ プランが現れていた・・・！PayPal 払いの $0.99⁩/month。本格的に使うとなるとロックインされるのは確か。さてどう判断するか。メールエイリアスを 5 つ作ったから Premium プランが現れたのか、ログイン後数日経ったから現れたのか。どっちだろう？オフィシャルで Add-on があるので、割と簡単に作れそう。Firefox Relay – 🦊 Firefox (ja) 向け拡張機能を入手 追記(2021-11-18):なんとびっくり！このタイミングでの正式リリースでした。メールエイリアスのドメインも relay.firefox.com から mozmail.com に変わってた。Firefox上でサービス登録用の捨てメアドを無限に自動生成して管理してくれる「Firefox Relay Premium」が登場 - GIGAZINE 1Password + Fastmail https://1password.","link":"https://masutaka.net/2021-11-17-1/","isoDate":"2021-11-17T00:00:00.000Z","dateMiliSeconds":1637107200000,"authorName":"masutaka"},{"title":"ニチレイフーズダイレクトが自分に合うかも","content":"ニチレイフーズダイレクト が良い感じです。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  サービスを知ったのはこのサイトです。\nひとり暮らしの僕が「宅食＆食材宅配サービス」を15個試したら、自炊の“苦手度”が下がった 一食あたり 700 円ちょっと。全体的に油控えめなのか、薄味なのか、自分に合います。\n容器が薄いので冷凍庫を有効に使えるのも良い感じです。うちの中型冷蔵庫だと 8 食は余裕で入りました。","contentSnippet":"ニチレイフーズダイレクト が良い感じです。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  サービスを知ったのはこのサイトです。ひとり暮らしの僕が「宅食＆食材宅配サービス」を15個試したら、自炊の“苦手度”が下がった 一食あたり 700 円ちょっと。全体的に油控えめなのか、薄味なのか、自分に合います。容器が薄いので冷凍庫を有効に使えるのも良い感じです。うちの中型冷蔵庫だと 8 食は余裕で入りました。","link":"https://masutaka.net/2021-10-27-1/","isoDate":"2021-10-27T00:00:00.000Z","dateMiliSeconds":1635292800000,"authorName":"masutaka"},{"title":"RIZIN LANDMARK vol.1 の時間帯に発生した U-NEXT の障害体験メモ #RIZIN_LANDMARK #RIZIN_LANDMARK01","content":"RIZIN 初の、配信に特化した格闘技イベント RIZIN LANDMARK vol.1 が 2021-10-02（土）19:00 から開催されるはずだった。ちなみに 4 試合で ¥3,800 と、オトクな料金設定ではない。\nその時間に合わせて 18:45 頃に PC ブラウザで https://video.unext.jp/ にアクセスしたら、しばらく待たされた後 502 Bad Gateway が返ってきた。\nU-NEXT 公式アカウントからはお知らせがあった。https://video.unext.jp/ 自体にアクセス出来ないため、サイト上でのお知らせは確認できず。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  しばらく待ってもアクセスできなかった。スマホアプリならアクセスできるとの情報を目にしたため Android 版をダウンロードしたところ、エラーにはならず静止画を見られた。幸い Chromecast を持っていたため、テレビにキャストして大画面には出来た。\nPC ブラウザだと相変わらず 502 Bad Gateway が発生。その後 404 Not Found のケースや、CloudFront が返す nginx らしきエラー文言も確認できた。スマホアプリはしばらくお待ちくださいメッセージと BGM が流れるのみ。\n自分の経験上、Chromecast でスマホアプリをテレビにキャストするより、PC をテレビに HDMI 接続するほうが安定性が高いので、見られはしたが不安要素はあった。","contentSnippet":"RIZIN 初の、配信に特化した格闘技イベント RIZIN LANDMARK vol.1 が 2021-10-02（土）19:00 から開催されるはずだった。ちなみに 4 試合で ¥3,800 と、オトクな料金設定ではない。その時間に合わせて 18:45 頃に PC ブラウザで https://video.unext.jp/ にアクセスしたら、しばらく待たされた後 502 Bad Gateway が返ってきた。U-NEXT 公式アカウントからはお知らせがあった。https://video.unext.jp/ 自体にアクセス出来ないため、サイト上でのお知らせは確認できず。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  しばらく待ってもアクセスできなかった。スマホアプリならアクセスできるとの情報を目にしたため Android 版をダウンロードしたところ、エラーにはならず静止画を見られた。幸い Chromecast を持っていたため、テレビにキャストして大画面には出来た。PC ブラウザだと相変わらず 502 Bad Gateway が発生。その後 404 Not Found のケースや、CloudFront が返す nginx らしきエラー文言も確認できた。スマホアプリはしばらくお待ちくださいメッセージと BGM が流れるのみ。自分の経験上、Chromecast でスマホアプリをテレビにキャストするより、PC をテレビに HDMI 接続するほうが安定性が高いので、見られはしたが不安要素はあった。","link":"https://masutaka.net/2021-10-03-1/","isoDate":"2021-10-03T00:00:00.000Z","dateMiliSeconds":1633219200000,"authorName":"masutaka"},{"title":"Terraform を使わずに Route 53 の DNS レコードを管理する方法を調べてみた","content":"この１年半はインフラエンジニアっぽい仕事から離れて、LookML 開発者として仕事をしています。自分としてはジョブチェンジで、モチベーションはめっちゃ高いです。うぉー！🔥\nLookML 開発に出来るだけ専念できるように配慮して頂いたり、自分でもそう心がけていますが、それでも DNS レコードの登録依頼や、その他諸々の相談がちょいちょいあります。\nDNS レコードは Route 53 で管理しています。言われるがままに登録していけば悩みはないのですが、何のために登録するのか？や、登録されているこのレコードは何だ？とか考え始めると地味に悩ましいものがあります。\n今の仕事では Terraform は使っていないし、このためだけに Terraform を導入するのはオーバー過ぎます。\nTerraform を導入したらアップデートし続けない選択肢はありませんが、変なエラーでハマって何時間も浪費することがあります。今の仕事の性質上、それは絶対に避けたいので、Terraform 以外で Route 53 の DNS レコードを管理する方法を調べてみました。\nSAM で管理できるか？ つまり CloudFormation 管理下に置くか？ということです。\nTerraform ではツールのアップデートに追随する必要がありますが、SAM なら serverless-application-model のバージョンに追随すれば良いだけです。最新は 2016/10/31 なので、あまり考えなくて良さそうです。\n  結論としては、止めたほうが良いと思いました。良くも悪くも CloudFormation 管理下に置かれるので、Route 53 Console 上で気軽に変更するとコードと乖離してしまいます。そのため常に SAM で変更する必要があります。もっとカジュアルに管理したいのです。\nちなみにこんな template.yaml で DNS レコードを作れます。ただ更新がうまく出来なかった。それ以上は調べてない&hellip;。\nAWSTemplateFormatVersion: &#39;2010-09-09&#39; Transform: AWS::Serverless-2016-10-31 Description: Managed by AWS SAM Resources: Hoge: Type: AWS::Route53::RecordSet Properties: HostedZoneId: xxxxxxxxxxxxxx Name: hoge.masutaka.net. Type: TXT TTL: 300 ResourceRecords: - &#39;&#34;abcdefgxyz&#34;&#39; AWS CLI で管理できるか？ そもそもエネルギーを注ぐところではないので、新しいツールは増やしたくないところ。そういう意味では AWS CLI でどこまで出来るかは興味がありました。","contentSnippet":"この１年半はインフラエンジニアっぽい仕事から離れて、LookML 開発者として仕事をしています。自分としてはジョブチェンジで、モチベーションはめっちゃ高いです。うぉー！🔥LookML 開発に出来るだけ専念できるように配慮して頂いたり、自分でもそう心がけていますが、それでも DNS レコードの登録依頼や、その他諸々の相談がちょいちょいあります。DNS レコードは Route 53 で管理しています。言われるがままに登録していけば悩みはないのですが、何のために登録するのか？や、登録されているこのレコードは何だ？とか考え始めると地味に悩ましいものがあります。今の仕事では Terraform は使っていないし、このためだけに Terraform を導入するのはオーバー過ぎます。Terraform を導入したらアップデートし続けない選択肢はありませんが、変なエラーでハマって何時間も浪費することがあります。今の仕事の性質上、それは絶対に避けたいので、Terraform 以外で Route 53 の DNS レコードを管理する方法を調べてみました。SAM で管理できるか？ つまり CloudFormation 管理下に置くか？ということです。Terraform ではツールのアップデートに追随する必要がありますが、SAM なら serverless-application-model のバージョンに追随すれば良いだけです。最新は 2016/10/31 なので、あまり考えなくて良さそうです。  結論としては、止めたほうが良いと思いました。良くも悪くも CloudFormation 管理下に置かれるので、Route 53 Console 上で気軽に変更するとコードと乖離してしまいます。そのため常に SAM で変更する必要があります。もっとカジュアルに管理したいのです。ちなみにこんな template.yaml で DNS レコードを作れます。ただ更新がうまく出来なかった。それ以上は調べてない…。AWSTemplateFormatVersion: '2010-09-09' Transform: AWS::Serverless-2016-10-31 Description: Managed by AWS SAM Resources: Hoge: Type: AWS::Route53::RecordSet Properties: HostedZoneId: xxxxxxxxxxxxxx Name: hoge.masutaka.net. Type: TXT TTL: 300 ResourceRecords: - '\"abcdefgxyz\"' AWS CLI で管理できるか？ そもそもエネルギーを注ぐところではないので、新しいツールは増やしたくないところ。そういう意味では AWS CLI でどこまで出来るかは興味がありました。","link":"https://masutaka.net/2021-09-27-1/","isoDate":"2021-09-27T00:00:00.000Z","dateMiliSeconds":1632700800000,"authorName":"masutaka"},{"title":"Looker で Join 先の view の primary_key をいい感じにテストする方法をようやく見つけた","content":"<p>こんにちは、<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。\n先週はまるっと夏休みにしてました。今日からまた <a href=\"https://ja.looker.com/\">Looker</a> と戯れる日々が始まります。</p>\n\n<p>丸１年 Looker と戯れてきて最近ようやく、<strong>Join 先の view でも</strong> primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Looker-における-primary_key-の役割\">Looker における primary_key の役割</a></li>\n    <li><a href=\"#primary_key-の実装例\">primary_key の実装例</a></li>\n    <li><a href=\"#LookML-開発におけるテスト\">LookML 開発におけるテスト</a></li>\n    <li><a href=\"#Join-先の-view-は-primary_key-をテスト出来ないことがある\">Join 先の view は primary_key をテスト出来ないことがある</a></li>\n    <li><a href=\"#Join-先の-view-の-primary_key-をいい感じにテストする\">Join 先の view の primary_key をいい感じにテストする</a></li>\n    <li><a href=\"#まとめと所感\">まとめと所感</a></li>\n    <li><a href=\"#おまけ\">おまけ</a></li>\n</ul>\n\n<h2 id=\"Looker-における-primary_key-の役割\">Looker における primary_key の役割</h2>\n\n<p>Looker には <a href=\"https://help.looker.com/hc/en-us/articles/360023722974\">Symmetric Aggregates</a> という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>その Symmetric Aggregates では <a href=\"https://docs.looker.com/reference/field-params/primary_key\">primary_key</a> が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。</p>\n\n<ul>\n<li>primary_key が重複すると fanout エラーが発生することがある</li>\n<li>primary_key が null だと Measure が 0 になることがある</li>\n</ul>\n\n\n<p>このような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。</p>\n\n<h2 id=\"primary_key-の実装例\">primary_key の実装例</h2>\n\n<p>私が所属する <a href=\"https://feedmatic.net/\">Feedmatic</a> では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。</p>\n\n<p>そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>dimension: id {\n  primary_key: yes\n  type: string\n  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, &#39;&#39;)) ;;\n  hidden: yes\n}</pre>\n\n\n<p>※ <a href=\"https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%8F%E3%82%A6%E3%82%B9\">DWH</a> は BigQuery を使っています。</p>\n\n<p>これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭</p>\n\n<h2 id=\"LookML-開発におけるテスト\">LookML 開発におけるテスト</h2>\n\n<p>以上の課題を解決するために、<a href=\"https://docs.looker.com/reference/model-params/test\">test</a> パラメータが使えます。</p>\n\n<p>例えばこのような <code>parent</code> explore があったとします。Join がないのでシンプルです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: parent {\n  ...\n}\n\nview: parent {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n  }\n}</pre>\n\n\n<p>私はこのようなテストを書いて、全ての <code>parent.id</code> が null でないことと、重複しないことを保証させています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>test: parent_id_is_not_null {\n  explore_source: parent {\n    column: id {}\n    sorts: [parent.id: asc]\n    limit: 1\n  }\n  assert: id_is_not_null {\n    expression: NOT is_null(${parent.id}) ;;\n  }\n}\n\ntest: parent_id_is_unique {\n  explore_source: parent {\n    column: id {}\n    column: count {}\n    sorts: [parent.count: desc]\n    limit: 1\n  }\n  assert: id_is_unique {\n    expression: ${parent.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。</p>\n\n<h2 id=\"Join-先の-view-は-primary_key-をテスト出来ないことがある\">Join 先の view は primary_key をテスト出来ないことがある</h2>\n\n<p>さて、<code>child</code> view を Join する必要が出てきました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>explore: parent {\n  join: child {\n    type: left_outer\n    relationship: one_to_many\n    sql_on: ... ;;\n  }\n}\n\nview: parent {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n  }\n}\n\nview: child {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n    hidden: yes\n  }\n}</pre>\n\n\n<p>同じように <code>child.id</code> のテストを書きましたが、うまくいきません。<code>is_not_null</code> はまだしも、<code>is_unique</code> がダメです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># これは OK\ntest: parent_child_id_is_not_null {\n  explore_source: parent {\n    column: id { field: child.id }\n    sorts: [child.id: asc]\n    limit: 1\n  }\n  assert: child_id_is_not_null {\n    expression: NOT is_null(${child.id}) ;;\n  }\n}\n\n# parent の count になり、テストが通らない。\ntest: parent_child_id_is_unique {\n  explore_source: parent {\n    column: id { field: child.id }\n    column: count { field: child.count }\n    sorts: [parent.count: desc]\n    limit: 1\n  }\n  assert: child_id_is_unique {\n    expression: ${child.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも <code>child</code> view の primary_key のテストをしたいだけなのに、Join は邪魔です。</p>\n\n<h2 id=\"Join-先の-view-の-primary_key-をいい感じにテストする\">Join 先の view の primary_key をいい感じにテストする</h2>\n\n<p><code>child</code> view と同じファイルに、こっそり <code>child</code> explore を定義します。<a href=\"https://docs.looker.com/ja/reference/explore-params/hidden-for-explore\">hidden</a> にして存在を消しています。さらに <a href=\"https://docs.looker.com/reference/explore-params/required_access_grants-for-explore\">required_access_grants</a> で、開発者以外の URL 直打ちによるアクセスも防いでいます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>view: child {\n  dimension: id {\n    primary_key: yes\n    ...\n  }\n\n  measure: count {\n    type: count\n    hidden: yes\n  }\n}\n\n# Define for test\nexplore: child {\n  hidden: yes\n  required_access_grants: [can_view_explores_for_tests]\n}</pre>\n\n\n<p><a href=\"https://docs.looker.com/reference/model-params/access_grant\">access_grant</a> である <code>can_view_explores_for_tests</code> はこのような定義です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># For tests\naccess_grant: can_view_explores_for_tests {\n  user_attribute: view_explores_for_tests\n  allowed_values: [&#34;yes&#34;]\n}</pre>\n\n\n<p><a href=\"https://docs.looker.com/admin-options/settings/user-attributes\">User attribute</a> である <code>view_explores_for_tests</code> は、今回のような「Join 先の view をテストすること」全般に使います。User Access は <code>None</code>、Default Value も <code>no</code> です。開発者用の Group を作り、その Group value を <code>yes</code> にしました。</p>\n\n<p>ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。</p>\n\n<p>あとは <code>parent</code> explore と同じようにテストを書くだけです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>test: child_id_is_not_null {\n  explore_source: child {\n    column: id {}\n    sorts: [child.id: asc]\n    limit: 1\n  }\n  assert: id_is_not_null {\n    expression: NOT is_null(${child.id}) ;;\n  }\n}\n\ntest: child_id_is_unique {\n  explore_source: child {\n    column: id {}\n    column: count {}\n    sorts: [child.count: desc]\n    limit: 1\n  }\n  assert: id_is_unique {\n    expression: ${child.count} = 1 ;;\n  }\n}</pre>\n\n\n<p>テストは通っても、LookML validation error が発生するかもしれません。その時は <a href=\"https://docs.looker.com/ja/reference/explore-params/fields-for-explore\">fields</a> パラメータを使って、露出する field を限定すると良いでしょう。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink># Define for test\nexplore: child {\n  hidden: yes\n  required_access_grants: [can_view_explores_for_tests]\n  fields: [child.id, child.count] # Avoid LookML validation error\n}</pre>\n\n\n<p>このテクニックは <a href=\"https://help.looker.com/hc/en-us/articles/360023586293-Error-Unknown-or-Inaccessible-Field\">Error: Unknown or Inaccessible Field – Looker Help Center</a> でも紹介されています。</p>\n\n<h2 id=\"まとめと所感\">まとめと所感</h2>\n\n<p>LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。</p>\n\n<p>もっと良い方法や、今回のやり方はここがマズイとかあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> にお知らせ頂けると大変うれしいです。🙏</p>\n\n<p>Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。</p>\n\n<p>Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。</p>\n\n<p>それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。</p>\n\n<h2 id=\"おまけ\">おまけ</h2>\n\n<p>今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcommunity.looker.com%2Flookml-5%2Flookml-data-tests-recommendations-and-best-practices-20815\" title=\"LookML Data Tests: Recommendations and Best Practices | Looker Community\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。</p>\n","contentSnippet":"こんにちは、id:masutaka26 です。先週はまるっと夏休みにしてました。今日からまた Looker と戯れる日々が始まります。丸１年 Looker と戯れてきて最近ようやく、Join 先の view でも primary_key が壊れてないことを保証するテストの書き方が分かったので、今回紹介します。Looker における primary_key の役割primary_key の実装例LookML 開発におけるテストJoin 先の view は primary_key をテスト出来ないことがあるJoin 先の view の primary_key をいい感じにテストするまとめと所感おまけLooker における primary_key の役割Looker には Symmetric Aggregates という、合計を重複させない素晴らしい仕組みがあります。以前このブログでも紹介しました。その Symmetric Aggregates では primary_key が重要な役割を果たします。適切に設定されていないと、以下のような問題が発生します。primary_key が重複すると fanout エラーが発生することがあるprimary_key が null だと Measure が 0 になることがあるこのような問題は大概、ふわっと質問が来て発覚します。今のタスクを保留にして調査することは精神的になかなか辛いものがあり、それなりに時間も費やすことになるため、可能な限り事前に避けたいところです。primary_key の実装例私が所属する Feedmatic では、ウェブ広告や Google Analytics のデータを扱っています。正規化されたきれいなデータは少なく、Rails の id のようなユニークなカラムは存在しないことが多いです。そのため、このようにいくつかの Dimension を組み合わせて primary_key を定義します。dimension: id {  primary_key: yes  type: string  sql: CONCAT(${dimension1}, ${dimension2}, IFNULL(${dimension3}, '')) ;;  hidden: yes}※ DWH は BigQuery を使っています。これで済めばよいのですが、上の例だとある日突然 dimension2 が null になり始めたり、全ての string 型の Dimension を使っても重複し始めることがあります。データの性格は理解していたつもりでしたが、実際どちらもありました。😭LookML 開発におけるテスト以上の課題を解決するために、test パラメータが使えます。例えばこのような parent explore があったとします。Join がないのでシンプルです。explore: parent {  ...}view: parent {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count  }}私はこのようなテストを書いて、全ての parent.id が null でないことと、重複しないことを保証させています。test: parent_id_is_not_null {  explore_source: parent {    column: id {}    sorts: [parent.id: asc]    limit: 1  }  assert: id_is_not_null {    expression: NOT is_null(${parent.id}) ;;  }}test: parent_id_is_unique {  explore_source: parent {    column: id {}    column: count {}    sorts: [parent.count: desc]    limit: 1  }  assert: id_is_unique {    expression: ${parent.count} = 1 ;;  }}👉 ソート時に null が先頭と末尾のどちらに来るかは、DWH の実装によります。Join 先の view は primary_key をテスト出来ないことがあるさて、child view を Join する必要が出てきました。explore: parent {  join: child {    type: left_outer    relationship: one_to_many    sql_on: ... ;;  }}view: parent {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count  }}view: child {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count    hidden: yes  }}同じように child.id のテストを書きましたが、うまくいきません。is_not_null はまだしも、is_unique がダメです。# これは OKtest: parent_child_id_is_not_null {  explore_source: parent {    column: id { field: child.id }    sorts: [child.id: asc]    limit: 1  }  assert: child_id_is_not_null {    expression: NOT is_null(${child.id}) ;;  }}# parent の count になり、テストが通らない。test: parent_child_id_is_unique {  explore_source: parent {    column: id { field: child.id }    column: count { field: child.count }    sorts: [parent.count: desc]    limit: 1  }  assert: child_id_is_unique {    expression: ${child.count} = 1 ;;  }}よく考えれば当たり前の話で、Join した状態でテストを書いているからです。そもそも child view の primary_key のテストをしたいだけなのに、Join は邪魔です。Join 先の view の primary_key をいい感じにテストするchild view と同じファイルに、こっそり child explore を定義します。hidden にして存在を消しています。さらに required_access_grants で、開発者以外の URL 直打ちによるアクセスも防いでいます。view: child {  dimension: id {    primary_key: yes    ...  }  measure: count {    type: count    hidden: yes  }}# Define for testexplore: child {  hidden: yes  required_access_grants: [can_view_explores_for_tests]}access_grant である can_view_explores_for_tests はこのような定義です。# For testsaccess_grant: can_view_explores_for_tests {  user_attribute: view_explores_for_tests  allowed_values: [\"yes\"]}User attribute である view_explores_for_tests は、今回のような「Join 先の view をテストすること」全般に使います。User Access は None、Default Value も no です。開発者用の Group を作り、その Group value を yes にしました。ここまでやらずとも全員アクセス不可でも良いのですが、テストが落ちた時に「クエリの探索」からの調査ができなくなるので、開発者にはアクセス権を与えるポリシーにしています。あとは parent explore と同じようにテストを書くだけです。test: child_id_is_not_null {  explore_source: child {    column: id {}    sorts: [child.id: asc]    limit: 1  }  assert: id_is_not_null {    expression: NOT is_null(${child.id}) ;;  }}test: child_id_is_unique {  explore_source: child {    column: id {}    column: count {}    sorts: [child.count: desc]    limit: 1  }  assert: id_is_unique {    expression: ${child.count} = 1 ;;  }}テストは通っても、LookML validation error が発生するかもしれません。その時は fields パラメータを使って、露出する field を限定すると良いでしょう。# Define for testexplore: child {  hidden: yes  required_access_grants: [can_view_explores_for_tests]  fields: [child.id, child.count] # Avoid LookML validation error}このテクニックは Error: Unknown or Inaccessible Field – Looker Help Center でも紹介されています。まとめと所感LookML 開発者で、且つテストを書いていて、且つ Join 先の view の primary_key に課題を抱えている、大変ニッチな層向けに記事を書きました。どこかの誰かに参考になれば幸いです。もっと良い方法や、今回のやり方はここがマズイとかあれば @masutaka にお知らせ頂けると大変うれしいです。🙏Feedmatic では今回のような view は数十もあり、primary_key のテストはまだ書き始めたばかりです。Looker ではテストは直列でしか実行されないようで、書けば書くほど全テストが遅くなるのはモヤモヤしています。さすがに要望しようと思ってますが。それに関連して、最近ディレクトリやファイル構成を再検討しました。次回はその記事を書く予定です。おまけ今回の記事を書く過程で、中の人が書いたベストプラクティスを見つけました。今回の記事ほど細かいテクニックは書かれていませんが、全体を網羅した良記事なので要チェックです。","link":"https://developer.feedforce.jp/entry/2021/08/30/150000","isoDate":"2021-08-30T06:00:00.000Z","dateMiliSeconds":1630303200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"Manjaro でハイバネート出来るようにしたメモ","content":"４月から個人 PC を MacBook Air から Linux マシンに変えました。[2021-05-06-1] スライド P41 に書いたとおり、たまにスリープから復帰しなくてつらいです。仕方がないので「スリープしない設定にする。常にAC電源ON🤗」という運用でカバー（）をしていました。😭\n いつまでも続けるわけにもいかないので、今回重い腰を上げてハイバネート出来るようにしました。\nLinux (Xfce4) のスリープ方式 私が使っているウィンドウマネージャーは Xfce4 です。電源管理の設定等で出てくるスリープ関連の用語と、自分なりの理解は以下のとおりです。情報源は Wikipedia です。😆\n・サスペンド\nメモリ以外の給電停止した状態。ACPI では S3 に相当する。\n・ハイバネート\nメモリの内容をストレージに移し電源断。ACPI では S4 に相当する。\n・ハイブリッドスリープ\nサスペンドとハイバネートの中間だと思われるが、試したらすぐハイバネートしただけだった&hellip;。\nmacOS (Big Sur) のスリープ方式 macOS ではサスペンドやハイバネートの使い分けは不要で、意識するのは「スリープ」のみです。以下のような「セーフスリープ 」という機構を備えているそうです。\n・スリープ状態になると、メモリの内容を保持したままストレージにも保存する\n・スリープ中にバッテリーが切れていなければ、復帰時にメモリの内容を使う\n・スリープ中にバッテリーが切れていたら、復帰時にストレージの内容を使う\n奨励はされていませんが、pmset コマンドでスリープ方式を「セーフスリープ」から「スリープ」または「ディープスリープ」に変更は出来るようです。\n「スリープ」は ACPI の S3 に相当し、「ディープスリープ」は S4 に相当するようなので、Xfce4 の「ハイブリッドスリープ」は「セーフスリープ」が本来の振る舞いなのかも。\n※ 状態としての「スリープ」と、その種類としての「スリープ」（と「セーフスリープ」「ディープスリープ」）があるので、文章がややこしいです。\nLinux と macOS の振る舞いの違い macOS の素晴らしい点に、ユーザーにスリープをほぼ意識させない設計があると思います。\nサスペンドやハイバネートのような用語が現れないこともさることながら、MacBook なら蓋を開けばログイン画面が表示されるだけです。多少復帰がもたつくことはあるのはご愛嬌。\nLinux はサスペンドは同じとしても、ハイバネートは OS の起動から始まるので、「あれ？バッテリー切れてた？」と一瞬不安になります。Windows も同じという理解です。\nどの OS もバックグラウンドの処理は同じだと思います。macOS はユーザーへの見せ方がきれいですね。","contentSnippet":"４月から個人 PC を MacBook Air から Linux マシンに変えました。[2021-05-06-1] スライド P41 に書いたとおり、たまにスリープから復帰しなくてつらいです。仕方がないので「スリープしない設定にする。常にAC電源ON🤗」という運用でカバー（）をしていました。😭 いつまでも続けるわけにもいかないので、今回重い腰を上げてハイバネート出来るようにしました。Linux (Xfce4) のスリープ方式 私が使っているウィンドウマネージャーは Xfce4 です。電源管理の設定等で出てくるスリープ関連の用語と、自分なりの理解は以下のとおりです。情報源は Wikipedia です。😆・サスペンドメモリ以外の給電停止した状態。ACPI では S3 に相当する。・ハイバネートメモリの内容をストレージに移し電源断。ACPI では S4 に相当する。・ハイブリッドスリープサスペンドとハイバネートの中間だと思われるが、試したらすぐハイバネートしただけだった…。macOS (Big Sur) のスリープ方式 macOS ではサスペンドやハイバネートの使い分けは不要で、意識するのは「スリープ」のみです。以下のような「セーフスリープ 」という機構を備えているそうです。・スリープ状態になると、メモリの内容を保持したままストレージにも保存する・スリープ中にバッテリーが切れていなければ、復帰時にメモリの内容を使う・スリープ中にバッテリーが切れていたら、復帰時にストレージの内容を使う奨励はされていませんが、pmset コマンドでスリープ方式を「セーフスリープ」から「スリープ」または「ディープスリープ」に変更は出来るようです。「スリープ」は ACPI の S3 に相当し、「ディープスリープ」は S4 に相当するようなので、Xfce4 の「ハイブリッドスリープ」は「セーフスリープ」が本来の振る舞いなのかも。※ 状態としての「スリープ」と、その種類としての「スリープ」（と「セーフスリープ」「ディープスリープ」）があるので、文章がややこしいです。Linux と macOS の振る舞いの違い macOS の素晴らしい点に、ユーザーにスリープをほぼ意識させない設計があると思います。サスペンドやハイバネートのような用語が現れないこともさることながら、MacBook なら蓋を開けばログイン画面が表示されるだけです。多少復帰がもたつくことはあるのはご愛嬌。Linux はサスペンドは同じとしても、ハイバネートは OS の起動から始まるので、「あれ？バッテリー切れてた？」と一瞬不安になります。Windows も同じという理解です。どの OS もバックグラウンドの処理は同じだと思います。macOS はユーザーへの見せ方がきれいですね。","link":"https://masutaka.net/2021-08-25-1/","isoDate":"2021-08-25T00:00:00.000Z","dateMiliSeconds":1629849600000,"authorName":"masutaka"},{"title":"私が１年かけて辿り着いた Looker の情報収集方法を紹介する","content":"<p>こんばんは、<del>徳川家ｙ</del> <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>以前紹介したように、去年から <a href=\"https://ja.looker.com/\">Looker</a> を使ったウェブ広告数値の可視化や BI <a href=\"#f-25b67c2a\" name=\"fn-25b67c2a\" title=\"Business Intelligence\">*1</a> に取り組んでいます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2020%2F10%2F23%2F190000\" title=\"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。</p>\n\n<p>LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。</p>\n\n<p>現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#情報源をリストアップする\">「情報源」をリストアップする</a></li>\n    <li><a href=\"#少し脱線\">少し脱線...</a></li>\n    <li><a href=\"#情報源の取得方法への課題\">「情報源」の取得方法への課題</a></li>\n    <li><a href=\"#今はどうなったか\">今はどうなったか？</a></li>\n    <li><a href=\"#Looker-Communityのフィードが存在した件\">「Looker Community」のフィードが存在した件</a></li>\n    <li><a href=\"#Looker-の記事一覧--DevelopersIOのフィードを作った件\">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#追記\">追記</a></li>\n</ul>\n\n<h2 id=\"情報源をリストアップする\">「情報源」をリストアップする</h2>\n\n<p>初めはこれらをたまに見に行ったり、Slack の <code>/feed subscribe</code> <a href=\"#f-e46aea89\" name=\"fn-e46aea89\" title=\"Slack に RSS フィードを追加する | Slack\">*2</a> で購読したりしてました。</p>\n\n<ul>\n<li><a href=\"https://community.looker.com/\">Looker Community</a>\n\n<ul>\n<li>公式フォーラム。英語で Question や Conversation が出来る</li>\n</ul>\n</li>\n<li><p><a href=\"https://community.looker.com/%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A9%E3%83%A0-japanese-161\">Looker 日本語コミュニティフォーラム</a></p>\n\n<ul>\n<li>「Looker Community」の日本語版。<a href=\"https://docs.looker.com/relnotes/intro\">Release Notes</a> の日本語訳には本当に感謝 🙏</li>\n<li><p>「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される</p>\n\n<p>  <figure class=\"figure-image figure-image-fotolife\" title=\"Looker 日本語コミュニティフォーラム\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815145002.png\" alt=\"f:id:masutaka26:20210815145002p:plain\" width=\"1200\" height=\"382\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker 日本語コミュニティフォーラム</figcaption></figure></p></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.facebook.com/groups/721814241538725\">Looker APAC Forum | Facebook</a></p>\n\n<ul>\n<li>リリース案内や事例紹介など</li>\n</ul>\n</li>\n<li><a href=\"https://dev.classmethod.jp/tags/looker/\">Looker の記事一覧 | DevelopersIO</a>\n\n<ul>\n<li>ご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度</li>\n</ul>\n</li>\n<li><a href=\"https://zenn.dev/topics/looker\">Lookerの記事一覧 | Zenn</a>\n\n<ul>\n<li>Zenn にもそれなりの頻度で投稿される</li>\n</ul>\n</li>\n<li><a href=\"https://qiita.com/tags/looker\">Looker - Qiita</a>\n\n<ul>\n<li>Qiita はもう少し頻度は落ちるかな</li>\n</ul>\n</li>\n<li><a href=\"https://twitter.com/search?q=%23looker%20lang%3Aja&amp;f=live&amp;vertical=default\">#looker lang:ja - Twitter 検索</a>\n\n<ul>\n<li>以上の情報をふわっと取得できる。<code>looker lang:ja</code> や <code>#looker</code> だとノイズが多いのでこれに落ち着いた</li>\n</ul>\n</li>\n</ul>\n\n\n<h2 id=\"少し脱線\">少し脱線...</h2>\n\n<p>Looker Community には過去一度だけ質問しました。</p>\n\n<p><a href=\"https://community.looker.com/lookml-5/how-do-i-dynamically-switch-view-name-in-sql-parameter-of-dimension-27831\">How do I dynamically switch view name in sql parameter of dimension? | Looker Community</a></p>\n\n<p>私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。</p>\n\n<p>扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀</p>\n\n<p>Looker の水野さんが日本語訳して下さっている、Looker のリリースノート <a href=\"#f-c898f381\" name=\"fn-c898f381\" title=\"例: Looker 21.12 リリースノート | Looker Community\">*3</a> は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Looker 21.12 のリリースノートを眺めてみた\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160438.png\" alt=\"f:id:masutaka26:20210815160438p:plain\" width=\"1200\" height=\"849\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker 21.12 のリリースノートを眺めてみた</figcaption></figure></p>\n\n<p>今まで書いた記事です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Looker のリリースノートを眺めてみたシリーズ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210815/20210815160356.png\" alt=\"f:id:masutaka26:20210815160356p:plain\" width=\"1200\" height=\"887\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Looker のリリースノートを眺めてみたシリーズ</figcaption></figure></p>\n\n<h2 id=\"情報源の取得方法への課題\">「情報源」の取得方法への課題</h2>\n\n<p>RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。</p>\n\n<p>そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。</p>\n\n<h2 id=\"今はどうなったか\">今はどうなったか？</h2>\n\n<p>ほぼすべてを社内の Slack channel <code>#news-looker</code> に集約させることが出来ました。</p>\n\n<p>以下が実際に購読しているフィードです。</p>\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/buzzcapture\">https://community.looker.com/feed/buzzcapture</a>\n\n<ul>\n<li>「Looker Community」のフィード。後述する</li>\n</ul>\n</li>\n<li><a href=\"https://feed43.com/developersio-looker.xml\">https://feed43.com/developersio-looker.xml</a>\n\n<ul>\n<li>「Looker の記事一覧 | DevelopersIO」のフィード。後述する</li>\n</ul>\n</li>\n<li><a href=\"https://zenn.dev/topics/looker/feed\">https://zenn.dev/topics/looker/feed</a>\n\n<ul>\n<li>「Lookerの記事一覧 | Zenn」のフィード</li>\n</ul>\n</li>\n<li><a href=\"https://qiita.com/tags/looker/feed\">https://qiita.com/tags/looker/feed</a>\n\n<ul>\n<li>「Looker - Qiita」のフィード</li>\n</ul>\n</li>\n</ul>\n\n\n<p>Twitter は <a href=\"https://ifttt.com/\">IFTTT</a> を使って、同 channel に POST しています。</p>\n\n<ul>\n<li><code>If</code> New tweet from search <code>#looker OR LookML lang:ja -rt</code></li>\n<li><code>Then</code> Post to channel\n\n<ul>\n<li>Channel: <code>#news-looker</code></li>\n<li>Message: <code>@{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。</p>\n\n<h2 id=\"Looker-Communityのフィードが存在した件\">「Looker Community」のフィードが存在した件</h2>\n\n<p><a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA-the-kitchen-table-%E3%81%8C%E5%85%AC%E9%96%8B%E3%81%95%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F-24032?postid=45126#post45126\">Looker の水野さんに聞いたら、調べて教えて下さいました。</a>🙏</p>\n\n<ul>\n<li>(1) 新しいトピックの投稿\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/topics\">https://community.looker.com/feed/topics</a></li>\n</ul>\n</li>\n<li>(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）\n\n<ul>\n<li><a href=\"https://community.looker.com/feed/buzzcapture\">https://community.looker.com/feed/buzzcapture</a></li>\n</ul>\n</li>\n</ul>\n\n\n<p>アナウンス記事です。\n<a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AErss%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89-25553?postid=46404#post46404\">LookerコミュニティのRSSフィード | Looker Community</a></p>\n\n<p>(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。</p>\n\n<p>今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。</p>\n\n<p><a href=\"https://community.looker.com/\">https://community.looker.com/</a> の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。</p>\n\n<h2 id=\"Looker-の記事一覧--DevelopersIOのフィードを作った件\">「Looker の記事一覧 | DevelopersIO」のフィードを作った件</h2>\n\n<p>ないものは仕方がないので、<a href=\"https://feed43.com/\">Feed43</a> というサービスで作りました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2021-03-14-1.html\" title=\"フィード（RSS/Atom）を配信していないサイトのフィードを Feed43 で作成する\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>出来たのが <a href=\"https://feed43.com/developersio-looker.xml\">https://feed43.com/developersio-looker.xml</a> です。どなたでも購読可能です。よろしければどうぞ。</p>\n\n<p>HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。</p>\n\n<p>本当は <a href=\"https://dev.classmethod.jp/tags/looker/\">https://dev.classmethod.jp/tags/looker/</a> のフィードがあれば良いのですけどね。今後に期待です。</p>\n\n<p>[Update] そのものズバリ <a href=\"https://dev.classmethod.jp/feed/?tag=looker\">https://dev.classmethod.jp/feed/?tag=looker</a> を <a href=\"https://twitter.com/sh19910711/status/1427429573117964306\">Twitterで教えて</a>頂きました。ありがとうございます！</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。</p>\n\n<p>これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥\n※ ネタは少しあるけど、時間がない。(^^;</p>\n\n<p>皆さんにも参考になれば幸いです。他にもあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> に教えて下さい！</p>\n\n<h2 id=\"追記\">追記</h2>\n\n<blockquote><p>他にもあれば <a href=\"https://twitter.com/masutaka\">@masutaka</a> に教えて下さい！</p></blockquote>\n\n<p>記事にも登場して頂いた Looker の水野さん <a href=\"https://twitter.com/tomoya_cs\">@tomoya_cs</a> をフォローするとさらに捗ると思います。</p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭<br>あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） <a href=\"https://t.co/eDQz8A5VCC\">https://t.co/eDQz8A5VCC</a></p>&mdash; tomoya | Looker CS (@tomoya_cs) <a href=\"https://twitter.com/tomoya_cs/status/1428194155943972872?ref_src=twsrc%5Etfw\">2021年8月19日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-25b67c2a\" name=\"f-25b67c2a\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://ja.wikipedia.org/wiki/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%86%E3%83%AA%E3%82%B8%E3%82%A7%E3%83%B3%E3%82%B9\">Business Intelligence</a></span></p>\n<p class=\"footnote\"><a href=\"#fn-e46aea89\" name=\"f-e46aea89\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://slack.com/intl/ja-jp/help/articles/218688467-Slack-%E3%81%AB-RSS-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">Slack に RSS フィードを追加する | Slack</a></span></p>\n<p class=\"footnote\"><a href=\"#fn-c898f381\" name=\"f-c898f381\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">例: <a href=\"https://community.looker.com/%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8%E5%91%8A%E7%9F%A5-100/looker-21-12-%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88-27799\">Looker 21.12 リリースノート | Looker Community</a></span></p>\n</div>","contentSnippet":"こんばんは、徳川家ｙ id:masutaka26 です。以前紹介したように、去年から Looker を使ったウェブ広告数値の可視化や BI *1 に取り組んでいます。LookML 開発者として LookML を書き始めて困ったのが、Looker の情報が少ないように見えたことです。LookML を含む Looker のドキュメントは充実しているのですが、それらを組み合わせた応用的なフロー情報が少なく感じました。ビジネスユーザー向けの情報も同様です。現在は網羅的、かつ集約した情報を取得できているので、その方法をご紹介します。「情報源」をリストアップする少し脱線...「情報源」の取得方法への課題今はどうなったか？「Looker Community」のフィードが存在した件「Looker の記事一覧 | DevelopersIO」のフィードを作った件まとめ追記「情報源」をリストアップする初めはこれらをたまに見に行ったり、Slack の /feed subscribe *2 で購読したりしてました。Looker Community公式フォーラム。英語で Question や Conversation が出来るLooker 日本語コミュニティフォーラム「Looker Community」の日本語版。Release Notes の日本語訳には本当に感謝 🙏「ニュースと告知」「ヘルプとサポート」「コラム」はそれぞれ Subscribe 出来る。メールで通知される  Looker 日本語コミュニティフォーラムLooker APAC Forum | Facebookリリース案内や事例紹介などLooker の記事一覧 | DevelopersIOご存知クラスメソッドさんのブログ。国内最多の記事量と投稿頻度Lookerの記事一覧 | ZennZenn にもそれなりの頻度で投稿されるLooker - QiitaQiita はもう少し頻度は落ちるかな#looker lang:ja - Twitter 検索以上の情報をふわっと取得できる。looker lang:ja や #looker だとノイズが多いのでこれに落ち着いた少し脱線...Looker Community には過去一度だけ質問しました。How do I dynamically switch view name in sql parameter of dimension? | Looker Community私は日本語サポートに頼ることが多い傾向です。最近はだいぶ減らせています。扱う情報を外に出せないので、外に出せるところまで昇華するのは難しいですね。🌀Looker の水野さんが日本語訳して下さっている、Looker のリリースノート *3 は、去年の 12 月から社内向けにこんな記事を書いて、Looker に徹底的に向き合うようにしています。Looker 21.12 のリリースノートを眺めてみた今まで書いた記事です。Looker のリリースノートを眺めてみたシリーズ「情報源」の取得方法への課題RSS/Atom（フィード）を配信していないサイトがほとんどで、見に行くのがかなり面倒でした。そのものズバリなフィードは Zenn と Qiita だけです。クラスメソッドさんは Looker タグのフィードが存在せず、当時は Twitter で捕捉してました。今はどうなったか？ほぼすべてを社内の Slack channel #news-looker に集約させることが出来ました。以下が実際に購読しているフィードです。https://community.looker.com/feed/buzzcapture「Looker Community」のフィード。後述するhttps://feed43.com/developersio-looker.xml「Looker の記事一覧 | DevelopersIO」のフィード。後述するhttps://zenn.dev/topics/looker/feed「Lookerの記事一覧 | Zenn」のフィードhttps://qiita.com/tags/looker/feed「Looker - Qiita」のフィードTwitter は IFTTT を使って、同 channel に POST しています。If New tweet from search #looker OR LookML lang:ja -rtThen Post to channelChannel: #news-lookerMessage: @{{UserName}} : {{Text}} (via Twitter {{LinkToTweet}})「Looker APAC Forum | Facebook」は集約できませんでしたが、Twitter にも流れることがあるので、一旦考えないことにしました。「Looker Community」のフィードが存在した件Looker の水野さんに聞いたら、調べて教えて下さいました。🙏(1) 新しいトピックの投稿https://community.looker.com/feed/topics(2) 全ての新しい投稿（最初の投稿（タイトル＋ボディ）+ 全てのリプライ）https://community.looker.com/feed/buzzcaptureアナウンス記事です。LookerコミュニティのRSSフィード | Looker Community(1) と (2) は両方とも「Looker 日本語コミュニティフォーラム」の情報も流れてきます。今は (2) を購読しており、トラフィックはそれなりにあります。もちろんほぼ全て英語です。辛かったら (1) にすると良いと思います。https://community.looker.com/ の HTML には RSS/Atom 情報がないので、これらのフィードに気づける人は少ないと思います。Looker さんには是非お願いしたいところです。「Looker の記事一覧 | DevelopersIO」のフィードを作った件ないものは仕方がないので、Feed43 というサービスで作りました。出来たのが https://feed43.com/developersio-looker.xml です。どなたでも購読可能です。よろしければどうぞ。HTML をパースしているだけなので、HTML 構造が変わったら壊れることはあると思います。気づけたら直します。本当は https://dev.classmethod.jp/tags/looker/ のフィードがあれば良いのですけどね。今後に期待です。[Update] そのものズバリ https://dev.classmethod.jp/feed/?tag=looker を Twitterで教えて頂きました。ありがとうございます！まとめ私が１年かけて辿り着いた、Looker の情報取得方法をご紹介しました。これで Looker の情報は大量にインプット出来たので、今後はコミュニティにアウトプットしていきます。🔥※ ネタは少しあるけど、時間がない。(^^;皆さんにも参考になれば幸いです。他にもあれば @masutaka に教えて下さい！追記他にもあれば @masutaka に教えて下さい！記事にも登場して頂いた Looker の水野さん @tomoya_cs をフォローするとさらに捗ると思います。Lookerの情報収集本当に至難と思いますが、まとめていただきありがとうございます😭あとは私をフォローいただけると最新情報が入手しやすくなるかと（アウトプットがんばります🙇‍♂️） https://t.co/eDQz8A5VCC— tomoya | Looker CS (@tomoya_cs) 2021年8月19日  *1:Business Intelligence*2:Slack に RSS フィードを追加する | Slack*3:例: Looker 21.12 リリースノート | Looker Community","link":"https://developer.feedforce.jp/entry/2021/08/16/150000","isoDate":"2021-08-16T06:00:00.000Z","dateMiliSeconds":1629093600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"Chrome から Firefox に乗り換えたよ","content":"[2011-06-03-1] に Firefox から Chrome に乗り換えて以来です。ちょうど 10 年。iPhone から Android への乗り換え [2020-07-14-1] も 10 年だったし、飽きづらいマスタカも 10 年が周期みたいです。\nまあ、普通の人は乗り換えたことをいちいち記録しないし、もっとカジュアルにあっちこっち使う気はしてます。\nこのブログの名前が「マスタカの ChangeLog メモ」なので記録せざるを得ないのです。もう大変。(&gt;o&lt;)\n飽きたのはありますが、この Issue がきっかけではあります。Xkeysnail と Chrome の組み合わせで、カーソル移動やタブ移動のキーが 2 回発行されてしまう問題です。もう修正されたようですが、回避方法がダウングレードしかなく地味に厄介でした。そんな私はブラウザ乗り換えで回避したという&hellip;。\n10 年前は Firefox と Keysnail を使っていました。個人 PC を Linux にした ことで、また同じ作者である mooz さん作の Xkeysnail を Firefox でも使うことには感慨深いものがあります。\nそういえば Manjaro (Linux) のデフォルトブラウザは Firefox でした。それも戻った理由ではあるかな。Chrome だと AUR でインストールする必要があるのですよね。\n10 年と書きましたが、その間 2 回ほど Firefox に戻ろうとしていました。\n2017 年の時は、20 日程度戻ってました。当時は Quantum として大型アップデートされた直後で、アドオンが割と壊れていた記憶。1Password アドオンはまだなかった。あと、Multi-Account Containers に惑わされてしまった。\nloading...","contentSnippet":"[2011-06-03-1] に Firefox から Chrome に乗り換えて以来です。ちょうど 10 年。iPhone から Android への乗り換え [2020-07-14-1] も 10 年だったし、飽きづらいマスタカも 10 年が周期みたいです。まあ、普通の人は乗り換えたことをいちいち記録しないし、もっとカジュアルにあっちこっち使う気はしてます。このブログの名前が「マスタカの ChangeLog メモ」なので記録せざるを得ないのです。もう大変。(>o<)飽きたのはありますが、この Issue がきっかけではあります。Xkeysnail と Chrome の組み合わせで、カーソル移動やタブ移動のキーが 2 回発行されてしまう問題です。もう修正されたようですが、回避方法がダウングレードしかなく地味に厄介でした。そんな私はブラウザ乗り換えで回避したという…。10 年前は Firefox と Keysnail を使っていました。個人 PC を Linux にした ことで、また同じ作者である mooz さん作の Xkeysnail を Firefox でも使うことには感慨深いものがあります。そういえば Manjaro (Linux) のデフォルトブラウザは Firefox でした。それも戻った理由ではあるかな。Chrome だと AUR でインストールする必要があるのですよね。10 年と書きましたが、その間 2 回ほど Firefox に戻ろうとしていました。2017 年の時は、20 日程度戻ってました。当時は Quantum として大型アップデートされた直後で、アドオンが割と壊れていた記憶。1Password アドオンはまだなかった。あと、Multi-Account Containers に惑わされてしまった。loading...","link":"https://masutaka.net/2021-08-07-1/","isoDate":"2021-08-07T00:00:00.000Z","dateMiliSeconds":1628294400000,"authorName":"masutaka"},{"title":"３月に無償提供となった Microsoft Power Automate Desktop を今さらながら使ってみた","content":"※ 会社の「インフラ共有会」用に書いた記事の転載です。Windows PC を買った [2021-05-06-1] ので、個人で試せることに気づいてちょろっと試したって経緯です。\nMicrosoft、自社製RPAツールを全Windows 10ユーザーに無償提供　マウスクリックやキーボード入力をGUIで自動化：Microsoft Ignite 2021 - ITmedia NEWS ・動作するのは目の前の Windows PC。エクセルとかのマクロをパワーアップしたものに近いかも\n・ スケジュール（時間を指定した自動実行）の機能は見つけられなかった。寝ている間に自動実行とかは出来ない気がした\n・Chrome の「要素を検証」みたいな感覚で、クリックやフォームの位置を指定できる\n・要素名を変更するなど細かい微調整は出来ないようなので、id 名等が少しでも変わるとフローが動かなくなるかも\n・アクションの種類は多彩で、頑張れば「LINEビジネスアカウントでログインして、レポートをローカルフォルダにダウンロードし、それを Google スプレッドシートにインポート」は出来ると思う\n・今起動しているブラウザにも接続できるようなので、２段階認証突破のハードルは多少低そう\nPower Automate と Power Automate Desktop との違いはイマイチ理解できていない。難しい&hellip;。\n・Power Automate ・Power Automate Desktop ← 今回はこっち\n多彩なアクション ※ フローの新規作成画面です。\nフローを作った様子 https://www.myfitnesspal.com/ja/account/login にログインして csv ファイルをダウンロードするフローを作ったが、MyFitnesspal は「CSV ファイルをダウンロードするためのリンクを含んだメールが届きます」だと知った。試しに作るには大きすぎるため心が折れた。(^^;\nインストール方法や実行方法などの紹介動画 うぃんどうずしょしんしゃなので、わかりやすいどうがをみたよ。\n ","contentSnippet":"※ 会社の「インフラ共有会」用に書いた記事の転載です。Windows PC を買った [2021-05-06-1] ので、個人で試せることに気づいてちょろっと試したって経緯です。Microsoft、自社製RPAツールを全Windows 10ユーザーに無償提供　マウスクリックやキーボード入力をGUIで自動化：Microsoft Ignite 2021 - ITmedia NEWS ・動作するのは目の前の Windows PC。エクセルとかのマクロをパワーアップしたものに近いかも・ スケジュール（時間を指定した自動実行）の機能は見つけられなかった。寝ている間に自動実行とかは出来ない気がした・Chrome の「要素を検証」みたいな感覚で、クリックやフォームの位置を指定できる・要素名を変更するなど細かい微調整は出来ないようなので、id 名等が少しでも変わるとフローが動かなくなるかも・アクションの種類は多彩で、頑張れば「LINEビジネスアカウントでログインして、レポートをローカルフォルダにダウンロードし、それを Google スプレッドシートにインポート」は出来ると思う・今起動しているブラウザにも接続できるようなので、２段階認証突破のハードルは多少低そうPower Automate と Power Automate Desktop との違いはイマイチ理解できていない。難しい…。・Power Automate ・Power Automate Desktop ← 今回はこっち多彩なアクション ※ フローの新規作成画面です。フローを作った様子 https://www.myfitnesspal.com/ja/account/login にログインして csv ファイルをダウンロードするフローを作ったが、MyFitnesspal は「CSV ファイルをダウンロードするためのリンクを含んだメールが届きます」だと知った。試しに作るには大きすぎるため心が折れた。(^^;インストール方法や実行方法などの紹介動画 うぃんどうずしょしんしゃなので、わかりやすいどうがをみたよ。","link":"https://masutaka.net/2021-07-28-1/","isoDate":"2021-07-28T00:00:00.000Z","dateMiliSeconds":1627430400000,"authorName":"masutaka"},{"title":"『ここがつらいよ普段使いのLinux』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。いよいよ明後日は <a href=\"https://jp.rizinff.com/_ct/17440570\">RIZIN.28</a> ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTBXZg9pczERJABgT3Uuu922Ktcc91HHl00QOtySt7fFtxrL4NZOcco1BtkK_pDuFkO0Uo-JuAwBkoC/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。</p>\n\n<p>そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。</p>\n\n<p>数々の諸問題が発生しましたが、無事全部解決（？）したお話です。</p>\n\n<ul>\n<li>キーボードショートカットがつらい</li>\n<li>タッチパッドがつらい</li>\n<li>指紋認証出来なくてつらい</li>\n<li>たまにスリープから復帰しなくてつらい（一番つらい）</li>\n<li>ちょっとした画像編集に GIMP を使うのはつらい</li>\n</ul>\n\n\n<p>みんなも Mac を捨てて Linux を使うといいと思うよ！</p>\n\n<p>それでは！</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" class=\"hatena-asin-detail-image-link\" target=\"_blank\" rel=\"noopener\"><img src=\"https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg\" class=\"hatena-asin-detail-image\" alt=\"だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス\" title=\"だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" target=\"_blank\" rel=\"noopener\">だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス</a></p><ul class=\"hatena-asin-detail-meta\"><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/%CE%EB%CC%DA%20%C5%AF%BA%C8\" class=\"keyword\">鈴木 哲哉</a></li><li>オーエス出版</li></ul><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4871908240/hatena-blog-22/\" class=\"asin-detail-buy\" target=\"_blank\" rel=\"noopener\">Amazon</a></div></div></p>\n","contentSnippet":"こんにちは id:masutaka26 です。いよいよ明後日は RIZIN.28 ですね！東京ドームで MMA（総合格闘技）のイベントが行われるのは、約 17 年半ぶりだそうです（Wikipedia 調べ）。ドキが胸胸します。本日、週次の社内勉強会 FFTT で『ここがつらいよ普段使いのLinux』という発表をしました。タイトルは違いますが、気にしないで下さい。Mac が重い時に IME 切り替えが一瞬遅れて、例えば「feedforce」とタイプする時に「ふぇえ...」になる現象に悩まされていました。そこで約 10 年ぶりに Windows PC を購入して、同じく約 10 年ぶりに Linux を普段使いし始めました。数々の諸問題が発生しましたが、無事全部解決（？）したお話です。キーボードショートカットがつらいタッチパッドがつらい指紋認証出来なくてつらいたまにスリープから復帰しなくてつらい（一番つらい）ちょっとした画像編集に GIMP を使うのはつらいみんなも Mac を捨てて Linux を使うといいと思うよ！それでは！だれでもできるLinuxセットアップ―無料(ただ)なのに頼れるOSリヌクス作者:鈴木 哲哉オーエス出版Amazon","link":"https://developer.feedforce.jp/entry/2021/06/11/180000","isoDate":"2021-06-11T09:00:00.000Z","dateMiliSeconds":1623402000000,"imageUrl":"https://m.media-amazon.com/images/I/51NEN46FW9L._SL500_.jpg","authorName":"masutaka"},{"title":"Dependabot の Terraform 1.0 対応が完了した件","content":"[2021-05-27-1] のつづき。この間に 1.0 がリリースされてました ね。\n先ほど、Lockfile (.terraform.lock.hcl) の対応が完了したそうです。\nhttps://github.com/dependabot/dependabot-core/issues/1176#issuecomment-858490407 これで Dependabot での terraform 対応が完了しました。\n・terraform version は自動更新できない\n・provider version を自動更新できる。その際、.terraform.lock.hcl も更新されるはず\n・以前の Dependabot で対応されていた module version はどうなんだろう？使ってないので分からない\ndependabot.yml のドキュメントはこちら。 circleci-tfupdate-orb はそろそろアーカイブしたいな。でも Dependabot だと terraform version は更新出来ないんだよね&hellip;。\n追記(2021-06-11):\n公式でもアナウンスされてました。\nDependabot now supports Terraform 1.0｜GitHub Changelog ","contentSnippet":"[2021-05-27-1] のつづき。この間に 1.0 がリリースされてました ね。先ほど、Lockfile (.terraform.lock.hcl) の対応が完了したそうです。https://github.com/dependabot/dependabot-core/issues/1176#issuecomment-858490407 これで Dependabot での terraform 対応が完了しました。・terraform version は自動更新できない・provider version を自動更新できる。その際、.terraform.lock.hcl も更新されるはず・以前の Dependabot で対応されていた module version はどうなんだろう？使ってないので分からないdependabot.yml のドキュメントはこちら。 circleci-tfupdate-orb はそろそろアーカイブしたいな。でも Dependabot だと terraform version は更新出来ないんだよね…。追記(2021-06-11):公式でもアナウンスされてました。Dependabot now supports Terraform 1.0｜GitHub Changelog","link":"https://masutaka.net/2021-06-10-1/","isoDate":"2021-06-10T00:00:00.000Z","dateMiliSeconds":1623283200000,"authorName":"masutaka"},{"title":"暑がりの私にはマスクチェーンがとても合ってる","content":"去年の秋くらいからマスクチェーン（ストラップ）を使っています。私はとても暑がりなのと、マスクの着用感が好きではないので、かなり重宝しています。\nどのくらい暑がりかと言うと、中学生の時は暑くない水泳部に入ったり、毎日スーツを着る会社には絶対に入社しなかったり、今の会社が上場した時も暑かったので（スーツが必要な）東証には行かなかったり、まあそんな感じです。\n外に出た時にスッと外せるのがとても良いです。店で食事をする時、ベタッと置かずに済むのも良いです。\n弱点は強風です。一度強風に煽られて外れたことがあります。どうにかならないかな&hellip;？\n最近買って、とても気に入ったのがこちらです。約 70cm あり、チェーンもしっかりしています。男性向けらしいです。\n その少し前に買ったのがこちら。メンズと書いてありますが、女性向けかなと思いました。55cm と少し短いのと、見た目よりもチェーンがずっと細いからです。細いせいでやや絡まりやすいです。クロスの飾りは結構きれいで、マスクをした時に主張してくれます。チェーンの長さが足りないので常用はしませんが、特別な日（）には付けようと思いました。\n こちらは入門者向けかな？最初に買いました。当時の値段も ￥398 でとても安かったです。ストラップの長さは 60cm です。このくらいは欲しいところです。後ろで止めると、耳が痛くならないみたいです。しかし４本は要らなかった&hellip;。\n これから暑い夏が始まるので、さらに活躍してくれそうです。","contentSnippet":"去年の秋くらいからマスクチェーン（ストラップ）を使っています。私はとても暑がりなのと、マスクの着用感が好きではないので、かなり重宝しています。どのくらい暑がりかと言うと、中学生の時は暑くない水泳部に入ったり、毎日スーツを着る会社には絶対に入社しなかったり、今の会社が上場した時も暑かったので（スーツが必要な）東証には行かなかったり、まあそんな感じです。外に出た時にスッと外せるのがとても良いです。店で食事をする時、ベタッと置かずに済むのも良いです。弱点は強風です。一度強風に煽られて外れたことがあります。どうにかならないかな…？最近買って、とても気に入ったのがこちらです。約 70cm あり、チェーンもしっかりしています。男性向けらしいです。 その少し前に買ったのがこちら。メンズと書いてありますが、女性向けかなと思いました。55cm と少し短いのと、見た目よりもチェーンがずっと細いからです。細いせいでやや絡まりやすいです。クロスの飾りは結構きれいで、マスクをした時に主張してくれます。チェーンの長さが足りないので常用はしませんが、特別な日（）には付けようと思いました。 こちらは入門者向けかな？最初に買いました。当時の値段も ￥398 でとても安かったです。ストラップの長さは 60cm です。このくらいは欲しいところです。後ろで止めると、耳が痛くならないみたいです。しかし４本は要らなかった…。 これから暑い夏が始まるので、さらに活躍してくれそうです。","link":"https://masutaka.net/2021-05-30-1/","isoDate":"2021-05-30T00:00:00.000Z","dateMiliSeconds":1622332800000,"authorName":"masutaka"},{"title":"Dependabot の Terraform 0.15 対応が進んでいる件","content":"最近この Issue が活発になってきました。\nTerraform 0.15 support · Issue #1176 · dependabot/dependabot-core 実はプロバイダーバージョンのアップデートだけならもう使えます。\n・プロバイダーバージョンのアップデートはもう動く\n・↑の後に必要な .terraform.lock.hcl の更新は実装中とのこと。現在は手動で &ldquo;$ terraform init -upgrade&rdquo; が必要\n・terraform バージョンのアップデートはロードマップに含まれていない ↓プライベートリポジトリで動いている様子。\ndependabot.yml のドキュメントはここにある ので、試してみるのも良いかもしれません。\n↓このブログが置いてあるリポジトリの .github/dependabot.yml です。daily はやり過ぎなのであとで減らそう。\nversion: 2 updates: - package-ecosystem: &#34;terraform&#34; directory: &#34;/terraform/aws&#34; schedule: interval: &#34;daily&#34; time: &#34;12:00&#34; timezone: &#34;Asia/Tokyo&#34; assignees: - &#34;masutaka&#34; open-pull-requests-limit: 10 - package-ecosystem: &#34;terraform&#34; directory: &#34;/terraform/heroku&#34; schedule: interval: &#34;daily&#34; time: &#34;12:00&#34; timezone: &#34;Asia/Tokyo&#34; assignees: - &#34;masutaka&#34; open-pull-requests-limit: 10 今までの経緯とか Terraform 0.","contentSnippet":"最近この Issue が活発になってきました。Terraform 0.15 support · Issue #1176 · dependabot/dependabot-core 実はプロバイダーバージョンのアップデートだけならもう使えます。・プロバイダーバージョンのアップデートはもう動く・↑の後に必要な .terraform.lock.hcl の更新は実装中とのこと。現在は手動で “$ terraform init -upgrade” が必要・terraform バージョンのアップデートはロードマップに含まれていない ↓プライベートリポジトリで動いている様子。dependabot.yml のドキュメントはここにある ので、試してみるのも良いかもしれません。↓このブログが置いてあるリポジトリの .github/dependabot.yml です。daily はやり過ぎなのであとで減らそう。version: 2 updates: - package-ecosystem: \"terraform\" directory: \"/terraform/aws\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10 - package-ecosystem: \"terraform\" directory: \"/terraform/heroku\" schedule: interval: \"daily\" time: \"12:00\" timezone: \"Asia/Tokyo\" assignees: - \"masutaka\" open-pull-requests-limit: 10 今までの経緯とか Terraform 0.","link":"https://masutaka.net/2021-05-27-1/","isoDate":"2021-05-27T00:00:00.000Z","dateMiliSeconds":1622073600000,"authorName":"masutaka"},{"title":"ノートパソコンクーラーを買い替えた","content":"2 年使っていた冷却パッドが寿命っぽいので、エレコムのノートパソコンクーラーを買いました。心配していた冷却効果は申し分なく、ひとまずホッとしています。\n 元々こちらの冷却パッドを使っていました。ゲーミング PC 向けみたいです。\n この動画お気に入りです。つい何度も見てしまう中毒性があります。\n 少々デカイのが難点でしたが、冷却効果は申し分ありませんでした。\nただ 2 年も使うとホコリが溜まってきます。分解は無理そうで、掃除機で吸うのも限度があります。おまけに 1 本しかないオスオス USB ケーブルがほぼ断線し、5 つあるファンのうち 2 つも回らなくなりました。\nホコリさえ取れれば使い続けるモチベーションはあったのですが、それが無理なので交換するか！という気持ちになりました。今思えばエアダスター使えばよかったのかな。まあいいか&hellip;。\n冷却パッドは仕事用です。私は仕事で MacBook Pro 13inch (2019) を使っています。MacBook Pro はアルミの筐体全体から放熱する設計は良いのですが、一緒にキーボードまで熱くなります。激しく集中を削がれるため、やむを得ずこの手のクーラーを使っています。\n今回買ったクーラーの話に戻します。\n先程書いたとおり冷却効果は申し分ありません。3 段階に調節できる風量は一番小さい 1 で十分です。ただ、風が手前に吹き付けるため、机の上にティッシュとか置いてると吹き飛ばされます。\n他はこんな感じです。ホコリは溜まっちゃいそうです。次溜まったらエアダスターを使ってみるか。\n良いところ：\n軽くてコンパクト。たまの出社日にも持って行けそう\n卓上扇風機でもあるけど、実際使っても良さそうな軽さと見た目、それに風量\n良くないところ：\nmicro USB でもなく Type-C でもない謎端子。手持ちの程よい長さのケーブルを使えない\nスタンドの傾斜角度がおかしい。ノートパソコンの奥側をどうしても２点で支えることになる。どんな意図で設計したのだろう？\nそれもあって中華製スマートウォッチ [2018-01-28-1] と干渉して手首が痛い。仕方がないので外してる\nホコリが溜まりそうで掃除も難しそう。この手の冷却器の運命なのか&hellip;\nそれなりにうるさい。仕事だと気にならないけど、プライベートだと気になるかも\nそんなわけでノートパソコンクーラーにまあまあ満足したお話でした。\n＜おまけ＞\nファンでホコリが溜まるのなら、ファンがないやつを買えば良いじゃないということで、先にこちらを買ってました。\n 結果は大失敗。「うん、冷却台が温まったね」ってだけで冷却効果は皆無でした。返品しました。","contentSnippet":"2 年使っていた冷却パッドが寿命っぽいので、エレコムのノートパソコンクーラーを買いました。心配していた冷却効果は申し分なく、ひとまずホッとしています。 元々こちらの冷却パッドを使っていました。ゲーミング PC 向けみたいです。 この動画お気に入りです。つい何度も見てしまう中毒性があります。 少々デカイのが難点でしたが、冷却効果は申し分ありませんでした。ただ 2 年も使うとホコリが溜まってきます。分解は無理そうで、掃除機で吸うのも限度があります。おまけに 1 本しかないオスオス USB ケーブルがほぼ断線し、5 つあるファンのうち 2 つも回らなくなりました。ホコリさえ取れれば使い続けるモチベーションはあったのですが、それが無理なので交換するか！という気持ちになりました。今思えばエアダスター使えばよかったのかな。まあいいか…。冷却パッドは仕事用です。私は仕事で MacBook Pro 13inch (2019) を使っています。MacBook Pro はアルミの筐体全体から放熱する設計は良いのですが、一緒にキーボードまで熱くなります。激しく集中を削がれるため、やむを得ずこの手のクーラーを使っています。今回買ったクーラーの話に戻します。先程書いたとおり冷却効果は申し分ありません。3 段階に調節できる風量は一番小さい 1 で十分です。ただ、風が手前に吹き付けるため、机の上にティッシュとか置いてると吹き飛ばされます。他はこんな感じです。ホコリは溜まっちゃいそうです。次溜まったらエアダスターを使ってみるか。良いところ：軽くてコンパクト。たまの出社日にも持って行けそう卓上扇風機でもあるけど、実際使っても良さそうな軽さと見た目、それに風量良くないところ：micro USB でもなく Type-C でもない謎端子。手持ちの程よい長さのケーブルを使えないスタンドの傾斜角度がおかしい。ノートパソコンの奥側をどうしても２点で支えることになる。どんな意図で設計したのだろう？それもあって中華製スマートウォッチ [2018-01-28-1] と干渉して手首が痛い。仕方がないので外してるホコリが溜まりそうで掃除も難しそう。この手の冷却器の運命なのか…それなりにうるさい。仕事だと気にならないけど、プライベートだと気になるかもそんなわけでノートパソコンクーラーにまあまあ満足したお話でした。＜おまけ＞ファンでホコリが溜まるのなら、ファンがないやつを買えば良いじゃないということで、先にこちらを買ってました。 結果は大失敗。「うん、冷却台が温まったね」ってだけで冷却効果は皆無でした。返品しました。","link":"https://masutaka.net/2021-05-23-1/","isoDate":"2021-05-23T00:00:00.000Z","dateMiliSeconds":1621728000000,"authorName":"masutaka"},{"title":"スマホ専用テプラ LR30 を買った","content":"私はテプラが苦手です。あのワープロみたいなキーボードがダメ。パソコンと微妙に似ているけどちょっと違う、csh や tcsh みたいな立ち位置がダメです。← 分かりづらい\nでもこのテプラはスマホで文字を打てます。発表された当初 から気にはなっていて、今さらながら買ってみました。6,000 円弱とそこまで高くないことと、あったら便利で邪魔にもならないと思ったからです。\n 使った感想としては「そこまでオススメはしないけど悪くもない」です。\n良いところ：\n・Bluetooth 接続がとても楽。ペアリングが必要ない\n・スマホ操作なので普通のテプラよりは打ちやすい\n・電源が電池なので取り回しが楽。会社でコンセント探したなあ&hellip;\n良くないところ：\n・感熱プリントなので印刷が１年くらいしかもたない\n・同じ理由で印刷が安っぽい\n・良さそうな色のテープがない\n画像は見てのとおりオレガノです。たまたま家にあった赤ちゃん用のミルカーに入れています。これでバジリコと間違えることはないでしょう。\nオレガノの容器はもっと良いのを探しています。なかなかないんだよなあ&hellip;。\nもし普通のテプラと同じ印刷方式と同じテープが使えて、スマホから使えて、そこそこの値段だったら買うかも。\nと思って改めて探したらあった・・・！(ToT) ただしアプリはヒドイみたい。\n   ","contentSnippet":"私はテプラが苦手です。あのワープロみたいなキーボードがダメ。パソコンと微妙に似ているけどちょっと違う、csh や tcsh みたいな立ち位置がダメです。← 分かりづらいでもこのテプラはスマホで文字を打てます。発表された当初 から気にはなっていて、今さらながら買ってみました。6,000 円弱とそこまで高くないことと、あったら便利で邪魔にもならないと思ったからです。 使った感想としては「そこまでオススメはしないけど悪くもない」です。良いところ：・Bluetooth 接続がとても楽。ペアリングが必要ない・スマホ操作なので普通のテプラよりは打ちやすい・電源が電池なので取り回しが楽。会社でコンセント探したなあ…良くないところ：・感熱プリントなので印刷が１年くらいしかもたない・同じ理由で印刷が安っぽい・良さそうな色のテープがない画像は見てのとおりオレガノです。たまたま家にあった赤ちゃん用のミルカーに入れています。これでバジリコと間違えることはないでしょう。オレガノの容器はもっと良いのを探しています。なかなかないんだよなあ…。もし普通のテプラと同じ印刷方式と同じテープが使えて、スマホから使えて、そこそこの値段だったら買うかも。と思って改めて探したらあった・・・！(ToT) ただしアプリはヒドイみたい。","link":"https://masutaka.net/2021-05-20-1/","isoDate":"2021-05-20T00:00:00.000Z","dateMiliSeconds":1621468800000,"authorName":"masutaka"},{"title":"Windows ノートパソコン（ASUS VivoBook S15 M533IA）を買った","content":"1 ヶ月ほど前になりますが、10 数年ぶりに Windows ノートパソコンを買いました。とても満足しています。\nASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック） [2020-07-14-1] に iPhone から Android に乗り換えたことと関係していて、脱 Apple 計画の最終章（？）です。\nスペックはこんな感じです。トラックパッド右上に指紋認証用のセンサーも付いています。\n         CPU AMD Ryzen™ 7 4700U   Memory 16GB   Storage 1TB SSD   Monitor 15.6inch   Keyboard 109 日本語（画像は 104 英語キーボード）    今まで持っていたノートパソコンが Early 2014 の（！）MacBook Air だったので、めちゃめちゃ速くなりました。Ryzen いいですねー！Intel 版もあったのですが、Ryzen への興味とお値段から Ryzen にしました。\nそのお値段は ￥110,900 に 11,090 ヨドバシポイントが付いた形です。Amazon.","contentSnippet":"1 ヶ月ほど前になりますが、10 数年ぶりに Windows ノートパソコンを買いました。とても満足しています。ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック） [2020-07-14-1] に iPhone から Android に乗り換えたことと関係していて、脱 Apple 計画の最終章（？）です。スペックはこんな感じです。トラックパッド右上に指紋認証用のセンサーも付いています。         CPU AMD Ryzen™ 7 4700U   Memory 16GB   Storage 1TB SSD   Monitor 15.6inch   Keyboard 109 日本語（画像は 104 英語キーボード）    今まで持っていたノートパソコンが Early 2014 の（！）MacBook Air だったので、めちゃめちゃ速くなりました。Ryzen いいですねー！Intel 版もあったのですが、Ryzen への興味とお値段から Ryzen にしました。そのお値段は ￥110,900 に 11,090 ヨドバシポイントが付いた形です。Amazon.","link":"https://masutaka.net/2021-05-06-1/","isoDate":"2021-05-06T00:00:00.000Z","dateMiliSeconds":1620259200000,"authorName":"masutaka"},{"title":"『こども地政学』を読んだ","content":"以前から地政学には興味があったのでポチって読んでみました。\n 子供向けの本で、漢字には全部ルビが振ってあります。でも大人向けの入門書としても良い気がしました。久々にさらっと読めて良い気分転換になったし、地政学の基礎の基礎を知れた気がします。\n日本って、ランドパワーの中国にとっては海に出ていくための邪魔な蓋でしかないのかー。\n追々、他の地政学の本も読んでみよう。","contentSnippet":"以前から地政学には興味があったのでポチって読んでみました。 子供向けの本で、漢字には全部ルビが振ってあります。でも大人向けの入門書としても良い気がしました。久々にさらっと読めて良い気分転換になったし、地政学の基礎の基礎を知れた気がします。日本って、ランドパワーの中国にとっては海に出ていくための邪魔な蓋でしかないのかー。追々、他の地政学の本も読んでみよう。","link":"https://masutaka.net/2021-04-10-1/","isoDate":"2021-04-10T00:00:00.000Z","dateMiliSeconds":1618012800000,"authorName":"masutaka"},{"title":"Android の TODO アプリは TickTick が鉄板かも","content":"iPhone から Android (Pixel 3a XL) に乗り換えて [2020-07-14-1] 、普通に使える TODO アプリを探していました。\n私は基本デフォルト厨なので、Google の ToDo リスト か Google Keep で続けようと頑張りましたが、断念しました。\nToDo リストは一度でも繰り返しを設定したタスクは他のリストに移動できないという、理解不能な仕様（？）でした。\nGoogle Keep は頑張って３ヶ月使いましたが、リマインダーアプリとしては xxx（伏せ字）でした。\n※ Note アプリとしては普通に便利なので、今も使っています。\n・未来のリマインダーを完了できない（早めに終わっても、その時間にならないと完了できない）\n・リマインダーを完了しても残る。さらにアーカイブする必要がある。Note 機能との魔合体の弊害と思われる\n・繰り返しのリマインダーを視界から消すのが面倒。完了してもアーカイブしてもまた現れる\n・他にもあったかも？\nそんな中行き着いたのが TickTick です。TikTok じゃないよ。\nとても良かったのでプレミアム会員（$27.99/year）になりましたが、無料でも十分使えます。\n普通のリマインダーアプリとして使える 何が普通なのか難しいところですが、、こんな分類をしていると言えば分かりますかね？\n２週間毎とかのリマインダーも設定できる たまにこういうリマインダーがあるのですよね。加湿器の掃除とか。もちろん隔週や隔月なども出来ます。\n１時間後とかに思い出させるとかも出来る すぐ出来ない時ありますよね？そんな時にも後で思い出させてくれます。\n習慣づけの機能がある 自分にはとても合いました。\n私はログを取るのが好きみたいで、なるべく途切れさせないように行動するようになりました。\n「飲酒をやめる」に至っては、今年の 1/31 以来続いています。そこまでストイックになる必要もないのですが、続けることが目的になっています。それに何もしなければ良いだけなので、この中では一番簡単です。\nその他 私は使っていませんが、ポモドーロテクニックを支援する機能もあります。プレミアム会員用の機能かも？\nAndroid と iOS、Web など、さまざまなプラットフォームに対応 しています。今使っているリマインダーアプリからの移行など、まとまった量の作業は Web 版でゴリッとやると良いかもです。\nあと、書き忘れましたが、私は仕事では TickTick を使ってません。プライベートだけです。仕事では Slack リマインダーや Gmail（Inbox Zero 運用、Snooze 機能）あたりでゆるふわ運用しています。仕事で使うツールはあまり増やしたくないのですよね。気にするものが増えてしまうので。\nSlack から Gmail に簡単に送信できれば、Gmail に集約できるんだけど&hellip;。","contentSnippet":"iPhone から Android (Pixel 3a XL) に乗り換えて [2020-07-14-1] 、普通に使える TODO アプリを探していました。私は基本デフォルト厨なので、Google の ToDo リスト か Google Keep で続けようと頑張りましたが、断念しました。ToDo リストは一度でも繰り返しを設定したタスクは他のリストに移動できないという、理解不能な仕様（？）でした。Google Keep は頑張って３ヶ月使いましたが、リマインダーアプリとしては xxx（伏せ字）でした。※ Note アプリとしては普通に便利なので、今も使っています。・未来のリマインダーを完了できない（早めに終わっても、その時間にならないと完了できない）・リマインダーを完了しても残る。さらにアーカイブする必要がある。Note 機能との魔合体の弊害と思われる・繰り返しのリマインダーを視界から消すのが面倒。完了してもアーカイブしてもまた現れる・他にもあったかも？そんな中行き着いたのが TickTick です。TikTok じゃないよ。とても良かったのでプレミアム会員（$27.99/year）になりましたが、無料でも十分使えます。普通のリマインダーアプリとして使える 何が普通なのか難しいところですが、、こんな分類をしていると言えば分かりますかね？２週間毎とかのリマインダーも設定できる たまにこういうリマインダーがあるのですよね。加湿器の掃除とか。もちろん隔週や隔月なども出来ます。１時間後とかに思い出させるとかも出来る すぐ出来ない時ありますよね？そんな時にも後で思い出させてくれます。習慣づけの機能がある 自分にはとても合いました。私はログを取るのが好きみたいで、なるべく途切れさせないように行動するようになりました。「飲酒をやめる」に至っては、今年の 1/31 以来続いています。そこまでストイックになる必要もないのですが、続けることが目的になっています。それに何もしなければ良いだけなので、この中では一番簡単です。その他 私は使っていませんが、ポモドーロテクニックを支援する機能もあります。プレミアム会員用の機能かも？Android と iOS、Web など、さまざまなプラットフォームに対応 しています。今使っているリマインダーアプリからの移行など、まとまった量の作業は Web 版でゴリッとやると良いかもです。あと、書き忘れましたが、私は仕事では TickTick を使ってません。プライベートだけです。仕事では Slack リマインダーや Gmail（Inbox Zero 運用、Snooze 機能）あたりでゆるふわ運用しています。仕事で使うツールはあまり増やしたくないのですよね。気にするものが増えてしまうので。Slack から Gmail に簡単に送信できれば、Gmail に集約できるんだけど…。","link":"https://masutaka.net/2021-04-07-1/","isoDate":"2021-04-07T00:00:00.000Z","dateMiliSeconds":1617753600000,"authorName":"masutaka"},{"title":"縦置きスタンドを買って、ノートパソコンを床に置いちゃう問題を解消した","content":"ここ１年はずっと家で仕事しているので、ノートパソコンは会社用と合わせて２台あります。最近 ASUS の Vivobook も買ったので、一時的に３台あります。そうなってくると地味に困るのが、使ってないパソコンの置き場所です。\n今までこういうダメな置き方をしていました。気をつけてはいますが、椅子が当たるかもしれませんし、パタンと倒れるかもしれません。\nそこで、こんな縦置きスタンドを買いました。￥2,650 というお値段以外はとても満足しています。\n 使ってみた図です。奥が 15.6inch の Vivobook、手前が 13inch MacBook Pro です。Vivobook はやや厚いので、付属の六角レンチで調節しました。\nこのモデルは手前にタブレットやスマホも置けます。置いたのは 9.7inch の ZenPad です。３つ置いても、重量感があり安定しています。重さは 580g です。\nサイズは 横 x 奥行き x 高さ = 15cm x 12cm x 4.8 cm なので、意外とコンパクトです。ゴムパッドも付いているので、デバイスに傷は付きづらいと思います。\n同じメーカーで別のモデルもあったので紹介しておきます。\nこちらはノートパソコン１台、タブレットまたはスマホ２台用です。奥行きが 9.5cm と多少小さいです。\n こちらはノートパソコン２台、タブレットまたはスマホ２台用です。大きそうに見えますが、私が買ったモデルと同じサイズです。\n 前回のマグネットケーブルホルダー [2021-03-24-1] に引き続き、当たりを引けて良かったです。","contentSnippet":"ここ１年はずっと家で仕事しているので、ノートパソコンは会社用と合わせて２台あります。最近 ASUS の Vivobook も買ったので、一時的に３台あります。そうなってくると地味に困るのが、使ってないパソコンの置き場所です。今までこういうダメな置き方をしていました。気をつけてはいますが、椅子が当たるかもしれませんし、パタンと倒れるかもしれません。そこで、こんな縦置きスタンドを買いました。￥2,650 というお値段以外はとても満足しています。 使ってみた図です。奥が 15.6inch の Vivobook、手前が 13inch MacBook Pro です。Vivobook はやや厚いので、付属の六角レンチで調節しました。このモデルは手前にタブレットやスマホも置けます。置いたのは 9.7inch の ZenPad です。３つ置いても、重量感があり安定しています。重さは 580g です。サイズは 横 x 奥行き x 高さ = 15cm x 12cm x 4.8 cm なので、意外とコンパクトです。ゴムパッドも付いているので、デバイスに傷は付きづらいと思います。同じメーカーで別のモデルもあったので紹介しておきます。こちらはノートパソコン１台、タブレットまたはスマホ２台用です。奥行きが 9.5cm と多少小さいです。 こちらはノートパソコン２台、タブレットまたはスマホ２台用です。大きそうに見えますが、私が買ったモデルと同じサイズです。 前回のマグネットケーブルホルダー [2021-03-24-1] に引き続き、当たりを引けて良かったです。","link":"https://masutaka.net/2021-04-04-1/","isoDate":"2021-04-04T00:00:00.000Z","dateMiliSeconds":1617494400000,"authorName":"masutaka"},{"title":"Anker のマグネットケーブルホルダーを使って、ケーブルが下に落ちちゃう問題を解消できた","content":"今まではこんなんでした。3 本のケーブルを洗濯バサミ（）でまとめて、Anker の USB 急速充電器に引っかけています。かろうじて落ちません。すみません嘘つきました。たまに落ちます。\nAnker のマグネットケーブルホルダーを使えばアラすっきり！少し様子がおかしいのは気にしない。\n付属のクリップでケーブルを挟み込んで、台座に磁石で付く仕組みなのですが、直径 3.5mm 以下という制約がなかなかキツイ。今どき珍しい Mini DisplayPort ケーブルは無理だったので、別のクリップで凌ぎました。\n こちらの記事を見て買いました。商品レビューはこちらを見たほうが良いと思います。\nAnkerの「マグネットケーブルホルダー」を使い始めたら、デスクワークの快適性が格段に向上しちゃいました｜ROOMIE（ルーミー） ","contentSnippet":"今まではこんなんでした。3 本のケーブルを洗濯バサミ（）でまとめて、Anker の USB 急速充電器に引っかけています。かろうじて落ちません。すみません嘘つきました。たまに落ちます。Anker のマグネットケーブルホルダーを使えばアラすっきり！少し様子がおかしいのは気にしない。付属のクリップでケーブルを挟み込んで、台座に磁石で付く仕組みなのですが、直径 3.5mm 以下という制約がなかなかキツイ。今どき珍しい Mini DisplayPort ケーブルは無理だったので、別のクリップで凌ぎました。 こちらの記事を見て買いました。商品レビューはこちらを見たほうが良いと思います。Ankerの「マグネットケーブルホルダー」を使い始めたら、デスクワークの快適性が格段に向上しちゃいました｜ROOMIE（ルーミー）","link":"https://masutaka.net/2021-03-24-1/","isoDate":"2021-03-24T00:00:00.000Z","dateMiliSeconds":1616544000000,"authorName":"masutaka"},{"title":"現在の GitHub flow は v2 かな？","content":"@kyanny さんの記事を自分なりに整理してみる。\n  ずっと「マージした後にメインブランチを production デプロイする」というワークフローだと勘違いしていた。\n昔は「マージ後にデプロイ」だったが、いつの頃からか「マージ前にデプロイ」に変わったらしい。\n どこかでそんな話は聞いていたけど、実際のところはどうなんだろう？と以前から疑問だった。やっぱりそうだったか。\n現在の GitHub flow というか、GiHub の公式ガイドにそのものズバリ書いてあったのね。灯台下暗し&hellip;。\nUnderstanding the GitHub flow · GitHub Guides &ldquo;&gt;&rdquo; を数回クリックし、&ldquo;Deploy&rdquo; に進むと書いてある。\n With GitHub, you can deploy from a branch for final testing in production before merging to main.\nmain ブランチにマージする前に、最後の確認をするために本番環境にデプロイする。\n  If your branch causes issues, you can roll it back by deploying the existing main branch into production.\nもし問題が発生したら、main ブランチを本番環境にデプロイすることでロールバック出来る。\n main ブランチの protection rule は &ldquo;Require branches to be up to date before merging&rdquo; を有効にしているのかな。いずれにせよ、main ブランチの commit 全部入りのブランチをデプロイしているはず。","contentSnippet":"@kyanny さんの記事を自分なりに整理してみる。  ずっと「マージした後にメインブランチを production デプロイする」というワークフローだと勘違いしていた。昔は「マージ後にデプロイ」だったが、いつの頃からか「マージ前にデプロイ」に変わったらしい。 どこかでそんな話は聞いていたけど、実際のところはどうなんだろう？と以前から疑問だった。やっぱりそうだったか。現在の GitHub flow というか、GiHub の公式ガイドにそのものズバリ書いてあったのね。灯台下暗し…。Understanding the GitHub flow · GitHub Guides “>” を数回クリックし、“Deploy” に進むと書いてある。 With GitHub, you can deploy from a branch for final testing in production before merging to main.main ブランチにマージする前に、最後の確認をするために本番環境にデプロイする。  If your branch causes issues, you can roll it back by deploying the existing main branch into production.もし問題が発生したら、main ブランチを本番環境にデプロイすることでロールバック出来る。 main ブランチの protection rule は “Require branches to be up to date before merging” を有効にしているのかな。いずれにせよ、main ブランチの commit 全部入りのブランチをデプロイしているはず。","link":"https://masutaka.net/2021-03-15-1/","isoDate":"2021-03-15T00:00:00.000Z","dateMiliSeconds":1615766400000,"authorName":"masutaka"},{"title":"フィード（RSS/Atom）を配信していないサイトのフィードを Feed43 で作成する","content":"「Looker の記事一覧｜DevelopersIO 」が更新されたら Slack に POST したかったのです。トップページ ならフィードが配信されているけど、これだと多すぎます。\nノンエンジニアである会社の同僚が https://feed43.com/ で作っているらしいので、試してみました。\n結果的にこのフィードを作れましたがめっちゃ面倒くさかったので、記録として残します。同僚すごい&hellip;。\nhttps://feed43.com/developersio-looker.xml https://feed43.com/ の &ldquo;Create your first RSS feed&rdquo; をクリックして、指示に従って作ります。\n今回は https://dev.classmethod.jp/tags/looker/ です。入力し Reload します。\nHTML が取得され、&ldquo;extraction rules&rdquo; の入力を促されるのでそうします。\n予想はしていましたが、これがめちゃめちゃ大変で時間がかかりました。\n HTML 構造を理解する 記事一覧に相当する HTML をテキストエディタに貼り付ける 記事の URL やタイトルなど、取り出したい箇所を {%} で置換し、Extract する Extract できたら儲けもの。不要な HTML を {*} で置換して、少しずつ小さくしていく  最終的にこのルールを作ることが出来ました。\n&lt;div class=&#34;post{*}&#34;{*}&gt;{*}&lt;a href=&#34;{%}&#34; class=&#34;link&#34;{*}&gt;{*}&lt;h3 class=&#34;post-title&#34;{*}&gt;{%}&lt;/h3&gt;{*}&lt;/a&gt;{*}&lt;p class=&#34;date&#34;{*}&gt;{%}&lt;/p&gt;{*}&lt;/div&gt; {} はワイルドカードです。関係ない HTML はこれで省略しましょう。スペースや改行、HTML コメントなども削除したら {} にする必要はあるかも。\n{%} は正規表現の \\1, \\2 みたいなやつです。上の例だと 3 つあるので、あとで {%1}, {%2}, {%3} として取り出すことが出来ます。","contentSnippet":"「Looker の記事一覧｜DevelopersIO 」が更新されたら Slack に POST したかったのです。トップページ ならフィードが配信されているけど、これだと多すぎます。ノンエンジニアである会社の同僚が https://feed43.com/ で作っているらしいので、試してみました。結果的にこのフィードを作れましたがめっちゃ面倒くさかったので、記録として残します。同僚すごい…。https://feed43.com/developersio-looker.xml https://feed43.com/ の “Create your first RSS feed” をクリックして、指示に従って作ります。今回は https://dev.classmethod.jp/tags/looker/ です。入力し Reload します。HTML が取得され、“extraction rules” の入力を促されるのでそうします。予想はしていましたが、これがめちゃめちゃ大変で時間がかかりました。 HTML 構造を理解する 記事一覧に相当する HTML をテキストエディタに貼り付ける 記事の URL やタイトルなど、取り出したい箇所を {%} で置換し、Extract する Extract できたら儲けもの。不要な HTML を {*} で置換して、少しずつ小さくしていく  最終的にこのルールを作ることが出来ました。<div class=\"post{*}\"{*}>{*}<a href=\"{%}\" class=\"link\"{*}>{*}<h3 class=\"post-title\"{*}>{%}</h3>{*}</a>{*}<p class=\"date\"{*}>{%}</p>{*}</div> {} はワイルドカードです。関係ない HTML はこれで省略しましょう。スペースや改行、HTML コメントなども削除したら {} にする必要はあるかも。{%} は正規表現の \\1, \\2 みたいなやつです。上の例だと 3 つあるので、あとで {%1}, {%2}, {%3} として取り出すことが出来ます。","link":"https://masutaka.net/2021-03-14-1/","isoDate":"2021-03-14T00:00:00.000Z","dateMiliSeconds":1615680000000,"authorName":"masutaka"},{"title":"『NO RULES』を読んだ","content":"２ヶ月くらいかけてようやく読み終えました。ビジネス書を読み切れたのはいつ以来ぶりだろう？\n NETFLIXは「能力密度を高める」ことを最優先にしており、そんな超優秀な彼らに「個人における最高水準の報酬を払って」います。\nしかも、会社として成長できる環境を用意しているので、他の会社にも引き抜かれづらい理屈らしいです。ペパボのあんちぽさんが書いてた「いるだけで成長できる環境 」を思い出しました。\nその原資はそれほど優秀でない人を解雇して確保しているとのこと。日本だと簡単に解雇できないみたいなので、アメリカの法律を最大限に利用しているのかな。NETFLIX の日本法人だとどうなっているんだろう？\nNETFLIX ではピラミッド構造ではなく、分散型のいわゆるティール組織なんだと思う。[2019-08-13-1] に読んだ橋本さんの本の中で、大阪市はピラミッド構造でないと無理、ティール組織は絶対無理だと言っていたが、「能力密度」の高い/低いの話だと理解しました。\nそして能力密度を十分に高めた状態で、「情報に通じたキャプテン」に意思決定を完全にお任せする。上司は一切意思決定をしない。そのキャプテンはコンテキストをきちんと理解し、さまざまな立場の人からフィードバックを受け、あらゆる選択肢を理解することが求められるし、協力も受ける。\n割とすんなり理解できたのは、今所属しているフィードフォースの社長や人事の方が、長い年月をかけて浸透させてきたからかな？以前の私だと納得できなかったかもしれないです。感謝。\nそれにしても長い。長すぎます。丁寧に説明されているけど、結論を先にして、2/3 くらいに圧縮できなかったものかなあ&hellip;。物理本だと 456 ページもあったんですね。よく読み切った・・・！\nそういう意味では [2020-12-20-1] の『データマネジメントが30分でわかる本 』の、読者が「30 秒コース」「3 分コース」「30 分コース」を選べる方式は秀逸でした。\nしっかり読むと大変なので、ななめ読みくらいの気持ちでに読むと良いかも。まあでも良い本でした。","contentSnippet":"２ヶ月くらいかけてようやく読み終えました。ビジネス書を読み切れたのはいつ以来ぶりだろう？ NETFLIXは「能力密度を高める」ことを最優先にしており、そんな超優秀な彼らに「個人における最高水準の報酬を払って」います。しかも、会社として成長できる環境を用意しているので、他の会社にも引き抜かれづらい理屈らしいです。ペパボのあんちぽさんが書いてた「いるだけで成長できる環境 」を思い出しました。その原資はそれほど優秀でない人を解雇して確保しているとのこと。日本だと簡単に解雇できないみたいなので、アメリカの法律を最大限に利用しているのかな。NETFLIX の日本法人だとどうなっているんだろう？NETFLIX ではピラミッド構造ではなく、分散型のいわゆるティール組織なんだと思う。[2019-08-13-1] に読んだ橋本さんの本の中で、大阪市はピラミッド構造でないと無理、ティール組織は絶対無理だと言っていたが、「能力密度」の高い/低いの話だと理解しました。そして能力密度を十分に高めた状態で、「情報に通じたキャプテン」に意思決定を完全にお任せする。上司は一切意思決定をしない。そのキャプテンはコンテキストをきちんと理解し、さまざまな立場の人からフィードバックを受け、あらゆる選択肢を理解することが求められるし、協力も受ける。割とすんなり理解できたのは、今所属しているフィードフォースの社長や人事の方が、長い年月をかけて浸透させてきたからかな？以前の私だと納得できなかったかもしれないです。感謝。それにしても長い。長すぎます。丁寧に説明されているけど、結論を先にして、2/3 くらいに圧縮できなかったものかなあ…。物理本だと 456 ページもあったんですね。よく読み切った・・・！そういう意味では [2020-12-20-1] の『データマネジメントが30分でわかる本 』の、読者が「30 秒コース」「3 分コース」「30 分コース」を選べる方式は秀逸でした。しっかり読むと大変なので、ななめ読みくらいの気持ちでに読むと良いかも。まあでも良い本でした。","link":"https://masutaka.net/2021-03-13-1/","isoDate":"2021-03-13T00:00:00.000Z","dateMiliSeconds":1615593600000,"authorName":"masutaka"},{"title":"『集合論入門』の第１編まで読んであとは挫折した","content":"[2021-02-22-1] の『達人に学ぶSQL徹底指南書 第2版 』から派生して読みました。Amazon のレビューでは読みやすい読みやすいと書いてあったので、どんなに読みやすいか期待しつつ読み進めました。\n 「第１編 集合の代数」は確かに読みやすかったですが、「第２編 濃度」から急に理解できなくなり、「第３編 順序数」も含めてペラペラとページをめくって終了しました。\n正確に書くと、SQL との関連性に期待して読み進めたが、距離が遠すぎて読むのを止めたといった感じです。焦るところではないので、そういうものだと受け入れました。\n以下は第１編の自分用メモです。高校の頃は数学が好きだったので、懐かしみながらメモを取りました。\na ∈ A\na は A に属する、a は A の元（げん）である\na ∉ A\na は A に属さない、a は A の元（げん）でない\nA ⊆ B または B ⊇ A\nA は B の部分集合である\nA ⊂ B または B ⊃ A\nA は B の真部分集合である\nØ または {}\n空集合\nA ∪ B\nA と B の和集合。&ldquo;A cup B&rdquo; または &ldquo;A join B&rdquo; と読む。SQL では UNION なので、∪ は覚えやすい。","contentSnippet":"[2021-02-22-1] の『達人に学ぶSQL徹底指南書 第2版 』から派生して読みました。Amazon のレビューでは読みやすい読みやすいと書いてあったので、どんなに読みやすいか期待しつつ読み進めました。 「第１編 集合の代数」は確かに読みやすかったですが、「第２編 濃度」から急に理解できなくなり、「第３編 順序数」も含めてペラペラとページをめくって終了しました。正確に書くと、SQL との関連性に期待して読み進めたが、距離が遠すぎて読むのを止めたといった感じです。焦るところではないので、そういうものだと受け入れました。以下は第１編の自分用メモです。高校の頃は数学が好きだったので、懐かしみながらメモを取りました。a ∈ Aa は A に属する、a は A の元（げん）であるa ∉ Aa は A に属さない、a は A の元（げん）でないA ⊆ B または B ⊇ AA は B の部分集合であるA ⊂ B または B ⊃ AA は B の真部分集合であるØ または {}空集合A ∪ BA と B の和集合。“A cup B” または “A join B” と読む。SQL では UNION なので、∪ は覚えやすい。","link":"https://masutaka.net/2021-03-09-1/","isoDate":"2021-03-09T00:00:00.000Z","dateMiliSeconds":1615248000000,"authorName":"masutaka"},{"title":"『達人に学ぶSQL徹底指南書 第2版』を読んだ","content":"[2020-12-20-1] にも書いた通り、去年の 4 月から SQL と格闘する毎日です。もっとも全部自分で書くわけではなく、Looker が出力する SQL を理解したり、発生したエラーやデータ不正の原因を SQL 視点で調査したり、検証用の使い捨ての SQL を書いたりといった感じです。\nつまりは SELECT 文しか書かないです。しかし、SELECT 文こそが SQL そのものと言っても良いため、現在のデータアーキテクト（データ整備人）という立ち位置での学習教材を探していました。そんな中思い出したのが本書になります。\n LookML 開発者としてはこの本に書かれた全てが「優先度高」ではないため、敢えて流し読みを心がけました。\nその中で重要だと思ったのはこのあたりでしょうか。\n・１ CASE 式のススメ\n・２ 必ずわかるウィンドウ関数\n・４ ３値論理と NULL\n・７ ウィンドウ関数で行間比較を行なう\n・８ 外部結合の使い方\n・１８ GROUP BY と PARTITION BY\nLooker が出力する SQL で見かけない気がする EXISTS, HAVING あたりは流し読みしたので、正直まだ理解していません。近いうちに読み返すと思います。\nそれとは別に、「第１部 ９ SQL での集合演算」は興味深かったです。すなわち、和（UNION）、差（EXCEPT）、積（CROSS JOIN）です。商（DIVEDE BY）は「諸事情」により標準化が遅れているそうです。今まで雰囲気で UNION ALL を使うくらいだったので、集合演算は自分のスコープが広がった気がしました。\n「１５ 関係に始まり関係に終わる」に SQL の関係閉包性が UNIX のパイプの概念とよく似ているという記述も興味深かったです。\nUNIX ではファイルがさまざまなコマンドの入力・出力になるため、（標準）出力をパイプで次々と渡すことが出来ます。SQL では UNIX のファイルはテーブルに相当します。SELECT 文はテーブルを引数にとってテーブルを返すため、UNIX と同じように次々と出力を渡すことが出来ます。これを関係の閉包性と呼ぶそうです。これを知って、SQL に一気に親近感が湧きました。","contentSnippet":"[2020-12-20-1] にも書いた通り、去年の 4 月から SQL と格闘する毎日です。もっとも全部自分で書くわけではなく、Looker が出力する SQL を理解したり、発生したエラーやデータ不正の原因を SQL 視点で調査したり、検証用の使い捨ての SQL を書いたりといった感じです。つまりは SELECT 文しか書かないです。しかし、SELECT 文こそが SQL そのものと言っても良いため、現在のデータアーキテクト（データ整備人）という立ち位置での学習教材を探していました。そんな中思い出したのが本書になります。 LookML 開発者としてはこの本に書かれた全てが「優先度高」ではないため、敢えて流し読みを心がけました。その中で重要だと思ったのはこのあたりでしょうか。・１ CASE 式のススメ・２ 必ずわかるウィンドウ関数・４ ３値論理と NULL・７ ウィンドウ関数で行間比較を行なう・８ 外部結合の使い方・１８ GROUP BY と PARTITION BYLooker が出力する SQL で見かけない気がする EXISTS, HAVING あたりは流し読みしたので、正直まだ理解していません。近いうちに読み返すと思います。それとは別に、「第１部 ９ SQL での集合演算」は興味深かったです。すなわち、和（UNION）、差（EXCEPT）、積（CROSS JOIN）です。商（DIVEDE BY）は「諸事情」により標準化が遅れているそうです。今まで雰囲気で UNION ALL を使うくらいだったので、集合演算は自分のスコープが広がった気がしました。「１５ 関係に始まり関係に終わる」に SQL の関係閉包性が UNIX のパイプの概念とよく似ているという記述も興味深かったです。UNIX ではファイルがさまざまなコマンドの入力・出力になるため、（標準）出力をパイプで次々と渡すことが出来ます。SQL では UNIX のファイルはテーブルに相当します。SELECT 文はテーブルを引数にとってテーブルを返すため、UNIX と同じように次々と出力を渡すことが出来ます。これを関係の閉包性と呼ぶそうです。これを知って、SQL に一気に親近感が湧きました。","link":"https://masutaka.net/2021-02-22-1/","isoDate":"2021-02-22T00:00:00.000Z","dateMiliSeconds":1613952000000,"authorName":"masutaka"},{"title":"全ての esa 新着記事を読みきれないので、最近はこの方法を使ってる","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近好きな YouTuber はシバターです。シバターかわいいよ...。シバター...</p>\n\n<p>フィードフォースでは先日紹介したとおり、ドキュメント共有ツールに <a href=\"https://esa.io/\">esa</a> を使っています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2021%2F02%2F03%2F110000\" title=\"変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>メンバー数は 90、デイリーアクティブメンバーは 69 くらいです。2/10 の新着記事数は 106 でした。情報共有が活発な会社で、体感でもとても多いです。</p>\n\n<p>全ての新着記事と記事へのコメントは Slack の <code>#esa-notify</code> に通知されます。そこを全部読めば追えはしますが、いかんせんこの数です。</p>\n\n<p>真面目に全部読むと、私の場合はかける時間に見合わないなと感じたので、最近は esa の検索を利用した方法を使っています。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使っている方法\">使っている方法</a><ul>\n            <li><a href=\"#フォローした人の新着記事を読む\">フォローした人の新着記事を読む</a></li>\n            <li><a href=\"#エゴサーチする\">エゴサーチする</a></li>\n            <li><a href=\"#気になるキーワードに言及した新着記事を読む\">気になるキーワードに言及した新着記事を読む</a></li>\n            <li><a href=\"#日報以外の最近更新された記事を読む\">日報以外の最近更新された記事を読む</a></li>\n            <li><a href=\"#直近の記事を読む\">直近の記事を読む</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#公式ドキュメント\">公式ドキュメント</a></li>\n    <li><a href=\"#ちょっとした悩み\">ちょっとした悩み</a></li>\n    <li><a href=\"#所感\">所感</a></li>\n    <li><a href=\"#おまけ-ボツにした方法\">おまけ: ボツにした方法</a></li>\n</ul>\n\n<h2 id=\"使っている方法\">使っている方法</h2>\n\n<h3 id=\"フォローした人の新着記事を読む\">フォローした人の新着記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>@alice OR @bob OR @sapp sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=%40alice+OR+%40bob+OR+%40sapp+sort%3Acreated-desc\">Follow</a></p>\n\n<p>上の例では alice, bob, sapp をフォローしているイメージです。</p>\n\n<p>社長やプロダクトオーナーをフォローして、最近の会社の状況を把握するようにしています。他、自分が関心がある人もフォローしています。</p>\n\n<p>メンバーは固定ではなくたまに入れ替えます。現在 16 人をフォローしています。</p>\n\n<h3 id=\"エゴサーチする\">エゴサーチする</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>マスタカ -@me OR ますたか -@me OR masutaka -@me OR 増田 -@me sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=%E3%83%9E%E3%82%B9%E3%82%BF%E3%82%AB+-%40me+OR+%E3%81%BE%E3%81%99%E3%81%9F%E3%81%8B+-%40me+OR+masutaka+-%40me+OR+%E5%A2%97%E7%94%B0+-%40me+sort%3Acreated-desc\">Egosearch</a></p>\n\n<p>「マスタカ」「ますたか」「masutaka」「増田」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>\n\n<p>空メンション <code>masutaka</code> やアイコン絵文字 <code>:@masutaka:</code>、<code>&lt;!-- Boku ha masutaka nari. --&gt;</code> のような HTML コメントも捕捉出来ます。👁</p>\n\n<h3 id=\"気になるキーワードに言及した新着記事を読む\">気になるキーワードに言及した新着記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>looker -@me sort:created-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=looker+-%40me+sort%3Acreated-desc\">Search Looker</a></p>\n\n<p>「looker」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。</p>\n\n<h3 id=\"日報以外の最近更新された記事を読む\">日報以外の最近更新された記事を読む</h3>\n\n<p>検索クエリの例:</p>\n\n<pre><code>-category:日報 sort:updated-desc\n</code></pre>\n\n<p>🔖 ブラウザのブックマーク: <a href=\"https://feedforce.esa.io/posts?q=-category%3A%E6%97%A5%E5%A0%B1+sort%3Aupdated-desc\">日報以外</a></p>\n\n<p><code>日報/</code> カテゴリ以外で、最近更新された記事をたまに読んでいます。新着記事でないことがポイントです。良さそうな WIP 記事を先取りできることがあります。🤗</p>\n\n<h3 id=\"直近の記事を読む\">直近の記事を読む</h3>\n\n<p>退勤後とかは、新着記事一覧 <code>/posts</code> も見ます。</p>\n\n<h2 id=\"公式ドキュメント\">公式ドキュメント</h2>\n\n<p>ここまで使った検索クエリは、公式ドキュメント「<a href=\"https://docs.esa.io/posts/104\">help/記事の検索方法</a>」に書かれています。</p>\n\n<p>OR 検索よりも AND 検索のほうが優先度が高いとは書かれていないので、行間を読む必要があります。括弧は使えないので、前述の「エゴサーチする」は自分にとって難易度が高かったです。</p>\n\n<p>esa の皆様、その節はサポートありがとうございました。🙏</p>\n\n<h2 id=\"ちょっとした悩み\">ちょっとした悩み</h2>\n\n<p>スマホだと「フォローした人の新着記事を読む」が検索対象のメンバーアイコンで埋まるので、結構スクロールしないと記事にたどり着けません。メンバーアイコンと記事の境界も曖昧で、スクロールしすぎることがあります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"スマホだと数スクロールがメンバーアイコンで埋まる\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210211/20210211183124.png\" alt=\"f:id:masutaka26:20210211183124p:plain\" width=\"200\" height=\"400\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>スマホだと数スクロールがメンバーアイコンで埋まる</figcaption></figure></p>\n\n<p>もう少しメンバーアイコンのサイズが小さいと良いと思います。ﾁﾗｯﾁﾗｯ</p>\n\n<h2 id=\"所感\">所感</h2>\n\n<p>全ての新着記事を読む代わりに、テーマを決めた複数の方法で esa 記事を読み、かける時間を減らしました。２ヶ月ほど使っており、なかなか満足しています。</p>\n\n<p>ただ、関心外のことが入って来づらくなることは、特にこのフルリモートワーク下では怖さを感じます。</p>\n\n<p>カッチリやらずに、たまに <code>#esa-notify</code> を覗けばよいのですけどね。記事へのコメントだけを通知する Slack チャンネルでも作れば良いのかしら？</p>\n\n<h2 id=\"おまけ-ボツにした方法\">おまけ: ボツにした方法</h2>\n\n<p>コメントもエゴサーチしようとしましたが、なんか期待通りの振る舞いではなかったです。</p>\n\n<pre><code>comment:マスタカ OR comment:ますたか OR comment:masutaka OR comment:増田 sort:created-desc\n</code></pre>\n\n<p>コメント本文はきちんと検索出来ているようですが、検索結果はあくまで（コメント単位ではなく）記事単位なので、すでに読んだ記事のことが多いからかな？</p>\n\n<p>他の方法で網羅できているようなので、まあいいかあと思いました。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近好きな YouTuber はシバターです。シバターかわいいよ...。シバター...フィードフォースでは先日紹介したとおり、ドキュメント共有ツールに esa を使っています。メンバー数は 90、デイリーアクティブメンバーは 69 くらいです。2/10 の新着記事数は 106 でした。情報共有が活発な会社で、体感でもとても多いです。全ての新着記事と記事へのコメントは Slack の #esa-notify に通知されます。そこを全部読めば追えはしますが、いかんせんこの数です。真面目に全部読むと、私の場合はかける時間に見合わないなと感じたので、最近は esa の検索を利用した方法を使っています。使っている方法フォローした人の新着記事を読むエゴサーチする気になるキーワードに言及した新着記事を読む日報以外の最近更新された記事を読む直近の記事を読む公式ドキュメントちょっとした悩み所感おまけ: ボツにした方法使っている方法フォローした人の新着記事を読む検索クエリの例:@alice OR @bob OR @sapp sort:created-desc🔖 ブラウザのブックマーク: Follow上の例では alice, bob, sapp をフォローしているイメージです。社長やプロダクトオーナーをフォローして、最近の会社の状況を把握するようにしています。他、自分が関心がある人もフォローしています。メンバーは固定ではなくたまに入れ替えます。現在 16 人をフォローしています。エゴサーチする検索クエリの例:マスタカ -@me OR ますたか -@me OR masutaka -@me OR 増田 -@me sort:created-desc🔖 ブラウザのブックマーク: Egosearch「マスタカ」「ますたか」「masutaka」「増田」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。空メンション masutaka やアイコン絵文字 :@masutaka:、<!-- Boku ha masutaka nari. --> のような HTML コメントも捕捉出来ます。👁気になるキーワードに言及した新着記事を読む検索クエリの例:looker -@me sort:created-desc🔖 ブラウザのブックマーク: Search Looker「looker」が含まれ、且つ自分の記事を除いた新着記事を全部読んでいます。日報以外の最近更新された記事を読む検索クエリの例:-category:日報 sort:updated-desc🔖 ブラウザのブックマーク: 日報以外日報/ カテゴリ以外で、最近更新された記事をたまに読んでいます。新着記事でないことがポイントです。良さそうな WIP 記事を先取りできることがあります。🤗直近の記事を読む退勤後とかは、新着記事一覧 /posts も見ます。公式ドキュメントここまで使った検索クエリは、公式ドキュメント「help/記事の検索方法」に書かれています。OR 検索よりも AND 検索のほうが優先度が高いとは書かれていないので、行間を読む必要があります。括弧は使えないので、前述の「エゴサーチする」は自分にとって難易度が高かったです。esa の皆様、その節はサポートありがとうございました。🙏ちょっとした悩みスマホだと「フォローした人の新着記事を読む」が検索対象のメンバーアイコンで埋まるので、結構スクロールしないと記事にたどり着けません。メンバーアイコンと記事の境界も曖昧で、スクロールしすぎることがあります。スマホだと数スクロールがメンバーアイコンで埋まるもう少しメンバーアイコンのサイズが小さいと良いと思います。ﾁﾗｯﾁﾗｯ所感全ての新着記事を読む代わりに、テーマを決めた複数の方法で esa 記事を読み、かける時間を減らしました。２ヶ月ほど使っており、なかなか満足しています。ただ、関心外のことが入って来づらくなることは、特にこのフルリモートワーク下では怖さを感じます。カッチリやらずに、たまに #esa-notify を覗けばよいのですけどね。記事へのコメントだけを通知する Slack チャンネルでも作れば良いのかしら？おまけ: ボツにした方法コメントもエゴサーチしようとしましたが、なんか期待通りの振る舞いではなかったです。comment:マスタカ OR comment:ますたか OR comment:masutaka OR comment:増田 sort:created-descコメント本文はきちんと検索出来ているようですが、検索結果はあくまで（コメント単位ではなく）記事単位なので、すでに読んだ記事のことが多いからかな？他の方法で網羅できているようなので、まあいいかあと思いました。","link":"https://developer.feedforce.jp/entry/2021/02/15/110000","isoDate":"2021-02-15T02:00:00.000Z","dateMiliSeconds":1613354400000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210212/20210212181026.png","authorName":"masutaka"},{"title":"変化に耐え得る esa のカテゴリ設計を徹底的に考えてみた","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。夜の散歩（意味深）に勤しむ毎日です。</p>\n\n<p>フィードフォースではドキュメント共有ツールには <a href=\"https://esa.io/\">esa</a> と <a href=\"https://www.google.com/intl/ja/docs/about/\">Google ドキュメント</a><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>を、コミュニケーションツールには <a href=\"https://slack.com/\">Slack</a> を採用しています。</p>\n\n<p>情報共有はかなり活発で、2021/2/1 現在の esa 記事数は 81,324 です<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#現在のカテゴリ構成と課題\">現在のカテゴリ構成と課題</a></li>\n    <li><a href=\"#チームのスピードを上げるための大原則\">チームのスピードを上げるための大原則</a></li>\n    <li><a href=\"#チームのスピードを上げるための情報整理\">チームのスピードを上げるための情報整理</a><ul>\n            <li><a href=\"#1-Flow-型と-Stock-型の記事を理解する\">1. Flow 型と Stock 型の記事を理解する</a></li>\n            <li><a href=\"#2-基本は-Flow-型の記事にする\">2. 基本は Flow 型の記事にする</a></li>\n            <li><a href=\"#3-議事録カテゴリは出来るだけ作らない\">3. 議事録カテゴリは出来るだけ作らない</a></li>\n            <li><a href=\"#4-Slack-に流れていく情報も-Flow-型の記事にする\">4. Slack に流れていく情報も Flow 型の記事にする</a></li>\n            <li><a href=\"#5-使い続けられる情報を-Stock-記事として引き上げる\">5. 使い続けられる情報を Stock 記事として引き上げる</a></li>\n            <li><a href=\"#6-整理を頑張らないことで整理の難易度が低くなった\">6. 整理を頑張らないことで整理の難易度が低くなった</a></li>\n            <li><a href=\"#7-esa-を全ての情報の起点にする\">7. esa を全ての情報の起点にする</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#それをチームでやるのは難しすぎない\">それをチームでやるのは難しすぎない？</a></li>\n    <li><a href=\"#esa-は難しい\">esa は難しい</a></li>\n    <li><a href=\"#esa-の本当の正体\">esa の本当の正体</a></li>\n    <li><a href=\"#esa-への要望\">esa への要望</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n    <li><a href=\"#esa-公式アカウントからのアドバイス\">esa 公式アカウントからのアドバイス</a></li>\n    <li><a href=\"#コラム\">コラム</a><ul>\n            <li><a href=\"#記事のカテゴリ整理を頑張らない理由\">記事のカテゴリ整理を頑張らない理由</a></li>\n            <li><a href=\"#Flow-カテゴリをどこまで許容するか\">Flow カテゴリをどこまで許容するか</a></li>\n        </ul>\n    </li>\n</ul>\n\n<h2 id=\"現在のカテゴリ構成と課題\">現在のカテゴリ構成と課題</h2>\n\n<p>トップカテゴリは厳密にルール化されていて、これらの種類以外のカテゴリが増えることはありません。</p>\n\n<ul>\n<li><code>日報/</code>\n\n<ul>\n<li><code>2021/02/01 (月)/masutaka</code> といった記事が置かれる</li>\n<li>曜日がないなど、型から外れた日報は小人さんによって速やかに修正される。Bot 並に早いw</li>\n</ul>\n</li>\n<li><code>プロダクト1/</code>\n\n<ul>\n<li>実際には <code>Feedmatic</code> などのプロダクト名が入る</li>\n</ul>\n</li>\n<li>︙</li>\n<li><code>プロダクトN/</code></li>\n<li><code>プロジェクト/</code>\n\n<ul>\n<li>期間が決まっている系のプロジェクトカテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>チーム/</code>\n\n<ul>\n<li>人事や情報セキュリティなどのチーム系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>コミュニティ/</code>\n\n<ul>\n<li>技術系や読書会などのコミュニティ系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>ノウハウ/</code>\n\n<ul>\n<li>各種ツールのノウハウ系カテゴリが並ぶ</li>\n</ul>\n</li>\n<li><code>Feedforce Inc./</code>\n\n<ul>\n<li>会社全体に関係する記事が置かれる</li>\n</ul>\n</li>\n<li><code>Users/</code></li>\n<li><code>Templates/</code></li>\n<li><code>Archived/</code></li>\n</ul>\n\n\n<p>例えば「プロダクト1」の下は、議事録系を除き基本的に <a href=\"https://docs.esa.io/posts/298\">Stock 型の記事</a>になっており、「マニュアル」カテゴリの下にはさらに 15 の子カテゴリが生えているとします。</p>\n\n<ul>\n<li><code>プロダクト1/</code>\n\n<ul>\n<li><code>議事録/</code></li>\n<li><code>開発/</code></li>\n<li><code>コンサルティング/</code></li>\n<li><code>マーケティング/</code></li>\n<li><code>インシデント/</code></li>\n<li><code>ナレッジ/</code></li>\n<li><code>マニュアル/</code>\n\n<ul>\n<li>子カテゴリ数は 15</li>\n</ul>\n</li>\n<li>︙</li>\n<li><code>その他/</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>※ 複数のプロダクトから作った架空カテゴリです。</p>\n\n<p>ここまでならよく整理されているように見えますが、実際は古くてメンテナンスされていない記事が多く、言ってしまえばノイズが多い状況です。情報共有されればされるほど、ノイズが増えてしまう悪循環です。</p>\n\n<p>Slack に目を向けると、こちらもオープンではありますが、時にブログ記事並みのメッセージが投稿されることがあります。未読メッセージを読み進めると手が止まり、読み切るのが難しいと想像されます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ブログ記事並みのメッセージ例。これで半分です。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210202/20210202171748.png\" alt=\"f:id:masutaka26:20210202171748p:plain\" width=\"800\" height=\"674\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ブログ記事並みのメッセージ例。これで半分です。</figcaption></figure></p>\n\n<p>細切れの情報も多く川の流れのようで、断片化した情報をつなぎ合わせるのは難しいと思います。</p>\n\n<p>世の中には情報共有が足りないことに悩む組織は多いと思いますが、活発になったとしても、適切に整理されていなければその量に溺れてしまいます。</p>\n\n<p>一方で、最近のコロナ禍もあって 10 年前と今とでは変化のスピードは上がっています。変化に強いチーム設計、つまりは変化に強い情報整理設計が重要です。これをやらなければ、チームのスピードは徐々に下がっていくでしょう。</p>\n\n<h2 id=\"チームのスピードを上げるための大原則\">チームのスピードを上げるための大原則</h2>\n\n<p>私が社内で様々なプロダクトを渡り歩いた経験上、チームのスピードを上げるためには以下の 2 点が重要だと感じています。</p>\n\n<ul>\n<li>ノイズを減らす</li>\n<li>情報を一ヶ所に集める</li>\n</ul>\n\n\n<p>マネージャーはこれらの阻害要因を減らす仕掛けを作る必要があります。</p>\n\n<p>ただ、そういったことが得意な方ばかりではありません。むしろ情報量が一番多く、一番困っているのは彼らかもしれません。マネージャーに余裕がなければ、それがボトルネックとなりチームのスピードが下がります。</p>\n\n<p>これからその対策を考察していきます。</p>\n\n<h2 id=\"チームのスピードを上げるための情報整理\">チームのスピードを上げるための情報整理</h2>\n\n<p>はじめに書いておくと、出来るだけ整理を頑張らないことが重要です。</p>\n\n<h3 id=\"1-Flow-型と-Stock-型の記事を理解する\">1. Flow 型と Stock 型の記事を理解する</h3>\n\n<p>まずは公式ドキュメント「<a href=\"https://docs.esa.io/posts/298\">記事のストック・フローの分類と検索</a>」を読んで、Flow 型と Stock 型の記事の存在を知り、理解します。</p>\n\n<h3 id=\"2-基本は-Flow-型の記事にする\">2. 基本は Flow 型の記事にする</h3>\n\n<p>全て Flow 型にするくらいの気持ちで記事を作ります。記事が多くなっても視界に入りづらいし、整理する必要もないためです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Flow 型記事の例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131224825.png\" alt=\"f:id:masutaka26:20210131224825p:plain\" width=\"1024\" height=\"309\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Flow 型記事の例</figcaption></figure></p>\n\n<p>書き捨ての記事であれば <code>プロダクト1/2021/02/01/タイトル</code>、今月中は更新する記事であれば <code>プロダクト1/2021/02/タイトル</code> で良いと思います。ただ、さすがに今年中更新する記事は Stock 型の記事にしたほうが良いと思います。</p>\n\n<h3 id=\"3-議事録カテゴリは出来るだけ作らない\">3. 議事録カテゴリは出来るだけ作らない</h3>\n\n<p><code>プロダクト1/議事録/</code> のような議事録カテゴリはできるだけ作らず、<code>プロダクト1/2021/02/01/〇〇会議 議事録</code> のようなカテゴリとタイトルにします。議事録のような使い続けない記事を視界に入れるのは、どちらかと言えばノイズだからです。</p>\n\n<p>社内で以下のような階層をよく見かけますが<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>、一回限りの会議の置き場所に悩んでしまいます。</p>\n\n<ul>\n<li><code>プロダクト1/議事録/</code>\n\n<ul>\n<li><code>〇〇会議/YYYY/MM/DD/〇〇会議</code></li>\n<li><code>プランニング/YYYY/MM/DD/プランニング</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p><code>プロダクト1/議事録/20210201 〇×会議 議事録</code> のような自由なパターンも現れたりして、さらに悩ましくなります。</p>\n\n<p>過去の議事録をたどる目的でカテゴリを分けたいのであれば、記事の最初に「議事録一覧はこちら」みたいな検索リンクがあれば十分でしょう。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"「議事録一覧はこちら」の一例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210203/20210203114624.png\" alt=\"f:id:masutaka26:20210203114624p:plain\" width=\"800\" height=\"274\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>「議事録一覧はこちら」の一例</figcaption></figure></p>\n\n<p>それでも作りたい場合は <code>プロダクト1/議事録/〇〇会議/2021/02/01/〇〇会議 議事録</code> のような記事名にして、後から <code>プロダクト1/2021/02/01/〇〇会議 議事録</code> に一括変換して視界から消せるように、設計するのが良いと思います。</p>\n\n<p>一括変換の仕方は公式ドキュメント「<a href=\"https://docs.esa.io/posts/207\">記事のカテゴリを一括変更</a>」が分かりやすいです。</p>\n\n<h3 id=\"4-Slack-に流れていく情報も-Flow-型の記事にする\">4. Slack に流れていく情報も Flow 型の記事にする</h3>\n\n<p>Slack にはブログ記事並みのメッセージが投稿されることがあります。</p>\n\n<p>そうなりそうになったら迷わず <code>プロダクト1/2021/02/01/○○のお願い</code> といった Flow 型の記事を作り、その URL を Slack で共有します。</p>\n\n<p>他の場面で引用したい時は意外とあるものですし、内容をあとで更新したいこともあります。Slack だと特にあとからの更新には不向きです。</p>\n\n<p>何より当該記事をブラウザで開き、残りの Slack 未読メッセージをスイスイと読むことが出来ます。Slack に投稿されてしまうと、その長いメッセージを読みながら、他の channel に移動するのは億劫です。</p>\n\n<h3 id=\"5-使い続けられる情報を-Stock-記事として引き上げる\">5. 使い続けられる情報を Stock 記事として引き上げる</h3>\n\n<p>結局のところ、ほとんどの情報は使い続けることはありません。具体的すぎるからです。そのような具体的な情報は寝かすことで、抽象度の高い情報、例えばカテゴリ名を炙り出せることがあります。</p>\n\n<p>良いカテゴリ名が思いつかない時は、まだ抽象度が高くないと思うので、引き上げないほうが良いでしょう。</p>\n\n<p>いくつかの Flow 記事をしばらく寝かしたら、あとから汎用的な抽象度の高い Stock 記事のアイディアが湧くこともあります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"あとで Stock 記事として抽出する\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210201/20210201002905.png\" alt=\"f:id:masutaka26:20210201002905p:plain\" width=\"250\" height=\"466\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></figure></p>\n\n<h3 id=\"6-整理を頑張らないことで整理の難易度が低くなった\">6. 整理を頑張らないことで整理の難易度が低くなった</h3>\n\n<p>ここまででほとんどの記事は Flow 型の記事のはずです。冒頭に述べたノイズになるような記事は少なく、情報に溺れる確率は低いと思います。</p>\n\n<p>使い回しが効かない具体的な情報を Flow 型の記事に追いやることで、整理の難易度を低くすることが出来ました。</p>\n\n<h3 id=\"7-esa-を全ての情報の起点にする\">7. esa を全ての情報の起点にする</h3>\n\n<p>では、Google ドキュメントも同じようにしましょう！とは思っていません。esa を全ての情報の起点にする勢いで、適宜 Google ドキュメントにリンクを張ると良いでしょう。</p>\n\n<p>Google ドキュメントのフォルダ整理は出来るだけやらないほうが良いです。時間がいくらあっても足りません。Google Drive はただの情報プールです。Google Drive 内検索も優秀です。</p>\n\n<h2 id=\"それをチームでやるのは難しすぎない\">それをチームでやるのは難しすぎない？</h2>\n\n<p>そう思った方、正しい感覚です。</p>\n\n<p>「チームのスピードを上げるための情報整理」は「私が考える esa 原理主義」に振り切って書きました。情報整理のスキルに関して少数精鋭チームでないと、運用するのは難しいと思います。</p>\n\n<p>現在私は開発者 1 人、ビジネスメンバー 2 人のチームに所属しています。私主導でカテゴリを決めているので、これまで書いた方法で整理し、うまくいっている実感があります。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Flow 型の記事に対して、Stock 型の記事を少なく保てている\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231051.png\" alt=\"f:id:masutaka26:20210131231051p:plain\" width=\"250\" height=\"373\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Flow 型の記事に対して、Stock 型の記事を少なく保てている。</figcaption></figure></p>\n\n<p>そういえば初期は Flow 型の記事しか作りませんでした。</p>\n\n<h2 id=\"esa-は難しい\">esa は難しい</h2>\n\n<p>フィードフォースでは 1 年半ほど前まで Qiita:Team を使っていました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F08%2F22%2F141055\" title=\"社内の情報共有ツールを Qiita:Team から esa に乗り換えました - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<p>Qiita:Team はほぼ Flow 型の記事しか書けないため、これまで話した問題は出てきませんでした。いや「表面化しなかった」が正確でしょう。</p>\n\n<p>esa は Stock 型の記事も書けます。ブログと wiki が合体したようなツールなので、難しくないわけがありません。</p>\n\n<p>wiki を書くためには抽象的思考が必要です。私の観測範囲では、半分以上の方は具体的思考に寄り過ぎているため、得意ではないという実感です。意識したことがないかもしれません。</p>\n\n<h2 id=\"esa-の本当の正体\">esa の本当の正体</h2>\n\n<p>正直言って現在の esa は「情報整理のスキルに関して少数精鋭チーム」でないと、乗りこなすのは難しいと思います。</p>\n\n<p>これに気づいた時、Ruby という言語に似ていると思いました。</p>\n\n<p>Ruby は esa で採用されているプログラミング言語です。初心者はにこやかに迎えてくれますが、本番環境で使い続けるためには、コードで表現されていない振る舞いを読み解く必要があるなど、実は少数精鋭チーム向けの言語です。</p>\n\n<p><a href=\"https://team.esa.io/\">esa LLC</a> は少数精鋭チームのようなので、良くも悪くも「コンウェイの法則」が働いて、そのようなサービスになったのだと勝手に想像します。</p>\n\n<h2 id=\"esa-への要望\">esa への要望</h2>\n\n<p>社員数 100 人オーバーが見えてくると、型（制約）の必要性を感じます。</p>\n\n<ul>\n<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？\n\n<ul>\n<li>例: <code>プロダクト1/</code> 以下での新規作成は、デフォルトカテゴリが <code>プロダクト1/YYYY/MM/DD/</code> になる</li>\n</ul>\n</li>\n<li>フレームワーク的に、何らかのパターン以外のカテゴリを作れないようにする？</li>\n<li>第一階層カテゴリ以下で、そのようなパターンを数種類から選べるようにする？</li>\n</ul>\n\n\n<p>どれも難しい話ですかね...？</p>\n\n<p>現在社内で抱えている課題として「記事整理にハードルがある」は間違いなくあると思います。</p>\n\n<ul>\n<li>たくさんの記事を移動すると、<code>/posts</code> がその情報で埋まる<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></li>\n<li>移動しただけなのに、記事に自分の小さなアイコンが付く</li>\n<li>そもそも記事を 1 つ 1 つ移動するのが大変</li>\n<li>タイトルに入れてしまった日付をカテゴリにして...とかまですると、API を使わざるを得ない</li>\n</ul>\n\n\n<p>出来れば Windows のエクスプローラのようなカジュアルさで、且つ履歴が残るとうれしいです。</p>\n\n<p>あと、要望したことはありますが、現在の「カテゴリ以下の記事全て」に加えて、「カテゴリ直下の記事」「アーカイブした記事」を切り替えるような機能が欲しいです。</p>\n\n<p>イメージとしては、GitHub の UI に「カテゴリ直下の記事」を加えたものです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"In, On, Archived を切り替えられるイメージ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131231704.png\" alt=\"f:id:masutaka26:20210131231704p:plain\" width=\"400\" height=\"55\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>In, On, Archived を切り替えられるイメージ</figcaption></figure></p>\n\n<p>「カテゴリ直下の記事」は <code>on:カテゴリ</code> で検索できますが、知っているユーザーはごく僅かです。</p>\n\n<p>アーカイブの認知も怪しくて、古い記事が残る要因かもしれません。一部カテゴリではこんな工夫をしています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"アーカイブという手段を認知させている例\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210131/20210131232059.png\" alt=\"f:id:masutaka26:20210131232059p:plain\" width=\"800\" height=\"438\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>アーカイブという手段を認知させている例</figcaption></figure></p>\n\n<p>難しいと思いますが、情報整理のスキルがそれほど高くなくても使える UI 設計をお願いしたいところです。🙏</p>\n\n<p>もし、もっと詳しく私にヒアリングしたいなどあれば、masutaka@feedforce.jp または <a href=\"https://twitter.com/masutaka\">@masutaka</a> の DM までお知らせ下さい。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>私から見える、フィードフォースで抱えている情報整理の課題をまとめ、チームのスピードを上げるための整理方法を提案しました。</p>\n\n<p>ただ、それは「私が考える esa 原理主義」に振り切っているため、チームで採用するのは難しいと思います。</p>\n\n<p>カテゴリがデフォルト Flow 型になるなど、情報整理を頑張らず済む使い勝手になると、とてもうれしいです。</p>\n\n<h2 id=\"esa-公式アカウントからのアドバイス\">esa 公式アカウントからのアドバイス</h2>\n\n<blockquote><ul>\n<li>新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？</li>\n</ul>\n</blockquote>\n\n<p>こちらのアドバイスを頂いたので早速試しました。良さそうです！</p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">あるカテゴリ配下で &quot;Create a new post&quot; ボタンで記事を新規作成するときに、カテゴリが一致するFlowのテンプレートがあれば、そのテンプレートが自動的にプリセットされるという機能があります。（続く→）</p>&mdash; esa_io (@esa_io) <a href=\"https://twitter.com/esa_io/status/1356808249601712128?ref_src=twsrc%5Etfw\">2021年2月3日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<p><blockquote data-conversation=\"none\" class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">例えば以下のテンプレートがあったとして<br><br>- Templates/カテゴリ1/YYYY/MM/DD/テンプレートA<br>- Templates/カテゴリ1/サブカテゴリ1/YYYY/MM/DD/テンプレートB<br><br>「カテゴリ1」配下で記事作成→ テンプレートA <br>「カテゴリ1/サブカテゴリ2」配下で記事作成 →テンプレートB <br><br>がそれぞれ自動適用されます</p>&mdash; esa_io (@esa_io) <a href=\"https://twitter.com/esa_io/status/1356808846379937795?ref_src=twsrc%5Etfw\">2021年2月3日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<p>後日アンサー記事も頂きました！「所感」にこの記事の感想が書いてあります。\n<a href=\"https://docs.esa.io/posts/394\">ProTip/2021/02/03/特定のカテゴリ配下の記事作成時に、テンプレートを適用する - docs.esa.io</a></p>\n\n<h2 id=\"コラム\">コラム</h2>\n\n<p>自分の思いを書ききれないので、コラムに逃しました。(^^;</p>\n\n<h3 id=\"記事のカテゴリ整理を頑張らない理由\">記事のカテゴリ整理を頑張らない理由</h3>\n\n<p>こんな理由からです。</p>\n\n<ol>\n<li>歴史が証明している</li>\n<li>esa の検索がそこそこ優秀</li>\n</ol>\n\n\n<p>今では信じられないかもしれませんが、1990 年代の Yahoo! JAPAN は、人間のスタッフがウェブサイトの情報を収集してカテゴリ分類して登録する、ディレクトリ型検索サービスでした<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>。今はロボット型検索が使われているのは周知のとおりです。</p>\n\n<p>そのため Stock 型の記事だけを作り続けるといずれ破綻することは、<code>1</code> 歴史が証明していると言えます（やや大げさ）。</p>\n\n<p><code>2</code> については、公式ドキュメント「<a href=\"https://docs.esa.io/posts/104\">記事の検索方法</a>」にある検索クエリで、それなりに検索できます（諸説あり）。「<a href=\"https://docs.esa.io/posts/389\">キーワード検索しやすい記事にするコツ</a>」も参考にすると良いでしょう。</p>\n\n<h3 id=\"Flow-カテゴリをどこまで許容するか\">Flow カテゴリをどこまで許容するか</h3>\n\n<p>Flow カテゴリをどこまで許容するかは、悩ましいところです。</p>\n\n<p>(a) 制約をつけずに自由に作ることを許容するか。</p>\n\n<ul>\n<li>プロダクト1\n\n<ul>\n<li>セールス\n\n<ul>\n<li>...</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>開発\n\n<ul>\n<li>○○機能\n\n<ul>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<p>(b) 原理主義っぽく、１つの Flow カテゴリしか許容しないか。</p>\n\n<ul>\n<li>プロダクト1\n\n<ul>\n<li>セールス\n\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>開発\n\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>YYYY\n\n<ul>\n<li>MM\n\n<ul>\n<li>DD</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<p>(a) は職種横断的な情報共有を重視しないチームに合うと思います。中規模以上のチームです。</p>\n\n<p>(b) は職種横断的な情報共有を重視するチームに合うと思います。小さなチームです。</p>\n\n<p>はじめは (b) で作ってみて、やりづらくなってきたら (a) にすると良いでしょう。ただし、(a) の <code>プロダクト1/開発/○○機能/YYYY/MM/DD/</code> まで細かく Flow カテゴリを作るのは、把握が難しくなりそうですので、オススメはしません。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p><a href=\"https://workspace.google.co.jp/intl/ja/\">Google Workspace</a>（旧称 G Suite）を契約しています。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>現在のメンバー数は 90、最古の記事は 2014/4/3 です。<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:3\">\n<p>過去に推奨したことあります。ｽﾏﾇｽﾏﾇ&hellip;。<a href=\"#fnref:3\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:4\">\n<p><code>Archived/</code> 以下への移動は更新日時が変わらず <code>/posts</code> に現れないので、<a href=\"https://docs.esa.io/posts/207\">カテゴリ一括変更</a>と組み合わせれば、一応回避はできます。<a href=\"#fnref:4\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:5\">\n<p>今回の件で調べたところ、その<a href=\"https://jp.techcrunch.com/2017/06/29/yahoo-to-shut-down-directory-search/\">「Yahoo!カテゴリ」は2018年3月29日まで動いていた</a>ことを知りびっくりしました<a href=\"#fnref:5\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは id:masutaka26 です。夜の散歩（意味深）に勤しむ毎日です。フィードフォースではドキュメント共有ツールには esa と Google ドキュメント1を、コミュニケーションツールには Slack を採用しています。情報共有はかなり活発で、2021/2/1 現在の esa 記事数は 81,324 です2。現在のカテゴリ構成と課題チームのスピードを上げるための大原則チームのスピードを上げるための情報整理1. Flow 型と Stock 型の記事を理解する2. 基本は Flow 型の記事にする3. 議事録カテゴリは出来るだけ作らない4. Slack に流れていく情報も Flow 型の記事にする5. 使い続けられる情報を Stock 記事として引き上げる6. 整理を頑張らないことで整理の難易度が低くなった7. esa を全ての情報の起点にするそれをチームでやるのは難しすぎない？esa は難しいesa の本当の正体esa への要望まとめesa 公式アカウントからのアドバイスコラム記事のカテゴリ整理を頑張らない理由Flow カテゴリをどこまで許容するか現在のカテゴリ構成と課題トップカテゴリは厳密にルール化されていて、これらの種類以外のカテゴリが増えることはありません。日報/2021/02/01 (月)/masutaka といった記事が置かれる曜日がないなど、型から外れた日報は小人さんによって速やかに修正される。Bot 並に早いwプロダクト1/実際には Feedmatic などのプロダクト名が入る︙プロダクトN/プロジェクト/期間が決まっている系のプロジェクトカテゴリが並ぶチーム/人事や情報セキュリティなどのチーム系カテゴリが並ぶコミュニティ/技術系や読書会などのコミュニティ系カテゴリが並ぶノウハウ/各種ツールのノウハウ系カテゴリが並ぶFeedforce Inc./会社全体に関係する記事が置かれるUsers/Templates/Archived/例えば「プロダクト1」の下は、議事録系を除き基本的に Stock 型の記事になっており、「マニュアル」カテゴリの下にはさらに 15 の子カテゴリが生えているとします。プロダクト1/議事録/開発/コンサルティング/マーケティング/インシデント/ナレッジ/マニュアル/子カテゴリ数は 15︙その他/※ 複数のプロダクトから作った架空カテゴリです。ここまでならよく整理されているように見えますが、実際は古くてメンテナンスされていない記事が多く、言ってしまえばノイズが多い状況です。情報共有されればされるほど、ノイズが増えてしまう悪循環です。Slack に目を向けると、こちらもオープンではありますが、時にブログ記事並みのメッセージが投稿されることがあります。未読メッセージを読み進めると手が止まり、読み切るのが難しいと想像されます。ブログ記事並みのメッセージ例。これで半分です。細切れの情報も多く川の流れのようで、断片化した情報をつなぎ合わせるのは難しいと思います。世の中には情報共有が足りないことに悩む組織は多いと思いますが、活発になったとしても、適切に整理されていなければその量に溺れてしまいます。一方で、最近のコロナ禍もあって 10 年前と今とでは変化のスピードは上がっています。変化に強いチーム設計、つまりは変化に強い情報整理設計が重要です。これをやらなければ、チームのスピードは徐々に下がっていくでしょう。チームのスピードを上げるための大原則私が社内で様々なプロダクトを渡り歩いた経験上、チームのスピードを上げるためには以下の 2 点が重要だと感じています。ノイズを減らす情報を一ヶ所に集めるマネージャーはこれらの阻害要因を減らす仕掛けを作る必要があります。ただ、そういったことが得意な方ばかりではありません。むしろ情報量が一番多く、一番困っているのは彼らかもしれません。マネージャーに余裕がなければ、それがボトルネックとなりチームのスピードが下がります。これからその対策を考察していきます。チームのスピードを上げるための情報整理はじめに書いておくと、出来るだけ整理を頑張らないことが重要です。1. Flow 型と Stock 型の記事を理解するまずは公式ドキュメント「記事のストック・フローの分類と検索」を読んで、Flow 型と Stock 型の記事の存在を知り、理解します。2. 基本は Flow 型の記事にする全て Flow 型にするくらいの気持ちで記事を作ります。記事が多くなっても視界に入りづらいし、整理する必要もないためです。Flow 型記事の例書き捨ての記事であれば プロダクト1/2021/02/01/タイトル、今月中は更新する記事であれば プロダクト1/2021/02/タイトル で良いと思います。ただ、さすがに今年中更新する記事は Stock 型の記事にしたほうが良いと思います。3. 議事録カテゴリは出来るだけ作らないプロダクト1/議事録/ のような議事録カテゴリはできるだけ作らず、プロダクト1/2021/02/01/〇〇会議 議事録 のようなカテゴリとタイトルにします。議事録のような使い続けない記事を視界に入れるのは、どちらかと言えばノイズだからです。社内で以下のような階層をよく見かけますが3、一回限りの会議の置き場所に悩んでしまいます。プロダクト1/議事録/〇〇会議/YYYY/MM/DD/〇〇会議プランニング/YYYY/MM/DD/プランニングプロダクト1/議事録/20210201 〇×会議 議事録 のような自由なパターンも現れたりして、さらに悩ましくなります。過去の議事録をたどる目的でカテゴリを分けたいのであれば、記事の最初に「議事録一覧はこちら」みたいな検索リンクがあれば十分でしょう。「議事録一覧はこちら」の一例それでも作りたい場合は プロダクト1/議事録/〇〇会議/2021/02/01/〇〇会議 議事録 のような記事名にして、後から プロダクト1/2021/02/01/〇〇会議 議事録 に一括変換して視界から消せるように、設計するのが良いと思います。一括変換の仕方は公式ドキュメント「記事のカテゴリを一括変更」が分かりやすいです。4. Slack に流れていく情報も Flow 型の記事にするSlack にはブログ記事並みのメッセージが投稿されることがあります。そうなりそうになったら迷わず プロダクト1/2021/02/01/○○のお願い といった Flow 型の記事を作り、その URL を Slack で共有します。他の場面で引用したい時は意外とあるものですし、内容をあとで更新したいこともあります。Slack だと特にあとからの更新には不向きです。何より当該記事をブラウザで開き、残りの Slack 未読メッセージをスイスイと読むことが出来ます。Slack に投稿されてしまうと、その長いメッセージを読みながら、他の channel に移動するのは億劫です。5. 使い続けられる情報を Stock 記事として引き上げる結局のところ、ほとんどの情報は使い続けることはありません。具体的すぎるからです。そのような具体的な情報は寝かすことで、抽象度の高い情報、例えばカテゴリ名を炙り出せることがあります。良いカテゴリ名が思いつかない時は、まだ抽象度が高くないと思うので、引き上げないほうが良いでしょう。いくつかの Flow 記事をしばらく寝かしたら、あとから汎用的な抽象度の高い Stock 記事のアイディアが湧くこともあります。6. 整理を頑張らないことで整理の難易度が低くなったここまででほとんどの記事は Flow 型の記事のはずです。冒頭に述べたノイズになるような記事は少なく、情報に溺れる確率は低いと思います。使い回しが効かない具体的な情報を Flow 型の記事に追いやることで、整理の難易度を低くすることが出来ました。7. esa を全ての情報の起点にするでは、Google ドキュメントも同じようにしましょう！とは思っていません。esa を全ての情報の起点にする勢いで、適宜 Google ドキュメントにリンクを張ると良いでしょう。Google ドキュメントのフォルダ整理は出来るだけやらないほうが良いです。時間がいくらあっても足りません。Google Drive はただの情報プールです。Google Drive 内検索も優秀です。それをチームでやるのは難しすぎない？そう思った方、正しい感覚です。「チームのスピードを上げるための情報整理」は「私が考える esa 原理主義」に振り切って書きました。情報整理のスキルに関して少数精鋭チームでないと、運用するのは難しいと思います。現在私は開発者 1 人、ビジネスメンバー 2 人のチームに所属しています。私主導でカテゴリを決めているので、これまで書いた方法で整理し、うまくいっている実感があります。Flow 型の記事に対して、Stock 型の記事を少なく保てている。そういえば初期は Flow 型の記事しか作りませんでした。esa は難しいフィードフォースでは 1 年半ほど前まで Qiita:Team を使っていました。Qiita:Team はほぼ Flow 型の記事しか書けないため、これまで話した問題は出てきませんでした。いや「表面化しなかった」が正確でしょう。esa は Stock 型の記事も書けます。ブログと wiki が合体したようなツールなので、難しくないわけがありません。wiki を書くためには抽象的思考が必要です。私の観測範囲では、半分以上の方は具体的思考に寄り過ぎているため、得意ではないという実感です。意識したことがないかもしれません。esa の本当の正体正直言って現在の esa は「情報整理のスキルに関して少数精鋭チーム」でないと、乗りこなすのは難しいと思います。これに気づいた時、Ruby という言語に似ていると思いました。Ruby は esa で採用されているプログラミング言語です。初心者はにこやかに迎えてくれますが、本番環境で使い続けるためには、コードで表現されていない振る舞いを読み解く必要があるなど、実は少数精鋭チーム向けの言語です。esa LLC は少数精鋭チームのようなので、良くも悪くも「コンウェイの法則」が働いて、そのようなサービスになったのだと勝手に想像します。esa への要望社員数 100 人オーバーが見えてくると、型（制約）の必要性を感じます。新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？例: プロダクト1/ 以下での新規作成は、デフォルトカテゴリが プロダクト1/YYYY/MM/DD/ になるフレームワーク的に、何らかのパターン以外のカテゴリを作れないようにする？第一階層カテゴリ以下で、そのようなパターンを数種類から選べるようにする？どれも難しい話ですかね...？現在社内で抱えている課題として「記事整理にハードルがある」は間違いなくあると思います。たくさんの記事を移動すると、/posts がその情報で埋まる4移動しただけなのに、記事に自分の小さなアイコンが付くそもそも記事を 1 つ 1 つ移動するのが大変タイトルに入れてしまった日付をカテゴリにして...とかまですると、API を使わざるを得ない出来れば Windows のエクスプローラのようなカジュアルさで、且つ履歴が残るとうれしいです。あと、要望したことはありますが、現在の「カテゴリ以下の記事全て」に加えて、「カテゴリ直下の記事」「アーカイブした記事」を切り替えるような機能が欲しいです。イメージとしては、GitHub の UI に「カテゴリ直下の記事」を加えたものです。In, On, Archived を切り替えられるイメージ「カテゴリ直下の記事」は on:カテゴリ で検索できますが、知っているユーザーはごく僅かです。アーカイブの認知も怪しくて、古い記事が残る要因かもしれません。一部カテゴリではこんな工夫をしています。アーカイブという手段を認知させている例難しいと思いますが、情報整理のスキルがそれほど高くなくても使える UI 設計をお願いしたいところです。🙏もし、もっと詳しく私にヒアリングしたいなどあれば、masutaka@feedforce.jp または @masutaka の DM までお知らせ下さい。まとめ私から見える、フィードフォースで抱えている情報整理の課題をまとめ、チームのスピードを上げるための整理方法を提案しました。ただ、それは「私が考える esa 原理主義」に振り切っているため、チームで採用するのは難しいと思います。カテゴリがデフォルト Flow 型になるなど、情報整理を頑張らず済む使い勝手になると、とてもうれしいです。esa 公式アカウントからのアドバイス新規作成時にデフォルトカテゴリが Flow 型になるような、型を設定できると良い？こちらのアドバイスを頂いたので早速試しました。良さそうです！あるカテゴリ配下で \"Create a new post\" ボタンで記事を新規作成するときに、カテゴリが一致するFlowのテンプレートがあれば、そのテンプレートが自動的にプリセットされるという機能があります。（続く→）— esa_io (@esa_io) 2021年2月3日  例えば以下のテンプレートがあったとして- Templates/カテゴリ1/YYYY/MM/DD/テンプレートA- Templates/カテゴリ1/サブカテゴリ1/YYYY/MM/DD/テンプレートB「カテゴリ1」配下で記事作成→ テンプレートA 「カテゴリ1/サブカテゴリ2」配下で記事作成 →テンプレートB がそれぞれ自動適用されます— esa_io (@esa_io) 2021年2月3日  後日アンサー記事も頂きました！「所感」にこの記事の感想が書いてあります。ProTip/2021/02/03/特定のカテゴリ配下の記事作成時に、テンプレートを適用する - docs.esa.ioコラム自分の思いを書ききれないので、コラムに逃しました。(^^;記事のカテゴリ整理を頑張らない理由こんな理由からです。歴史が証明しているesa の検索がそこそこ優秀今では信じられないかもしれませんが、1990 年代の Yahoo! JAPAN は、人間のスタッフがウェブサイトの情報を収集してカテゴリ分類して登録する、ディレクトリ型検索サービスでした5。今はロボット型検索が使われているのは周知のとおりです。そのため Stock 型の記事だけを作り続けるといずれ破綻することは、1 歴史が証明していると言えます（やや大げさ）。2 については、公式ドキュメント「記事の検索方法」にある検索クエリで、それなりに検索できます（諸説あり）。「キーワード検索しやすい記事にするコツ」も参考にすると良いでしょう。Flow カテゴリをどこまで許容するかFlow カテゴリをどこまで許容するかは、悩ましいところです。(a) 制約をつけずに自由に作ることを許容するか。プロダクト1セールス...YYYYMMDD開発○○機能YYYYMMDDYYYYMMDDYYYYMMDD(b) 原理主義っぽく、１つの Flow カテゴリしか許容しないか。プロダクト1セールス...開発...YYYYMMDD(a) は職種横断的な情報共有を重視しないチームに合うと思います。中規模以上のチームです。(b) は職種横断的な情報共有を重視するチームに合うと思います。小さなチームです。はじめは (b) で作ってみて、やりづらくなってきたら (a) にすると良いでしょう。ただし、(a) の プロダクト1/開発/○○機能/YYYY/MM/DD/ まで細かく Flow カテゴリを作るのは、把握が難しくなりそうですので、オススメはしません。Google Workspace（旧称 G Suite）を契約しています。↩現在のメンバー数は 90、最古の記事は 2014/4/3 です。↩過去に推奨したことあります。ｽﾏﾇｽﾏﾇ…。↩Archived/ 以下への移動は更新日時が変わらず /posts に現れないので、カテゴリ一括変更と組み合わせれば、一応回避はできます。↩今回の件で調べたところ、その「Yahoo!カテゴリ」は2018年3月29日まで動いていたことを知りびっくりしました↩","link":"https://developer.feedforce.jp/entry/2021/02/03/110000","isoDate":"2021-02-03T02:00:00.000Z","dateMiliSeconds":1612317600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20210202/20210202122517.png","authorName":"masutaka"},{"title":"pushover orb のメンテナーになった","content":"個人で Slack workspace を作るのはオーバースペックだという宗教的な理由から、各種通知は Pushover という通知サービスを利用しています。[2015-03-08-1] に紹介記事を書いてましたね。\n今は亡き im.kayac.com を便利にしたやつと言えば、分かる人には分かるでしょうか？\n長らく CI の失敗通知は CircleCI のコンソールを見て久しぶりに気づくという、ダメな運用をしていました。去年の 9 /13 に重い腰を上げて、CI が失敗したら Pushover に通知させようとしました。その時作った PR がこちらです。\nhttps://github.com/pbrisbin/pushover-orb/pull/1 レビューして頂いたは良いが、放置してしまい、修正 commit をしたのが先日の 1/18。無事マージされましたが、作者様は GitHub Actions に移行しており、メンテナーにならないかとお誘いを受けました。\nhttps://github.com/pbrisbin/pushover-orb/pull/1#issuecomment-762920348 ちょうど tfupdate orb で CircleCI Orb の勘所は掴んでいたので、喜んで承諾。リリース周りを整えたリポジトリがこちらです。\n  メンテナーも変わったことだし、メジャーバージョンアップしつつ v2.0.0 をリリースしました。\nhttps://circleci.com/developer/orbs/orb/masutaka/pushover?version=2.0.0 https://github.com/masutaka/pushover-orb/releases/tag/v2.0.0 よろしければご利用くださいませ。","contentSnippet":"個人で Slack workspace を作るのはオーバースペックだという宗教的な理由から、各種通知は Pushover という通知サービスを利用しています。[2015-03-08-1] に紹介記事を書いてましたね。今は亡き im.kayac.com を便利にしたやつと言えば、分かる人には分かるでしょうか？長らく CI の失敗通知は CircleCI のコンソールを見て久しぶりに気づくという、ダメな運用をしていました。去年の 9 /13 に重い腰を上げて、CI が失敗したら Pushover に通知させようとしました。その時作った PR がこちらです。https://github.com/pbrisbin/pushover-orb/pull/1 レビューして頂いたは良いが、放置してしまい、修正 commit をしたのが先日の 1/18。無事マージされましたが、作者様は GitHub Actions に移行しており、メンテナーにならないかとお誘いを受けました。https://github.com/pbrisbin/pushover-orb/pull/1#issuecomment-762920348 ちょうど tfupdate orb で CircleCI Orb の勘所は掴んでいたので、喜んで承諾。リリース周りを整えたリポジトリがこちらです。  メンテナーも変わったことだし、メジャーバージョンアップしつつ v2.0.0 をリリースしました。https://circleci.com/developer/orbs/orb/masutaka/pushover?version=2.0.0 https://github.com/masutaka/pushover-orb/releases/tag/v2.0.0 よろしければご利用くださいませ。","link":"https://masutaka.net/2021-01-22-1/","isoDate":"2021-01-22T00:00:00.000Z","dateMiliSeconds":1611273600000,"authorName":"masutaka"},{"title":"tfupdate orb の circleci/orb-tools を v8.27.5 から v10.0.3 にアップデートした","content":"[2019-12-20-1] で circleci/orb-tools を解説しました。リリースフローがよく出来ていたので、感動した記憶があります。\n  しかし、記事を書いた時にはすでに v9.0.0 がリリースされており、それはそれは大きな BREAKING CHANGES でした&hellip;。\nやる気が出なかったので、tfupdate orb で使っているバージョンはずっと据え置いていましたが、今日急にやる気になったので、最新の v10.0.3 にアップデートしました。\n当該 PR はこちらです。.circleci/config.yml がかなり短くなりました。\nhttps://github.com/masutaka/circleci-tfupdate-orb/pull/2 公式ドキュメント や circleci/orb-tools のドキュメント はありますが、よく分からないのと、今までの経緯からあまり信用できないので、v10.0.3 のコードリーディング をして理解しました。\ncircleci/orb-tools 自身の .circleci/config.yml も読みました。結果的にここまで複雑にする必要はなかったです。\nhttps://github.com/CircleCI-Public/orb-tools-orb/blob/v10.0.3/.circleci/config.yml 今までは master ブランチに commit するたびに orb のバージョンが自動的に上がっていきました。セマンティックバージョンの制御はできません。\n現在はその commit message によって、orb バージョンを半自動的に上げられるようになりました。セマンティックバージョンを制御可能です。\nv8.27.5 での振る舞い master ブランチに commit が追加された時、src/commands または src/jobs 以下が変更されていれば minor version が、それ以外の変更では patch version が自動的に上がりました。major version はサポートされていませんでした。\n何も考えずに済んだので楽ではありましたが、制御できないのは不満があったのかもしれません。\nv10.0.3 での振る舞い master ブランチに commit が追加された時、当該 commit message に以下の文字列が含まれていれば（例 ）、その指定に従ってバージョンが上がります。","contentSnippet":"[2019-12-20-1] で circleci/orb-tools を解説しました。リリースフローがよく出来ていたので、感動した記憶があります。  しかし、記事を書いた時にはすでに v9.0.0 がリリースされており、それはそれは大きな BREAKING CHANGES でした…。やる気が出なかったので、tfupdate orb で使っているバージョンはずっと据え置いていましたが、今日急にやる気になったので、最新の v10.0.3 にアップデートしました。当該 PR はこちらです。.circleci/config.yml がかなり短くなりました。https://github.com/masutaka/circleci-tfupdate-orb/pull/2 公式ドキュメント や circleci/orb-tools のドキュメント はありますが、よく分からないのと、今までの経緯からあまり信用できないので、v10.0.3 のコードリーディング をして理解しました。circleci/orb-tools 自身の .circleci/config.yml も読みました。結果的にここまで複雑にする必要はなかったです。https://github.com/CircleCI-Public/orb-tools-orb/blob/v10.0.3/.circleci/config.yml 今までは master ブランチに commit するたびに orb のバージョンが自動的に上がっていきました。セマンティックバージョンの制御はできません。現在はその commit message によって、orb バージョンを半自動的に上げられるようになりました。セマンティックバージョンを制御可能です。v8.27.5 での振る舞い master ブランチに commit が追加された時、src/commands または src/jobs 以下が変更されていれば minor version が、それ以外の変更では patch version が自動的に上がりました。major version はサポートされていませんでした。何も考えずに済んだので楽ではありましたが、制御できないのは不満があったのかもしれません。v10.0.3 での振る舞い master ブランチに commit が追加された時、当該 commit message に以下の文字列が含まれていれば（例 ）、その指定に従ってバージョンが上がります。","link":"https://masutaka.net/2021-01-16-1/","isoDate":"2021-01-16T00:00:00.000Z","dateMiliSeconds":1610755200000,"authorName":"masutaka"},{"title":"思考を寝かせて、優先順位を決めるための「やるかもしれないリスト」がとてもうまくワークしている","content":"[2020-12-03-1] では優先度は優先順位の下位レイヤーであり、優先順位を決めることが大事という話をしました。では優先順位はどう決めると良いでしょうか？\n私はここ 10 年くらいの試行錯誤の末に「やるかもしれないリスト」という方法にたどり着きました。\n現在はこのような esa 上の 1 記事として存在しています。\n  私が「やるかもしれないリスト」でやっていることはだいたい 3 つです。\n・頭の中を 1 つのテキストファイルにリストとして書き出し続ける\n・優先順位を並べ替え続ける\n・敢えて時間を置くことで、思考を寝かせ、よく練られた考えにし続ける\n2020-06-09 に作ってから 203 回更新しています。1 日 1 回以上更新している計算になります。\nアイディアを思いつくたびに追加したり順番を入れ替えたりしているので、このような更新回数になりました。こういうことはだいたい、仕事以外の時間、例えば散歩やシャワーの時に思いつきますよね。\n以下の 4 つのポリシーで「やるかもしれないリスト」を更新し続けています。\n1. 1 つのテキストファイルにする この段階では、GitHub Issue や Trello、Asana などの便利なタスク管理ツールは使いません。\nそもそも「やるかもしれないリスト」はタスクに落とし込む前の、もっと曖昧なものを扱う方法です。\n各種タスク管理ツールは、具現化し、やることが決まったタスクを扱うツールだと思うので、その前の段階で使うのには適さないと考えています。\n思いついたベースでタスク管理ツールに追加していくと、重要度が低いものや、まだ考えが練られていないタスクが作られがちです。一度タスクにしてしまうと、思考を寝かせて考えを練るのは難しい気がしますし、順番もつけづらく、削除もやりづらいと思います。\n「やるかもしれないリスト」に一旦溜めることで、それらを避けることが出来ます。\n2. 番号付きリストにする 先に話したとおり優先順位を決めることが目的の 1 つなので、その意図を反映した番号付きリスト（ordered list）にしています。ただのリスト（unordered list）にはしていません。\nさらに書くと、h1 や h2 などの構造化は、順番を付けづらくなるのでオススメはしません。\n前述の画像で構造化しているのは、私が現在一時的に複数プロジェクトに所属していたり、会社全体に関わることを多少やっているからです。繰り返しますが、順番を付けづらくなるのでオススメはしません。\n3. 説明はできるだけ簡素にする 以下は実際のリストを抜粋したものです。\n1. xxx view の primary_key に媒体も加える [:slack:](URL) * Yahoo! JAPAN と Yahoo! が混在しているので、力技で直す必要がある 1.","contentSnippet":"[2020-12-03-1] では優先度は優先順位の下位レイヤーであり、優先順位を決めることが大事という話をしました。では優先順位はどう決めると良いでしょうか？私はここ 10 年くらいの試行錯誤の末に「やるかもしれないリスト」という方法にたどり着きました。現在はこのような esa 上の 1 記事として存在しています。  私が「やるかもしれないリスト」でやっていることはだいたい 3 つです。・頭の中を 1 つのテキストファイルにリストとして書き出し続ける・優先順位を並べ替え続ける・敢えて時間を置くことで、思考を寝かせ、よく練られた考えにし続ける2020-06-09 に作ってから 203 回更新しています。1 日 1 回以上更新している計算になります。アイディアを思いつくたびに追加したり順番を入れ替えたりしているので、このような更新回数になりました。こういうことはだいたい、仕事以外の時間、例えば散歩やシャワーの時に思いつきますよね。以下の 4 つのポリシーで「やるかもしれないリスト」を更新し続けています。1. 1 つのテキストファイルにする この段階では、GitHub Issue や Trello、Asana などの便利なタスク管理ツールは使いません。そもそも「やるかもしれないリスト」はタスクに落とし込む前の、もっと曖昧なものを扱う方法です。各種タスク管理ツールは、具現化し、やることが決まったタスクを扱うツールだと思うので、その前の段階で使うのには適さないと考えています。思いついたベースでタスク管理ツールに追加していくと、重要度が低いものや、まだ考えが練られていないタスクが作られがちです。一度タスクにしてしまうと、思考を寝かせて考えを練るのは難しい気がしますし、順番もつけづらく、削除もやりづらいと思います。「やるかもしれないリスト」に一旦溜めることで、それらを避けることが出来ます。2. 番号付きリストにする 先に話したとおり優先順位を決めることが目的の 1 つなので、その意図を反映した番号付きリスト（ordered list）にしています。ただのリスト（unordered list）にはしていません。さらに書くと、h1 や h2 などの構造化は、順番を付けづらくなるのでオススメはしません。前述の画像で構造化しているのは、私が現在一時的に複数プロジェクトに所属していたり、会社全体に関わることを多少やっているからです。繰り返しますが、順番を付けづらくなるのでオススメはしません。3. 説明はできるだけ簡素にする 以下は実際のリストを抜粋したものです。1. xxx view の primary_key に媒体も加える [:slack:](URL) * Yahoo! JAPAN と Yahoo! が混在しているので、力技で直す必要がある 1.","link":"https://masutaka.net/2021-01-05-1/","isoDate":"2021-01-05T00:00:00.000Z","dateMiliSeconds":1609804800000,"authorName":"masutaka"},{"title":"『データマネジメントが30分でわかる本』を読んだ","content":"4 月からプログラマーからデータアーキテクト（データ整備人）にキャリアチェンジして（そうなの？）、Looker Advent Calendar 2020 のこの記事で知ったので読みました。￥500 と、大変お求めやすい価格になっています。\n データマネジメント知識体系 DMBOK （でぃんぼっく）の独自要約とケーススタディ集です。全 11 章それぞれで 30 秒、3 分、30 分コースを選ぶことが出来るので、ざっと読むのもじっくり読むのも自由な点が秀逸です。\nDMBOK 自体知らなかったので、取っ掛かりにはとても良い本でした。SLA はいずれ決めようかなーとか思ったりしました。\n ","contentSnippet":"4 月からプログラマーからデータアーキテクト（データ整備人）にキャリアチェンジして（そうなの？）、Looker Advent Calendar 2020 のこの記事で知ったので読みました。￥500 と、大変お求めやすい価格になっています。 データマネジメント知識体系 DMBOK （でぃんぼっく）の独自要約とケーススタディ集です。全 11 章それぞれで 30 秒、3 分、30 分コースを選ぶことが出来るので、ざっと読むのもじっくり読むのも自由な点が秀逸です。DMBOK 自体知らなかったので、取っ掛かりにはとても良い本でした。SLA はいずれ決めようかなーとか思ったりしました。","link":"https://masutaka.net/2020-12-20-1/","isoDate":"2020-12-20T00:00:00.000Z","dateMiliSeconds":1608422400000,"authorName":"masutaka"},{"title":"優先度より優先順位のほうが偉い","content":"この記事は Feedforce Advent Calendar 2020 の 3 日目の記事です。\n昨日は kysnrm の「さよなら湯島 」でした。私も今のところに住んで来年で 6 年になるので、8 回目の引っ越しを少し考えてますが、まだ状況が流動的なので悩ましい&hellip;。\n（ここから歌詞）\n優先度を付けると、高高高高高高とかになることあるよね。みんな優先度が高い。\nでも人間は一度に複数のタスクを処理することは出来ないよ。\nそれに実際終わってみたら、終わった順番が付いているはずだよ。\nじゃあ 1, 2, 3&hellip; とタスクに順番を付けてみようか。つまりは優先順位ね。\n優先度より優先順位のほうが偉い。ダンダン\n優先度は優先順位を決める１つの要素でしかないよ。区別しようか。\n例えば他にもこんなのを考慮する必要があるよ。\n・期日\n・かかる時間\n・かかるお金\n・サービスへのインパクト（顧客増加、顧客満足度など）\n・他のタスクがどれだけ効率化するか？\n優先度より優先順位のほうが偉い。ダンダンダン\n先の例だと、優先度はだいたい「期日」と「サービスへのインパクト」でふんわり決まっていることが多いと思うよ。\n作業者は他の要素も考慮して「優先順位」を決めると良いよ。\nとは言え、考えすぎても難しいから、最初は「優先度」「かかる時間」「期日」から「優先順位」を決めると良いよ。\nタスクAのほうが優先度が高いけど、タスクBはすぐ終わりそうだし、タスクAの期日までまだ余裕があるから、タスクBを先にやろう的な。\n優先度より優先順位のほうが偉い。ダンダンダ、ダン\nつまりは優先度よりも優先順位は上位のレイヤー、優先度より優先順位のほうが偉いということよ！\n優先度より優先順位のほうが偉い。ダンダンダ、ダダン（号泣してみんな立ち上がる）\n（歌詞終わり）\n次回（？）は、私が使っている優先順位を決めるための具体的なテクニックをご紹介します。\n明日の Feedforce Advent Calendar 2020 は、八百くんがよく日報に書いていた AI Quest の話をしてくれるみたいです。お楽しみに。","contentSnippet":"この記事は Feedforce Advent Calendar 2020 の 3 日目の記事です。昨日は kysnrm の「さよなら湯島 」でした。私も今のところに住んで来年で 6 年になるので、8 回目の引っ越しを少し考えてますが、まだ状況が流動的なので悩ましい…。（ここから歌詞）優先度を付けると、高高高高高高とかになることあるよね。みんな優先度が高い。でも人間は一度に複数のタスクを処理することは出来ないよ。それに実際終わってみたら、終わった順番が付いているはずだよ。じゃあ 1, 2, 3… とタスクに順番を付けてみようか。つまりは優先順位ね。優先度より優先順位のほうが偉い。ダンダン優先度は優先順位を決める１つの要素でしかないよ。区別しようか。例えば他にもこんなのを考慮する必要があるよ。・期日・かかる時間・かかるお金・サービスへのインパクト（顧客増加、顧客満足度など）・他のタスクがどれだけ効率化するか？優先度より優先順位のほうが偉い。ダンダンダン先の例だと、優先度はだいたい「期日」と「サービスへのインパクト」でふんわり決まっていることが多いと思うよ。作業者は他の要素も考慮して「優先順位」を決めると良いよ。とは言え、考えすぎても難しいから、最初は「優先度」「かかる時間」「期日」から「優先順位」を決めると良いよ。タスクAのほうが優先度が高いけど、タスクBはすぐ終わりそうだし、タスクAの期日までまだ余裕があるから、タスクBを先にやろう的な。優先度より優先順位のほうが偉い。ダンダンダ、ダンつまりは優先度よりも優先順位は上位のレイヤー、優先度より優先順位のほうが偉いということよ！優先度より優先順位のほうが偉い。ダンダンダ、ダダン（号泣してみんな立ち上がる）（歌詞終わり）次回（？）は、私が使っている優先順位を決めるための具体的なテクニックをご紹介します。明日の Feedforce Advent Calendar 2020 は、八百くんがよく日報に書いていた AI Quest の話をしてくれるみたいです。お楽しみに。","link":"https://masutaka.net/2020-12-03-1/","isoDate":"2020-12-03T00:00:00.000Z","dateMiliSeconds":1606953600000,"authorName":"masutaka"},{"title":"『理論から学ぶデータベース実践入門』を読んだ","content":"4 月から Looker という BI ツールを使って、ウェブ広告の媒体数値や計測数値などの分析や可視化をすべく、日々取り組んでいます。\nちょうど先月社内勉強会でそんな話をしました。\n 現在扱っているデータは Web アプリケーションで扱うような、正規化されたきれいなデータではありません。NULL は頻繁に出てきますし、サブクエリ等でゴリッときれいにしてキャッシュする処理も書いたりします。いつの間にか想定外のレコードが入っていて、定義を変更することもあります。\n今までこのようなデータに向き合ったことはなかったので、こんなスキーマで良いのかなあ？とか思いながらの毎日でした。\nそんな中、数年前に 94 ページ目まで読んで挫折したこの本が頭にちらついていました。\n 以前はふわっと読み始めたと記憶していますが、今回は割と明確な課題があります。今回は挫折しなさそうな気がしたのと、何かのヒントを期待して読むことにしました。\n結論から書くと P155 に明確な答えが書いてありました。\n リレーショナルモデルに適合しないデータをテーブルを用いて格納する場合は、リレーショナルモデルの原理原則に従う必要はまるでありません。そのようなテーブルでは、NULLを用いてもかまいませんし、正規化をする必要すらないでしょう。\n ここを読むまでは、仮にリレーショナルモデルの原理原則に従うのだとしたら、すべてのカラムで NULL を許容しているテーブルを ETL 等でリレーショナルモデルに適合したテーブルにクリーニングするのかなあ？でも現実的ではないなあ？など考えながら読んでいました。なので、急に答えが降ってきたようでした。\nSQL はリレーショナルモデルを扱うことが得意ですが、そうでないものも扱って良いと力強く書いてあります。もちろん用法用量を守って。\n特に目の前の課題が解決したわけではありませんが、なにか光が見えた気がしました。\n他の話も一応書いておくと、理論だけあって全部を理解するのはかなり難しく、特に第２〜４章は全く頭に入ってきませんでした。数年前はここで挫折&hellip;。\nただし、第１章の SQL と集合の関係については比較的容易で、私が数年前に読んだ時は SQL への向き合い方が変わりました。気になる人は第１章だけでも読むと良いかもしれません。他も第９章の履歴データや第１３章のリファクタリングなども。\nなにか課題を抱えている人は、あまり気負わずに流して読むと良いかもしれません。","contentSnippet":"4 月から Looker という BI ツールを使って、ウェブ広告の媒体数値や計測数値などの分析や可視化をすべく、日々取り組んでいます。ちょうど先月社内勉強会でそんな話をしました。 現在扱っているデータは Web アプリケーションで扱うような、正規化されたきれいなデータではありません。NULL は頻繁に出てきますし、サブクエリ等でゴリッときれいにしてキャッシュする処理も書いたりします。いつの間にか想定外のレコードが入っていて、定義を変更することもあります。今までこのようなデータに向き合ったことはなかったので、こんなスキーマで良いのかなあ？とか思いながらの毎日でした。そんな中、数年前に 94 ページ目まで読んで挫折したこの本が頭にちらついていました。 以前はふわっと読み始めたと記憶していますが、今回は割と明確な課題があります。今回は挫折しなさそうな気がしたのと、何かのヒントを期待して読むことにしました。結論から書くと P155 に明確な答えが書いてありました。 リレーショナルモデルに適合しないデータをテーブルを用いて格納する場合は、リレーショナルモデルの原理原則に従う必要はまるでありません。そのようなテーブルでは、NULLを用いてもかまいませんし、正規化をする必要すらないでしょう。 ここを読むまでは、仮にリレーショナルモデルの原理原則に従うのだとしたら、すべてのカラムで NULL を許容しているテーブルを ETL 等でリレーショナルモデルに適合したテーブルにクリーニングするのかなあ？でも現実的ではないなあ？など考えながら読んでいました。なので、急に答えが降ってきたようでした。SQL はリレーショナルモデルを扱うことが得意ですが、そうでないものも扱って良いと力強く書いてあります。もちろん用法用量を守って。特に目の前の課題が解決したわけではありませんが、なにか光が見えた気がしました。他の話も一応書いておくと、理論だけあって全部を理解するのはかなり難しく、特に第２〜４章は全く頭に入ってきませんでした。数年前はここで挫折…。ただし、第１章の SQL と集合の関係については比較的容易で、私が数年前に読んだ時は SQL への向き合い方が変わりました。気になる人は第１章だけでも読むと良いかもしれません。他も第９章の履歴データや第１３章のリファクタリングなども。なにか課題を抱えている人は、あまり気負わずに流して読むと良いかもしれません。","link":"https://masutaka.net/2020-11-10-1/","isoDate":"2020-11-10T00:00:00.000Z","dateMiliSeconds":1604966400000,"authorName":"masutaka"},{"title":"CircleCI の旧 UI で設定した Slack Integration の設定を確認も変更も削除もできない件への対応方法","content":"今年の春くらいに CircleCI の UI が新しくなったタイミングで、各プロジェクトで設定した Slack 通知用の設定ページはどこかにいってしまいました。\nこんな画面でした。\n各プロジェクトの設定ページによると、現在は Slack orb を使う必要があるそう。\n例: https://app.circleci.com/settings/project/github/masutaka/example/slack それはまあ移行すれば良いのですが、旧 UI で設定した Slack の Webhook URL を確認したくても出来ません。Slack orb に移行した場合に、旧 UI で設定した通知を無効にしてくれるのかも気になります。\nCircleCI のサポートに聞いたところ、残念ながらそのような UI は用意されておらず、Slack orb に移行しても自動的な無効化はしてくれないそう。\nマジすか・・・！\nUndocumented API を使って無効化が必要とのこと。新 UI では確認も変更も削除もできないとのこと。それはさすがに困る人が多いんじゃないかなあ&hellip;？全部サポート対応するのかしら。\nそれはそれとして、この記事ではその Undocumented API を使って、旧 UI で設定した Slack Integration の確認と変更、削除のやり方をまとめます。説明しませんが、IRC も出来ると思います。\n※ 9 月にサポートに聞いた時、「Undocumented API を使うのは構わないのだけど、やり方自体も Undocumented なのは変なのでヘルプページに書いて欲しい」と伝えたけど、書かれてないようなのでこの記事を書いています。\n確認する こんな感じです。CIRCLE_TOKEN は https://app.circleci.com/settings/user/tokens で作ります。\nCIRCLE_TOKEN=xxxxxx VCS=gh ORG=masutaka PROJECT=example curl &#34;https://circleci.com/api/v1.1/project/${VCS}/${ORG}/${PROJECT}/settings&#34; \\ -X GET \\ -H &#39;Content-Type: application/json; charset=utf-8&#39; \\ -H &#34;Circle-Token: $CIRCLE_TOKEN&#34; \\ | jq &#39;{ vcs_url: .","contentSnippet":"今年の春くらいに CircleCI の UI が新しくなったタイミングで、各プロジェクトで設定した Slack 通知用の設定ページはどこかにいってしまいました。こんな画面でした。各プロジェクトの設定ページによると、現在は Slack orb を使う必要があるそう。例: https://app.circleci.com/settings/project/github/masutaka/example/slack それはまあ移行すれば良いのですが、旧 UI で設定した Slack の Webhook URL を確認したくても出来ません。Slack orb に移行した場合に、旧 UI で設定した通知を無効にしてくれるのかも気になります。CircleCI のサポートに聞いたところ、残念ながらそのような UI は用意されておらず、Slack orb に移行しても自動的な無効化はしてくれないそう。マジすか・・・！Undocumented API を使って無効化が必要とのこと。新 UI では確認も変更も削除もできないとのこと。それはさすがに困る人が多いんじゃないかなあ…？全部サポート対応するのかしら。それはそれとして、この記事ではその Undocumented API を使って、旧 UI で設定した Slack Integration の確認と変更、削除のやり方をまとめます。説明しませんが、IRC も出来ると思います。※ 9 月にサポートに聞いた時、「Undocumented API を使うのは構わないのだけど、やり方自体も Undocumented なのは変なのでヘルプページに書いて欲しい」と伝えたけど、書かれてないようなのでこの記事を書いています。確認する こんな感じです。CIRCLE_TOKEN は https://app.circleci.com/settings/user/tokens で作ります。CIRCLE_TOKEN=xxxxxx VCS=gh ORG=masutaka PROJECT=example curl \"https://circleci.com/api/v1.1/project/${VCS}/${ORG}/${PROJECT}/settings\" \\ -X GET \\ -H 'Content-Type: application/json; charset=utf-8' \\ -H \"Circle-Token: $CIRCLE_TOKEN\" \\ | jq '{ vcs_url: .","link":"https://masutaka.net/2020-10-30-1/","isoDate":"2020-10-30T00:00:00.000Z","dateMiliSeconds":1604016000000,"authorName":"masutaka"},{"title":"『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近の趣味はリハビリと YouTube 鑑賞です。</p>\n\n<p>本日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vQWgD1o2eZC69Mt9F9ln3xQL6Wx82W782cHe1YJEIPHWAdqp6tLEH_I29CyrMBbA9Ag0jmkMoQZ0QQp/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>4 月から <a href=\"https://jp.feedmatic.net/\">Feedmatic</a> という弊社フィードフォースの広告運用サービスに BI ツールである <a href=\"https://ja.looker.com/\">Looker</a> を導入すべく、検討と実装をしてきました。</p>\n\n<p>関わっているエンジニアは私一人で、社内の他のエンジニアからは何やってきたか分からないと思っていたので、今までのまとめ的な発表をしました。</p>\n\n<p>ネット上を探しても導入時の具体的な話は見つけられなかったので、誰かの参考になることも期待して、外向けも意識しています。</p>\n\n<p>Looker ユーザ向けには P30 から「Symmetric 集計」を頑張って解説しています。説明が雑なのは認めます。🙏</p>\n\n<p>Looker は学習コストは高いですが、かなりパワフルなツールなので、個人的には非常にやる気を出して燃えています。🔥</p>\n\n<p>それでは！</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近の趣味はリハビリと YouTube 鑑賞です。本日、週次の社内勉強会 FFTT で『4月から取り組んできたLookerの導入から実装までのお話（Redashとも比較）』という発表をしました。4 月から Feedmatic という弊社フィードフォースの広告運用サービスに BI ツールである Looker を導入すべく、検討と実装をしてきました。関わっているエンジニアは私一人で、社内の他のエンジニアからは何やってきたか分からないと思っていたので、今までのまとめ的な発表をしました。ネット上を探しても導入時の具体的な話は見つけられなかったので、誰かの参考になることも期待して、外向けも意識しています。Looker ユーザ向けには P30 から「Symmetric 集計」を頑張って解説しています。説明が雑なのは認めます。🙏Looker は学習コストは高いですが、かなりパワフルなツールなので、個人的には非常にやる気を出して燃えています。🔥それでは！","link":"https://developer.feedforce.jp/entry/2020/10/23/190000","isoDate":"2020-10-23T10:00:00.000Z","dateMiliSeconds":1603447200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20201023/20201023184859.png","authorName":"masutaka"},{"title":"Looker User Meetup in Tokyo #4（BEACON Japan 前夜祭）に参加した #lookermeetup","content":"【Looker ユーザー限定】Looker User Meetup in Tokyo #4 - connpass 昨日開催されたこちらのイベントに参加しました。本日 9/3 から 4 週に渡って行われる Looker BEACON Japan の前夜祭です。\nよく考えたら Looker ユーザーの方々を拝見するのは初めてで、生の声を聴けたことが一番の成果でした。運営の方々、ありがとうございました。\n今は会社で Looker を導入し、そろそろ Jumpstart プログラムが終わるフェーズで、これからボッチ LookML 開発に拍車がかかるところです。実装がんばります・・・！\n以下、個人的なメモです。\nUser Talk 1 : Lookerを利用した医療ビッグデータのマーケティング分析ツールの開発  医療データと Looker は相性が良かったとのこと。\nそれにしても作り込んであるなあ。元が構造化されたデータで扱いやすいのかもしれないが、複雑なデータであることは確かっぽい。\nUser Talk 2 : DeNAゲームタイトルの共通分析におけるLooker活用事例   ソシャゲだけあって規模感がすごかった。スピーカーの鈴木さんによると、最大 5 人で LookML を開発していて、KPI ごとに担当者を分けているそう。5 人 x チーム数分のようだった。規模がすごいなあ。\n共通定義プロジェクトを用意して、継承（extends）して使っているそう。共通定義の定義が難易度高そうだった。どうなんだろう？\nUser Talk 3 : トレタの分析環境とLookerへのこだわり   Redash で行き詰まり（？）、Looker に移行したそう。分かる。とは言え、Looker はリターンが多い分、学習コストがかなり高いんだけど、その辺どうだったのかな。\n開発体制はスピーカーの CTO 鄧さんと業務委託 2 人で 3 ヶ月で作ったそう。Jumpstart 使ったのかな？あと 2 人くらい Looker のエバンジェリスト的な人（ビジネス職の人かな？）はいるっぽい。","contentSnippet":"【Looker ユーザー限定】Looker User Meetup in Tokyo #4 - connpass 昨日開催されたこちらのイベントに参加しました。本日 9/3 から 4 週に渡って行われる Looker BEACON Japan の前夜祭です。よく考えたら Looker ユーザーの方々を拝見するのは初めてで、生の声を聴けたことが一番の成果でした。運営の方々、ありがとうございました。今は会社で Looker を導入し、そろそろ Jumpstart プログラムが終わるフェーズで、これからボッチ LookML 開発に拍車がかかるところです。実装がんばります・・・！以下、個人的なメモです。User Talk 1 : Lookerを利用した医療ビッグデータのマーケティング分析ツールの開発  医療データと Looker は相性が良かったとのこと。それにしても作り込んであるなあ。元が構造化されたデータで扱いやすいのかもしれないが、複雑なデータであることは確かっぽい。User Talk 2 : DeNAゲームタイトルの共通分析におけるLooker活用事例   ソシャゲだけあって規模感がすごかった。スピーカーの鈴木さんによると、最大 5 人で LookML を開発していて、KPI ごとに担当者を分けているそう。5 人 x チーム数分のようだった。規模がすごいなあ。共通定義プロジェクトを用意して、継承（extends）して使っているそう。共通定義の定義が難易度高そうだった。どうなんだろう？User Talk 3 : トレタの分析環境とLookerへのこだわり   Redash で行き詰まり（？）、Looker に移行したそう。分かる。とは言え、Looker はリターンが多い分、学習コストがかなり高いんだけど、その辺どうだったのかな。開発体制はスピーカーの CTO 鄧さんと業務委託 2 人で 3 ヶ月で作ったそう。Jumpstart 使ったのかな？あと 2 人くらい Looker のエバンジェリスト的な人（ビジネス職の人かな？）はいるっぽい。","link":"https://masutaka.net/2020-09-03-1/","isoDate":"2020-09-03T00:00:00.000Z","dateMiliSeconds":1599091200000,"authorName":"masutaka"},{"title":"CircleCI の orb を fork して PR を送る前の動作確認方法","content":"今回 pbrisbin/pushover orb を変更した。PR を送る前に、動作確認がてらしばらく使っている。今後のためにやり方を残しておく。\n 動作確認用の orb を publish するために masutaka/pushover という scope を作る。orb の scope は一度作ったら削除できず、リネームしか出来ないようだ。自分用なので気にしないことにする。  $ circleci orb create masutaka/pushover You are creating an orb called &#34;masutaka/pushover&#34;. You will not be able to change the name of this orb. If you change your mind about the name, you will have to create a new orb with the new name. ✔ Are you sure you wish to create the orb: `masutaka/pushover`: y Orb `masutaka/pushover` created.","contentSnippet":"今回 pbrisbin/pushover orb を変更した。PR を送る前に、動作確認がてらしばらく使っている。今後のためにやり方を残しておく。 動作確認用の orb を publish するために masutaka/pushover という scope を作る。orb の scope は一度作ったら削除できず、リネームしか出来ないようだ。自分用なので気にしないことにする。  $ circleci orb create masutaka/pushover You are creating an orb called \"masutaka/pushover\". You will not be able to change the name of this orb. If you change your mind about the name, you will have to create a new orb with the new name. ✔ Are you sure you wish to create the orb: `masutaka/pushover`: y Orb `masutaka/pushover` created.","link":"https://masutaka.net/2020-09-02-1/","isoDate":"2020-09-02T00:00:00.000Z","dateMiliSeconds":1599004800000,"authorName":"masutaka"},{"title":"テレビ用に HDMI 切替器を買った","content":"MVOWIZON というメーカー 今は ￥1,899 だけど、私は ￥1,399 で買えた  https://www.amazon.co.jp/gp/product/B087YRSHZK/ で購入したがすでにページがなかった   5 入力 1 出力、リモコン付き、補助電源も可能でこのお値段はすごい 3 入力 1 出力もある。現在 ￥1,198  https://www.amazon.co.jp/dp/B07QQDV39T/    テレビと繋げるための HDMI ケーブルは別途必要だった  30cm の https://www.amazon.co.jp/gp/product/B00QLF74BQ/ を買った   こんな感じで使用中。補助電源はせずに使えている  テレビ HDMI1: 個人用 MacBook Air（Thunderbolt） テレビ HDMI2: 仕事用 MacBook Pro（USB Type-c） テレビ HDMI3: 今回の HDMI 切替器  Chromecast PS4 Pro Nintendo Switch 未使用 未使用     HDMI 切替器を Mac と繋いだ時はうまくいかなかった Nature Remo と連携したが、PS4 や Switch を ON にすると勝手に切り替わるのでほぼ使っていない Google Home mini とも連携したが、そもそもテレビと Chromecast の区別がついていなかった（？）事情もあり挙動が不安定  成功する時は「セレクターのチャンネルを1にして」で OK。失敗することもある Nature Remo にテレビとして登録する必要はあるっぽい    ダメな配線の例:","contentSnippet":"MVOWIZON というメーカー 今は ￥1,899 だけど、私は ￥1,399 で買えた  https://www.amazon.co.jp/gp/product/B087YRSHZK/ で購入したがすでにページがなかった   5 入力 1 出力、リモコン付き、補助電源も可能でこのお値段はすごい 3 入力 1 出力もある。現在 ￥1,198  https://www.amazon.co.jp/dp/B07QQDV39T/    テレビと繋げるための HDMI ケーブルは別途必要だった  30cm の https://www.amazon.co.jp/gp/product/B00QLF74BQ/ を買った   こんな感じで使用中。補助電源はせずに使えている  テレビ HDMI1: 個人用 MacBook Air（Thunderbolt） テレビ HDMI2: 仕事用 MacBook Pro（USB Type-c） テレビ HDMI3: 今回の HDMI 切替器  Chromecast PS4 Pro Nintendo Switch 未使用 未使用     HDMI 切替器を Mac と繋いだ時はうまくいかなかった Nature Remo と連携したが、PS4 や Switch を ON にすると勝手に切り替わるのでほぼ使っていない Google Home mini とも連携したが、そもそもテレビと Chromecast の区別がついていなかった（？）事情もあり挙動が不安定  成功する時は「セレクターのチャンネルを1にして」で OK。失敗することもある Nature Remo にテレビとして登録する必要はあるっぽい    ダメな配線の例:","link":"https://masutaka.net/2020-08-21-1/","isoDate":"2020-08-21T00:00:00.000Z","dateMiliSeconds":1597968000000,"authorName":"masutaka"},{"title":"Emacs-27.1 がリリースされたので elscreen.el を tab-bar.el に移行した","content":"8/11 に Emacs 27.1 がリリースされました。 全然追ってなかったのですが、タブ機能がようやくネイティブでサポートされたそうなので、elscreen.el から移行してみました。\nhttps://github.com/masutaka/dotfiles-public/commit/14710b91d5342c4aec6666c0bd38dec7808d9927 tab-bar.el のコード（※）を見て、出来るだけ独自の設定はせずに、elscreen.el の挙動と合わせてみました。\n※ M-x find-library [Enter] tab-bar [Enter] で開けます。\n真のデフォルト厨なら C-x t ? で確認できるキーを使うべきなのでしょうが、ヘタレなので elscreen.el と同じ C-z を Prefix key にしました。\nタブ数の制限がなくなったのはうれしいです（elscreen.el は 10 個までだった）。100 個以上作れることは確認しました。C-x t m (tab-move) でタブを移動できるようになったのも改善点です（しかしドラッグアンドドロップには対応していない&hellip;）。C-z C-m とかに定義するかも。\nC-x 3 で縦分割したときに、右側のウインドウがタブ領域を上書きしなくなったのもうれしいです。\n2020 年にもなって、こんなことで困っていたんだよなあ&hellip;。","contentSnippet":"8/11 に Emacs 27.1 がリリースされました。 全然追ってなかったのですが、タブ機能がようやくネイティブでサポートされたそうなので、elscreen.el から移行してみました。https://github.com/masutaka/dotfiles-public/commit/14710b91d5342c4aec6666c0bd38dec7808d9927 tab-bar.el のコード（※）を見て、出来るだけ独自の設定はせずに、elscreen.el の挙動と合わせてみました。※ M-x find-library [Enter] tab-bar [Enter] で開けます。真のデフォルト厨なら C-x t ? で確認できるキーを使うべきなのでしょうが、ヘタレなので elscreen.el と同じ C-z を Prefix key にしました。タブ数の制限がなくなったのはうれしいです（elscreen.el は 10 個までだった）。100 個以上作れることは確認しました。C-x t m (tab-move) でタブを移動できるようになったのも改善点です（しかしドラッグアンドドロップには対応していない…）。C-z C-m とかに定義するかも。C-x 3 で縦分割したときに、右側のウインドウがタブ領域を上書きしなくなったのもうれしいです。2020 年にもなって、こんなことで困っていたんだよなあ…。","link":"https://masutaka.net/2020-08-16-1/","isoDate":"2020-08-16T00:00:00.000Z","dateMiliSeconds":1597536000000,"authorName":"masutaka"},{"title":"Chromecast を第１世代から第３世代に買い替えた","content":"https://store.google.com/jp/product/chromecast  触ってられないほどの発熱だったのに触っていられる！これはすごい！（） 性能は向上しているので、変な遅延とかは感じられない スマホやタブレットからの YouTube のキャストは良いかも。PS4 やテレビ（LG）のアプリだと概要欄とコメントが見られないので YouTube Music とかの Music のキャストはオーバーかなあ。テレビ付けてるに音楽流すだけなので Google Home Mini がテレビと Chromecast をどう区別しているか分かっていない テレビの HDMI 端子足りない。PS4 と Switch が 3 つのうち 2 つを専有していて、残り 1 つを Chromecast と Mac からの出力で取り合っている。HDMI 分配器を買えば良いのかな  関連記事: Chromecast第3世代、第1世代やUltraと比べて快適さは？ - ケータイ Watch ","contentSnippet":"https://store.google.com/jp/product/chromecast  触ってられないほどの発熱だったのに触っていられる！これはすごい！（） 性能は向上しているので、変な遅延とかは感じられない スマホやタブレットからの YouTube のキャストは良いかも。PS4 やテレビ（LG）のアプリだと概要欄とコメントが見られないので YouTube Music とかの Music のキャストはオーバーかなあ。テレビ付けてるに音楽流すだけなので Google Home Mini がテレビと Chromecast をどう区別しているか分かっていない テレビの HDMI 端子足りない。PS4 と Switch が 3 つのうち 2 つを専有していて、残り 1 つを Chromecast と Mac からの出力で取り合っている。HDMI 分配器を買えば良いのかな  関連記事: Chromecast第3世代、第1世代やUltraと比べて快適さは？ - ケータイ Watch","link":"https://masutaka.net/2020-08-14-1/","isoDate":"2020-08-14T00:00:00.000Z","dateMiliSeconds":1597363200000,"authorName":"masutaka"},{"title":"何年も続いている私の Emacs パッケージ管理方法","content":"こちらの記事の私なりのアンサー記事になります。\nEmacs のパッケージを少しずつアップデートした: 麦汁三昧  そもそも lock が Emacs のパッケージシステムと相性が良くはないのでちょっと考え直したいところはある\n el-get は昔試したことはありますが、なにか合わなくて止めました。\n今は素の package.el に落ち着いてます。\n インストールするパッケージは init.el で管理。   起動時にインストールされてなければインストールされるけど、それよりむしろインストールしたパッケージの把握のためにベタ書きしている。\nアップデートが溜まってきたらゴリッとアップデートする。  バックアップを取って、\n$ cd ~/.emacs.d $ tar czf ~/.Trash/elpa-$(date &#39;+%Y%m%d%H%M%S&#39;).tar.gz elpa M-x list-packages → U → x でアップデート。\nEmacs を再起動してエラーになったら、バックアップを復元して後で調べる。でも最近は遭遇してないな。\n拙作の BitBar プラグイン Emacs Package Updates でのアップデート確認が便利。","contentSnippet":"こちらの記事の私なりのアンサー記事になります。Emacs のパッケージを少しずつアップデートした: 麦汁三昧  そもそも lock が Emacs のパッケージシステムと相性が良くはないのでちょっと考え直したいところはある el-get は昔試したことはありますが、なにか合わなくて止めました。今は素の package.el に落ち着いてます。 インストールするパッケージは init.el で管理。   起動時にインストールされてなければインストールされるけど、それよりむしろインストールしたパッケージの把握のためにベタ書きしている。アップデートが溜まってきたらゴリッとアップデートする。  バックアップを取って、$ cd ~/.emacs.d $ tar czf ~/.Trash/elpa-$(date '+%Y%m%d%H%M%S').tar.gz elpa M-x list-packages → U → x でアップデート。Emacs を再起動してエラーになったら、バックアップを復元して後で調べる。でも最近は遭遇してないな。拙作の BitBar プラグイン Emacs Package Updates でのアップデート確認が便利。","link":"https://masutaka.net/2020-07-24-1/","isoDate":"2020-07-24T00:00:00.000Z","dateMiliSeconds":1595548800000,"authorName":"masutaka"},{"title":"Android の HTTP Shortcuts アプリで Slack Status 変更と勤怠打刻をいい感じにする","content":"※ [2020-05-24-1] の Android 版です。\n[2020-07-14-1] に書いたとおり、iPhone から Android に乗り換えました。そうなると、勤怠関係の iOS ショートカットも移植しないといけません（よね？）\nAndroid には同じ機能はなさそうでしたが、ちょっと調べたら HTTP Shortcuts というアプリを見つけました。ほぼ同等の機能で移植できましたので、ご紹介します。\n使い方 アプリ内にこのようにショートカットを作りました。各ショートカットはホームに配置することは出来ますが、誤タップを避けるためにこうしました。\n使用感はこんな感じです。誤タップすると面倒なので、すべて確認ダイアログを出しています。\n ショートカット構成 動作確認しやすくするために、ショートカットをモジュール化しています。\n①②③④が直接呼ぶショートカットは以下のとおりです。\n① = ⑨ → ⑤\n② = ⑥\n③ = ⑦ → ⑧ → ⑨\n④ = ⑨\n① 出勤 長押しして Edit を表示した画面です。\nTrigger Shortcurts をクリックすると、前述の通り「⑨ /jobcan_touch」 → 「⑤ slack status 出勤」の順に実行するショートカットだと分かります。\nRequire confirmation before execution にチェックを入れて、実行前に確認ダイアログを出すようにしています。\n実行された様子。ずっと「仕事開始」も変なので、この Status は 30 分で消えるようにしています（後述）。\n② ランチ 長押しして Edit を表示した画面です。","contentSnippet":"※ [2020-05-24-1] の Android 版です。[2020-07-14-1] に書いたとおり、iPhone から Android に乗り換えました。そうなると、勤怠関係の iOS ショートカットも移植しないといけません（よね？）Android には同じ機能はなさそうでしたが、ちょっと調べたら HTTP Shortcuts というアプリを見つけました。ほぼ同等の機能で移植できましたので、ご紹介します。使い方 アプリ内にこのようにショートカットを作りました。各ショートカットはホームに配置することは出来ますが、誤タップを避けるためにこうしました。使用感はこんな感じです。誤タップすると面倒なので、すべて確認ダイアログを出しています。 ショートカット構成 動作確認しやすくするために、ショートカットをモジュール化しています。①②③④が直接呼ぶショートカットは以下のとおりです。① = ⑨ → ⑤② = ⑥③ = ⑦ → ⑧ → ⑨④ = ⑨① 出勤 長押しして Edit を表示した画面です。Trigger Shortcurts をクリックすると、前述の通り「⑨ /jobcan_touch」 → 「⑤ slack status 出勤」の順に実行するショートカットだと分かります。Require confirmation before execution にチェックを入れて、実行前に確認ダイアログを出すようにしています。実行された様子。ずっと「仕事開始」も変なので、この Status は 30 分で消えるようにしています（後述）。② ランチ 長押しして Edit を表示した画面です。","link":"https://masutaka.net/2020-07-17-1/","isoDate":"2020-07-17T00:00:00.000Z","dateMiliSeconds":1594944000000,"authorName":"masutaka"},{"title":"『第5回 データアーキテクト（データ整備人）を”前向きに”考える会』に参加した #前向きデータ整備人","content":"第5回 データアーキテクト（データ整備人）を”前向きに”考える会 - connpass 前回 [2020-06-09-1] に続いての参加。大きな組織に所属されている方が多いのかな。\n当日の #前向きデータ整備人 Tweet 以下、個人的なメモです。\n抽出の仕事をうまくやるために必要なこと   主催者のしんゆうさん\nヒアリングは重要だよなあ。少なくとも、データ整備にかける時間の半分はそれに使っても良いと思う。誤ったヒアリングをすると、誤ったデータ整備をしてしまうので。\n雑用扱いはされてないので、その点は恵まれている。私がそもそもデータ整備人というよりエンジニアだからね。\n片手間でもできる！BIレポート整備人のためのガイドライン  ウィルさん\nガッツリ専業なので、今の状況には当てはまらないけど、片手間の人は大変そうだな。\n「#前向きデータ整備人」を参考にデータ基盤を立ち上げた話   おおたさん\n分析基盤構成は興味深かった。マネーフォワードも Looker 使っているんだね。\nDataOpsという観点からデータ整備人を考える   ぼうさん\nこちらの発表に限らないけど、大企業所属の方が多いのかな。\n今はビジネス職の人と二人三脚でやっているので、お互いを理解して、まずは動くものを実装していくフェーズ。役割がシンプルなので、今のポジションを深く考えていない。始まったのが４月からというのもある。\nゼロから作ったデータサイエンス組織で意識した事   高橋光さん\n「データドリブンな会社にする」\nそれな！","contentSnippet":"第5回 データアーキテクト（データ整備人）を”前向きに”考える会 - connpass 前回 [2020-06-09-1] に続いての参加。大きな組織に所属されている方が多いのかな。当日の #前向きデータ整備人 Tweet 以下、個人的なメモです。抽出の仕事をうまくやるために必要なこと   主催者のしんゆうさんヒアリングは重要だよなあ。少なくとも、データ整備にかける時間の半分はそれに使っても良いと思う。誤ったヒアリングをすると、誤ったデータ整備をしてしまうので。雑用扱いはされてないので、その点は恵まれている。私がそもそもデータ整備人というよりエンジニアだからね。片手間でもできる！BIレポート整備人のためのガイドライン  ウィルさんガッツリ専業なので、今の状況には当てはまらないけど、片手間の人は大変そうだな。「#前向きデータ整備人」を参考にデータ基盤を立ち上げた話   おおたさん分析基盤構成は興味深かった。マネーフォワードも Looker 使っているんだね。DataOpsという観点からデータ整備人を考える   ぼうさんこちらの発表に限らないけど、大企業所属の方が多いのかな。今はビジネス職の人と二人三脚でやっているので、お互いを理解して、まずは動くものを実装していくフェーズ。役割がシンプルなので、今のポジションを深く考えていない。始まったのが４月からというのもある。ゼロから作ったデータサイエンス組織で意識した事   高橋光さん「データドリブンな会社にする」それな！","link":"https://masutaka.net/2020-07-14-2/","isoDate":"2020-07-14T01:00:00.000Z","dateMiliSeconds":1594688400000,"authorName":"masutaka"},{"title":"iPhone X から Pixel 3a XL に乗り換えて一週間経った","content":"[2017-11-18-1] に iPhone X を買って 2 年半。当時の購入価格で 12 万円だったこともあり、iPhone はもう最後かなと思ってた。スマホに 10 万円超は払えなくはないけど、選択肢がないのは健全ではないと思った。あと、iPhone 飽きた。\n10 年前に iPhone(4) を初めて買った時は「スマホでネイティブコードを動かさない Android 意味分からん」と思っていたのに、随分な変わりようです。\nAndroid は [2016-11-01-1] から ZenPad のタブレットを使っているし、最近は iPhone とそう変わらないとよく聞くので、思い切って乗り換えてみました。\nPixel 3a XL にしたのは、SIM フリーの Felica 対応 Android があまりなかったからです。Android に土地勘がないので、もっと良い選択肢はあったかもしれません。\nただ、このスペックで定価の 6 万円は割高に感じられました。そこで Google アラートを仕掛けて待つこと 2 ヶ月。やりました！\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  タイミング的にも最後だったみたいです。そろそろ Pixel 4a が出るそうですが、今回は安く Android に乗り換えるのが目的だったので、後悔とかはありません。","contentSnippet":"[2017-11-18-1] に iPhone X を買って 2 年半。当時の購入価格で 12 万円だったこともあり、iPhone はもう最後かなと思ってた。スマホに 10 万円超は払えなくはないけど、選択肢がないのは健全ではないと思った。あと、iPhone 飽きた。10 年前に iPhone(4) を初めて買った時は「スマホでネイティブコードを動かさない Android 意味分からん」と思っていたのに、随分な変わりようです。Android は [2016-11-01-1] から ZenPad のタブレットを使っているし、最近は iPhone とそう変わらないとよく聞くので、思い切って乗り換えてみました。Pixel 3a XL にしたのは、SIM フリーの Felica 対応 Android があまりなかったからです。Android に土地勘がないので、もっと良い選択肢はあったかもしれません。ただ、このスペックで定価の 6 万円は割高に感じられました。そこで Google アラートを仕掛けて待つこと 2 ヶ月。やりました！loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  タイミング的にも最後だったみたいです。そろそろ Pixel 4a が出るそうですが、今回は安く Android に乗り換えるのが目的だったので、後悔とかはありません。","link":"https://masutaka.net/2020-07-14-1/","isoDate":"2020-07-14T00:00:00.000Z","dateMiliSeconds":1594684800000,"authorName":"masutaka"},{"title":"個人的に実践している、Slack に振り回されない方法","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。足底筋膜炎は誤診のようでした。リハビリに勤しむ日々です。</p>\n\n<p>今回は社内向けに書いた esa 記事が好評でしたので、少し改変してお届けします。</p>\n\n<p>フィードフォースでは Slack を使っており、リモートワークにおけるコミュニケーションの手段も Slack がメインです。</p>\n\n<p>Slack はチャットツールであるため、ある程度のリアルタイム性を求められますが、ただそれに従っていると振り回されてしまいます。</p>\n\n<p>今回は私が実践しているいくつかの工夫を紹介します。他に良い方法があれば、是非教えてください。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#今すぐできないことあとでやるあとで確認するは自分にリマインドする\">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</a></li>\n    <li><a href=\"#自分が他の人に依頼した時もリマインドを設定する\">自分が他の人に依頼した時もリマインドを設定する</a></li>\n    <li><a href=\"#チャンネルは優先度を付ける\">チャンネルは優先度を付ける</a></li>\n    <li><a href=\"#見なくなったチャンネルからはこまめに抜ける\">見なくなったチャンネルからはこまめに抜ける</a></li>\n    <li><a href=\"#未読チャンネルはショートカットキーで移動する\">未読チャンネルはショートカットキーで移動する</a></li>\n</ul>\n\n<h2 id=\"今すぐできないことあとでやるあとで確認するは自分にリマインドする\">今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする</h2>\n\n<p>自分にリマインドすることで忘れることが出来る。同期的コミュニケーションを非同期に逃がす感じ。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014903.png\" alt=\"f:id:masutaka26:20200627014903p:plain\" title=\"f:id:masutaka26:20200627014903p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>👇 <code>slackbot</code> からの DM で通知される。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013415.jpg\" alt=\"f:id:masutaka26:20200627013415j:plain\" title=\"f:id:masutaka26:20200627013415j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>すぐ出来なくてさらに先延ばししたければ、Snooze する。出来ない時はゆるふわで良いので Snooze することが大事。放置しないようにしている。</p>\n\n<p>👇 たまに <code>slackbot</code> の DM とかで <code>/remind list</code> して確認している。Snooze し忘れたりして、過去のリマインドが残っているとこんな感じになる。→ <code>Past and Incomplete</code></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627013716.png\" alt=\"f:id:masutaka26:20200627013716p:plain\" title=\"f:id:masutaka26:20200627013716p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>🌀 本当は Gmail の Inbox（受信トレイ）でリマインド管理したい。Snooze が使いやすいし。</p>\n\n<h2 id=\"自分が他の人に依頼した時もリマインドを設定する\">自分が他の人に依頼した時もリマインドを設定する</h2>\n\n<p>相手が忘れても大丈夫になる。これも同期コミュニケーションから非同期への変換。</p>\n\n<h2 id=\"チャンネルは優先度を付ける\">チャンネルは優先度を付ける</h2>\n\n<p>私の場合は <code>Starred</code> > <code>Low Priority</code> > <code>Channels</code> という優先度にしてます。\n（優先度が分からなくなるので、<a href=\"https://slack.com/intl/ja-jp/help/articles/226410907-%E5%85%A8%E3%81%A6%E3%81%AE%E6%9C%AA%E8%AA%AD%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">全未読機能</a>は使っていません）</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627014706.png\" alt=\"f:id:masutaka26:20200627014706p:plain\" title=\"f:id:masutaka26:20200627014706p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><code>Starred</code> と <code>Channels</code> は最初からあるグルーピングです。<code>Low Priority</code> は自分で作りました。</p>\n\n<p>公式ヘルプ: <a href=\"https://slack.com/intl/ja-jp/help/articles/201331016-%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%82%84%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AB%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B\">チャンネルやダイレクトメッセージにスターを付ける | Slack</a></p>\n\n<p>💡 <code>Channels</code> の中には mute しているチャンネルもあります。</p>\n\n<h2 id=\"見なくなったチャンネルからはこまめに抜ける\">見なくなったチャンネルからはこまめに抜ける</h2>\n\n<p>抜けたいチャンネルで <code>/leave</code> と発言すると、一瞬で抜けられるよ。</p>\n\n<h2 id=\"未読チャンネルはショートカットキーで移動する\">未読チャンネルはショートカットキーで移動する</h2>\n\n<ul>\n<li>Windows\n\n<ul>\n<li>前の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↑</code></li>\n<li>次の未読チャンネルや DM に移動: <code>Alt</code> <code>Shift</code> <code>↓</code></li>\n</ul>\n</li>\n<li>Mac\n\n<ul>\n<li>前の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↑</code></li>\n<li>次の未読チャンネルや DM に移動: <code>Option</code> <code>Shift</code> <code>↓</code></li>\n</ul>\n</li>\n</ul>\n\n\n<p>公式ヘルプ: <a href=\"https://slack.com/intl/ja-jp/help/articles/201374536-Slack-%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88\">Slack のキーボードショートカット | Slack</a></p>\n","contentSnippet":"こんにちは id:masutaka26 です。足底筋膜炎は誤診のようでした。リハビリに勤しむ日々です。今回は社内向けに書いた esa 記事が好評でしたので、少し改変してお届けします。フィードフォースでは Slack を使っており、リモートワークにおけるコミュニケーションの手段も Slack がメインです。Slack はチャットツールであるため、ある程度のリアルタイム性を求められますが、ただそれに従っていると振り回されてしまいます。今回は私が実践しているいくつかの工夫を紹介します。他に良い方法があれば、是非教えてください。今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする自分が他の人に依頼した時もリマインドを設定するチャンネルは優先度を付ける見なくなったチャンネルからはこまめに抜ける未読チャンネルはショートカットキーで移動する今すぐできないこと（あとでやる＆あとで確認する）は自分にリマインドする自分にリマインドすることで忘れることが出来る。同期的コミュニケーションを非同期に逃がす感じ。👇 slackbot からの DM で通知される。すぐ出来なくてさらに先延ばししたければ、Snooze する。出来ない時はゆるふわで良いので Snooze することが大事。放置しないようにしている。👇 たまに slackbot の DM とかで /remind list して確認している。Snooze し忘れたりして、過去のリマインドが残っているとこんな感じになる。→ Past and Incomplete🌀 本当は Gmail の Inbox（受信トレイ）でリマインド管理したい。Snooze が使いやすいし。自分が他の人に依頼した時もリマインドを設定する相手が忘れても大丈夫になる。これも同期コミュニケーションから非同期への変換。チャンネルは優先度を付ける私の場合は Starred > Low Priority > Channels という優先度にしてます。（優先度が分からなくなるので、全未読機能は使っていません）Starred と Channels は最初からあるグルーピングです。Low Priority は自分で作りました。公式ヘルプ: チャンネルやダイレクトメッセージにスターを付ける | Slack💡 Channels の中には mute しているチャンネルもあります。見なくなったチャンネルからはこまめに抜ける抜けたいチャンネルで /leave と発言すると、一瞬で抜けられるよ。未読チャンネルはショートカットキーで移動するWindows前の未読チャンネルや DM に移動: Alt Shift ↑次の未読チャンネルや DM に移動: Alt Shift ↓Mac前の未読チャンネルや DM に移動: Option Shift ↑次の未読チャンネルや DM に移動: Option Shift ↓公式ヘルプ: Slack のキーボードショートカット | Slack","link":"https://developer.feedforce.jp/entry/2020/06/29/140000","isoDate":"2020-06-29T05:00:00.000Z","dateMiliSeconds":1593406800000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200627/20200627155056.png","authorName":"masutaka"},{"title":"『第4回 データアーキテクト（データ整備人）を”前向きに”考える会』に初参加した #前向きデータ整備人","content":"第4回 データアーキテクト（データ整備人）を”前向きに”考える会 - connpass 最近この辺の仕事をし始めていて会社の人が教えてくれたので、初参加してきました。YouTube ライブだったので、かなりお手軽な参加でした。\n今回は LT 祭り。技術の話から温かみのある話まで、網羅的に話を聞けた気がします。\n当日の #前向きデータ整備人 以下、個人的なメモです。\nどうやって「データを整備すると良いことがある」を周りに伝えるか   主催者のしんゆうさん\n使う人の気にすることを減らし、本来の分析に集中させるためにも、データ整備が必要。\nデータ分析する人は難しい SQL 書きたいわけではないですからね。データ分析をしたいわけでもないし、意思決定を素早くしたいはず。\nデータ整備に必要な「実装設計書」の作成とコミュニケーション事例 （フォーム URL を公開してよいか分からないので載せない）\n小川 卓さん\n分析の質は取得しているデータの質に依存する。いくら AI とかが発達してもこれは変わらない。まあそうだよね。\nもう一度、表計算ソフトを愛でる   高比良 めぐみさん\n秘伝のタレしがちだけど、使いどころによるという話。\n個人的には、使い捨てのスプレッドシートや、BigQuery を介した機械的な利用には良さそうな気はしている。\nスキル0が曖昧な領域を埋めるために人の流れを整備した話 TODO: 資料が公開されたらここに貼る\n山崎 隆弘さん\n今の会社は大企業ではないとは言え、関係性を増やすのは少し分かる。私がひきこもりニートなので、そんなには出来ないし、やりすぎないようにもしているけど。\nembulk, digdagを用いたデータ基盤構築   土川 稔生さん\nBigQuery に集約するためのノウハウの話だった。\n今回話には出なかったけど、Redash のクエリの数は辛くないのかな。\n私もちょっと前まで Redash を構築したり、少し SQL 書いてたけど、Redash のクエリ数が多くて辛い問題はあった。\n最近機会があって Looker を学習しているけど、「ビジネス職の方がかんたんにデータを扱えるとはこういうことか」と感動している。学習や導入が進んだらどこかで話したい。\n未来を変える！ Withユーザー志向   成瀬エールさん\n 多くの運用担当者は、&ldquo;与えられた環境の中だけ&rdquo; の発想で運用、改善を行います。かつ結構我慢強いものです。","contentSnippet":"第4回 データアーキテクト（データ整備人）を”前向きに”考える会 - connpass 最近この辺の仕事をし始めていて会社の人が教えてくれたので、初参加してきました。YouTube ライブだったので、かなりお手軽な参加でした。今回は LT 祭り。技術の話から温かみのある話まで、網羅的に話を聞けた気がします。当日の #前向きデータ整備人 以下、個人的なメモです。どうやって「データを整備すると良いことがある」を周りに伝えるか   主催者のしんゆうさん使う人の気にすることを減らし、本来の分析に集中させるためにも、データ整備が必要。データ分析する人は難しい SQL 書きたいわけではないですからね。データ分析をしたいわけでもないし、意思決定を素早くしたいはず。データ整備に必要な「実装設計書」の作成とコミュニケーション事例 （フォーム URL を公開してよいか分からないので載せない）小川 卓さん分析の質は取得しているデータの質に依存する。いくら AI とかが発達してもこれは変わらない。まあそうだよね。もう一度、表計算ソフトを愛でる   高比良 めぐみさん秘伝のタレしがちだけど、使いどころによるという話。個人的には、使い捨てのスプレッドシートや、BigQuery を介した機械的な利用には良さそうな気はしている。スキル0が曖昧な領域を埋めるために人の流れを整備した話 TODO: 資料が公開されたらここに貼る山崎 隆弘さん今の会社は大企業ではないとは言え、関係性を増やすのは少し分かる。私がひきこもりニートなので、そんなには出来ないし、やりすぎないようにもしているけど。embulk, digdagを用いたデータ基盤構築   土川 稔生さんBigQuery に集約するためのノウハウの話だった。今回話には出なかったけど、Redash のクエリの数は辛くないのかな。私もちょっと前まで Redash を構築したり、少し SQL 書いてたけど、Redash のクエリ数が多くて辛い問題はあった。最近機会があって Looker を学習しているけど、「ビジネス職の方がかんたんにデータを扱えるとはこういうことか」と感動している。学習や導入が進んだらどこかで話したい。未来を変える！ Withユーザー志向   成瀬エールさん 多くの運用担当者は、“与えられた環境の中だけ” の発想で運用、改善を行います。かつ結構我慢強いものです。","link":"https://masutaka.net/2020-06-09-1/","isoDate":"2020-06-09T00:00:00.000Z","dateMiliSeconds":1591660800000,"authorName":"masutaka"},{"title":"エニタイムフィットネスを退会した #筋トレ","content":"先ほど退会手続きを済ませてきた。\n特に必要なものはなくて、（当たり前だが）建物に入るためにセキュリティキーが必要なくらい。署名をして手続完了。セキュリティキーは返却不要。7/1 から使えなくなるだけ。\n正式な退会日は 6/30 なので、入会日である [2018-06-30-1] からちょうど丸２年となる。止める時は町屋から引っ越す時だと思っていたので、我ながら意外な結末。\nCOVID-19 騒動が発端ではあるが、改めて考えてみると、複数の理由が重なった退会だった。１つだけだったら退会してなかったと思う。\n 自宅トレーニングを継続できてしまっている（#筋トレ from:masutaka ）。むしろ以前より頻度が上がった 自宅トレーニングを 2 ヶ月半ほど続けて、特に太らなかった。逆に腕立て伏せのおかげか、大胸筋が少し大きくなった ジムと比べて、自宅トレーニングで時間を短縮できた 3 月のエニタイムは以前より混んでいて、バーベルが使えない頻度が増えた 私が非常に暑がりなので、マスクしながらトレーニング出来ない  あと、改めて考えると、専属のトレーナーが 2 月に突然退職したことも影響したと思う。もし退職していなかったら、退会しなかったかもなという意味で。引力が減ってしまった。\n退会者が急増しているのかと思ったけど、そこまでではないそう？東大の施設がまだ再開していないとかで、逆にそれ以上に入会者は増えているそう。それなら安心（？）\n自宅トレーニングをいつまで続けられるか分からないけど、「やらなくちゃいけない」「やると決まっているのでやる」の精神で思考停止して継続していく。\n自宅トレーニングで大いに参考にしたユウジさんの YouTube 動画。これを見て、ランジをかなり重要視してやってます。雨の日は室内でバックランジ。晴れたら広場でウォーキングランジ。腕立て伏せと腹筋はおまけ（それでもかなり息は上がるけど）。\n   ","contentSnippet":"先ほど退会手続きを済ませてきた。特に必要なものはなくて、（当たり前だが）建物に入るためにセキュリティキーが必要なくらい。署名をして手続完了。セキュリティキーは返却不要。7/1 から使えなくなるだけ。正式な退会日は 6/30 なので、入会日である [2018-06-30-1] からちょうど丸２年となる。止める時は町屋から引っ越す時だと思っていたので、我ながら意外な結末。COVID-19 騒動が発端ではあるが、改めて考えてみると、複数の理由が重なった退会だった。１つだけだったら退会してなかったと思う。 自宅トレーニングを継続できてしまっている（#筋トレ from:masutaka ）。むしろ以前より頻度が上がった 自宅トレーニングを 2 ヶ月半ほど続けて、特に太らなかった。逆に腕立て伏せのおかげか、大胸筋が少し大きくなった ジムと比べて、自宅トレーニングで時間を短縮できた 3 月のエニタイムは以前より混んでいて、バーベルが使えない頻度が増えた 私が非常に暑がりなので、マスクしながらトレーニング出来ない  あと、改めて考えると、専属のトレーナーが 2 月に突然退職したことも影響したと思う。もし退職していなかったら、退会しなかったかもなという意味で。引力が減ってしまった。退会者が急増しているのかと思ったけど、そこまでではないそう？東大の施設がまだ再開していないとかで、逆にそれ以上に入会者は増えているそう。それなら安心（？）自宅トレーニングをいつまで続けられるか分からないけど、「やらなくちゃいけない」「やると決まっているのでやる」の精神で思考停止して継続していく。自宅トレーニングで大いに参考にしたユウジさんの YouTube 動画。これを見て、ランジをかなり重要視してやってます。雨の日は室内でバックランジ。晴れたら広場でウォーキングランジ。腕立て伏せと腹筋はおまけ（それでもかなり息は上がるけど）。","link":"https://masutaka.net/2020-06-08-1/","isoDate":"2020-06-08T00:00:00.000Z","dateMiliSeconds":1591574400000,"authorName":"masutaka"},{"title":"iOS のショートカットで Slack Status 変更と勤怠打刻をいい感じにする","content":"2 月からほぼフルリモートで仕事してます。\n会社の勤怠管理システムはジョブカン が導入されています。物理出社していた時は、物理 Suica カードを NFC リーダーにタッチして打刻していました。\nリモートワークでは物理タッチはできないため、Slack の任意のチャンネルで /jobcan_touch と POST して打刻しています。他の社員への共有も兼ねています。\nただ、毎日の /jobcan_touch が面倒になってきました。私は Slack status もゆるふわでセットしているため、追い打ちで面倒です。\nいくつか試して今は iOS のショートカットに落ち着いたので、記事に残しておきます。\n使い方 ホーム画面を右にスワイプすると現れるウィジェットに iOS ショートカットを登録し、直接使う３つのショートカットを表示させています。\n使用感はこんな感じです。\n 誤タップして打刻してしまうと、取り消しの申請が必要になるため、確認ダイアログを出しています。タイマーのダイアログはなんとなくです。\nショートカット構成 動作確認しやすくするために、ショートカットをコンポーネント化しています。\n①②③が直接呼ぶショートカットは以下のとおりです。\n① = ⑩ → ④\n② = ⑤\n③ = ⑥ → ⑩\nさらに④⑤⑥はそれぞれ⑦⑧⑨を使います。\n① 出勤 前述の通り、「⑩ /jobcan_touch」 → 「④ slack status 出勤」の順に実行するだけです。\n実行された様子。ずっと「仕事開始」も変なので、この Status は 30 分で消えるようにしています（後述）。\n② ランチ 「⑤ slack status ランチ」を実行したあと、確認ダイアログとともに iOS のタイマーを 60 分にセットしています。","contentSnippet":"2 月からほぼフルリモートで仕事してます。会社の勤怠管理システムはジョブカン が導入されています。物理出社していた時は、物理 Suica カードを NFC リーダーにタッチして打刻していました。リモートワークでは物理タッチはできないため、Slack の任意のチャンネルで /jobcan_touch と POST して打刻しています。他の社員への共有も兼ねています。ただ、毎日の /jobcan_touch が面倒になってきました。私は Slack status もゆるふわでセットしているため、追い打ちで面倒です。いくつか試して今は iOS のショートカットに落ち着いたので、記事に残しておきます。使い方 ホーム画面を右にスワイプすると現れるウィジェットに iOS ショートカットを登録し、直接使う３つのショートカットを表示させています。使用感はこんな感じです。 誤タップして打刻してしまうと、取り消しの申請が必要になるため、確認ダイアログを出しています。タイマーのダイアログはなんとなくです。ショートカット構成 動作確認しやすくするために、ショートカットをコンポーネント化しています。①②③が直接呼ぶショートカットは以下のとおりです。① = ⑩ → ④② = ⑤③ = ⑥ → ⑩さらに④⑤⑥はそれぞれ⑦⑧⑨を使います。① 出勤 前述の通り、「⑩ /jobcan_touch」 → 「④ slack status 出勤」の順に実行するだけです。実行された様子。ずっと「仕事開始」も変なので、この Status は 30 分で消えるようにしています（後述）。② ランチ 「⑤ slack status ランチ」を実行したあと、確認ダイアログとともに iOS のタイマーを 60 分にセットしています。","link":"https://masutaka.net/2020-05-24-1/","isoDate":"2020-05-24T00:00:00.000Z","dateMiliSeconds":1590278400000,"authorName":"masutaka"},{"title":"About","content":"Takashi Masuda (masutaka) LookML 開発やデータ整備に専念している、ソフトウェアエンジニアです。\n以前はウェブアプリケーションのバックエンドや、インフラの面倒を見ていました。その前は組込みソフトウェアエンジニアでした。\nここはそんなマスタカの変更履歴が記録されていくサイトです。\nCompany blogs  Feedforce Developer Blog &gt; masutaka  Feedforce Engineers&rsquo; blog &gt; masutaka ※ 旧ブログ  Slides  Speaker Deck &gt; masutaka   Devices  ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）  OS: Manjaro , Windows 11  ref. [2021-05-06-1]    Pixel 3a XL Just Black  OS: Android 12  ref. [2020-07-14-1]    Fire HD 8（第 10 世代）ブラック  OS: Fire OS 7    Fire HD 10（第 11 世代）オリーブ  OS: Fire OS 7    Chromecast（第 3 世代）  ref.","contentSnippet":"Takashi Masuda (masutaka) LookML 開発やデータ整備に専念している、ソフトウェアエンジニアです。以前はウェブアプリケーションのバックエンドや、インフラの面倒を見ていました。その前は組込みソフトウェアエンジニアでした。ここはそんなマスタカの変更履歴が記録されていくサイトです。Company blogs  Feedforce Developer Blog > masutaka  Feedforce Engineers’ blog > masutaka ※ 旧ブログ  Slides  Speaker Deck > masutaka   Devices  ASUS VivoBook S15 M533IA-BQ0BLT（インディーブラック）  OS: Manjaro , Windows 11  ref. [2021-05-06-1]    Pixel 3a XL Just Black  OS: Android 12  ref. [2020-07-14-1]    Fire HD 8（第 10 世代）ブラック  OS: Fire OS 7    Fire HD 10（第 11 世代）オリーブ  OS: Fire OS 7    Chromecast（第 3 世代）  ref.","link":"https://masutaka.net/about/","isoDate":"2020-04-24T09:13:40.000Z","dateMiliSeconds":1587719620000,"authorName":"masutaka"},{"title":"Docker マルチアーキテクチャイメージのメモ","content":"知らなかったのでメモしておく。\n説明や利用方法はこちらの記事にまとまっている。\nDockerのマルチアーキテクチャイメージについて調べてみた｜Developers.IO  ・単一のDockerイメージで複数種類のOSやCPUアーキテクチャをサポートさせることができる。\n・このイメージを起動させると、Dockerが実行されているホストのアーキテクチャに応じて適切なイメージが自動で選択される。\n・Docker Hub上の公式イメージの多くはマルチアーキテクチャをサポートしている。\n 作成方法は公式ドキュメントに書かれている。\nLeverage multi-CPU architecture support｜Docker Documentation Experimental な buildx サブコマンドを使う。Docker Engine 19.03.8 から使える。\nDocker for Mac の場合、Settings &gt; Command Line から experimental features を有効にする必要がある。\nSettings &gt; Docker Engine で以下も設定する必要もあるかも。私はすでにこうなっていた。\n{ &#34;debug&#34;: true, &#34;experimental&#34;: true } 前述の公式ドキュメントの通りにやると Docker Hub に masutaka/demo:latest が push される。\nhttps://hub.docker.com/repository/docker/masutaka/demo/tags ※ masutaka/demo:default は &lsquo;$ docker build -t masutaka/demo:default .&rsquo; で普通にビルドした Docker Image。\nbuilder は忘れずに元に戻しておく。\n$ docker buildx ls NAME/NODE DRIVER/ENDPOINT STATUS PLATFORMS mybuilder docker-container mybuilder0 unix:///var/run/docker.","contentSnippet":"知らなかったのでメモしておく。説明や利用方法はこちらの記事にまとまっている。Dockerのマルチアーキテクチャイメージについて調べてみた｜Developers.IO  ・単一のDockerイメージで複数種類のOSやCPUアーキテクチャをサポートさせることができる。・このイメージを起動させると、Dockerが実行されているホストのアーキテクチャに応じて適切なイメージが自動で選択される。・Docker Hub上の公式イメージの多くはマルチアーキテクチャをサポートしている。 作成方法は公式ドキュメントに書かれている。Leverage multi-CPU architecture support｜Docker Documentation Experimental な buildx サブコマンドを使う。Docker Engine 19.03.8 から使える。Docker for Mac の場合、Settings > Command Line から experimental features を有効にする必要がある。Settings > Docker Engine で以下も設定する必要もあるかも。私はすでにこうなっていた。{ \"debug\": true, \"experimental\": true } 前述の公式ドキュメントの通りにやると Docker Hub に masutaka/demo:latest が push される。https://hub.docker.com/repository/docker/masutaka/demo/tags ※ masutaka/demo:default は ‘$ docker build -t masutaka/demo:default .’ で普通にビルドした Docker Image。builder は忘れずに元に戻しておく。$ docker buildx ls NAME/NODE DRIVER/ENDPOINT STATUS PLATFORMS mybuilder docker-container mybuilder0 unix:///var/run/docker.","link":"https://masutaka.net/2020-04-11-1/","isoDate":"2020-04-11T00:00:00.000Z","dateMiliSeconds":1586563200000,"authorName":"masutaka"},{"title":"NHK Eテレのテキシコーメモ","content":"テキシコー [総合 小学校3･4･5･6年生、中・高]｜NHK for School 朝チラ見して良さげだったので、第5回まで全部見た。各回10分。以下メモ。\n＜第1回＞\nScene2 電車のおもちゃのつかみが良かった。こんなふうに動くんだ。\n＜第2回＞\nScene3 新幹線の座席のカバーを変えるやつ。プログラミング的思考とは何かが一番分かりやすいかも。\n＜第4回＞\nScene3 犬のフンを片付けるやつ。チラ見した時、おーと普通に感心した。\nScene5 うんうん、こういうのもそうだよね。","contentSnippet":"テキシコー [総合 小学校3･4･5･6年生、中・高]｜NHK for School 朝チラ見して良さげだったので、第5回まで全部見た。各回10分。以下メモ。＜第1回＞Scene2 電車のおもちゃのつかみが良かった。こんなふうに動くんだ。＜第2回＞Scene3 新幹線の座席のカバーを変えるやつ。プログラミング的思考とは何かが一番分かりやすいかも。＜第4回＞Scene3 犬のフンを片付けるやつ。チラ見した時、おーと普通に感心した。Scene5 うんうん、こういうのもそうだよね。","link":"https://masutaka.net/2020-04-02-1/","isoDate":"2020-04-02T00:00:00.000Z","dateMiliSeconds":1585785600000,"authorName":"masutaka"},{"title":"terraform を再帰的に実行する Makefile","content":"[2019-05-07-1] に紹介した『Pragmatic Terraform on AWS 』に沿って設計すると、terraform のディレクトリは複数出来ると思います。\n依存を分けることと、まとめて実行することはやや矛盾します。とは言え terraform や terraform provider がアップデートした時の terraform init/plan/apply はまとめてやりたいものです。\n少し前に作って使っていますが、なかなか良い感じです。\n使っている Makefile たち  この辺りを工夫しました。\n・terraform init/plan/apply に失敗すると、即座に停止する\n・make の -C オプションを使って、cd せずに make を実行できている。つまり cd .. とかで戻る必要がない。そういう理由で下位ディレクトリに Makefile 置いてる\n・make の -w オプションを使って、以下のようなそれっぽいログを出している\n$ make init-r make[1]: Entering directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/aws&#39; (snip) make[1]: Leaving directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/aws&#39; make[1]: Entering directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/heroku&#39; (snip) make[1]: Leaving directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/heroku&#39; direnv 使う場合 terraform では credential を注入するケースも多いので、direnv も使うことは多いのではないでしょうか。ルートに .envrc があるだけなら別ですが、各ディレクトリにもある場合はこのパッチが必要になると思います。","contentSnippet":"[2019-05-07-1] に紹介した『Pragmatic Terraform on AWS 』に沿って設計すると、terraform のディレクトリは複数出来ると思います。依存を分けることと、まとめて実行することはやや矛盾します。とは言え terraform や terraform provider がアップデートした時の terraform init/plan/apply はまとめてやりたいものです。少し前に作って使っていますが、なかなか良い感じです。使っている Makefile たち  この辺りを工夫しました。・terraform init/plan/apply に失敗すると、即座に停止する・make の -C オプションを使って、cd せずに make を実行できている。つまり cd .. とかで戻る必要がない。そういう理由で下位ディレクトリに Makefile 置いてる・make の -w オプションを使って、以下のようなそれっぽいログを出している$ make init-r make[1]: Entering directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/aws' (snip) make[1]: Leaving directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/aws' make[1]: Entering directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/heroku' (snip) make[1]: Leaving directory `/Users/masutaka/src/github.com/masutaka/masutaka.net/terraform/heroku' direnv 使う場合 terraform では credential を注入するケースも多いので、direnv も使うことは多いのではないでしょうか。ルートに .envrc があるだけなら別ですが、各ディレクトリにもある場合はこのパッチが必要になると思います。","link":"https://masutaka.net/2020-03-26-1/","isoDate":"2020-03-26T00:00:00.000Z","dateMiliSeconds":1585180800000,"authorName":"masutaka"},{"title":"『HerokuでSidekiqを監視する方法を確立した』という発表をした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。最近はドラクエウォークと足底筋膜炎との両立に悩んでいます。</p>\n\n<p>先週の金曜日、週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『HerokuでSidekiqを監視する方法を確立した』という発表をしました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vTZAByBIEhPjehZJ8Jb3atZBJSpu1R371Z3qQZcolE99poCpdYHWfWl5tlH2pQxwBedoCBPYK8rTwoI/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Heroku で Sidekiq を監視する知見を見つけられなかったのが、このお題を選んだ経緯です。どなたかが参考になるとうれしいです。</p>\n\n<p>今回は自宅からのリモート発表でした。物理発表と違って、話した内容よりもリアクションの分からなさによる戸惑いが気になってしまいました。（オイ</p>\n\n<p>※ リアクションはしてくれてたみたいです。🙏</p>\n\n<p>複数モニター必須とか、いろいろ知見がありそうなので、今後蓄積出来ると良さそうです。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。最近はドラクエウォークと足底筋膜炎との両立に悩んでいます。先週の金曜日、週次の社内勉強会 FFTT で『HerokuでSidekiqを監視する方法を確立した』という発表をしました。Heroku で Sidekiq を監視する知見を見つけられなかったのが、このお題を選んだ経緯です。どなたかが参考になるとうれしいです。今回は自宅からのリモート発表でした。物理発表と違って、話した内容よりもリアクションの分からなさによる戸惑いが気になってしまいました。（オイ※ リアクションはしてくれてたみたいです。🙏複数モニター必須とか、いろいろ知見がありそうなので、今後蓄積出来ると良さそうです。","link":"https://developer.feedforce.jp/entry/2020/03/02/140000","isoDate":"2020-03-02T05:00:00.000Z","dateMiliSeconds":1583125200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20200302/20200302102630.png","authorName":"masutaka"},{"title":"スレッドセーフでない Dir.chdir の使用を RuboCop で禁止する","content":"週刊Railsウォッチ（20200225前編）RubyのShellwordsライブラリは知っておくべき、VCRはやはり有能、copを自作、Hix on Rails記事ほか｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社  RuboCopでコードレビュー支援: Net::HTTPを使わせないcop（Hacklines より）\n そういえば以前業務で似たことをやったので、メモがてら置いておきます。\nDir.chdir はスレッドセーフではない Sidekiq で Dir.chdir を使ったら、他のジョブと干渉してハマりました。\nFeature #9785: Feature Proposal: Dir.chdir Thread Safety - Ruby master - Ruby Issue Tracking System ↑ こちらの Issue を見つけるまで、Dir.chdir がスレッドセーフでないことを知りませんでした。Dir.chdir はプロセス全体の working directory を変えてしまうようです。裏側を想像するに仕方がない気はしますが、ruby のドキュメントには書いてないです。\n今後レビューで指摘し続けるのも大変なので、RuboCop の custom cop で解決できないか検討しました。\nRuboCop の custom cop は作成も導入も割と簡単だった とは言え、rubocop-rspec みたいな gem を作るのは大げさです。\n調べたところ、gem を作らずに、簡単に自作の custom cop を導入することが出来ました。\n ruby 付属の ruby-parse コマンドで AST（抽象構文木）を得ることが出来ます。\n$ ruby-parse -e &#39;Dir.chdir&#39; (send (const nil :Dir) :chdir) $ ruby-parse -e &#39;hoge ?","contentSnippet":"週刊Railsウォッチ（20200225前編）RubyのShellwordsライブラリは知っておくべき、VCRはやはり有能、copを自作、Hix on Rails記事ほか｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社  RuboCopでコードレビュー支援: Net::HTTPを使わせないcop（Hacklines より） そういえば以前業務で似たことをやったので、メモがてら置いておきます。Dir.chdir はスレッドセーフではない Sidekiq で Dir.chdir を使ったら、他のジョブと干渉してハマりました。Feature #9785: Feature Proposal: Dir.chdir Thread Safety - Ruby master - Ruby Issue Tracking System ↑ こちらの Issue を見つけるまで、Dir.chdir がスレッドセーフでないことを知りませんでした。Dir.chdir はプロセス全体の working directory を変えてしまうようです。裏側を想像するに仕方がない気はしますが、ruby のドキュメントには書いてないです。今後レビューで指摘し続けるのも大変なので、RuboCop の custom cop で解決できないか検討しました。RuboCop の custom cop は作成も導入も割と簡単だった とは言え、rubocop-rspec みたいな gem を作るのは大げさです。調べたところ、gem を作らずに、簡単に自作の custom cop を導入することが出来ました。 ruby 付属の ruby-parse コマンドで AST（抽象構文木）を得ることが出来ます。$ ruby-parse -e 'Dir.chdir' (send (const nil :Dir) :chdir) $ ruby-parse -e 'hoge ?","link":"https://masutaka.net/2020-02-25-1/","isoDate":"2020-02-25T00:00:00.000Z","dateMiliSeconds":1582588800000,"authorName":"masutaka"},{"title":"Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べた","content":"<p>こんにちは。<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>半年くらい前から <a href=\"https://devcenter.heroku.com/articles/language-runtime-metrics-ruby\">Heroku の Ruby Language Metrics</a> (Public Beta) を使い始めました。その時、どのようにメトリクスを収集しているか調べたので、この記事にまとめます。（なぜこのタイミング...）</p>\n\n<p>有効にする方法は前述の公式ドキュメントをどうぞ。<a href=\"http://blog.hatena.ne.jp/sho7650/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/sho7650/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:sho7650</a> の記事も併せて読むと分かりやすいと思います。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsho7650%2Fitems%2F7315e78fa3e6aa75b85b\" title=\"[Ruby] より細かくMetricsを取得したい [Heroku] - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/sho7650/items/7315e78fa3e6aa75b85b\">qiita.com</a></cite></p>\n\n<p>ところで、いつから Public Beta だったのですかね？ GA はいつになるのかな...？</p>\n\n<h2>概要</h2>\n\n<p>今回は Rails 前提で説明します。このような仕組みでメトリクスの収集と送信が行われます。</p>\n\n<ol>\n<li><a href=\"https://github.com/heroku/heroku-buildpack-metrics/\">heroku/metrics buildpack</a> により、Dyno 起動時に <a href=\"https://github.com/heroku/agentmon\">agentmon</a> がインストールされ、常駐する</li>\n<li>Rails が起動すると、<a href=\"https://github.com/heroku/barnes\">barnes</a> gem がメトリクスを収集し始め、定期的に localhost の agentmon に送信する</li>\n<li>agentmon は <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> にメトリクスを送信する</li>\n<li>エンジニアは Heroku Dashboard から Ruby のメトリクスを閲覧できる</li>\n</ol>\n\n\n<h2>agentmon のインストールと起動</h2>\n\n<p><a href=\"https://github.com/heroku/heroku-buildpack-metrics/\">heroku/metrics buildpack</a> によって、agentmon というデーモンがインストールされます。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/heroku/agentmon\">heroku/agentmon</a></p>\n\n<p>agentmon は後述する barnes gem から受け取ったメトリクスを <code>https://app.metrics.heroku.com/&lt;dyno id&gt;</code> に送信します。</p>\n\n<p>この URL は環境変数 <code>HEROKU_METRICS_URL</code> の値で、Heroku Dashboard から Enhanced Language Metrics を有効にすると、各 Dyno で定義されます。</p>\n\n<p>面白いのは、Slug 生成時には <a href=\"https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/bin/compile#L15-L17\">/app/.profile.d/heroku-metrics-daemon.sh がインストールされる</a>だけで、Dyno 起動時にこのスクリプトが実行され、<a href=\"https://github.com/heroku/heroku-buildpack-metrics/blob/053529d2488d1108d8fd777c2ef6575d899dcf20/.profile.d/heroku-metrics-daemon.sh\">agentmon のインストールと起動が行われる</a>ことです。</p>\n\n<p>Dyno では通常 Puma などのプロセスしか起動されませんが、このような方法を使えばデーモンも起動できることを初めて知りました。</p>\n\n<p>ちなみに <a href=\"https://devcenter.heroku.com/articles/buildpack-api#profile-d-scripts\">Dyno が起動する時 /etc/profile によって <code>/app/.profile.d/*.sh</code> がすべて実行されます</a>。</p>\n\n<h2>barnes gem によるメトリクス収集と送信</h2>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/heroku/barnes\">heroku/barnes</a></p>\n\n<p>Rails が起動すると、<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L40-L64\">Barnes.start</a> から呼ばれる <a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/periodic.rb#L31-L67\">Barnes::Periodic.new</a> で Ruby のスレッドが作られます。</p>\n\n<p><code>Barnes.start</code> はすぐに終了しますが、作られたスレッドは非同期で実行されます。無限ループのスレッドなので、Rails が起動している間、起動し続けます。</p>\n\n<p>この無限ループでは 10 秒に 1 回、後述するメトリクスを収集し、localhost の agentmon に送信します。</p>\n\n<p>送信するのはスレッド中のインスタンス変数 <code>@reporter</code> です。これは <a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/reporter.rb\">Barnes::Reporter</a> のインスタンスで、<code>statsd_client</code> を介して agentmon に送信します。</p>\n\n<p><code>statsd_client</code> は <code>Barnes::Reporter.new</code> 時に渡されます。\n<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51</a></p>\n\n<h2>収集されるメトリクス</h2>\n\n<p><code>Barnes::ResourceUsage</code> では収集されるメトリクスを一望できます。\n<a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63</a></p>\n\n<p>収集されるメトリクスと、収集方法です。</p>\n\n<ul>\n<li>Puma のメトリクス（ <code>Barnes::Instruments::PumaInstrument</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48</a></li>\n</ul>\n</li>\n<li>CPU 実行時間等のメトリクス（ <code>Barnes::Instruments::Stopwatch</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.ruby-lang.org/ja/2.7.0/class/ObjectSpace.html#M_COUNT_OBJECTS\">ObjectSpace.count_objects</a> の結果（ <code>Barnes::Instruments::ObjectSpaceCounter</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.ruby-lang.org/ja/2.7.0/method/GC/s/stat.html\">GC.stat</a> の結果（ <code>Barnes::Instruments::RubyGC</code> ）\n\n<ul>\n<li><a href=\"https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84\">https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84</a></li>\n</ul>\n</li>\n</ul>\n\n\n<h2>まとめ</h2>\n\n<p>Heroku Ruby Language Metrics のメトリクス収集の仕組みを調べました。</p>\n\n<p>ただ有効にするだけだと、他のエンジニアに説明することができなかったことが、今回調べた動機です。</p>\n\n<p>今回に限りませんが、Heroku は完全なブラックボックスではなく、調べると実装が透けて見えるのがとても良いと思います。</p>\n\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n","contentSnippet":"こんにちは。id:masutaka26 です。半年くらい前から Heroku の Ruby Language Metrics (Public Beta) を使い始めました。その時、どのようにメトリクスを収集しているか調べたので、この記事にまとめます。（なぜこのタイミング...）有効にする方法は前述の公式ドキュメントをどうぞ。id:sho7650 の記事も併せて読むと分かりやすいと思います。qiita.comところで、いつから Public Beta だったのですかね？ GA はいつになるのかな...？概要今回は Rails 前提で説明します。このような仕組みでメトリクスの収集と送信が行われます。heroku/metrics buildpack により、Dyno 起動時に agentmon がインストールされ、常駐するRails が起動すると、barnes gem がメトリクスを収集し始め、定期的に localhost の agentmon に送信するagentmon は https://app.metrics.heroku.com/<dyno id> にメトリクスを送信するエンジニアは Heroku Dashboard から Ruby のメトリクスを閲覧できるagentmon のインストールと起動heroku/metrics buildpack によって、agentmon というデーモンがインストールされます。heroku/agentmonagentmon は後述する barnes gem から受け取ったメトリクスを https://app.metrics.heroku.com/<dyno id> に送信します。この URL は環境変数 HEROKU_METRICS_URL の値で、Heroku Dashboard から Enhanced Language Metrics を有効にすると、各 Dyno で定義されます。面白いのは、Slug 生成時には /app/.profile.d/heroku-metrics-daemon.sh がインストールされるだけで、Dyno 起動時にこのスクリプトが実行され、agentmon のインストールと起動が行われることです。Dyno では通常 Puma などのプロセスしか起動されませんが、このような方法を使えばデーモンも起動できることを初めて知りました。ちなみに Dyno が起動する時 /etc/profile によって /app/.profile.d/*.sh がすべて実行されます。barnes gem によるメトリクス収集と送信heroku/barnesRails が起動すると、Barnes.start から呼ばれる Barnes::Periodic.new で Ruby のスレッドが作られます。Barnes.start はすぐに終了しますが、作られたスレッドは非同期で実行されます。無限ループのスレッドなので、Rails が起動している間、起動し続けます。この無限ループでは 10 秒に 1 回、後述するメトリクスを収集し、localhost の agentmon に送信します。送信するのはスレッド中のインスタンス変数 @reporter です。これは Barnes::Reporter のインスタンスで、statsd_client を介して agentmon に送信します。statsd_client は Barnes::Reporter.new 時に渡されます。https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes.rb#L51収集されるメトリクスBarnes::ResourceUsage では収集されるメトリクスを一望できます。https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/resource_usage.rb#L28-L63収集されるメトリクスと、収集方法です。Puma のメトリクス（ Barnes::Instruments::PumaInstrument ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/puma_instrument.rb#L33-L48CPU 実行時間等のメトリクス（ Barnes::Instruments::Stopwatch ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/stopwatch.rb#L36-L58ObjectSpace.count_objects の結果（ Barnes::Instruments::ObjectSpaceCounter ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/object_space_counter.rb#L27-L30GC.stat の結果（ Barnes::Instruments::RubyGC ）https://github.com/heroku/barnes/blob/v0.0.8/lib/barnes/instruments/ruby_gc.rb#L62-L84まとめHeroku Ruby Language Metrics のメトリクス収集の仕組みを調べました。ただ有効にするだけだと、他のエンジニアに説明することができなかったことが、今回調べた動機です。今回に限りませんが、Heroku は完全なブラックボックスではなく、調べると実装が透けて見えるのがとても良いと思います。","link":"https://developer.feedforce.jp/entry/2020/02/13/150000","isoDate":"2020-02-13T06:00:00.000Z","dateMiliSeconds":1581573600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"『AWSの薄い本　IAMのマニアックな話』を読んだ","content":"【ダウンロード版】AWSの薄い本　IAMのマニアックな話 - 佐々木拓郎のオンライン本屋 - BOOTH 少し前に Twitter で流れてきて買ったのかな。最近 AWS 等の権限まわりに課題を感じることが増えてきたので読んだ。デザインパターンやセキュリティ、運用方法など、参考になることが多くて、読んで良かった。\n開発者用の IAM User の権限はやっぱり難しいみたいで、ああなるほどと思ってみたり。\n仕事では開発用の共通 IAM User development を作って、.envrc 経由で使っているんだけど、さすがにドンピシャの解はなかった。\n本当は開発者ごとの開発用 IAM User（例: masutaka-devel）を作って、共通 IAM User は使わないほうが良いのだろうなあ。開発者ごとの通常 IAM User（例: masutaka）は作っているんだけど。\nCloudFormation によるコード管理にも触れていて、IAM Group や Role までは管理するけど、IAM User は管理しないとのこと。なぜなら IAM User は一度作ったらお終いだから。なるほど。\nCloudFormation はまだ直接使ったことがないので、本書にあるようにハードルが低い IAM から始めるのは良いと思った。\nIAM Policy を使った MFA の強制もやらないとな。そういえば他のチームはやっていたな。\nP.S. .pdf 以外にも .epub か .mobi 形式も欲しかった。気になった箇所にマーカーやメモを付けたかった。目次からの移動も出来ないので不便。\n追記(2020-03-15):\nKindle 本発売されたようです。\nKindle本の販売という実績解除しました - プログラマでありたい ","contentSnippet":"【ダウンロード版】AWSの薄い本　IAMのマニアックな話 - 佐々木拓郎のオンライン本屋 - BOOTH 少し前に Twitter で流れてきて買ったのかな。最近 AWS 等の権限まわりに課題を感じることが増えてきたので読んだ。デザインパターンやセキュリティ、運用方法など、参考になることが多くて、読んで良かった。開発者用の IAM User の権限はやっぱり難しいみたいで、ああなるほどと思ってみたり。仕事では開発用の共通 IAM User development を作って、.envrc 経由で使っているんだけど、さすがにドンピシャの解はなかった。本当は開発者ごとの開発用 IAM User（例: masutaka-devel）を作って、共通 IAM User は使わないほうが良いのだろうなあ。開発者ごとの通常 IAM User（例: masutaka）は作っているんだけど。CloudFormation によるコード管理にも触れていて、IAM Group や Role までは管理するけど、IAM User は管理しないとのこと。なぜなら IAM User は一度作ったらお終いだから。なるほど。CloudFormation はまだ直接使ったことがないので、本書にあるようにハードルが低い IAM から始めるのは良いと思った。IAM Policy を使った MFA の強制もやらないとな。そういえば他のチームはやっていたな。P.S. .pdf 以外にも .epub か .mobi 形式も欲しかった。気になった箇所にマーカーやメモを付けたかった。目次からの移動も出来ないので不便。追記(2020-03-15):Kindle 本発売されたようです。Kindle本の販売という実績解除しました - プログラマでありたい","link":"https://masutaka.net/2020-01-22-1/","isoDate":"2020-01-22T00:00:00.000Z","dateMiliSeconds":1579651200000,"authorName":"masutaka"},{"title":"『私はどのようにしてLinuxカーネルを学んだか』を読んだ","content":"職場の同僚が積読していて、153 ページしかないと聞いたので、Kindle 版を買って読んでみた。\n10 年前にデバイスドライバとか書いたことがあったので（Linux ではなく VxWorks ですが）、懐かしながら読んだ。アドレス変換やったなーとか。\nLinux カーネルを読むのはそこまで特別な知識は要らなくて、マクロ展開が分からない時はプリプロセッサ出力を確認したりして、超地道に読み進める必要があるそう。\nP153 ページしかないので、近々で Linux カーネルを読む予定がなくても、興味がある人は読むと面白いかも。\n以下は自分用メモ。\nP95\n 周辺機器からの割り込みのことをハードウェア割り込みや外部割り込みといいますが、「/proc/interrupts」を見ることで何回割り込みが発生したかが分かります\n P144\n SystemTap というツールを使うと、カーネルをビルドすることなく、変数の値を表示することが出来るので便利です。\n P144\n どのモジュールのソースコードから読むのがいいかという話ですが、最初のうちはシンプルなモジュールからがよいです。例えば、「/dev/null」というただデータを吸い込むだけのデバイスがありますが、ソースコードの作りもシンプルです。「/dev/null」のソースファイルは「drivers/char/mem.c」です。\n dmesg の出力は printk() の出力だったのか。","contentSnippet":"職場の同僚が積読していて、153 ページしかないと聞いたので、Kindle 版を買って読んでみた。10 年前にデバイスドライバとか書いたことがあったので（Linux ではなく VxWorks ですが）、懐かしながら読んだ。アドレス変換やったなーとか。Linux カーネルを読むのはそこまで特別な知識は要らなくて、マクロ展開が分からない時はプリプロセッサ出力を確認したりして、超地道に読み進める必要があるそう。P153 ページしかないので、近々で Linux カーネルを読む予定がなくても、興味がある人は読むと面白いかも。以下は自分用メモ。P95 周辺機器からの割り込みのことをハードウェア割り込みや外部割り込みといいますが、「/proc/interrupts」を見ることで何回割り込みが発生したかが分かります P144 SystemTap というツールを使うと、カーネルをビルドすることなく、変数の値を表示することが出来るので便利です。 P144 どのモジュールのソースコードから読むのがいいかという話ですが、最初のうちはシンプルなモジュールからがよいです。例えば、「/dev/null」というただデータを吸い込むだけのデバイスがありますが、ソースコードの作りもシンプルです。「/dev/null」のソースファイルは「drivers/char/mem.c」です。 dmesg の出力は printk() の出力だったのか。","link":"https://masutaka.net/2020-01-12-1/","isoDate":"2020-01-12T00:00:00.000Z","dateMiliSeconds":1578787200000,"authorName":"masutaka"},{"title":"circleci/orb-tools を使った Orb のリリースフローが良く出来ていたので紹介する","content":"⚠️ circleci/orb-tools v8.27.6 を使っています。さっき見たら v9.0.0 がリリースされており、trigger-integration-workflow 等のジョブ名が変わり、互換性がなくなったことは確認しました。\n 先日、tfupdate の CircleCI Orb を作りました。\n  tfupdate とは tfupdate は terraform のアップデートを支援してくれるツールです。ローカルの .tf ファイルに書かれた、terraform と terraform provider のバージョンを最新にしてくれます。\n  .circleci/config.yml に組み込むと、定期的に pull request を作ってくれます。\n例: https://github.com/minamijoyo/tfupdate-circleci-example/blob/cd8e5561b7eabb25aa3cd024dfcf5b868c4bda45/.circleci/config.yml タイムリーなことに、作者の minamijoyo さんが書かれた記事があります。詳しくはこちらをどうぞ。\ntfupdateでTerraform本体/プロバイダ/モジュールのバージョンアップを自動化する - Qiita なぜ circleci-tfupdate-orb を作ったのか 前述の .circleci/config.yml を見ると分かりますが、かなり行数が長いです。130 行あります。\ntfupdate 以外にも CI の設定はありますし、これを各リポジトリに書くのは辛いです。そのため、ほぼそのまま Orb にしたのが v0.0.2 です。\nhttps://github.com/masutaka/circleci-tfupdate-orb/tree/v0.0.2 CircleCI Orb Registry はこちらです。v0.0.2 は circleci CLI を使って手動で Publish しました。Publishing Orbs や他の記事など、読み漁りました。","contentSnippet":"⚠️ circleci/orb-tools v8.27.6 を使っています。さっき見たら v9.0.0 がリリースされており、trigger-integration-workflow 等のジョブ名が変わり、互換性がなくなったことは確認しました。 先日、tfupdate の CircleCI Orb を作りました。  tfupdate とは tfupdate は terraform のアップデートを支援してくれるツールです。ローカルの .tf ファイルに書かれた、terraform と terraform provider のバージョンを最新にしてくれます。  .circleci/config.yml に組み込むと、定期的に pull request を作ってくれます。例: https://github.com/minamijoyo/tfupdate-circleci-example/blob/cd8e5561b7eabb25aa3cd024dfcf5b868c4bda45/.circleci/config.yml タイムリーなことに、作者の minamijoyo さんが書かれた記事があります。詳しくはこちらをどうぞ。tfupdateでTerraform本体/プロバイダ/モジュールのバージョンアップを自動化する - Qiita なぜ circleci-tfupdate-orb を作ったのか 前述の .circleci/config.yml を見ると分かりますが、かなり行数が長いです。130 行あります。tfupdate 以外にも CI の設定はありますし、これを各リポジトリに書くのは辛いです。そのため、ほぼそのまま Orb にしたのが v0.0.2 です。https://github.com/masutaka/circleci-tfupdate-orb/tree/v0.0.2 CircleCI Orb Registry はこちらです。v0.0.2 は circleci CLI を使って手動で Publish しました。Publishing Orbs や他の記事など、読み漁りました。","link":"https://masutaka.net/2019-12-20-1/","isoDate":"2019-12-20T00:00:00.000Z","dateMiliSeconds":1576800000000,"authorName":"masutaka"},{"title":"Heroku 上での bundler version の決められ方","content":"Ruby apps will now have the BUNDLED WITH declaration in their Gemfile.lock removed after detecting Bundler version｜Heroku Dev Center このアナウンスがあったので、調べてツイートした。ブログにも貼っておく。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  アナウンスの内容要約 Gemfile.lock の &lsquo;BUNDLED WITH&rsquo; には問題があるから、Heroku では bundler version の決定（v1 or v2）に使った後、&lsquo;BUNDLED WITH&rsquo; は削除してからデプロイするよとのこと。\nHeroku というより heroku-buildpack-ruby の話ね。\n  heroku-buildpack-ruby の処理 LanguagePack::Ruby#install_bundler_in_app から呼ばれるここで bundler v1 か v2 かを判別。\nhttps://github.com/heroku/heroku-buildpack-ruby/blob/v207/lib/language_pack/helpers/bundler_wrapper.rb#L183-L192 下の LanguagePack::Helpers::BundlerWrapper#detect_bundler_version_and_dir_name!","contentSnippet":"Ruby apps will now have the BUNDLED WITH declaration in their Gemfile.lock removed after detecting Bundler version｜Heroku Dev Center このアナウンスがあったので、調べてツイートした。ブログにも貼っておく。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  アナウンスの内容要約 Gemfile.lock の ‘BUNDLED WITH’ には問題があるから、Heroku では bundler version の決定（v1 or v2）に使った後、‘BUNDLED WITH’ は削除してからデプロイするよとのこと。Heroku というより heroku-buildpack-ruby の話ね。  heroku-buildpack-ruby の処理 LanguagePack::Ruby#install_bundler_in_app から呼ばれるここで bundler v1 か v2 かを判別。https://github.com/heroku/heroku-buildpack-ruby/blob/v207/lib/language_pack/helpers/bundler_wrapper.rb#L183-L192 下の LanguagePack::Helpers::BundlerWrapper#detect_bundler_version_and_dir_name!","link":"https://masutaka.net/2019-12-17-1/","isoDate":"2019-12-17T00:00:00.000Z","dateMiliSeconds":1576540800000,"authorName":"masutaka"},{"title":"Heroku Meetup #27 で『デプロイで止まらないバッチ処理を求めて』という話をしてきた #herokujp","content":"<p>土曜日にこんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Heroku Advent Calendar 2019 の 14 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2Fheroku\" title=\"Heroku Advent Calendar 2019 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2019/heroku\">qiita.com</a></cite></p>\n\n<p>昨日は <a href=\"https://qiita.com/takahito0508\">@takahito0508</a> さんの『<a href=\"https://qiita.com/takahito0508/items/0f30e441dd5fba673560\">Salesforce の Org Development 用の Buildpack を作った話</a>』でした。Heroku の Buildpack は割と簡単な仕組みなので、ハードルが低いですよね。</p>\n\n<p>さて、同じ日（2019/12/13）に開催された <a href=\"https://herokujp.doorkeeper.jp/events/99972\">Heroku Meetup #27 \"Heroku Vitamin!\"</a> で『デプロイで止まらないバッチ処理を求めて』というお題で発表してきました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRVD7Gx345OvUDpoGaRxv5sYQB9uCpvFORJvhgKWySCxNd3WqQQEM4Gfpx0OJYoOyf2sY8GVUKD3spA/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>Heroku meetup は<a href=\"https://herokujp.doorkeeper.jp/events/93092\">前々回 #25</a> 以来の参加と登壇です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F07%2F29%2F140000\" title=\"Heroku Meetup #25 &quot;Heroku Ghost&quot; で 2 回話してきた #herokujp - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2019/07/29/140000\">developer.feedforce.jp</a></cite></p>\n\n<h2>所感</h2>\n\n<p>世の中では割と多くのバッチ処理が動いていると思います。ですが、Heroku 上でのバッチ処理はあまり情報がないので、今回紹介させて頂きました。技術スタックとしては、Rails の Active Job と Sidekiq です。</p>\n\n<p>今回もニッチな発表ができてとても満足しています。会場にいる一人に刺されば大成功くらいの気持ちで発表していました。</p>\n\n<p>中の人曰く、こんな One-Off Dyno の使い方をする人は初めて見たとのこと。(^^;</p>\n\n<p>使い方としては問題ないそうですが、<a href=\"https://devcenter.heroku.com/articles/dyno-runtime#private-spaces-runtime\">Private Spaces</a> では Dyno の起動が遅いそうなので、そこはやや注意とのこと。</p>\n\n<p>※ <a href=\"https://ecbooster.jp/\">EC Booster</a> では一般向けの <a href=\"https://devcenter.heroku.com/articles/dyno-runtime#common-runtime\">Common Runtime</a> を使っています。</p>\n\n<p>とは言え、<a href=\"https://devcenter.heroku.com/articles/platform-api-reference#dyno-create\">Dyno Create API</a> は Dyno の起動完了を待たずに即座に終了するため、Private Spaces でも大丈夫みたいです。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">.<a href=\"https://twitter.com/masutaka?ref_src=twsrc%5Etfw\">@masutaka</a> さんのお話 <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a> <a href=\"https://t.co/RZnLFWq9qn\">pic.twitter.com/RZnLFWq9qn</a></p>&mdash; Satoshi Nagano (@thisisnagano) <a href=\"https://twitter.com/thisisnagano/status/1205437869453500416?ref_src=twsrc%5Etfw\">2019年12月13日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>明日は <a href=\"https://qiita.com/seijikohara\">@seijikohara</a> さんです。お楽しみに。</p>\n","contentSnippet":"土曜日にこんにちは id:masutaka26 です。この記事は Heroku Advent Calendar 2019 の 14 日目の記事です。qiita.com昨日は @takahito0508 さんの『Salesforce の Org Development 用の Buildpack を作った話』でした。Heroku の Buildpack は割と簡単な仕組みなので、ハードルが低いですよね。さて、同じ日（2019/12/13）に開催された Heroku Meetup #27 \"Heroku Vitamin!\" で『デプロイで止まらないバッチ処理を求めて』というお題で発表してきました。Heroku meetup は前々回 #25 以来の参加と登壇です。developer.feedforce.jp所感世の中では割と多くのバッチ処理が動いていると思います。ですが、Heroku 上でのバッチ処理はあまり情報がないので、今回紹介させて頂きました。技術スタックとしては、Rails の Active Job と Sidekiq です。今回もニッチな発表ができてとても満足しています。会場にいる一人に刺されば大成功くらいの気持ちで発表していました。中の人曰く、こんな One-Off Dyno の使い方をする人は初めて見たとのこと。(^^;使い方としては問題ないそうですが、Private Spaces では Dyno の起動が遅いそうなので、そこはやや注意とのこと。※ EC Booster では一般向けの Common Runtime を使っています。とは言え、Dyno Create API は Dyno の起動完了を待たずに即座に終了するため、Private Spaces でも大丈夫みたいです。.@masutaka さんのお話 #herokujp pic.twitter.com/RZnLFWq9qn— Satoshi Nagano (@thisisnagano) 2019年12月13日明日は @seijikohara さんです。お楽しみに。","link":"https://developer.feedforce.jp/entry/2019/12/14/153000","isoDate":"2019-12-14T06:30:00.000Z","dateMiliSeconds":1576305000000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20191214/20191214151304.jpg","authorName":"masutaka"},{"title":"月末に起動したいバッチを sidekiq-cron で指定し、healthchecks.io で監視する","content":"<p>こんにちは。<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>去年の 6/30 からジムに通い始めて、なんとか週に 2~3 のペースで続いています。サプリメントも半信半疑ながら毎日飲んでいますが、ドラッグストアや Amazon で買うと割と高いと思います。</p>\n\n<p>個人的には <a href=\"https://jp.iherb.com/\">iHerb</a> がだいぶオススメです。以前 3.6kg のプロテインを買ったらなぜかキャンペーンが適用されて、30% オフの 6,517 円になりました。</p>\n\n<p>さらにこの<a href=\"https://www.youtube.com/watch?v=ue0EFA_SxZc\">案件動画</a>を見て、プレワークアウトサプリ（C4 SPORT）にも手を出してしまいました。BCAA も飲んでいます。</p>\n\n<p>Twitter とかで検索すると、初回 10% OFF の紹介コードが見つかると思います。さらにお得です。</p>\n\n<p>何の記事でしたっけ...？そうだ、この記事は <a href=\"https://adventar.org/calendars/4169\">Feedforce Advent Calendar 2019</a> の 5 日目の記事です！</p>\n\n<p>昨日は <a href=\"http://blog.hatena.ne.jp/kano-e/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/kano-e/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:kano-e</a> の「2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち」でした。変わらぬボドゲ愛・・・！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fff-boardgame.hatenablog.com%2Fentry%2F2019%2F12%2F04%2F000000\" title=\"2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち - フィードフォース ボドゲ部\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://ff-boardgame.hatenablog.com/entry/2019/12/04/000000\">ff-boardgame.hatenablog.com</a></cite></p>\n\n<h2>sidekiq-cron で月末を指定する</h2>\n\n<p>脈絡ありませんが、<a href=\"https://github.com/ondrejbartas/sidekiq-cron\">sidekiq-cron</a> では <code>last</code> で月末を指定することが出来ます。</p>\n\n<p>例えば <code>0 12 last * * Asia/Tokyo</code> の次回実行は <code>2019/12/31 12:00 JST</code> です。<code>2019/11/30 12:00 JST</code> は無事動きました。</p>\n\n<p>このような設定になります。</p>\n\n<pre class=\"code lang-yaml\" data-lang=\"yaml\" data-unlink><span class=\"synIdentifier\">sample_job</span><span class=\"synSpecial\">:</span>\n  <span class=\"synIdentifier\">active_job</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">true</span>\n  <span class=\"synIdentifier\">cron</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;0 12 last * * Asia/Tokyo&quot;</span>\n  <span class=\"synIdentifier\">class</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;SampleJob&quot;</span>\n  <span class=\"synIdentifier\">queue</span><span class=\"synSpecial\">:</span> default\n</pre>\n\n\n<p>この cron 書式は sidekiq-cron が依存する <a href=\"https://github.com/floraison/fugit\">fugit</a> による実装です。</p>\n\n<p>確認はしていませんが、<code>last</code> の他にも <code>-1</code> や <code>L</code> などが使えるようです。</p>\n\n<p>🔗 <a href=\"https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747\">https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747</a></p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>context <span class=\"synSpecial\">'</span><span class=\"synConstant\">negative monthdays</span><span class=\"synSpecial\">'</span> <span class=\"synStatement\">do</span>\n\n  [\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7--1 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1--27 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -31,-30,-29,-28,-27,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7--1/2 * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-5,-3,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * L * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7-L * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -7,-6,-5,-4,-3,-2,-1 * *</span><span class=\"synSpecial\">'</span> ],\n    [ <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * last * *</span><span class=\"synSpecial\">'</span>, <span class=\"synSpecial\">'</span><span class=\"synConstant\">* * -1 * *</span><span class=\"synSpecial\">'</span> ],\n  ].each { |<span class=\"synIdentifier\">c</span>, <span class=\"synIdentifier\">e</span>|\n    it(<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">parses </span><span class=\"synSpecial\">#{</span>c<span class=\"synSpecial\">}&quot;</span>) { expect(<span class=\"synType\">Fugit</span>::<span class=\"synType\">Cron</span>.parse(c).to_cron_s).to eq(e) }\n  }\n<span class=\"synStatement\">end</span>\n</pre>\n\n\n<p><code>negative monthdays</code> って表現は面白い。</p>\n\n<h2>healthchecks.io で月末のバッチを監視する</h2>\n\n<p>バッチが本当に起動したかを監視するのは難しいと思います。月末の監視はさらに難しいと思います。</p>\n\n<p>過度な依存は禁物ですが、<a href=\"https://healthchecks.io/\">healthchecks.io</a> は選択肢に入れても良いかもしれません。以下の記事をどうぞ。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F10%2F09%2F140000\" title=\"terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2018/10/09/140000\">developer.feedforce.jp</a></cite></p>\n\n<p>前述の cron 設定だと <code>0 12 l * *</code> で監視することが出来ます。<code>l</code> は小文字のエルです。</p>\n\n<p>terraform-provider-healthchecksio の設定例です。</p>\n\n<pre class=\"code lang-tf\" data-lang=\"tf\" data-unlink>resource &quot;<span class=\"synConstant\">healthchecksio_check</span>&quot; &quot;<span class=\"synConstant\">sample_job</span>&quot; <span class=\"synSpecial\">{</span>\n  name     <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">SampleJob</span>&quot;\n  tags     <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span>&quot;<span class=\"synConstant\">production</span>&quot;<span class=\"synSpecial\">]</span>\n  grace    <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">60</span>&quot;\n  schedule <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">0 12 l * *</span>&quot;\n  timezone <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">Asia/Tokyo</span>&quot;\n  channels <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span>data.healthchecksio_channel.slack.id<span class=\"synSpecial\">]</span>\n<span class=\"synSpecial\">}</span>\n\ndata &quot;<span class=\"synConstant\">healthchecksio_channel</span>&quot; &quot;<span class=\"synConstant\">slack</span>&quot; <span class=\"synSpecial\">{</span>\n  kind <span class=\"synStatement\">=</span> &quot;<span class=\"synConstant\">slack</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>こちらの cron 書式は <a href=\"https://github.com/healthchecks/healthchecks\">healthchecks</a> が依存する <a href=\"https://github.com/taichino/croniter\">croniter</a> による実装です。</p>\n\n<p><code>l</code> 以外の指定は見当たりませんでした。</p>\n\n<p>🔗 <a href=\"https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223\">https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223</a></p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">testLastDayOfMonth</span>(self):\n    base = datetime(<span class=\"synConstant\">2015</span>, <span class=\"synConstant\">9</span>, <span class=\"synConstant\">4</span>)\n    itr = croniter(<span class=\"synConstant\">'0 0 l * *'</span>, base)\n    n1 = itr.get_next(datetime)\n    self.assertEqual(n1.month, <span class=\"synConstant\">9</span>)\n    self.assertEqual(n1.day, <span class=\"synConstant\">30</span>)\n    n2 = itr.get_next(datetime)\n    self.assertEqual(n2.month, <span class=\"synConstant\">10</span>)\n    self.assertEqual(n2.day, <span class=\"synConstant\">31</span>)\n    n3 = itr.get_next(datetime)\n    self.assertEqual(n3.month, <span class=\"synConstant\">11</span>)\n    self.assertEqual(n3.day, <span class=\"synConstant\">30</span>)\n    n4 = itr.get_next(datetime)\n    self.assertEqual(n4.month, <span class=\"synConstant\">12</span>)\n    self.assertEqual(n4.day, <span class=\"synConstant\">31</span>)\n</pre>\n\n\n<p>2019 年もそろそろ終わりです。年末にだけ動くバッチを設定＆監視するのも良いかもしれません。</p>\n\n<p>明日は、こばりゅうの記事です。ひこうきかっけー！？お楽しみに。</p>\n","contentSnippet":"こんにちは。id:masutaka26 です。去年の 6/30 からジムに通い始めて、なんとか週に 2~3 のペースで続いています。サプリメントも半信半疑ながら毎日飲んでいますが、ドラッグストアや Amazon で買うと割と高いと思います。個人的には iHerb がだいぶオススメです。以前 3.6kg のプロテインを買ったらなぜかキャンペーンが適用されて、30% オフの 6,517 円になりました。さらにこの案件動画を見て、プレワークアウトサプリ（C4 SPORT）にも手を出してしまいました。BCAA も飲んでいます。Twitter とかで検索すると、初回 10% OFF の紹介コードが見つかると思います。さらにお得です。何の記事でしたっけ...？そうだ、この記事は Feedforce Advent Calendar 2019 の 5 日目の記事です！昨日は id:kano-e の「2019 年に会社ボドゲ棚から自宅に持ち帰ったボドゲたち」でした。変わらぬボドゲ愛・・・！ff-boardgame.hatenablog.comsidekiq-cron で月末を指定する脈絡ありませんが、sidekiq-cron では last で月末を指定することが出来ます。例えば 0 12 last * * Asia/Tokyo の次回実行は 2019/12/31 12:00 JST です。2019/11/30 12:00 JST は無事動きました。このような設定になります。sample_job:  active_job: true  cron: \"0 12 last * * Asia/Tokyo\"  class: \"SampleJob\"  queue: defaultこの cron 書式は sidekiq-cron が依存する fugit による実装です。確認はしていませんが、last の他にも -1 や L などが使えるようです。🔗 https://github.com/floraison/fugit/blob/v1.3.3/spec/cron_spec.rb#L734-L747context 'negative monthdays' do  [    [ '* * -1 * *', '* * -1 * *' ],    [ '* * -7--1 * *', '* * -7,-6,-5,-4,-3,-2,-1 * *' ],    [ '* * -1--27 * *', '* * -31,-30,-29,-28,-27,-1 * *' ],    [ '* * -7--1/2 * *', '* * -7,-5,-3,-1 * *' ],    [ '* * L * *', '* * -1 * *' ],    [ '* * -7-L * *', '* * -7,-6,-5,-4,-3,-2,-1 * *' ],    [ '* * last * *', '* * -1 * *' ],  ].each { |c, e|    it(\"parses #{c}\") { expect(Fugit::Cron.parse(c).to_cron_s).to eq(e) }  }endnegative monthdays って表現は面白い。healthchecks.io で月末のバッチを監視するバッチが本当に起動したかを監視するのは難しいと思います。月末の監視はさらに難しいと思います。過度な依存は禁物ですが、healthchecks.io は選択肢に入れても良いかもしれません。以下の記事をどうぞ。developer.feedforce.jp前述の cron 設定だと 0 12 l * * で監視することが出来ます。l は小文字のエルです。terraform-provider-healthchecksio の設定例です。resource \"healthchecksio_check\" \"sample_job\" {  name     = \"SampleJob\"  tags     = [\"production\"]  grace    = \"60\"  schedule = \"0 12 l * *\"  timezone = \"Asia/Tokyo\"  channels = [data.healthchecksio_channel.slack.id]}data \"healthchecksio_channel\" \"slack\" {  kind = \"slack\"}こちらの cron 書式は healthchecks が依存する croniter による実装です。l 以外の指定は見当たりませんでした。🔗 https://github.com/taichino/croniter/blob/0.3.29/src/croniter/tests/test_croniter.py#L209-L223def testLastDayOfMonth(self):    base = datetime(2015, 9, 4)    itr = croniter('0 0 l * *', base)    n1 = itr.get_next(datetime)    self.assertEqual(n1.month, 9)    self.assertEqual(n1.day, 30)    n2 = itr.get_next(datetime)    self.assertEqual(n2.month, 10)    self.assertEqual(n2.day, 31)    n3 = itr.get_next(datetime)    self.assertEqual(n3.month, 11)    self.assertEqual(n3.day, 30)    n4 = itr.get_next(datetime)    self.assertEqual(n4.month, 12)    self.assertEqual(n4.day, 31)2019 年もそろそろ終わりです。年末にだけ動くバッチを設定＆監視するのも良いかもしれません。明日は、こばりゅうの記事です。ひこうきかっけー！？お楽しみに。","link":"https://developer.feedforce.jp/entry/2019/12/05/101931","isoDate":"2019-12-05T01:19:31.000Z","dateMiliSeconds":1575508771000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20191205/20191205000250.png","authorName":"masutaka"},{"title":"3ヶ月間、総務省の家計調査に協力していた","content":"今年の8月から10月の3ヶ月間、総務省の家計調査に協力していました。\nWikipedia によると、\n 日本国内の家計の支出を通じて個人消費を捉えることができる統計。2002年からは貯蓄・負債についても調査されるようになっており、調査結果は家計収支編と貯蓄・負債編に分けて発表されている。\n とのこと。2018年の餃子消費量1位は浜松市とかのアレも、家計調査の結果らしいです。https://www.e-stat.go.jp/ から誰でも利用できるようです。\nはじまり 6月終わり頃のある日、突然のピンポンがはじまりでした。話を聞くと総務省から委託された調査員の方で、真面目そうなメガネを掛けたおばさまでした。年齢は60前後と推察しました。対象世帯は無作為に選ばれるらしいです。\n私は10年以上家計簿をつけているし（現在はマネーフォワードを利用）、国勢調査みたいなものでしょと軽く考えていたのが想定外のはじまり。\nその日はなぜか詳しい説明はなく、後日説明に再訪されることになりました。\n※ 家計調査は訪問を介したコミュニケーションが多いです。オンラインを中心としたコミュニケーションが当たり前になっていると結構重いです。\n想像を絶する苦行 後日の再訪で説明をよく聞くと「3ヶ月間毎日、レシートの中身をひとつひとつ全部、紙に記入する」という、想像を絶する苦行でした。そして毎月1日と16日に家計簿を取りに来るという&hellip;。予定を合わせるのも大変だし、家計簿を付ける以外のことが出来なくなりそうでした。\n↓ これが1日分です。電子マネーや口座振替による支出は別のページに書きます。昭和か。\n※ 家計簿の記入のしかた（単身世帯用） P8 より引用\nさすがに大変すぎるので断ろうとしたら、Web サービスもあるとのこと。え、Web がデフォルトじゃないの？\n調査員の方が経験がなく講習を受けただけ（？）らしく、後日説明に来ることになりました。コミュニケーションが重い&hellip;。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  再々訪は2週間後だったでしょうか。どんな説明があるのか少し構えていたら、URLとID、パスワードを書かれた紙を渡されてその日は終わりました。うーむ。\n割と断る気満々だったのですが、タイミングを逃したため、とりあえず始めてみるかという気持ちになりました。\n家計調査 オンライン回答システム https://www.e-kakei.go.jp/ です。SignUp は出来ません。Angular 製の SPA っぽくて、HTTP/1.1 でした。\n最初はトップページの表示が激重でしたが、途中から問題ないレベルまで改善されました。\n↓ 実際に入力したある日の家計簿です。\nUI はあまり直感的でないです。例えば上の画面。しばらく経ってから、中央上部の日付をクリックするとカレンダーがポップアップし、他の日に移動できることに気づきました。日付の前後に &ldquo;&lt;&rdquo; や &ldquo;&gt;&rdquo; のナビゲータがあれば気づきやすいかと思います。\nお問い合わせフォームはあったので、いくつか意見は送りました。例えばサイドメニューの「収支検索」でなにか記入して Enter すると、検索ではなくフォームのクリアが実行されるのは直感的でないとか。\nあと、セッションタイムアウトが 1 時間くらいだったのは地味に不便でした。","contentSnippet":"今年の8月から10月の3ヶ月間、総務省の家計調査に協力していました。Wikipedia によると、 日本国内の家計の支出を通じて個人消費を捉えることができる統計。2002年からは貯蓄・負債についても調査されるようになっており、調査結果は家計収支編と貯蓄・負債編に分けて発表されている。 とのこと。2018年の餃子消費量1位は浜松市とかのアレも、家計調査の結果らしいです。https://www.e-stat.go.jp/ から誰でも利用できるようです。はじまり 6月終わり頃のある日、突然のピンポンがはじまりでした。話を聞くと総務省から委託された調査員の方で、真面目そうなメガネを掛けたおばさまでした。年齢は60前後と推察しました。対象世帯は無作為に選ばれるらしいです。私は10年以上家計簿をつけているし（現在はマネーフォワードを利用）、国勢調査みたいなものでしょと軽く考えていたのが想定外のはじまり。その日はなぜか詳しい説明はなく、後日説明に再訪されることになりました。※ 家計調査は訪問を介したコミュニケーションが多いです。オンラインを中心としたコミュニケーションが当たり前になっていると結構重いです。想像を絶する苦行 後日の再訪で説明をよく聞くと「3ヶ月間毎日、レシートの中身をひとつひとつ全部、紙に記入する」という、想像を絶する苦行でした。そして毎月1日と16日に家計簿を取りに来るという…。予定を合わせるのも大変だし、家計簿を付ける以外のことが出来なくなりそうでした。↓ これが1日分です。電子マネーや口座振替による支出は別のページに書きます。昭和か。※ 家計簿の記入のしかた（単身世帯用） P8 より引用さすがに大変すぎるので断ろうとしたら、Web サービスもあるとのこと。え、Web がデフォルトじゃないの？調査員の方が経験がなく講習を受けただけ（？）らしく、後日説明に来ることになりました。コミュニケーションが重い…。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  再々訪は2週間後だったでしょうか。どんな説明があるのか少し構えていたら、URLとID、パスワードを書かれた紙を渡されてその日は終わりました。うーむ。割と断る気満々だったのですが、タイミングを逃したため、とりあえず始めてみるかという気持ちになりました。家計調査 オンライン回答システム https://www.e-kakei.go.jp/ です。SignUp は出来ません。Angular 製の SPA っぽくて、HTTP/1.1 でした。最初はトップページの表示が激重でしたが、途中から問題ないレベルまで改善されました。↓ 実際に入力したある日の家計簿です。UI はあまり直感的でないです。例えば上の画面。しばらく経ってから、中央上部の日付をクリックするとカレンダーがポップアップし、他の日に移動できることに気づきました。日付の前後に “<” や “>” のナビゲータがあれば気づきやすいかと思います。お問い合わせフォームはあったので、いくつか意見は送りました。例えばサイドメニューの「収支検索」でなにか記入して Enter すると、検索ではなくフォームのクリアが実行されるのは直感的でないとか。あと、セッションタイムアウトが 1 時間くらいだったのは地味に不便でした。","link":"https://masutaka.net/2019-11-17-1/","isoDate":"2019-11-17T00:00:00.000Z","dateMiliSeconds":1573948800000,"authorName":"masutaka"},{"title":"『Clean Architecture』を読んだ","content":"一章一章は短いものの、全部で 34 章もあったので、読み終えるのに一ヶ月ほどもかけてしまった（付録は飛ばした）。\nコードが出てきた記憶はなく、依存関係を表す図が多かった印象。\n決して初心者向けの本ではなく、『オブジェクト指向設計実践ガイド』[2016-09-22-1] [2017-11-01-1] 程度を理解できる程度のスキルは必要だと思う。逆に言うと、『オブジェクト指向設計実践ガイド』の次に読む本としては良い。\nそういう自分も、半分くらいはあまりピンと来ずに読んでいた記憶。\n一方で一番自分にが価値があったのは「SOLID原則」のまとめのあたりかな。以下 5 つの原則の頭文字を取ったもの。\n・単一責任の原則（SRP : Single Responsibility Principle）\n・オープン・クローズドの原則（OCP : Open-Closed Principle）\n・リスコフの置換原則（LSP : Liskov Substitution Principle）\n・インターフェイス分離の原則（ISP : Interface Segregation Principle）\n・依存関係逆転の原則（DIP : Dependency Inversion Principle）\n業務に取り入れられる設計はあったので、良きタイミングで取り入れていきたい。\n時間をおいてまた読み返そう。","contentSnippet":"一章一章は短いものの、全部で 34 章もあったので、読み終えるのに一ヶ月ほどもかけてしまった（付録は飛ばした）。コードが出てきた記憶はなく、依存関係を表す図が多かった印象。決して初心者向けの本ではなく、『オブジェクト指向設計実践ガイド』[2016-09-22-1] [2017-11-01-1] 程度を理解できる程度のスキルは必要だと思う。逆に言うと、『オブジェクト指向設計実践ガイド』の次に読む本としては良い。そういう自分も、半分くらいはあまりピンと来ずに読んでいた記憶。一方で一番自分にが価値があったのは「SOLID原則」のまとめのあたりかな。以下 5 つの原則の頭文字を取ったもの。・単一責任の原則（SRP : Single Responsibility Principle）・オープン・クローズドの原則（OCP : Open-Closed Principle）・リスコフの置換原則（LSP : Liskov Substitution Principle）・インターフェイス分離の原則（ISP : Interface Segregation Principle）・依存関係逆転の原則（DIP : Dependency Inversion Principle）業務に取り入れられる設計はあったので、良きタイミングで取り入れていきたい。時間をおいてまた読み返そう。","link":"https://masutaka.net/2019-10-28-1/","isoDate":"2019-10-28T00:00:00.000Z","dateMiliSeconds":1572220800000,"authorName":"masutaka"},{"title":"terraform-provider-healthchecksio を Terraform Plugin SDK に移行した","content":"今まで terraform provider のビルドには、terraform 自体をライブラリとして要求されました。今後は terraform-plugin-sdk を使います。\nこの PR で移行しました。\nMigrate over to new terraform SDK by masutaka · Pull Request #16 · kristofferahl/terraform-provider-healthchecksio ※ https://healthchecks.io はバッチが時間通りに動いたかの監視で重宝しています。\n仕事で使っている terraform-provider-heroku の v2.2.1 で知りました。\n9/26 にアナウンスがあったのかな？ 知らなかった。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  https://www.terraform.io/docs/extend/plugin-sdk.html に従うだけで割と簡単です。tf-sdk-migrator という移行ツールが用意されています。\n$ go get github.com/hashicorp/tf-sdk-migrator $ go mod vendor $ tf-sdk-migrator check $ tf-sdk-migrator migrate  $ tf-sdk-migrator check","contentSnippet":"今まで terraform provider のビルドには、terraform 自体をライブラリとして要求されました。今後は terraform-plugin-sdk を使います。この PR で移行しました。Migrate over to new terraform SDK by masutaka · Pull Request #16 · kristofferahl/terraform-provider-healthchecksio ※ https://healthchecks.io はバッチが時間通りに動いたかの監視で重宝しています。仕事で使っている terraform-provider-heroku の v2.2.1 で知りました。9/26 にアナウンスがあったのかな？ 知らなかった。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  https://www.terraform.io/docs/extend/plugin-sdk.html に従うだけで割と簡単です。tf-sdk-migrator という移行ツールが用意されています。$ go get github.com/hashicorp/tf-sdk-migrator $ go mod vendor $ tf-sdk-migrator check $ tf-sdk-migrator migrate  $ tf-sdk-migrator check","link":"https://masutaka.net/2019-10-10-1/","isoDate":"2019-10-10T00:00:00.000Z","dateMiliSeconds":1570665600000,"authorName":"masutaka"},{"title":"本番環境で heroku run する時の tips","content":"※ 会社の esa.io に投稿した記事の転載です。\n本番環境で DB の値を書き換えるために、rails runner や rails console を使うことがある。bash もあるかもしれない。\n$ heroku run rails r scripts/important.rb -a &lt;App Name&gt; # or $ heroku run rails c -a &lt;App Name&gt; heroku run のログは現在の端末だけにしか出力されない。アプリのログには出力されないため、LogDNA や Papertrail などにも記録されない。\n現在の端末を閉じてしまうと、ログが消失するため十分注意すること。\n回避方法 ↓ 以下のような非対話型コマンドであれば、run:detached サブコマンドを使うことで、LogDNA などに送ることが出来る。ただし、現在の端末には出力されない。\n・rails runner\n・ls\n↓ 対話型コマンドは今回の方法は使えない。他の回避方法があるかは不明。\n・rails console\n・bash\n非対話型コマンドのログをアプリのログに出力する ※ 以下、を immense-shelf-19179 とします。\nrun:detached サブコマンドと -t オプションを使う。\n$ heroku run:detached -t ls -a immense-shelf-19179 Running ls on ⬢ immense-shelf-19179.","contentSnippet":"※ 会社の esa.io に投稿した記事の転載です。本番環境で DB の値を書き換えるために、rails runner や rails console を使うことがある。bash もあるかもしれない。$ heroku run rails r scripts/important.rb -a <App Name> # or $ heroku run rails c -a <App Name> heroku run のログは現在の端末だけにしか出力されない。アプリのログには出力されないため、LogDNA や Papertrail などにも記録されない。現在の端末を閉じてしまうと、ログが消失するため十分注意すること。回避方法 ↓ 以下のような非対話型コマンドであれば、run:detached サブコマンドを使うことで、LogDNA などに送ることが出来る。ただし、現在の端末には出力されない。・rails runner・ls↓ 対話型コマンドは今回の方法は使えない。他の回避方法があるかは不明。・rails console・bash非対話型コマンドのログをアプリのログに出力する ※ 以下、を immense-shelf-19179 とします。run:detached サブコマンドと -t オプションを使う。$ heroku run:detached -t ls -a immense-shelf-19179 Running ls on ⬢ immense-shelf-19179.","link":"https://masutaka.net/2019-09-20-1/","isoDate":"2019-09-20T00:00:00.000Z","dateMiliSeconds":1568937600000,"authorName":"masutaka"},{"title":"『改訂2版 みんなのGo言語』を読んだ","content":"夏休みを利用して読みました。初版は [2016-09-25-1] でじっくり読んで手も動かしたので、本当にさらっとね。\n最近は Go のコードをほとんど書いてなくて、Go Modules に追いついている程度でした。ただ、それほど分からない情報もなかったので、ある意味答え合わせにはなった気がします。\n例えば拙作の github-nippou で go-bindata から statik に乗り換えた のは、誤りでなかったなとか（P41）。\nちょうど設定ファイルのフォーマットをどうしようとか、置き場所を XDG Base Directory Specification に合わせようとか考えていたので、「2.8 設定ファイルの取り扱い（P45）」もタイムリーでした。\n読んでて Interface 使ってコードを Testable にするだとか、HTTP Mock とか、課題をいろいろ思い出しました&hellip;。\n相変わらずサラッと知識をアップデート出来るので、Go に興味ある人にはオススメの一冊です。","contentSnippet":"夏休みを利用して読みました。初版は [2016-09-25-1] でじっくり読んで手も動かしたので、本当にさらっとね。最近は Go のコードをほとんど書いてなくて、Go Modules に追いついている程度でした。ただ、それほど分からない情報もなかったので、ある意味答え合わせにはなった気がします。例えば拙作の github-nippou で go-bindata から statik に乗り換えた のは、誤りでなかったなとか（P41）。ちょうど設定ファイルのフォーマットをどうしようとか、置き場所を XDG Base Directory Specification に合わせようとか考えていたので、「2.8 設定ファイルの取り扱い（P45）」もタイムリーでした。読んでて Interface 使ってコードを Testable にするだとか、HTTP Mock とか、課題をいろいろ思い出しました…。相変わらずサラッと知識をアップデート出来るので、Go に興味ある人にはオススメの一冊です。","link":"https://masutaka.net/2019-08-16-1/","isoDate":"2019-08-16T00:00:00.000Z","dateMiliSeconds":1565913600000,"authorName":"masutaka"},{"title":"『カード決済業務のすべて』を読んだ","content":"業務でクレジットカード機能を実装した職場の同僚氏曰く、（確か）「始めはピンと来なかったけど、あとで必要なことが全部書いてあると気づいた」とのこと。私は実装には関わってないけど、目線を合わせるために読んだ。\n全部を理解しようとせず、概要だけ理解するつもりで読んだ。幸いにもコンパクトに 157 ページにまとまっていたので、気合を入れたら一日で読めた。もちろんピンと来てなくて、1/3 も怪しいかなといったところ。\nオーソリゼーション（オーソリ）の実装は必須でそれが通ったら、クリアリング（売り上げ処理）が行われ、最後にセツルメントで加盟店に利用代金が支払われる。\nとか、そんな程度。\n第1章「決済カード業務の概要と実務」でいきなりつまづいた。\n全体的に説明が分かりづらい。対象が初心者向けなのに具体例が少なく、想像しづらいためだと思う。一方で途中のコラムは具体例多めで、理解しやすかった。\n第2章「カード決済ネットワークの概要と実務」は、ビザやマスターカードなどの国際ブランドの話から始まり、割と理解しやすかった。特に P104 の図は具体的でとても良かった。こうやって各所収入を得ているのね。\nP85 のアクセプタンスの話は少し気になった。\n 　アクセプタンスとは「特定のブランドを付したカードの平等な受け入れ」を表し、加盟店は、ビザブランドカードであればビザのロゴマークを付したカードのすべてを、その利用者がカード発行者と契約した決済方式ークレジット、デビット、プリペイドなどーにかかわらずまったく平等に取り扱わなければならない。いいかえれば、クレジットカードは受け入れるが、デビットカードは受け入れないということは許されない（ただし、オンラインオーソリ専用デビットカードのように、その仕組の制約から一部の加盟店でしか利用できない決済カードはある）。\n 実際は出来ていないケースも多いと書いてあった気がする。個人で愛用している、プリペイドカードである Kyash は Web 上の決済に使えないことは多いけど、それぞれのサービスがこのアクセプタンスに違反しているってことかな？\n第3章「金融決済用ICカード」はページ数が少なく助かった。とは言え、IC カードの概要や EMV、少額決済スキームが説明されている。読み飛ばさないほうが良いと思う。\n2012 年の本なので、ここ一年で広まった QR コード決済や、各国の決済事情なども盛り込んだ改訂版の登場が待たれるところ。\nアクワイアラとイシュアが理解しづらかったので、最後に簡単にまとめておく。\nアクワイアラはクレジットカードの加盟店の獲得と管理をしており、イシュアがクレジットカードを発行する。歴史的経緯により、日本では同じ会社が兼任することが多いそう（だから分かりづらい）。海外では原則として銀行がアクワイアラとのこと。\n＜セゾン・アメリカン・エキスプレス・カードの例＞\nアクワイアラ：ユーシーカード株式会社（クレディ・セゾンの子会社）\nイシュア：株式会社クレディ・セゾン\n国際ブランド：AMEX","contentSnippet":"業務でクレジットカード機能を実装した職場の同僚氏曰く、（確か）「始めはピンと来なかったけど、あとで必要なことが全部書いてあると気づいた」とのこと。私は実装には関わってないけど、目線を合わせるために読んだ。全部を理解しようとせず、概要だけ理解するつもりで読んだ。幸いにもコンパクトに 157 ページにまとまっていたので、気合を入れたら一日で読めた。もちろんピンと来てなくて、1/3 も怪しいかなといったところ。オーソリゼーション（オーソリ）の実装は必須でそれが通ったら、クリアリング（売り上げ処理）が行われ、最後にセツルメントで加盟店に利用代金が支払われる。とか、そんな程度。第1章「決済カード業務の概要と実務」でいきなりつまづいた。全体的に説明が分かりづらい。対象が初心者向けなのに具体例が少なく、想像しづらいためだと思う。一方で途中のコラムは具体例多めで、理解しやすかった。第2章「カード決済ネットワークの概要と実務」は、ビザやマスターカードなどの国際ブランドの話から始まり、割と理解しやすかった。特に P104 の図は具体的でとても良かった。こうやって各所収入を得ているのね。P85 のアクセプタンスの話は少し気になった。 　アクセプタンスとは「特定のブランドを付したカードの平等な受け入れ」を表し、加盟店は、ビザブランドカードであればビザのロゴマークを付したカードのすべてを、その利用者がカード発行者と契約した決済方式ークレジット、デビット、プリペイドなどーにかかわらずまったく平等に取り扱わなければならない。いいかえれば、クレジットカードは受け入れるが、デビットカードは受け入れないということは許されない（ただし、オンラインオーソリ専用デビットカードのように、その仕組の制約から一部の加盟店でしか利用できない決済カードはある）。 実際は出来ていないケースも多いと書いてあった気がする。個人で愛用している、プリペイドカードである Kyash は Web 上の決済に使えないことは多いけど、それぞれのサービスがこのアクセプタンスに違反しているってことかな？第3章「金融決済用ICカード」はページ数が少なく助かった。とは言え、IC カードの概要や EMV、少額決済スキームが説明されている。読み飛ばさないほうが良いと思う。2012 年の本なので、ここ一年で広まった QR コード決済や、各国の決済事情なども盛り込んだ改訂版の登場が待たれるところ。アクワイアラとイシュアが理解しづらかったので、最後に簡単にまとめておく。アクワイアラはクレジットカードの加盟店の獲得と管理をしており、イシュアがクレジットカードを発行する。歴史的経緯により、日本では同じ会社が兼任することが多いそう（だから分かりづらい）。海外では原則として銀行がアクワイアラとのこと。＜セゾン・アメリカン・エキスプレス・カードの例＞アクワイアラ：ユーシーカード株式会社（クレディ・セゾンの子会社）イシュア：株式会社クレディ・セゾン国際ブランド：AMEX","link":"https://masutaka.net/2019-08-13-2/","isoDate":"2019-08-13T01:00:00.000Z","dateMiliSeconds":1565658000000,"authorName":"masutaka"},{"title":"『実行力 結果を出す「仕組み」の作りかた』を読んだ","content":"職場の同僚氏がオススメしていたので、少し前に読んだ。\n私は小さなグループでリーダーシップを発揮した経験はあるが、さすがに何万人もの組織での経験はないため、なかなか興味深かった。反対陣営の筆頭を側近にして、エッジの効いた政策をより良いものに落とし込むエピソードは、なかなか出来るものではない。そもそも会社だとそこまで敵対関係になることはあり得ないし。\n他に、比較優位の思考は即仕事で使えるというか、会社でしれっと紹介した。\n例えばなにか承認を得ようとする場合、当事者はいかにその案が良いかを説いたり、もしくは案を出すだけで判断を丸投げしたりする。承認者からするとなんとか協力はしたいものの、材料が少なくすぐに判断できない。そもそも他にいくつも承認を求められている。結果として承認が進まないことになりがち。\n例えばA案とB案を持っていき、それぞれこのような比較優位性がある、私はこのような理由でこちらを推したいなどと伝えれば、スムーズに行く確率が上がるという話。\n本の中では最善と考える案、その対極の案、中間のマイルドな案の3つを出して欲しいとあった。これは組織で働く上で非常に重要な考え方で、仕事が出来る/出来ないにも関わってくる。想像力が非常に重要。最初は難しいが、経験を重ねるとだんだん身に付くと思う。\n他にも、先の先まで想像しながら、先手、先手を打っていかなければならないという下りは、ソフトウェア開発における新規機能のリリースや、サーバーの深夜作業などにも当てはまる。\n以前の私は、出来ることを全部やってから深夜作業に望むという考えが足りなかった。いろいろ痛い目に合ったおかげで、今は「出来ることは全部やってそれでもダメだったら、仕方がない（今のスキルの上限）。」という考えに変わった。\n橋本さんは好き嫌いが分かれやすい人だと思う。彼に限らずそのパーソナリティが好きでなかったとしても、その考え方は別にするべきで、有用であれば参考にすると良いと思う。","contentSnippet":"職場の同僚氏がオススメしていたので、少し前に読んだ。私は小さなグループでリーダーシップを発揮した経験はあるが、さすがに何万人もの組織での経験はないため、なかなか興味深かった。反対陣営の筆頭を側近にして、エッジの効いた政策をより良いものに落とし込むエピソードは、なかなか出来るものではない。そもそも会社だとそこまで敵対関係になることはあり得ないし。他に、比較優位の思考は即仕事で使えるというか、会社でしれっと紹介した。例えばなにか承認を得ようとする場合、当事者はいかにその案が良いかを説いたり、もしくは案を出すだけで判断を丸投げしたりする。承認者からするとなんとか協力はしたいものの、材料が少なくすぐに判断できない。そもそも他にいくつも承認を求められている。結果として承認が進まないことになりがち。例えばA案とB案を持っていき、それぞれこのような比較優位性がある、私はこのような理由でこちらを推したいなどと伝えれば、スムーズに行く確率が上がるという話。本の中では最善と考える案、その対極の案、中間のマイルドな案の3つを出して欲しいとあった。これは組織で働く上で非常に重要な考え方で、仕事が出来る/出来ないにも関わってくる。想像力が非常に重要。最初は難しいが、経験を重ねるとだんだん身に付くと思う。他にも、先の先まで想像しながら、先手、先手を打っていかなければならないという下りは、ソフトウェア開発における新規機能のリリースや、サーバーの深夜作業などにも当てはまる。以前の私は、出来ることを全部やってから深夜作業に望むという考えが足りなかった。いろいろ痛い目に合ったおかげで、今は「出来ることは全部やってそれでもダメだったら、仕方がない（今のスキルの上限）。」という考えに変わった。橋本さんは好き嫌いが分かれやすい人だと思う。彼に限らずそのパーソナリティが好きでなかったとしても、その考え方は別にするべきで、有用であれば参考にすると良いと思う。","link":"https://masutaka.net/2019-08-13-1/","isoDate":"2019-08-13T00:00:00.000Z","dateMiliSeconds":1565654400000,"authorName":"masutaka"},{"title":"Heroku Logging Add-on Papertrail と LogDNA の比較","content":"追記(2019-02-27):\n⚠️ 今後 LogDNA を使うことはないと思う。S3 にアーカイブされるログフォーマットが急に変わったり、S3 のアーカイブが遅れたりされなかったりで、問い合わせをすることが多々あり疲れたため。Papertrail に戻った。私の Tweet も参考になるかも？\nPapertrail  Free プランでも S3 にアーカイブ可能。しかもアーカイブパスは Athena のパーティション形式 で、アップロードは 1 時間に 1 回という高頻度（※）。\n※ 例えばアーカイブ先を s3://example-logs/ にした場合、以下の形式でアップロードされる。\ns3://example-logs/dt=2019-08-01/2019-08-01-00.tsv.gz\ns3://example-logs/dt=2019-08-01/2019-08-01-01.tsv.gz\ns3://example-logs/dt=2019-08-01/&hellip;\ns3://example-logs/dt=2019-08-01/2019-08-01-23.tsv.gz\ns3://example-logs/dt=2019-08-02/2019-08-02-00.tsv.gz\ns3://example-logs/dt=2019-08-02/2019-08-02-01.tsv.gz\ns3://example-logs/dt=2019-08-02/&hellip;\ns3://example-logs/dt=2019-08-02/2019-08-02-23.tsv.gz\nAthena で Table を作るときに PARTITIONED BY ( dt string ) を付与してパーティションを有効にすれば、where dt = &lsquo;2019-08-02&rsquo; などで絞り込みができる。当該パーティション以外はロードされないので、高速かつ料金も抑えられる。\nLogDNA  Free プランだと、Add-on を表示しているときしかログを溜めない。Search Retention の Unlimited Live Tail がそれ。正直使い物にならないと思う。一番安い有料プラン $5/mo にすれば、Search Retention が 7 Days になり、使い物になる。\nFree プランだと S3 へのアーカイブは出来ない。有料プランにしても S3 のアーカイブは Athena のパーティション形式ではないし、頻度も 1 日 1 回。","contentSnippet":"追記(2019-02-27):⚠️ 今後 LogDNA を使うことはないと思う。S3 にアーカイブされるログフォーマットが急に変わったり、S3 のアーカイブが遅れたりされなかったりで、問い合わせをすることが多々あり疲れたため。Papertrail に戻った。私の Tweet も参考になるかも？Papertrail  Free プランでも S3 にアーカイブ可能。しかもアーカイブパスは Athena のパーティション形式 で、アップロードは 1 時間に 1 回という高頻度（※）。※ 例えばアーカイブ先を s3://example-logs/ にした場合、以下の形式でアップロードされる。s3://example-logs/dt=2019-08-01/2019-08-01-00.tsv.gzs3://example-logs/dt=2019-08-01/2019-08-01-01.tsv.gzs3://example-logs/dt=2019-08-01/…s3://example-logs/dt=2019-08-01/2019-08-01-23.tsv.gzs3://example-logs/dt=2019-08-02/2019-08-02-00.tsv.gzs3://example-logs/dt=2019-08-02/2019-08-02-01.tsv.gzs3://example-logs/dt=2019-08-02/…s3://example-logs/dt=2019-08-02/2019-08-02-23.tsv.gzAthena で Table を作るときに PARTITIONED BY ( dt string ) を付与してパーティションを有効にすれば、where dt = ‘2019-08-02’ などで絞り込みができる。当該パーティション以外はロードされないので、高速かつ料金も抑えられる。LogDNA  Free プランだと、Add-on を表示しているときしかログを溜めない。Search Retention の Unlimited Live Tail がそれ。正直使い物にならないと思う。一番安い有料プラン $5/mo にすれば、Search Retention が 7 Days になり、使い物になる。Free プランだと S3 へのアーカイブは出来ない。有料プランにしても S3 のアーカイブは Athena のパーティション形式ではないし、頻度も 1 日 1 回。","link":"https://masutaka.net/2019-08-05-1/","isoDate":"2019-08-05T00:00:00.000Z","dateMiliSeconds":1564963200000,"authorName":"masutaka"},{"title":"Heroku Meetup #25 \"Heroku Ghost\" で 2 回話してきた #herokujp","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>先週金曜日（2019/7/26）に開催された <a href=\"https://herokujp.doorkeeper.jp/events/93092\">Heroku Meetup #25 \"Heroku Ghost\"</a> で『デプロイ元をCircleCIからHerokuに乗り換えた』というお題で発表してきました。</p>\n\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRy7z2A77VE4UNCp7EhpFgeQr7fl8XqHolYwsaokN76rGCvoeo1SKh1hkNg3ew2D4pSLoQAz-iefLnR/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"400\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n\n<p>つい先日、現在関わっている <a href=\"https://app.ecbooster.jp/\">EC Booster</a> のデプロイフローを改善し、それなりに知見を得られたためです。</p>\n\n<p>Heroku Meetup の参加は<a href=\"https://herokujp.doorkeeper.jp/events/91348\">前回 #24</a> に引き続き、セッションでの発表は<a href=\"https://herokujp.doorkeeper.jp/events/82754\">前々回 #23</a> 以来です。</p>\n\n<p>前々回 #23 については自分のブログにも書きました。</p>\n\n<p><a href=\"https://masutaka.net/chalow/2018-11-28-1.html\">Heroku Meetup #23 \"Heroku Dynamite!!\" で話してきた #herokujp / マスタカの ChangeLog メモ</a></p>\n\n<h2>LT でも話した</h2>\n\n<p>LT でも飛び込みで話しました。内容は <a href=\"https://github.com/heroku/heroku-buildpack-google-chrome\">heroku-buildpack-google-chrome</a> と <a href=\"https://github.com/heroku/heroku-buildpack-chromedriver\">heroku-buildpack-chromedriver</a> の細かすぎる話です。動かない Chrome や chromedriver のバイナリが本番環境にデプロイされることを防ぐ方法や、それに関して PR を出した話など。スライドの 41~43 ページ目が相当します。</p>\n\n<p>無駄に元気な 1 日でした。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">今日は会社で LT 1 本やって、Heroku meetup で通常セッション 1 本、その後に飛び込み（？）で LT 1 本やった。さすがにもうこの数をやることないかな？ <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a></p>&mdash; Takashi MASUDA (@masutaka) <a href=\"https://twitter.com/masutaka/status/1154719579374936065?ref_src=twsrc%5Etfw\">2019年7月26日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n<p>※ 44~45 ページ目は、尺の関係で削ったブランチ戦略のメモです。ベストな戦略ではないので改善予定。</p>\n\n<h2>雑感</h2>\n\n<p>初心者向けの知見に比べて、一歩進んだ Heroku 知見はあまり Web 上に存在しない印象です。</p>\n\n<p>ここ 1 年近く、それなりに Heroku を学習してきて「かなりの規模まで Heroku で十分では？」「デプロイや Dyno の再起動で中断されるため苦手とされがちなバッチ処理も、簡単に克服できるのでは？」などと、考えが変わってきています。</p>\n\n<p>これからもブログや登壇などで、コミュニティに還元していきます。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">本日の頂き物。キャップはスピーカー特典 <a href=\"https://twitter.com/hashtag/herokujp?src=hash&amp;ref_src=twsrc%5Etfw\">#herokujp</a> <a href=\"https://t.co/Whc3UVJrbg\">pic.twitter.com/Whc3UVJrbg</a></p>&mdash; Takashi MASUDA (@masutaka) <a href=\"https://twitter.com/masutaka/status/1154746086814150658?ref_src=twsrc%5Etfw\">2019年7月26日</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n","contentSnippet":"こんにちは id:masutaka26 です。先週金曜日（2019/7/26）に開催された Heroku Meetup #25 \"Heroku Ghost\" で『デプロイ元をCircleCIからHerokuに乗り換えた』というお題で発表してきました。つい先日、現在関わっている EC Booster のデプロイフローを改善し、それなりに知見を得られたためです。Heroku Meetup の参加は前回 #24 に引き続き、セッションでの発表は前々回 #23 以来です。前々回 #23 については自分のブログにも書きました。Heroku Meetup #23 \"Heroku Dynamite!!\" で話してきた #herokujp / マスタカの ChangeLog メモLT でも話したLT でも飛び込みで話しました。内容は heroku-buildpack-google-chrome と heroku-buildpack-chromedriver の細かすぎる話です。動かない Chrome や chromedriver のバイナリが本番環境にデプロイされることを防ぐ方法や、それに関して PR を出した話など。スライドの 41~43 ページ目が相当します。無駄に元気な 1 日でした。今日は会社で LT 1 本やって、Heroku meetup で通常セッション 1 本、その後に飛び込み（？）で LT 1 本やった。さすがにもうこの数をやることないかな？ #herokujp— Takashi MASUDA (@masutaka) 2019年7月26日※ 44~45 ページ目は、尺の関係で削ったブランチ戦略のメモです。ベストな戦略ではないので改善予定。雑感初心者向けの知見に比べて、一歩進んだ Heroku 知見はあまり Web 上に存在しない印象です。ここ 1 年近く、それなりに Heroku を学習してきて「かなりの規模まで Heroku で十分では？」「デプロイや Dyno の再起動で中断されるため苦手とされがちなバッチ処理も、簡単に克服できるのでは？」などと、考えが変わってきています。これからもブログや登壇などで、コミュニティに還元していきます。本日の頂き物。キャップはスピーカー特典 #herokujp pic.twitter.com/Whc3UVJrbg— Takashi MASUDA (@masutaka) 2019年7月26日","link":"https://developer.feedforce.jp/entry/2019/07/29/140000","isoDate":"2019-07-29T05:00:00.000Z","dateMiliSeconds":1564376400000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"ジム通いと食生活改善が 13 ヶ月目に突入した","content":"[2018-06-30-1] から行き始めた『エニタイムフィットネス新三河島店 』も今月で早 13 ヶ月目。[2018-12-07-1] の中間報告に引き続き、振り返り記事を書くことにしました。\nデータは後述するとして、今は週 2~3 回で通い続けています。たまに週 1 回になることもありますが、仕方がない。\n冬と違って今は非常に通いやすいです。寒くなくて会社を出るのが遅くならなければ、通い続けるのはそれほど難しくないことが分かりました。\n筋トレの内容 半年前と違って、今は一人でも BIG3 が出来るようになりました。スミスマシンじゃなくて、フリーウェイトのほうです。日毎に「ベンチプレス → スクワット → ベンチプレス → デッドリフト」などと上半身と下半身を交互でやっています。\nまだまだ素人なので、ベンチプレスは 42.5kg、スクワットは 50kg、デッドリフトは 52.5kg 程度です。自重である 60kg くらいまでは頑張ります。\n上半身の日はアブローラーを 20 回 x 3 セット、余裕があればクランチとニートゥチェスト 20 回もセットに加えます。\n下半身の日は相変わらずブルガリアンスクワットを 左右 20 回 x 3 セットをやってます。最近は軽めのダンベルを持ちます。パーソナルトレーニングの日は、ケトルベルを持ったフォワードランジなどもやります。\n日常生活での上り階段一段抜かしも継続しています。以前よりバランスが良くなり、体が軽くなった気がします。日によって体が重いとか分かるので、体調を図るのにも良い感じです。筋肉痛の日はキツイ・・・！\nパーソナルトレーニングは週 1 回で継続しています。筋トレや食事のアドバイスももらっています。\n食生活 1 年前と比べると、栄養成分量を意識するようになりました。\n炭水化物は一日 100g、ジムに行く日は 200g 目標。だいぶキツイというか、達成できる日が少ない気が。\nタンパク質は一日 120g 目標。これはサプリで補えるので割と簡単。\n脂肪はあまり意識していませんが、揚げ物は出来るだけ避けてます。\nビタミンとミネラルはサプリで調整してます。\n食事はこんな感じ。\n＜以前＞\n朝: コーヒーのみか、コンビニのサンドイッチ\n昼: コンビニ弁当\n夜: 近所の定食屋やラーメンなど。あと週 2~3 でビールとか割と量を飲んでた","contentSnippet":"[2018-06-30-1] から行き始めた『エニタイムフィットネス新三河島店 』も今月で早 13 ヶ月目。[2018-12-07-1] の中間報告に引き続き、振り返り記事を書くことにしました。データは後述するとして、今は週 2~3 回で通い続けています。たまに週 1 回になることもありますが、仕方がない。冬と違って今は非常に通いやすいです。寒くなくて会社を出るのが遅くならなければ、通い続けるのはそれほど難しくないことが分かりました。筋トレの内容 半年前と違って、今は一人でも BIG3 が出来るようになりました。スミスマシンじゃなくて、フリーウェイトのほうです。日毎に「ベンチプレス → スクワット → ベンチプレス → デッドリフト」などと上半身と下半身を交互でやっています。まだまだ素人なので、ベンチプレスは 42.5kg、スクワットは 50kg、デッドリフトは 52.5kg 程度です。自重である 60kg くらいまでは頑張ります。上半身の日はアブローラーを 20 回 x 3 セット、余裕があればクランチとニートゥチェスト 20 回もセットに加えます。下半身の日は相変わらずブルガリアンスクワットを 左右 20 回 x 3 セットをやってます。最近は軽めのダンベルを持ちます。パーソナルトレーニングの日は、ケトルベルを持ったフォワードランジなどもやります。日常生活での上り階段一段抜かしも継続しています。以前よりバランスが良くなり、体が軽くなった気がします。日によって体が重いとか分かるので、体調を図るのにも良い感じです。筋肉痛の日はキツイ・・・！パーソナルトレーニングは週 1 回で継続しています。筋トレや食事のアドバイスももらっています。食生活 1 年前と比べると、栄養成分量を意識するようになりました。炭水化物は一日 100g、ジムに行く日は 200g 目標。だいぶキツイというか、達成できる日が少ない気が。タンパク質は一日 120g 目標。これはサプリで補えるので割と簡単。脂肪はあまり意識していませんが、揚げ物は出来るだけ避けてます。ビタミンとミネラルはサプリで調整してます。食事はこんな感じ。＜以前＞朝: コーヒーのみか、コンビニのサンドイッチ昼: コンビニ弁当夜: 近所の定食屋やラーメンなど。あと週 2~3 でビールとか割と量を飲んでた","link":"https://masutaka.net/2019-07-16-1/","isoDate":"2019-07-16T00:00:00.000Z","dateMiliSeconds":1563235200000,"authorName":"masutaka"},{"title":"esa をネタに Emacs Lisp と Elm を無理やり繋げた発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。今回はネタ探しに特に苦労しました。</p>\n\n<p>週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『esaを支えたい技術』という発表をしました。</p>\n\n<p><a href=\"https://esa.io/\">esa</a> をネタに Emacs Lisp と <a href=\"https://elm-lang.org/\">Elm</a> を無理やり繋げた内容です。ちょっと強引だった。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"61df048e1aec4413bd797af156bc5f21\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>流れとしては、↓ こんな感じです。</p>\n\n<ul>\n<li>先月 <a href=\"https://github.com/masutaka/emacs-helm-esa\">emacs-helm-esa</a> というツールを作ったよ</li>\n<li>Elm を学んだら、Emacs Lisp と Syntax が似ていたよ</li>\n<li><a href=\"https://github.com/masutaka/sandbox-elm-esa\">esa の検索をするだけの簡単なツール</a>を作ったよ</li>\n</ul>\n\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>関数型言語について学んでみたいと思っていたので、おすすめの順序を提示してくださり、参考になりました！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 良かったです。Elm はだいぶ学びやすかったです</li>\n</ul>\n</li>\n<li>Elm、こうして見てみると Haskell にめっちゃ似てますね！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですね</li>\n</ul>\n</li>\n<li>発表の流れで Elm の話になると思わなかった\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 強引でしたね (^^;</li>\n</ul>\n</li>\n<li>Elm ならふだんバックエンドのコード書いている人でもモダンなフロントエンド書けるって聞いたので勉強がんばる（決意）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 刺激になってよかったです</li>\n</ul>\n</li>\n<li>良かったです！規模が大きくなってきても同じノリで書けるのも Elm は良い\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そういう感じなんですね。コンパイルが通ればだいたい動くのが楽でした</li>\n</ul>\n</li>\n<li>Elm の HTML を作るのがすごいですね！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですよね。<a href=\"https://github.com/masutaka/sandbox-elm-esa/blob/b46bb8d405030a96ab3049a8aac1450decf0adf9/src/Main.elm#L93\">この辺りの div や i</a> は全部関数ですからね</li>\n</ul>\n</li>\n<li>ネタバレに慎重になりすぎでは！？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 自分でも全く理解できません</li>\n</ul>\n</li>\n<li>来週にはこれが Chrome 拡張になっているんですかね？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> はい、次回以降の当番の方が必ず・・・！</li>\n</ul>\n</li>\n<li>Elm おもしろそう 🏃‍♀️🚶‍♂️ emacs ってすごいんですね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> とは言え、今の時代は emacs の他に優先順位の高いものがたくさんありますね 💦</li>\n</ul>\n</li>\n<li>まさかの Elm とは！？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 考えに考えた末の Elm です...</li>\n</ul>\n</li>\n<li>これで EC Booster Front 開発できますね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 見ててくださいよ！これからのマスタカを！！１</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>所感</h2>\n\n<p>正直、外したかな？と思いながら発表してましたが、感想を読むと良い刺激を与えられたようで良かったです。</p>\n\n<p>一方で新しい言語の説明は難しいうえ、皆さんに馴染みがない Emacs Lisp との比較をしたので、余計に分かりづらかったという...。</p>\n\n<p>こうするとあまり盛り上がらないという学びを得たことと、個人的には大変満足のいく内容だったので、結果的には良かったです。</p>\n\n<p>さて、次回の勉強会のネタはどうするかな...。</p>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/\"><img src=\"https://m.media-amazon.com/images/I/51G32HC7rSL.jpg\" class=\"hatena-asin-detail-image\" alt=\"基礎からわかる Elm\" title=\"基礎からわかる Elm\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/4863542224/hatena-blog-22/\">基礎からわかる Elm</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span><a href=\"http://d.hatena.ne.jp/keyword/%C4%BB%B5%EF%20%CD%DB%B2%F0\" class=\"keyword\">鳥居 陽介</a></li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2019/02/27</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。今回はネタ探しに特に苦労しました。週次の社内勉強会 FFTT で『esaを支えたい技術』という発表をしました。esa をネタに Emacs Lisp と Elm を無理やり繋げた内容です。ちょっと強引だった。発表の内容流れとしては、↓ こんな感じです。先月 emacs-helm-esa というツールを作ったよElm を学んだら、Emacs Lisp と Syntax が似ていたよesa の検索をするだけの簡単なツールを作ったよ発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。関数型言語について学んでみたいと思っていたので、おすすめの順序を提示してくださり、参考になりました！ 良かったです。Elm はだいぶ学びやすかったですElm、こうして見てみると Haskell にめっちゃ似てますね！ そうなんですね発表の流れで Elm の話になると思わなかった 強引でしたね (^^;Elm ならふだんバックエンドのコード書いている人でもモダンなフロントエンド書けるって聞いたので勉強がんばる（決意） 刺激になってよかったです良かったです！規模が大きくなってきても同じノリで書けるのも Elm は良い そういう感じなんですね。コンパイルが通ればだいたい動くのが楽でしたElm の HTML を作るのがすごいですね！ ですよね。この辺りの div や i は全部関数ですからねネタバレに慎重になりすぎでは！？ 自分でも全く理解できません来週にはこれが Chrome 拡張になっているんですかね？ はい、次回以降の当番の方が必ず・・・！Elm おもしろそう 🏃‍♀️🚶‍♂️ emacs ってすごいんですね とは言え、今の時代は emacs の他に優先順位の高いものがたくさんありますね 💦まさかの Elm とは！？ 考えに考えた末の Elm です...これで EC Booster Front 開発できますね 見ててくださいよ！これからのマスタカを！！１所感正直、外したかな？と思いながら発表してましたが、感想を読むと良い刺激を与えられたようで良かったです。一方で新しい言語の説明は難しいうえ、皆さんに馴染みがない Emacs Lisp との比較をしたので、余計に分かりづらかったという...。こうするとあまり盛り上がらないという学びを得たことと、個人的には大変満足のいく内容だったので、結果的には良かったです。さて、次回の勉強会のネタはどうするかな...。基礎からわかる Elm作者:鳥居 陽介発売日: 2019/02/27メディア: 単行本（ソフトカバー）","link":"https://developer.feedforce.jp/entry/2019/07/01/140000","isoDate":"2019-07-01T05:00:00.000Z","dateMiliSeconds":1561957200000,"imageUrl":"https://images-fe.ssl-images-amazon.com/images/I/51G32HC7rSL._SL160_.jpg","authorName":"masutaka"},{"title":"esa の記事を Emacs から素早く開ける helm-esa.el を作った","content":"会社で使っている Qiita:Team が esa に移行されることになったので、早速作ってみました。\n  こんな感じに esa の記事を Helm Interface 上で絞り込んで、ブラウザで開くことが出来ます。\nデフォルトでは絞り込み対象は &ldquo;watched:true kind:stock&rdquo; で検索された記事です。よく参照または編集するであろう記事を、Web ブラウザで素早く開く使い方を想定しています。\nMELPAにも取り込まれた ので、M-x package-install helm-esa でインストールできます。\n作りながら考えたこと 今回の helm-esa.el は helm-qiita.el [2016-05-06-1] の後継ツールのような気持ちで作り始めました。\n最初、Qiita:Team の Stock は、esa だと Watch なのかなーくらいの考えで作っていましたが、やがてそうではないと気づきました。正確な意味で同じものはないと思います。\n逆に esa の Watch は、Qiita:Team だと「通知を購読する」の記事全てです（Qiita API では取得できません）。\nうーん、どうやって実装しよう？\n考えていく中で、Qiita:Team は各個人で記事を Stock する作りであり、esa はみんなで Stock し、文書をみんなで育てていく設計思想だと改めて気づきました。\nとは言え、何も考えずに全ての Stock 属性の記事を絞り込み対象とすると、対象記事が無駄に多くなります。\nそのため、デフォルトでは汎用性のありそうな &ldquo;watched:true kind:stock&rdquo; を検索クエリとしつつ、&ldquo;watched:true -in:日報&rdquo; のように好みのクエリも設定できるようにしました。API 制限に達する可能性はありますが、&quot;&quot; を設定すれば全記事を対象とすることも出来ます。\n工夫したのはこれだけなんですが、helm-qiita.el と比べてずいぶん柔軟なツールになりました。\nひとえに esa の設計の柔軟さによるものです。\n設定方法 README.","contentSnippet":"会社で使っている Qiita:Team が esa に移行されることになったので、早速作ってみました。  こんな感じに esa の記事を Helm Interface 上で絞り込んで、ブラウザで開くことが出来ます。デフォルトでは絞り込み対象は “watched:true kind:stock” で検索された記事です。よく参照または編集するであろう記事を、Web ブラウザで素早く開く使い方を想定しています。MELPAにも取り込まれた ので、M-x package-install helm-esa でインストールできます。作りながら考えたこと 今回の helm-esa.el は helm-qiita.el [2016-05-06-1] の後継ツールのような気持ちで作り始めました。最初、Qiita:Team の Stock は、esa だと Watch なのかなーくらいの考えで作っていましたが、やがてそうではないと気づきました。正確な意味で同じものはないと思います。逆に esa の Watch は、Qiita:Team だと「通知を購読する」の記事全てです（Qiita API では取得できません）。うーん、どうやって実装しよう？考えていく中で、Qiita:Team は各個人で記事を Stock する作りであり、esa はみんなで Stock し、文書をみんなで育てていく設計思想だと改めて気づきました。とは言え、何も考えずに全ての Stock 属性の記事を絞り込み対象とすると、対象記事が無駄に多くなります。そのため、デフォルトでは汎用性のありそうな “watched:true kind:stock” を検索クエリとしつつ、“watched:true -in:日報” のように好みのクエリも設定できるようにしました。API 制限に達する可能性はありますが、\"\" を設定すれば全記事を対象とすることも出来ます。工夫したのはこれだけなんですが、helm-qiita.el と比べてずいぶん柔軟なツールになりました。ひとえに esa の設計の柔軟さによるものです。設定方法 README.","link":"https://masutaka.net/2019-06-10-1/","isoDate":"2019-06-10T00:00:00.000Z","dateMiliSeconds":1560124800000,"authorName":"masutaka"},{"title":"CaSy のエアコンクリーニングサービスを使った","content":"[2015-12-27-1] に書いてからずっと、4 週間に 1 回、CaSy の人に掃除に来てもらっています。\nここ 2 年はずっと同じ人に来てもらっているので、割と安心してお任せしています。\n頻度は 4 週間に 1 回、時間は 2 時間で、月々このお値段。\n￥5,646（掃除代行）+ ￥1,058（鍵預け代）- ￥1,000（クーポン）= ￥5,704\n※ クーポンは前述の記事のおかげか、あと 90 枚もあります。\nうちは 1K 8 畳 (26m) とさほど広くもないので、だいたい全部掃除してくれます。ガスレンジや水回りが、月に一度リセットされるのはとっても楽です。\nただ、さすがにエアコンまでは掃除してくれません。\n入居して 2 年半経ち、エアコンがカビカビになってしまったので、同じく CaSy のハウスクリーニングをお願いしました。\nCaSy（カジー）ハウスクリーニング【CaSy（カジー）】家事代行サービス なぜ CaSy にしたのか 初めは安い業者を頼もうとしましたが、↓ こんな理由で今回は CaSy にしました。\n・そのためだけに個人情報を渡すのが急に嫌になった\n・2,000 円程度安くなることを追求しても意味がないと思った\n・CaSy の別なサービスも体験したくなった\nクリーニングの結果 作業に来ていただいた方はとても丁寧で、カビカビだったエアコンが新品みたいにピカピカになりました。（クリーニング前の写真は撮り忘れたのと、あっても出しちゃいけないやつです。）\n時間は全部で 40 分ほど。思ったより早かったです。\nお値段は税込みで 12,960 円。エアコンは自動掃除タイプでない普通のやつです。\nエアコンのカビは冷房による結露が原因になるそうです。暖房では結露しないのでカビないらしいです。\n※ そういえば以前こんなメモ [2008-08-19-1] を書いたのだった。\n夏が終わったら、クリーニングの良いタイミング。そうすれば、冬を越して次の夏になってもカビは生えていない理屈。\n冷房の後に 10~15 分ほどの暖房か、内部クリーン（うちのエアコンにはあった）をして、結露を除去すると予防になるそうです。真夏にそこまでするかは悩ましい&hellip;。\nUX (User Experience) 正直に書くと最低でした。正直ですまぬ。","contentSnippet":"[2015-12-27-1] に書いてからずっと、4 週間に 1 回、CaSy の人に掃除に来てもらっています。ここ 2 年はずっと同じ人に来てもらっているので、割と安心してお任せしています。頻度は 4 週間に 1 回、時間は 2 時間で、月々このお値段。￥5,646（掃除代行）+ ￥1,058（鍵預け代）- ￥1,000（クーポン）= ￥5,704※ クーポンは前述の記事のおかげか、あと 90 枚もあります。うちは 1K 8 畳 (26m) とさほど広くもないので、だいたい全部掃除してくれます。ガスレンジや水回りが、月に一度リセットされるのはとっても楽です。ただ、さすがにエアコンまでは掃除してくれません。入居して 2 年半経ち、エアコンがカビカビになってしまったので、同じく CaSy のハウスクリーニングをお願いしました。CaSy（カジー）ハウスクリーニング【CaSy（カジー）】家事代行サービス なぜ CaSy にしたのか 初めは安い業者を頼もうとしましたが、↓ こんな理由で今回は CaSy にしました。・そのためだけに個人情報を渡すのが急に嫌になった・2,000 円程度安くなることを追求しても意味がないと思った・CaSy の別なサービスも体験したくなったクリーニングの結果 作業に来ていただいた方はとても丁寧で、カビカビだったエアコンが新品みたいにピカピカになりました。（クリーニング前の写真は撮り忘れたのと、あっても出しちゃいけないやつです。）時間は全部で 40 分ほど。思ったより早かったです。お値段は税込みで 12,960 円。エアコンは自動掃除タイプでない普通のやつです。エアコンのカビは冷房による結露が原因になるそうです。暖房では結露しないのでカビないらしいです。※ そういえば以前こんなメモ [2008-08-19-1] を書いたのだった。夏が終わったら、クリーニングの良いタイミング。そうすれば、冬を越して次の夏になってもカビは生えていない理屈。冷房の後に 10~15 分ほどの暖房か、内部クリーン（うちのエアコンにはあった）をして、結露を除去すると予防になるそうです。真夏にそこまでするかは悩ましい…。UX (User Experience) 正直に書くと最低でした。正直ですまぬ。","link":"https://masutaka.net/2019-06-03-1/","isoDate":"2019-06-03T00:00:00.000Z","dateMiliSeconds":1559520000000,"authorName":"masutaka"},{"title":"『アフターデジタル』を読んだ","content":"会社で話題になっていたので読みました。\n自分の知識は 2019/2/12 のクローズアップ現代 を見て、中国には信用スコアというものがあると知っている程度。\n中国（というかアリババ）の「信用スコア」はここ数年で急激に浸透したそうですが、それから中国人のマナーが格段に上がったそうです。元々文化大革命で儒教的な文化や考え方が一度リセットされていたとのこと。\n（発展途上国では光ファイバーの整備は遅れたが、それを飛び越えて日本より Wifi が発達した話を思い出しました。）\n一方の日本は誰かの目があれば、マナーは良い印象です。ある意味中途半端にマナーが良いので、中国のように浸透する確率は低い気がしました。\n信用スコアを使うことで、企業は取引コストや与信の確認に伴うチェックや人件費を減らすことが出来ているそうです。個人でも家を借りるとき等の無駄な確認が要らなくなります。\n個人の信用は場面場面で引き継がれないと感じているので、自分は悪い印象はあまり受けませんでした。\n平安保険グループの事例は、自分にとっても興味深かったです。\n私は以前から売上目標を KPI に掲げるやり方には懐疑的で、プロダクトを良くするための行動を指標にした方が良いと思っていました。それは半分は当たっていたわけですが、答えはこの本の中に書いてありました。\nやはり、いかに顧客に寄り添っていられるかが鍵です。SaaS のようなサブスクリプションモデルであっても、売上を第一にしていたのでは、ツール販売とあまり変わらず競合に顧客を奪われやすい気はしました。\nちょっと前に『Netflix「ライバルはフォートナイト。すでに負けている」と発言。TV画面の奪い合い激化 』が話題になりましたが、根底は同じだと思います。\n自分の中でいろいろ繋がった本でした。\n一方で、日本全体が取り残されずに済むことはもう無理だと感じた一冊でもありました。\nそれぞれの企業や個人がそうならないように対策するしかないと思いますが、日本は電子マネーに代表されるように変なところで多様性があるので、日本全体が「ビフォーデジタル」から脱するのは長い時間を要すると思います。","contentSnippet":"会社で話題になっていたので読みました。自分の知識は 2019/2/12 のクローズアップ現代 を見て、中国には信用スコアというものがあると知っている程度。中国（というかアリババ）の「信用スコア」はここ数年で急激に浸透したそうですが、それから中国人のマナーが格段に上がったそうです。元々文化大革命で儒教的な文化や考え方が一度リセットされていたとのこと。（発展途上国では光ファイバーの整備は遅れたが、それを飛び越えて日本より Wifi が発達した話を思い出しました。）一方の日本は誰かの目があれば、マナーは良い印象です。ある意味中途半端にマナーが良いので、中国のように浸透する確率は低い気がしました。信用スコアを使うことで、企業は取引コストや与信の確認に伴うチェックや人件費を減らすことが出来ているそうです。個人でも家を借りるとき等の無駄な確認が要らなくなります。個人の信用は場面場面で引き継がれないと感じているので、自分は悪い印象はあまり受けませんでした。平安保険グループの事例は、自分にとっても興味深かったです。私は以前から売上目標を KPI に掲げるやり方には懐疑的で、プロダクトを良くするための行動を指標にした方が良いと思っていました。それは半分は当たっていたわけですが、答えはこの本の中に書いてありました。やはり、いかに顧客に寄り添っていられるかが鍵です。SaaS のようなサブスクリプションモデルであっても、売上を第一にしていたのでは、ツール販売とあまり変わらず競合に顧客を奪われやすい気はしました。ちょっと前に『Netflix「ライバルはフォートナイト。すでに負けている」と発言。TV画面の奪い合い激化 』が話題になりましたが、根底は同じだと思います。自分の中でいろいろ繋がった本でした。一方で、日本全体が取り残されずに済むことはもう無理だと感じた一冊でもありました。それぞれの企業や個人がそうならないように対策するしかないと思いますが、日本は電子マネーに代表されるように変なところで多様性があるので、日本全体が「ビフォーデジタル」から脱するのは長い時間を要すると思います。","link":"https://masutaka.net/2019-05-28-1/","isoDate":"2019-05-28T00:00:00.000Z","dateMiliSeconds":1559001600000,"authorName":"masutaka"},{"title":"『Pragmatic Terraform on AWS』を読んだ","content":"【ダウンロード版】Pragmatic Terraform on AWS - KOS-MOS - BOOTH これも職場の同僚氏がオススメしていた本。\n普段から Terraform の設計に課題を感じていたので、ざーっと斜め読みして、第17章からしっかり読んだ。\nその中での設計のやり方が\nモノリス → モジュールの利用 → 環境（ステージ）の分離 → コンポーネント分離\nと段階を踏んでおりとても良いと思った。そう、これなんですよ。最初は main.tf だけで十分。\nTerraform の設計はアプリケーション設計とよく似ており、初めから抽象化すると難しくなると思う。\n基本は宣言的に書いていき、設定ファイルのような読めるコードにする。３回くらい重複し始めたくらいで、変数やモジュールに落とし込むのが良いはず。\n17.4.1 の &ldquo;安定度の高いコンポーネントは、変動を想定したコンポーネントに依存してはいけません&rdquo; もまさにアプリケーション設計あるある。『オブジェクト指向設計実践ガイド 』にも同じことが書いてある。→ [2016-09-22-1] [2017-11-01-1] Terraform の Workspaces をオススメしない点にも同意。状態を気にしながらの terraform apply は怖い。\n18.4 のリモートステートは知らなかった。便利そう。現状、ちょっとだけ関連があるリソースを同じコンポーネント（ディレクトリ）に集めている。リモートのバックエンドを使えば疎結合に出来るかも。Data Source でも良いと思うけどね。\nTerraform だけでなく、第19章のように AWS のベストプラクティスが書かれている点も良い。S3 の暗号化は確認しようと思った。\n ちなみにダウンロード版には .epub と .pdf しか存在しない。kindlegen 使って .mobi に変換して、Kindle 用のメールアドレスに送った。久々だと忘れちゃうね。\n$ brew cask install kindlegen $ kindlegen PragmaticTerraformOnAWS.epub 追記(2019-05-10):\n作者様からありがたいお言葉が・・・！\nloading...","contentSnippet":"【ダウンロード版】Pragmatic Terraform on AWS - KOS-MOS - BOOTH これも職場の同僚氏がオススメしていた本。普段から Terraform の設計に課題を感じていたので、ざーっと斜め読みして、第17章からしっかり読んだ。その中での設計のやり方がモノリス → モジュールの利用 → 環境（ステージ）の分離 → コンポーネント分離と段階を踏んでおりとても良いと思った。そう、これなんですよ。最初は main.tf だけで十分。Terraform の設計はアプリケーション設計とよく似ており、初めから抽象化すると難しくなると思う。基本は宣言的に書いていき、設定ファイルのような読めるコードにする。３回くらい重複し始めたくらいで、変数やモジュールに落とし込むのが良いはず。17.4.1 の “安定度の高いコンポーネントは、変動を想定したコンポーネントに依存してはいけません” もまさにアプリケーション設計あるある。『オブジェクト指向設計実践ガイド 』にも同じことが書いてある。→ [2016-09-22-1] [2017-11-01-1] Terraform の Workspaces をオススメしない点にも同意。状態を気にしながらの terraform apply は怖い。18.4 のリモートステートは知らなかった。便利そう。現状、ちょっとだけ関連があるリソースを同じコンポーネント（ディレクトリ）に集めている。リモートのバックエンドを使えば疎結合に出来るかも。Data Source でも良いと思うけどね。Terraform だけでなく、第19章のように AWS のベストプラクティスが書かれている点も良い。S3 の暗号化は確認しようと思った。 ちなみにダウンロード版には .epub と .pdf しか存在しない。kindlegen 使って .mobi に変換して、Kindle 用のメールアドレスに送った。久々だと忘れちゃうね。$ brew cask install kindlegen $ kindlegen PragmaticTerraformOnAWS.epub 追記(2019-05-10):作者様からありがたいお言葉が・・・！loading...","link":"https://masutaka.net/2019-05-07-1/","isoDate":"2019-05-07T00:00:00.000Z","dateMiliSeconds":1557187200000,"authorName":"masutaka"},{"title":"『Webフロントエンド ハイパフォーマンス チューニング』を読んだ","content":"職場の同僚氏から勧められた本。ブラウザのチューニングについて、レンダリングプロセスから説明されている。ブラウザがどう動いているかの解説本としては弱いけど、他に代わりはないそう。\nkosamari さんの記事 も紹介してくれたので、あとで読む。\n2017 年の本なので、TLS 1.3 は言及しつつも説明してなかったり、Microsoft Edge のレンダリングエンジンがまだ EdgeHTML だったりするけどが、丁寧に書かれており良書だと思った。\n私は最初の会社ではレーザープリンタのファームウェア側のレンダラを担当していたので、その知識と照らし合わせながら読んだ（Display List という単語を見た時はニヤリとした）。\nなぜ 1 つの Display List でページ全体を表現しないのかと思ったけど、プリンタと違って再レンダリングが発生するからか。なるほど。他にもブラウザはアニメーションとかあって大変ね。\n※ プリンタもメモリが足りなくなり Fallback が発生すると、Display List は 1 ページで複数回作るけどね。\nDisplay List の生成コストは低く、レンダリングコストのほうが高いという解説も割とすんなり理解できた。\n本では Virtual DOM への言及がなかったので、その点は惜しいと思った。Virtual DOM が更新されると、レンダリングプロセスはどこから始まるのか。\nその辺り含めた改訂版が出ると良さそうな気がした。","contentSnippet":"職場の同僚氏から勧められた本。ブラウザのチューニングについて、レンダリングプロセスから説明されている。ブラウザがどう動いているかの解説本としては弱いけど、他に代わりはないそう。kosamari さんの記事 も紹介してくれたので、あとで読む。2017 年の本なので、TLS 1.3 は言及しつつも説明してなかったり、Microsoft Edge のレンダリングエンジンがまだ EdgeHTML だったりするけどが、丁寧に書かれており良書だと思った。私は最初の会社ではレーザープリンタのファームウェア側のレンダラを担当していたので、その知識と照らし合わせながら読んだ（Display List という単語を見た時はニヤリとした）。なぜ 1 つの Display List でページ全体を表現しないのかと思ったけど、プリンタと違って再レンダリングが発生するからか。なるほど。他にもブラウザはアニメーションとかあって大変ね。※ プリンタもメモリが足りなくなり Fallback が発生すると、Display List は 1 ページで複数回作るけどね。Display List の生成コストは低く、レンダリングコストのほうが高いという解説も割とすんなり理解できた。本では Virtual DOM への言及がなかったので、その点は惜しいと思った。Virtual DOM が更新されると、レンダリングプロセスはどこから始まるのか。その辺り含めた改訂版が出ると良さそうな気がした。","link":"https://masutaka.net/2019-04-30-1/","isoDate":"2019-04-30T00:00:00.000Z","dateMiliSeconds":1556582400000,"authorName":"masutaka"},{"title":"Heroku Buildpack はどのようにインストールされるのか？","content":"先月、固定 IP アドレス機能を提供する QuotaGuard Static Add-on の Buildpack を作りました。\n https://github.com/masutaka/heroku-buildpack-qgsocksify  https://github.com/masutaka/heroku-buildpack-qgtunnel   Buildpack を自作したのは今回が初めてです。\nAdd-on のドキュメント の通りにインストールすると、バイナリファイルをリポジトリに commit することになります。あまりきれいな方法に思えなかったことが、これらの Buildpack を作った動機です。\nBuildpack を作ってみて、それがどのようにインストールされるか興味が湧いたので、詳しく調べてみました。\n前準備 今回は Getting Started on Heroku with Node.js のサンプルアプリを使って確認しました。\nHeroku App を作成したら、Buildpack に heroku-buildpack-qgsocksify の check ブランチ を指定しつつ、環境変数 HOGE をセットしておきます。\n$ git clone https://github.com/heroku/node-js-getting-started.git $ cd node-js-getting-started $ heroku create $ git push heroku master $ heroku buildpacks:add &#39;https://github.com/masutaka/heroku-buildpack-qgsocksify#check&#39; $ heroku config:set HOGE=aaa Buildpack をインストールする 適当な commit をして 2 回目の git push を行うと、heroku-buildpack-qgsocksify のインストールが始まると同時に、check ブランチに仕込んだログがダラダラと出力されました。出力多めです。読み飛ばしても OK です。","contentSnippet":"先月、固定 IP アドレス機能を提供する QuotaGuard Static Add-on の Buildpack を作りました。 https://github.com/masutaka/heroku-buildpack-qgsocksify  https://github.com/masutaka/heroku-buildpack-qgtunnel   Buildpack を自作したのは今回が初めてです。Add-on のドキュメント の通りにインストールすると、バイナリファイルをリポジトリに commit することになります。あまりきれいな方法に思えなかったことが、これらの Buildpack を作った動機です。Buildpack を作ってみて、それがどのようにインストールされるか興味が湧いたので、詳しく調べてみました。前準備 今回は Getting Started on Heroku with Node.js のサンプルアプリを使って確認しました。Heroku App を作成したら、Buildpack に heroku-buildpack-qgsocksify の check ブランチ を指定しつつ、環境変数 HOGE をセットしておきます。$ git clone https://github.com/heroku/node-js-getting-started.git $ cd node-js-getting-started $ heroku create $ git push heroku master $ heroku buildpacks:add 'https://github.com/masutaka/heroku-buildpack-qgsocksify#check' $ heroku config:set HOGE=aaa Buildpack をインストールする 適当な commit をして 2 回目の git push を行うと、heroku-buildpack-qgsocksify のインストールが始まると同時に、check ブランチに仕込んだログがダラダラと出力されました。出力多めです。読み飛ばしても OK です。","link":"https://masutaka.net/2019-04-27-1/","isoDate":"2019-04-27T00:00:00.000Z","dateMiliSeconds":1556323200000,"authorName":"masutaka"},{"title":"Heroku で Chrome を使ったクローラの IP アドレスを固定する","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>少し前に、Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化出来ないか調査しました。</p>\n\n<p>実装は見送られましたが、想定よりも難しく調査に時間がかかったので、この記事に残しておきます。</p>\n\n<p>方法だけ知りたい方は、下の方にある「手順」をご覧ください。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Heroku-Add-on-を比較する\">Heroku Add-on を比較する</a><ul>\n            <li><a href=\"#開発組織\">開発組織</a></li>\n            <li><a href=\"#実装\">実装</a></li>\n            <li><a href=\"#プラン\">プラン</a></li>\n            <li><a href=\"#CLI-のインストール\">CLI のインストール</a></li>\n            <li><a href=\"#Heroku-Buildpack\">Heroku Buildpack</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#コラム-固定-IP-アドレスへの私見\">[コラム] 固定 IP アドレスへの私見</a></li>\n    <li><a href=\"#Chrome-のクローラで-IP-アドレスを固定化する\">Chrome のクローラで IP アドレスを固定化する</a><ul>\n            <li><a href=\"#試行錯誤の日々\">試行錯誤の日々</a></li>\n            <li><a href=\"#ついに成功\">ついに成功</a></li>\n            <li><a href=\"#手順\">手順</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#QuotaGuard-Static-の注意事項\">QuotaGuard Static の注意事項</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"Heroku-Add-on-を比較する\">Heroku Add-on を比較する</h2>\n\n<p>今回は <a href=\"https://elements.heroku.com/addons/proximo\">Proximo</a> と <a href=\"https://elements.heroku.com/addons/quotaguardstatic\">QuotaGuard Static</a> を検討し、最終的に QuotaGuard Static を採用しました。</p>\n\n<p>💡 他に <a href=\"https://elements.heroku.com/addons/fixie\">Fixie</a>, <a href=\"https://elements.heroku.com/addons/fixie-socks\">Fixie Socks</a>, <a href=\"https://elements.heroku.com/addons/guru301\">Guru301</a> などがあるようです。</p>\n\n<p>以下、その理由です。</p>\n\n<h3 id=\"開発組織\">開発組織</h3>\n\n<p>Proximo は <a href=\"https://github.com/pirateradio\">https://github.com/pirateradio</a> を見た感じ <a href=\"https://github.com/ddollar\">@ddollar</a> の個人開発のようです。この方は <a href=\"https://github.com/ddollar/foreman\">foreman</a> などを作っており、多分すごい人です。</p>\n\n<p>QuotaGuard Static は <a href=\"https://www.quotaguard.com/\">https://www.quotaguard.com/</a> によると <a href=\"https://www.alpineshark.com/\">Alpine Shark, LLC</a> のようです。会社のほうがちょっとだけ安心できます。</p>\n\n<h3 id=\"実装\">実装</h3>\n\n<p>Proximo は 1 つのようですが、QuotaGuard Static は 2 つの Proxy サーバで冗長化されているようです。Proxy サーバが落ちる確率は低いかもしれませんが、冗長化されているに越したことはありません。</p>\n\n<p>🔗 <a href=\"https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on\">https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on</a></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ heroku addons:create proximo:development\nAdding proximo to sharp-mountain-4005... done, v18 ($5/mo)\nYour static IP address is 10.9.8.7</pre>\n\n\n<p>🔗 <a href=\"https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on\">https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on</a></p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ heroku addons:create quotaguardstatic:starter\n-----&gt; Adding quotaguardstatic:starter to sharp-mountain-4005... done, v18 (free)\n-----&gt; Your static IPs are [10.11.12.13, 14.15.16.17]</pre>\n\n\n<h3 id=\"プラン\">プラン</h3>\n\n<p>QuotaGuard Static は無料プランがあるので始めやすいです。Proximo のプランは <code>$5/mo</code> からです。</p>\n\n<p>ちなみにどちらも <code>PROXIMO_MASK</code> や <code>QUOTAGUARDSTATIC_MASK</code> という環境変数を設定すると、一部のレンジの送信だけこれらのサービス経由にすることができ、料金を節約できます。</p>\n\n<p>💡 正確に書くと <code>QUOTAGUARDSTATIC_MASK</code> は後述する qgsocksify 用の環境変数です。</p>\n\n<h3 id=\"CLI-のインストール\">CLI のインストール</h3>\n\n<p>どちらも CLI が提供されており、必要に応じてインストールします。</p>\n\n<p>Proximo はインストール元が http なのがイマイチでした。https に変えてもアクセス不可です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl http://downloads.proximo.io/proximo-stacklet.tgz | tar xz</pre>\n\n\n<p>QuotaGuard Static は普通に https でインストール出来ます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz\n$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xz</pre>\n\n\n<h3 id=\"Heroku-Buildpack\">Heroku Buildpack</h3>\n\n<p>今回の調査の過程で Heroku Buildpack を作りました。バイナリファイルをリポジトリに commit せずに済みます。よかったらどうぞ。</p>\n\n<ul>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-proximo\">https://github.com/masutaka/heroku-buildpack-proximo</a></li>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-qgtunnel\">https://github.com/masutaka/heroku-buildpack-qgtunnel</a></li>\n<li><a href=\"https://github.com/masutaka/heroku-buildpack-qgsocksify\">https://github.com/masutaka/heroku-buildpack-qgsocksify</a></li>\n</ul>\n\n\n<h2 id=\"コラム-固定-IP-アドレスへの私見\">[コラム] 固定 IP アドレスへの私見</h2>\n\n<p>IP アドレスを固定化したいのは、どんなケースでしょうか。</p>\n\n<p>多くはセキュリティ要件だと思いますが、私はあまり賛同できないです。</p>\n\n<p>そもそも当該 IP アドレスは認証されておらず、所有者が変わることがあります。仕組み上それに気づくことは難しいため、逆にセキュリティリスクを増やすことになります。そういう意味では電話番号とよく似ています。</p>\n\n<p>サービスのスケールの観点からもデメリットがあります。例えば Heroku から AWS に引っ越す時、固定 IP アドレスは変わってしまうでしょう。顧客との調整が必要ですし、間に開発会社が入っていると、より時間がかかります。</p>\n\n<h2 id=\"Chrome-のクローラで-IP-アドレスを固定化する\">Chrome のクローラで IP アドレスを固定化する</h2>\n\n<p>今回のケースでは Heroku の worker Dyno 上に <a href=\"https://rubygems.org/gems/sidekiq\">sidekiq</a> が起動しており、<a href=\"https://rubygems.org/gems/selenium-webdriver\">selenium-webdriver</a> 経由で Chrome が子プロセスとして起動し、クロールします。</p>\n\n<pre><code>sidekiq\n└ Chrome\n   ↓\n   クロール先\n</code></pre>\n\n<h3 id=\"試行錯誤の日々\">試行錯誤の日々</h3>\n\n<p>当初は sidekiq 自体に qgtunnel や qgsocksify をラップしましたが、うまくいきませんでした。よく考えたら納得です。</p>\n\n<p>Chrome に <code>--proxy-server=http://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;</code> や <code>--proxy-auth=&lt;USERNAME&gt;:&lt;PASSWORD&gt;</code> を指定してもダメ。</p>\n\n<p>どうやら少なくとも Chrome 73 ではセキュリティ上の理由から、コマンドラインオプションから認証情報を設定できないようです。認証なしプロクシなら大丈夫ですが、QuotaGuard Static は商用サービスなので認証は必須です。</p>\n\n<h3 id=\"ついに成功\">ついに成功</h3>\n\n<p>ダメ元で QuotaGuard Static のサポートに聞いたら、方法を知っており、無事クロール先にアクセスすることが出来ました。</p>\n\n<p>👇 Dyno とクロール先を SOCKS5 トンネルで繋ぎ、それ経由でアクセスします。</p>\n\n<pre><code>sidekiq\n└ Chrome (4443 port)\n   ↓ (SOCKS5 tunnel)\n   QuotaGuard Static\n   ↓ (SOCKS5 tunnel)\n   クロール先 (443 port)\n</code></pre>\n\n<p>TCP アクセスならなんでも IP アドレスを固定化出来そうです。</p>\n\n<h3 id=\"手順\">手順</h3>\n\n<p>(1) 当該 Heroku App に QuotaGuard Static Add-on をインストールします。</p>\n\n<p>(2) qgtunnel CLI もインストールします。前述の heroku-buildpack-qgtunnel を使うとお手軽です。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz</pre>\n\n\n<p>(3) Heroku のダッシュボードから、QuotaGuard Static のダッシュボードに進み、<code>Settings</code> → <code>Setup</code> とクリックします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193848.png\" alt=\"f:id:masutaka26:20190425193848p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(4) さらに <code>Tunnel</code> → <code>Create Tunnel</code> とクリックします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425192905.png\" alt=\"f:id:masutaka26:20190425192905p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(5) <code>Remote Destination</code> にクロール先を、<code>Local Port</code> は 4443、<code>Transparent</code> は true に設定します。<code>Encrypted</code> は設定しません。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193342.png\" alt=\"f:id:masutaka26:20190425193342p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(6) トンネルが出来ました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425193614.png\" alt=\"f:id:masutaka26:20190425193614p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li>127.0.0.1:4443 へのアクセスは destination.example.com:443 へのトンネルになります</li>\n<li><code>Transparent</code> を有効したことにより、destination.example.com の DNS が 127.0.0.1 に上書きされました。destination.example.com:4443 へのアクセスは destination.example.com:443 と等価になります</li>\n<li>すでに HTTPS を使っているため、<code>Encrypted</code> は必要ありません</li>\n</ul>\n\n\n<p>(7) selenium-webdriver に与える Chrome のバイナリを qgtunnel でラッピングします。今回は以下のようなシェルスクリプト bin/google-chrome-qgtunnel を作り、selenium-webdriver に指定しました。</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink><span class=\"synComment\">#!/bin/sh -eu</span>\n\n<span class=\"synStatement\">exec</span> bin/qgtunnel <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$GOOGLE_CHROME_SHIM</span><span class=\"synStatement\">&quot;</span> <span class=\"synStatement\">&quot;</span><span class=\"synPreProc\">$@</span><span class=\"synStatement\">&quot;</span>\n</pre>\n\n\n<p>💡 <a href=\"https://github.com/heroku/heroku-buildpack-google-chrome\">heroku-buildpack-google-chrome</a> と <a href=\"https://github.com/heroku/heroku-buildpack-chromedriver.git\">heroku-buildpack-chromedriver</a> を使っています。環境変数 <code>GOOGLE_CHROME_SHIM</code> は <code>/app/.apt/usr/bin/google-chrome</code> です。</p>\n\n<p>(8) 左側の <code>Outbound</code> をクリックし、SOCKS5 url を Heroku の環境変数 <code>QUOTAGUARDSTATIC_URL</code> に上書きします。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425191501.png\" alt=\"f:id:masutaka26:20190425191501p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(9) 左側の <code>Tunnel</code> から <code>Download Configuration</code> をクリックし、<code>.qgtunnel</code> ファイルをリポジトリに commit します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20190425/20190425203447.png\" alt=\"f:id:masutaka26:20190425203447p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>(10) 以上の設定により、destination.example.com:4443 へのアクセスが destination.example.com:443 に変換され、且つ IP アドレスも固定されます。</p>\n\n<p>なにかトラブルがあったら Heroku の環境変数 <code>QGTUNNEL_DEBUG</code> に true をセットして、ログを確認すると良いと思います。</p>\n\n<h2 id=\"QuotaGuard-Static-の注意事項\">QuotaGuard Static の注意事項</h2>\n\n<p>app.json の addons に <code>quotaguardstatic</code> を追加して、Review App を作ると Micro plan <code>$19/mo</code> で作られてしまいます。<code>quotaguardstatic:starter</code> とかにしても同じです。</p>\n\n<p>QuotaGuard Static のサポートに聞いたところ、Heroku のアカウント単位で設定を変える必要があるそう。問い合わせが必要です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化しました。</p>\n\n<p>固定 IP アドレス対応は出来るだけ避けたほうが良いと思いますが、どうしても必要な時にこの記事が参考になれば幸いです。</p>\n","contentSnippet":"こんにちは id:masutaka26 です。少し前に、Heroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化出来ないか調査しました。実装は見送られましたが、想定よりも難しく調査に時間がかかったので、この記事に残しておきます。方法だけ知りたい方は、下の方にある「手順」をご覧ください。Heroku Add-on を比較する開発組織実装プランCLI のインストールHeroku Buildpack[コラム] 固定 IP アドレスへの私見Chrome のクローラで IP アドレスを固定化する試行錯誤の日々ついに成功手順QuotaGuard Static の注意事項まとめHeroku Add-on を比較する今回は Proximo と QuotaGuard Static を検討し、最終的に QuotaGuard Static を採用しました。💡 他に Fixie, Fixie Socks, Guru301 などがあるようです。以下、その理由です。開発組織Proximo は https://github.com/pirateradio を見た感じ @ddollar の個人開発のようです。この方は foreman などを作っており、多分すごい人です。QuotaGuard Static は https://www.quotaguard.com/ によると Alpine Shark, LLC のようです。会社のほうがちょっとだけ安心できます。実装Proximo は 1 つのようですが、QuotaGuard Static は 2 つの Proxy サーバで冗長化されているようです。Proxy サーバが落ちる確率は低いかもしれませんが、冗長化されているに越したことはありません。🔗 https://devcenter.heroku.com/articles/proximo#provisioning-the-proximo-add-on$ heroku addons:create proximo:developmentAdding proximo to sharp-mountain-4005... done, v18 ($5/mo)Your static IP address is 10.9.8.7🔗 https://devcenter.heroku.com/articles/quotaguardstatic#provisioning-the-add-on$ heroku addons:create quotaguardstatic:starter-----> Adding quotaguardstatic:starter to sharp-mountain-4005... done, v18 (free)-----> Your static IPs are [10.11.12.13, 14.15.16.17]プランQuotaGuard Static は無料プランがあるので始めやすいです。Proximo のプランは $5/mo からです。ちなみにどちらも PROXIMO_MASK や QUOTAGUARDSTATIC_MASK という環境変数を設定すると、一部のレンジの送信だけこれらのサービス経由にすることができ、料金を節約できます。💡 正確に書くと QUOTAGUARDSTATIC_MASK は後述する qgsocksify 用の環境変数です。CLI のインストールどちらも CLI が提供されており、必要に応じてインストールします。Proximo はインストール元が http なのがイマイチでした。https に変えてもアクセス不可です。$ curl http://downloads.proximo.io/proximo-stacklet.tgz | tar xzQuotaGuard Static は普通に https でインストール出来ます。$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xzHeroku Buildpack今回の調査の過程で Heroku Buildpack を作りました。バイナリファイルをリポジトリに commit せずに済みます。よかったらどうぞ。https://github.com/masutaka/heroku-buildpack-proximohttps://github.com/masutaka/heroku-buildpack-qgtunnelhttps://github.com/masutaka/heroku-buildpack-qgsocksify[コラム] 固定 IP アドレスへの私見IP アドレスを固定化したいのは、どんなケースでしょうか。多くはセキュリティ要件だと思いますが、私はあまり賛同できないです。そもそも当該 IP アドレスは認証されておらず、所有者が変わることがあります。仕組み上それに気づくことは難しいため、逆にセキュリティリスクを増やすことになります。そういう意味では電話番号とよく似ています。サービスのスケールの観点からもデメリットがあります。例えば Heroku から AWS に引っ越す時、固定 IP アドレスは変わってしまうでしょう。顧客との調整が必要ですし、間に開発会社が入っていると、より時間がかかります。Chrome のクローラで IP アドレスを固定化する今回のケースでは Heroku の worker Dyno 上に sidekiq が起動しており、selenium-webdriver 経由で Chrome が子プロセスとして起動し、クロールします。sidekiq└ Chrome   ↓   クロール先試行錯誤の日々当初は sidekiq 自体に qgtunnel や qgsocksify をラップしましたが、うまくいきませんでした。よく考えたら納得です。Chrome に --proxy-server=http://<USERNAME>:<PASSWORD>@<HOSTNAME>:<PORT> や --proxy-auth=<USERNAME>:<PASSWORD> を指定してもダメ。どうやら少なくとも Chrome 73 ではセキュリティ上の理由から、コマンドラインオプションから認証情報を設定できないようです。認証なしプロクシなら大丈夫ですが、QuotaGuard Static は商用サービスなので認証は必須です。ついに成功ダメ元で QuotaGuard Static のサポートに聞いたら、方法を知っており、無事クロール先にアクセスすることが出来ました。👇 Dyno とクロール先を SOCKS5 トンネルで繋ぎ、それ経由でアクセスします。sidekiq└ Chrome (4443 port)   ↓ (SOCKS5 tunnel)   QuotaGuard Static   ↓ (SOCKS5 tunnel)   クロール先 (443 port)TCP アクセスならなんでも IP アドレスを固定化出来そうです。手順(1) 当該 Heroku App に QuotaGuard Static Add-on をインストールします。(2) qgtunnel CLI もインストールします。前述の heroku-buildpack-qgtunnel を使うとお手軽です。$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz(3) Heroku のダッシュボードから、QuotaGuard Static のダッシュボードに進み、Settings → Setup とクリックします。(4) さらに Tunnel → Create Tunnel とクリックします。(5) Remote Destination にクロール先を、Local Port は 4443、Transparent は true に設定します。Encrypted は設定しません。(6) トンネルが出来ました。127.0.0.1:4443 へのアクセスは destination.example.com:443 へのトンネルになりますTransparent を有効したことにより、destination.example.com の DNS が 127.0.0.1 に上書きされました。destination.example.com:4443 へのアクセスは destination.example.com:443 と等価になりますすでに HTTPS を使っているため、Encrypted は必要ありません(7) selenium-webdriver に与える Chrome のバイナリを qgtunnel でラッピングします。今回は以下のようなシェルスクリプト bin/google-chrome-qgtunnel を作り、selenium-webdriver に指定しました。#!/bin/sh -euexec bin/qgtunnel \"$GOOGLE_CHROME_SHIM\" \"$@\"💡 heroku-buildpack-google-chrome と heroku-buildpack-chromedriver を使っています。環境変数 GOOGLE_CHROME_SHIM は /app/.apt/usr/bin/google-chrome です。(8) 左側の Outbound をクリックし、SOCKS5 url を Heroku の環境変数 QUOTAGUARDSTATIC_URL に上書きします。(9) 左側の Tunnel から Download Configuration をクリックし、.qgtunnel ファイルをリポジトリに commit します。(10) 以上の設定により、destination.example.com:4443 へのアクセスが destination.example.com:443 に変換され、且つ IP アドレスも固定されます。なにかトラブルがあったら Heroku の環境変数 QGTUNNEL_DEBUG に true をセットして、ログを確認すると良いと思います。QuotaGuard Static の注意事項app.json の addons に quotaguardstatic を追加して、Review App を作ると Micro plan $19/mo で作られてしまいます。quotaguardstatic:starter とかにしても同じです。QuotaGuard Static のサポートに聞いたところ、Heroku のアカウント単位で設定を変える必要があるそう。問い合わせが必要です。まとめHeroku の worker Dyno 上で動く、Chrome のクローラで IP アドレスを固定化しました。固定 IP アドレス対応は出来るだけ避けたほうが良いと思いますが、どうしても必要な時にこの記事が参考になれば幸いです。","link":"https://developer.feedforce.jp/entry/2019/04/26/154540","isoDate":"2019-04-26T06:45:40.000Z","dateMiliSeconds":1556261140000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"『思考する機械コンピュータ』を読んだ","content":"なんと第１刷が 2000/10/16。つまり 20 世紀の本。\n2016/10/12 に買って積んでいたけど、えいやっと読んだ。20 世紀の本にニューラルネットワークが出てくるとは思わなかった。\n正直、中盤までは読み進めるのが大変だった。面白さが分かったのが７章から。読書メモを書き始めるくらいには熱を帯びて読んだ。中盤までの説明は、終盤のために必要だったんだね。\n個人的に最後のページがクライマックスだった。\n P272\n科学者である友人たちは、人間がどのように思考するかが解明できる日は来ないと信じている私を神秘主義者と呼んで非難する。\n（中略）\n私は、マシンの能力の潜在性を認めようとして「脳はマシンである」と言っているのである。人間の頭脳は我々の想像以下のものではなく、マシンは我々の想像をはるかに超えるものである。\n 「解明できる日は来ない」これを二度見した。\n人間の知性や探求の限界を認めているのではなく、それだけマシンの能力が我々の想像をはるかに超えたものということ。\n現在の工学的アプローチで作られたマシンが次のアプローチに進んだ時、人間には理解できないものが生まれるんだなと、ぼんやり思った。\nディープラーニングの世界ではすでにそうなっているから、自分が生きている間にはそうなりそう。\n今は当然ながら、人間が作って人間が理解できるソフトウェアが本番環境で動いているけど（たまに理解できないソフトウェアもあるけどw）、今後は全く理解できないソフトウェアが動くのだと思う。一部ですでにそうなっていても驚かないかも。\n私は情報専攻ではなかったので読んで良かった。もっと早く読めばよかったな。","contentSnippet":"なんと第１刷が 2000/10/16。つまり 20 世紀の本。2016/10/12 に買って積んでいたけど、えいやっと読んだ。20 世紀の本にニューラルネットワークが出てくるとは思わなかった。正直、中盤までは読み進めるのが大変だった。面白さが分かったのが７章から。読書メモを書き始めるくらいには熱を帯びて読んだ。中盤までの説明は、終盤のために必要だったんだね。個人的に最後のページがクライマックスだった。 P272科学者である友人たちは、人間がどのように思考するかが解明できる日は来ないと信じている私を神秘主義者と呼んで非難する。（中略）私は、マシンの能力の潜在性を認めようとして「脳はマシンである」と言っているのである。人間の頭脳は我々の想像以下のものではなく、マシンは我々の想像をはるかに超えるものである。 「解明できる日は来ない」これを二度見した。人間の知性や探求の限界を認めているのではなく、それだけマシンの能力が我々の想像をはるかに超えたものということ。現在の工学的アプローチで作られたマシンが次のアプローチに進んだ時、人間には理解できないものが生まれるんだなと、ぼんやり思った。ディープラーニングの世界ではすでにそうなっているから、自分が生きている間にはそうなりそう。今は当然ながら、人間が作って人間が理解できるソフトウェアが本番環境で動いているけど（たまに理解できないソフトウェアもあるけどw）、今後は全く理解できないソフトウェアが動くのだと思う。一部ですでにそうなっていても驚かないかも。私は情報専攻ではなかったので読んで良かった。もっと早く読めばよかったな。","link":"https://masutaka.net/2019-04-11-1/","isoDate":"2019-04-11T00:00:00.000Z","dateMiliSeconds":1554940800000,"authorName":"masutaka"},{"title":"『脆弱性診断スタートガイド』を読んだ","content":"仕事で脆弱性検査ツールを検討する機会があり、この分野は完全に素人なので買った。会社では検査会社に依頼して、脆弱性検査を受けているプロダクトもあるので、それを想像しながら読んだ。\nP11 によると、この本は脆弱性診断士「Silver」相当の技術を身につけることを目的としているらしい。OWASP Japan にも脆弱性診断士のスキルマップやシラバスが掲載されている 。\n 世界初の資格化を目指す、「脆弱性診断士」の取り組みが始まる（4ページ目）｜日経 xTECH（クロステック） )\n脆弱性診断士のスキルマップやガイドラインの利用方法として、上野氏は「公開当初は、脆弱性診断技術者を目指す個人が、自分の現在のスキルレベルを調べたり、スキルアップの勉強に使ったりするケースを考えている」と述べる。\nそして今後は、「脆弱性診断士」という資格につなげたいと語る。「現在、脆弱性診断に関する資格は、私が知る限り存在しない。今回のスキルマップとガイドラインが、脆弱性診断士の資格化に向けた指標になればと考えている」（国分氏）。\n ↑ 2015/03/13 からアップデートはなく、まだ資格はないようだった。\nこの本をざっと読んでみて、これだったら検査会社に頼んでしまうかなーという感想。とは言え、予算や手間の関係上、頻度は上げられないと思うので、VAddy 等のサービスを CI に組み込んで併用するのがやはり現実的か。\n[インターンレポ] Web脆弱性診断スキルマップのシルバーランクを目指す｜Money Forward Engineers&rsquo; Blog ↑ Money Forward は脆弱性診断の内製化を進めているらしい。1 年半ほど前の記事だから、もう内製化したのかな？\nそもそも Heroku 上で Rails を使っていて各種ライブラリも最新、かつ GraphQL を導入しエンドポイントが少ないサービスだと、検査会社を使ってまで脆弱性検査いるの？という大きな疑問があり、これは解消されなかった。この類いの例はたいがい、素の PHP だったりするので&hellip;。\nP278 で紹介されていた Google Hacking Database (GHDB) は知らなかった。\n例えば https://www.exploit-db.com/ghdb/3888 には RSA の Private SSL Key を Google 検索するテクニックが載っている。\n &ldquo;BEGIN RSA PRIVATE KEY&rdquo; filetype:key -github\n 脆弱性診断士でないと必要なさそうな情報だけど、知っておくといつか使うかも（？）","contentSnippet":"仕事で脆弱性検査ツールを検討する機会があり、この分野は完全に素人なので買った。会社では検査会社に依頼して、脆弱性検査を受けているプロダクトもあるので、それを想像しながら読んだ。P11 によると、この本は脆弱性診断士「Silver」相当の技術を身につけることを目的としているらしい。OWASP Japan にも脆弱性診断士のスキルマップやシラバスが掲載されている 。 世界初の資格化を目指す、「脆弱性診断士」の取り組みが始まる（4ページ目）｜日経 xTECH（クロステック） )脆弱性診断士のスキルマップやガイドラインの利用方法として、上野氏は「公開当初は、脆弱性診断技術者を目指す個人が、自分の現在のスキルレベルを調べたり、スキルアップの勉強に使ったりするケースを考えている」と述べる。そして今後は、「脆弱性診断士」という資格につなげたいと語る。「現在、脆弱性診断に関する資格は、私が知る限り存在しない。今回のスキルマップとガイドラインが、脆弱性診断士の資格化に向けた指標になればと考えている」（国分氏）。 ↑ 2015/03/13 からアップデートはなく、まだ資格はないようだった。この本をざっと読んでみて、これだったら検査会社に頼んでしまうかなーという感想。とは言え、予算や手間の関係上、頻度は上げられないと思うので、VAddy 等のサービスを CI に組み込んで併用するのがやはり現実的か。[インターンレポ] Web脆弱性診断スキルマップのシルバーランクを目指す｜Money Forward Engineers’ Blog ↑ Money Forward は脆弱性診断の内製化を進めているらしい。1 年半ほど前の記事だから、もう内製化したのかな？そもそも Heroku 上で Rails を使っていて各種ライブラリも最新、かつ GraphQL を導入しエンドポイントが少ないサービスだと、検査会社を使ってまで脆弱性検査いるの？という大きな疑問があり、これは解消されなかった。この類いの例はたいがい、素の PHP だったりするので…。P278 で紹介されていた Google Hacking Database (GHDB) は知らなかった。例えば https://www.exploit-db.com/ghdb/3888 には RSA の Private SSL Key を Google 検索するテクニックが載っている。 “BEGIN RSA PRIVATE KEY” filetype:key -github 脆弱性診断士でないと必要なさそうな情報だけど、知っておくといつか使うかも（？）","link":"https://masutaka.net/2019-03-24-1/","isoDate":"2019-03-24T00:00:00.000Z","dateMiliSeconds":1553385600000,"authorName":"masutaka"},{"title":"『はじめよう! プロセス設計』を読んだ","content":"「はじめに」がこんな出だしでした。\n 本書は『はじめよう! 要件定義 』という書籍の続編に当たります。\n 順番間違えたー！と焦りましたが、\n 続編と言いつつも、本来は本書のほうが先に出ているべき・読まれているべきものであるというのが正しい位置付けです。\n と書いてあった。安心ニッコリ。(^^)\nなぜ読もうと思ったのかというと、しばらく前から同僚が社内に何度も布教していたので、えいやっと読んだという経緯。\n途中までは「なぜこんな当たり前のことを、ここまで丁寧に説明しているのだろう？」とモヤモヤしていましたが、途中で「そうか、エンジニア以外の方はこれは当たり前のことではないのか！」と気づきました。先の同僚の言葉を思い出したのが正確ですが。\nこの本に書かれていることは、シニア以上のエンジニアは当たり前に出来ることだと思います。出来ないとヤバイ。\nですが、この「当たり前」のことが出来るエンジニア以外の方は、周りを見渡してみるとごく僅かです。逆に言うと、出来ている人はめちゃめちゃ優秀です。\nじゃあ、エンジニアがその現場に入れば解決かというと、コンテキストを共有していないので、なかなかに困難です。\nだからこそこの本が生まれたのだと思います。\nこれも先の同僚の言葉になりますが、「ここまで説明しないとエンジニア以外に伝わらないことを理解するためにもエンジニアも読んだほうが良い」かもしれません。\nエンジニア以外の方にももちろん読んでほしいです。","contentSnippet":"「はじめに」がこんな出だしでした。 本書は『はじめよう! 要件定義 』という書籍の続編に当たります。 順番間違えたー！と焦りましたが、 続編と言いつつも、本来は本書のほうが先に出ているべき・読まれているべきものであるというのが正しい位置付けです。 と書いてあった。安心ニッコリ。(^^)なぜ読もうと思ったのかというと、しばらく前から同僚が社内に何度も布教していたので、えいやっと読んだという経緯。途中までは「なぜこんな当たり前のことを、ここまで丁寧に説明しているのだろう？」とモヤモヤしていましたが、途中で「そうか、エンジニア以外の方はこれは当たり前のことではないのか！」と気づきました。先の同僚の言葉を思い出したのが正確ですが。この本に書かれていることは、シニア以上のエンジニアは当たり前に出来ることだと思います。出来ないとヤバイ。ですが、この「当たり前」のことが出来るエンジニア以外の方は、周りを見渡してみるとごく僅かです。逆に言うと、出来ている人はめちゃめちゃ優秀です。じゃあ、エンジニアがその現場に入れば解決かというと、コンテキストを共有していないので、なかなかに困難です。だからこそこの本が生まれたのだと思います。これも先の同僚の言葉になりますが、「ここまで説明しないとエンジニア以外に伝わらないことを理解するためにもエンジニアも読んだほうが良い」かもしれません。エンジニア以外の方にももちろん読んでほしいです。","link":"https://masutaka.net/2019-03-10-1/","isoDate":"2019-03-10T00:00:00.000Z","dateMiliSeconds":1552176000000,"authorName":"masutaka"},{"title":"『人事の超プロが明かす評価基準』を読んで自分の強みを考えた","content":"柴田さんの記事 を読んで、これだ！と思って衝動的に買った。\n本の中では「評価される人」＝「影響力のある人」が一番響いたかな。\n反面、この本の核心である後半に進むに連れて、ピンと来ない箇所が増えていった。総合職向けだからかな。\n特に「スペシャリストとしての道を歩むなら、そのスキルが陳腐化するものではないか、よく見極める必要がある」のくだり。スペシャリストとして重要なのはスキルそのものではなく、スキルを習得するためのスキルだと思うので、何かが違う気がした。\nコンピテンシーをまあそうだよねと思えるのは、ここ数年で構築された今の会社の評価制度を作った方々のおかげだろうなあ。私はただのフリーライダー&hellip;（白目\nそれはさておき、この記事を書いていて、気がついたら妄想し自分の強みを考えていたので、以下にまとめておく。\n私は今の会社で割と高い評価を頂いている。でも自分から見ると評価高すぎでは？と感じており、しっくり来ていない部分もあった。今はその霧が少しだけ晴れている。\n単純な技術力だと社内にもっと優れた人はいる。個々の技術力だと敵わないことも多い。\n自分の強みは多分こんなところか。\n  ブログや GitHub でアウトプットし続けている。細くてもやり続けることが大事だと最近特に思う。たまに他のエンジニアに良い影響を与えたなと感じることもある。\n  バックエンドとインフラを横断して引き受けることが出来、組み込みエンジニア時代に経験した低レイヤーも多少分かる。\n  部分最適化よりも全体最適化を好む。開発環境だったり、GCP のプロジェクト課金まわりなど。\n  誰も拾わないボールを拾う。逆に言うと、拾われそうなボールは拾わない傾向にある。\n  2 については今までの経験に感謝している。\n最初の会社ではプリンタのデバイスドライバの実装や自動評価システムの構築、100 台規模の Solaris ネットワーク管理など、いろいろ経験させてもらった。~~ブリッジエンジニアは経験しなくてよかった。~~次の会社と今の会社でも Web のインフラやバックエンドまわり、それにチームビルディングなどを経験することが出来ている。\n一点集中型のスキルだと弾数が少ないし、非常に高いレベルが必要だったりするが、複数のことをそこそこのレベルでできる人は少ないようだし、割と需要があったり重宝される気がする。\n複数のスキルを持つ私が糊のような役目を果たし、周りに良い影響を与えているのかもしれない。\n良い影響を与えることで、他のエンジニアのやる気が上がり、続いてスキルが上がり、結果的に自分が動かずに全体が良い方向に進むのかも（妄想100%）。\nとは言ったものの、そこそこのレベルでは通用しないことも多いので、仕事では常にやり抜くことを重要視しているし、プライベートではできるだけ素振りを続けてはいる。でも全然足りている気がしないし、全く素振りをしない期間もあったりするしで危機感&hellip;。\n（まとまりなくこの記事は終わっていく）","contentSnippet":"柴田さんの記事 を読んで、これだ！と思って衝動的に買った。本の中では「評価される人」＝「影響力のある人」が一番響いたかな。反面、この本の核心である後半に進むに連れて、ピンと来ない箇所が増えていった。総合職向けだからかな。特に「スペシャリストとしての道を歩むなら、そのスキルが陳腐化するものではないか、よく見極める必要がある」のくだり。スペシャリストとして重要なのはスキルそのものではなく、スキルを習得するためのスキルだと思うので、何かが違う気がした。コンピテンシーをまあそうだよねと思えるのは、ここ数年で構築された今の会社の評価制度を作った方々のおかげだろうなあ。私はただのフリーライダー…（白目それはさておき、この記事を書いていて、気がついたら妄想し自分の強みを考えていたので、以下にまとめておく。私は今の会社で割と高い評価を頂いている。でも自分から見ると評価高すぎでは？と感じており、しっくり来ていない部分もあった。今はその霧が少しだけ晴れている。単純な技術力だと社内にもっと優れた人はいる。個々の技術力だと敵わないことも多い。自分の強みは多分こんなところか。  ブログや GitHub でアウトプットし続けている。細くてもやり続けることが大事だと最近特に思う。たまに他のエンジニアに良い影響を与えたなと感じることもある。  バックエンドとインフラを横断して引き受けることが出来、組み込みエンジニア時代に経験した低レイヤーも多少分かる。  部分最適化よりも全体最適化を好む。開発環境だったり、GCP のプロジェクト課金まわりなど。  誰も拾わないボールを拾う。逆に言うと、拾われそうなボールは拾わない傾向にある。  2 については今までの経験に感謝している。最初の会社ではプリンタのデバイスドライバの実装や自動評価システムの構築、100 台規模の Solaris ネットワーク管理など、いろいろ経験させてもらった。~~ブリッジエンジニアは経験しなくてよかった。~~次の会社と今の会社でも Web のインフラやバックエンドまわり、それにチームビルディングなどを経験することが出来ている。一点集中型のスキルだと弾数が少ないし、非常に高いレベルが必要だったりするが、複数のことをそこそこのレベルでできる人は少ないようだし、割と需要があったり重宝される気がする。複数のスキルを持つ私が糊のような役目を果たし、周りに良い影響を与えているのかもしれない。良い影響を与えることで、他のエンジニアのやる気が上がり、続いてスキルが上がり、結果的に自分が動かずに全体が良い方向に進むのかも（妄想100%）。とは言ったものの、そこそこのレベルでは通用しないことも多いので、仕事では常にやり抜くことを重要視しているし、プライベートではできるだけ素振りを続けてはいる。でも全然足りている気がしないし、全く素振りをしない期間もあったりするしで危機感…。（まとまりなくこの記事は終わっていく）","link":"https://masutaka.net/2019-03-09-1/","isoDate":"2019-03-09T00:00:00.000Z","dateMiliSeconds":1552089600000,"authorName":"masutaka"},{"title":"JAWS DAYS 2019 に行ってきた #jawsdays #jawsdays2019","content":"https://jawsdays2019.jaws-ug.jp [2017-03-12-1] [2018-03-11-1] に引き続き、3 回目の参加です。去年の 6 月に EKS が GA になり 、その後 12 月に Tokyo Region でも使えるようになった 影響で、Kubernetes のセッションが大盛況でした。その他はそれほど変わらなかったように見えました。\n午前中は AI/ML 関係のセッションをなんとなく見ていました。\n[AI/ML] PythonとSageMakerで始める MLチームのみで完結するAPIの構築事例  武田 研恒さん\n  やっぱり機械学習エンジニアがサーバーの面倒見るのは無理というかもったいないよね、うんうんと聞いていました。\n[AI/ML] メディアによるAI活用（時事クイズの生成と高校野球戦評記事の自動生成）  佐渡 昭彦さん\n  朝日新聞には、ICTRAD（アイシートラッド）と呼ばれる、情報技術本部（技術系）内にある研究開発チームがあるそう。本セッションのような研究や、セキュリティ対策をしているそう。朝日新聞はよく攻撃されるらしい。なるほど。\nAI で時事クイズを作成。\nAmazon Comprehend は日本語対応していないので不採用。\n東大・横国大のオープンソース『専門用語（キーワード）自動抽出システム 』を使って、分かち書きと単語ベクトル化（？）をしているらしい。\n朝日新聞でも単語ベクトルを公開している。→ 朝日新聞単語ベクトル EC2 1 台で足りているとのこと。\nランチタイム めちゃめちゃ混んでいたけどなんとかゲット。種類を選ぶ余裕はなかった。職場の同僚 3 人はゲットできなかったそう。1000 人超もの弁当を用意した運営の方々には頭が下がります。\n[Container/k8s] GitHub Actionsを使って、ワークフローもプルリクベースで開発しよう！  池田 尚史さん\nTODO: 資料が公開されたらここに貼る\n[2019-02-11-1] に自作の GitHub Action を GitHub Marketplace に公開したばかりなので、聞いてみました。","contentSnippet":"https://jawsdays2019.jaws-ug.jp [2017-03-12-1] [2018-03-11-1] に引き続き、3 回目の参加です。去年の 6 月に EKS が GA になり 、その後 12 月に Tokyo Region でも使えるようになった 影響で、Kubernetes のセッションが大盛況でした。その他はそれほど変わらなかったように見えました。午前中は AI/ML 関係のセッションをなんとなく見ていました。[AI/ML] PythonとSageMakerで始める MLチームのみで完結するAPIの構築事例  武田 研恒さん  やっぱり機械学習エンジニアがサーバーの面倒見るのは無理というかもったいないよね、うんうんと聞いていました。[AI/ML] メディアによるAI活用（時事クイズの生成と高校野球戦評記事の自動生成）  佐渡 昭彦さん  朝日新聞には、ICTRAD（アイシートラッド）と呼ばれる、情報技術本部（技術系）内にある研究開発チームがあるそう。本セッションのような研究や、セキュリティ対策をしているそう。朝日新聞はよく攻撃されるらしい。なるほど。AI で時事クイズを作成。Amazon Comprehend は日本語対応していないので不採用。東大・横国大のオープンソース『専門用語（キーワード）自動抽出システム 』を使って、分かち書きと単語ベクトル化（？）をしているらしい。朝日新聞でも単語ベクトルを公開している。→ 朝日新聞単語ベクトル EC2 1 台で足りているとのこと。ランチタイム めちゃめちゃ混んでいたけどなんとかゲット。種類を選ぶ余裕はなかった。職場の同僚 3 人はゲットできなかったそう。1000 人超もの弁当を用意した運営の方々には頭が下がります。[Container/k8s] GitHub Actionsを使って、ワークフローもプルリクベースで開発しよう！  池田 尚史さんTODO: 資料が公開されたらここに貼る[2019-02-11-1] に自作の GitHub Action を GitHub Marketplace に公開したばかりなので、聞いてみました。","link":"https://masutaka.net/2019-02-24-1/","isoDate":"2019-02-24T00:00:00.000Z","dateMiliSeconds":1550966400000,"authorName":"masutaka"},{"title":"『経清記』を読んだ","content":"1993年（平成5年）の作品。\nAmazon でずっと￥10,000くらいだったけど、急に安くなった（￥1,724）ので条件反射で買った。そこから1年3ヶ月経ってしまったが、ちょうど今日読み終わった。\n※ 今 Amazon で値段見たら￥43,611だった。マジか&hellip;\n『経清記』というタイトルではあるが、中身は「経清記」と「清衡伝」に分かれている。\n「経清記」は1988年（昭和63年）の作品で、「清衡伝」はこの本のための書き下ろしとのこと。\n 「記」だの「伝」だのと題名をつけたのは作者の都合であって決して伝記小説という意味ではない\n という筆者のあとがきにあるとおり、あくまで時代小説。\n経清と清衡がきれいに書かれすぎのような気もするが、奥六郡（陸奥）に思いを馳せられることには変わりはない（大げさ）。高橋克彦氏の『炎立つ 』との違いも興味深い。\n残念ながら『炎立つ』はすでに手放してしまった。でも [2009-11-30-1] の『奥州藤原氏物語』と『NHK 大河ドラマの炎立つ 』の録画は手元にあるので、大事にしていきたい。","contentSnippet":"1993年（平成5年）の作品。Amazon でずっと￥10,000くらいだったけど、急に安くなった（￥1,724）ので条件反射で買った。そこから1年3ヶ月経ってしまったが、ちょうど今日読み終わった。※ 今 Amazon で値段見たら￥43,611だった。マジか…『経清記』というタイトルではあるが、中身は「経清記」と「清衡伝」に分かれている。「経清記」は1988年（昭和63年）の作品で、「清衡伝」はこの本のための書き下ろしとのこと。 「記」だの「伝」だのと題名をつけたのは作者の都合であって決して伝記小説という意味ではない という筆者のあとがきにあるとおり、あくまで時代小説。経清と清衡がきれいに書かれすぎのような気もするが、奥六郡（陸奥）に思いを馳せられることには変わりはない（大げさ）。高橋克彦氏の『炎立つ 』との違いも興味深い。残念ながら『炎立つ』はすでに手放してしまった。でも [2009-11-30-1] の『奥州藤原氏物語』と『NHK 大河ドラマの炎立つ 』の録画は手元にあるので、大事にしていきたい。","link":"https://masutaka.net/2019-02-18-1/","isoDate":"2019-02-18T00:00:00.000Z","dateMiliSeconds":1550448000000,"authorName":"masutaka"},{"title":"『入門 監視』を読んだ","content":"個人的に一番評価できるポイントは、そのボリュームでした。\nこの本は 200 ページほどしかなく、各章も 10~20 ページ程度なので、スプリント方式で勢いで読めました。\n監視に興味があれば読むと良いでしょう。そこまで興味はないが気になる人は、読んだ人から話を聞くと良いと思います。\n全部が全部必要な情報ではないので（例えば 9 章の SNMP を扱う人は少ないと思う）、一旦ザーッと流し読みして、気になったところを後で読み返したり、より専門的な本を読むとかすると良いかも。\n本から少し脱線しますが一点だけ。\nP10「1.2 アンチパターン２：役割としての監視」の中で &ldquo;オペレーションチームだけでなく全員が本番環境に責任を持つ&rdquo; という話が出ており、非常にもっともですが、そのような文化を作ることはなかなか難しいと思います。\nうちの会社ではどのチームもこのような Slack のリマインダーを流しており、メトリクスを毎日見る文化が根付いています。\n※ Heroku 使っている都合もあって、URL が多くなってしまっている。集約させたい。\nアラートが出る以前の普段と違うメトリクスの変化や、アラートに関連したメトリクスの把握、そもそもどんなメトリクスを収集しているかの学習にもなるので、オススメです。\n実際、全員がメトリクスを見ているわけではありませんが、「毎日何を見ているのか」という共有は大事だと思っていて、情報の非対称性が少しは解消されると思います。\nしばらくスプリントミーティングなどで共有の場を設定し、それと並行してこのようなリマインダーを仕掛けると習慣が根付きやすいかもしれません。\n以下、読書メモです。\n1章 監視のアンチパターン 振る舞いを監視することが大事。OS のメトリクスの監視はプライベートメソッドのテストとよく似ていると思った。\n※ レガシーコードや特別な理由を除いて「プライベートメソッドのテストは書かない」ということは、2013 年に決着がついている。\nプライベートメソッドのユニットテストは書かないもの？ - QA@IT 3章　アラート、オンコール、インシデント管理 &ldquo;アラートにメールを使うのをやめよう&rdquo;\nそれな。\nそういえば以前、こんな記事を書いた。\nソーシャルPLUSで 1 日 700 通超のアラートメールを撲滅したお話｜feedforce Engineers&rsquo; blog 今は全て Slack に送ってしまっているので、なんとかしたい。\nローテーションなあ&hellip;。365 日全員で対応している状況。幸いにもそこまでアラートは多くないが、バーンアウトの危険性はある。\n頻度の多いアラートで、調査に着手し始めたとかなら、閾値を下げるなど検討したほうが良いと思った。\nP35\n・現場指揮官\n・スクライブ（書記官）\n・コミュニケーションの調整役\n・SME（実際にインシデント対応する人）\n振り返り（postmortem）大事。会社では大きなインシデントのあとに振り返る文化が根付きつつある。\n4章　統計入門 たったの 10 ページにまとまっており、非常に良かった。\n5章　ビジネスを監視する Redash での可視化やアラートの設定など、もう少し詰めようと思った。","contentSnippet":"個人的に一番評価できるポイントは、そのボリュームでした。この本は 200 ページほどしかなく、各章も 10~20 ページ程度なので、スプリント方式で勢いで読めました。監視に興味があれば読むと良いでしょう。そこまで興味はないが気になる人は、読んだ人から話を聞くと良いと思います。全部が全部必要な情報ではないので（例えば 9 章の SNMP を扱う人は少ないと思う）、一旦ザーッと流し読みして、気になったところを後で読み返したり、より専門的な本を読むとかすると良いかも。本から少し脱線しますが一点だけ。P10「1.2 アンチパターン２：役割としての監視」の中で “オペレーションチームだけでなく全員が本番環境に責任を持つ” という話が出ており、非常にもっともですが、そのような文化を作ることはなかなか難しいと思います。うちの会社ではどのチームもこのような Slack のリマインダーを流しており、メトリクスを毎日見る文化が根付いています。※ Heroku 使っている都合もあって、URL が多くなってしまっている。集約させたい。アラートが出る以前の普段と違うメトリクスの変化や、アラートに関連したメトリクスの把握、そもそもどんなメトリクスを収集しているかの学習にもなるので、オススメです。実際、全員がメトリクスを見ているわけではありませんが、「毎日何を見ているのか」という共有は大事だと思っていて、情報の非対称性が少しは解消されると思います。しばらくスプリントミーティングなどで共有の場を設定し、それと並行してこのようなリマインダーを仕掛けると習慣が根付きやすいかもしれません。以下、読書メモです。1章 監視のアンチパターン 振る舞いを監視することが大事。OS のメトリクスの監視はプライベートメソッドのテストとよく似ていると思った。※ レガシーコードや特別な理由を除いて「プライベートメソッドのテストは書かない」ということは、2013 年に決着がついている。プライベートメソッドのユニットテストは書かないもの？ - QA@IT 3章　アラート、オンコール、インシデント管理 “アラートにメールを使うのをやめよう”それな。そういえば以前、こんな記事を書いた。ソーシャルPLUSで 1 日 700 通超のアラートメールを撲滅したお話｜feedforce Engineers’ blog 今は全て Slack に送ってしまっているので、なんとかしたい。ローテーションなあ…。365 日全員で対応している状況。幸いにもそこまでアラートは多くないが、バーンアウトの危険性はある。頻度の多いアラートで、調査に着手し始めたとかなら、閾値を下げるなど検討したほうが良いと思った。P35・現場指揮官・スクライブ（書記官）・コミュニケーションの調整役・SME（実際にインシデント対応する人）振り返り（postmortem）大事。会社では大きなインシデントのあとに振り返る文化が根付きつつある。4章　統計入門 たったの 10 ページにまとまっており、非常に良かった。5章　ビジネスを監視する Redash での可視化やアラートの設定など、もう少し詰めようと思った。","link":"https://masutaka.net/2019-02-17-1/","isoDate":"2019-02-17T00:00:00.000Z","dateMiliSeconds":1550361600000,"authorName":"masutaka"},{"title":"自作の GitHub Action を GitHub Marketplace に公開してみた","content":"追記(2019-09-23):\n⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。\n 先日 [2019-02-03-1] 作った GitHub Action のリポジトリページにこんな表示が出てました。\nhttps://github.com/masutaka/github-actions-all-in-one-project こちらのドキュメント によると、リポジトリの Release ページ から公開できるとのこと。\n全部グリーンになるように、Icon や Color などを直しました 。あとは普通にリリース。\nあっさりとリリースできました！\nhttps://github.com/marketplace/actions/all-in-one-project Marketplace の目立つところに表示！\nされていたのですが、ちょうど週末 Marketplace がリニューアルしたようで、最後のページ に移動されていました。まあいいか&hellip;。\n現在は https://github.com/masutaka/github-actions-all-in-one-project にアクセスすると、こんなメッセージが表示されています。ここの &ldquo;View on Marketplace&rdquo; から Marketplace の当該ページに飛ばされて、インストール出来る流れになっているようです。\nとは言え、結構大味な流れなので、README.md を読んで導入したほうが良いと思います。[2019-02-03-1] もどうぞ。\n追記(2019-02-12):\nGitHub Action の beta に申し込んでないと、上の Marketplace のページは全部見られないことを知りました。びっくり。https://github.com/features/actions から申し込めます。","contentSnippet":"追記(2019-09-23):⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。 先日 [2019-02-03-1] 作った GitHub Action のリポジトリページにこんな表示が出てました。https://github.com/masutaka/github-actions-all-in-one-project こちらのドキュメント によると、リポジトリの Release ページ から公開できるとのこと。全部グリーンになるように、Icon や Color などを直しました 。あとは普通にリリース。あっさりとリリースできました！https://github.com/marketplace/actions/all-in-one-project Marketplace の目立つところに表示！されていたのですが、ちょうど週末 Marketplace がリニューアルしたようで、最後のページ に移動されていました。まあいいか…。現在は https://github.com/masutaka/github-actions-all-in-one-project にアクセスすると、こんなメッセージが表示されています。ここの “View on Marketplace” から Marketplace の当該ページに飛ばされて、インストール出来る流れになっているようです。とは言え、結構大味な流れなので、README.md を読んで導入したほうが良いと思います。[2019-02-03-1] もどうぞ。追記(2019-02-12):GitHub Action の beta に申し込んでないと、上の Marketplace のページは全部見られないことを知りました。びっくり。https://github.com/features/actions から申し込めます。","link":"https://masutaka.net/2019-02-11-1/","isoDate":"2019-02-11T00:00:00.000Z","dateMiliSeconds":1549843200000,"authorName":"masutaka"},{"title":"Issue や PR を作ったら自動的に GitHub Project に追加する GitHub Action を作ってみた","content":"追記(2019-09-23):\n⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。\n  Issue や Pullrequest を作ったら、GitHub Project に自動追加なんてことができそうですね。\n と [2019-01-28-1] に書いたので作ってみました。\n  この GitHub Action を使ったサンプルリポジトリが https://github.com/masutaka/sandbox-github-actions です。\nIssue や PR を作ると GitHub Actions Trial part2 Project の To do または In progress カラムに自動的に追加されます。Fork 先からの PR でも同様です。Actions タブ で確認できますが、私以外は見られないのかな？\n設定方法は簡単で、.github/main.workflow に以下を追加するだけです（GitHub Actions はまだ beta 版なので、このページ から Sign up しておく必要はあります）。\n PROJECT_URL と INITIAL_COLUMN_NAME は必須です。GITHUB_TOKEN はリポジトリに紐付いた token が自動的に使われます。詳しくはドキュメント をどうぞ。","contentSnippet":"追記(2019-09-23):⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。  Issue や Pullrequest を作ったら、GitHub Project に自動追加なんてことができそうですね。 と [2019-01-28-1] に書いたので作ってみました。  この GitHub Action を使ったサンプルリポジトリが https://github.com/masutaka/sandbox-github-actions です。Issue や PR を作ると GitHub Actions Trial part2 Project の To do または In progress カラムに自動的に追加されます。Fork 先からの PR でも同様です。Actions タブ で確認できますが、私以外は見られないのかな？設定方法は簡単で、.github/main.workflow に以下を追加するだけです（GitHub Actions はまだ beta 版なので、このページ から Sign up しておく必要はあります）。 PROJECT_URL と INITIAL_COLUMN_NAME は必須です。GITHUB_TOKEN はリポジトリに紐付いた token が自動的に使われます。詳しくはドキュメント をどうぞ。","link":"https://masutaka.net/2019-02-03-1/","isoDate":"2019-02-03T00:00:00.000Z","dateMiliSeconds":1549152000000,"authorName":"masutaka"},{"title":"このブログの CI を GitHub Actions にしてみた","content":"追記(2019-09-23):\n⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。\n  このブログの CI には割高なので、CircleCI あたりに乗り換える予定です。\n と [2019-01-27-1] で書いたばかりですが、舌の根も乾かぬうちに GitHub Actions に移行してみました。\n料金はさておき、たまたまクラスメソッドさんの記事 を見て移行出来そうだったことと、GitHub Actions は一度素振りしてみたかったからです。\nGitHub Actions とは CircleCI の Workflows と非常に良く似た機能で、Pipeline を組んで CI を実行することが出来ます。\n現在はまだベータです。https://github.com/features/actions からリクエストすれば使えます。複数 Action 同時実行とか凝ったことはできないようです。時間がかかりすぎる Action も避けたほうが良いかも。\nAction は自分で作ることも出来ますし、以下のような公開 Action を使うことも出来るようです。\n https://github.com/actions  https://github.com/hashicorp/terraform-github-actions   日本語記事: GitHub Actions： みなさんが開発し、GitHubで実行 - The GitHub Blog - Japan Heroku CI よりもハマりどころはありますが、作り方はとてもシンプルです。\n .github/main.workflow を作り、workflow と action を定義する 各 action に紐付いた Dockerfile を作る、または参照する  今回の実装 ファイル構成と実装はこんな感じです。","contentSnippet":"追記(2019-09-23):⚠️ この記事の GitHub Actions は HCL 記法を使う古い方法です。現在は YAML 記法に変わりました。参考にしないで下さい。  このブログの CI には割高なので、CircleCI あたりに乗り換える予定です。 と [2019-01-27-1] で書いたばかりですが、舌の根も乾かぬうちに GitHub Actions に移行してみました。料金はさておき、たまたまクラスメソッドさんの記事 を見て移行出来そうだったことと、GitHub Actions は一度素振りしてみたかったからです。GitHub Actions とは CircleCI の Workflows と非常に良く似た機能で、Pipeline を組んで CI を実行することが出来ます。現在はまだベータです。https://github.com/features/actions からリクエストすれば使えます。複数 Action 同時実行とか凝ったことはできないようです。時間がかかりすぎる Action も避けたほうが良いかも。Action は自分で作ることも出来ますし、以下のような公開 Action を使うことも出来るようです。 https://github.com/actions  https://github.com/hashicorp/terraform-github-actions   日本語記事: GitHub Actions： みなさんが開発し、GitHubで実行 - The GitHub Blog - Japan Heroku CI よりもハマりどころはありますが、作り方はとてもシンプルです。 .github/main.workflow を作り、workflow と action を定義する 各 action に紐付いた Dockerfile を作る、または参照する  今回の実装 ファイル構成と実装はこんな感じです。","link":"https://masutaka.net/2019-01-28-1/","isoDate":"2019-01-28T00:00:00.000Z","dateMiliSeconds":1548633600000,"authorName":"masutaka"},{"title":"このブログの CI を Heroku CI にしてみた","content":"[2019-01-19-1] で Heroku の Hobby Dyno ($7/mo) を使い始めたので、Heroku CI も導入してみました。\nやり方はこのとおり簡単です。\n pipeline を作成し、app と紐付ける Heroku CI を有効にし、GitHub とも連携する app.json を作成する  1. pipeline を作成し、App と紐付ける Heroku Dev Center &gt; Pipelines を参考にして作るだけです。\n2. Heroku CI を有効にし、GitHub とも連携する pipeline 右上の Enable CI ボタンをクリックすると有効になります。\n3. app.json を作成する 今回は hadolint で Dockerfile を、shellcheck でシェルスクリプトの lint をするだけのテストを書きました。\nこのような素朴な設定で動きます。\n test-setup と test のコンテキストは同じで、例えば test-setup で作ったファイルは test でも使えます。あと、App の環境変数も参照できますし、テスト用の環境変数を app.json に追加することも出来ます。\nデフォルトでは Performance-M Dyno が使われます。Parallel Test も出来るらしいです。","contentSnippet":"[2019-01-19-1] で Heroku の Hobby Dyno ($7/mo) を使い始めたので、Heroku CI も導入してみました。やり方はこのとおり簡単です。 pipeline を作成し、app と紐付ける Heroku CI を有効にし、GitHub とも連携する app.json を作成する  1. pipeline を作成し、App と紐付ける Heroku Dev Center > Pipelines を参考にして作るだけです。2. Heroku CI を有効にし、GitHub とも連携する pipeline 右上の Enable CI ボタンをクリックすると有効になります。3. app.json を作成する 今回は hadolint で Dockerfile を、shellcheck でシェルスクリプトの lint をするだけのテストを書きました。このような素朴な設定で動きます。 test-setup と test のコンテキストは同じで、例えば test-setup で作ったファイルは test でも使えます。あと、App の環境変数も参照できますし、テスト用の環境変数を app.json に追加することも出来ます。デフォルトでは Performance-M Dyno が使われます。Parallel Test も出来るらしいです。","link":"https://masutaka.net/2019-01-27-1/","isoDate":"2019-01-27T00:00:00.000Z","dateMiliSeconds":1548547200000,"authorName":"masutaka"},{"title":"Heroku にデプロイした時、Pushover を使って通知する","content":"個人の通知ツールとして、Pushover を愛用しています。[2015-03-08-1] でも紹介してます。\n GitHub の自分のリポジトリにスターが付いたら通知 Pushover gem を使った、若干複雑なケースのデプロイ通知 Heroku にデプロイしたら通知  今まで Heroku のデプロイ通知は Heroku Deploy Hooks の Email に Pushover の E-mail Gateway を指定して出来ていましたが、Heroku Deploy Hooks の Email は 2018 年 5 月に Deprecate になっていました 。\n仕方がないので、Heroku Deploy Hooks の HTTP post hook で通知する方法を調べました。\nデプロイ成功の通知方法 結論から書くと、GET パラメータっぽくダラダラと書けば通知出来ました。\n（なぜか通知されなくて一人ハマってましたが&hellip; ）\n以下は改行と半角スペースを入れて読みやすくしたものです。各パラメータは url encode が必要です。\nhttps://api.pushover.net/1/messages.json ? user=&lt;YOUR USER/GROUP KEY&gt; &amp; token=&lt;YOUR APPLICATION API TOKEN&gt; &amp; device=iPhone &amp; priority=0 &amp; title=masutaka.","contentSnippet":"個人の通知ツールとして、Pushover を愛用しています。[2015-03-08-1] でも紹介してます。 GitHub の自分のリポジトリにスターが付いたら通知 Pushover gem を使った、若干複雑なケースのデプロイ通知 Heroku にデプロイしたら通知  今まで Heroku のデプロイ通知は Heroku Deploy Hooks の Email に Pushover の E-mail Gateway を指定して出来ていましたが、Heroku Deploy Hooks の Email は 2018 年 5 月に Deprecate になっていました 。仕方がないので、Heroku Deploy Hooks の HTTP post hook で通知する方法を調べました。デプロイ成功の通知方法 結論から書くと、GET パラメータっぽくダラダラと書けば通知出来ました。（なぜか通知されなくて一人ハマってましたが… ）以下は改行と半角スペースを入れて読みやすくしたものです。各パラメータは url encode が必要です。https://api.pushover.net/1/messages.json ? user=<YOUR USER/GROUP KEY> & token=<YOUR APPLICATION API TOKEN> & device=iPhone & priority=0 & title=masutaka.","link":"https://masutaka.net/2019-01-20-1/","isoDate":"2019-01-20T00:00:00.000Z","dateMiliSeconds":1547942400000,"authorName":"masutaka"},{"title":"このブログを『さくらのVPS』から『CloudFront+Heroku』に移した","content":"ここ一年半くらい、このブログが乗っていたサーバをメンテンスしていませんでした。４月に Ubuntu 14.04 LTS が EOL になることと、サーバの面倒をみることに疲れてしまったので、このブログを CloudFront+Heroku に移しました。\nさくらのVPSに引っ越したのは [2013-05-27-2] だったので、５年半くらい使っていたことになります。このブログ自体は静的コンテンツですが、nginx のログを fluentd に流したり、各種メトリクスを kibana や GrowthForecast で可視化したり、ちょっとしたアプリケーションを動かしたり、いろいろ実験や素振りをすることが出来ました。今までありがとう。\nさて、引っ越し前後の環境の変化です。\n引っ越し前（さくらのVPS ）          仮想サーバのプラン 2G、石狩リージョン、年額 18,770 円   ドメイン さくらのドメイン、年額 1,852 円   OS Ubuntu 14.04 LTS   構成管理 knife-solo   デプロイ方法 GitHub の master ブランチに push すると、CircleCI 上で capistrano が自動デプロイ   ビルド方法 capistrano でのデプロイ時に chalow が CHANGELOG メモを HTML に変換   配信方法 静的な HTML ファイルを nginx が配信    引っ越し後（CloudFront + Heroku ）          Dyno Type Hobby、年額 $7 x 12 = $84 ≒ 9,554 円   ドメイン AWS Route53、年額 $12 + ($0.","contentSnippet":"ここ一年半くらい、このブログが乗っていたサーバをメンテンスしていませんでした。４月に Ubuntu 14.04 LTS が EOL になることと、サーバの面倒をみることに疲れてしまったので、このブログを CloudFront+Heroku に移しました。さくらのVPSに引っ越したのは [2013-05-27-2] だったので、５年半くらい使っていたことになります。このブログ自体は静的コンテンツですが、nginx のログを fluentd に流したり、各種メトリクスを kibana や GrowthForecast で可視化したり、ちょっとしたアプリケーションを動かしたり、いろいろ実験や素振りをすることが出来ました。今までありがとう。さて、引っ越し前後の環境の変化です。引っ越し前（さくらのVPS ）          仮想サーバのプラン 2G、石狩リージョン、年額 18,770 円   ドメイン さくらのドメイン、年額 1,852 円   OS Ubuntu 14.04 LTS   構成管理 knife-solo   デプロイ方法 GitHub の master ブランチに push すると、CircleCI 上で capistrano が自動デプロイ   ビルド方法 capistrano でのデプロイ時に chalow が CHANGELOG メモを HTML に変換   配信方法 静的な HTML ファイルを nginx が配信    引っ越し後（CloudFront + Heroku ）          Dyno Type Hobby、年額 $7 x 12 = $84 ≒ 9,554 円   ドメイン AWS Route53、年額 $12 + ($0.","link":"https://masutaka.net/2019-01-19-1/","isoDate":"2019-01-19T00:00:00.000Z","dateMiliSeconds":1547856000000,"authorName":"masutaka"},{"title":"最新の iPad（第6世代）を買った","content":"2012 年 3 月に買った母の iPad の動作が非常に重たくなってきたので、ノープランで iPad を買った。\nどうやら第3世代 から第6世代 にアップデートされた形になったようだ。\n以前の容量は当時最大の 64GB だったが、全く必要ないようだったので 32GB に減らした。というか、32GB か 128GB の選択肢で悩んだ結果の答え。128GB は流石に多すぎる。\n画面サイズは当時も今も 9.7 インチ。\nなぜ突然買ったのか iPad の動作が重いのは夏に帰省した時に知っていたが、今回どうするかは特に考えていなかった。\nそれとは別に以前からパスワードの使い回しが気になっており、1Password をファミリープランにして、アプリを入れてとかやっていたら、iPad 自体もどうにかしたくなってきた。\n母の使い方を見ていたら、Youtube 見たり、オセロやったり、星座アプリを使ったりと、ヘビーな使い方はしていない様子。初めは私の ZenPad [2016-11-01-1] を母に下げようと移行作業をやり始めた。\n母のスマホは iPhone SE なので、写真連携は iPhone にも Google フォトアプリを入れるとして、リマインダーどうしよう？メモはどうにかなったっけ？とか考えていてたら、母が運用するのは無理だと悟り、iPad を買うことに決めた。それも今すぐに。\nこの辺りの決断は、相変わらず思い切りが良い。\nどの iPad を買えばよいか ネットで調べたところ、最新の iPad は第6世代で、評判は良いみたいだった。発売は 2018 年 3 月で、MacRumors 的には Caution だった けど、今欲しいので問題ないと判断した。\n他の選択肢として、iPad Pro はオーバースペック、iPad mini は母には画面サイズが小さいようだった。\n判断したは良いが、浜松には Apple Store は存在しない。ビックカメラ浜松店が正規サービスプロバイダという役割らしい。\nただ、そのビックカメラに行ったら品切れ、ヤマダ電機も同じで、3 件目のケーズデンキでようやく買うことが出来た。\n家でしか使わないので、AppleCare+ は購入しなかった。","contentSnippet":"2012 年 3 月に買った母の iPad の動作が非常に重たくなってきたので、ノープランで iPad を買った。どうやら第3世代 から第6世代 にアップデートされた形になったようだ。以前の容量は当時最大の 64GB だったが、全く必要ないようだったので 32GB に減らした。というか、32GB か 128GB の選択肢で悩んだ結果の答え。128GB は流石に多すぎる。画面サイズは当時も今も 9.7 インチ。なぜ突然買ったのか iPad の動作が重いのは夏に帰省した時に知っていたが、今回どうするかは特に考えていなかった。それとは別に以前からパスワードの使い回しが気になっており、1Password をファミリープランにして、アプリを入れてとかやっていたら、iPad 自体もどうにかしたくなってきた。母の使い方を見ていたら、Youtube 見たり、オセロやったり、星座アプリを使ったりと、ヘビーな使い方はしていない様子。初めは私の ZenPad [2016-11-01-1] を母に下げようと移行作業をやり始めた。母のスマホは iPhone SE なので、写真連携は iPhone にも Google フォトアプリを入れるとして、リマインダーどうしよう？メモはどうにかなったっけ？とか考えていてたら、母が運用するのは無理だと悟り、iPad を買うことに決めた。それも今すぐに。この辺りの決断は、相変わらず思い切りが良い。どの iPad を買えばよいか ネットで調べたところ、最新の iPad は第6世代で、評判は良いみたいだった。発売は 2018 年 3 月で、MacRumors 的には Caution だった けど、今欲しいので問題ないと判断した。他の選択肢として、iPad Pro はオーバースペック、iPad mini は母には画面サイズが小さいようだった。判断したは良いが、浜松には Apple Store は存在しない。ビックカメラ浜松店が正規サービスプロバイダという役割らしい。ただ、そのビックカメラに行ったら品切れ、ヤマダ電機も同じで、3 件目のケーズデンキでようやく買うことが出来た。家でしか使わないので、AppleCare+ は購入しなかった。","link":"https://masutaka.net/2019-01-03-1/","isoDate":"2019-01-03T00:00:00.000Z","dateMiliSeconds":1546473600000,"authorName":"masutaka"},{"title":"『どもる体』を読んだ","content":"しばらく前に読み終わった。\nここ数年、言葉を発しづらいことがある。言葉は思い浮かんでいるけど、口から出てこなかったり、ろれつが回らなかったりする。悩んでいると言うよりも不便で困っている。\n一度気になって東大病院で MRI 検査を受けたこともあったっけ。結果は異常なし。\n仕事で疲れた夕方や、酒を飲んだときに、発しづらくなる気がする。逆に元気いっぱいの午前中は、非常に滑舌が良い。リラックスしている時も問題がないことが多い。\nそんな中で HONZ の記事 で目にしたのがこの本を買ったきっかけ。\nHONZ は私がフィードリーダーで購読している、数少ない技術系以外のサイト。時々面白そうな本が見つかるので重宝している。もっとも今回のように実際に買うことは少なくて、書評で読んだ気になることがほとんど。ふと傍らに目をやると積ん読となった技術書達が。うっ、頭が・・・！\n話が脱線した。\nこの本はどもり（吃音）の原因も解決方法も提示しない。あくまで観察するだけ。\nそもそも私の場合、吃音であること自体はっきりしなかったが、この本を読んで典型的な吃音だと理解した。気が向いたら医者にかかるかもしれない。\n吃音というと一般的には、「わわわわ私は」のような「連発」をイメージすることが多いと思う。\n私は症状としてはあるけど、あまり困ってはいなかった。喋れないわけではないし、幸いにもバカにする人がいる環境でもない。ちなみにこの本を読んだ後、改めて周囲を観察してみたら、頻度の多い少ないはあるにせよ、連発する人は意外にいるなと思った。\n一番困るのが「難発」。「・・・・」のように、「私は」などが出てこないので、変な雰囲気になる。\n仕方がないので「言い換え」を試みるわけだが、代わりの単語が出てこないことは多いし、微妙にニュアンスが変わることもある。酒を飲んでいると頭がまわらないので、特に代わりの単語が出てこない。\n酒で思い出したが、飲み会の時などに面白いことを思いついて、タイミングを計って喋ろうとした時も、難発が出て言えない時がある。\n吃音は「言葉の代わりに体が伝わってしまう」ことらしいが、難発の時は体が硬直するのがよく分かる。\n以上が最初に書いた「不便で困る」ということ。\nどうやら歌っている時や、プレゼンをしている時などは吃音が出ないらしい。最近歌ってないので前者はよく分からないが、後者は多分そう。\n根本原因は、無意識のうちにリラックス出来ていないからかも。自分だけの特殊な問題ではないことが分かったことと、こっそりリズムを刻むなどの回避策はなくはないので、うまく付き合っていこうと思う。","contentSnippet":"しばらく前に読み終わった。ここ数年、言葉を発しづらいことがある。言葉は思い浮かんでいるけど、口から出てこなかったり、ろれつが回らなかったりする。悩んでいると言うよりも不便で困っている。一度気になって東大病院で MRI 検査を受けたこともあったっけ。結果は異常なし。仕事で疲れた夕方や、酒を飲んだときに、発しづらくなる気がする。逆に元気いっぱいの午前中は、非常に滑舌が良い。リラックスしている時も問題がないことが多い。そんな中で HONZ の記事 で目にしたのがこの本を買ったきっかけ。HONZ は私がフィードリーダーで購読している、数少ない技術系以外のサイト。時々面白そうな本が見つかるので重宝している。もっとも今回のように実際に買うことは少なくて、書評で読んだ気になることがほとんど。ふと傍らに目をやると積ん読となった技術書達が。うっ、頭が・・・！話が脱線した。この本はどもり（吃音）の原因も解決方法も提示しない。あくまで観察するだけ。そもそも私の場合、吃音であること自体はっきりしなかったが、この本を読んで典型的な吃音だと理解した。気が向いたら医者にかかるかもしれない。吃音というと一般的には、「わわわわ私は」のような「連発」をイメージすることが多いと思う。私は症状としてはあるけど、あまり困ってはいなかった。喋れないわけではないし、幸いにもバカにする人がいる環境でもない。ちなみにこの本を読んだ後、改めて周囲を観察してみたら、頻度の多い少ないはあるにせよ、連発する人は意外にいるなと思った。一番困るのが「難発」。「・・・・」のように、「私は」などが出てこないので、変な雰囲気になる。仕方がないので「言い換え」を試みるわけだが、代わりの単語が出てこないことは多いし、微妙にニュアンスが変わることもある。酒を飲んでいると頭がまわらないので、特に代わりの単語が出てこない。酒で思い出したが、飲み会の時などに面白いことを思いついて、タイミングを計って喋ろうとした時も、難発が出て言えない時がある。吃音は「言葉の代わりに体が伝わってしまう」ことらしいが、難発の時は体が硬直するのがよく分かる。以上が最初に書いた「不便で困る」ということ。どうやら歌っている時や、プレゼンをしている時などは吃音が出ないらしい。最近歌ってないので前者はよく分からないが、後者は多分そう。根本原因は、無意識のうちにリラックス出来ていないからかも。自分だけの特殊な問題ではないことが分かったことと、こっそりリズムを刻むなどの回避策はなくはないので、うまく付き合っていこうと思う。","link":"https://masutaka.net/2018-12-25-1/","isoDate":"2018-12-25T00:00:00.000Z","dateMiliSeconds":1545696000000,"authorName":"masutaka"},{"title":"Heroku の Slug は友達","content":"この記事は heroku Advent Calendar 2018 の 21 日目の記事です。\n20 日目は @pukka さんの『【Heroku検討者向け】デプロイ方法５選！ 』でした。（４）マニフェストでの heroku.yml の使い方は初めて知りました。デプロイした ところ、heroku18 Stack の Docker Image が使われているようでした。Slug を作る従来の非 Docker デプロイも Docker に寄せられていくのかな？\n今日はそんな Slug に注目した記事をお届けします。\nSlug とは みなさん、Heroku の Slug はご存知でしょうか？\nダッシュボードの Settings タブからサイズを確認できます。\nでもこれしか情報がないのですよね。恥ずかしがり屋さんかな？\nSlug Compiler のドキュメントによると、\n Slugs are compressed and pre-packaged copies of your application optimized for distribution to the dyno manager . When you git push to Heroku, your code is received by the slug compiler which transforms your repository into a slug.","contentSnippet":"この記事は heroku Advent Calendar 2018 の 21 日目の記事です。20 日目は @pukka さんの『【Heroku検討者向け】デプロイ方法５選！ 』でした。（４）マニフェストでの heroku.yml の使い方は初めて知りました。デプロイした ところ、heroku18 Stack の Docker Image が使われているようでした。Slug を作る従来の非 Docker デプロイも Docker に寄せられていくのかな？今日はそんな Slug に注目した記事をお届けします。Slug とは みなさん、Heroku の Slug はご存知でしょうか？ダッシュボードの Settings タブからサイズを確認できます。でもこれしか情報がないのですよね。恥ずかしがり屋さんかな？Slug Compiler のドキュメントによると、 Slugs are compressed and pre-packaged copies of your application optimized for distribution to the dyno manager . When you git push to Heroku, your code is received by the slug compiler which transforms your repository into a slug.","link":"https://masutaka.net/2018-12-21-1/","isoDate":"2018-12-21T00:00:00.000Z","dateMiliSeconds":1545350400000,"authorName":"masutaka"},{"title":"メールフッタのセパレータ \"-- \"","content":"よく &ldquo;&ndash;&rdquo; で区切られれていますが、RFC 3676 的には最後に半角スペースを加えた &ldquo;&ndash; &quot; が正しいです。sig-dashes と呼ぶらしいです。\nhttps://www.ietf.org/rfc/rfc3676.txt  There is a long-standing convention in Usenet news which also commonly appears in Internet mail of using &ldquo;&ndash; &quot; as the separator line between the body and the signature of a message. When generating a Format=Flowed message containing a Usenet-style separator before the signature, the separator line is sent as-is. This is a special case; an (optionally quoted or quoted and stuffed) line consisting of DASH DASH SP is neither fixed nor flowed.","contentSnippet":"よく “–” で区切られれていますが、RFC 3676 的には最後に半角スペースを加えた “– \" が正しいです。sig-dashes と呼ぶらしいです。https://www.ietf.org/rfc/rfc3676.txt  There is a long-standing convention in Usenet news which also commonly appears in Internet mail of using “– \" as the separator line between the body and the signature of a message. When generating a Format=Flowed message containing a Usenet-style separator before the signature, the separator line is sent as-is. This is a special case; an (optionally quoted or quoted and stuffed) line consisting of DASH DASH SP is neither fixed nor flowed.","link":"https://masutaka.net/2018-12-17-2/","isoDate":"2018-12-17T01:00:00.000Z","dateMiliSeconds":1545008400000,"authorName":"masutaka"},{"title":"Heroku と Redash は相性が良いのでは？という話","content":"これは Redash Advent Calendar 2018 の 17 日目の記事です。\n16 日目は @mazamachi さんの『kubernetess の redash か黒魔術』ですが、まだ投稿されていないようですね。今回の記事にも関連するので期待してます。\n1 日目の『2018年12月現在における Redash のはじめかた 』を拝見しました。実際問題、どこに立てれば良いか、悩む方もいらっしゃるのではないでしょうか。今回はその点をまとめていきます。\nRedash をどこに立てれば良いか？ 身も蓋もありませんが、ご自身が一番慣れた Docker の PaaS 上で動かすのが良いと思います。\nAWS EC2 や GCE などの、非 Docker 環境は運用負荷がそれなりに発生するため、避けたほうが良いでしょう。アップグレードでハマったり、ストレージ使用量 100% になるのはあるあるです。\n↓ 公式の How to Upgrade はいつの頃からか、非 Docker 環境でのアップグレード方法が &ldquo;legacy guide&rdquo; になってました。公式でも Docker 推しのようです。\n This instructions are for those who use our new Docker based instance. If you use our older instances (or used the old bootstrap script), check the legacy guide .","contentSnippet":"これは Redash Advent Calendar 2018 の 17 日目の記事です。16 日目は @mazamachi さんの『kubernetess の redash か黒魔術』ですが、まだ投稿されていないようですね。今回の記事にも関連するので期待してます。1 日目の『2018年12月現在における Redash のはじめかた 』を拝見しました。実際問題、どこに立てれば良いか、悩む方もいらっしゃるのではないでしょうか。今回はその点をまとめていきます。Redash をどこに立てれば良いか？ 身も蓋もありませんが、ご自身が一番慣れた Docker の PaaS 上で動かすのが良いと思います。AWS EC2 や GCE などの、非 Docker 環境は運用負荷がそれなりに発生するため、避けたほうが良いでしょう。アップグレードでハマったり、ストレージ使用量 100% になるのはあるあるです。↓ 公式の How to Upgrade はいつの頃からか、非 Docker 環境でのアップグレード方法が “legacy guide” になってました。公式でも Docker 推しのようです。 This instructions are for those who use our new Docker based instance. If you use our older instances (or used the old bootstrap script), check the legacy guide .","link":"https://masutaka.net/2018-12-17-1/","isoDate":"2018-12-17T00:00:00.000Z","dateMiliSeconds":1545004800000,"authorName":"masutaka"},{"title":"BitBar の Heroku plugin はいいぞ","content":"この記事は heroku Advent Calendar 2018 の 13 日目の記事です。\n12 日目もわたくしマスタカの当番で、内容は『Heroku の Preboot 機能を深掘りした 』でした。その気になればドキュメント以上のことを探れることは、Heroku のメリットだと感じています。\n今日は Heroku の BitBar plugin を紹介します。macOS 限定です。\nBitBar とは BitBar - Put anything in your Mac OS X menu bar macOS のメニューバーにこんなものを置けるツールです。例として Homebrew Updates plugin を表示しています。\n標準出力を吐きさえすれば、シェルスクリプトでも Ruby でも言語を問わないのが気楽です。\n↓ ちょっとだけ変更しています。\n--- brew-updates.1h.sh.orig\t2018-12-11 23:42:41.000000000 +0900 +++ brew-updates.1h.sh\t2018-12-11 23:42:25.000000000 +0900 @@ -12,13 +12,13 @@ /usr/local/bin/brew update &gt; /dev/null || exit_with_error; PINNED=$(/usr/local/bin/brew list --pinned); -OUTDATED=$(/usr/local/bin/brew outdated --quiet); +OUTDATED=$(/usr/local/bin/brew outdated --verbose); UPDATES=$(comm -13 &lt;(for X in &#34;${PINNED[@]}&#34;; do echo &#34;${X}&#34;; done) &lt;(for X in &#34;${OUTDATED[@]}&#34;; do echo &#34;${X}&#34;; done)) UPDATE_COUNT=$(echo &#34;$UPDATES&#34; | grep -c &#39;[^[:space:]]&#39;); -echo &#34;↑$UPDATE_COUNT | dropdown=false&#34; +echo &#34;🍺$UPDATE_COUNT | dropdown=false&#34; echo &#34;---&#34;; if [ -n &#34;$UPDATES&#34; ]; then echo &#34;Upgrade all | bash=/usr/local/bin/brew param1=upgrade terminal=false refresh=true&#34; Heroku plugin  Heroku の異常に緩く気づける plugin です。https://status.","contentSnippet":"この記事は heroku Advent Calendar 2018 の 13 日目の記事です。12 日目もわたくしマスタカの当番で、内容は『Heroku の Preboot 機能を深掘りした 』でした。その気になればドキュメント以上のことを探れることは、Heroku のメリットだと感じています。今日は Heroku の BitBar plugin を紹介します。macOS 限定です。BitBar とは BitBar - Put anything in your Mac OS X menu bar macOS のメニューバーにこんなものを置けるツールです。例として Homebrew Updates plugin を表示しています。標準出力を吐きさえすれば、シェルスクリプトでも Ruby でも言語を問わないのが気楽です。↓ ちょっとだけ変更しています。--- brew-updates.1h.sh.orig\t2018-12-11 23:42:41.000000000 +0900 +++ brew-updates.1h.sh\t2018-12-11 23:42:25.000000000 +0900 @@ -12,13 +12,13 @@ /usr/local/bin/brew update > /dev/null || exit_with_error; PINNED=$(/usr/local/bin/brew list --pinned); -OUTDATED=$(/usr/local/bin/brew outdated --quiet); +OUTDATED=$(/usr/local/bin/brew outdated --verbose); UPDATES=$(comm -13 <(for X in \"${PINNED[@]}\"; do echo \"${X}\"; done) <(for X in \"${OUTDATED[@]}\"; do echo \"${X}\"; done)) UPDATE_COUNT=$(echo \"$UPDATES\" | grep -c '[^[:space:]]'); -echo \"↑$UPDATE_COUNT | dropdown=false\" +echo \"🍺$UPDATE_COUNT | dropdown=false\" echo \"---\"; if [ -n \"$UPDATES\" ]; then echo \"Upgrade all | bash=/usr/local/bin/brew param1=upgrade terminal=false refresh=true\" Heroku plugin  Heroku の異常に緩く気づける plugin です。https://status.","link":"https://masutaka.net/2018-12-13-1/","isoDate":"2018-12-13T00:00:00.000Z","dateMiliSeconds":1544659200000,"authorName":"masutaka"},{"title":"Heroku の Preboot 機能を深掘りした","content":"<p>こんにちは <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。</p>\n\n<p>この記事は Heroku Advent Calendar 2018 の 12 日目の記事です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2018%2Fheroku\" title=\"heroku Advent Calendar 2018 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/advent-calendar/2018/heroku\">qiita.com</a></cite></p>\n\n<p>昨日は <a href=\"https://qiita.com/takuchalle\">@takuchalle</a> さんの『<a href=\"https://blog.takuchalle.me/post/2018/12/11/heroku_use_wkhtmltoimage/\">Heroku で wkhtmltoimage を使う方法</a>』でした。似たツールの <a href=\"http://www.paulhammond.org/webkit2png/\">webkit2png</a> は使ったことがあります。webkit2png が動作するのは macOS だけですが、<a href=\"https://wkhtmltopdf.org/\">wkhtmltoimage</a> は Windows と Linux でも動作するのですね。へぇー。</p>\n\n<p>先月、Heroku の Preboot 機能を調べる機会がありました。Web 上の日本語記事は Preboot が GA になった 2014 年頃の情報が多く、若干情報が古かったため、2018 年時点の最新の情報をまとめます。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Preboot-機能とは何か\">Preboot 機能とは何か</a></li>\n    <li><a href=\"#どのように有効にするのか\">どのように有効にするのか</a></li>\n    <li><a href=\"#使用する-Procfile\">使用する Procfile</a></li>\n    <li><a href=\"#デプロイによる-heroku-ps-の変化\">デプロイによる heroku ps の変化</a></li>\n    <li><a href=\"#デプロイ時の挙動\">デプロイ時の挙動</a></li>\n    <li><a href=\"#デプロイ時のログ\">デプロイ時のログ</a></li>\n    <li><a href=\"#再起動時の挙動\">再起動時の挙動</a></li>\n    <li><a href=\"#再起動時のログ\">再起動時のログ</a><ul>\n            <li><a href=\"#Web-dyno-1-台目\">Web dyno 1 台目</a></li>\n            <li><a href=\"#Web-dyno-2-台目\">Web dyno 2 台目</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#注意事項\">注意事項</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"Preboot-機能とは何か\">Preboot 機能とは何か</h2>\n\n<p><a href=\"https://devcenter.heroku.com/articles/production-check#dyno-redundancy\">Production Check > Dyno redundancy</a> に書いてあるとおり、Heroku では冗長性確保のため、本番環境の Web Dyno は 2 台以上が奨励されています。</p>\n\n<blockquote><p>Running at least 2 web dynos for any mission-critical app increases the probability that the app will remain available during a catastrophic event. Multiple dynos are also more likely to run on different physical infrastructure (for example, separate AWS Availability Zones), further increasing redundancy.</p></blockquote>\n\n<p>ただし、それだけだとデプロイや 1 日 1 回の自動再起動で、処理の遅延（<a href=\"https://devcenter.heroku.com/articles/error-codes#h27-client-request-interrupted\">H27 - Client Request Interrupted</a>）や <a href=\"https://devcenter.heroku.com/articles/error-codes#h28-client-connection-idle\">H28 - Client Connection Idle</a> が発生することがあります。</p>\n\n<p>以下のグラフは Dyno Restart のタイミングで H27 と H28 Error が発生している様子です。このグラフはダッシュボードの Metrics から確認できます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181210/20181210191451.png\" alt=\"f:id:masutaka26:20181210191451p:plain\" title=\"f:id:masutaka26:20181210191451p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>これを回避できるのが <a href=\"https://devcenter.heroku.com/articles/preboot\">Preboot</a> 機能です。</p>\n\n<h2 id=\"どのように有効にするのか\">どのように有効にするのか</h2>\n\n<p>Heroku CLI で有効にできます。</p>\n\n<pre class=\"code console\" data-lang=\"console\" data-unlink>$ heroku features:enable preboot -a YOUR_APP_NAME</pre>\n\n\n<p>有効になりました。簡単ですね。</p>\n\n<pre class=\"code console\" data-lang=\"console\" data-unlink>$ heroku features:info preboot -a YOUR_APP_NAME\n=== preboot\nDescription: Provide seamless web dyno deploys [general]\nDocs:        https://devcenter.heroku.com/articles/preboot\nEnabled:     true</pre>\n\n\n<h2 id=\"使用する-Procfile\">使用する Procfile</h2>\n\n<p>今回はこの Procfile を使います。</p>\n\n<pre class=\"code lang-apache\" data-lang=\"apache\" data-unlink>release: bin/rails <span class=\"synConstant\">db</span>:migrate <span class=\"synConstant\">db</span>:seed\n\n<span class=\"synComment\"># Web app</span>\nweb: bin/rails s -p $PORT -e $RAILS_ENV\nworker: PROCESS_TYPE=worker bundle exec sidekiq -C config/sidekiq.yml\n\n<span class=\"synComment\"># Ad app</span>\nad_worker: PROCESS_TYPE=ad_worker bundle exec sidekiq -C config/sidekiq.yml\n</pre>\n\n\n<p><code>web</code>, <code>worker</code>, <code>ad_worker</code> という 3 つの process type を定義しています。今回注目する process type は <code>web</code> だけです。</p>\n\n<p>1 行目で <code>release</code> も定義しているため、デプロイ時には One-Off Dyno<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> で release 処理をしたあと、生成した Slug が Dyno に展開されていきます。</p>\n\n<h2 id=\"デプロイによる-heroku-ps-の変化\">デプロイによる heroku ps の変化</h2>\n\n<p>それでは <code>$ watch 'heroku ps -a YOUR_APP_NAME'</code> しつつ、デプロイの様子を観察していきましょう。macOS では watch コマンドは <code>$ brew install watch</code> 等でインストール出来ます。</p>\n\n<p>Web Dyno 1 台の場合、release Dyno の実行が終わると、web.1 Dyno のステータスが up → starting → up と変化します。starting 中にリクエストがあると、クライアントは待たされ、前述の H27 や H28 Error が発生します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 1 台でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131034.gif\" alt=\"f:id:masutaka26:20181211131034g:plain\" title=\"f:id:masutaka26:20181211131034g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 1 台でデプロイした様子</figcaption></figure></p>\n\n<p>Web Dyno 2 台かつ Preboot 無効でも、基本的に同じです。2 台同時に up → starting → up と変化します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 2 台かつ Preboot 無効でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211131128.gif\" alt=\"f:id:masutaka26:20181211131128g:plain\" title=\"f:id:masutaka26:20181211131128g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 2 台かつ Preboot 無効でデプロイした様子</figcaption></figure></p>\n\n<p>Web Dyno 2 台かつ Preboot を有効にすると、期待した通り、1 台ずつ up → starting → up に<strong>なりませんでした・・・！あれ？</strong></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Web Dyno 2 台かつ Preboot 有効でデプロイした様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181211/20181211133556.gif\" alt=\"f:id:masutaka26:20181211133556g:plain\" title=\"f:id:masutaka26:20181211133556g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Web Dyno 2 台かつ Preboot 有効でデプロイした様子</figcaption></figure></p>\n\n<blockquote><ul>\n<li>Logs will show new dynos starting soon after the slug compile is finished. The output of <code>heroku ps</code> will immediately show the state (for example, <code>starting</code> or <code>up</code>) of the new dynos. Old dynos are still running but won’t appear in <code>heroku ps</code>.</li>\n</ul>\n</blockquote>\n\n<p><a href=\"https://devcenter.heroku.com/articles/preboot\">Preboot のドキュメント</a>によると、heroku ps では確認できないようです。ただしログでは確認できるそう。</p>\n\n<h2 id=\"デプロイ時の挙動\">デプロイ時の挙動</h2>\n\n<blockquote><ul>\n<li>Approximately 3 minutes after the deploy completes (or 2 minutes after your app’s boot timeout limit, which defaults to 1 minute), HTTP requests will start routing to the new dynos and simultaneously stop routing to the old dynos.</li>\n</ul>\n</blockquote>\n\n<p>遅くともデプロイ完了から約 3 分後、もしくはアプリケーションの起動タイムアウトリミット 2 分（デフォルトは 1 分）後、HTTP リクエストは新 Dyno に Routing されるそうです。</p>\n\n<blockquote><ul>\n<li>Shortly after the new dynos are fully live and serving user requests, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</li>\n</ul>\n</blockquote>\n\n<p>新 Dyno が完全に起動し、ユーザリクエストを処理するとすぐに、旧 Dyno はシャットダウンされるようです。これもログで確認可能とのこと。</p>\n\n<p>では実際にログを見てみましょう。</p>\n\n<h2 id=\"デプロイ時のログ\">デプロイ時のログ</h2>\n\n<p>git push 後まもなく、Web dyno の状態が <code>up</code> から <code>starting</code> に変わりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:58:51 heroku[web] notice Restarting\nNov 28 14:58:51 heroku[web] notice State changed from up to starting\nNov 28 14:58:51 heroku[web] notice Restarting\nNov 28 14:58:51 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 2 台で Puma (Web server) がそれぞれ起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:59:17 heroku[web] notice Starting process with command `bin/rails s -p 24256 -e production`\nNov 28 14:59:19 heroku[web] notice Starting process with command `bin/rails s -p 15417 -e production`\nNov 28 14:59:21 app[web] info [heroku-exec] Starting\nNov 28 14:59:22 app[web] info [heroku-exec] Starting\nNov 28 14:59:31 app[web] info =&gt; Booting Puma\nNov 28 14:59:31 app[web] info =&gt; Rails 5.2.1 application starting in production\nNov 28 14:59:31 app[web] info =&gt; Run `rails server -h` for more startup options\nNov 28 14:59:32 app[web] info =&gt; Booting Puma\nNov 28 14:59:32 app[web] info =&gt; Rails 5.2.1 application starting in production\nNov 28 14:59:32 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 14:59:33 heroku[web] notice State changed from starting to up\nNov 28 14:59:34 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。問題はありませんが、手元で起動するよりずいぶん遅い気がします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:02:03 app[web] info Puma starting in single mode...\nNov 28 15:02:03 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 28 15:02:03 app[web] info * Min threads: 11, max threads: 11\nNov 28 15:02:03 app[web] info * Environment: production\nNov 28 15:02:03 app[web] info * Listening on tcp://0.0.0.0:24256\nNov 28 15:02:03 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 3 分とあるため合っています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:02:19 heroku[web] notice Stopping all processes with SIGTERM\nNov 28 15:02:19 app[web] info Gracefully stopping, waiting for requests to finish\nNov 28 15:02:19 app[web] info === puma shutdown: 2018-11-28 06:02:19 +0000 ===\nNov 28 15:02:19 app[web] info Goodbye!\nNov 28 15:02:19 app[web] info Exiting\nNov 28 15:02:19 heroku[web] notice Process exited with status 143</pre>\n\n\n<p>もうひとつの旧 Web dyno 1 台で Puma が終了しました。これも意訳のとおりです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:03:25 heroku[web] notice Stopping all processes with SIGTERM\nNov 28 15:03:25 app[web] info Gracefully stopping, waiting for requests to finish\nNov 28 15:03:25 app[web] info === puma shutdown: 2018-11-28 06:03:25 +0000 ===\nNov 28 15:03:25 app[web] info Goodbye!\nNov 28 15:03:25 app[web] info Exiting\nNov 28 15:03:25 heroku[web] notice Process exited with status 143</pre>\n\n\n<p>もうひとつの新 Web dyno 1 台で Puma が起動しきりました。<code>Booting Puma</code> からずいぶんと時間がかかりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 28 15:05:08 app[web] info Puma starting in single mode...\nNov 28 15:05:08 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 28 15:05:08 app[web] info * Min threads: 11, max threads: 11\nNov 28 15:05:08 app[web] info * Environment: production\nNov 28 15:05:08 app[web] info * Listening on tcp://0.0.0.0:15417\nNov 28 15:05:08 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>Puma の起動に時間がかかるのは謎ですが、Preboot のドキュメントと相違ないと理解しました。</p>\n\n<h2 id=\"再起動時の挙動\">再起動時の挙動</h2>\n\n<p>再起動時の挙動も確認します。</p>\n\n<p>Heroku ではアプリケーションの健全性を維持するため、<a href=\"https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts\">Dyno は 1 日に 1 回、自動的に再起動します</a>。Dyno は差し替えられるため、ローカルファイルシステムの変更はすべて破棄されます。</p>\n\n<blockquote><p>The new dynos will start receiving requests as soon as it binds to its assigned port. At this point, both the old and new dynos are receiving requests.</p></blockquote>\n\n<p>新 Dyno は割り当てられたポートにバインドされると、すぐにリクエストを受信し始めます。この時点で、新旧の Dyno がリクエストを受信するそう。</p>\n\n<blockquote><p>Approximately 4 to 6 minutes after the restart is invoked, the old dynos will be shut down. You’ll see them shut down in the logs as usual.</p></blockquote>\n\n<p>再起動が行われてから、約 4~6 分後に旧 Dyno がシャットダウンされるようです。これもログで確認可能とのこと。</p>\n\n<p>Preboot が GA になった 2014 年頃は、まだ 1 日 1 回の再起動には対応していないようでした。現在は対応しているようです。</p>\n\n<h2 id=\"再起動時のログ\">再起動時のログ</h2>\n\n<p>結論から書くと、1 台目が再起動し終えてから 2 台目が再起動していました。再起動においても、ドキュメントの通りに Preboot が機能しているようです。</p>\n\n<h3 id=\"Web-dyno-1-台目\">Web dyno 1 台目</h3>\n\n<p>Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:22 heroku[web] notice Cycling\nNov 30 11:41:22 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:42 heroku[web] notice Starting process with command `bin/rails s -p 32434 -e production`\nNov 30 11:41:44 app[web] info [heroku-exec] Starting\nNov 30 11:41:50 app[web] info =&gt; Booting Puma\nNov 30 11:41:50 app[web] info =&gt; Rails 5.2.1.1 application starting in production\nNov 30 11:41:50 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:41:51 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。相変わらず時間がかかります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:45:45 app[web] info Puma starting in single mode...\nNov 30 11:45:45 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 30 11:45:45 app[web] info * Min threads: 11, max threads: 11\nNov 30 11:45:45 app[web] info * Environment: production\nNov 30 11:45:45 app[web] info * Listening on tcp://0.0.0.0:32434\nNov 30 11:45:45 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 4~6 分後とありましたが、間を置かずに終了しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 11:45:55 heroku[web] notice Stopping all processes with SIGTERM\nNov 30 11:45:56 app[web] info Gracefully stopping, waiting for requests to finish\nNov 30 11:45:56 app[web] info === puma shutdown: 2018-11-30 02:45:55 +0000 ===\nNov 30 11:45:56 app[web] info Goodbye!\nNov 30 11:45:56 app[web] info Exiting\nNov 30 11:45:56 heroku[web] notice Process exited with status 143</pre>\n\n\n<h3 id=\"Web-dyno-2-台目\">Web dyno 2 台目</h3>\n\n<p>もうひとつの Web dyno 1 台の状態が <code>up</code> から <code>starting</code> に変わりました。14 分くらい差があります。<a href=\"https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts\">最大 216 分のランダムな差がある</a>ようなので、記載通りです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:00:41 heroku[web] notice Cycling\nNov 30 12:00:41 heroku[web] notice State changed from up to starting</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動を開始しました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:00:59 heroku[web] notice Starting process with command `bin/rails s -p 16965 -e production`\nNov 30 12:01:01 app[web] info [heroku-exec] Starting\nNov 30 12:01:08 app[web] info =&gt; Booting Puma\nNov 30 12:01:08 app[web] info =&gt; Rails 5.2.1.1 application starting in production\nNov 30 12:01:08 app[web] info =&gt; Run `rails server -h` for more startup options</pre>\n\n\n<p>Web dyno 1 台の状態が <code>starting</code> から <code>up</code> に変わりました。まだ Puma は起動しきっていません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:01:10 heroku[web] notice State changed from starting to up</pre>\n\n\n<p>新 Web dyno 1 台で Puma が起動しきりました。今回は時間がかかりませんでした。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:01:15 app[web] info Puma starting in single mode...\nNov 30 12:01:15 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in Pajamas\nNov 30 12:01:15 app[web] info * Min threads: 11, max threads: 11\nNov 30 12:01:15 app[web] info * Environment: production\nNov 30 12:01:15 app[web] info * Listening on tcp://0.0.0.0:16965\nNov 30 12:01:15 app[web] info Use Ctrl-C to stop</pre>\n\n\n<p>旧 Web dyno 1 台で Puma が終了しました。今度は時間がかかりました。前述の意訳では約 4~6 分後とあるため合っています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Nov 30 12:05:14 heroku[web] notice Stopping all processes with SIGTERM\nNov 30 12:05:14 app[web] info Gracefully stopping, waiting for requests to finish\nNov 30 12:05:14 app[web] info === puma shutdown: 2018-11-30 03:05:14 +0000 ===\nNov 30 12:05:14 app[web] info Goodbye!\nNov 30 12:05:14 app[web] info Exiting\nNov 30 12:05:14 heroku[web] notice Process exited with status 143</pre>\n\n\n<h2 id=\"注意事項\">注意事項</h2>\n\n<p>Preboot を有効にしてデプロイすると、無効時よりも時間をかけて Dyno が差し替わります。全ての Dyno に反映されるまで数分かかることもあるようです。この点はチームで把握しておく必要があります。</p>\n\n<p>最大 3 分間、新旧の Dyno が重複するため、Add-on の同時接続数の制限に達する可能性があります。Heroku Postgres の場合は <a href=\"https://github.com/heroku/heroku-buildpack-pgbouncer\">pgbouncer buildpack</a> を使うことが奨励されています。</p>\n\n<p>新旧の Dyno が混在することにより、一度のデプロイで DB schema とアプリケーションコードを変更すると、不具合が発生する可能性があります。Preboot 機能を一旦無効にすることを勧めています。でも、Procfile に <code>release</code> process type を定義していれば同じなので、個人的には気にならないですね。</p>\n\n<p>Preboot 機能を使うためには、<strong>Dyno type が Standard-1X 以上</strong>である必要があります。Dyno type が <code>Free</code> と <code>Hobby</code> では Preboot を有効に出来ません。</p>\n\n<p><strong>Preboot が適用されるのは Web Dyno だけ</strong>です。自分で定義した <code>worker</code> Dyno 等は対象外です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>Heroku の Preboot 機能を深掘りし、有効にする必要性を理解しました。</p>\n\n<ul>\n<li>Web Dyno を 2 台以上にしたら Preboot を有効にすると良さそう</li>\n<li>前述の「注意事項」には留意したほうが良い</li>\n</ul>\n\n\n<p>しかし、こんなに長い記事になるとは...。</p>\n\n<p>明日の <a href=\"https://qiita.com/advent-calendar/2018/heroku\">heroku Advent Calendar 2018</a> はまたまた <a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a> です。Bitbar の便利な Heroku plugin を紹介してくれるみたいです。お楽しみに。</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>このような使い捨ての Dyno を <a href=\"https://devcenter.heroku.com/articles/one-off-dynos\">One-Off Dyno</a> と呼びます。heroku run で使われる Dyno もそうです。<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n","contentSnippet":"こんにちは id:masutaka26 です。この記事は Heroku Advent Calendar 2018 の 12 日目の記事です。qiita.com昨日は @takuchalle さんの『Heroku で wkhtmltoimage を使う方法』でした。似たツールの webkit2png は使ったことがあります。webkit2png が動作するのは macOS だけですが、wkhtmltoimage は Windows と Linux でも動作するのですね。へぇー。先月、Heroku の Preboot 機能を調べる機会がありました。Web 上の日本語記事は Preboot が GA になった 2014 年頃の情報が多く、若干情報が古かったため、2018 年時点の最新の情報をまとめます。Preboot 機能とは何かどのように有効にするのか使用する Procfileデプロイによる heroku ps の変化デプロイ時の挙動デプロイ時のログ再起動時の挙動再起動時のログWeb dyno 1 台目Web dyno 2 台目注意事項まとめPreboot 機能とは何かProduction Check > Dyno redundancy に書いてあるとおり、Heroku では冗長性確保のため、本番環境の Web Dyno は 2 台以上が奨励されています。Running at least 2 web dynos for any mission-critical app increases the probability that the app will remain available during a catastrophic event. Multiple dynos are also more likely to run on different physical infrastructure (for example, separate AWS Availability Zones), further increasing redundancy.ただし、それだけだとデプロイや 1 日 1 回の自動再起動で、処理の遅延（H27 - Client Request Interrupted）や H28 - Client Connection Idle が発生することがあります。以下のグラフは Dyno Restart のタイミングで H27 と H28 Error が発生している様子です。このグラフはダッシュボードの Metrics から確認できます。これを回避できるのが Preboot 機能です。どのように有効にするのかHeroku CLI で有効にできます。$ heroku features:enable preboot -a YOUR_APP_NAME有効になりました。簡単ですね。$ heroku features:info preboot -a YOUR_APP_NAME=== prebootDescription: Provide seamless web dyno deploys [general]Docs:        https://devcenter.heroku.com/articles/prebootEnabled:     true使用する Procfile今回はこの Procfile を使います。release: bin/rails db:migrate db:seed# Web appweb: bin/rails s -p $PORT -e $RAILS_ENVworker: PROCESS_TYPE=worker bundle exec sidekiq -C config/sidekiq.yml# Ad appad_worker: PROCESS_TYPE=ad_worker bundle exec sidekiq -C config/sidekiq.ymlweb, worker, ad_worker という 3 つの process type を定義しています。今回注目する process type は web だけです。1 行目で release も定義しているため、デプロイ時には One-Off Dyno1 で release 処理をしたあと、生成した Slug が Dyno に展開されていきます。デプロイによる heroku ps の変化それでは $ watch 'heroku ps -a YOUR_APP_NAME' しつつ、デプロイの様子を観察していきましょう。macOS では watch コマンドは $ brew install watch 等でインストール出来ます。Web Dyno 1 台の場合、release Dyno の実行が終わると、web.1 Dyno のステータスが up → starting → up と変化します。starting 中にリクエストがあると、クライアントは待たされ、前述の H27 や H28 Error が発生します。Web Dyno 1 台でデプロイした様子Web Dyno 2 台かつ Preboot 無効でも、基本的に同じです。2 台同時に up → starting → up と変化します。Web Dyno 2 台かつ Preboot 無効でデプロイした様子Web Dyno 2 台かつ Preboot を有効にすると、期待した通り、1 台ずつ up → starting → up になりませんでした・・・！あれ？Web Dyno 2 台かつ Preboot 有効でデプロイした様子Logs will show new dynos starting soon after the slug compile is finished. The output of heroku ps will immediately show the state (for example, starting or up) of the new dynos. Old dynos are still running but won’t appear in heroku ps.Preboot のドキュメントによると、heroku ps では確認できないようです。ただしログでは確認できるそう。デプロイ時の挙動Approximately 3 minutes after the deploy completes (or 2 minutes after your app’s boot timeout limit, which defaults to 1 minute), HTTP requests will start routing to the new dynos and simultaneously stop routing to the old dynos.遅くともデプロイ完了から約 3 分後、もしくはアプリケーションの起動タイムアウトリミット 2 分（デフォルトは 1 分）後、HTTP リクエストは新 Dyno に Routing されるそうです。Shortly after the new dynos are fully live and serving user requests, the old dynos will be shut down. You’ll see them shut down in the logs as usual.新 Dyno が完全に起動し、ユーザリクエストを処理するとすぐに、旧 Dyno はシャットダウンされるようです。これもログで確認可能とのこと。では実際にログを見てみましょう。デプロイ時のログgit push 後まもなく、Web dyno の状態が up から starting に変わりました。Nov 28 14:58:51 heroku[web] notice RestartingNov 28 14:58:51 heroku[web] notice State changed from up to startingNov 28 14:58:51 heroku[web] notice RestartingNov 28 14:58:51 heroku[web] notice State changed from up to starting新 Web dyno 2 台で Puma (Web server) がそれぞれ起動を開始しました。Nov 28 14:59:17 heroku[web] notice Starting process with command `bin/rails s -p 24256 -e production`Nov 28 14:59:19 heroku[web] notice Starting process with command `bin/rails s -p 15417 -e production`Nov 28 14:59:21 app[web] info [heroku-exec] StartingNov 28 14:59:22 app[web] info [heroku-exec] StartingNov 28 14:59:31 app[web] info => Booting PumaNov 28 14:59:31 app[web] info => Rails 5.2.1 application starting in productionNov 28 14:59:31 app[web] info => Run `rails server -h` for more startup optionsNov 28 14:59:32 app[web] info => Booting PumaNov 28 14:59:32 app[web] info => Rails 5.2.1 application starting in productionNov 28 14:59:32 app[web] info => Run `rails server -h` for more startup optionsWeb dyno の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 28 14:59:33 heroku[web] notice State changed from starting to upNov 28 14:59:34 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。問題はありませんが、手元で起動するよりずいぶん遅い気がします。Nov 28 15:02:03 app[web] info Puma starting in single mode...Nov 28 15:02:03 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 28 15:02:03 app[web] info * Min threads: 11, max threads: 11Nov 28 15:02:03 app[web] info * Environment: productionNov 28 15:02:03 app[web] info * Listening on tcp://0.0.0.0:24256Nov 28 15:02:03 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 3 分とあるため合っています。Nov 28 15:02:19 heroku[web] notice Stopping all processes with SIGTERMNov 28 15:02:19 app[web] info Gracefully stopping, waiting for requests to finishNov 28 15:02:19 app[web] info === puma shutdown: 2018-11-28 06:02:19 +0000 ===Nov 28 15:02:19 app[web] info Goodbye!Nov 28 15:02:19 app[web] info ExitingNov 28 15:02:19 heroku[web] notice Process exited with status 143もうひとつの旧 Web dyno 1 台で Puma が終了しました。これも意訳のとおりです。Nov 28 15:03:25 heroku[web] notice Stopping all processes with SIGTERMNov 28 15:03:25 app[web] info Gracefully stopping, waiting for requests to finishNov 28 15:03:25 app[web] info === puma shutdown: 2018-11-28 06:03:25 +0000 ===Nov 28 15:03:25 app[web] info Goodbye!Nov 28 15:03:25 app[web] info ExitingNov 28 15:03:25 heroku[web] notice Process exited with status 143もうひとつの新 Web dyno 1 台で Puma が起動しきりました。Booting Puma からずいぶんと時間がかかりました。Nov 28 15:05:08 app[web] info Puma starting in single mode...Nov 28 15:05:08 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 28 15:05:08 app[web] info * Min threads: 11, max threads: 11Nov 28 15:05:08 app[web] info * Environment: productionNov 28 15:05:08 app[web] info * Listening on tcp://0.0.0.0:15417Nov 28 15:05:08 app[web] info Use Ctrl-C to stopPuma の起動に時間がかかるのは謎ですが、Preboot のドキュメントと相違ないと理解しました。再起動時の挙動再起動時の挙動も確認します。Heroku ではアプリケーションの健全性を維持するため、Dyno は 1 日に 1 回、自動的に再起動します。Dyno は差し替えられるため、ローカルファイルシステムの変更はすべて破棄されます。The new dynos will start receiving requests as soon as it binds to its assigned port. At this point, both the old and new dynos are receiving requests.新 Dyno は割り当てられたポートにバインドされると、すぐにリクエストを受信し始めます。この時点で、新旧の Dyno がリクエストを受信するそう。Approximately 4 to 6 minutes after the restart is invoked, the old dynos will be shut down. You’ll see them shut down in the logs as usual.再起動が行われてから、約 4~6 分後に旧 Dyno がシャットダウンされるようです。これもログで確認可能とのこと。Preboot が GA になった 2014 年頃は、まだ 1 日 1 回の再起動には対応していないようでした。現在は対応しているようです。再起動時のログ結論から書くと、1 台目が再起動し終えてから 2 台目が再起動していました。再起動においても、ドキュメントの通りに Preboot が機能しているようです。Web dyno 1 台目Web dyno 1 台の状態が up から starting に変わりました。Nov 30 11:41:22 heroku[web] notice CyclingNov 30 11:41:22 heroku[web] notice State changed from up to starting新 Web dyno 1 台で Puma が起動を開始しました。Nov 30 11:41:42 heroku[web] notice Starting process with command `bin/rails s -p 32434 -e production`Nov 30 11:41:44 app[web] info [heroku-exec] StartingNov 30 11:41:50 app[web] info => Booting PumaNov 30 11:41:50 app[web] info => Rails 5.2.1.1 application starting in productionNov 30 11:41:50 app[web] info => Run `rails server -h` for more startup optionsWeb dyno 1 台の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 30 11:41:51 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。相変わらず時間がかかります。Nov 30 11:45:45 app[web] info Puma starting in single mode...Nov 30 11:45:45 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 30 11:45:45 app[web] info * Min threads: 11, max threads: 11Nov 30 11:45:45 app[web] info * Environment: productionNov 30 11:45:45 app[web] info * Listening on tcp://0.0.0.0:32434Nov 30 11:45:45 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。前述の意訳では約 4~6 分後とありましたが、間を置かずに終了しました。Nov 30 11:45:55 heroku[web] notice Stopping all processes with SIGTERMNov 30 11:45:56 app[web] info Gracefully stopping, waiting for requests to finishNov 30 11:45:56 app[web] info === puma shutdown: 2018-11-30 02:45:55 +0000 ===Nov 30 11:45:56 app[web] info Goodbye!Nov 30 11:45:56 app[web] info ExitingNov 30 11:45:56 heroku[web] notice Process exited with status 143Web dyno 2 台目もうひとつの Web dyno 1 台の状態が up から starting に変わりました。14 分くらい差があります。最大 216 分のランダムな差があるようなので、記載通りです。Nov 30 12:00:41 heroku[web] notice CyclingNov 30 12:00:41 heroku[web] notice State changed from up to starting新 Web dyno 1 台で Puma が起動を開始しました。Nov 30 12:00:59 heroku[web] notice Starting process with command `bin/rails s -p 16965 -e production`Nov 30 12:01:01 app[web] info [heroku-exec] StartingNov 30 12:01:08 app[web] info => Booting PumaNov 30 12:01:08 app[web] info => Rails 5.2.1.1 application starting in productionNov 30 12:01:08 app[web] info => Run `rails server -h` for more startup optionsWeb dyno 1 台の状態が starting から up に変わりました。まだ Puma は起動しきっていません。Nov 30 12:01:10 heroku[web] notice State changed from starting to up新 Web dyno 1 台で Puma が起動しきりました。今回は時間がかかりませんでした。Nov 30 12:01:15 app[web] info Puma starting in single mode...Nov 30 12:01:15 app[web] info * Version 3.12.0 (ruby 2.5.3-p105), codename: Llamas in PajamasNov 30 12:01:15 app[web] info * Min threads: 11, max threads: 11Nov 30 12:01:15 app[web] info * Environment: productionNov 30 12:01:15 app[web] info * Listening on tcp://0.0.0.0:16965Nov 30 12:01:15 app[web] info Use Ctrl-C to stop旧 Web dyno 1 台で Puma が終了しました。今度は時間がかかりました。前述の意訳では約 4~6 分後とあるため合っています。Nov 30 12:05:14 heroku[web] notice Stopping all processes with SIGTERMNov 30 12:05:14 app[web] info Gracefully stopping, waiting for requests to finishNov 30 12:05:14 app[web] info === puma shutdown: 2018-11-30 03:05:14 +0000 ===Nov 30 12:05:14 app[web] info Goodbye!Nov 30 12:05:14 app[web] info ExitingNov 30 12:05:14 heroku[web] notice Process exited with status 143注意事項Preboot を有効にしてデプロイすると、無効時よりも時間をかけて Dyno が差し替わります。全ての Dyno に反映されるまで数分かかることもあるようです。この点はチームで把握しておく必要があります。最大 3 分間、新旧の Dyno が重複するため、Add-on の同時接続数の制限に達する可能性があります。Heroku Postgres の場合は pgbouncer buildpack を使うことが奨励されています。新旧の Dyno が混在することにより、一度のデプロイで DB schema とアプリケーションコードを変更すると、不具合が発生する可能性があります。Preboot 機能を一旦無効にすることを勧めています。でも、Procfile に release process type を定義していれば同じなので、個人的には気にならないですね。Preboot 機能を使うためには、Dyno type が Standard-1X 以上である必要があります。Dyno type が Free と Hobby では Preboot を有効に出来ません。Preboot が適用されるのは Web Dyno だけです。自分で定義した worker Dyno 等は対象外です。まとめHeroku の Preboot 機能を深掘りし、有効にする必要性を理解しました。Web Dyno を 2 台以上にしたら Preboot を有効にすると良さそう前述の「注意事項」には留意したほうが良いしかし、こんなに長い記事になるとは...。明日の heroku Advent Calendar 2018 はまたまた id:masutaka26 です。Bitbar の便利な Heroku plugin を紹介してくれるみたいです。お楽しみに。このような使い捨ての Dyno を One-Off Dyno と呼びます。heroku run で使われる Dyno もそうです。↩","link":"https://developer.feedforce.jp/entry/2018/12/12/120000","isoDate":"2018-12-12T03:00:00.000Z","dateMiliSeconds":1544583600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"ジム通いと食生活改善を５ヶ月続けたので中間報告をする","content":"ｺﾞﾎｺﾞﾎ&hellip;この記事は feedforce Advent Calendar 2018 の 7 日目の記事です。健康的な記事を書くつもりが、月曜日から水曜日まで寝込んでいました（白目）。\n6 日目はふねさんの『リモート勤務が出来るようになったので煮込みがはかどる話 』でした。\n煮込み料理( ・∀・)ｲｲ!!ですね。無職時代に、カレーを作りながら採用面接向けの課題をやっていたことを思い出しました。(ToT)\nそんな私の記事は [2016-12-14-1] と [2017-12-19-1] に引き続き、またまた健康・生活に関する記事です。40 を超えると、健康の話しかしませんよね？\nさっそく中間報告 トレーナー曰く「今のところ順調に筋肉量が増え、体脂肪率が減っている」とのこと。さすがに CM みたいに極端には結果は出ないですね。初期の体脂肪率が 31.4% とかはおかしいので機械の故障でしょう&hellip;。\n※ ジムで InBody を使っての計測\n自宅では 2014 年から Withings の体重計で毎朝測っています。\n※ Withings Smart Body Analyzer での計測\n③の傾斜角が今回の成果になります。2kg 程度ですが、私の身長は 161cm ほどなので、これでも体つきに変化が出ています。筋肉量を増やしつつ、体重が減っていますからね。\n①は朝食を MCT オイル＆バター＆コーヒーにしていた頃です。筋トレはしていません。\n②は一週間でこの変化です。一週間熱が出続けて寝込んだらこうなりました。出社したら痩せたと言われました。\nどちらも見事にリバウンドしていますね&hellip;。\nなぜまたジムに通い始めたか 週に 2〜3 回、晩酌する習慣がついてしまい、人生最大の体重と体脂肪率になったからです。\n実は 2 年前まで近所のジムに通っていました。あまり合わずに 3 ヶ月ほどで辞めた後、近所のエニタイムフィットネス に行こうと思い 2 年が経ってしまいました。\nこれ以上延ばすのはまずいと思い、申し込んだのが [2018-06-30-1] というわけです。\nジムに行く頻度と内容 週 3 回目標で、最低週 2 回で続けています。もう 6 ヶ月目です。雨の日も風の日も台風の日も通います。何も考えずに通うことが重要です。「一度決めたことを忠実に繰り返してしまう」という私の性格に大変助かっています。","contentSnippet":"ｺﾞﾎｺﾞﾎ…この記事は feedforce Advent Calendar 2018 の 7 日目の記事です。健康的な記事を書くつもりが、月曜日から水曜日まで寝込んでいました（白目）。6 日目はふねさんの『リモート勤務が出来るようになったので煮込みがはかどる話 』でした。煮込み料理( ・∀・)ｲｲ!!ですね。無職時代に、カレーを作りながら採用面接向けの課題をやっていたことを思い出しました。(ToT)そんな私の記事は [2016-12-14-1] と [2017-12-19-1] に引き続き、またまた健康・生活に関する記事です。40 を超えると、健康の話しかしませんよね？さっそく中間報告 トレーナー曰く「今のところ順調に筋肉量が増え、体脂肪率が減っている」とのこと。さすがに CM みたいに極端には結果は出ないですね。初期の体脂肪率が 31.4% とかはおかしいので機械の故障でしょう…。※ ジムで InBody を使っての計測自宅では 2014 年から Withings の体重計で毎朝測っています。※ Withings Smart Body Analyzer での計測③の傾斜角が今回の成果になります。2kg 程度ですが、私の身長は 161cm ほどなので、これでも体つきに変化が出ています。筋肉量を増やしつつ、体重が減っていますからね。①は朝食を MCT オイル＆バター＆コーヒーにしていた頃です。筋トレはしていません。②は一週間でこの変化です。一週間熱が出続けて寝込んだらこうなりました。出社したら痩せたと言われました。どちらも見事にリバウンドしていますね…。なぜまたジムに通い始めたか 週に 2〜3 回、晩酌する習慣がついてしまい、人生最大の体重と体脂肪率になったからです。実は 2 年前まで近所のジムに通っていました。あまり合わずに 3 ヶ月ほどで辞めた後、近所のエニタイムフィットネス に行こうと思い 2 年が経ってしまいました。これ以上延ばすのはまずいと思い、申し込んだのが [2018-06-30-1] というわけです。ジムに行く頻度と内容 週 3 回目標で、最低週 2 回で続けています。もう 6 ヶ月目です。雨の日も風の日も台風の日も通います。何も考えずに通うことが重要です。「一度決めたことを忠実に繰り返してしまう」という私の性格に大変助かっています。","link":"https://masutaka.net/2018-12-07-1/","isoDate":"2018-12-07T00:00:00.000Z","dateMiliSeconds":1544140800000,"authorName":"masutaka"},{"title":"Heroku Meetup #23 \"Heroku Dynamite!!\" で話してきた #herokujp","content":"https://herokujp.doorkeeper.jp/events/82754 最近業務で Heroku 周りのことを一手に引き受けています。社内に本番環境での知見はあまりないので、参加してきました。\n参加は初なんですが、前回の記事 [2018-11-21-1] を Slack の HerokuJP User Group にシェアしたら成り行きで話すことに。LT 以外で外で話すのは初でしたが、良い意味でこじんまりした Meetup で、割とリラックスして話せましたね。\n会社の勉強会だと 20 人くらいいるので、良い訓練になっていたのかも。\nアプリケーションエンジニアから見た The Twelve-Factor App by @kimihom    The Twelve-Factor App は以前読んだことがあったけど、もう一度確認しようと思いました。\nconfig/environments/staging.rb 作ってしまうとか、忘れてますね&hellip;。中身は require_relative &lsquo;./production.rb&rsquo; にしてますがね。\n先々週 GA になった heroku.yml を使った Docker Deploy の紹介 by @masutaka    前述のとおり、[2018-11-21-1] のプレゼン版です。\nプレゼン用に ↓ このリポジトリを作りました。README.md に沿って試すと、とっても簡単に Heroku の Docker 周りを試せます。興味ある方は是非どうぞ。\n  正しく理解する Heroku Flow by @sho7650  ちょうど Heroku CI と Promotion は知りたかったので、タイミングが良かったです。","contentSnippet":"https://herokujp.doorkeeper.jp/events/82754 最近業務で Heroku 周りのことを一手に引き受けています。社内に本番環境での知見はあまりないので、参加してきました。参加は初なんですが、前回の記事 [2018-11-21-1] を Slack の HerokuJP User Group にシェアしたら成り行きで話すことに。LT 以外で外で話すのは初でしたが、良い意味でこじんまりした Meetup で、割とリラックスして話せましたね。会社の勉強会だと 20 人くらいいるので、良い訓練になっていたのかも。アプリケーションエンジニアから見た The Twelve-Factor App by @kimihom    The Twelve-Factor App は以前読んだことがあったけど、もう一度確認しようと思いました。config/environments/staging.rb 作ってしまうとか、忘れてますね…。中身は require_relative ‘./production.rb’ にしてますがね。先々週 GA になった heroku.yml を使った Docker Deploy の紹介 by @masutaka    前述のとおり、[2018-11-21-1] のプレゼン版です。プレゼン用に ↓ このリポジトリを作りました。README.md に沿って試すと、とっても簡単に Heroku の Docker 周りを試せます。興味ある方は是非どうぞ。  正しく理解する Heroku Flow by @sho7650  ちょうど Heroku CI と Promotion は知りたかったので、タイミングが良かったです。","link":"https://masutaka.net/2018-11-28-1/","isoDate":"2018-11-28T00:00:00.000Z","dateMiliSeconds":1543363200000,"authorName":"masutaka"},{"title":"先週 GA になった、heroku.yml を使った Docker Deploy を試した","content":"先週 Building Docker Images with heroku.yml が GA になってました。\nBuilding Docker Images with heroku.yml Is Generally Available heroku.yml は使ったことがなく、最近 Redash を Docker on Heroku で\n立て、モチベーションが上がっているので、早速試してみました。\n今までの方法と比較しながら、気づいたことを中心にまとめていきます。\nContainer Registry &amp; Runtime (Docker Deploys)  今まで Heroku で Docker を使うときは、このようにデプロイしていました。\n$ heroku container:push web # (1) $ heroku container:release web # (2) (1) でローカルで docker build して、Heroku の Docker registry に\npush します。\n(2) で push した Docker Image をデプロイします。\nheroku への git push は不要でした。ローカルで docker build するの","contentSnippet":"先週 Building Docker Images with heroku.yml が GA になってました。Building Docker Images with heroku.yml Is Generally Available heroku.yml は使ったことがなく、最近 Redash を Docker on Heroku で立て、モチベーションが上がっているので、早速試してみました。今までの方法と比較しながら、気づいたことを中心にまとめていきます。Container Registry & Runtime (Docker Deploys)  今まで Heroku で Docker を使うときは、このようにデプロイしていました。$ heroku container:push web # (1) $ heroku container:release web # (2) (1) でローカルで docker build して、Heroku の Docker registry にpush します。(2) で push した Docker Image をデプロイします。heroku への git push は不要でした。ローカルで docker build するの","link":"https://masutaka.net/2018-11-21-1/","isoDate":"2018-11-21T00:00:00.000Z","dateMiliSeconds":1542758400000,"authorName":"masutaka"},{"title":"『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。以前住んだ街を訪れるのが趣味です。</p>\n\n<p>週次の社内勉強会 <a href=\"https://developer.feedforce.jp/archive/category/FFTT\">FFTT</a> で『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をしました。</p>\n\n<p>まさかのダブルタイトル・・・！ スライドを作っていたら別々の話のような気がして、こうなりました。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"868618a13fbb4e8d8baf8f00c1f2e962\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>『Heroku と EC Booster と私』は主に社内向けの話です。最近の EC Booster のインフラを紹介する機会がなかったので、今回の発表の場を借りました。</p>\n\n<p>『Heroku ちょこっと Deep Dive』では Heroku の Slug について、ちょこっと調べました。</p>\n\n<p>Heroku では <a href=\"https://jp.heroku.com/dynos\">Dyno</a> という軽量コンテナ上で、アプリケーションが動作します。アプリケーションは <a href=\"https://devcenter.heroku.com/articles/slug-compiler\">Slug というパッケージに固められて</a>います。Slug にはアプリケーションコードの他に Buildpack や、Ruby なら bundle install されたライブラリ等が含められています。</p>\n\n<p>最近 Heroku を Terraform で管理し始めた時に、<a href=\"https://www.terraform.io/docs/providers/heroku/r/slug.html\">heroku_slug</a> というリソースを見つけました。使いはしなかったのですが、自分で Slug を変更できる感覚がよく分からなくて調べたことが始まりでした。</p>\n\n<p>まさか Scratch から作れるとは思いませんでしたし、Slug の中身やサイズの増減を把握する方法が分かったことは大きな収穫でした。</p>\n\n<p>発表では話し忘れたのですが、Heroku は Stack に日々セキュリティパッチが当たって、24 時間以内に適用されることは大きなメリットです。小さなチームで当てるべきパッチの把握や適用をするのは、相当しんどいですからね。</p>\n\n<p>それでは、発表後に書いてくれた付箋への返信です。</p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181112/20181112233219.jpg\" alt=\"Heroku by yousuke?\" title=\"f:id:masutaka26:20181112233219j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> いつもありがとうございます</li>\n</ul>\n</li>\n<li>ふだん Heroku Review App しか使ってなかったんですが、興味を持ちました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> Rails アプリの公開にも、小さなスクリプトの定期実行にも使えるので便利ですよ</li>\n</ul>\n</li>\n<li>マッスル マスタカ！💪\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> マッスル マッスル！💪</li>\n</ul>\n</li>\n<li>Heroku 未だに HTTP 1.1 なんですよね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですよねー 💦 さすがにそろそろ...</li>\n</ul>\n</li>\n<li>早く AWS + CloudFront 使いたい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> assets は CDN に逃したいですねー</li>\n</ul>\n</li>\n<li>(dfplus.)io はいまだにフロントは Heroku 使ってマスタカ\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうでありマスタカ</li>\n</ul>\n</li>\n<li>Push された tar ball に build された file が入るんですか\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そんな感じですー</li>\n</ul>\n</li>\n<li>EC Booster のリリース時に Heroku を徹底的につかいたおすことを目標にしていたので、この発表もマスタカさんのふだんの仕事もとても感謝しています\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もったいないお言葉、ありがとうございます！</li>\n</ul>\n</li>\n<li>「Heroku は良いサービス」めっちゃわかる\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> だよねー</li>\n</ul>\n</li>\n<li>Heroku は良しなにやってくれるけど、その「良しなに」部分もちゃんとオープンになっているのすばらしい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですねー。ずっと謎だった Slug の正体が分かってよかったです</li>\n</ul>\n</li>\n<li>プロダクション環境での Heroku 運用、勉強になりました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> まだまだ小さなサービスですからね。これから大きくなると、問題がたくさん出てきそうです</li>\n</ul>\n</li>\n<li>なんか push したら動かしてくれる Heroku が裏で何やってるか知れてよかったです！ 最近便利な機能知って Heroku いいなーってなってます！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。他にも <a href=\"https://www.heroku.com/continuous-integration\">Heroku CI</a> や <a href=\"https://devcenter.heroku.com/articles/pipelines#promoting\">Promoting</a> など、まだ試せていない機能がありますねー</li>\n</ul>\n</li>\n<li>資料が分かりやすいです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 安心安全な資料作りを心がけて参ります</li>\n</ul>\n</li>\n<li>資料の文字数がちょうど良くてとても見やすいと思いました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 本当はもっと減らしたいのですが、あとから読める資料としても作ったので、今回の長さになりました</li>\n</ul>\n</li>\n<li>ボトルネックがないようなら Heroku 便利そう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> とは言え、パフォーマンスを突き詰めると厳しいと感じています。現在は割とバックグラウンド＆バッチ処理にフォーカスしています</li>\n</ul>\n</li>\n<li>さすが弊社で Heroku に一番詳しい男！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 引き続きニッチな領域を攻めていきます</li>\n</ul>\n</li>\n<li>マスタカさんは説明が上手だなと思いました（こなみ）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます！</li>\n</ul>\n</li>\n<li>Heroku..... なんだかんだ、難しいイメージがあります...\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私も最初はそうでしたねー</li>\n</ul>\n</li>\n<li>身近に仕事で Heroku 使ってる人だー\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> いえす！</li>\n</ul>\n</li>\n<li>初心者でも使えるけど奥が深い Heroku\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですねー</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>発表の感想の感想</h2>\n\n<p>Heroku はバックエンドエンジニアには概ね好評ですが、フロントエンドエンジニアには割と不評な印象を受けました。</p>\n\n<p>HTTP/3 という話が出てきた今、未だに HTTP/1.1 なのはだいぶ遅れてますし、パフォーマンスを突き詰めると、どうしてもレイテンシー問題に直面してしまいます。逆に言えば、この辺どうにかなれば最強だと思うのですが。🌀</p>\n\n<p>Heroku の先を見据えてやっていきます。💪</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。以前住んだ街を訪れるのが趣味です。週次の社内勉強会 FFTT で『Heroku と EC Booster と私』と『Heroku ちょこっと Deep Dive』という発表をしました。まさかのダブルタイトル・・・！ スライドを作っていたら別々の話のような気がして、こうなりました。発表の内容『Heroku と EC Booster と私』は主に社内向けの話です。最近の EC Booster のインフラを紹介する機会がなかったので、今回の発表の場を借りました。『Heroku ちょこっと Deep Dive』では Heroku の Slug について、ちょこっと調べました。Heroku では Dyno という軽量コンテナ上で、アプリケーションが動作します。アプリケーションは Slug というパッケージに固められています。Slug にはアプリケーションコードの他に Buildpack や、Ruby なら bundle install されたライブラリ等が含められています。最近 Heroku を Terraform で管理し始めた時に、heroku_slug というリソースを見つけました。使いはしなかったのですが、自分で Slug を変更できる感覚がよく分からなくて調べたことが始まりでした。まさか Scratch から作れるとは思いませんでしたし、Slug の中身やサイズの増減を把握する方法が分かったことは大きな収穫でした。発表では話し忘れたのですが、Heroku は Stack に日々セキュリティパッチが当たって、24 時間以内に適用されることは大きなメリットです。小さなチームで当てるべきパッチの把握や適用をするのは、相当しんどいですからね。それでは、発表後に書いてくれた付箋への返信です。発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。 いつもありがとうございますふだん Heroku Review App しか使ってなかったんですが、興味を持ちました Rails アプリの公開にも、小さなスクリプトの定期実行にも使えるので便利ですよマッスル マスタカ！💪 マッスル マッスル！💪Heroku 未だに HTTP 1.1 なんですよね そうなんですよねー 💦 さすがにそろそろ...早く AWS + CloudFront 使いたい assets は CDN に逃したいですねー(dfplus.)io はいまだにフロントは Heroku 使ってマスタカ そうでありマスタカPush された tar ball に build された file が入るんですか そんな感じですーEC Booster のリリース時に Heroku を徹底的につかいたおすことを目標にしていたので、この発表もマスタカさんのふだんの仕事もとても感謝しています もったいないお言葉、ありがとうございます！「Heroku は良いサービス」めっちゃわかる だよねーHeroku は良しなにやってくれるけど、その「良しなに」部分もちゃんとオープンになっているのすばらしい ですねー。ずっと謎だった Slug の正体が分かってよかったですプロダクション環境での Heroku 運用、勉強になりました まだまだ小さなサービスですからね。これから大きくなると、問題がたくさん出てきそうですなんか push したら動かしてくれる Heroku が裏で何やってるか知れてよかったです！ 最近便利な機能知って Heroku いいなーってなってます！ ありがとうございます。他にも Heroku CI や Promoting など、まだ試せていない機能がありますねー資料が分かりやすいです 安心安全な資料作りを心がけて参ります資料の文字数がちょうど良くてとても見やすいと思いました 本当はもっと減らしたいのですが、あとから読める資料としても作ったので、今回の長さになりましたボトルネックがないようなら Heroku 便利そう とは言え、パフォーマンスを突き詰めると厳しいと感じています。現在は割とバックグラウンド＆バッチ処理にフォーカスしていますさすが弊社で Heroku に一番詳しい男！！ 引き続きニッチな領域を攻めていきますマスタカさんは説明が上手だなと思いました（こなみ） ありがとうございます！Heroku..... なんだかんだ、難しいイメージがあります... 私も最初はそうでしたねー身近に仕事で Heroku 使ってる人だー いえす！初心者でも使えるけど奥が深い Heroku ですねー発表の感想の感想Heroku はバックエンドエンジニアには概ね好評ですが、フロントエンドエンジニアには割と不評な印象を受けました。HTTP/3 という話が出てきた今、未だに HTTP/1.1 なのはだいぶ遅れてますし、パフォーマンスを突き詰めると、どうしてもレイテンシー問題に直面してしまいます。逆に言えば、この辺どうにかなれば最強だと思うのですが。🌀Heroku の先を見据えてやっていきます。💪","link":"https://developer.feedforce.jp/entry/2018/11/14/140000","isoDate":"2018-11-14T05:00:00.000Z","dateMiliSeconds":1542171600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181113/20181113190345.png","authorName":"masutaka"},{"title":"Heroku CLI 用の zsh 設定は不要だった件","content":"タイトルは少し端折っていて、正確には ~/.zshrc に以下の設定が必要です。\n# $FPATH 以下にある補完コレクションを使う。 autoload -Uz compinit; compinit -u これは Heroku CLI 固有の設定ではありません。ls や git などにも適用\nされる補完を有効にする設定です。\nmacOS High Sierra 付属の zsh の $FPATH デフォルト値です。\n$ echo $FPATH | tr &#39;:&#39; &#39;\\n&#39; /usr/local/share/zsh/site-functions /usr/share/zsh/site-functions /usr/share/zsh/5.3/functions このように補完が効きます。App の補完はうれしい。\nここに至った経緯 1/2 Heroku CLI は $ brew install heroku でインストールしており、\n/usr/local/share/zsh/site-functions/_heroku があります。\nそのため、初めはこんな設定をしていました。\nFPATH=/usr/local/share/zsh/site-functions:$FPATH でも前述したように /usr/local/share/zsh/site-functions は $FPATH\nのデフォルト値に含まれているので不要でした。削除。\nここに至った経緯 2/2 別件で $ brew install heroku は obsolete で、\n現在は $ brew install heroku/brew/heroku だと知りました。","contentSnippet":"タイトルは少し端折っていて、正確には ~/.zshrc に以下の設定が必要です。# $FPATH 以下にある補完コレクションを使う。 autoload -Uz compinit; compinit -u これは Heroku CLI 固有の設定ではありません。ls や git などにも適用される補完を有効にする設定です。macOS High Sierra 付属の zsh の $FPATH デフォルト値です。$ echo $FPATH | tr ':' '\\n' /usr/local/share/zsh/site-functions /usr/share/zsh/site-functions /usr/share/zsh/5.3/functions このように補完が効きます。App の補完はうれしい。ここに至った経緯 1/2 Heroku CLI は $ brew install heroku でインストールしており、/usr/local/share/zsh/site-functions/_heroku があります。そのため、初めはこんな設定をしていました。FPATH=/usr/local/share/zsh/site-functions:$FPATH でも前述したように /usr/local/share/zsh/site-functions は $FPATHのデフォルト値に含まれているので不要でした。削除。ここに至った経緯 2/2 別件で $ brew install heroku は obsolete で、現在は $ brew install heroku/brew/heroku だと知りました。","link":"https://masutaka.net/2018-10-28-1/","isoDate":"2018-10-28T00:00:00.000Z","dateMiliSeconds":1540684800000,"authorName":"masutaka"},{"title":"launchd を使って毎日深夜にだけ Time Machine を実行させる","content":"macOS High Sierra でのお話。\n作業中に Tima Machine が動き出すと、macOS が重くなったり固まったり\nするので、長年プチイライラしていました。\nTimeMachineScheduler というアプリを使ったら、当初は調子が良かった\nのですが、最近はうまく実行してくれません。なぜだ&hellip;。\nAppleScript + launchd で定期実行出来ないかな？とふと思い立ちました。\n調べたら AppleScript を使わずとも /usr/bin/tmutil がありました。\nTime Machine CLI です。&rsquo;$ man tmutil&rsquo; で詳しいヘルプを参照できます。\nこいつを launchd 使って定期実行したらうまくいきました。ちなみに\nmacOS では cron は非奨励で、代わりに launchd が奨励されています。\n作成した scheduled-timemachine.plist &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt; &lt;plist version=&#34;1.0&#34;&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;net.masutaka.scheduled-timemachine&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;sh&lt;/string&gt; &lt;string&gt;-c&lt;/string&gt; &lt;string&gt;date; sudo tmutil disable &amp;&amp; pmset -g ps | grep -q &#39;AC Power&#39; &amp;&amp; tmutil startbackup -b; echo&lt;/string&gt; &lt;/array&gt; &lt;key&gt;StandardOutPath&lt;/key&gt; &lt;string&gt;/Users/masutaka/.","contentSnippet":"macOS High Sierra でのお話。作業中に Tima Machine が動き出すと、macOS が重くなったり固まったりするので、長年プチイライラしていました。TimeMachineScheduler というアプリを使ったら、当初は調子が良かったのですが、最近はうまく実行してくれません。なぜだ…。AppleScript + launchd で定期実行出来ないかな？とふと思い立ちました。調べたら AppleScript を使わずとも /usr/bin/tmutil がありました。Time Machine CLI です。’$ man tmutil’ で詳しいヘルプを参照できます。こいつを launchd 使って定期実行したらうまくいきました。ちなみにmacOS では cron は非奨励で、代わりに launchd が奨励されています。作成した scheduled-timemachine.plist <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>Label</key> <string>net.masutaka.scheduled-timemachine</string> <key>ProgramArguments</key> <array> <string>sh</string> <string>-c</string> <string>date; sudo tmutil disable && pmset -g ps | grep -q 'AC Power' && tmutil startbackup -b; echo</string> </array> <key>StandardOutPath</key> <string>/Users/masutaka/.","link":"https://masutaka.net/2018-10-17-1/","isoDate":"2018-10-17T00:00:00.000Z","dateMiliSeconds":1539734400000,"authorName":"masutaka"},{"title":"Bash v3 以下でも set -u 時に変数が定義されてるか確認する方法","content":"以下のように、変数への値がセットされているかで分岐するシェルスクリ\nプトがあったとします。このスクリプトは正常に動作します。\n#!/bin/sh if [ -n &#34;$CIRCLE_PULL_REQUEST&#34; ]; then echo &#39;$CIRCLE_PULL_REQUEST is defined.&#39; else echo &#39;$CIRCLE_PULL_REQUEST is NOT defined.&#39; fi 堅牢なシェルスクリプトを書く時は &lsquo;#!/bin/sh&rsquo; を &lsquo;#!/bin/sh -u&rsquo; に\nすることが多いです。typo 等による意図しない変数の利用を防いでくれ\nます。\n今回はこれがコンフリクトし、以下のようなエラーになります。\n$ ./v.sh ./v.sh: line 3: CIRCLE_PULL_REQUEST: unbound variable 対策方法 set -uしてるときに変数が定義されてるかチェックする - Qiita 残念ながら macOS High Sierra では上記の方法は使えませんでした。\n$ ./v.bash ./v.bash: line 3: conditional binary operator expected $ which -a bash /bin/bash $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin17) Copyright (C) 2007 Free Software Foundation, Inc.","contentSnippet":"以下のように、変数への値がセットされているかで分岐するシェルスクリプトがあったとします。このスクリプトは正常に動作します。#!/bin/sh if [ -n \"$CIRCLE_PULL_REQUEST\" ]; then echo '$CIRCLE_PULL_REQUEST is defined.' else echo '$CIRCLE_PULL_REQUEST is NOT defined.' fi 堅牢なシェルスクリプトを書く時は ‘#!/bin/sh’ を ‘#!/bin/sh -u’ にすることが多いです。typo 等による意図しない変数の利用を防いでくれます。今回はこれがコンフリクトし、以下のようなエラーになります。$ ./v.sh ./v.sh: line 3: CIRCLE_PULL_REQUEST: unbound variable 対策方法 set -uしてるときに変数が定義されてるかチェックする - Qiita 残念ながら macOS High Sierra では上記の方法は使えませんでした。$ ./v.bash ./v.bash: line 3: conditional binary operator expected $ which -a bash /bin/bash $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin17) Copyright (C) 2007 Free Software Foundation, Inc.","link":"https://masutaka.net/2018-10-15-1/","isoDate":"2018-10-15T00:00:00.000Z","dateMiliSeconds":1539561600000,"authorName":"masutaka"},{"title":"terraform-provider-healthchecksio に足りない機能を実装したらコラボレータになれた","content":"<p>こんにちは、増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。秋は体が急に冷え、一年で一番体調を崩しやすいので、意識して風呂に浸かっています。元気です。</p>\n\n<p><a href=\"http://blog.hatena.ne.jp/critical_alert/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/critical_alert/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:critical_alert</a> から <a href=\"https://healthchecks.io/\">https://healthchecks.io/</a> を教えてもらいました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181007/20181007221520.png\" alt=\"f:id:masutaka26:20181007221520p:plain\" title=\"f:id:masutaka26:20181007221520p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>cron 系の定期実行ジョブが本当に実行されたかを監視してくれるサービスです。</p>\n\n<p>以前、<a href=\"https://github.com/ondrejbartas/sidekiq-cron\">sidekiq-cron</a> のバグで定期実行ジョブが実行されないことがあったので、なんらかの方法でお手軽に監視したいモチベーションがありました。</p>\n\n<h2>terraform-provider-healthchecksio を発見</h2>\n\n<p>コード化したいなーと思って調べたら、非公式の Terraform provider を発見。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio\">kristofferahl/terraform-provider-healthchecksio</a></p>\n\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n\n\n<p>こういった設定は属人化しやすいため、Terraform でコード化できるのは助かります。</p>\n\n<p>ただ、この時点では schedule や timezone などに対応していなかったため、採用は断念しました。</p>\n\n<p>healthchecks.io 上でポチポチと監視用のエンドポイントを作成し、ビジネスロジックにも ping するコードを埋め込み、いい感じに動作していました。</p>\n\n<h2>実装開始</h2>\n\n<p>悶々とした日を送り続けたある日、調べてみたら意外と簡単に機能が実装できそうなことが分かりました。</p>\n\n<p>👇 それで送ったのがこの PR。可能な限りのパラメータを使えるようになりました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/1\">Add parameters by masutaka · Pull Request #1</a></li>\n</ul>\n\n\n<p>terraform import もしたいなーと調べたら、たったの 3 行で対応出来ることが判明。👇 2 つ目の PR を出して無事マージされました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/2\">Introduce terraform import by masutaka · Pull Request #2</a></li>\n</ul>\n\n\n<p>ついでにしれっとコラボレータに招待してくれて、commit 権を頂けました。やったぜ！</p>\n\n<p>👇 先ほど 3 つ目の PR を出しました。非公式の Terraform provider なので、自分でバイナリを設置する必要があるのですよね。参考になりそうな Makefile を作りました。</p>\n\n<ul>\n<li><a href=\"https://github.com/kristofferahl/terraform-provider-healthchecksio/pull/3\">Add examples/Makefile by masutaka · Pull Request #3</a></li>\n</ul>\n\n\n<h2>今後の予定</h2>\n\n<blockquote><p>The database failover process is manual, and the ops team consists of a single person, so multi-hour or even multi-day outages are possible!</p>\n\n<p>While we can only guarantee a best effort availability, in practice the availability has exceeded 99.9% since the service publicly launched in July 2015.</p>\n\n<p><a href=\"https://healthchecks.io/about/\">https://healthchecks.io/about/</a></p></blockquote>\n\n<p>healthchecks.io は安定稼働しており、2015 年 7 月のサービス開始以来、稼働率は 99.9% を超えているそうです。ただあくまでベストエフォート型の可用性しか保証していないので、過信は禁物です。いわゆる 1 人開発プロジェクトでもあります。</p>\n\n<p>今後は Datadog で同じ監視が出来るか調査して、healthchecks.io と併用したいなーと思っています。<a href=\"https://cronitor.io/\">Cronitor</a> も頭の片隅にあるけど、少しオーバースペック感があります。</p>\n\n<h2>おまけ</h2>\n\n<p>healthchecks.io は OSS でもあり、GitHub 上にコードが公開されています。Django で実装されています。</p>\n\n<p><a class=\"embedly-card\" href=\"https://github.com/healthchecks/healthchecks\">healthchecks/healthchecks</a></p>\n","contentSnippet":"こんにちは、増田（id:masutaka26）です。秋は体が急に冷え、一年で一番体調を崩しやすいので、意識して風呂に浸かっています。元気です。id:critical_alert から https://healthchecks.io/ を教えてもらいました。cron 系の定期実行ジョブが本当に実行されたかを監視してくれるサービスです。以前、sidekiq-cron のバグで定期実行ジョブが実行されないことがあったので、なんらかの方法でお手軽に監視したいモチベーションがありました。terraform-provider-healthchecksio を発見コード化したいなーと思って調べたら、非公式の Terraform provider を発見。kristofferahl/terraform-provider-healthchecksioこういった設定は属人化しやすいため、Terraform でコード化できるのは助かります。ただ、この時点では schedule や timezone などに対応していなかったため、採用は断念しました。healthchecks.io 上でポチポチと監視用のエンドポイントを作成し、ビジネスロジックにも ping するコードを埋め込み、いい感じに動作していました。実装開始悶々とした日を送り続けたある日、調べてみたら意外と簡単に機能が実装できそうなことが分かりました。👇 それで送ったのがこの PR。可能な限りのパラメータを使えるようになりました。Add parameters by masutaka · Pull Request #1terraform import もしたいなーと調べたら、たったの 3 行で対応出来ることが判明。👇 2 つ目の PR を出して無事マージされました。Introduce terraform import by masutaka · Pull Request #2ついでにしれっとコラボレータに招待してくれて、commit 権を頂けました。やったぜ！👇 先ほど 3 つ目の PR を出しました。非公式の Terraform provider なので、自分でバイナリを設置する必要があるのですよね。参考になりそうな Makefile を作りました。Add examples/Makefile by masutaka · Pull Request #3今後の予定The database failover process is manual, and the ops team consists of a single person, so multi-hour or even multi-day outages are possible!While we can only guarantee a best effort availability, in practice the availability has exceeded 99.9% since the service publicly launched in July 2015.https://healthchecks.io/about/healthchecks.io は安定稼働しており、2015 年 7 月のサービス開始以来、稼働率は 99.9% を超えているそうです。ただあくまでベストエフォート型の可用性しか保証していないので、過信は禁物です。いわゆる 1 人開発プロジェクトでもあります。今後は Datadog で同じ監視が出来るか調査して、healthchecks.io と併用したいなーと思っています。Cronitor も頭の片隅にあるけど、少しオーバースペック感があります。おまけhealthchecks.io は OSS でもあり、GitHub 上にコードが公開されています。Django で実装されています。healthchecks/healthchecks","link":"https://developer.feedforce.jp/entry/2018/10/09/140000","isoDate":"2018-10-09T05:00:00.000Z","dateMiliSeconds":1539061200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20181007/20181007221520.png","authorName":"masutaka"},{"title":"＜ネタバレなし＞オクトパストラベラーを完全にクリアーした","content":"http://www.jp.square-enix.com/octopathtraveler/ 135 時間で完全にクリアーしました。ネタバレ回避のために「完全に」の\n詳細は書きません。\n最後はこんな状態でした。\n・主人公はプリムロゼ\n・レベルは全員 76（最後なぜか頑張ってプリムロゼに合わせた）\n・アビリティは全部覚えたキャラもいるし、もう少しのキャラもいる\n・全キャラのメインストーリーは全部クリア\n・サブストーリーも全部クリア\nおっさんホイホイのゲームには以前『レジェンド オブ レガシー』に痛い\n目にあったので警戒はしてましたが、プロデューサーがブレイブリーデフォ\nルトの浅野さんということで、期待を込めて購入しました。\n結果的に大正解。久々に 100 時間超えて且つ、クリアー出来たゲームと\nなりました。Switch で初めてクリアーできたよ。ゼルダもゼノブレイド\n２もクリアーしてない（涙）\n自分に合った理由を考えると、こんな感じです。\n・スキルにある程度制限がある\n・ストーリーが複雑でない\n・ドット絵による脳内補完\n・極端に難しくも易しくもない難易度\nバトルシステムがなかなか良くて、それほど多くのスキルや自由度がない\n中で、どのように強敵を撃破するか考えるのはなかなか楽しかったです。\n私が元組み込みエンジニアというのも関係するのかな？\nそういう意味では、ブレイブリーデフォルトは少々持て余してました。\n（だいぶ好きなゲームですがね。Switch に移植して欲しい！）\nストーリーが良い意味でチープだったのも良かったです。最近はあまりに\n複雑だと覚えられない&hellip;。ドット絵なので、「実際はこうかな？」と脳\n内補完するので問題ないです。小説のよう。\n難易度もちょうど良かったですね。強い武器防具をリセマラ で盗ったりし\nましたが、それでもだいぶ苦労させられました。サブストーリーで油断し\nてたら、あっさり全滅されられたりもしたなあ&hellip;。\n攻略サイトを見たのは終盤の終盤。見なくても割といけました。\n一方で UI はあまり洗練されていませんでした。\n・Y ボタンのヘルプがうざい。よりによって真下のメニューが見えない\n・← →で画面スクロールできることがどこにも書かれていない（終盤で知った・・・）\n・イベントでボタンポチポチ必要。自動進行なし\n・他多数\nMVP（Minimum Viable Product）的に作ったのだと、良い方向に解釈して\nいます。\nブレイブリーデフォルトは 3 が出たとして、ストーリーのつなぎ方が難\nしいと思います。でもオクトパストラベラーはシステムだけ揃えてストー\nリーは別にすれば良いと思うので、そういう意味では現段階では展開はや\nりやすそう。期待しています。\nオクトパストラベラーにはだいぶ時間を割いたので、しばらくゲームから\nは離れる予定です。次はどんなゲームをやるのだろう？\nOCTOPATH は造語で、各キャラの頭文字を取ったものでもあります。地図\n上でオフィーリアから時計回りの順。\nloading...\n   if (localStorage.","contentSnippet":"http://www.jp.square-enix.com/octopathtraveler/ 135 時間で完全にクリアーしました。ネタバレ回避のために「完全に」の詳細は書きません。最後はこんな状態でした。・主人公はプリムロゼ・レベルは全員 76（最後なぜか頑張ってプリムロゼに合わせた）・アビリティは全部覚えたキャラもいるし、もう少しのキャラもいる・全キャラのメインストーリーは全部クリア・サブストーリーも全部クリアおっさんホイホイのゲームには以前『レジェンド オブ レガシー』に痛い目にあったので警戒はしてましたが、プロデューサーがブレイブリーデフォルトの浅野さんということで、期待を込めて購入しました。結果的に大正解。久々に 100 時間超えて且つ、クリアー出来たゲームとなりました。Switch で初めてクリアーできたよ。ゼルダもゼノブレイド２もクリアーしてない（涙）自分に合った理由を考えると、こんな感じです。・スキルにある程度制限がある・ストーリーが複雑でない・ドット絵による脳内補完・極端に難しくも易しくもない難易度バトルシステムがなかなか良くて、それほど多くのスキルや自由度がない中で、どのように強敵を撃破するか考えるのはなかなか楽しかったです。私が元組み込みエンジニアというのも関係するのかな？そういう意味では、ブレイブリーデフォルトは少々持て余してました。（だいぶ好きなゲームですがね。Switch に移植して欲しい！）ストーリーが良い意味でチープだったのも良かったです。最近はあまりに複雑だと覚えられない…。ドット絵なので、「実際はこうかな？」と脳内補完するので問題ないです。小説のよう。難易度もちょうど良かったですね。強い武器防具をリセマラ で盗ったりしましたが、それでもだいぶ苦労させられました。サブストーリーで油断してたら、あっさり全滅されられたりもしたなあ…。攻略サイトを見たのは終盤の終盤。見なくても割といけました。一方で UI はあまり洗練されていませんでした。・Y ボタンのヘルプがうざい。よりによって真下のメニューが見えない・← →で画面スクロールできることがどこにも書かれていない（終盤で知った・・・）・イベントでボタンポチポチ必要。自動進行なし・他多数MVP（Minimum Viable Product）的に作ったのだと、良い方向に解釈しています。ブレイブリーデフォルトは 3 が出たとして、ストーリーのつなぎ方が難しいと思います。でもオクトパストラベラーはシステムだけ揃えてストーリーは別にすれば良いと思うので、そういう意味では現段階では展開はやりやすそう。期待しています。オクトパストラベラーにはだいぶ時間を割いたので、しばらくゲームからは離れる予定です。次はどんなゲームをやるのだろう？OCTOPATH は造語で、各キャラの頭文字を取ったものでもあります。地図上でオフィーリアから時計回りの順。loading...   if (localStorage.","link":"https://masutaka.net/2018-09-24-1/","isoDate":"2018-09-24T00:00:00.000Z","dateMiliSeconds":1537747200000,"authorName":"masutaka"},{"title":"家電操作を IRKit から Nature Remo に変えた #natureremo","content":"https://rebuild.fm/209/ を聞いたら、なんとなく購買意欲が湧いて買って\nしまいました。会社の MVP 賞 で頂いた Amazon ギフト券のそこそこ有意義な\n使いみちを探していたという事情もあります。\nIRKit は [2015-12-19-1] から便利に使っていて、Nature Remo が出た\nことも知っていましたが、IRKit の 2 倍の値段は高いなーと見送っていました。\n結果的に非常に満足しています。せっかくなので少し前に出た Nature\nRemo mini ではなく、Nature Remo を買いました。\n※ Nature Remo mini は主にセンサーが省かれた廉価版です。\nhttps://nature.global/ の下の方に Nature Remo との比較があります。\n￥14,040 の価値があったかはまだ微妙ですが、今後アップデートしてい\nくそうなので、期待してます。\nそれにしても typester さんが Nature, Inc. の CTO になっていたのは\n知らなかった。\n使い方 エアコン、テレビ、照明に対して、こんな使い方をしています。\nGoogle Home mini 経由での操作例 「ねぇ Google、冷房を 25℃ にして（Google Home mini → Nature Remo）」\n「ねぇ Google、明かり付けて（Google Home mini → Nature Remo）」","contentSnippet":"https://rebuild.fm/209/ を聞いたら、なんとなく購買意欲が湧いて買ってしまいました。会社の MVP 賞 で頂いた Amazon ギフト券のそこそこ有意義な使いみちを探していたという事情もあります。IRKit は [2015-12-19-1] から便利に使っていて、Nature Remo が出たことも知っていましたが、IRKit の 2 倍の値段は高いなーと見送っていました。結果的に非常に満足しています。せっかくなので少し前に出た NatureRemo mini ではなく、Nature Remo を買いました。※ Nature Remo mini は主にセンサーが省かれた廉価版です。https://nature.global/ の下の方に Nature Remo との比較があります。￥14,040 の価値があったかはまだ微妙ですが、今後アップデートしていくそうなので、期待してます。それにしても typester さんが Nature, Inc. の CTO になっていたのは知らなかった。使い方 エアコン、テレビ、照明に対して、こんな使い方をしています。Google Home mini 経由での操作例 「ねぇ Google、冷房を 25℃ にして（Google Home mini → Nature Remo）」「ねぇ Google、明かり付けて（Google Home mini → Nature Remo）」","link":"https://masutaka.net/2018-08-19-1/","isoDate":"2018-08-19T00:00:00.000Z","dateMiliSeconds":1534636800000,"authorName":"masutaka"},{"title":"Ruby でライブラリがシステムに存在しているかどうかをチェックする","content":"require &#39;mkmf&#39; have_library(&#39;pq&#39;) checking for main() in -lpq... yes =&gt; true mkmf.rb を読んだところ、C++ のコードを生成してチェックしていた。 Kernel.have_library のコードはこちら。 カレントディレクトリに mkmf.log が作られるが、これを防止するには\n以下で良いみたいだ。\nMakeMakefile::Logging::logfile(&#39;/dev/null&#39;) ネット上には以下のコードがあったが、mkmf.rb を読んだら上でいけた。\nMakeMakefile::Logging::logfile(&#39;/dev/null&#39;) module MakeMakefile module Logging @logfile = &#39;/dev/null&#39; end end 参考情報\ninstance method Kernel#have_library (Ruby 2.5.0) Module: MakeMakefile (Ruby 2.5.0) ","contentSnippet":"require 'mkmf' have_library('pq') checking for main() in -lpq... yes => true mkmf.rb を読んだところ、C++ のコードを生成してチェックしていた。 Kernel.have_library のコードはこちら。 カレントディレクトリに mkmf.log が作られるが、これを防止するには以下で良いみたいだ。MakeMakefile::Logging::logfile('/dev/null') ネット上には以下のコードがあったが、mkmf.rb を読んだら上でいけた。MakeMakefile::Logging::logfile('/dev/null') module MakeMakefile module Logging @logfile = '/dev/null' end end 参考情報instance method Kernel#have_library (Ruby 2.5.0) Module: MakeMakefile (Ruby 2.5.0)","link":"https://masutaka.net/2018-07-31-1/","isoDate":"2018-07-31T00:00:00.000Z","dateMiliSeconds":1532995200000,"authorName":"masutaka"},{"title":"エニタイムフィットネスに通うことにした","content":"最近、人生最高の体重を記録し、腹の肉もヤバく、駅の階段の上りで軽く\n息切れがする。危機感を覚えているので、ジムに通うことにした。\n選んだのは自宅からまあまあ近いエニタイムフィットネス 。\n近いと行っても徒歩 10 分弱なので、個人的にはやや遠い部類。\n数年前に通っていたクイックシェイプ は徒歩 3 分だったので、毎日通え\nていた。近さ重要。\nジムに通うのは実に 2 年 4 ヶ月ぶり。近所にもっと近いジムがあるんだ\nけど、なんだか合わなくて半年ももたなかった。その前は会社の人と週一\nでコナミに通っていたけど、会社の引っ越しで遠くなって行くのを止めて\nしまった。\n今までジムに通ってダイエットに成功したことがないので、今回はパーソ\nナルトレーニングをお願いした。以前筋トレを適当にやっていたら、筋を\n痛めて病院に通うハメになったので、その防止も兼ねて。\nとりあえず 5 回分で￥25,920。1 回 1 時間。週一でお願いする予定。\nエニタイムの基本料金は月額￥6,998。会社で￥4,000の補助が出るような\nので、実質￥2,998かな。新三河島店は土足 OK なのはうれしい。\n結果を出せるように頑張ります。","contentSnippet":"最近、人生最高の体重を記録し、腹の肉もヤバく、駅の階段の上りで軽く息切れがする。危機感を覚えているので、ジムに通うことにした。選んだのは自宅からまあまあ近いエニタイムフィットネス 。近いと行っても徒歩 10 分弱なので、個人的にはやや遠い部類。数年前に通っていたクイックシェイプ は徒歩 3 分だったので、毎日通えていた。近さ重要。ジムに通うのは実に 2 年 4 ヶ月ぶり。近所にもっと近いジムがあるんだけど、なんだか合わなくて半年ももたなかった。その前は会社の人と週一でコナミに通っていたけど、会社の引っ越しで遠くなって行くのを止めてしまった。今までジムに通ってダイエットに成功したことがないので、今回はパーソナルトレーニングをお願いした。以前筋トレを適当にやっていたら、筋を痛めて病院に通うハメになったので、その防止も兼ねて。とりあえず 5 回分で￥25,920。1 回 1 時間。週一でお願いする予定。エニタイムの基本料金は月額￥6,998。会社で￥4,000の補助が出るようなので、実質￥2,998かな。新三河島店は土足 OK なのはうれしい。結果を出せるように頑張ります。","link":"https://masutaka.net/2018-06-30-1/","isoDate":"2018-06-30T00:00:00.000Z","dateMiliSeconds":1530316800000,"authorName":"masutaka"},{"title":"先期の MVP に選ばれた","content":"<p>お元気にしてますか。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。</p>\n\n<p>先週の金曜日にフィードフォースにおける 2017 年度（2017年6月 〜 2018年5月）の納会が行われ、その中で初の MVP を受賞することができました。🎉</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"喜びのコメントを表明中のしがないますたか\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180608/20180608194920.jpg\" alt=\"f:id:masutaka26:20180608194920j:plain\" title=\"f:id:masutaka26:20180608194920j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>喜びのコメントを表明中のしがないますたか</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"チーム賞ももらったヨ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180614/20180614005507.jpg\" alt=\"f:id:masutaka26:20180614005507j:plain\" title=\"f:id:masutaka26:20180614005507j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>チーム賞ももらったヨ</figcaption></figure></p>\n\n<p>会社で賞を頂いたのは 4 年前のルーキー賞以来です。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmasutaka.net%2Fchalow%2F2014-06-13-1.html\" title=\"会社でルーキー賞に選ばれた\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://masutaka.net/chalow/2014-06-13-1.html\">masutaka.net</a></cite></p>\n\n<p><del>四年寝太郎としては、取るべくして取った賞だと思いました（ｷﾘｯ</del></p>\n\n<p>正直なところ、頑張ったで賞くらいはもらえたりして？とボンヤリ思っていましたが<a href=\"#f-3841f537\" name=\"fn-3841f537\" title=\"そのような賞はありません\">*1</a>、まさか MVP とは思いもよらず、発表の瞬間は素で驚きました。</p>\n\n<p>2017 年度は以下のチームに所属していました。</p>\n\n<ul>\n<li>2017 年 6 月 〜 2018 年 3 月\n\n<ul>\n<li><a href=\"https://dfplus.feedforce.jp/\">DF PLUS</a>（社内では DF Maker と呼ばれる）</li>\n</ul>\n</li>\n<li>2018 年 4 月 〜 2018 年 5 月\n\n<ul>\n<li><a href=\"https://ecbooster.jp/\">EC Booster</a></li>\n</ul>\n</li>\n</ul>\n\n\n<p>DF Maker ではサービスの信頼性向上にひたすら努める毎日でした。ECS でとんでもない量のエラーが発生して、３連休の間は暇を見つけてエラーログを確認してたなー（遠い目）。</p>\n\n<p>EC Booster ではチームビルディングから始めました。👇️以下の記事にまとまっています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2018%2F05%2F21%2F150000\" title=\"『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした - Feedforce Developer Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.feedforce.jp/entry/2018/05/21/150000\">developer.feedforce.jp</a></cite></p>\n\n<p>どちらにも共通することが、2 年目の優秀な若者と仕事ができたことです。私が若者を引っ張っていくぜーという感じではなくむしろ逆で、すでにサービスを知り尽くした若者から学ぶ日々でした（今もそうです）。</p>\n\n<p>その中で、「こうすればチーム開発がドライブするだろう」や「こうすればサービスの質を高められるだろう」というアイディアを出し、実践し、小さな改善と失敗を繰り返したことが、結果としてチームの状況を良くしたりサービスの質を高めることが出来たのだと思います（現在進行系）。</p>\n\n<p>もちろん、一緒に働くことができたチームの皆さんの協力があっての賞です。ありがとうございます。🙏</p>\n\n<p>それではまた 4 年後にお会いしましょう💤</p>\n<div class=\"footnote\">\n<p class=\"footnote\"><a href=\"#fn-3841f537\" name=\"f-3841f537\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">そのような賞はありません</span></p>\n</div>","contentSnippet":"お元気にしてますか。増田（id:masutaka26）です。先週の金曜日にフィードフォースにおける 2017 年度（2017年6月 〜 2018年5月）の納会が行われ、その中で初の MVP を受賞することができました。🎉喜びのコメントを表明中のしがないますたかチーム賞ももらったヨ会社で賞を頂いたのは 4 年前のルーキー賞以来です。masutaka.net四年寝太郎としては、取るべくして取った賞だと思いました（ｷﾘｯ正直なところ、頑張ったで賞くらいはもらえたりして？とボンヤリ思っていましたが*1、まさか MVP とは思いもよらず、発表の瞬間は素で驚きました。2017 年度は以下のチームに所属していました。2017 年 6 月 〜 2018 年 3 月DF PLUS（社内では DF Maker と呼ばれる）2018 年 4 月 〜 2018 年 5 月EC BoosterDF Maker ではサービスの信頼性向上にひたすら努める毎日でした。ECS でとんでもない量のエラーが発生して、３連休の間は暇を見つけてエラーログを確認してたなー（遠い目）。EC Booster ではチームビルディングから始めました。👇️以下の記事にまとまっています。developer.feedforce.jpどちらにも共通することが、2 年目の優秀な若者と仕事ができたことです。私が若者を引っ張っていくぜーという感じではなくむしろ逆で、すでにサービスを知り尽くした若者から学ぶ日々でした（今もそうです）。その中で、「こうすればチーム開発がドライブするだろう」や「こうすればサービスの質を高められるだろう」というアイディアを出し、実践し、小さな改善と失敗を繰り返したことが、結果としてチームの状況を良くしたりサービスの質を高めることが出来たのだと思います（現在進行系）。もちろん、一緒に働くことができたチームの皆さんの協力があっての賞です。ありがとうございます。🙏それではまた 4 年後にお会いしましょう💤*1:そのような賞はありません","link":"https://developer.feedforce.jp/entry/2018/06/15/130000","isoDate":"2018-06-15T04:00:00.000Z","dateMiliSeconds":1529035200000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180614/20180614005507.jpg","authorName":"masutaka"},{"title":"Rails4 と Rails5 とでの eager_load_paths の違い","content":"Rails4 と Rails5 とで eager_load_paths の内容に差異があることを知\nりました。\nRails5 では app 以下の全ての concerns ディレクトリや channels ディ\nレクトリが追加されています。\n以下、Rails4 と Rails5 とで実装箇所を追ってみました。\nRails-4.2.10 eager_load_paths を返すメソッド\nRails::Engine::Configuration#eager_load_paths ↓\neager_load_paths の構築開始。Rails5 と違いあり\nRails::Engine::Configuration#paths ↓\nRails::Paths::Root#add ↓\nRails::Paths::Path#initialize ↓\nRails::Paths::Path#eager_load! ここまでで eager_load_paths の構築完了\n↓\nRails::Paths::Root#eager_load 結果を返す\nRails-5.2.0 eager_load_paths を返すメソッド\nRails::Engine::Configuration#eager_load_paths ↓\neager_load_paths の構築開始。Rails4 と違いあり\nRails::Engine::Configuration#paths ↓\nRails::Paths::Root#add ↓\nRails::Paths::Path#initialize ↓\nRails::Paths::Path#eager_load! ここまでで eager_load_paths の構築完了\n↓\nRails::Paths::Root#eager_load 結果を返す\nまとめ Rails の eager_load_paths を調べました。app 以下が再帰的に追加され\nるだけかと思ってましたが、調べたら凝ったことをしていました。config\n以下も追加されるのも、なるほど&hellip;といった感じでした。","contentSnippet":"Rails4 と Rails5 とで eager_load_paths の内容に差異があることを知りました。Rails5 では app 以下の全ての concerns ディレクトリや channels ディレクトリが追加されています。以下、Rails4 と Rails5 とで実装箇所を追ってみました。Rails-4.2.10 eager_load_paths を返すメソッドRails::Engine::Configuration#eager_load_paths ↓eager_load_paths の構築開始。Rails5 と違いありRails::Engine::Configuration#paths ↓Rails::Paths::Root#add ↓Rails::Paths::Path#initialize ↓Rails::Paths::Path#eager_load! ここまでで eager_load_paths の構築完了↓Rails::Paths::Root#eager_load 結果を返すRails-5.2.0 eager_load_paths を返すメソッドRails::Engine::Configuration#eager_load_paths ↓eager_load_paths の構築開始。Rails4 と違いありRails::Engine::Configuration#paths ↓Rails::Paths::Root#add ↓Rails::Paths::Path#initialize ↓Rails::Paths::Path#eager_load! ここまでで eager_load_paths の構築完了↓Rails::Paths::Root#eager_load 結果を返すまとめ Rails の eager_load_paths を調べました。app 以下が再帰的に追加されるだけかと思ってましたが、調べたら凝ったことをしていました。config以下も追加されるのも、なるほど…といった感じでした。","link":"https://masutaka.net/2018-05-26-2/","isoDate":"2018-05-26T01:00:00.000Z","dateMiliSeconds":1527296400000,"authorName":"masutaka"},{"title":"Ruby で FTPS 接続する方法","content":"まずは情報の整理から。\n   種類 暗号化なし 暗号化あり     HTTP HTTP HTTPS   FTP FTP FTPS    混乱しやすいが、SFTP は SSH を使って暗号化・認証を行うプロトコルで\nFTPS とは別。\n・HTTP のセキュア版が HTTPS\n・FTP のセキュア版が FTPS\nと覚えると良いだろう。\nサンプルコード FTP の SaaS である BrickFTP にアカウントを作った。\nNet::FTP で接続可能。以下は FTPS 接続し、PWD を発行する Ruby コー\nド。password はマスクしている。\n#!/usr/bin/env ruby require &#39;net/ftp&#39; ftps = Net::FTP.new( &#39;masutaka.brickftp.com&#39;, ssl: true, username: &#39;masutaka.net@gmail.com&#39;, password: &#39;********&#39;, debug_mode: true, ) puts ftps.pwd 結果。","contentSnippet":"まずは情報の整理から。   種類 暗号化なし 暗号化あり     HTTP HTTP HTTPS   FTP FTP FTPS    混乱しやすいが、SFTP は SSH を使って暗号化・認証を行うプロトコルでFTPS とは別。・HTTP のセキュア版が HTTPS・FTP のセキュア版が FTPSと覚えると良いだろう。サンプルコード FTP の SaaS である BrickFTP にアカウントを作った。Net::FTP で接続可能。以下は FTPS 接続し、PWD を発行する Ruby コード。password はマスクしている。#!/usr/bin/env ruby require 'net/ftp' ftps = Net::FTP.new( 'masutaka.brickftp.com', ssl: true, username: 'masutaka.net@gmail.com', password: '********', debug_mode: true, ) puts ftps.pwd 結果。","link":"https://masutaka.net/2018-05-26-1/","isoDate":"2018-05-26T00:00:00.000Z","dateMiliSeconds":1527292800000,"authorName":"masutaka"},{"title":"『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn.profile-image.st-hatena.com/users/masutaka26/profile.png\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。発表が無事終わり、何かゲームでも買おうかなと思ってます。</p>\n\n<p>さて、フィードフォースでは毎週金曜日 16:00 から、社内技術勉強会を開催しています。当番制の持ち回りで技術に関連したことを発表します。</p>\n\n<p>先週金曜日は私の当番で『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をしました。</p>\n\n<p>技術チーム以外の方もたくさん聞きに来てくれて、ありがたかったです。🙏</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"978c7016bb7b473693f547116e8e704f\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p><a href=\"http://developer.feedforce.jp/entry/2017/10/16/150000\">前回</a>含めて、これまでの発表は全てコードが登場していました。今回のようなコードが登場しないマネジメントの話は、内容が拡散しがちで難しかったです。結局まとまりませんでした...。</p>\n\n<p>今回は敢えて後から読めるプレゼン資料にしました。なのでプレゼン資料としては冗長な書き方になっています。</p>\n\n<p>まとめるとこんな内容です。</p>\n\n<ul>\n<li>コミュニケーションの不確実性を解消することが、マネジメント（やチームビルディング）に必要なはず</li>\n<li>そのため自ら場に飛び込んで、情報の非対称性を解消していった</li>\n<li>これからもソフトウェアを書くこと以外に課題解決の手段があればやっていく</li>\n<li>そして徐々にマネジメントにかける時間を減らし、コードを書く時間を増やしていく</li>\n</ul>\n\n\n<p>今思えば、話し忘れたことがポロポロと出てきます。</p>\n\n<ul>\n<li>そもそもチームメンバーは自走できる方々で、ホワイトボード整理の時も方針だけ話したら勝手に整理されていった\n\n<ul>\n<li>私は方向性を決めただけ</li>\n</ul>\n</li>\n<li>チームに入りたてのときは少々オーバーリアクションを心がけ、徐々に普通に戻していく。\n\n<ul>\n<li>何考えている人か分かってもらうことで、その後のコミュニケーションをスムーズにする</li>\n</ul>\n</li>\n</ul>\n\n\n<p>完璧な発表などありませんね。</p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>ジョハリの窓の紹介ありがとうございます。勉強になります！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私も『<a href=\"https://www.amazon.co.jp/dp/B079TLW41L/\">エンジニアリング組織論への招待</a>』で初めて知りました。数年前にプロダクトオーナーの学習をした以来ですから...</li>\n</ul>\n</li>\n<li>自分はまだマネジメントからは程遠い存在なのですが、話しかけやすいオーラを出すことや、くだらないと思うことも質問することなどは、今すぐにでも実行出来るし、目指すことだと思いました。ありがとうございました！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> はい、個々が意識することが自走するチームや、個々のリーダーシップに繋がると思います</li>\n</ul>\n</li>\n<li>共感できる良い話でした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> あざす！</li>\n</ul>\n</li>\n<li>初公開の画像が見られて良かったです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> お粗末さまでした...</li>\n</ul>\n</li>\n<li>早くインフラ朝会にもどって来てください\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 今回の件が落ち着いたらインフラ朝会にもどりますよ。待っていてくださいね！</li>\n</ul>\n</li>\n<li>必要な情報とそうでもない情報の整理はものすごい HP/MP を消費しそう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね...</li>\n</ul>\n</li>\n<li>マネジメントの成果はすぐには結果に現れないかも？どの位の頻度で振り返るべきなのか？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> イテレーションごとの振り返りで、チームを観察すれば良いです。マネジメントの成果かどうかは重要ではないと思います</li>\n</ul>\n</li>\n<li>◯◯を支える技術\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 次回はコードの話をしよう...</li>\n</ul>\n</li>\n<li>知識科学やり直さなきゃ・・・\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 私は今回で終了ですw</li>\n</ul>\n</li>\n<li>チームの問題点を発見して、それを解決する手段を選ばないスタンスがすごい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もう必死ですよ（笑）</li>\n</ul>\n</li>\n<li>「内心ではなく行動に注目する」は、認知行動療法などでも使われていますね（最近のトレンド？）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> へぇ〜</li>\n</ul>\n</li>\n<li>なかなかボリュームある資料でしたが、作るのにどれくらいかかったのか気になります\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 先週土曜日の夜に草稿を作り「これでいけそう」という感触を得て、今週は平日の夜２日くらいで整理をしました。話す内容については一ヶ月くらい前から頭の中で考えたり、『<a href=\"https://www.amazon.co.jp/dp/B079TLW41L/\">エンジニアリング組織論への招待</a>』を全部読んだりしてました</li>\n</ul>\n</li>\n<li>最近疲弊してそうで心配でしたが、今日の発表で色々アウトプットしてもらって安心しました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 気にかけて頂いてありがとうございます。これからも安心安全のマスタカをお届けして参ります</li>\n</ul>\n</li>\n<li>うなずきすぎて首もげる\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。参考になったことが各チームに還元されるとうれしいです</li>\n</ul>\n</li>\n<li>マスタカさん自体はマネジメントよりコード書く方が好きなんでしょうか？\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね。引き篭もってコードを書きたいです</li>\n</ul>\n</li>\n<li>ますたかさんのおかげでチームがちゃんと回りはじめた気がします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そう言って頂けるとうれしいです。今がスタート地点だと捉え、精進してまいります</li>\n</ul>\n</li>\n<li>増田さんが参加されてから何かがスムーズになった実感があります（情報や知識だけでなく）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> うれしいですね。マネジメントは空気のような存在が良いと考えています</li>\n</ul>\n</li>\n<li>マネジメントってどうやるか？のテクニックの面もあるけど、誰がやるか？の面も大きい気がしてます\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうですね。例えば入ったばかりの職場だと、信頼関係を築くことから始まると思います。今回は同じ会社ということと、過去に一緒に働いたメンバーがいたことに助けられました</li>\n</ul>\n</li>\n<li>EC Booster のこれからに期待しています！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 💪</li>\n</ul>\n</li>\n<li>「場に飛び込む」「正しく伝わったと思わない」肝に銘じます！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> よろしくお願いします！</li>\n</ul>\n</li>\n<li>「エンジニアが発見した課題の解決フロー」読みたいです\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> Slack で書いたとおり、割と普通のフローです。発表で話したエンジニア以外の方からの依頼と整合性を合わせてこうしました。まだ始めて間もなく 1 イテレーションも回してない状態ですがね...\n\n<ol>\n<li> Issue を作ると EC Booster waffle.io の Planning カラムに入る</li>\n<li> 次の開発ミーティングで Planning カラムを空にする</li>\n<li> スプリントでは Sprint Backlog に集中する</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>feedforce だとマネジメントオンリーじゃなくて、開発+マネジメントが最強という話を昨日クリストフとした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 最強かは分かりませんが、コードも分かったほうが捗ると思います</li>\n</ul>\n</li>\n<li>仕事でもプライベートでも、コミュニティ内でオープンな発信をする人が多いと、円滑に物事が進みやすいなと考えられました。その逆もまた然りだったので...。かつ、人に伝えるときは具体的にするというのも大切かと思いました\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 他人は自分でないので、分かりやすく具体的なコミュニケーションが大事ですね</li>\n</ul>\n</li>\n<li><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20180519/20180519155210.jpg\" alt=\"masutaka by yousuke\" title=\"f:id:masutaka26:20180519155210j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> え、誰？（困惑）</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>最後に</h2>\n\n<p><div class=\"hatena-asin-detail\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51zMvVL4MeL._SL160_.jpg\" class=\"hatena-asin-detail-image\" alt=\"エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング\" title=\"エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング\"></a><div class=\"hatena-asin-detail-info\"><p class=\"hatena-asin-detail-title\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4774196053/hatena-blog-22/\">エンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング</a></p><ul><li><span class=\"hatena-asin-detail-label\">作者:</span> 広木大地</li><li><span class=\"hatena-asin-detail-label\">出版社/メーカー:</span> 技術評論社</li><li><span class=\"hatena-asin-detail-label\">発売日:</span> 2018/02/22</li><li><span class=\"hatena-asin-detail-label\">メディア:</span> 単行本（ソフトカバー）</li><li><a href=\"http://d.hatena.ne.jp/asin/4774196053/hatena-blog-22\" target=\"_blank\">この商品を含むブログ (2件) を見る</a></li></ul></div><div class=\"hatena-asin-detail-foot\"></div></div></p>\n\n<p>良かったぞ。「エンジニア組織論」ではないことに注目。プロダクトオーナーやエンジニア以外の職種の方にも是非読んでもらいたいです。</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。発表が無事終わり、何かゲームでも買おうかなと思ってます。さて、フィードフォースでは毎週金曜日 16:00 から、社内技術勉強会を開催しています。当番制の持ち回りで技術に関連したことを発表します。先週金曜日は私の当番で『開発基盤チームとして課題を探したらマネジメントをしていた』という発表をしました。技術チーム以外の方もたくさん聞きに来てくれて、ありがたかったです。🙏発表の内容前回含めて、これまでの発表は全てコードが登場していました。今回のようなコードが登場しないマネジメントの話は、内容が拡散しがちで難しかったです。結局まとまりませんでした...。今回は敢えて後から読めるプレゼン資料にしました。なのでプレゼン資料としては冗長な書き方になっています。まとめるとこんな内容です。コミュニケーションの不確実性を解消することが、マネジメント（やチームビルディング）に必要なはずそのため自ら場に飛び込んで、情報の非対称性を解消していったこれからもソフトウェアを書くこと以外に課題解決の手段があればやっていくそして徐々にマネジメントにかける時間を減らし、コードを書く時間を増やしていく今思えば、話し忘れたことがポロポロと出てきます。そもそもチームメンバーは自走できる方々で、ホワイトボード整理の時も方針だけ話したら勝手に整理されていった私は方向性を決めただけチームに入りたてのときは少々オーバーリアクションを心がけ、徐々に普通に戻していく。何考えている人か分かってもらうことで、その後のコミュニケーションをスムーズにする完璧な発表などありませんね。発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。ジョハリの窓の紹介ありがとうございます。勉強になります！ 私も『エンジニアリング組織論への招待』で初めて知りました。数年前にプロダクトオーナーの学習をした以来ですから...自分はまだマネジメントからは程遠い存在なのですが、話しかけやすいオーラを出すことや、くだらないと思うことも質問することなどは、今すぐにでも実行出来るし、目指すことだと思いました。ありがとうございました！ はい、個々が意識することが自走するチームや、個々のリーダーシップに繋がると思います共感できる良い話でした あざす！初公開の画像が見られて良かったです お粗末さまでした...早くインフラ朝会にもどって来てください 今回の件が落ち着いたらインフラ朝会にもどりますよ。待っていてくださいね！必要な情報とそうでもない情報の整理はものすごい HP/MP を消費しそう そうですね...マネジメントの成果はすぐには結果に現れないかも？どの位の頻度で振り返るべきなのか？ イテレーションごとの振り返りで、チームを観察すれば良いです。マネジメントの成果かどうかは重要ではないと思います◯◯を支える技術 次回はコードの話をしよう...知識科学やり直さなきゃ・・・ 私は今回で終了ですwチームの問題点を発見して、それを解決する手段を選ばないスタンスがすごい もう必死ですよ（笑）「内心ではなく行動に注目する」は、認知行動療法などでも使われていますね（最近のトレンド？） へぇ〜なかなかボリュームある資料でしたが、作るのにどれくらいかかったのか気になります 先週土曜日の夜に草稿を作り「これでいけそう」という感触を得て、今週は平日の夜２日くらいで整理をしました。話す内容については一ヶ月くらい前から頭の中で考えたり、『エンジニアリング組織論への招待』を全部読んだりしてました最近疲弊してそうで心配でしたが、今日の発表で色々アウトプットしてもらって安心しました 気にかけて頂いてありがとうございます。これからも安心安全のマスタカをお届けして参りますうなずきすぎて首もげる ありがとうございます。参考になったことが各チームに還元されるとうれしいですマスタカさん自体はマネジメントよりコード書く方が好きなんでしょうか？ そうですね。引き篭もってコードを書きたいですますたかさんのおかげでチームがちゃんと回りはじめた気がします そう言って頂けるとうれしいです。今がスタート地点だと捉え、精進してまいります増田さんが参加されてから何かがスムーズになった実感があります（情報や知識だけでなく） うれしいですね。マネジメントは空気のような存在が良いと考えていますマネジメントってどうやるか？のテクニックの面もあるけど、誰がやるか？の面も大きい気がしてます そうですね。例えば入ったばかりの職場だと、信頼関係を築くことから始まると思います。今回は同じ会社ということと、過去に一緒に働いたメンバーがいたことに助けられましたEC Booster のこれからに期待しています！ 💪「場に飛び込む」「正しく伝わったと思わない」肝に銘じます！ よろしくお願いします！「エンジニアが発見した課題の解決フロー」読みたいです Slack で書いたとおり、割と普通のフローです。発表で話したエンジニア以外の方からの依頼と整合性を合わせてこうしました。まだ始めて間もなく 1 イテレーションも回してない状態ですがね... Issue を作ると EC Booster waffle.io の Planning カラムに入る 次の開発ミーティングで Planning カラムを空にする スプリントでは Sprint Backlog に集中するfeedforce だとマネジメントオンリーじゃなくて、開発+マネジメントが最強という話を昨日クリストフとした 最強かは分かりませんが、コードも分かったほうが捗ると思います仕事でもプライベートでも、コミュニティ内でオープンな発信をする人が多いと、円滑に物事が進みやすいなと考えられました。その逆もまた然りだったので...。かつ、人に伝えるときは具体的にするというのも大切かと思いました 他人は自分でないので、分かりやすく具体的なコミュニケーションが大事ですね え、誰？（困惑）最後にエンジニアリング組織論への招待 ~不確実性に向き合う思考と組織のリファクタリング作者: 広木大地出版社/メーカー: 技術評論社発売日: 2018/02/22メディア: 単行本（ソフトカバー）この商品を含むブログ (2件) を見る良かったぞ。「エンジニア組織論」ではないことに注目。プロダクトオーナーやエンジニア以外の職種の方にも是非読んでもらいたいです。","link":"https://developer.feedforce.jp/entry/2018/05/21/150000","isoDate":"2018-05-21T06:00:00.000Z","dateMiliSeconds":1526882400000,"imageUrl":"https://images-fe.ssl-images-amazon.com/images/I/51zMvVL4MeL._SL160_.jpg","authorName":"masutaka"},{"title":"AirMac Extreme から Buffalo のルータに変えたらインターネット速度が 45 倍以上になった","content":"TL;DR プロバイダは @nifty、ルータを交換しただけでプロバイダとの契\n約は結果的に変える必要なかった。あと、デメリットもあるよ。\nBefore 先月までとにかく遅かったです。Download が 1 Mbps の時もありました&hellip;。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  AirMac Extreme を使ってました。Time Machine 便利ですからね。\n After めちゃめちゃ速くなりました。ほぼ 100 Mbps 以上をキープしています。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  BUFFALO の WXR-1901DHP3 を購入し、手順通りにセットアップしただけです（※）。\n セットアップの時に @nifty の ID とパスワードを聞かれなかったのに、","contentSnippet":"TL;DR プロバイダは @nifty、ルータを交換しただけでプロバイダとの契約は結果的に変える必要なかった。あと、デメリットもあるよ。Before 先月までとにかく遅かったです。Download が 1 Mbps の時もありました…。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  AirMac Extreme を使ってました。Time Machine 便利ですからね。 After めちゃめちゃ速くなりました。ほぼ 100 Mbps 以上をキープしています。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  BUFFALO の WXR-1901DHP3 を購入し、手順通りにセットアップしただけです（※）。 セットアップの時に @nifty の ID とパスワードを聞かれなかったのに、","link":"https://masutaka.net/2018-04-30-1/","isoDate":"2018-04-30T00:00:00.000Z","dateMiliSeconds":1525046400000,"authorName":"masutaka"},{"title":"Twitter クライアントを Tweetbot に変えた","content":"今更ですが、Twitter クライアントを公式 から Tweetbot に変更しました。\nデフォルト厨なので、今までは頑張って Chrome で Twitter を見てました。\nこんな理由からです。\n 未読位置を覚えているのがしんどい 未読位置まで移動するのがしんどい 溜まった未読位置から読むのに Chrome だと重すぎるので Firefox 開くのがしんどい  iOS 版も公式アプリ から Tweetbot に変更しました。\niCloud を使って、未読位置を macOS と iOS で同期してくれるのが大変\nありがたいです。公式アプリはスリープから復帰すると、リストから強制\n的にホームに戻ってしまうのが最悪でした。\n未読管理はどこまで正確なのかは少し気になります。\nストリーミング機能もだいぶ良いですね。twittering-mode で便利だった\nイメージがあります。\nTwitter が以前サードパーティの締め出しをした時、各 Tweet のクライ\nアント名が分からなくなりましたが、Tweetbot では表示されていました。\nAPI からはまだ取れたのですね。\n逆に公式のほうが良かった点も挙げておきます。\n IFTTT などの短縮 URL を展開されてサマリを表示してくれる 各 Tweet の詳細を見ないで Like 数 Retweet 数が分かる 投票？そんなのありましたっけ？  iOS 版は特に良かったことはないような。\nAndroid は Twitter の使用頻度が低いので、公式アプリを入れています。\n今までの Twitter クライアントの変遷はこんな感じです。\nTwitterFox → twittering-mode → Hootsuite → twitter.","contentSnippet":"今更ですが、Twitter クライアントを公式 から Tweetbot に変更しました。デフォルト厨なので、今までは頑張って Chrome で Twitter を見てました。こんな理由からです。 未読位置を覚えているのがしんどい 未読位置まで移動するのがしんどい 溜まった未読位置から読むのに Chrome だと重すぎるので Firefox 開くのがしんどい  iOS 版も公式アプリ から Tweetbot に変更しました。iCloud を使って、未読位置を macOS と iOS で同期してくれるのが大変ありがたいです。公式アプリはスリープから復帰すると、リストから強制的にホームに戻ってしまうのが最悪でした。未読管理はどこまで正確なのかは少し気になります。ストリーミング機能もだいぶ良いですね。twittering-mode で便利だったイメージがあります。Twitter が以前サードパーティの締め出しをした時、各 Tweet のクライアント名が分からなくなりましたが、Tweetbot では表示されていました。API からはまだ取れたのですね。逆に公式のほうが良かった点も挙げておきます。 IFTTT などの短縮 URL を展開されてサマリを表示してくれる 各 Tweet の詳細を見ないで Like 数 Retweet 数が分かる 投票？そんなのありましたっけ？  iOS 版は特に良かったことはないような。Android は Twitter の使用頻度が低いので、公式アプリを入れています。今までの Twitter クライアントの変遷はこんな感じです。TwitterFox → twittering-mode → Hootsuite → twitter.","link":"https://masutaka.net/2018-03-23-1/","isoDate":"2018-03-23T00:00:00.000Z","dateMiliSeconds":1521763200000,"authorName":"masutaka"},{"title":"『ジョイ・インク 役職も部署もない全員主役のマネジメント』を読んだ","content":"会社の若者がオススメしていたので、サラッと読んでみた。\nつもりが、一ヶ月近くかかってしまった&hellip;。\nペアプロを始めとした XP（エクストリーム・プログラミング）を体現し\nているメンローイノベーションズ のお話。著者は CEO の Richard\nSheridan 氏。\nソニックガーデン みたいな受託の会社なのかな？臓器移植情報システムや\nディーゼルエンジンの分析システム（？）など、内容は多岐にわたってい\nるみたい。\nとにかくアナログアナログアナログと言った感じで、デジタルツールはエ\nディタしかないのでは？という感想さえ覚えた。\n本の中では Slack や GitHub の話は一切出てこない。メールやチャット\nは使っていないっぽくて、全部口頭（本書では「高速音声技術」と名付け\nている）らしい。GitHub も使ってないのかな。VCS は何使っているんだ\nろう？\nhttps://github.com/menloinnovations を見つけたが、リポジトリはなかった。\nまあでも原著は 2013 年に出版されたらしいから、だいぶ変わったでしょ？\nと思ったけど、今もだいたい同じみたい。マジか。\nジョイ・インク (Joy, inc.) のメンローイノベーションズに行ってきた - kawaguti’s diary ペアプロを毎日やるって、どういうメンタルなんだろう？ 私はチームが\n出来たての頃はコミュニケーションのために意識してペアプロをやるけど、\nその後はほぼやらないなー。めっちゃ疲れるんだよね&hellip;。\nペアプロやっているとチャットを見る時間はなくなりがちだから、逆に相\n性が良いのだろうか。アラートやデプロイ通知とかどうしているんだろう？\nはぇ〜という感想しかなくて、正直参考にならなかった。\nたぶん、ビジネスモデルとセットで考えないと、とてもじゃないけど同じ\nことは出来ないと思う。\nただ、スキルより文化を重視する点は大いに賛同した。採用面接はするこ\nともされたこともあるけど、スキルを重視しがちなんだよね。でも本当に\n大事なのは会社の文化と合うかどうか。でもそこに全振りは強いな&hellip;。\n国内で同じもしくは、似たことをやっている会社はあるのかしら？\n以下、読書メモ。Kindle なのでページ番号じゃなくてロケーション番号。\n L921\nケアリーは、自分はソフトウェアプログラマーだと言った。\n 分かる。私も Rubyist などと言わないようにしている。\n L1001\nメンローに来て日の浅いメンバーは、一日八時間仕事すると疲れ切ってしまう。\n ﾃﾞｽﾖﾈｰ。最近はソロプロ（？）してても疲れ切っているけど。\n L1070","contentSnippet":"会社の若者がオススメしていたので、サラッと読んでみた。つもりが、一ヶ月近くかかってしまった…。ペアプロを始めとした XP（エクストリーム・プログラミング）を体現しているメンローイノベーションズ のお話。著者は CEO の RichardSheridan 氏。ソニックガーデン みたいな受託の会社なのかな？臓器移植情報システムやディーゼルエンジンの分析システム（？）など、内容は多岐にわたっているみたい。とにかくアナログアナログアナログと言った感じで、デジタルツールはエディタしかないのでは？という感想さえ覚えた。本の中では Slack や GitHub の話は一切出てこない。メールやチャットは使っていないっぽくて、全部口頭（本書では「高速音声技術」と名付けている）らしい。GitHub も使ってないのかな。VCS は何使っているんだろう？https://github.com/menloinnovations を見つけたが、リポジトリはなかった。まあでも原著は 2013 年に出版されたらしいから、だいぶ変わったでしょ？と思ったけど、今もだいたい同じみたい。マジか。ジョイ・インク (Joy, inc.) のメンローイノベーションズに行ってきた - kawaguti’s diary ペアプロを毎日やるって、どういうメンタルなんだろう？ 私はチームが出来たての頃はコミュニケーションのために意識してペアプロをやるけど、その後はほぼやらないなー。めっちゃ疲れるんだよね…。ペアプロやっているとチャットを見る時間はなくなりがちだから、逆に相性が良いのだろうか。アラートやデプロイ通知とかどうしているんだろう？はぇ〜という感想しかなくて、正直参考にならなかった。たぶん、ビジネスモデルとセットで考えないと、とてもじゃないけど同じことは出来ないと思う。ただ、スキルより文化を重視する点は大いに賛同した。採用面接はすることもされたこともあるけど、スキルを重視しがちなんだよね。でも本当に大事なのは会社の文化と合うかどうか。でもそこに全振りは強いな…。国内で同じもしくは、似たことをやっている会社はあるのかしら？以下、読書メモ。Kindle なのでページ番号じゃなくてロケーション番号。 L921ケアリーは、自分はソフトウェアプログラマーだと言った。 分かる。私も Rubyist などと言わないようにしている。 L1001メンローに来て日の浅いメンバーは、一日八時間仕事すると疲れ切ってしまう。 ﾃﾞｽﾖﾈｰ。最近はソロプロ（？）してても疲れ切っているけど。 L1070","link":"https://masutaka.net/2018-03-19-1/","isoDate":"2018-03-19T00:00:00.000Z","dateMiliSeconds":1521417600000,"authorName":"masutaka"},{"title":"JAWS DAYS 2018 に行ってきた #jawsdays #jawsdays2018","content":"https://jawsdays2018.jaws-ug.jp 去年 [2017-03-12-1] に引き続き、２回目の参加です。去年はなかった機\n械学習のセッションが目立ちました。IoT のセッションも増えてました。\n以下、自分用のメモです。\n[DeepDive] コンテナでウェイウェイ（仮）  西谷さんが基本的なお話をして、Calvin さんが大規模事例を紹介、とい\nう流れだった。\nby 西谷圭介さん TODO: 資料が公開されたらここに貼る\n西谷圭介さん／アマゾン ウェブ サービス ジャパン株式会社 技術統括本部 シニアソリューションアーキテクト\nECS と Fargate の基本的なお話。\n今までの稼働実績を元に数ヶ月前に ECS と Fargate の SLA が 99.99%\nに引き上げられたらしい。\nこれか。\nAmazon Compute サービスレベルアグリーメントを Amazon ECS および AWS Fargate に拡張 by Calvin French-Owen さん TODO: 資料が公開されたらここに貼る\nCalvin French-Owen さん／米国 segment.io社, CTO and Co-Founder​\nsegment.io 社の事例。そうとう規模が大きいらしい。\nちょっと前だけど TechCrunch の記事見つけた。\n複数（20あまり）のアクセス分析サービスのAPIを簡単に呼び出せるSegment.io｜TechCrunch Japan CPU や Memory Utilization によって Auto Scale Out/In する設定にし","contentSnippet":"https://jawsdays2018.jaws-ug.jp 去年 [2017-03-12-1] に引き続き、２回目の参加です。去年はなかった機械学習のセッションが目立ちました。IoT のセッションも増えてました。以下、自分用のメモです。[DeepDive] コンテナでウェイウェイ（仮）  西谷さんが基本的なお話をして、Calvin さんが大規模事例を紹介、という流れだった。by 西谷圭介さん TODO: 資料が公開されたらここに貼る西谷圭介さん／アマゾン ウェブ サービス ジャパン株式会社 技術統括本部 シニアソリューションアーキテクトECS と Fargate の基本的なお話。今までの稼働実績を元に数ヶ月前に ECS と Fargate の SLA が 99.99%に引き上げられたらしい。これか。Amazon Compute サービスレベルアグリーメントを Amazon ECS および AWS Fargate に拡張 by Calvin French-Owen さん TODO: 資料が公開されたらここに貼るCalvin French-Owen さん／米国 segment.io社, CTO and Co-Founder​segment.io 社の事例。そうとう規模が大きいらしい。ちょっと前だけど TechCrunch の記事見つけた。複数（20あまり）のアクセス分析サービスのAPIを簡単に呼び出せるSegment.io｜TechCrunch Japan CPU や Memory Utilization によって Auto Scale Out/In する設定にし","link":"https://masutaka.net/2018-03-11-1/","isoDate":"2018-03-11T00:00:00.000Z","dateMiliSeconds":1520726400000,"authorName":"masutaka"},{"title":"Raspberry Pi Zero W を Prota Pi 化する方法まとめ","content":"会社の留守電を自動的にセットする方法を考えていました。\nちょっと調べたら、MicroBot Push というものを発見。\n用途の割に $49.99 は高価ですが、興味もあり購入しました。\niOS アプリ MicroBot を使い、Bluetooth 経由でボタンを押すことが出来\nました。\n この方法だと連携した iPhone を常に会社に置く必要がありますが、\nProta S というハブがあればそれを回避できるとのこと。\nしかし、$89.99 はいくらなんでもこの用途にはお高い&hellip;。\nここで登場するのが Raspberry Pi。公式の情報 によると、Raspberry Pi\nB, B+, 2, 3 を使って、Prota S 相当の Prota Pi を作れるらしい。\n私が Raspberry Pi を買ったのははるか昔の 2013 年 11 月。\n[2013-12-05-1] という記事も書いていました。Wikipedia の情報も照ら\nし合わせると、どうやら Model B のようです。ただし、Prota OS デフォ\nルトで使える Wifi と Bluetooth のドングルが必要。\n心が折れそうになりましたが、たまたま職場の同僚が Zero W を貸してく\nれたため、これでチャレンジすることに。Zero W は $10 とお安い上に、\nWifi と Bluetooth も搭載されている、嘘みたいな機種です。","contentSnippet":"会社の留守電を自動的にセットする方法を考えていました。ちょっと調べたら、MicroBot Push というものを発見。用途の割に $49.99 は高価ですが、興味もあり購入しました。iOS アプリ MicroBot を使い、Bluetooth 経由でボタンを押すことが出来ました。 この方法だと連携した iPhone を常に会社に置く必要がありますが、Prota S というハブがあればそれを回避できるとのこと。しかし、$89.99 はいくらなんでもこの用途にはお高い…。ここで登場するのが Raspberry Pi。公式の情報 によると、Raspberry PiB, B+, 2, 3 を使って、Prota S 相当の Prota Pi を作れるらしい。私が Raspberry Pi を買ったのははるか昔の 2013 年 11 月。[2013-12-05-1] という記事も書いていました。Wikipedia の情報も照らし合わせると、どうやら Model B のようです。ただし、Prota OS デフォルトで使える Wifi と Bluetooth のドングルが必要。心が折れそうになりましたが、たまたま職場の同僚が Zero W を貸してくれたため、これでチャレンジすることに。Zero W は $10 とお安い上に、Wifi と Bluetooth も搭載されている、嘘みたいな機種です。","link":"https://masutaka.net/2018-02-12-1/","isoDate":"2018-02-12T00:00:00.000Z","dateMiliSeconds":1518393600000,"authorName":"masutaka"},{"title":"中華製スマートウォッチ Amazfit Bip を使い始めて 10 日ほど経った","content":"安くてダサすぎない CASIO の腕時計 [2016-09-19-1] を使い始めて 1 年半弱。\n悪くはなかったのですが、時々モードボタンが押されてしまい、画面がス\nトップウォッチになっていることがストレスでした（時間を確認しようと\nして、あぁ&hellip;となる）。\nhttps://rebuild.fm/196/ で宮川さんが Amazfit Bip という中華製スマー\nトウォッチを絶賛していた（01:09:33 〜）ので、正月の帰省中にポチッ\nと購入しました。\n※ Amazfit という名前ですが、Amazon とも Fitbit とも関係ないです&hellip;。\n10 日ほど使った結果、大変満足しています。私が [2016-09-19-1] に\n書いた要望がほぼ満たされていました。\nEnglish Version Huami Amazfit Smartwatch Youth Edition 上記 geekbuying のサイトから PayPal で購入しました（さすがにクレジッ\nトカード登録はためらわれた）。PayPal には予め英語の住所も登録して\nおきましょう。でないと、私のように geekbuying から問い合わせが来て\nしまいます。\n良いところ  画面は常時 ON。時計なのでこれ大事。右側のボタンを押すとタッチで操作できるようになる 安い。$59.99 で買えた。$125.99 だけど、今のところ常に 52% OFF の $59.99 送料無料。2018/1/2 に注文して 2018/1/17 に届いた バッテリーがめっちゃもつ。公称 45 日 悪くない外観。Apple Watch 的な見た目で Pebble 的な UI 防水（IP68） iPhone からの通知を全部受け取れる（デフォルト OFF） 常に心拍数を計測できる（デフォルト OFF） 自動的にスリープトラッキングしてくれる（デフォルト OFF） 1 時間ごとに立ち上がるように促される（デフォルト OFF）  公式 iOS アプリ Mi Fit を使うと、すべての機能を ON に出来ます。","contentSnippet":"安くてダサすぎない CASIO の腕時計 [2016-09-19-1] を使い始めて 1 年半弱。悪くはなかったのですが、時々モードボタンが押されてしまい、画面がストップウォッチになっていることがストレスでした（時間を確認しようとして、あぁ…となる）。https://rebuild.fm/196/ で宮川さんが Amazfit Bip という中華製スマートウォッチを絶賛していた（01:09:33 〜）ので、正月の帰省中にポチッと購入しました。※ Amazfit という名前ですが、Amazon とも Fitbit とも関係ないです…。10 日ほど使った結果、大変満足しています。私が [2016-09-19-1] に書いた要望がほぼ満たされていました。English Version Huami Amazfit Smartwatch Youth Edition 上記 geekbuying のサイトから PayPal で購入しました（さすがにクレジットカード登録はためらわれた）。PayPal には予め英語の住所も登録しておきましょう。でないと、私のように geekbuying から問い合わせが来てしまいます。良いところ  画面は常時 ON。時計なのでこれ大事。右側のボタンを押すとタッチで操作できるようになる 安い。$59.99 で買えた。$125.99 だけど、今のところ常に 52% OFF の $59.99 送料無料。2018/1/2 に注文して 2018/1/17 に届いた バッテリーがめっちゃもつ。公称 45 日 悪くない外観。Apple Watch 的な見た目で Pebble 的な UI 防水（IP68） iPhone からの通知を全部受け取れる（デフォルト OFF） 常に心拍数を計測できる（デフォルト OFF） 自動的にスリープトラッキングしてくれる（デフォルト OFF） 1 時間ごとに立ち上がるように促される（デフォルト OFF）  公式 iOS アプリ Mi Fit を使うと、すべての機能を ON に出来ます。","link":"https://masutaka.net/2018-01-28-1/","isoDate":"2018-01-28T00:00:00.000Z","dateMiliSeconds":1517097600000,"authorName":"masutaka"},{"title":"GitHub の通知はこうやって読んでる","content":"さて、では通知をどうやって読むか？だが、原点にかえって GitHub の\nNotifications ページで頑張ってみたい。\n 私も何年も GitHub の Notifications ページをメインにしている。\nmention には絶対気づくし、周辺の情報もきちんと取捨選択が出来ている\nと思う。\nGitHub の Notifications ページ  Notifications の良いところは、イシューや Pull Request の件名が一覧\n表示されるので、件名で仕分けできそうな点だ。\n そうなんですよね。実はだいぶ使いやすいです。\nまずは https://github.com/notifications を訪れて Participating を\nクリックし、自分宛ての mention を読む。初めから Participating を訪\nれても良いかもしれない。\nその後に Unread をクリック。自分のチームや興味あるリポジトリの通知\nは、ブラウザのタブで開いて全部読む。その他のリポジトリの通知はタイ\nトルやユーザだけ見て興味あれば別タブで表示、なければ Mark as read。\nリポジトリ単位で Mark as read することも多い。\nWatch リポジトリはしっかりメンテナンス そういう意味では、Watch リポジトリはしっかりメンテナンスしている。\n会社のリポジトリは 80% くらいは Watch して、通知が多すぎるやつとか\nは Unwatch している。\nただ、GitHub 公式だと https://github.com/watching で Unwatch しか","contentSnippet":"さて、では通知をどうやって読むか？だが、原点にかえって GitHub のNotifications ページで頑張ってみたい。 私も何年も GitHub の Notifications ページをメインにしている。mention には絶対気づくし、周辺の情報もきちんと取捨選択が出来ていると思う。GitHub の Notifications ページ  Notifications の良いところは、イシューや Pull Request の件名が一覧表示されるので、件名で仕分けできそうな点だ。 そうなんですよね。実はだいぶ使いやすいです。まずは https://github.com/notifications を訪れて Participating をクリックし、自分宛ての mention を読む。初めから Participating を訪れても良いかもしれない。その後に Unread をクリック。自分のチームや興味あるリポジトリの通知は、ブラウザのタブで開いて全部読む。その他のリポジトリの通知はタイトルやユーザだけ見て興味あれば別タブで表示、なければ Mark as read。リポジトリ単位で Mark as read することも多い。Watch リポジトリはしっかりメンテナンス そういう意味では、Watch リポジトリはしっかりメンテナンスしている。会社のリポジトリは 80% くらいは Watch して、通知が多すぎるやつとかは Unwatch している。ただ、GitHub 公式だと https://github.com/watching で Unwatch しか","link":"https://masutaka.net/2018-01-16-1/","isoDate":"2018-01-16T00:00:00.000Z","dateMiliSeconds":1516060800000,"authorName":"masutaka"},{"title":"2017 年にお金を払った購読型サービス","content":"@r7kamura さんの次の記事が良いと思ったので、暇つぶしがてら私も振り\n返ってみた。\n2017 年にお金を払った購読型サービス – r7kamura – Medium 継続しているもの GitHub 年額 $84。明らかに一年以上使うため、以前月払い（$7）から年払いに変\n更した。でもよく見たら値段変わらない&hellip;。次回更新の時に月払いに変えよう&hellip;。\nAmazon プライム 年額 3,900 円。Amazon MastarCard ゴールドカードを作れば無料になっ\nたのか。そういえばそうだった気が。\niCloud ストレージ 月額 130 円。50 GB プラン。\n以前使っていた iPhone 6s では、どうしても Mac に完全バックアップで\nきなかったので契約。その後 iPhone X にして [2017-11-18-1] この問題\nは発生しなくなったが、安いし、写真の iCloud バックアップは便利なの\nで、そのまま契約している。\nOvercast 年額 1,000 円。iOS アプリ。以前は買いきりだったけど、年課金になっ\nた。ほぼ『Rebuild 』と『のぼりーさんのクラウドインフラ 』のためだけ\nに購読している。Overcast 使うと、SMART SPEED で違和感なく高速に聴\nけるので便利。\nInoreader 年額 $29.99。Plus プランを購読している。下の Starter プラン（年額\n$14.99）でも良さそうだけど、以下の機能のリミットを外すために Plus\nプランにしたっぽい。\n 自動 OPML バックアップ有効化 Twitter フィードの数（1 → 30）  参考: https://www.","contentSnippet":"@r7kamura さんの次の記事が良いと思ったので、暇つぶしがてら私も振り返ってみた。2017 年にお金を払った購読型サービス – r7kamura – Medium 継続しているもの GitHub 年額 $84。明らかに一年以上使うため、以前月払い（$7）から年払いに変更した。でもよく見たら値段変わらない…。次回更新の時に月払いに変えよう…。Amazon プライム 年額 3,900 円。Amazon MastarCard ゴールドカードを作れば無料になったのか。そういえばそうだった気が。iCloud ストレージ 月額 130 円。50 GB プラン。以前使っていた iPhone 6s では、どうしても Mac に完全バックアップできなかったので契約。その後 iPhone X にして [2017-11-18-1] この問題は発生しなくなったが、安いし、写真の iCloud バックアップは便利なので、そのまま契約している。Overcast 年額 1,000 円。iOS アプリ。以前は買いきりだったけど、年課金になった。ほぼ『Rebuild 』と『のぼりーさんのクラウドインフラ 』のためだけに購読している。Overcast 使うと、SMART SPEED で違和感なく高速に聴けるので便利。Inoreader 年額 $29.99。Plus プランを購読している。下の Starter プラン（年額$14.99）でも良さそうだけど、以下の機能のリミットを外すために Plusプランにしたっぽい。 自動 OPML バックアップ有効化 Twitter フィードの数（1 → 30）  参考: https://www.","link":"https://masutaka.net/2018-01-03-1/","isoDate":"2018-01-03T00:00:00.000Z","dateMiliSeconds":1514937600000,"authorName":"masutaka"},{"title":"『Goならわかるシステムプログラミング』を読んだ","content":"11 月から『Real World HTTP』[2017-11-28-1] と同時に読んでいたのに、\n読み終わったのが今日になってしまった。意外とボリュームあったのと、\nあと少しで読み終えられたのに油断して読み進めなかったせい。\n 本書のもとになった ASCII.jp のウェブ連載では、この書籍（※）の内容\nとかぶらないように、実用性よりも低レベルの説明にフォーカスしたとい\nうのが実態です。\n※『Real World HTTP』\n P332 にこう書かれているように、『Real World HTTP』と一部内容が被る\nものの、低レイヤの話が大部分を占める。\n一応私は組み込みエンジニア時代に open(3), ioctl(3), close(3) 等を\n使ったデバイスドライバを書いたことがあるので（VxWorks だけど）、\nある程度想像力を働かせて読むことが出来た。\n先の引用に書かれているとおり実用性は考慮されていないので、それを期\n待すると期待はずれに終わると思う。あくまでエンジニアとしての知識を\n深めるための技術書かと。\n「第17章 Go言語とコンテナ」は面白そうだったので、あとで写経するかも。\n以下、個人的なメモ。\n P98\n最近では、RESTful の究極形態（第４形態）として位置づけられる\nHATEOAS という考え方も広まりつつあります。\n（中略）\nHATEOAS の原則に従った API を採用しているウェブサービスとしては\nGitHub があります。\n 『Web API： The Good Parts』[2015-04-09-2] に書いてあったようだけ\nど頭に入ってなかった。Go言語は関係ない。\n P285\nGo言語の場合、ヒープに置くかスタックに置くかは、コンパイラが自動的\nに判断します。new で作っても、その関数内でしか利用されなければスタッ\nクに確保されます。ローカル変数として宣言しても、そのポインタを他の\n関数に渡したり、関数の返り値として返すような場合にはヒープに置かれ\nます。そのためGo言語では、「ローカル変数のポインタを関数の返り値と\nして返すと、呼んだ側からアクセスしに行ったときにはもうスタックのフ\nレームが巻き戻されて無効なメモリになっており、実行時エラーで落ちる」\n（中略）という C/C++ で起きるような問題は置きません。","contentSnippet":"11 月から『Real World HTTP』[2017-11-28-1] と同時に読んでいたのに、読み終わったのが今日になってしまった。意外とボリュームあったのと、あと少しで読み終えられたのに油断して読み進めなかったせい。 本書のもとになった ASCII.jp のウェブ連載では、この書籍（※）の内容とかぶらないように、実用性よりも低レベルの説明にフォーカスしたというのが実態です。※『Real World HTTP』 P332 にこう書かれているように、『Real World HTTP』と一部内容が被るものの、低レイヤの話が大部分を占める。一応私は組み込みエンジニア時代に open(3), ioctl(3), close(3) 等を使ったデバイスドライバを書いたことがあるので（VxWorks だけど）、ある程度想像力を働かせて読むことが出来た。先の引用に書かれているとおり実用性は考慮されていないので、それを期待すると期待はずれに終わると思う。あくまでエンジニアとしての知識を深めるための技術書かと。「第17章 Go言語とコンテナ」は面白そうだったので、あとで写経するかも。以下、個人的なメモ。 P98最近では、RESTful の究極形態（第４形態）として位置づけられるHATEOAS という考え方も広まりつつあります。（中略）HATEOAS の原則に従った API を採用しているウェブサービスとしてはGitHub があります。 『Web API： The Good Parts』[2015-04-09-2] に書いてあったようだけど頭に入ってなかった。Go言語は関係ない。 P285Go言語の場合、ヒープに置くかスタックに置くかは、コンパイラが自動的に判断します。new で作っても、その関数内でしか利用されなければスタックに確保されます。ローカル変数として宣言しても、そのポインタを他の関数に渡したり、関数の返り値として返すような場合にはヒープに置かれます。そのためGo言語では、「ローカル変数のポインタを関数の返り値として返すと、呼んだ側からアクセスしに行ったときにはもうスタックのフレームが巻き戻されて無効なメモリになっており、実行時エラーで落ちる」（中略）という C/C++ で起きるような問題は置きません。","link":"https://masutaka.net/2017-12-31-1/","isoDate":"2017-12-31T00:00:00.000Z","dateMiliSeconds":1514678400000,"authorName":"masutaka"},{"title":"これまで試したダイエット７つを紹介する（※全部失敗）","content":"この記事は feedforce Advent Calendar 2017 の 19 日目の記事です。\n18 日目はなべはるさんの『ITベンチャー企業の人事が使っている SaaS\n10選！ 』でした。なべはるさんは一日に食べるアイスと同じくらい SaaS\nを活用していてすごいと思います！\n昨年 [2016-12-14-1] に引き続き、今年も生活に関する記事です。ダイエッ\nトは皆さん興味があると思うので、とても有用な情報かと思います。\n実際試して、結果的に全部失敗しています。この記事をアンチパターンと\nして試せば、成功するのではないでしょうか？（えぇ..）\n1. ヘルシア緑茶を 3 ヶ月間飲み続ける 川崎の平間に住んでいた頃なので、2004 年秋頃だと思います。\n経緯は忘れましたが、ヘルシア緑茶を毎日 1 本、3 ヶ月間飲み続けまし\nた。毎日バラで買うのは大変なので、近所の酒屋での箱買いです。\n「ヘルシア緑茶飲んでいるからへーきへーき」と食事制限はしませんでした。\n★結果: 何も変わらず。むしろ増えた記憶が。ヘルシア緑茶のようにほろ\n苦い思い出です。\n 2. ジムに毎日通う 時は流れ、2010 年 9 月。それまで全く運動をしていなかったのに、急に\n近所のジムに通い始めました。今は無きクイックシェイプというジムです。\n最初の何ヶ月かは本当に毎日通っていて、行かないのはジムが休みの金曜\n日と、たまの飲み会の日くらいでした。\nこれらの記事に意識高くまとまっています。\n[2011-03-05-1] [2011-03-05-2] [2011-03-05-3] 今でもなぜあそこまでやる気があったのか分かりません。\n★結果: 意識が高くなりすぎて、新卒から 11 年在籍した会社を退職\n[2011-04-22-1] 。スタートアップで社員第一号として働き始める。\nダイエットには失敗。\n西明石に引っ越した 2011 年 4 月末まで、7 ヶ月間通いました。\n3. 野々池貯水池でウォーキング 一階のダイニングキッチンがオフィス、二階の各部屋に若者と住んでいた\nこの家の近所には、ジムなんて便利なものはありません。あるのは田んぼ\nくらいでした。\n自転車でいけるくらいの距離に野々池貯水池があり、老若男女がジョギン","contentSnippet":"この記事は feedforce Advent Calendar 2017 の 19 日目の記事です。18 日目はなべはるさんの『ITベンチャー企業の人事が使っている SaaS10選！ 』でした。なべはるさんは一日に食べるアイスと同じくらい SaaSを活用していてすごいと思います！昨年 [2016-12-14-1] に引き続き、今年も生活に関する記事です。ダイエットは皆さん興味があると思うので、とても有用な情報かと思います。実際試して、結果的に全部失敗しています。この記事をアンチパターンとして試せば、成功するのではないでしょうか？（えぇ..）1. ヘルシア緑茶を 3 ヶ月間飲み続ける 川崎の平間に住んでいた頃なので、2004 年秋頃だと思います。経緯は忘れましたが、ヘルシア緑茶を毎日 1 本、3 ヶ月間飲み続けました。毎日バラで買うのは大変なので、近所の酒屋での箱買いです。「ヘルシア緑茶飲んでいるからへーきへーき」と食事制限はしませんでした。★結果: 何も変わらず。むしろ増えた記憶が。ヘルシア緑茶のようにほろ苦い思い出です。 2. ジムに毎日通う 時は流れ、2010 年 9 月。それまで全く運動をしていなかったのに、急に近所のジムに通い始めました。今は無きクイックシェイプというジムです。最初の何ヶ月かは本当に毎日通っていて、行かないのはジムが休みの金曜日と、たまの飲み会の日くらいでした。これらの記事に意識高くまとまっています。[2011-03-05-1] [2011-03-05-2] [2011-03-05-3] 今でもなぜあそこまでやる気があったのか分かりません。★結果: 意識が高くなりすぎて、新卒から 11 年在籍した会社を退職[2011-04-22-1] 。スタートアップで社員第一号として働き始める。ダイエットには失敗。西明石に引っ越した 2011 年 4 月末まで、7 ヶ月間通いました。3. 野々池貯水池でウォーキング 一階のダイニングキッチンがオフィス、二階の各部屋に若者と住んでいたこの家の近所には、ジムなんて便利なものはありません。あるのは田んぼくらいでした。自転車でいけるくらいの距離に野々池貯水池があり、老若男女がジョギン","link":"https://masutaka.net/2017-12-19-1/","isoDate":"2017-12-19T00:00:00.000Z","dateMiliSeconds":1513641600000,"authorName":"masutaka"},{"title":"『Real World HTTP』を読んだ","content":"HTTP の仕様を歴史から紐解く良書でした。\nHTTP/0.9(!) から始まり、1.0, 1.1, 2、そしてセキュリティと網羅的に学ぶことが出来ます。個人的には HTTP/2 を雰囲気でしか理解していませんでしたが、分かった気になれた気がします。\n↓ まえがき v から引用。\n 本書では次の二冊の間におさまる本として書いてきました。\n・『Web API： The Good Parts』（オライリー・ジャパン　刊、水野貴明　著）\n・『ハイパフォーマンスブラウザネットワーキング』（オライリー・ジャパン　刊、Ilya Grigorik　著）\n これにピンときたら、読んだ方が良いと思います。『Web API： The Good\tParts』は [2015-04-09-2] に読みました。読み終わった後、何度も参照することとなった、とても良い本です。\n一点、サンプルコードが Go 言語なので、好き嫌いは分かれるかもしれません。\nそれについて私は問題なかったのですが、『Goならわかるシステムプログラミング 』と平行して読んでいたので、割と混乱しました（笑）。両方とも Go 言語で、内容が似た章もあり、作者さんも同じ渋川よしきさんです。\n渋川よしきさん、どれほどの知識量なんや&hellip;。\n以下、自分用のメモ。\nP47\n ・プロクシ：通信内容を理解する。必要に応じてコンテンツを改変したり、\nサーバーの代わりに応答したりする\n・ゲートウェイ：通信内容をそのまま転送する。内容の改変も許さない。\nクライアントからは途中に存在することを気づかれてはならない\n P58\n 表2-3 スキーマの組み合わせとリファラーの有無\n    アクセス元 アクセス先 送信するかどうか？     HTTPS HTTPS する   HTTPS HTTP しない   HTTP HTTPS する   HTTP HTTP する    P92","contentSnippet":"HTTP の仕様を歴史から紐解く良書でした。HTTP/0.9(!) から始まり、1.0, 1.1, 2、そしてセキュリティと網羅的に学ぶことが出来ます。個人的には HTTP/2 を雰囲気でしか理解していませんでしたが、分かった気になれた気がします。↓ まえがき v から引用。 本書では次の二冊の間におさまる本として書いてきました。・『Web API： The Good Parts』（オライリー・ジャパン　刊、水野貴明　著）・『ハイパフォーマンスブラウザネットワーキング』（オライリー・ジャパン　刊、Ilya Grigorik　著） これにピンときたら、読んだ方が良いと思います。『Web API： The Good\tParts』は [2015-04-09-2] に読みました。読み終わった後、何度も参照することとなった、とても良い本です。一点、サンプルコードが Go 言語なので、好き嫌いは分かれるかもしれません。それについて私は問題なかったのですが、『Goならわかるシステムプログラミング 』と平行して読んでいたので、割と混乱しました（笑）。両方とも Go 言語で、内容が似た章もあり、作者さんも同じ渋川よしきさんです。渋川よしきさん、どれほどの知識量なんや…。以下、自分用のメモ。P47 ・プロクシ：通信内容を理解する。必要に応じてコンテンツを改変したり、サーバーの代わりに応答したりする・ゲートウェイ：通信内容をそのまま転送する。内容の改変も許さない。クライアントからは途中に存在することを気づかれてはならない P58 表2-3 スキーマの組み合わせとリファラーの有無    アクセス元 アクセス先 送信するかどうか？     HTTPS HTTPS する   HTTPS HTTP しない   HTTP HTTPS する   HTTP HTTP する    P92","link":"https://masutaka.net/2017-11-28-1/","isoDate":"2017-11-28T00:00:00.000Z","dateMiliSeconds":1511827200000,"authorName":"masutaka"},{"title":"iPhone X 64GB SIM フリー版を買って一週間経った","content":"[2013-10-14-1] に iPhone 5s 64GB、[2015-09-29-1] に iPhone 6s 64GB、\nという流れで iPhone X 64GB を購入しました（iPhone 4 と iPhone 4s\nも買ったけど記事を書いてなかった）。値段は忘却の彼方です&hellip;。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  予約から入手まで 今回初めて予約開始日に予約しました。[2017-02-25-1] に au から\nIIJmio に乗り換えたので、初めての物理店舗を介さずの購入です。\n10/27（金）16:01 と同時に https://www.apple.com/jp/ にアクセスして\n予約成功。ストアを表示できるまで、5~10 分ほどかかりました。\n自宅に届いたのは 11/11（土）の 11:00 過ぎ。予約時には「出荷は 2~3\n週間」と出ていたので、予想より少し早かったです。そもそも予約前は年\n内に届くとは思っていなかったので、大満足です。\nセットアップ SIM カードを別の機種に入れ替えるのは初めてだったので、内心ドキドキ\nでした。\nですが、誘導されるがままに進めると、iPhone 6s と Bluetooth で繋い\nでからの最新の iCloud バックアップ作成から、iPhone X への復元など、","contentSnippet":"[2013-10-14-1] に iPhone 5s 64GB、[2015-09-29-1] に iPhone 6s 64GB、という流れで iPhone X 64GB を購入しました（iPhone 4 と iPhone 4sも買ったけど記事を書いてなかった）。値段は忘却の彼方です…。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  予約から入手まで 今回初めて予約開始日に予約しました。[2017-02-25-1] に au からIIJmio に乗り換えたので、初めての物理店舗を介さずの購入です。10/27（金）16:01 と同時に https://www.apple.com/jp/ にアクセスして予約成功。ストアを表示できるまで、5~10 分ほどかかりました。自宅に届いたのは 11/11（土）の 11:00 過ぎ。予約時には「出荷は 2~3週間」と出ていたので、予想より少し早かったです。そもそも予約前は年内に届くとは思っていなかったので、大満足です。セットアップ SIM カードを別の機種に入れ替えるのは初めてだったので、内心ドキドキでした。ですが、誘導されるがままに進めると、iPhone 6s と Bluetooth で繋いでからの最新の iCloud バックアップ作成から、iPhone X への復元など、","link":"https://masutaka.net/2017-11-18-1/","isoDate":"2017-11-18T00:00:00.000Z","dateMiliSeconds":1510963200000,"authorName":"masutaka"},{"title":"golang.tokyo #10 x WomenWhoGoTokyo に行ってきた #golangtokyo","content":"golang.tokyo #10 x WomenWhoGoTokyo golang.tokyo #2 以来、久々に参加してきました。運営の皆様、ありがと\nうございました。\nMacBook Air を持っていくのが面倒になったので、リュウドの折りたたみ\nキーボード [2010-11-15-1] を引っ張り出して持っていたけど、机がなく\n使うのは断念。でもその分、聞くことに集中できた気はする。\nテキスト審査 in Pairs ※ TODO: 資料が公開されたらここに貼る\n後藤勝哉さん／株式会社エウレカ\n後藤さんが高熱のため、同じエウレカの森川さんが代わりに発表。\n業者などの悪徳ユーザを、サインアップやマッチング成立後にどのように\n除外しているかのお話。\nkagome という形態素解析ライブラリを使った go-jp-text-ripper を使っ\nてワードフィルタリングしている。go-jp-text-ripper の作者は、今回代\n理で発表している森川さん！\nKuromoji も使っていたんだっけかな。忘れた。他に正規表現や機械学習\nも使っていて、相当泥臭い。\n3か月でフィルタリングルールは使えなくなる。イタチごっこ。\n怪しいものは通さない。Slack で CS に通知して、最終的には人間が確認\nする。\n現在はエンジニアも運用に関わっているとのこと。気になったので質問し\nてみた。\ninerfaceとの付き合い   micchieさん／WomenWhoGoTokyo\n私は inerface は理解したつもりではいますが、実践で使ってないので、\n多分まだ理解できていないでしょう&hellip;。\nこういう使い捨てスクリプトはつい慣れた言語を使ってしまう。micchie\nさんの場合、PHP じゃなくて golang を使ったのはどういう意識だったの\nかな。\nメルカリ カウルのマスタデータの更新  tenntennさん／株式会社ソウゾウ\nGCS 上の 50MB の TSV ファイルを分割しながら（行単位ではない！）、\nRDS に入れていくお話。\nTransfer の実装は気が狂いそうになるらしい。バイト列の処理はそこそ","contentSnippet":"golang.tokyo #10 x WomenWhoGoTokyo golang.tokyo #2 以来、久々に参加してきました。運営の皆様、ありがとうございました。MacBook Air を持っていくのが面倒になったので、リュウドの折りたたみキーボード [2010-11-15-1] を引っ張り出して持っていたけど、机がなく使うのは断念。でもその分、聞くことに集中できた気はする。テキスト審査 in Pairs ※ TODO: 資料が公開されたらここに貼る後藤勝哉さん／株式会社エウレカ後藤さんが高熱のため、同じエウレカの森川さんが代わりに発表。業者などの悪徳ユーザを、サインアップやマッチング成立後にどのように除外しているかのお話。kagome という形態素解析ライブラリを使った go-jp-text-ripper を使ってワードフィルタリングしている。go-jp-text-ripper の作者は、今回代理で発表している森川さん！Kuromoji も使っていたんだっけかな。忘れた。他に正規表現や機械学習も使っていて、相当泥臭い。3か月でフィルタリングルールは使えなくなる。イタチごっこ。怪しいものは通さない。Slack で CS に通知して、最終的には人間が確認する。現在はエンジニアも運用に関わっているとのこと。気になったので質問してみた。inerfaceとの付き合い   micchieさん／WomenWhoGoTokyo私は inerface は理解したつもりではいますが、実践で使ってないので、多分まだ理解できていないでしょう…。こういう使い捨てスクリプトはつい慣れた言語を使ってしまう。micchieさんの場合、PHP じゃなくて golang を使ったのはどういう意識だったのかな。メルカリ カウルのマスタデータの更新  tenntennさん／株式会社ソウゾウGCS 上の 50MB の TSV ファイルを分割しながら（行単位ではない！）、RDS に入れていくお話。Transfer の実装は気が狂いそうになるらしい。バイト列の処理はそこそ","link":"https://masutaka.net/2017-11-16-1/","isoDate":"2017-11-16T00:00:00.000Z","dateMiliSeconds":1510790400000,"authorName":"masutaka"},{"title":"『PromiseとAsync-Awaitまとめ（Emacsで）』という LT をした","content":"社内で久しぶりに LT 大会が開かれたので、私も発表しました。\n  ちなみにお題をこれに決めたきっかけは、[2017-10-21-1] で async.el を調べた時に promise.el と async-await.el の存在を知ったからです。\n予定通り(?)デモの途中で時間オーバーになったので、それぞれ解説して\nいきます。\n解説 まずは同期処理から。2 行目で call-process が子プロセスとして sh が、\n孫プロセスとして sleep が起動した後、Message Box がポップアップし\nます。同期処理なので call-process の間 Emacs は固まります。\n start-process で非同期処理にしました。Emacs は固まらなくなりました\nが、コード量は増えてしまいました。let ではなく setq 使っているのは、\n発表での説明簡略化のためです。\n lambda で関数を減らしました。場合によってはアリです。\n make-process を使ってみました。動作は変わりませんが、こちらの方が\n分かりやすいかもしれません。\n これも lambda で関数を減らすことは出来ます。ただ、同期処理と比べる\nと相変わらずコード量が多いです。非同期処理にしたいだけなのに。\n ここで promise.el の登場です。ビルトインライブラリではないので、\npackage.el 等でインストールします。\nPromise に馴染みのある人であれば、読みやすいコードなのかもしれません。\n 8 行目でゼロ除算エラーを発生させました。promise-catch によって無事\ncatch されます。エラーの有無に関わらずその後 done は通ります。","contentSnippet":"社内で久しぶりに LT 大会が開かれたので、私も発表しました。  ちなみにお題をこれに決めたきっかけは、[2017-10-21-1] で async.el を調べた時に promise.el と async-await.el の存在を知ったからです。予定通り(?)デモの途中で時間オーバーになったので、それぞれ解説していきます。解説 まずは同期処理から。2 行目で call-process が子プロセスとして sh が、孫プロセスとして sleep が起動した後、Message Box がポップアップします。同期処理なので call-process の間 Emacs は固まります。 start-process で非同期処理にしました。Emacs は固まらなくなりましたが、コード量は増えてしまいました。let ではなく setq 使っているのは、発表での説明簡略化のためです。 lambda で関数を減らしました。場合によってはアリです。 make-process を使ってみました。動作は変わりませんが、こちらの方が分かりやすいかもしれません。 これも lambda で関数を減らすことは出来ます。ただ、同期処理と比べると相変わらずコード量が多いです。非同期処理にしたいだけなのに。 ここで promise.el の登場です。ビルトインライブラリではないので、package.el 等でインストールします。Promise に馴染みのある人であれば、読みやすいコードなのかもしれません。 8 行目でゼロ除算エラーを発生させました。promise-catch によって無事catch されます。エラーの有無に関わらずその後 done は通ります。","link":"https://masutaka.net/2017-11-12-1/","isoDate":"2017-11-12T00:00:00.000Z","dateMiliSeconds":1510444800000,"authorName":"masutaka"},{"title":"RSpec 3.5 から shared_context の使い方が少し変わっていた","content":"RSpec 3.5 から shared_context のメタデータの使い方に変更があったの\nでメモ。\nこのようなテストがあったとします。\ncontext &#39;given login&#39; do let(:user) { create(:user) } before { signin_as user } ... end shared_context を使うと、このように書くことが出来ます。\n同じ context を複数で使いたい場合に便利です。\nshared_context &#39;User signin&#39; do let(:user) { create(:user) } before { signin_as user } end context &#39;given login&#39; do include_context &#39;User signin&#39; ... end RSpec 3.4 までは、メタデータを使ってこのように省略することが出来ま\nした。\nshared_context &#39;User signin&#39;, :signin do let(:user) { create(:user) } before { signin_as user } end context &#39;given login&#39;, :signin do .","contentSnippet":"RSpec 3.5 から shared_context のメタデータの使い方に変更があったのでメモ。このようなテストがあったとします。context 'given login' do let(:user) { create(:user) } before { signin_as user } ... end shared_context を使うと、このように書くことが出来ます。同じ context を複数で使いたい場合に便利です。shared_context 'User signin' do let(:user) { create(:user) } before { signin_as user } end context 'given login' do include_context 'User signin' ... end RSpec 3.4 までは、メタデータを使ってこのように省略することが出来ました。shared_context 'User signin', :signin do let(:user) { create(:user) } before { signin_as user } end context 'given login', :signin do .","link":"https://masutaka.net/2017-11-10-2/","isoDate":"2017-11-10T01:00:00.000Z","dateMiliSeconds":1510275600000,"authorName":"masutaka"},{"title":"S3 の public バケットで特定パス以下を IP アドレス制限する","content":"全体を Allow したあとに、制限したいパスに対して Deny を追加すれば\n可能。\n例えば以下の場合。\nhttps://s3-ap-northeast-1.amazonaws.com/masutaka-hoge/aaa/ *\n→ インターネットに全公開\nhttps://s3-ap-northeast-1.amazonaws.com/masutaka-hoge/bbb/ *\n→ IP アドレス AAA.BBB.CCC.DDD からのアクセスのみ許可\nこのようなポリシーになる。\n{ &#34;Id&#34;: &#34;Policy1234567890&#34;, &#34;Version&#34;: &#34;2012-10-17&#34;, &#34;Statement&#34;: [ { &#34;Sid&#34;: &#34;Stmt0123456789&#34;, &#34;Action&#34;: [ &#34;s3:GetObject&#34; ], &#34;Effect&#34;: &#34;Allow&#34;, &#34;Resource&#34;: &#34;arn:aws:s3:::masutaka-hoge/*&#34;, &#34;Principal&#34;: &#34;*&#34; }, { &#34;Sid&#34;: &#34;Stmt9876543210&#34;, &#34;Action&#34;: [ &#34;s3:GetObject&#34; ], &#34;Effect&#34;: &#34;Deny&#34;, &#34;Resource&#34;: &#34;arn:aws:s3:::masutaka-hoge/bbb/*&#34;, &#34;Condition&#34;: { &#34;NotIpAddress&#34;: { &#34;aws:SourceIp&#34;: &#34;AAA.BBB.CCC.DDD&#34; } }, &#34;Principal&#34;: &#34;*&#34; } ] } S3 の Console の Bucket の Permissions → Bucket Policy で上記ポリ","contentSnippet":"全体を Allow したあとに、制限したいパスに対して Deny を追加すれば可能。例えば以下の場合。https://s3-ap-northeast-1.amazonaws.com/masutaka-hoge/aaa/ *→ インターネットに全公開https://s3-ap-northeast-1.amazonaws.com/masutaka-hoge/bbb/ *→ IP アドレス AAA.BBB.CCC.DDD からのアクセスのみ許可このようなポリシーになる。{ \"Id\": \"Policy1234567890\", \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Stmt0123456789\", \"Action\": [ \"s3:GetObject\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:s3:::masutaka-hoge/*\", \"Principal\": \"*\" }, { \"Sid\": \"Stmt9876543210\", \"Action\": [ \"s3:GetObject\" ], \"Effect\": \"Deny\", \"Resource\": \"arn:aws:s3:::masutaka-hoge/bbb/*\", \"Condition\": { \"NotIpAddress\": { \"aws:SourceIp\": \"AAA.BBB.CCC.DDD\" } }, \"Principal\": \"*\" } ] } S3 の Console の Bucket の Permissions → Bucket Policy で上記ポリ","link":"https://masutaka.net/2017-11-10-1/","isoDate":"2017-11-10T00:00:00.000Z","dateMiliSeconds":1510272000000,"authorName":"masutaka"},{"title":"『オブジェクト指向設計実践ガイド』読書会での感想メモ","content":"6/1 から 8/24 まで、フィードフォース社内で『オブジェクト指向設計実\n践ガイド』の読書会を主催しました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ↑ これはブログ記事に使うための先行 Tweet でした。やっと使えたw\n都度メモを取って会社の Slack channel に書いていたのですが、公開の\nタイミングを逃して後悔していました。そんな折、kano-e さんが会社の\n新生開発者ブログに記事をポスト。\n 空気を読まずに私もポストします。個人ブログに。本当に五月雨式のメモ\nで自分向けです。\n第１章 オブジェクト指向設計 まだ意識が高まっておらず、感想を書いていなかった。プロローグ的な章。\n第２章 単一責任のクラスを設計する これらが当たり前に出来るスキルが必要だと思った。\n 健康的な書き方をほかのプログラマーに促進するコードを書く atter_reader 等を介して、複雑か簡単かどうかさえも見せないように\n隠蔽する リファクタリングでメソッドへの切り出しをすることで、クラスの責務\nを明確にする 決断を先延ばしにする  第３章 依存関係を管理する  DI 初登場！！ 第３章は P19 の『オブジェクト指向設計とは、「依存関係を管理する\nこと」です。』を具体的に説明した章 とにかく依存関係を減らすことが重要  DI メソッドでキーワード引数を使うことで、パラメータの順序依存をなくす ファクトリパターンを使った外部インターフェイスのラッピング  あまりに複雑だと、ラッピングしすぎないほうが良いことも   自身より変更しないものに依存しなさい Ruby にはインターフェイスがないので、エンジニアのスキルがな","contentSnippet":"6/1 から 8/24 まで、フィードフォース社内で『オブジェクト指向設計実践ガイド』の読書会を主催しました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ↑ これはブログ記事に使うための先行 Tweet でした。やっと使えたw都度メモを取って会社の Slack channel に書いていたのですが、公開のタイミングを逃して後悔していました。そんな折、kano-e さんが会社の新生開発者ブログに記事をポスト。 空気を読まずに私もポストします。個人ブログに。本当に五月雨式のメモで自分向けです。第１章 オブジェクト指向設計 まだ意識が高まっておらず、感想を書いていなかった。プロローグ的な章。第２章 単一責任のクラスを設計する これらが当たり前に出来るスキルが必要だと思った。 健康的な書き方をほかのプログラマーに促進するコードを書く atter_reader 等を介して、複雑か簡単かどうかさえも見せないように隠蔽する リファクタリングでメソッドへの切り出しをすることで、クラスの責務を明確にする 決断を先延ばしにする  第３章 依存関係を管理する  DI 初登場！！ 第３章は P19 の『オブジェクト指向設計とは、「依存関係を管理すること」です。』を具体的に説明した章 とにかく依存関係を減らすことが重要  DI メソッドでキーワード引数を使うことで、パラメータの順序依存をなくす ファクトリパターンを使った外部インターフェイスのラッピング  あまりに複雑だと、ラッピングしすぎないほうが良いことも   自身より変更しないものに依存しなさい Ruby にはインターフェイスがないので、エンジニアのスキルがな","link":"https://masutaka.net/2017-11-01-1/","isoDate":"2017-11-01T00:00:00.000Z","dateMiliSeconds":1509494400000,"authorName":"masutaka"},{"title":"『スターティングGo言語』を読んだ","content":"大変良い本でした。Kindle 版を購入しました。\n 1 年前に買って積んでいたのは勿体なかったですが、最近ようやく\ngolang と向き合うようになったので、致し方なしか。\n対応バージョンは 1.6 で最新の 1.9 より古いですが、golang は後方互\n換性は保たれているので、あまり問題ないかと。\n型や構文、よく使われるパッケージの説明など、網羅的に書いてあります。\nネット上の情報をつまむくらいなら、この本で学んだほうが良いと思いま\nすよ&hellip;。&gt; 過去の自分\n一番良かったところ 私は元々組み込みエンジニアで、clang に馴染みがあります。そういう意\n味では、golang は馴染みやすくはあるのですが、ポインタまわりがどう\nもしっくり来ませんでした。\nこの本を読んで、その辺りを理解できて大変良かったです。\n・(*p)[i] の省略が p[i] であるなど、ポインタ記法を省略できる\n・参照型（スライス、マップ、チャネル）はポインタを取り扱う型である\n・配列は値、スライスは参照型。性質は 180 度異なる\n・配列は値であるため、代入ではすべての要素のコピー（clang だとポイ\nンタの代入）\n・同じ理由で、関数の引数に渡すとコピーが作られ渡される\n中でも、見た目が似ている配列とスライスが裏では全く違うことを知り、\n腑に落ちました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  string 型は参照型ではありませんが、Immutable なポインタのような不\n思議な振る舞いをします（clang だとほぼポインタ）。\n・string 型は内部的に「文字列の実体へのポインタ」と「文字列のバイ\nト長」によって構成\n・string 型の値を、変数への再代入や関数の引数として使った場合であっ\nても、文字列の実体が別のメモリ領域にコピーされることはない","contentSnippet":"大変良い本でした。Kindle 版を購入しました。 1 年前に買って積んでいたのは勿体なかったですが、最近ようやくgolang と向き合うようになったので、致し方なしか。対応バージョンは 1.6 で最新の 1.9 より古いですが、golang は後方互換性は保たれているので、あまり問題ないかと。型や構文、よく使われるパッケージの説明など、網羅的に書いてあります。ネット上の情報をつまむくらいなら、この本で学んだほうが良いと思いますよ…。> 過去の自分一番良かったところ 私は元々組み込みエンジニアで、clang に馴染みがあります。そういう意味では、golang は馴染みやすくはあるのですが、ポインタまわりがどうもしっくり来ませんでした。この本を読んで、その辺りを理解できて大変良かったです。・(*p)[i] の省略が p[i] であるなど、ポインタ記法を省略できる・参照型（スライス、マップ、チャネル）はポインタを取り扱う型である・配列は値、スライスは参照型。性質は 180 度異なる・配列は値であるため、代入ではすべての要素のコピー（clang だとポインタの代入）・同じ理由で、関数の引数に渡すとコピーが作られ渡される中でも、見た目が似ている配列とスライスが裏では全く違うことを知り、腑に落ちました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  string 型は参照型ではありませんが、Immutable なポインタのような不思議な振る舞いをします（clang だとほぼポインタ）。・string 型は内部的に「文字列の実体へのポインタ」と「文字列のバイト長」によって構成・string 型の値を、変数への再代入や関数の引数として使った場合であっても、文字列の実体が別のメモリ領域にコピーされることはない","link":"https://masutaka.net/2017-10-30-1/","isoDate":"2017-10-30T00:00:00.000Z","dateMiliSeconds":1509321600000,"authorName":"masutaka"},{"title":"github-nippou を golang で書き換えて v4.0.1 リリースしてました","content":"こちらのブログではアナウンスしてなかったので。\nv4.0.0 のリリースノートになります。\nhttps://github.com/masutaka/github-nippou/releases/tag/v4.0.0 その後 v4.0.1 も出しました。\nhttps://github.com/masutaka/github-nippou/releases/tag/v4.0.1 体感として速くなったことと、Homebrew のエコシステムに乗れたことが、\n自分としてもメリットに感じています。\nリファクタリングしないと&hellip;。","contentSnippet":"こちらのブログではアナウンスしてなかったので。v4.0.0 のリリースノートになります。https://github.com/masutaka/github-nippou/releases/tag/v4.0.0 その後 v4.0.1 も出しました。https://github.com/masutaka/github-nippou/releases/tag/v4.0.1 体感として速くなったことと、Homebrew のエコシステムに乗れたことが、自分としてもメリットに感じています。リファクタリングしないと…。","link":"https://masutaka.net/2017-10-22-1/","isoDate":"2017-10-22T00:00:00.000Z","dateMiliSeconds":1508630400000,"authorName":"masutaka"},{"title":"async.el 使ったら helm-github-stars.el を変更せずに非同期化できた","content":"helm-github-stars.el という便利な Emacs Lisp ツールがあります。\n「自分がつけた GitHub の Star」や「自分または Organization 所有の\nリポジトリ」等を Helm interface で操作できます。\n「Star 付けたリポジトリがあったけど、なんて名前だったかなー」\nなんて時に、素早く検索してブラウザで開けたりします。便利です。\n課題 helm-github-stars.el は便利なのですが、キャッシュファイル\n（~/.emacs.d/hgs-cache）を作る hgs/generate-cache-file() は\n同期処理関数です。Emacs built-in の url-retrieve-synchronously()\nを使っています。\nうっかり M-x helm-github-stars すると、数十秒待たされます。辛いです。\n※ helm-github-stars-refetch-time を設定に基づき、\nM-x helm-github-stars のタイミングでキャッシュファイルが更新されます。\nそういうわけで、最近は当該キーバインドをコメントアウトしている状態\nでした。\nつい先日の木曜日。重い腰を上げて、非同期処理版の\nhgs/generate-cache-file() を作ろうとしました。でも、Star と Repo\n両方の API を呼ぶ必要があり、なかなかに複雑です。コーディングが進\nみません。\nそんな中見つけたのが async.el でした。\nasync.el   今回使ったのは、async.el に含まれる async-start() です。\n async-start START-FUNC FINISH-FUNC\n  START-FUNC は子プロセスの Emacs で実行される FINISH-FUNC は現在の Emacs で実行される  上記のとおり、このライブラリはなんと Emacs の子プロセスとして、も","contentSnippet":"helm-github-stars.el という便利な Emacs Lisp ツールがあります。「自分がつけた GitHub の Star」や「自分または Organization 所有のリポジトリ」等を Helm interface で操作できます。「Star 付けたリポジトリがあったけど、なんて名前だったかなー」なんて時に、素早く検索してブラウザで開けたりします。便利です。課題 helm-github-stars.el は便利なのですが、キャッシュファイル（~/.emacs.d/hgs-cache）を作る hgs/generate-cache-file() は同期処理関数です。Emacs built-in の url-retrieve-synchronously()を使っています。うっかり M-x helm-github-stars すると、数十秒待たされます。辛いです。※ helm-github-stars-refetch-time を設定に基づき、M-x helm-github-stars のタイミングでキャッシュファイルが更新されます。そういうわけで、最近は当該キーバインドをコメントアウトしている状態でした。つい先日の木曜日。重い腰を上げて、非同期処理版のhgs/generate-cache-file() を作ろうとしました。でも、Star と Repo両方の API を呼ぶ必要があり、なかなかに複雑です。コーディングが進みません。そんな中見つけたのが async.el でした。async.el   今回使ったのは、async.el に含まれる async-start() です。 async-start START-FUNC FINISH-FUNC  START-FUNC は子プロセスの Emacs で実行される FINISH-FUNC は現在の Emacs で実行される  上記のとおり、このライブラリはなんと Emacs の子プロセスとして、も","link":"https://masutaka.net/2017-10-21-1/","isoDate":"2017-10-21T00:00:00.000Z","dateMiliSeconds":1508544000000,"authorName":"masutaka"},{"title":"github-nippou という gem を golang で書き直したという発表をした","content":"<p>こんにちは。増田（<a href=\"http://blog.hatena.ne.jp/masutaka26/\" class=\"hatena-id-icon\"><img src=\"https://cdn1.www.st-hatena.com/users/ma/masutaka26/profile.gif\" width=\"16\" height=\"16\" alt=\"\" class=\"hatena-id-icon\">id:masutaka26</a>）です。社内勉強会の順番が来ると、２ヶ月前くらいからソワソワしてきます。</p>\n\n<p>そんなわけで今回は『日報を golang で支える技術』というお題で発表しました。</p>\n\n<h2>発表の内容</h2>\n\n<script async class=\"speakerdeck-embed\" data-id=\"b96e99d03504492f85e58bff0c8d1171\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<p>以下、スライドからの抜粋です。</p>\n\n<ul>\n<li>背景など\n\n<ul>\n<li><a href=\"https://masutaka.net/chalow/2016-04-09-1.html\">以前の社内勉強会で github-nippou という gem を紹介した</a></li>\n<li>ひとつの ruby スクリプトからそこそこ作り込み、毎日便利に使っている</li>\n<li>先日も同僚の <a href=\"https://github.com/ryz310\">@ryz310</a> から pull request をもらって、さらに便利になった</li>\n<li>からの、golang への書き換えをした。その場でライブリリース</li>\n</ul>\n</li>\n<li>モチベーション\n\n<ul>\n<li>以前 <a href=\"https://github.com/github/hub/releases/tag/v2.2.0\">hub コマンドが ruby から golang に移行した</a>のを見て、一度やってみたかった</li>\n<li>rubygems の CLI を Dockerize してポータビリティを高めるのは何かが違うという気持ち</li>\n<li><a href=\"https://github.com/ryz310\">@ryz310</a> からもらった元気</li>\n</ul>\n</li>\n<li>当たり前だけど、全て代わりの方法を調べて実装しなければいけなかった\n\n<ul>\n<li>octokit → go-github, thor → cobra など。Assets の取り扱いも変わる</li>\n</ul>\n</li>\n<li>良かったこと\n\n<ul>\n<li>１バイナリになったのでインストールやアップデートが容易になった</li>\n<li>パフォーマンスも予想外に上がった（当社比約２倍）\n\n<ul>\n<li>以前調べた時は GitHub への API アクセスがボトルネックだったので、そこまで変わらないと思っていた</li>\n</ul>\n</li>\n<li>結果的にいろんなライブラリを使えて、良い素振りになった</li>\n</ul>\n</li>\n<li>困ったこと\n\n<ul>\n<li>とにかく関数が長くなりがち</li>\n<li>getXXX() 多くなりすぎ</li>\n<li>ファイル分割の意味</li>\n<li>書けば書くほど golang っぽい書き方が分からなくなる</li>\n<li>OOP ではないことへの戸惑い</li>\n<li>ruby が柔軟すぎて移植は難しかった。オススメはしない</li>\n</ul>\n</li>\n<li>疑問など\n\n<ul>\n<li>class設計で便利だった、private method の代わり\n\n<ul>\n<li>設計し直すべきか</li>\n<li>classを 使わなかった頃の JS の知見を知りたい</li>\n</ul>\n</li>\n<li>ビジネスロジックのパッケージ名はどうすれば\n\n<ul>\n<li>今回は lib にした</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>感想\n\n<ul>\n<li>今後、rubygems で CLI ツールを作ることはないと思う。継続利用を考えると勧めづらい</li>\n<li>golang は単一ファイルでの実装と実行に一番ハードルが低い気がしている\n\n<ul>\n<li>もっと楽な言語あったら教えて</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>今後の予定\n\n<ul>\n<li>golang っぽい書き方にする</li>\n<li>もっとテストを書く</li>\n<li>golang on Lambda や API サーバも学習する</li>\n<li>『<a href=\"https://www.amazon.co.jp/dp/B01FH3KRTI\">スターティングGo言語</a>』を読み切る</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>結果</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163806.png\" alt=\"f:id:masutaka26:20171014163806p:plain\" title=\"f:id:masutaka26:20171014163806p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>↓</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163802.png\" alt=\"f:id:masutaka26:20171014163802p:plain\" title=\"f:id:masutaka26:20171014163802p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><a href=\"https://github.com/masutaka/github-nippou\">https://github.com/masutaka/github-nippou</a></p>\n\n<h2>発表の感想</h2>\n\n<p>付箋紙に感想を書いてくれました。<i class=\"blogicon-comment\" aria-hidden=\"true\"></i> は私からのコメントです。</p>\n\n<ul>\n<li>クラス設計周りの話は自分も悩んでいます\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ライブラリとか読んで学習します！</li>\n</ul>\n</li>\n<li>GraphQL 対応の PR 出すぞ\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> お待ちしております！</li>\n</ul>\n</li>\n<li>Go の GraphQL のクライアント側はまだなさそう\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> <a href=\"https://github.com/graphql-go/graphql\">github.com/graphql-go/graphql</a> を見つけました。API リクエストを 1 回に出来るのかな？</li>\n</ul>\n</li>\n<li>CLI は ruby &lt; golang わかる。mruby も良いかも\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> mruby はエコシステムが大変そうで...</li>\n</ul>\n</li>\n<li>Makefile 参考にします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> あざす！</li>\n</ul>\n</li>\n<li>Makefile 全く分からない... 勉強しないと！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 基本だったら１日くらいで分かりますよ。make はビルドを必要な時だけに抑えられるので良いです</li>\n</ul>\n</li>\n<li>流石ますたかさん とても面白く熱量ある発表でした\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ありがとうございます。熱量は大事にしてます</li>\n</ul>\n</li>\n<li>神回ですね\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もっと技術レベル上げていきます！</li>\n</ul>\n</li>\n<li>刺激を受けるいい話だった\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 刺激を与えるのがエンジニアとして使命のひとつだと思っています</li>\n</ul>\n</li>\n<li>スピード up は nice 発見\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ですね</li>\n</ul>\n</li>\n<li><p>やっぱりはやくなるものなんだなー</p>\n\n<p>  <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160652.jpg\" alt=\"f:id:masutaka26:20171014160652j:plain\" title=\"f:id:masutaka26:20171014160652j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 速いだけでテンションが上がります</li>\n</ul>\n</li>\n<li>golang 熱の高まり・・・！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> やりましょう！</li>\n</ul>\n</li>\n<li>go モチベーションの高さの理由が分かりました！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もう必死ですよ</li>\n</ul>\n</li>\n<li>ずっと Go 書いてたのはこれだったのかー（棒）\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> そうなんですよー（棒）</li>\n</ul>\n</li>\n<li>Go 書きたい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 今書きましょう！</li>\n</ul>\n</li>\n<li><p>ゴー書いてく！！</p>\n\n<p>  <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014160710.jpg\" alt=\"f:id:masutaka26:20171014160710j:plain\" title=\"f:id:masutaka26:20171014160710j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ｱ､ﾊｲ</li>\n</ul>\n</li>\n<li>ざんねん！！わたし（@ryz310）の PR はここでおわってしまった！！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> またお待ちしております！（笑）</li>\n</ul>\n</li>\n<li>バイナリ配布うれしい！\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> ユーザの皆様のことを第一に考えております</li>\n</ul>\n</li>\n<li>CLI は golang <del>Web やる気にはなら…</del>\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> 配布を考えるとそうですねー。今は GitHub でリリースしておけば、Homebrew や zplug など配布手段はいろいろありますし</li>\n</ul>\n</li>\n<li>ディストリビューション大変だなー\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> gox で簡単に並列ビルドできるので、それほど大変ではなかったですね</li>\n</ul>\n</li>\n<li>知見 ライブデプロイ is つらい\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> もうハラハラドキドキですよ</li>\n</ul>\n</li>\n<li>ライブデプロイメント\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> やはり初回の CI は絶対失敗しますね...</li>\n</ul>\n</li>\n<li>（社内 Slack の）#golang を今後ともよろしくお願いします\n\n<ul>\n<li><i class=\"blogicon-comment\" aria-hidden=\"true\"></i> こちらこそ！</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>最後に</h2>\n\n<p>とにかく設計が目下の悩みです。良い情報があれば教えてください！</p>\n","contentSnippet":"こんにちは。増田（id:masutaka26）です。社内勉強会の順番が来ると、２ヶ月前くらいからソワソワしてきます。そんなわけで今回は『日報を golang で支える技術』というお題で発表しました。発表の内容以下、スライドからの抜粋です。背景など以前の社内勉強会で github-nippou という gem を紹介したひとつの ruby スクリプトからそこそこ作り込み、毎日便利に使っている先日も同僚の @ryz310 から pull request をもらって、さらに便利になったからの、golang への書き換えをした。その場でライブリリースモチベーション以前 hub コマンドが ruby から golang に移行したのを見て、一度やってみたかったrubygems の CLI を Dockerize してポータビリティを高めるのは何かが違うという気持ち@ryz310 からもらった元気当たり前だけど、全て代わりの方法を調べて実装しなければいけなかったoctokit → go-github, thor → cobra など。Assets の取り扱いも変わる良かったこと１バイナリになったのでインストールやアップデートが容易になったパフォーマンスも予想外に上がった（当社比約２倍）以前調べた時は GitHub への API アクセスがボトルネックだったので、そこまで変わらないと思っていた結果的にいろんなライブラリを使えて、良い素振りになった困ったこととにかく関数が長くなりがちgetXXX() 多くなりすぎファイル分割の意味書けば書くほど golang っぽい書き方が分からなくなるOOP ではないことへの戸惑いruby が柔軟すぎて移植は難しかった。オススメはしない疑問などclass設計で便利だった、private method の代わり設計し直すべきかclassを 使わなかった頃の JS の知見を知りたいビジネスロジックのパッケージ名はどうすれば今回は lib にした感想今後、rubygems で CLI ツールを作ることはないと思う。継続利用を考えると勧めづらいgolang は単一ファイルでの実装と実行に一番ハードルが低い気がしているもっと楽な言語あったら教えて今後の予定golang っぽい書き方にするもっとテストを書くgolang on Lambda や API サーバも学習する『スターティングGo言語』を読み切る結果↓https://github.com/masutaka/github-nippou発表の感想付箋紙に感想を書いてくれました。 は私からのコメントです。クラス設計周りの話は自分も悩んでいます ライブラリとか読んで学習します！GraphQL 対応の PR 出すぞ お待ちしております！Go の GraphQL のクライアント側はまだなさそう github.com/graphql-go/graphql を見つけました。API リクエストを 1 回に出来るのかな？CLI は ruby < golang わかる。mruby も良いかも mruby はエコシステムが大変そうで...Makefile 参考にします あざす！Makefile 全く分からない... 勉強しないと！！ 基本だったら１日くらいで分かりますよ。make はビルドを必要な時だけに抑えられるので良いです流石ますたかさん とても面白く熱量ある発表でした ありがとうございます。熱量は大事にしてます神回ですね もっと技術レベル上げていきます！刺激を受けるいい話だった 刺激を与えるのがエンジニアとして使命のひとつだと思っていますスピード up は nice 発見 ですねやっぱりはやくなるものなんだなー   速いだけでテンションが上がりますgolang 熱の高まり・・・！！ やりましょう！go モチベーションの高さの理由が分かりました！！ もう必死ですよずっと Go 書いてたのはこれだったのかー（棒） そうなんですよー（棒）Go 書きたい 今書きましょう！ゴー書いてく！！   ｱ､ﾊｲざんねん！！わたし（@ryz310）の PR はここでおわってしまった！！ またお待ちしております！（笑）バイナリ配布うれしい！ ユーザの皆様のことを第一に考えておりますCLI は golang Web やる気にはなら… 配布を考えるとそうですねー。今は GitHub でリリースしておけば、Homebrew や zplug など配布手段はいろいろありますしディストリビューション大変だなー gox で簡単に並列ビルドできるので、それほど大変ではなかったですね知見 ライブデプロイ is つらい もうハラハラドキドキですよライブデプロイメント やはり初回の CI は絶対失敗しますね...（社内 Slack の）#golang を今後ともよろしくお願いします こちらこそ！最後にとにかく設計が目下の悩みです。良い情報があれば教えてください！","link":"https://developer.feedforce.jp/entry/2017/10/16/150000","isoDate":"2017-10-16T06:00:00.000Z","dateMiliSeconds":1508133600000,"imageUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/masutaka26/20171014/20171014163802.png","authorName":"masutaka"},{"title":"golang の並列処理を Ruby と比較しながら学ぶ","content":"一ヶ月ほど前に社内のインフラ共有会でタイトルの話をしました。記録の\nために記事を書いておきます。\nGist に置いてある ので、コードは git clone で取得可能です。\n$ git clone https://gist.github.com/c0a4234a5264c89655c40adcf7c27cb2.git Ruby 例えば Ruby で 30 個の処理をするコードがあったとします。こんな素朴\nなコードです。それぞれ 3 秒かかる処理が 30 あるので、とても遅いです。\n Thread を使って 5 並列にしました。明らかに速くなりました。\nついでにそれぞれの結果（というほどのものではありませんが）を\nresults に代入し、最後にまとめて表示しました。\nresults は共有リソースになるので、Thread::Mutex#synchronize でロッ\nクをかけて安全に書き込んでいます。ロックをかけないと results に同\n時に書き込まれるケースを救うことが出来ません。\n parallel gem を使うと、ずいぶんとすっきり書くことが出来ます。\n golang 直列処理に関しては、Ruby と同様に素朴です。goroutineNum（あとで説\n明します）は常に 1 です。\n 何も考えずに heavyProcess() を goroutine で動かします。19 行目に\n&ldquo;go &quot; を追加しただけです。驚いたことに何も表示されずに終了します。\n 実は何も表示されなかったのは、goroutine の終了を待たずに main() が\n終了してしまったためです。シェルのバックグラウンド実行（&amp;）とよく\n似ていると思いました。\n今度は sync パッケージを使って、goroutine の終了を待ちましたが、","contentSnippet":"一ヶ月ほど前に社内のインフラ共有会でタイトルの話をしました。記録のために記事を書いておきます。Gist に置いてある ので、コードは git clone で取得可能です。$ git clone https://gist.github.com/c0a4234a5264c89655c40adcf7c27cb2.git Ruby 例えば Ruby で 30 個の処理をするコードがあったとします。こんな素朴なコードです。それぞれ 3 秒かかる処理が 30 あるので、とても遅いです。 Thread を使って 5 並列にしました。明らかに速くなりました。ついでにそれぞれの結果（というほどのものではありませんが）をresults に代入し、最後にまとめて表示しました。results は共有リソースになるので、Thread::Mutex#synchronize でロックをかけて安全に書き込んでいます。ロックをかけないと results に同時に書き込まれるケースを救うことが出来ません。 parallel gem を使うと、ずいぶんとすっきり書くことが出来ます。 golang 直列処理に関しては、Ruby と同様に素朴です。goroutineNum（あとで説明します）は常に 1 です。 何も考えずに heavyProcess() を goroutine で動かします。19 行目に“go \" を追加しただけです。驚いたことに何も表示されずに終了します。 実は何も表示されなかったのは、goroutine の終了を待たずに main() が終了してしまったためです。シェルのバックグラウンド実行（&）とよく似ていると思いました。今度は sync パッケージを使って、goroutine の終了を待ちましたが、","link":"https://masutaka.net/2017-10-15-1/","isoDate":"2017-10-15T00:00:00.000Z","dateMiliSeconds":1508025600000,"authorName":"masutaka"},{"title":"『応仁の乱』を読んだ","content":"少し前に読み終えました。読むのに３ヶ月以上かかったり、登場人物多す\nぎで且つ、姓を省略されることが多いため、間違った知識もあるかもしれ\nないけど一応メモ。\n原因は将軍家の後継者争いとか言われているが、実際はもっとぐちゃぐ\nちゃ。\n将軍（幕府）が強権を発動して収束させてもいないし、対処も間違ってい\nたり中途半端だったりで、カオスがカオスを呼んでいく。結果、10 年を\n超える大乱になった。\n今でもこんな話があるとかないとか。\n京都の人が“先の戦争”というとき、応仁の乱を指すというのは本当ですか？ &hellip; - Yahoo!知恵袋 戦国時代後期を多少知っているくらいの知識だと、応仁の乱に出てくる武\n将（家）は知らない人だらけなのも分かった。細川氏くらいしか馴染みが\nない。あと、畠山氏は影薄くなりすぎ。\n 守護は京都在住を義務付けられていたため、地方は守護代にお任せ 応仁の乱が勃発し対応に追われる。消耗＆疲弊しまくり 乱が終わる頃には守護代に国を乗っ取られる。その他のケースもあるらしい  という流れらしい。そういえば織田氏の元の主人は斯波氏であった。\nまた読んで理解を深めたいところだが、登場人物の相関図なしに読む気に\nはならない。。。\n ","contentSnippet":"少し前に読み終えました。読むのに３ヶ月以上かかったり、登場人物多すぎで且つ、姓を省略されることが多いため、間違った知識もあるかもしれないけど一応メモ。原因は将軍家の後継者争いとか言われているが、実際はもっとぐちゃぐちゃ。将軍（幕府）が強権を発動して収束させてもいないし、対処も間違っていたり中途半端だったりで、カオスがカオスを呼んでいく。結果、10 年を超える大乱になった。今でもこんな話があるとかないとか。京都の人が“先の戦争”というとき、応仁の乱を指すというのは本当ですか？ … - Yahoo!知恵袋 戦国時代後期を多少知っているくらいの知識だと、応仁の乱に出てくる武将（家）は知らない人だらけなのも分かった。細川氏くらいしか馴染みがない。あと、畠山氏は影薄くなりすぎ。 守護は京都在住を義務付けられていたため、地方は守護代にお任せ 応仁の乱が勃発し対応に追われる。消耗＆疲弊しまくり 乱が終わる頃には守護代に国を乗っ取られる。その他のケースもあるらしい  という流れらしい。そういえば織田氏の元の主人は斯波氏であった。また読んで理解を深めたいところだが、登場人物の相関図なしに読む気にはならない。。。","link":"https://masutaka.net/2017-09-24-1/","isoDate":"2017-09-24T00:00:00.000Z","dateMiliSeconds":1506211200000,"authorName":"masutaka"},{"title":"ZenHub と GitHub の Issue/PR URL をトグルするブックマークレットを作った","content":"Using ZenHub on web and mobile devices 先日 ZenHub の Web app 版 https://app.zenhub.com がリリースされま\nした。機能はほとんど同じですが、例えば milestone を close 出来るの\nは Web app 版だけだったり、細かな違いはあります。\nChrome extension 版 と違って、動作が軽快っぽいので使おうとしました\nが、PR や Issue のページも彼らで作り込んでしまい、正直それは使いた\nくない。\nそこでブックマークレットを作ってみました。このようにトグルします。\nhttps://github.com/masutaka/github-nippou/issues/59 ↓↑\nhttps://app.zenhub.com/workspace/o/masutaka/github-nippou/issues/59 私はブラウザのブックマークに &ldquo;zen&lt;=&gt;git&rdquo; という名前で登録しました。\njavascript:if (location.href.match(&#34;app.zenhub.com/workspace/o&#34;)) { location.href=location.href.replace(&#34;app.zenhub.com/workspace/o&#34; , &#34;github.com&#34;) } else { location.href=location.href.replace(&#34;github.com&#34;, &#34;app.zenhub.com/workspace/o&#34; ).replace(&#34;pull&#34;, &#34;issues&#34;) } ブックマークレット便利！","contentSnippet":"Using ZenHub on web and mobile devices 先日 ZenHub の Web app 版 https://app.zenhub.com がリリースされました。機能はほとんど同じですが、例えば milestone を close 出来るのは Web app 版だけだったり、細かな違いはあります。Chrome extension 版 と違って、動作が軽快っぽいので使おうとしましたが、PR や Issue のページも彼らで作り込んでしまい、正直それは使いたくない。そこでブックマークレットを作ってみました。このようにトグルします。https://github.com/masutaka/github-nippou/issues/59 ↓↑https://app.zenhub.com/workspace/o/masutaka/github-nippou/issues/59 私はブラウザのブックマークに “zen<=>git” という名前で登録しました。javascript:if (location.href.match(\"app.zenhub.com/workspace/o\")) { location.href=location.href.replace(\"app.zenhub.com/workspace/o\" , \"github.com\") } else { location.href=location.href.replace(\"github.com\", \"app.zenhub.com/workspace/o\" ).replace(\"pull\", \"issues\") } ブックマークレット便利！","link":"https://masutaka.net/2017-08-31-1/","isoDate":"2017-08-31T00:00:00.000Z","dateMiliSeconds":1504137600000,"authorName":"masutaka"},{"title":"github-nippou v3.0.0 released","content":"v3.0.0 から出力フォーマットをカスタマイズ出来るようになりました。\n@ryz310 に大感謝です！\nリリースノートは以下をどうぞ。\nhttps://github.com/masutaka/github-nippou/releases/tag/v3.0.0 新しいサブコマンド init を実行すると、デフォルト設定 から新しい\nGist を作り、その後はその設定が参照されます。\n参考までに私の設定はこちら です。subject を h3 から h4 に変えている\nのと、GitHub ユーザ名をリンクにしています。\n副作用として v2 と同じフォーマットでは出力できなくなりました。\nご不便をおかけしたらすみません。\n他の機能としては以下になります。\n・新しいサブコマンド open-settings\n前述の Gist URL をデフォルトブラウザで開きます。設定していなければ、\nデフォルトの GitHub URL を開きます。\n・Docker サポート\n依存 Gem が増えてきたので、Dockerize してみました。ラッパースクリ\nプト docker-github-nippou を介して使うと良いです。ただし、Launchy を使う関係で、サブコマンド open-settings は使えません。","contentSnippet":"v3.0.0 から出力フォーマットをカスタマイズ出来るようになりました。@ryz310 に大感謝です！リリースノートは以下をどうぞ。https://github.com/masutaka/github-nippou/releases/tag/v3.0.0 新しいサブコマンド init を実行すると、デフォルト設定 から新しいGist を作り、その後はその設定が参照されます。参考までに私の設定はこちら です。subject を h3 から h4 に変えているのと、GitHub ユーザ名をリンクにしています。副作用として v2 と同じフォーマットでは出力できなくなりました。ご不便をおかけしたらすみません。他の機能としては以下になります。・新しいサブコマンド open-settings前述の Gist URL をデフォルトブラウザで開きます。設定していなければ、デフォルトの GitHub URL を開きます。・Docker サポート依存 Gem が増えてきたので、Dockerize してみました。ラッパースクリプト docker-github-nippou を介して使うと良いです。ただし、Launchy を使う関係で、サブコマンド open-settings は使えません。","link":"https://masutaka.net/2017-08-07-1/","isoDate":"2017-08-07T00:00:00.000Z","dateMiliSeconds":1502064000000,"authorName":"masutaka"},{"title":"『サーバーレスシングルページアプリケーション』を読んだ","content":"[2017-07-05-1] のあとすぐ読み始めたので、およそ一ヶ月。長い旅であっ\nた&hellip;。\nきっかけは [2017-03-12-1] の JAWS DAYS 2017 での吉田さんのセッショ\nン。今まで Lambda, DynamoDB, Cognito のどれも、つまみ食いしかして\n来なかったので「これだ！」と思い予約注文しました。\nあわよくば、年始の Vue.js 以降停止していた JS をやり始められたら良\nいかなと。\n１章からいきなり S3 にデプロイし始めて、胸が熱くなるのを感じました。\n２章のルータ関数や３章のテンプレートなど、jQuery でもわりときれい\nに書けるんだなと感心しました。\n※ 「はじめに」のページ xii にはこの本で React や Angular を選択し\nなかった理由が書いてあります。\nただ、その後の４章から雲行きが怪しくなりました。非同期プログラミン\nグに慣れていないので、その function がいつ実行されるのか分からない\n箇所が多々。\n弊社の尖りまくったフロントエンドエンジニアに聞こうにも、\njQuery.Deferred の質問はなんとなくためらわれ&hellip;。\n読み終わって、残念ながら Lambda, API Gateway, DynamoDB, Cognito を\nふんわり触ったくらいしか印象が残りませんでした。期待値が大きすぎた\n感があります。\n私に刺さらなかった理由 理由を考えてみました。\n・JS が難しい\nJS というよりも jQuery を使った非同期プログラミングが、かもしれま\nせん。普段書かないコードなので、理解が困難でした。\n・独自フレームワーク sspa\n実体はシェルスクリプト ですが。悪い意味でブラックボックスになってお\nり、読後に「これを使って SPA 作るぞ！」という気持ちにはなれません","contentSnippet":"[2017-07-05-1] のあとすぐ読み始めたので、およそ一ヶ月。長い旅であった…。きっかけは [2017-03-12-1] の JAWS DAYS 2017 での吉田さんのセッション。今まで Lambda, DynamoDB, Cognito のどれも、つまみ食いしかして来なかったので「これだ！」と思い予約注文しました。あわよくば、年始の Vue.js 以降停止していた JS をやり始められたら良いかなと。１章からいきなり S3 にデプロイし始めて、胸が熱くなるのを感じました。２章のルータ関数や３章のテンプレートなど、jQuery でもわりときれいに書けるんだなと感心しました。※ 「はじめに」のページ xii にはこの本で React や Angular を選択しなかった理由が書いてあります。ただ、その後の４章から雲行きが怪しくなりました。非同期プログラミングに慣れていないので、その function がいつ実行されるのか分からない箇所が多々。弊社の尖りまくったフロントエンドエンジニアに聞こうにも、jQuery.Deferred の質問はなんとなくためらわれ…。読み終わって、残念ながら Lambda, API Gateway, DynamoDB, Cognito をふんわり触ったくらいしか印象が残りませんでした。期待値が大きすぎた感があります。私に刺さらなかった理由 理由を考えてみました。・JS が難しいJS というよりも jQuery を使った非同期プログラミングが、かもしれません。普段書かないコードなので、理解が困難でした。・独自フレームワーク sspa実体はシェルスクリプト ですが。悪い意味でブラックボックスになっており、読後に「これを使って SPA 作るぞ！」という気持ちにはなれません","link":"https://masutaka.net/2017-08-02-1/","isoDate":"2017-08-02T00:00:00.000Z","dateMiliSeconds":1501632000000,"authorName":"masutaka"},{"title":"emacs-helm の標準添付から外された helm-elscreen を Melpa に追加した","content":"emacs-helm/helm@6193cc4 によって、helm-elscreen.el が\nhttps://github.com/emacs-helm/helm-elscreen に切り出されていました。\nElscreen のタブをまとめて閉じるのに重宝しており、若干不便な毎日を\n送っていたので、この度エイヤッと Melpa パッケージを作りました。\n作成記録 初め、https://github.com/melpa/melpa に PR を作ろうとしたら、\nPULL_REQUEST_TEMPLATE.md に Checklist がありました。\nこれを満たすために、helm-elscreen に PR 作成。\nhttps://github.com/emacs-helm/helm-elscreen/pull/1 無事マージされたので、Melpa にパッケージ追加の PR 作成。\nhttps://github.com/melpa/melpa/pull/4828 そこで指摘項目があったので、さらに helm-elscreen を修正。\nhttps://github.com/emacs-helm/helm-elscreen/pull/2 さらに指摘項目があり、helm-elscreen に PR 作ったけど、結果的に要ら\nなくなったやつ。\nhttps://github.com/emacs-helm/helm-elscreen/pull/3 melpa.org 作者の @purcell さんは、昔から丁寧にレビューをしてくれま\nす。本当にありがたいです。パッケージのコードまでレビューするのは、\nものすごく大変だと思う&hellip;。\nただ、多くの PR が作られ、レビューのコストが相当高いせいか、以前は\nなかった PULL_REQUEST_TEMPLATE.md や CONTRIBUTING.md が出来ており、\n割りと大変でした。いやあ、大変だった&hellip;。（自分のパッケージだった\nら、大変じゃないです）\nemacs-helm と melpa.org のハッカーとのやり取りは流石に緊張します。\n先ほどパッケージが出来ました。お楽しみ下さい。\nhttps://melpa.org/#/helm-elscreen おまけ 今確認したら、今回で 9 個目のパッケージ でした。思っていたより多い。\nうち、私の作ったパッケージ(*)が 5 個。","contentSnippet":"emacs-helm/helm@6193cc4 によって、helm-elscreen.el がhttps://github.com/emacs-helm/helm-elscreen に切り出されていました。Elscreen のタブをまとめて閉じるのに重宝しており、若干不便な毎日を送っていたので、この度エイヤッと Melpa パッケージを作りました。作成記録 初め、https://github.com/melpa/melpa に PR を作ろうとしたら、PULL_REQUEST_TEMPLATE.md に Checklist がありました。これを満たすために、helm-elscreen に PR 作成。https://github.com/emacs-helm/helm-elscreen/pull/1 無事マージされたので、Melpa にパッケージ追加の PR 作成。https://github.com/melpa/melpa/pull/4828 そこで指摘項目があったので、さらに helm-elscreen を修正。https://github.com/emacs-helm/helm-elscreen/pull/2 さらに指摘項目があり、helm-elscreen に PR 作ったけど、結果的に要らなくなったやつ。https://github.com/emacs-helm/helm-elscreen/pull/3 melpa.org 作者の @purcell さんは、昔から丁寧にレビューをしてくれます。本当にありがたいです。パッケージのコードまでレビューするのは、ものすごく大変だと思う…。ただ、多くの PR が作られ、レビューのコストが相当高いせいか、以前はなかった PULL_REQUEST_TEMPLATE.md や CONTRIBUTING.md が出来ており、割りと大変でした。いやあ、大変だった…。（自分のパッケージだったら、大変じゃないです）emacs-helm と melpa.org のハッカーとのやり取りは流石に緊張します。先ほどパッケージが出来ました。お楽しみ下さい。https://melpa.org/#/helm-elscreen おまけ 今確認したら、今回で 9 個目のパッケージ でした。思っていたより多い。うち、私の作ったパッケージ(*)が 5 個。","link":"https://masutaka.net/2017-07-10-1/","isoDate":"2017-07-10T00:00:00.000Z","dateMiliSeconds":1499644800000,"authorName":"masutaka"},{"title":"WEB+DB PRESS Vol.99の「実践Kubernetes」の第４章でつまづいたメモ #wdpress","content":"先月からなぜか Kubernetes の素振りをしています。\n職場の若者が先日発売された『WEB+DB PRESS Vol.99』の牧さんの記事、\n「実践Kubernetes」をオススメしていたので、流れで実際に動かしてみま\nした。\nこの記事は先週の『Kubernetes Meetup Tokyo #5』[2017-06-29-1] でも\nオススメされていました。\n 第４章で実際に GKE を使うことになるのですが、記事に書いてあるコマ\nンドや設定はそのままでは動かず、大変難儀しました。誰かの役に立つか\nもしれないので、人知れずメモしておきます。\n注意点 私は Kubernetes（以下 k8s）を使い始めたばかりです。\n今回の件が、記事で使われているバージョン（1.6.1）と、現在 GKE で使\nえるバージョン（1.6.6）の違いによるものなのか、本当に記事が間違っ\nているのか分かっていません。\nどちらにせよ、網羅的に k8s を解説してくれたことには大変感謝してい\nます。おかげさまで、さあ使ってみよう！という気になりました。\n記事のサンプルコードや YAML はサポートサイト からダウンロード出来ま\nす。typo でつまづくのももったいないので、こちらを使うのが良いかも\nしれません。特に今回は YAML が改ページで区切られている箇所があり、\n手打ちは難易度高かったです。← あとからサンプルコードの存在を知奴\nつまづいたメモ それでは順番に記載していきます。\nP94「Podの定義」 記事では $PROJECT_ID がそのまま書かれていましたが、実際は展開する\n必要がありました。注意書きを書いたり、{{PROJECT_ID}} などと環境変\n数とは別のフォーマットを使ったほうが良かったかもしれません。\n直前の cloudbuild.yaml では $PROJECT_ID の展開は必要ないため、気づ\nくのに時間がかかりました。最終的には $ kubectl get pods で確認でき\nる STATUS が InvalidImageName になっており、気づきました。\n--- .","contentSnippet":"先月からなぜか Kubernetes の素振りをしています。職場の若者が先日発売された『WEB+DB PRESS Vol.99』の牧さんの記事、「実践Kubernetes」をオススメしていたので、流れで実際に動かしてみました。この記事は先週の『Kubernetes Meetup Tokyo #5』[2017-06-29-1] でもオススメされていました。 第４章で実際に GKE を使うことになるのですが、記事に書いてあるコマンドや設定はそのままでは動かず、大変難儀しました。誰かの役に立つかもしれないので、人知れずメモしておきます。注意点 私は Kubernetes（以下 k8s）を使い始めたばかりです。今回の件が、記事で使われているバージョン（1.6.1）と、現在 GKE で使えるバージョン（1.6.6）の違いによるものなのか、本当に記事が間違っているのか分かっていません。どちらにせよ、網羅的に k8s を解説してくれたことには大変感謝しています。おかげさまで、さあ使ってみよう！という気になりました。記事のサンプルコードや YAML はサポートサイト からダウンロード出来ます。typo でつまづくのももったいないので、こちらを使うのが良いかもしれません。特に今回は YAML が改ページで区切られている箇所があり、手打ちは難易度高かったです。← あとからサンプルコードの存在を知奴つまづいたメモ それでは順番に記載していきます。P94「Podの定義」 記事では $PROJECT_ID がそのまま書かれていましたが、実際は展開する必要がありました。注意書きを書いたり、{{PROJECT_ID}} などと環境変数とは別のフォーマットを使ったほうが良かったかもしれません。直前の cloudbuild.yaml では $PROJECT_ID の展開は必要ないため、気づくのに時間がかかりました。最終的には $ kubectl get pods で確認できる STATUS が InvalidImageName になっており、気づきました。--- .","link":"https://masutaka.net/2017-07-05-1/","isoDate":"2017-07-05T00:00:00.000Z","dateMiliSeconds":1499212800000,"authorName":"masutaka"},{"title":"Kubernetes Meetup Tokyo #5 に行ってきた #k8sjp","content":"Kubernetes Meetup Tokyo #5 - connpass 今回はこれに尽きました。GKE ちょっと触っただけでの参加は時期尚早だった。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i   ありがたいことに、全体の動画が公開されています。\n[WIP] 運用しているサービスをKubernetes化するかどうか考える by @r_takaishi   GMO ペパボの minne のお話。高石さんお久しぶりです。\n Private Cloud の OpenStack 上に VM インスタンスが 100 台稼働中 1 回のデプロイに 25 分、1 台のスケールに 10 分。遅い コンテナ化したアプリを Kubernetes 上に載せてみた（検証中） デプロイは 10 分に、スケールは 4 分に短縮  Kubernetes 化により技術的課題が解決できそうで、素晴らしいと思った。\n今後の動きが気になる。\nUsing Kubernetes in Production by @koudaiii   AWS の kops 上で Kubernetes を動かして、もう 1 年になるらしい。","contentSnippet":"Kubernetes Meetup Tokyo #5 - connpass 今回はこれに尽きました。GKE ちょっと触っただけでの参加は時期尚早だった。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i   ありがたいことに、全体の動画が公開されています。[WIP] 運用しているサービスをKubernetes化するかどうか考える by @r_takaishi   GMO ペパボの minne のお話。高石さんお久しぶりです。 Private Cloud の OpenStack 上に VM インスタンスが 100 台稼働中 1 回のデプロイに 25 分、1 台のスケールに 10 分。遅い コンテナ化したアプリを Kubernetes 上に載せてみた（検証中） デプロイは 10 分に、スケールは 4 分に短縮  Kubernetes 化により技術的課題が解決できそうで、素晴らしいと思った。今後の動きが気になる。Using Kubernetes in Production by @koudaiii   AWS の kops 上で Kubernetes を動かして、もう 1 年になるらしい。","link":"https://masutaka.net/2017-06-29-1/","isoDate":"2017-06-29T00:00:00.000Z","dateMiliSeconds":1498694400000,"authorName":"masutaka"},{"title":"『プログラマのためのGoogle Cloud Platform入門』を読んだ","content":"このブログはさくらの VPS 上で動いているのですが、ちょっと飽きてき\nたので、GKE (Google Container Engine) にでも移動しようかしら、とい\nうモチベーションで読みました（料金が見合わない気はしているが&hellip;）。\nあと、GCP (Google Cloud Platform) の本自体が珍しく、あわよくば自分\nのスキルを高められるかなとも思いました。今まで BigQuery と GCE\n(Google Compute Engine) を少々しか使ったことしかないため。\n結論から書くと、GCP の初心者向けには良い本だと思いました。ただ、割\nりと初心者向けに書いてあるので、私のように AWS を業務で使っている\nエンジニアには冗長な記述もありました。IP アドレスの説明とか。\nまあでも、話の流れとしては不自然ではないので、さらりと流せば良いと\n思います。\n全体的にこのような構成になっています。完全な目次は公式サイト をどうぞ。\n１章 GCP 自体の説明\n２章 GCE, Cloud SQL, Cloud Storage を使ったサンプルアプリケーションをデプロイ\n３章 Cloud Load Balancing を使ってマルチリージョンにデプロイ\n４章 五目並べゲームを GKE 上にデプロイ\n５章 機械学習を用いた GAE (Google App Engine) アプリケーションのデプロイ等\n付録 Stackdriver を使った監視やロギング、Cloud IAM の説明、GCP の最新情報の入手\n※ ２章のサンプルアプリは付録Aでも使うので、GCE や SQL インスタンス","contentSnippet":"このブログはさくらの VPS 上で動いているのですが、ちょっと飽きてきたので、GKE (Google Container Engine) にでも移動しようかしら、というモチベーションで読みました（料金が見合わない気はしているが…）。あと、GCP (Google Cloud Platform) の本自体が珍しく、あわよくば自分のスキルを高められるかなとも思いました。今まで BigQuery と GCE(Google Compute Engine) を少々しか使ったことしかないため。結論から書くと、GCP の初心者向けには良い本だと思いました。ただ、割りと初心者向けに書いてあるので、私のように AWS を業務で使っているエンジニアには冗長な記述もありました。IP アドレスの説明とか。まあでも、話の流れとしては不自然ではないので、さらりと流せば良いと思います。全体的にこのような構成になっています。完全な目次は公式サイト をどうぞ。１章 GCP 自体の説明２章 GCE, Cloud SQL, Cloud Storage を使ったサンプルアプリケーションをデプロイ３章 Cloud Load Balancing を使ってマルチリージョンにデプロイ４章 五目並べゲームを GKE 上にデプロイ５章 機械学習を用いた GAE (Google App Engine) アプリケーションのデプロイ等付録 Stackdriver を使った監視やロギング、Cloud IAM の説明、GCP の最新情報の入手※ ２章のサンプルアプリは付録Aでも使うので、GCE や SQL インスタンス","link":"https://masutaka.net/2017-06-26-1/","isoDate":"2017-06-26T00:00:00.000Z","dateMiliSeconds":1498435200000,"authorName":"masutaka"},{"title":"AWS Summit Tokyo 2017 に行ってきた #AWSSummit","content":"Day2 だけですが、今年も AWS Summit Tokyo に行ってきました。\n[2014-07-19-1] から始まり、[2015-06-07-1] [2016-06-04-1] と、\n今年で 4 回目の参加になります。\n今回は過去最高の規模なのか、品川プリンスホテルの会場も増えてました。\nグランドプリンスホテルからの移動時間は 10 分ほど。人によっては移動\nが大変だったみたいです。暑かったですし。\n私は聞きたいのがほとんど AWS Dev Day のセッションだったので、午後\nは全部品川プリンスホテルに引き篭もっていました。\n全てのセッションの動画や資料はこちらをどうぞ。\nAWS Summit Tokyo 2017 開催レポート - 基調講演・特別講演 動画・資料一覧｜AWS Day2 基調講演（キーノート）   資料ダウンロード オープニングが例年のDJ田中氏から、三味線からのエレキギター＆バイオ\nリンとのセッションに変わりました。DJ田中氏は Day3,4 ？\n目立っていたのは先日ニュースにもなった、三菱東京UFJ銀行の事例。つ\nいに日本の銀行も AWS 上で動き始めました。とは言え、これから上り調\n子か！と思わせてからのスピーカーの村林氏の今週末退任という流れには、\nさすがに会場がザワッとしていましたw\n去年との違いは Machine Learning 推しかなあ。\n全体的に例年よりも RDS, Lambda など具体的な用語が多いキーノートだっ\nた気がします。そうできる状況になってきたのでしょう。\nあとは Amazon Lightsail 東京リージョンの発表や、大阪ローカルリージョ\nンの来年開設など軽めの発表でした。\n詳細なレポートはクラスメソッドさんの記事をどうぞ。\n【レポート】AWS Summit Tokyo 2017：Day2 基調講演(キーノート) #AWSSummit ｜ Developers.","contentSnippet":"Day2 だけですが、今年も AWS Summit Tokyo に行ってきました。[2014-07-19-1] から始まり、[2015-06-07-1] [2016-06-04-1] と、今年で 4 回目の参加になります。今回は過去最高の規模なのか、品川プリンスホテルの会場も増えてました。グランドプリンスホテルからの移動時間は 10 分ほど。人によっては移動が大変だったみたいです。暑かったですし。私は聞きたいのがほとんど AWS Dev Day のセッションだったので、午後は全部品川プリンスホテルに引き篭もっていました。全てのセッションの動画や資料はこちらをどうぞ。AWS Summit Tokyo 2017 開催レポート - 基調講演・特別講演 動画・資料一覧｜AWS Day2 基調講演（キーノート）   資料ダウンロード オープニングが例年のDJ田中氏から、三味線からのエレキギター＆バイオリンとのセッションに変わりました。DJ田中氏は Day3,4 ？目立っていたのは先日ニュースにもなった、三菱東京UFJ銀行の事例。ついに日本の銀行も AWS 上で動き始めました。とは言え、これから上り調子か！と思わせてからのスピーカーの村林氏の今週末退任という流れには、さすがに会場がザワッとしていましたw去年との違いは Machine Learning 推しかなあ。全体的に例年よりも RDS, Lambda など具体的な用語が多いキーノートだった気がします。そうできる状況になってきたのでしょう。あとは Amazon Lightsail 東京リージョンの発表や、大阪ローカルリージョンの来年開設など軽めの発表でした。詳細なレポートはクラスメソッドさんの記事をどうぞ。【レポート】AWS Summit Tokyo 2017：Day2 基調講演(キーノート) #AWSSummit ｜ Developers.","link":"https://masutaka.net/2017-06-02-1/","isoDate":"2017-06-02T00:00:00.000Z","dateMiliSeconds":1496361600000,"authorName":"masutaka"},{"title":"GitHub Organization をメンテナンスするスクリプトを作った","content":"成り行きで会社の GitHub Organization の管理者業をしています。\nOrganization 配下のリポジトリやユーザが増えてきて、気にかけるのが\n大変になってきたので、メンテナンス用の Ruby スクリプトを作りました。\n  permission.rb 指定した Team パーミッションが付与されていないリポジトリを検索し、\nSlack 通知する。実行しない曜日を設定可能。\ntfa.rb 2FA を無効にしているユーザを検索し、Slack 通知する。無視ユーザや実\n行しない曜日を設定可能。\nこういった GitHub Organization の管理は、皆さんどうしているのだろう？","contentSnippet":"成り行きで会社の GitHub Organization の管理者業をしています。Organization 配下のリポジトリやユーザが増えてきて、気にかけるのが大変になってきたので、メンテナンス用の Ruby スクリプトを作りました。  permission.rb 指定した Team パーミッションが付与されていないリポジトリを検索し、Slack 通知する。実行しない曜日を設定可能。tfa.rb 2FA を無効にしているユーザを検索し、Slack 通知する。無視ユーザや実行しない曜日を設定可能。こういった GitHub Organization の管理は、皆さんどうしているのだろう？","link":"https://masutaka.net/2017-05-28-1/","isoDate":"2017-05-28T00:00:00.000Z","dateMiliSeconds":1495929600000,"authorName":"masutaka"},{"title":"Docker ではないコンテナ systemd-nspawn を使ってみた","content":"先日、増田の記事を読みました。\nDocker盲信してる皆様へ └ dockerやめてどうしたか？ systemd-nspawn を全く知らない自分に腹が立ったので、使ってみました。\nホスト OS を Arch Linux にして試す 何も知識がないので、ググってヒットしたこちらから開始。\n[Arch Linux] systemd-nspawnで軽量コンテナを建てよう！ - Qiita ホストの Arch Linux は Vagrant で用意しました。Arch Linux は初めて\n使ったし、名前も知らなかったというレベルです。\n$ vagrant init terrywang/archlinux あとは記事のとおりに さまざまなディストリのコンテナを試していきました。\nArch Linux\n→ 一番簡単だったが、インターネットに繋げられず\nDebian\n→ debootstrap が 404 でインストールできず断念\nCentOS\n→ dnf のインストールで挫折。\nと、ひととおり試してこの記事はむしろ Arch Linux スゲー記事というこ\nとに気づきました・・・！\nホスト OS を CentOS 7 にして試す 初心(?)に返って、仕事でも使っている CentOS 7 で再挑戦。\nこちらの記事は簡単でした。Vagrant で出来たし、何もせずともコンテナ\nからインターネットを参照できました。\nCent OS7でsystemd-nrespownで軽量コンテナを作成する macOS の方はたぶん、この通りにやると systemd-nspawn を体験できると","contentSnippet":"先日、増田の記事を読みました。Docker盲信してる皆様へ └ dockerやめてどうしたか？ systemd-nspawn を全く知らない自分に腹が立ったので、使ってみました。ホスト OS を Arch Linux にして試す 何も知識がないので、ググってヒットしたこちらから開始。[Arch Linux] systemd-nspawnで軽量コンテナを建てよう！ - Qiita ホストの Arch Linux は Vagrant で用意しました。Arch Linux は初めて使ったし、名前も知らなかったというレベルです。$ vagrant init terrywang/archlinux あとは記事のとおりに さまざまなディストリのコンテナを試していきました。Arch Linux→ 一番簡単だったが、インターネットに繋げられずDebian→ debootstrap が 404 でインストールできず断念CentOS→ dnf のインストールで挫折。と、ひととおり試してこの記事はむしろ Arch Linux スゲー記事ということに気づきました・・・！ホスト OS を CentOS 7 にして試す 初心(?)に返って、仕事でも使っている CentOS 7 で再挑戦。こちらの記事は簡単でした。Vagrant で出来たし、何もせずともコンテナからインターネットを参照できました。Cent OS7でsystemd-nrespownで軽量コンテナを作成する macOS の方はたぶん、この通りにやると systemd-nspawn を体験できると","link":"https://masutaka.net/2017-04-29-1/","isoDate":"2017-04-29T00:00:00.000Z","dateMiliSeconds":1493424000000,"authorName":"masutaka"},{"title":"CircleCI 2.0 で capistrano デプロイしてみた","content":"このブログは GitHub で管理しており、master に commit が追加される\nと、CircleCI が capistrano を使ってデプロイします。\n[2017-04-13-1] でテストを CircleCI 2.0 で動かしたので、デプロイも\n試してみました。\n最終的な circle.yml とデプロイスクリプトはこちらになりました。\n 基本的に &ldquo;add_ssh_keys&rdquo; と &ldquo;deploy&rdquo; step 以外は [2017-04-13-1] と\n同じです。ハマりそうなところだけ記載していきます。\nハマりそうなところ Deployments - CircleCI のとおり、&ldquo;deploy&rdquo; step があればデプロイ出来ます。\nただ capistrano で GitHub の private repository をデプロイする場合、\n最低 2 つは SSH Key が必要になると思います。\n(1) 本番サーバ（masutaka.net）への SSH ログイン\n(2) SSH ログイン後に GitHub に SSH アクセス\nこれらの設定方法を説明していきます。\nデバッグは CircleCI の各ジョブの Rebuild with SSH から、実際に本番\nサーバに ssh ログインできるか確認していくと、分かりやすいと思います。","contentSnippet":"このブログは GitHub で管理しており、master に commit が追加されると、CircleCI が capistrano を使ってデプロイします。[2017-04-13-1] でテストを CircleCI 2.0 で動かしたので、デプロイも試してみました。最終的な circle.yml とデプロイスクリプトはこちらになりました。 基本的に “add_ssh_keys” と “deploy” step 以外は [2017-04-13-1] と同じです。ハマりそうなところだけ記載していきます。ハマりそうなところ Deployments - CircleCI のとおり、“deploy” step があればデプロイ出来ます。ただ capistrano で GitHub の private repository をデプロイする場合、最低 2 つは SSH Key が必要になると思います。(1) 本番サーバ（masutaka.net）への SSH ログイン(2) SSH ログイン後に GitHub に SSH アクセスこれらの設定方法を説明していきます。デバッグは CircleCI の各ジョブの Rebuild with SSH から、実際に本番サーバに ssh ログインできるか確認していくと、分かりやすいと思います。","link":"https://masutaka.net/2017-04-16-1/","isoDate":"2017-04-16T00:00:00.000Z","dateMiliSeconds":1492300800000,"authorName":"masutaka"},{"title":"CircleCI 2.0 をローカルで実行できる circleci コマンドとは何者か","content":"先日の [2017-04-13-1] で気になったので調べてみました。\n初めに結論から。\ncircleci コマンド（シェルスクリプト。macOS 等で実行可能）\n└ docker run circleci/picard\n└ /usr/bin/circleci (https://github.com/circleci/build-agent )\n・circleci コマンドは build-agent というコマンドを Dockerize した\nシェルスクリプト。\n・build-agent は golang 製のツールで、/usr/bin/circleci としてコン\nテナ内に存在する。おそらく private repository\nhttps://github.com/circleci/build-agent で開発されている。\n・Docker Image は https://hub.docker.com/r/circleci/picard/ だが、\nDockerfile は公開されていない。Alpine Linux ベースのようだ。\n・この Docker Image には docker コマンドは存在しない。\n/usr/bin/circleci が Docker Hub の API を使って、docker pull 相当\nのことなどを実行するようだ。\n調査過程や詳細など Running Jobs Locally - CircleCI に書いてある方法で\nhttps://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci が /usr/local/bin にインストールされる。\nこれは circleci/picard を docker run するだけのラッパーシェルスク","contentSnippet":"先日の [2017-04-13-1] で気になったので調べてみました。初めに結論から。circleci コマンド（シェルスクリプト。macOS 等で実行可能）└ docker run circleci/picard└ /usr/bin/circleci (https://github.com/circleci/build-agent )・circleci コマンドは build-agent というコマンドを Dockerize したシェルスクリプト。・build-agent は golang 製のツールで、/usr/bin/circleci としてコンテナ内に存在する。おそらく private repositoryhttps://github.com/circleci/build-agent で開発されている。・Docker Image は https://hub.docker.com/r/circleci/picard/ だが、Dockerfile は公開されていない。Alpine Linux ベースのようだ。・この Docker Image には docker コマンドは存在しない。/usr/bin/circleci が Docker Hub の API を使って、docker pull 相当のことなどを実行するようだ。調査過程や詳細など Running Jobs Locally - CircleCI に書いてある方法でhttps://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci が /usr/local/bin にインストールされる。これは circleci/picard を docker run するだけのラッパーシェルスク","link":"https://masutaka.net/2017-04-15-1/","isoDate":"2017-04-15T00:00:00.000Z","dateMiliSeconds":1492214400000,"authorName":"masutaka"},{"title":"Rails リポジトリに CircleCI 2.0 を導入した","content":"先日素振りがてら、個人の小さな Rails リポジトリを Dockerize しました。\nhttps://github.com/masutaka/github-organization-watcher/pull/45 現在クローズドβの CircleCI 2.0 は Docker 前提らしいので、これも素\n振りがてら移行してみました。\nhttps://github.com/masutaka/github-organization-watcher/pull/48 CircleCI 2.0 はここから申請すれば、すぐ使えるようです。\nhttps://circleci.com/beta-access/#request-access 移行前の印象 (1) 1.0 では宜しくやってくれたけど、2.0 は circle.yml に全部書く必\n要があるみたい。面倒そう。\n(2) とは言え、Dockerfile や docker-compose.yml があるし、ちょっと\nやれば動くだろう。\n(3) Alpine Linux の Docker Image 使えば、1.0 よりは速くなるのかな。\n移行後の感想 (1) 予想に違わない面倒くささ・・・！ オートマがマニュアルになった感じ。\n(2) 使えませんでした ／(^o^)＼ 参考にはなったけど。\n(3) 速い・・・！！！（移行前: 01:38 、移行後: 00:30 ）\n両方ともキャッシュあり状態です。Alpine Linux もそうかもしれないけ\nど、とにかくキャッシュのリストアが速かったです（後述）。あと、\nCircleCI のビルドが全体的に高速です。\ncircle.yml circle.yml は 1.0 から 2.0 に移行して、このようになりました。同じ\nディレクトリにある Dockerfile や docker-compose.","contentSnippet":"先日素振りがてら、個人の小さな Rails リポジトリを Dockerize しました。https://github.com/masutaka/github-organization-watcher/pull/45 現在クローズドβの CircleCI 2.0 は Docker 前提らしいので、これも素振りがてら移行してみました。https://github.com/masutaka/github-organization-watcher/pull/48 CircleCI 2.0 はここから申請すれば、すぐ使えるようです。https://circleci.com/beta-access/#request-access 移行前の印象 (1) 1.0 では宜しくやってくれたけど、2.0 は circle.yml に全部書く必要があるみたい。面倒そう。(2) とは言え、Dockerfile や docker-compose.yml があるし、ちょっとやれば動くだろう。(3) Alpine Linux の Docker Image 使えば、1.0 よりは速くなるのかな。移行後の感想 (1) 予想に違わない面倒くささ・・・！ オートマがマニュアルになった感じ。(2) 使えませんでした ／(^o^)＼ 参考にはなったけど。(3) 速い・・・！！！（移行前: 01:38 、移行後: 00:30 ）両方ともキャッシュあり状態です。Alpine Linux もそうかもしれないけど、とにかくキャッシュのリストアが速かったです（後述）。あと、CircleCI のビルドが全体的に高速です。circle.yml circle.yml は 1.0 から 2.0 に移行して、このようになりました。同じディレクトリにある Dockerfile や docker-compose.","link":"https://masutaka.net/2017-04-13-1/","isoDate":"2017-04-13T00:00:00.000Z","dateMiliSeconds":1492041600000,"authorName":"masutaka"},{"title":"PS4 Pro と LG の 4K テレビ 43UH6500 で nasne は使えるのか？","content":"追記(2017-11-12):\n4K のままで使えるようになりました。torne のアップデートはなかった気がするので、PS4 のシステムアップデートで直ったのかもしれません。\n LG の 4K テレビ 43UH6500 と PS4 Pro の組み合わせで、nasne は使える\nのか、ドンピシャの情報がなかったので、ここに書き留めておきます。\n結論から書くと、PS4 Pro の設定を 2K にすれば使えました&hellip;。（涙）\n普通に使おうとすると、torne から戻った時に画面全体が暗転もしくは紫\n色になります。復帰するには、電源ボタン長押しで一度スタンバイにする\nしかありません。\n※ nasne はハードウェア、torne はソフトウェアの名前です。torne は\nPS4 や iOS や Android 等で動作するソフトウェアです。torne を介して\nnasne でテレビ番組を録画したり、視聴したりできます。\nバージョン情報          LG 43UH6500 システムソフトウェア 04.30.45   PS4 Pro システムソフトウェア 4.50   nasne システムソフトウェア 2.57   torne 1.21    PS4 Pro を買ってしまった 先日、前世代の PS4 (CUH-1200AB02) を PS4 Pro (CUH-7000BB01) に買い","contentSnippet":"追記(2017-11-12):4K のままで使えるようになりました。torne のアップデートはなかった気がするので、PS4 のシステムアップデートで直ったのかもしれません。 LG の 4K テレビ 43UH6500 と PS4 Pro の組み合わせで、nasne は使えるのか、ドンピシャの情報がなかったので、ここに書き留めておきます。結論から書くと、PS4 Pro の設定を 2K にすれば使えました…。（涙）普通に使おうとすると、torne から戻った時に画面全体が暗転もしくは紫色になります。復帰するには、電源ボタン長押しで一度スタンバイにするしかありません。※ nasne はハードウェア、torne はソフトウェアの名前です。torne はPS4 や iOS や Android 等で動作するソフトウェアです。torne を介してnasne でテレビ番組を録画したり、視聴したりできます。バージョン情報          LG 43UH6500 システムソフトウェア 04.30.45   PS4 Pro システムソフトウェア 4.50   nasne システムソフトウェア 2.57   torne 1.21    PS4 Pro を買ってしまった 先日、前世代の PS4 (CUH-1200AB02) を PS4 Pro (CUH-7000BB01) に買い","link":"https://masutaka.net/2017-04-08-1/","isoDate":"2017-04-08T00:00:00.000Z","dateMiliSeconds":1491609600000,"authorName":"masutaka"},{"title":"オムロンの低周波治療器が肩こりにだいぶ効く","content":"  私は季節の変わり目に首や肩甲骨の周りが非常に凝ります。あと飲みすぎ\nた次の日も&hellip;。\n先々週くらいにヤバイ兆候を感じたので、Amazon のほしい物リストに登\n録していたこちらを速攻でポチッと。\nこの手の機器は初めて買ったのですが、時代の進化を感じます。\nもみ方を「たたく」にして強さを８に設定すると、叩かれているのと変わ\nりありません。やりながらキーボードを打つのは非常に困難・・・！\n肩以外にも「関節」「腕」「足裏」「ふくろはぎ」「腰」に対応していま\nす。もみ方も「たたく」「もむ」「おす」「さする」があります。\n単4電池 x2 で動くのには驚愕。2 つバンドルされている点も親切。\n欠点があるとしたら、服を着ている時は粘着パッドを付けづらいことでしょ\nうか。\nマッサージに行くことを考えたらだいぶ割安ですし、オススメです。\n  ","contentSnippet":"私は季節の変わり目に首や肩甲骨の周りが非常に凝ります。あと飲みすぎた次の日も…。先々週くらいにヤバイ兆候を感じたので、Amazon のほしい物リストに登録していたこちらを速攻でポチッと。この手の機器は初めて買ったのですが、時代の進化を感じます。もみ方を「たたく」にして強さを８に設定すると、叩かれているのと変わりありません。やりながらキーボードを打つのは非常に困難・・・！肩以外にも「関節」「腕」「足裏」「ふくろはぎ」「腰」に対応しています。もみ方も「たたく」「もむ」「おす」「さする」があります。単4電池 x2 で動くのには驚愕。2 つバンドルされている点も親切。欠点があるとしたら、服を着ている時は粘着パッドを付けづらいことでしょうか。マッサージに行くことを考えたらだいぶ割安ですし、オススメです。","link":"https://masutaka.net/2017-04-02-1/","isoDate":"2017-04-02T00:00:00.000Z","dateMiliSeconds":1491091200000,"authorName":"masutaka"},{"title":"ローカル環境を出来るだけ Dockerize した","content":"ローカルに nginx や mysql が起動していたり、gem install のためだけ\nに cmake や icu4c を brew install するのは嫌になったので、三連休で\n出来るだけ Dockerize しました。仕事の素振りも兼ねています。\nnginx このブログの記事を書く時のプレビューや、雑多な html ファイルの表示\nに使っています。\n今まで $ brew install nginx して、nginx.conf も別途管理していまし\nたが、以下のような雑な docker-compose.yml で、雑にマウントするだけ\nで良くなりました。\nversion: &#39;3&#39; services: nginx: image: nginx:alpine ports: - 8080:80 volumes: - /Users/masutaka/Sites:/usr/share/nginx/html restart: on-failure:10  Snow Leopard からの流れで、雑多な html は ~/Sites に置いています。 $ docker-compose up -d しておけば、macOS を再起動しても nginx が\n起動してくれます。 ほかにグローバルに必要な service が増えたら追加していきます。  mysql MySQL を使う Rails アプリケーションがあったので、とりあえず","contentSnippet":"ローカルに nginx や mysql が起動していたり、gem install のためだけに cmake や icu4c を brew install するのは嫌になったので、三連休で出来るだけ Dockerize しました。仕事の素振りも兼ねています。nginx このブログの記事を書く時のプレビューや、雑多な html ファイルの表示に使っています。今まで $ brew install nginx して、nginx.conf も別途管理していましたが、以下のような雑な docker-compose.yml で、雑にマウントするだけで良くなりました。version: '3' services: nginx: image: nginx:alpine ports: - 8080:80 volumes: - /Users/masutaka/Sites:/usr/share/nginx/html restart: on-failure:10  Snow Leopard からの流れで、雑多な html は ~/Sites に置いています。 $ docker-compose up -d しておけば、macOS を再起動しても nginx が起動してくれます。 ほかにグローバルに必要な service が増えたら追加していきます。  mysql MySQL を使う Rails アプリケーションがあったので、とりあえず","link":"https://masutaka.net/2017-03-21-1/","isoDate":"2017-03-21T00:00:00.000Z","dateMiliSeconds":1490054400000,"authorName":"masutaka"},{"title":"JAWS UG 2017 に行ってきた #jawsdays","content":"http://jawsdays2017.jaws-ug.jp AWS 歴 3 年にして初参加。AWS Summit 派だから&hellip;（震え\n主にサーバレスやコンテナまわりを聞いてた。\n以下、スライドを見て思い出したことなどのメモ。登壇者の方の敬称は略\nでございます。\n新訳 とあるアーキテクトのクラウドデザインパターン目録   登壇者: 山﨑奈緒美\n 登壇者: 神希嘉\n 登壇者: 金平晃尚\nサーバレスやマイクロサービスの基本的でためになるお話。オンプレから\nクラウドに移行するモチベーションは理解できるけど、サーバレスはどん\nななんでしょうかね？まだ解釈できていない。コンテナ化は分かるんだけど。\nひとりでも怖くない！コミュニティの広げ方    登壇者: 小深田あゆみ\n懇親会でなんとか１人２人に話しかけることは出来るけど、そのまま話し\n込んでしまうんだよなあ。切り上げ時が分からない。\nサーバーレスでシステムを開発する時に大切な事   登壇者: 比企宏之\nMBS動画イズム444 という動画配信サービスをサーバレスで実装したお話。\n裏側にサイボウズの Kintone という CMS を置いて、表側をサーバレスで\n実装したとのこと。要件定義から実装まで 3 ヶ月。\nとにかく設計が大事ということを強調していた。\nP6. 結合先（AWS）は信じない。Lambda が複数回発火することは知ってい\nたけど、発火しないこともあるとのこと。アプリケーションレベルでそれ\nを考慮した設計にしているとのこと。S3 のファイルを Lambda で処理し\nたら別のバケットに移動するとか。残っていたら発火してないので、定期\n的に回収する。\nP9. EC2 だとシステムが落ちると API も全部が落ちるが、サーバレスだ\nと一部の API が落ちることはあり得る。非同期処理を同調させる、分散\nアーキテクチャを考える必要がある。\nP11. サーバレスを採用すると、運用でカバーが出来なくなり、全部開発","contentSnippet":"http://jawsdays2017.jaws-ug.jp AWS 歴 3 年にして初参加。AWS Summit 派だから…（震え主にサーバレスやコンテナまわりを聞いてた。以下、スライドを見て思い出したことなどのメモ。登壇者の方の敬称は略でございます。新訳 とあるアーキテクトのクラウドデザインパターン目録   登壇者: 山﨑奈緒美 登壇者: 神希嘉 登壇者: 金平晃尚サーバレスやマイクロサービスの基本的でためになるお話。オンプレからクラウドに移行するモチベーションは理解できるけど、サーバレスはどんななんでしょうかね？まだ解釈できていない。コンテナ化は分かるんだけど。ひとりでも怖くない！コミュニティの広げ方    登壇者: 小深田あゆみ懇親会でなんとか１人２人に話しかけることは出来るけど、そのまま話し込んでしまうんだよなあ。切り上げ時が分からない。サーバーレスでシステムを開発する時に大切な事   登壇者: 比企宏之MBS動画イズム444 という動画配信サービスをサーバレスで実装したお話。裏側にサイボウズの Kintone という CMS を置いて、表側をサーバレスで実装したとのこと。要件定義から実装まで 3 ヶ月。とにかく設計が大事ということを強調していた。P6. 結合先（AWS）は信じない。Lambda が複数回発火することは知っていたけど、発火しないこともあるとのこと。アプリケーションレベルでそれを考慮した設計にしているとのこと。S3 のファイルを Lambda で処理したら別のバケットに移動するとか。残っていたら発火してないので、定期的に回収する。P9. EC2 だとシステムが落ちると API も全部が落ちるが、サーバレスだと一部の API が落ちることはあり得る。非同期処理を同調させる、分散アーキテクチャを考える必要がある。P11. サーバレスを採用すると、運用でカバーが出来なくなり、全部開発","link":"https://masutaka.net/2017-03-12-1/","isoDate":"2017-03-12T00:00:00.000Z","dateMiliSeconds":1489276800000,"authorName":"masutaka"},{"title":"DynamoDB で TTL が実装されたので、Rails4 から使ってみた","content":"先日、ついに DynamoDB に TTL が実装されました。\n新機能 – TTL（Time to Live）機能を利用したDynamoDBアイテムの管理について｜Amazon Web Services ブログ 仕事では Rails4 のセッションストアに ElastiCache for Redis を使っ\nているのですが、[2016-10-24-1] に書いたとおり、スケールが辛いです。\n作業自体もそうですし、ElastiCache for Redis はスケールアップのみで\nスケールアウトが出来ません。CPU パワーじゃなくてストレージが欲しい\nのじゃ&hellip;。\nDynamoDB はインスタンスの管理が不要なため、もし移行出来たらとって\nもうれしいです。お値段も ElastiCache よりずっと安そうです。\nhttps://aws.amazon.com/jp/dynamodb/pricing/ いろんな期待を込めて、ちょっと触ってみました。\n準備 こちらの記事を参考にして、Rails4 のセッションストアを DynamoDB に\nします。\nRails4 でセッションストアに DynamoDB を使う ｜ Developers.IO 2013年11月05日と古めの記事ですが、現在も動くことを確認しました。\n当時はまだ TTL が実装されていないので、\n $ bundle exec rake db:sessions:cleanup\nで期限切れのデータを削除する方式です。\n なぜか migration ファイルに拡張子 .rb が付かず、db:migrate で\nDynamoDB のテーブルが作られませんでした。適当にリネームして下さい。\nDynamoDB に expired_at を追加 DynamoDB で expired_at フィールドを追加する修正をしてみました。","contentSnippet":"先日、ついに DynamoDB に TTL が実装されました。新機能 – TTL（Time to Live）機能を利用したDynamoDBアイテムの管理について｜Amazon Web Services ブログ 仕事では Rails4 のセッションストアに ElastiCache for Redis を使っているのですが、[2016-10-24-1] に書いたとおり、スケールが辛いです。作業自体もそうですし、ElastiCache for Redis はスケールアップのみでスケールアウトが出来ません。CPU パワーじゃなくてストレージが欲しいのじゃ…。DynamoDB はインスタンスの管理が不要なため、もし移行出来たらとってもうれしいです。お値段も ElastiCache よりずっと安そうです。https://aws.amazon.com/jp/dynamodb/pricing/ いろんな期待を込めて、ちょっと触ってみました。準備 こちらの記事を参考にして、Rails4 のセッションストアを DynamoDB にします。Rails4 でセッションストアに DynamoDB を使う ｜ Developers.IO 2013年11月05日と古めの記事ですが、現在も動くことを確認しました。当時はまだ TTL が実装されていないので、 $ bundle exec rake db:sessions:cleanupで期限切れのデータを削除する方式です。 なぜか migration ファイルに拡張子 .rb が付かず、db:migrate でDynamoDB のテーブルが作られませんでした。適当にリネームして下さい。DynamoDB に expired_at を追加 DynamoDB で expired_at フィールドを追加する修正をしてみました。","link":"https://masutaka.net/2017-03-02-1/","isoDate":"2017-03-02T00:00:00.000Z","dateMiliSeconds":1488412800000,"authorName":"masutaka"},{"title":"git-hyper-blame のセットアップ方法と使い方","content":"任意のコミットを無視して git blame してくれるやつ。いわゆるメガコ\nミットを無視した blame をしたいときに使える。\nなぜかセットアップにひどくハマったのでメモ。\nセットアップ方法  git clone してくる   $ git clone https://github.com/google/proto-quic.git  以下のように、パスの通ったディレクトリに git-hyper-blame という\n名前のシンボリックリンクを作る。git のサブコマンド hyper-blame が\n利用可能になる   $ ln -s ~/src/github.com/google/proto-quic/depot_tools/git_hyper_blame.py ~/bin/git-hyper-blame\n ※ Python は macOS Sierra 付属の /usr/bin/python (Python 2.7.10) で\n動きます。pip install とかも不要です。\n使い方 普通の blame はこちら。\n$ git blame Gemfile 99d5ce00 (Takashi Masuda 2016-08-26 23:06:50 +0900 1) # frozen_string_literal: true 99d5ce00 (Takashi Masuda 2016-08-26 23:06:50 +0900 2) ^1039771 (Takashi Masuda 2016-07-16 13:28:00 +0900 3) source &#39;https://rubygems.","contentSnippet":"任意のコミットを無視して git blame してくれるやつ。いわゆるメガコミットを無視した blame をしたいときに使える。なぜかセットアップにひどくハマったのでメモ。セットアップ方法  git clone してくる   $ git clone https://github.com/google/proto-quic.git  以下のように、パスの通ったディレクトリに git-hyper-blame という名前のシンボリックリンクを作る。git のサブコマンド hyper-blame が利用可能になる   $ ln -s ~/src/github.com/google/proto-quic/depot_tools/git_hyper_blame.py ~/bin/git-hyper-blame ※ Python は macOS Sierra 付属の /usr/bin/python (Python 2.7.10) で動きます。pip install とかも不要です。使い方 普通の blame はこちら。$ git blame Gemfile 99d5ce00 (Takashi Masuda 2016-08-26 23:06:50 +0900 1) # frozen_string_literal: true 99d5ce00 (Takashi Masuda 2016-08-26 23:06:50 +0900 2) ^1039771 (Takashi Masuda 2016-07-16 13:28:00 +0900 3) source 'https://rubygems.","link":"https://masutaka.net/2017-02-26-1/","isoDate":"2017-02-26T00:00:00.000Z","dateMiliSeconds":1488067200000,"authorName":"masutaka"},{"title":"18 年 4 カ月使った au を解約して IIJmio に乗り換えた","content":"IDO 時代も含めると 1998 年 10 月 から au 一筋で使ってきましたが、\n先程格安 MVNO の IIJmio に乗り換えました。\nやっぱり料金が高すぎですからね&hellip;。こんなに長期間使っているのに、\nまったく減らないってどういうことなの。\n移行後の月額料金はご覧のとおり、めっちゃ安くなりました。\n移行前: 5,128 円（税込）\n移行後: 1,728 円（税込）\n※ 移行前は iPhone の分割代金を除外しています。含めると 7,823 円です。\n※ 通話はほとんどせず、データ通信も毎月 3GB 未満です。\nやってみたら案外簡単で、全部自宅で済ませることが出来ました。\n以下、今回のまとめです。\n1. SIM ロック解除 au の iPhone6s は、購入後 180 日経てば SIM フリーにできるそうです。\n私は去年の 5 月に解除しました。au ショップに行かずとも、自宅で SIM\nフリーにできます。\nなにか重要なこと言ってた。3,000 円ってマジか。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  au はここから可否判定できます。条件も書いてあります。","contentSnippet":"IDO 時代も含めると 1998 年 10 月 から au 一筋で使ってきましたが、先程格安 MVNO の IIJmio に乗り換えました。やっぱり料金が高すぎですからね…。こんなに長期間使っているのに、まったく減らないってどういうことなの。移行後の月額料金はご覧のとおり、めっちゃ安くなりました。移行前: 5,128 円（税込）移行後: 1,728 円（税込）※ 移行前は iPhone の分割代金を除外しています。含めると 7,823 円です。※ 通話はほとんどせず、データ通信も毎月 3GB 未満です。やってみたら案外簡単で、全部自宅で済ませることが出来ました。以下、今回のまとめです。1. SIM ロック解除 au の iPhone6s は、購入後 180 日経てば SIM フリーにできるそうです。私は去年の 5 月に解除しました。au ショップに行かずとも、自宅で SIMフリーにできます。なにか重要なこと言ってた。3,000 円ってマジか。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  au はここから可否判定できます。条件も書いてあります。","link":"https://masutaka.net/2017-02-25-1/","isoDate":"2017-02-25T00:00:00.000Z","dateMiliSeconds":1487980800000,"authorName":"masutaka"},{"title":"第18回Elasticsearch勉強会に参加してきた #elasticsearchjp","content":"第18回elasticsearch勉強会｜Meetup 前々回 [2016-06-28-1] に続いて、2 回目の参加です。今回は先週社内勉\n強会で発表したばかりだったので、熱量高めでした。いや、むしろ燃え尽\nきていたかも&hellip;。\n自分のブログに Elasticsearch + Vue.js で検索機能を付けたという発表をした｜feedforce Engineers&rsquo; blog ※ このブログ右上の検索ボックスのお話です\nWhat&rsquo;s new Elastic Stack 5.2   Elastic 社の Jun Ohtani さん\nElasticsearch 5.1 ~\n Cancel long-running &ldquo;Search&rdquo; task by the task management API\nElasticsearch 5.2 ~ Index and search numeric and data ranges Keyword field with Normalizer Can break terms down into partitions  ちょうど今回 5.1 の検索を使ったのでタイムリーでした。大文字小文字\nを区別させない検索に Keyword field with Normalizer が使えそうです。","contentSnippet":"第18回elasticsearch勉強会｜Meetup 前々回 [2016-06-28-1] に続いて、2 回目の参加です。今回は先週社内勉強会で発表したばかりだったので、熱量高めでした。いや、むしろ燃え尽きていたかも…。自分のブログに Elasticsearch + Vue.js で検索機能を付けたという発表をした｜feedforce Engineers’ blog ※ このブログ右上の検索ボックスのお話ですWhat’s new Elastic Stack 5.2   Elastic 社の Jun Ohtani さんElasticsearch 5.1 ~ Cancel long-running “Search” task by the task management APIElasticsearch 5.2 ~ Index and search numeric and data ranges Keyword field with Normalizer Can break terms down into partitions  ちょうど今回 5.1 の検索を使ったのでタイムリーでした。大文字小文字を区別させない検索に Keyword field with Normalizer が使えそうです。","link":"https://masutaka.net/2017-02-21-1/","isoDate":"2017-02-21T00:00:00.000Z","dateMiliSeconds":1487635200000,"authorName":"masutaka"},{"title":"同じ Ajax 処理を Vue.js と jQuery で書いてみた","content":"最近 Vue.js で、ようやくリアクティブプラグラミングに入門できました。\n会社で毎週金曜日に開催されている、インフラ共有会(!)で Vue.js と\njQuery の違いを紹介しました。メモがてら、貼り付けておきます。\n順番的には Vue.js で書いたものを jQuery で書き起こしました。\njQuery + Ajax  JS が HTML を生成したり、HTML の DOM 構造を知る必要があり、変更\nに弱い HTML コードを見ても、ol タグの中身が空っぽで、これから何が入るの\nか不明。JS も読む必要がある   Vue.js + Ajax  JS はほぼ関数定義に特化している。HTML の DOM 構造も知らなくて良い HTML コードを読めば、どんなレンダリングがされるか想像がつく。v-\nから始まる、データ＆モデルバインディング等があるが、無視して読むこ\nとも可能   ","contentSnippet":"最近 Vue.js で、ようやくリアクティブプラグラミングに入門できました。会社で毎週金曜日に開催されている、インフラ共有会(!)で Vue.js とjQuery の違いを紹介しました。メモがてら、貼り付けておきます。順番的には Vue.js で書いたものを jQuery で書き起こしました。jQuery + Ajax  JS が HTML を生成したり、HTML の DOM 構造を知る必要があり、変更に弱い HTML コードを見ても、ol タグの中身が空っぽで、これから何が入るのか不明。JS も読む必要がある   Vue.js + Ajax  JS はほぼ関数定義に特化している。HTML の DOM 構造も知らなくて良い HTML コードを読めば、どんなレンダリングがされるか想像がつく。v-から始まる、データ＆モデルバインディング等があるが、無視して読むことも可能","link":"https://masutaka.net/2017-01-27-1/","isoDate":"2017-01-27T00:00:00.000Z","dateMiliSeconds":1485475200000,"authorName":"masutaka"},{"title":"完全に闇に落ちていた StartSSL に ￥3,603 課金してしまったお話","content":"このサイトは 10 ヶ月ほど前の [2016-03-15-1] に http2 対応したタイ\nミングで SSL 証明書を取得しました。\n当時すでに Let&rsquo;s Encrypt が使われ始めていましたが、Chef の構成管理\nが面倒そうなのと、1 年に 1 回の更新なら手間でもないだろうというこ\nとで、StartSSL で SSL 証明書を取得しました（自身初の経験）。\n今回はサブドメインを 1 つ追加するために、StartSSL の管理画面から\nSSL 証明書を作成し差し替えたのですが、どうもうまくいかない。Chrome\nだと NET::ERR_CERT_REVOKED というエラーになってしまう。\nmacOS の curl だと Invalid certificate chain になるけど、Linux の\ncurl は問題なかったり、macOS も Firefox ではエラーにならなかったり、\n法則性が見いだせませんでした。\n仕方がないので、サーバ側の問題とは認識しつつも、切り分けのために\nmacOS の Keychain Access の StartSSL っぽい Certificate を削除した\nが現象変わらず。\n私の SSL 証明書への耐性が少ないこともあり、「以前の証明書と干渉し\nているのかな？」と仮説を立て、StartSSL で作った以前の SSL 証明書を\nRevoke してみました。\nただ、StartSSL は Class1 の SSL 証明書であっても手数料が必要です。","contentSnippet":"このサイトは 10 ヶ月ほど前の [2016-03-15-1] に http2 対応したタイミングで SSL 証明書を取得しました。当時すでに Let’s Encrypt が使われ始めていましたが、Chef の構成管理が面倒そうなのと、1 年に 1 回の更新なら手間でもないだろうということで、StartSSL で SSL 証明書を取得しました（自身初の経験）。今回はサブドメインを 1 つ追加するために、StartSSL の管理画面からSSL 証明書を作成し差し替えたのですが、どうもうまくいかない。Chromeだと NET::ERR_CERT_REVOKED というエラーになってしまう。macOS の curl だと Invalid certificate chain になるけど、Linux のcurl は問題なかったり、macOS も Firefox ではエラーにならなかったり、法則性が見いだせませんでした。仕方がないので、サーバ側の問題とは認識しつつも、切り分けのためにmacOS の Keychain Access の StartSSL っぽい Certificate を削除したが現象変わらず。私の SSL 証明書への耐性が少ないこともあり、「以前の証明書と干渉しているのかな？」と仮説を立て、StartSSL で作った以前の SSL 証明書をRevoke してみました。ただ、StartSSL は Class1 の SSL 証明書であっても手数料が必要です。","link":"https://masutaka.net/2017-01-10-1/","isoDate":"2017-01-10T00:00:00.000Z","dateMiliSeconds":1484006400000,"authorName":"masutaka"},{"title":"Software Design を 13 ヶ月分まとめ読みした","content":"11 月初旬から 2 ヶ月近く、ようやく本日新幹線の中で読み切りました。\n業務で 1 サーバあたりの許容 http リクエスト数を調べる必要があった\nのが発端でした。2015年12月号から 4 回に渡って連載された『クラウド\n時代のWebサービス負荷試験再入門』に感謝です。ELB の後ろの App サー\nバを何台置くとか、みんなどうやって決めているのですかね？\n Software Design 2015年12月号｜技術評論社  Software Design 2016年1月号｜技術評論社  Software Design 2016年2月号｜技術評論社  Software Design 2016年3月号｜技術評論社   この記事だけ読むのも勿体ないので、できるだけ全部の記事も読んでまし\nた。そしたら「最新号までいけるんじゃないか？」という気になり、結果\n的に2016年12号分まで読み切ることができました。意識を高く保つのが大\n変でしたが、読んで良かったです。\n読んで実感したのは、普段 Web の記事や技術書を読んでいると、どうし\nても自分というフィルターがかかるということ。\n雑誌だと、あまり興味なかったり掘り下げていない分野も目に飛び込んで\nくるので、良い補完になりました。Software Design は DB の連載が多い\nので、苦手意識のある自分には良い学習になりました。\nあと大きな声で言えませんが、2016年7月号 の『正規表現入門』が役に立\nちました。&quot;.*?&quot; の最小マッチを今さら知っただなんて誰にも言えない&hellip;。\n号を進めていくと、雑誌の構成がわかってくるので、読むスピードがちょっ\nとだけ早くなった気がします。\nこれからの予定  出たらすぐに読む 最新号（2017年1月号 ）も読む  早くしないと2017年2月号が出てしまう&hellip;   WEB+DB PRESS も 2016 年分から最新号まで読む  隔月発売だから助かります（あかん     ","contentSnippet":"11 月初旬から 2 ヶ月近く、ようやく本日新幹線の中で読み切りました。業務で 1 サーバあたりの許容 http リクエスト数を調べる必要があったのが発端でした。2015年12月号から 4 回に渡って連載された『クラウド時代のWebサービス負荷試験再入門』に感謝です。ELB の後ろの App サーバを何台置くとか、みんなどうやって決めているのですかね？ Software Design 2015年12月号｜技術評論社  Software Design 2016年1月号｜技術評論社  Software Design 2016年2月号｜技術評論社  Software Design 2016年3月号｜技術評論社   この記事だけ読むのも勿体ないので、できるだけ全部の記事も読んでました。そしたら「最新号までいけるんじゃないか？」という気になり、結果的に2016年12号分まで読み切ることができました。意識を高く保つのが大変でしたが、読んで良かったです。読んで実感したのは、普段 Web の記事や技術書を読んでいると、どうしても自分というフィルターがかかるということ。雑誌だと、あまり興味なかったり掘り下げていない分野も目に飛び込んでくるので、良い補完になりました。Software Design は DB の連載が多いので、苦手意識のある自分には良い学習になりました。あと大きな声で言えませんが、2016年7月号 の『正規表現入門』が役に立ちました。\".*?\" の最小マッチを今さら知っただなんて誰にも言えない…。号を進めていくと、雑誌の構成がわかってくるので、読むスピードがちょっとだけ早くなった気がします。これからの予定  出たらすぐに読む 最新号（2017年1月号 ）も読む  早くしないと2017年2月号が出てしまう…   WEB+DB PRESS も 2016 年分から最新号まで読む  隔月発売だから助かります（あかん","link":"https://masutaka.net/2017-01-03-1/","isoDate":"2017-01-03T00:00:00.000Z","dateMiliSeconds":1483401600000,"authorName":"masutaka"},{"title":"任意の Ruby オブジェクトを YAML として書く","content":"実際使うことはないだろうがメモ。\nhoge: !ruby/object:ActiveSupport::Duration value: 7776000 parts: - - :months - 3 結果 hoge を取り出すと、ActiveSupport::Duration としての 3 months が\n格納されている。\n$ irb -r active_support/time -r yaml -r erb irb(main):001:0&gt; YAML.load(ERB.new(IO.read(&#39;hoge.yml&#39;)).result) =&gt; {&#34;hoge&#34;=&gt;3 months} irb(main):002:0&gt; YAML.load(ERB.new(IO.read(&#39;hoge.yml&#39;)).result)[&#39;hoge&#39;] =&gt; 3 months irb(main):003:0&gt; YAML.load(ERB.new(IO.read(&#39;hoge.yml&#39;)).result)[&#39;hoge&#39;].class =&gt; ActiveSupport::Duration 求め方 irb(main):007:0&gt; print YAML.dump(3.months) --- !ruby/object:ActiveSupport::Duration value: 7776000 parts: - - :months - 3 =&gt; nil 参考情報  library yaml (Ruby 2.3.0)  Rubyist Magazine - プログラマーのための YAML 入門 (中級編)   ","contentSnippet":"実際使うことはないだろうがメモ。hoge: !ruby/object:ActiveSupport::Duration value: 7776000 parts: - - :months - 3 結果 hoge を取り出すと、ActiveSupport::Duration としての 3 months が格納されている。$ irb -r active_support/time -r yaml -r erb irb(main):001:0> YAML.load(ERB.new(IO.read('hoge.yml')).result) => {\"hoge\"=>3 months} irb(main):002:0> YAML.load(ERB.new(IO.read('hoge.yml')).result)['hoge'] => 3 months irb(main):003:0> YAML.load(ERB.new(IO.read('hoge.yml')).result)['hoge'].class => ActiveSupport::Duration 求め方 irb(main):007:0> print YAML.dump(3.months) --- !ruby/object:ActiveSupport::Duration value: 7776000 parts: - - :months - 3 => nil 参考情報  library yaml (Ruby 2.3.0)  Rubyist Magazine - プログラマーのための YAML 入門 (中級編)","link":"https://masutaka.net/2016-12-19-2/","isoDate":"2016-12-19T01:00:00.000Z","dateMiliSeconds":1482109200000,"authorName":"masutaka"},{"title":"Ruby の $ERROR_INFO などの特殊変数は require 'English' が必要だったのか","content":"先日会社の tech channel で話題になったのでメモ。Rubiest の方々にとっ\nては常識なんですかね&hellip;？\n$ ruby -v ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15] $ ruby -e &#39;raise &#34;aaa&#34; rescue p $!&#39; #&lt;RuntimeError: aaa&gt; $ ruby -e &#39;raise &#34;aaa&#34; rescue p $ERROR_INFO&#39; nil $ ruby -r English -e &#39;raise &#34;aaa&#34; rescue p $ERROR_INFO&#39; #&lt;RuntimeError: aaa&gt; Ruby はグローバル変数の初期値が nil なのがたちが悪い。個人的にはも\nう $ERROR_INFO とかは使わないと思う。\n C: Prefer $ERROR_INFO from the stdlib &lsquo;English&rsquo; module over $!.\n RuboCop 先生がこのようにお怒りだったので、出来るだけ長い変数名を使\nうようにしていましたが、行間を読む必要があったみたいです。\n=&gt; require &lsquo;English&rsquo; も必要。","contentSnippet":"先日会社の tech channel で話題になったのでメモ。Rubiest の方々にとっては常識なんですかね…？$ ruby -v ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15] $ ruby -e 'raise \"aaa\" rescue p $!' #<RuntimeError: aaa> $ ruby -e 'raise \"aaa\" rescue p $ERROR_INFO' nil $ ruby -r English -e 'raise \"aaa\" rescue p $ERROR_INFO' #<RuntimeError: aaa> Ruby はグローバル変数の初期値が nil なのがたちが悪い。個人的にはもう $ERROR_INFO とかは使わないと思う。 C: Prefer $ERROR_INFO from the stdlib ‘English’ module over $!. RuboCop 先生がこのようにお怒りだったので、出来るだけ長い変数名を使うようにしていましたが、行間を読む必要があったみたいです。=> require ‘English’ も必要。","link":"https://masutaka.net/2016-12-19-1/","isoDate":"2016-12-19T00:00:00.000Z","dateMiliSeconds":1482105600000,"authorName":"masutaka"},{"title":"不惑の年に風呂の良さを知った","content":"この記事は feedforce Advent Calendar 2016 の 14 日目の記事です。\n13 日目はハッシーの『フィードフォースでの映像制作について 』でした。\n彼らがつい二週間前にリリース(?)したシンゴジラのパロディムービーは、\n密かに今までで一番のお気に入りです。社内限定で今までのムービー見ら\nれないかなー。\nさて、私も表題の年齢になり、季節の変わり目はひどい肩こりや頭痛に悩\nまされる日が出てきました。普段は気になりませんが、この時だけはたま\nらず整体に行きます。あまりにひどいと寝込んでしまうことも。\nとは言え、昔から体だけは丈夫で、体調が悪くなることはそうそうありま\nせん。寝込むのは年に一度くらい。あと二日酔い。二日酔いツライ。\nただ、体が冷えるとあっさり風邪を引くことが分かってきたので、会社で\nは毛布モドキを被り、家では着ぐるみモドキ を履き、だいぶ気を付けてい\nます。\n10 月のあの日もそうでした。急に気温が下がり、肩がこり、こりゃ風邪\n引くかなーと思っていたところ、何の気なしに湯船にお湯を張り風呂に入\nりました。１年前に引っ越してから初めての風呂です（汚くはない）。\nそしたらびっくり。肩こりがすーっと消え、体もポカポカです。その日を\n境に、週に何度か風呂に入る日が始まりました。\nどのようにして風呂に入るか 詳しく説明させて頂きます。\n何はなくともまずは掃除です。今の部屋に引っ越してから、CaSy に月一\nで来てもらっている [2015-12-27-1] ので、基本的にはきれいです。でも\n入る前の掃除はもちろんします。\n掃除が終わったらお湯を溜めます。10 月だと 44 度、今だったら 45 度\nくらいを 10 分ですね。私は昔から熱い風呂は好きではないのですが、風\n呂の蓋は買ってないので設定温度は熱めです。\n未だにお湯張りタイマーの使い方が分かりません。一度、90 リットルの\nつもりが、90 度のお湯を溜めてしまい、泣きながら水で薄め続けました。\nお湯が溜まったら速やかに風呂に入ります。iPhone をドアの外に置き、\n静かな音楽をかけます。給水用のお茶や水も置きます。間違ってもついで\nの洗濯は止めましょう。静かな音楽が台無しです。\n軽くお湯で体を流し、湯船にゆっくりと浸かります。歯磨きをするのも良\nいでしょう。\n適度に暖まったら体を洗います。朝の忙しい時間ではないので、ゆっくり\n出来るのが良いですね。洗い終わったらまた湯船に浸かります。この辺で\n給水するのも良いでしょう。\n次は頭を洗います。最近は意識高いので、３日に一度はこちらで皮脂をズ\nビっと落としています。リンスやコンディショナー必須。\n それ以外はこちらを使っています。逆に皮脂を落としすぎないシャンプー\nです。リンスやコンディショナー不要です。前々職の先輩に教えてもらい\nました。\n どちらも安くないですが、一日あたりに換算すると大したことないので、\nここ数年使っています。\n顔を洗いつつ髭を剃ったら、最後の湯船です。風呂で髭を剃る人って、ど","contentSnippet":"この記事は feedforce Advent Calendar 2016 の 14 日目の記事です。13 日目はハッシーの『フィードフォースでの映像制作について 』でした。彼らがつい二週間前にリリース(?)したシンゴジラのパロディムービーは、密かに今までで一番のお気に入りです。社内限定で今までのムービー見られないかなー。さて、私も表題の年齢になり、季節の変わり目はひどい肩こりや頭痛に悩まされる日が出てきました。普段は気になりませんが、この時だけはたまらず整体に行きます。あまりにひどいと寝込んでしまうことも。とは言え、昔から体だけは丈夫で、体調が悪くなることはそうそうありません。寝込むのは年に一度くらい。あと二日酔い。二日酔いツライ。ただ、体が冷えるとあっさり風邪を引くことが分かってきたので、会社では毛布モドキを被り、家では着ぐるみモドキ を履き、だいぶ気を付けています。10 月のあの日もそうでした。急に気温が下がり、肩がこり、こりゃ風邪引くかなーと思っていたところ、何の気なしに湯船にお湯を張り風呂に入りました。１年前に引っ越してから初めての風呂です（汚くはない）。そしたらびっくり。肩こりがすーっと消え、体もポカポカです。その日を境に、週に何度か風呂に入る日が始まりました。どのようにして風呂に入るか 詳しく説明させて頂きます。何はなくともまずは掃除です。今の部屋に引っ越してから、CaSy に月一で来てもらっている [2015-12-27-1] ので、基本的にはきれいです。でも入る前の掃除はもちろんします。掃除が終わったらお湯を溜めます。10 月だと 44 度、今だったら 45 度くらいを 10 分ですね。私は昔から熱い風呂は好きではないのですが、風呂の蓋は買ってないので設定温度は熱めです。未だにお湯張りタイマーの使い方が分かりません。一度、90 リットルのつもりが、90 度のお湯を溜めてしまい、泣きながら水で薄め続けました。お湯が溜まったら速やかに風呂に入ります。iPhone をドアの外に置き、静かな音楽をかけます。給水用のお茶や水も置きます。間違ってもついでの洗濯は止めましょう。静かな音楽が台無しです。軽くお湯で体を流し、湯船にゆっくりと浸かります。歯磨きをするのも良いでしょう。適度に暖まったら体を洗います。朝の忙しい時間ではないので、ゆっくり出来るのが良いですね。洗い終わったらまた湯船に浸かります。この辺で給水するのも良いでしょう。次は頭を洗います。最近は意識高いので、３日に一度はこちらで皮脂をズビっと落としています。リンスやコンディショナー必須。 それ以外はこちらを使っています。逆に皮脂を落としすぎないシャンプーです。リンスやコンディショナー不要です。前々職の先輩に教えてもらいました。 どちらも安くないですが、一日あたりに換算すると大したことないので、ここ数年使っています。顔を洗いつつ髭を剃ったら、最後の湯船です。風呂で髭を剃る人って、ど","link":"https://masutaka.net/2016-12-14-1/","isoDate":"2016-12-14T00:00:00.000Z","dateMiliSeconds":1481673600000,"authorName":"masutaka"},{"title":"bundle install で Your Gemfile.lock is corrupt. と怒られる件","content":"個人のいくつかのリポジトリで bundle install できないことがあり、困っ\nていました。\n$ bundle install Fetching gem metadata from https://rubygems.org/............ Fetching version metadata from https://rubygems.org/. Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using thread_safe 0.3.5 Using net-ssh 3.2.0 Installing minitest 5.10.1 Your Gemfile.lock is corrupt. The following gem is missing from the DEPENDENCIES section: &#39;ffi&#39; loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結論から言うと $ bundle install --without development で回避できま","contentSnippet":"個人のいくつかのリポジトリで bundle install できないことがあり、困っていました。$ bundle install Fetching gem metadata from https://rubygems.org/............ Fetching version metadata from https://rubygems.org/. Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using thread_safe 0.3.5 Using net-ssh 3.2.0 Installing minitest 5.10.1 Your Gemfile.lock is corrupt. The following gem is missing from the DEPENDENCIES section: 'ffi' loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結論から言うと $ bundle install --without development で回避できま","link":"https://masutaka.net/2016-12-10-1/","isoDate":"2016-12-10T00:00:00.000Z","dateMiliSeconds":1481328000000,"authorName":"masutaka"},{"title":"yaml_vault が AWS での Rails 環境変数つらい問題を解決したと思う","content":"※ 弊社 feedforce で毎週行っている、インフラ共有会を元にした記事で\nす。AWS で Rails を使っている方を想定していますが、数人規模のチー\nムを意識した内容になっています。\nこちらの記事で yaml_vault を知ったので、実際に試してみました。\nyaml_vault+KMSでRailsアプリのconfig/secrets.ymlを暗号化してgitにコミットして管理する - Qiita 環境変数つらい SaaS の API Key などの秘匿情報をコードに埋め込まないために、Rails\nで dotenv を使っている方も多いかと思います。\nしかし、README.md にあるように 作者の @bkeepers さんは production\nでの利用は奨励していません。\ndotenv was originally created to load configuration variables into `ENV` in *development*. There are typically better ways to manage configuration in production environments - such as `/etc/environment` managed by [[Puppet|https://github.com/puppetlabs/puppet]] or [[Chef|https://github.com/chef/chef]], `heroku config`, etc. とは言え、/etc/environment を Chef の Encrypted Data Bag 等で構成","contentSnippet":"※ 弊社 feedforce で毎週行っている、インフラ共有会を元にした記事です。AWS で Rails を使っている方を想定していますが、数人規模のチームを意識した内容になっています。こちらの記事で yaml_vault を知ったので、実際に試してみました。yaml_vault+KMSでRailsアプリのconfig/secrets.ymlを暗号化してgitにコミットして管理する - Qiita 環境変数つらい SaaS の API Key などの秘匿情報をコードに埋め込まないために、Railsで dotenv を使っている方も多いかと思います。しかし、README.md にあるように 作者の @bkeepers さんは productionでの利用は奨励していません。dotenv was originally created to load configuration variables into `ENV` in *development*. There are typically better ways to manage configuration in production environments - such as `/etc/environment` managed by [[Puppet|https://github.com/puppetlabs/puppet]] or [[Chef|https://github.com/chef/chef]], `heroku config`, etc. とは言え、/etc/environment を Chef の Encrypted Data Bag 等で構成","link":"https://masutaka.net/2016-11-05-1/","isoDate":"2016-11-05T00:00:00.000Z","dateMiliSeconds":1478304000000,"authorName":"masutaka"},{"title":"ZenPad 3S 10 (Z500M) から始まる廃人生活","content":"８月に発表を知り、日本での発売を心待ちにして２ヶ月。10/19（水）にようやく日本で予約が始まりました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  速攻で予約し、同じ週の 10/22（土）にゲット出来ました。\nZenPad 3S 10 (Z500M) シルバー タブレットは親に iPad を買った時に一瞬所持したことはありますが、自分用を持つのは今回が初めてです。いやあ、タブレットいいですね（完全に時代から取り残されている人）。\nさて、こんな理由から最近タブレットへの物欲が高まっていました。\n Kindle Paperwhite に不満を感じ始めていた  ボリュームある技術書読むのが辛い  Kindle がなかったらもっと読めていなかったけど   マンガを読むのには全く適していない  描画が遅い 見開きページを見るためには手動で回転が必要 カラーページも見られないので Kindle for Mac で見てた   とは言え、Kindle Paperwhite は小説読むのにはすごく良いと思う   MacBook Air を布団に持ち込んで、Netflix とか見てた  テレビで見る時は PS4 使ってる。これは結構良い   実家に帰った時などの暇つぶし  iPhone だと小さすぎるし、MacBook Air だと大げさだと思っていた 本を読むのも Kindle では捗らず   狭い居酒屋だと、MacBook Air をバーン開いて飲むのが憚られる  最近は家飲みばかりになったけど    正直今まで ASUS はネットブックかつ安物というイメージが強く、眼中にありませんでした。Lenobo はセキュリティ的に危なくて論外です。","contentSnippet":"８月に発表を知り、日本での発売を心待ちにして２ヶ月。10/19（水）にようやく日本で予約が始まりました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  速攻で予約し、同じ週の 10/22（土）にゲット出来ました。ZenPad 3S 10 (Z500M) シルバー タブレットは親に iPad を買った時に一瞬所持したことはありますが、自分用を持つのは今回が初めてです。いやあ、タブレットいいですね（完全に時代から取り残されている人）。さて、こんな理由から最近タブレットへの物欲が高まっていました。 Kindle Paperwhite に不満を感じ始めていた  ボリュームある技術書読むのが辛い  Kindle がなかったらもっと読めていなかったけど   マンガを読むのには全く適していない  描画が遅い 見開きページを見るためには手動で回転が必要 カラーページも見られないので Kindle for Mac で見てた   とは言え、Kindle Paperwhite は小説読むのにはすごく良いと思う   MacBook Air を布団に持ち込んで、Netflix とか見てた  テレビで見る時は PS4 使ってる。これは結構良い   実家に帰った時などの暇つぶし  iPhone だと小さすぎるし、MacBook Air だと大げさだと思っていた 本を読むのも Kindle では捗らず   狭い居酒屋だと、MacBook Air をバーン開いて飲むのが憚られる  最近は家飲みばかりになったけど    正直今まで ASUS はネットブックかつ安物というイメージが強く、眼中にありませんでした。Lenobo はセキュリティ的に危なくて論外です。","link":"https://masutaka.net/2016-11-01-1/","isoDate":"2016-11-01T00:00:00.000Z","dateMiliSeconds":1477958400000,"authorName":"masutaka"},{"title":"今さらながら Knife-Zero を使ってみた","content":"個人と仕事のサーバはどちらも Knife-Solo で構成管理しています。\nChef がバージョンアップしたら、私はなるべく knife solo prepare し\nていますが、このコマンドは単純実行すると、サーバの台数に比例して時\n間がかかります。\nKnife-Zero でそれを解決できるのかなと思い、Getting Started してみ\nました。\n  結論 代替にはならない。knife zero bootstrap も knife solo prepare と同\n様、Chef をインストールするのは同じ。\n Home(ja) · Knife-Zero まずKnife-ZeroはKnife-Solo の乗り換え先ではありません。\n 仰る通りでした。\n勘違い loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  勘違いみたいですね。誰もツッコんでくれなかった&hellip;。( ；∀；)\nKnife-Solo は chef-solo gem ではなく chef-zero gem と依存関係があ\nるから、ずっと使えると思っていたけど、大きな勘違いだった。\nそもそも chef-solo gem は存在しない。chef gem に含まれる chef-solo","contentSnippet":"個人と仕事のサーバはどちらも Knife-Solo で構成管理しています。Chef がバージョンアップしたら、私はなるべく knife solo prepare していますが、このコマンドは単純実行すると、サーバの台数に比例して時間がかかります。Knife-Zero でそれを解決できるのかなと思い、Getting Started してみました。  結論 代替にはならない。knife zero bootstrap も knife solo prepare と同様、Chef をインストールするのは同じ。 Home(ja) · Knife-Zero まずKnife-ZeroはKnife-Solo の乗り換え先ではありません。 仰る通りでした。勘違い loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  勘違いみたいですね。誰もツッコんでくれなかった…。( ；∀；)Knife-Solo は chef-solo gem ではなく chef-zero gem と依存関係があるから、ずっと使えると思っていたけど、大きな勘違いだった。そもそも chef-solo gem は存在しない。chef gem に含まれる chef-solo","link":"https://masutaka.net/2016-10-30-1/","isoDate":"2016-10-30T00:00:00.000Z","dateMiliSeconds":1477785600000,"authorName":"masutaka"},{"title":"最近使っている、仕事のタスク管理","content":"以前、一日のタスク管理にタスクシュート を試した。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結局、息が詰まる気がして止めてしまったけど、このタスクシュートを意\n識した今のタスク管理はなかなか自分に合っている。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  タスクシュートの特長である「予定より遅れているから、これでは間に合\nわないな」という感覚を緩く知ることが出来ている。\n一日のタスク管理  前の日の日報で「翌営業日にやること」を書く ミーティング含めて、全てのタスクを順番に書き、午前と午後に分ける 午前に全て終わってなければ焦るので、タスクを減らすか、実装を軽めにする 予定より早く終わりそうなら、次のタスクかちょっとした改善タスクをやる  # &lt;i class=&#34;fa fa-fighter-jet&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; 翌営業日にやること ## 午前 1. 朝会 1. 日報の草稿を書く 1. xxxx 運用作業 1. GitHub PR のレビュー 1.","contentSnippet":"以前、一日のタスク管理にタスクシュート を試した。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結局、息が詰まる気がして止めてしまったけど、このタスクシュートを意識した今のタスク管理はなかなか自分に合っている。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  タスクシュートの特長である「予定より遅れているから、これでは間に合わないな」という感覚を緩く知ることが出来ている。一日のタスク管理  前の日の日報で「翌営業日にやること」を書く ミーティング含めて、全てのタスクを順番に書き、午前と午後に分ける 午前に全て終わってなければ焦るので、タスクを減らすか、実装を軽めにする 予定より早く終わりそうなら、次のタスクかちょっとした改善タスクをやる  # <i class=\"fa fa-fighter-jet\" aria-hidden=\"true\"></i> 翌営業日にやること ## 午前 1. 朝会 1. 日報の草稿を書く 1. xxxx 運用作業 1. GitHub PR のレビュー 1.","link":"https://masutaka.net/2016-10-26-1/","isoDate":"2016-10-26T00:00:00.000Z","dateMiliSeconds":1477440000000,"authorName":"masutaka"},{"title":"ElastiCache for Redis のスケールアップメモ","content":"先週 AWS ElastiCache for Redis を cache.m3.medium から\ncache.m4.large にスケールアップしました。今後のためにメモを残して\nおきます。\n背景 cache.m3.medium を Multi-AZ + Replica 1 台構成で運用していた。主な\n用途は Rails4 の Session Store サーバとして。\nBytesUsedForCache が cache.m3.medium のメモリ 2.78 GiB を超え、\nEvictions が発生し始めたため、cache.m4.large にスケールアップした。\nタイムライン メンテナンスウィンドウをセットした AM 3:00 になるとすぐに、当該ク\nラスターの Status が modifying になった。\nAM 3:07 に Rails から接続できなくなり、Primary の CPUUtilization\nが 60% 〜 90% で推移。Replica は普段通り。\nAM 4:16 にようやく復帰。Multi-AZ 構成で冗長性が担保されているため、\nデータは消失しない。\n感想  よくある質問 - Amazon ElastiCache｜AWS Q: 大きいノードタイプにスケールアップするにはどうすればよいですか?","contentSnippet":"先週 AWS ElastiCache for Redis を cache.m3.medium からcache.m4.large にスケールアップしました。今後のためにメモを残しておきます。背景 cache.m3.medium を Multi-AZ + Replica 1 台構成で運用していた。主な用途は Rails4 の Session Store サーバとして。BytesUsedForCache が cache.m3.medium のメモリ 2.78 GiB を超え、Evictions が発生し始めたため、cache.m4.large にスケールアップした。タイムライン メンテナンスウィンドウをセットした AM 3:00 になるとすぐに、当該クラスターの Status が modifying になった。AM 3:07 に Rails から接続できなくなり、Primary の CPUUtilizationが 60% 〜 90% で推移。Replica は普段通り。AM 4:16 にようやく復帰。Multi-AZ 構成で冗長性が担保されているため、データは消失しない。感想  よくある質問 - Amazon ElastiCache｜AWS Q: 大きいノードタイプにスケールアップするにはどうすればよいですか?","link":"https://masutaka.net/2016-10-24-1/","isoDate":"2016-10-24T00:00:00.000Z","dateMiliSeconds":1477267200000,"authorName":"masutaka"},{"title":"Slack API で mention 付き User Group を作る方法","content":"Slack には任意のグループを作ることが出来る、User Groups という機能\nがある。\nUser Groups – Slack Help Center チャットで使う時は @happy-peeps などで普通に mention を飛ばせるが、\nAPI を経由する時は特殊な書き方が必要になる。\nBasic message formatting &gt; Variables｜Slack 端的に書くと &lt;!subteam^ID|handle&gt; という書式が必要。\n例えば S012345 という ID の @happy-peeps User Group の場合は\n&lt;!subteam^S012345|happy-peeps&gt; で良い。\nID が曲者で以下の手順で取得できる。\n  https://api.slack.com/docs/oauth-test-tokens からテスト用のトー\nクンを取得\n  https://api.slack.com/methods/usergroups.list/test から当該 API\nのテストリクエストを行う。各グループの id フィールドがそれ\n  ※ Mackerel の Slack 通知がうまくいかなくて、右上から質問して分かり\nました。thx! @a_know 追記(2017-02-07):\n同様にリンク付き channel（例: #general）を作る方法もだいたい同じで\nした。\nBasic message formatting &gt; Linking to channels and users｜Slack 例えば #general の Channel ID が C024BE7LR の場合は","contentSnippet":"Slack には任意のグループを作ることが出来る、User Groups という機能がある。User Groups – Slack Help Center チャットで使う時は @happy-peeps などで普通に mention を飛ばせるが、API を経由する時は特殊な書き方が必要になる。Basic message formatting > Variables｜Slack 端的に書くと <!subteam^ID|handle> という書式が必要。例えば S012345 という ID の @happy-peeps User Group の場合は<!subteam^S012345|happy-peeps> で良い。ID が曲者で以下の手順で取得できる。  https://api.slack.com/docs/oauth-test-tokens からテスト用のトークンを取得  https://api.slack.com/methods/usergroups.list/test から当該 APIのテストリクエストを行う。各グループの id フィールドがそれ  ※ Mackerel の Slack 通知がうまくいかなくて、右上から質問して分かりました。thx! @a_know 追記(2017-02-07):同様にリンク付き channel（例: #general）を作る方法もだいたい同じでした。Basic message formatting > Linking to channels and users｜Slack 例えば #general の Channel ID が C024BE7LR の場合は","link":"https://masutaka.net/2016-10-19-1/","isoDate":"2016-10-19T00:00:00.000Z","dateMiliSeconds":1476835200000,"authorName":"masutaka"},{"title":"Go で Mackerel の Fastly billing plugin を作った","content":"弊社の @tjinjin が作った mackerel-plugin-aws-billing は導入は簡単\nだし、AWS 料金の推移が気軽に見られるので、Fastly 版を作ってみました。\n  Fastly は少し前から会社で使い始めています。なかなか便利で、CDN な\nのに一瞬でキャッシュを消せるのもさることながら、料金含めた全てのメ\nトリクスがリアルタイムで見られるのがすごいですね。今のところ、超安\n定稼働しています。\nさて、今回作った mackerel-plugin-fastly-billing は Fastly の\nBilling API を叩いて、その月の現在の料金を取ってくるシンプルな\nplugin です。curl 的には例えば以下になります。\n$ curl -s -H &#34;Fastly-Key: &lt;Fastly API Key&gt;&#34; \\ https://api.fastly.com/billing/year/2016/month/10 | jq .total.cost 先日、mackerel-plugin-delayed-job-count も作ったのですが、\nGo で Mackerel の delayed_job plugin を作った｜feedforce Engineers&rsquo; blog 今回は少しパワーアップしております。delayed_job も追随しよう&hellip;。\n書き方を少し変えた main() を先頭に書きました。持論ですが、コードは上から下に流れるよ\nうに書くと読みやすいと思います。\n最初の会社で C を書いていた頃は、特にそのようにしていましたが、LL\nだとそう書けないことがあるので、最近は自重していました。Go はコン\nパイル型言語で C にも似ているので、以前の書き方にしてみました。\n外部変数を使うのも止めました。\nPluginWithPrefix interface で実装した 以前の Plugin interface と違う点は MetricKeyPrefix() が増えた こと","contentSnippet":"弊社の @tjinjin が作った mackerel-plugin-aws-billing は導入は簡単だし、AWS 料金の推移が気軽に見られるので、Fastly 版を作ってみました。  Fastly は少し前から会社で使い始めています。なかなか便利で、CDN なのに一瞬でキャッシュを消せるのもさることながら、料金含めた全てのメトリクスがリアルタイムで見られるのがすごいですね。今のところ、超安定稼働しています。さて、今回作った mackerel-plugin-fastly-billing は Fastly のBilling API を叩いて、その月の現在の料金を取ってくるシンプルなplugin です。curl 的には例えば以下になります。$ curl -s -H \"Fastly-Key: <Fastly API Key>\" \\ https://api.fastly.com/billing/year/2016/month/10 | jq .total.cost 先日、mackerel-plugin-delayed-job-count も作ったのですが、Go で Mackerel の delayed_job plugin を作った｜feedforce Engineers’ blog 今回は少しパワーアップしております。delayed_job も追随しよう…。書き方を少し変えた main() を先頭に書きました。持論ですが、コードは上から下に流れるように書くと読みやすいと思います。最初の会社で C を書いていた頃は、特にそのようにしていましたが、LLだとそう書けないことがあるので、最近は自重していました。Go はコンパイル型言語で C にも似ているので、以前の書き方にしてみました。外部変数を使うのも止めました。PluginWithPrefix interface で実装した 以前の Plugin interface と違う点は MetricKeyPrefix() が増えた こと","link":"https://masutaka.net/2016-10-16-1/","isoDate":"2016-10-16T00:00:00.000Z","dateMiliSeconds":1476576000000,"authorName":"masutaka"},{"title":"compare_linker v1.3.0 をリリースした","content":"compare_linker | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.\n  仕事やプライベートで、毎週自動 bundle update していますが、Gem に\nよっては GitHub の compare Link を作れませんでした。\n人間が手動でリンクを作ってコメントするのが無駄な作業で、なんだか申\nし訳なかったので修正してみました。これで GitHub に Git のタグがな\nい Gem 以外は救えるようになったはず。","contentSnippet":"compare_linker | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.  仕事やプライベートで、毎週自動 bundle update していますが、Gem によっては GitHub の compare Link を作れませんでした。人間が手動でリンクを作ってコメントするのが無駄な作業で、なんだか申し訳なかったので修正してみました。これで GitHub に Git のタグがない Gem 以外は救えるようになったはず。","link":"https://masutaka.net/2016-10-09-1/","isoDate":"2016-10-09T00:00:00.000Z","dateMiliSeconds":1475971200000,"authorName":"masutaka"},{"title":"ローカルとGistを同期する gist_updater gem を作った","content":"必要に迫られて Ruby のスクリプトを作ったら、汎用化できたので\nGem にしてみました。\n gist_updater | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.\n  何ができるか？ このような YAML ファイルを用意し、gist_updater コマンドを実行する\nと、ローカルの .emacs.d/init.el によって\nhttps://gist.github.com/masutaka/8177244 がアップデートされます。\n- - 8177244 - .","contentSnippet":"必要に迫られて Ruby のスクリプトを作ったら、汎用化できたのでGem にしてみました。 gist_updater | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.  何ができるか？ このような YAML ファイルを用意し、gist_updater コマンドを実行すると、ローカルの .emacs.d/init.el によってhttps://gist.github.com/masutaka/8177244 がアップデートされます。- - 8177244 - .","link":"https://masutaka.net/2016-09-29-1/","isoDate":"2016-09-29T00:00:00.000Z","dateMiliSeconds":1475107200000,"authorName":"masutaka"},{"title":"『みんなのGo言語』を読んだ","content":"話題になっていたので、読んでみました。\n [2015-02-11-1] で Go を学んだ私ですが、その後あまり使っていなかったので、情報をアップデートできて良かったです。\n特に第１章の開発環境のあたり。goimports の import 自動挿入は良いですね。早速 go get して init.el に以下を設定しました（go-mode.el は導入済み）。\n(setq gofmt-command &#34;goimports&#34;) 第６章のテストも即戦力になりそうです。\n以下は読んでメモった箇所を中心にしたまとめです。\n全体を通して感じたこと Go の文法が多少分かる方向けの本だと思います。P.19 にも書いてある「A Tour of Go 」などをやった後に読むと効果的だと思います。\nただ、世間でオススメされている「A Tour of Go」ですが、私はチュートリアルとしては難しいと思います。半分くらいから Go よりアルゴリズムのチュートリアルっぽくなってくるので。\n個人的には [2015-02-11-1] で紹介した『WEB&#43;DB PRESS Vol.82 』の「はじめてのGO」がオススメです。\n残念だったこと 動かないコードがあったのは残念でした。\n例えば第５章 reflect の P.108 です。コードを書いて動かすと、\npackage main import ( &#34;fmt&#34; &#34;reflect&#34; ) type Point struct { X int Y int } func main() { p := &amp;Point{X: 10, Y: 5} rv := reflect.","contentSnippet":"話題になっていたので、読んでみました。 [2015-02-11-1] で Go を学んだ私ですが、その後あまり使っていなかったので、情報をアップデートできて良かったです。特に第１章の開発環境のあたり。goimports の import 自動挿入は良いですね。早速 go get して init.el に以下を設定しました（go-mode.el は導入済み）。(setq gofmt-command \"goimports\") 第６章のテストも即戦力になりそうです。以下は読んでメモった箇所を中心にしたまとめです。全体を通して感じたこと Go の文法が多少分かる方向けの本だと思います。P.19 にも書いてある「A Tour of Go 」などをやった後に読むと効果的だと思います。ただ、世間でオススメされている「A Tour of Go」ですが、私はチュートリアルとしては難しいと思います。半分くらいから Go よりアルゴリズムのチュートリアルっぽくなってくるので。個人的には [2015-02-11-1] で紹介した『WEB+DB PRESS Vol.82 』の「はじめてのGO」がオススメです。残念だったこと 動かないコードがあったのは残念でした。例えば第５章 reflect の P.108 です。コードを書いて動かすと、package main import ( \"fmt\" \"reflect\" ) type Point struct { X int Y int } func main() { p := &Point{X: 10, Y: 5} rv := reflect.","link":"https://masutaka.net/2016-09-25-1/","isoDate":"2016-09-25T00:00:00.000Z","dateMiliSeconds":1474761600000,"authorName":"masutaka"},{"title":"『オブジェクト指向設計実践ガイド』を読んだ","content":"本当に良い本でした。読んで良かった。初心者を中心に中級者にも刺さる\n本だと思います。輪読などして、チームで読むとオブジェクト指向設計の\nそもそもの話をしなくて良さそうです。\n 難しい話が易しく説明されており「あ、そうだったのか」と思うことが度々\nでした。ボリュームも全９章とコンパクトで、１日１章読むのに丁度よかっ\nたです。\n読んでメモった箇所を中心にまとめていきます。\n第２章 単一責任のクラスを設計する インスタンス変数へのアクセス方法を誤解していました。\n P46\n変数はそれらを定義しているクラスからでさえも隠蔽しましょう\n 今まで他のクラスから隠蔽する時は、直接 @hoge などにアクセスしてい\nましたが、中からも attr_reader などで隠蔽する必要があるそうです。\n「データではなく、振る舞いに依存する」ためだそうです。\nメモ化などでこうした手法は使っていたけど、単純な参照も隠蔽する必要\nがあるのですね&hellip;。\nただ、中からしか使わない変数も単純な attr_reader を使っていたのは、\n納得いかなかったです。こうして外から隠蔽する必要はないでしょうか？\nclass Hoge attr_reader :hoge # 外からも参照される #... private attr_reader :hogehoge # 中からしか参照されない #... end 第３章 依存関係を管理する 「依存オブジェクトの注入（DI）」を中心に疎結合なコードの書き方がま\nとまった章です。\nDI は正直今までピンと来ていませんでしたが、この章を読んで完璧に理\n解しました。10 年前から使っていました&hellip;。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  数日経ってもまだ何か言ってる。","contentSnippet":"本当に良い本でした。読んで良かった。初心者を中心に中級者にも刺さる本だと思います。輪読などして、チームで読むとオブジェクト指向設計のそもそもの話をしなくて良さそうです。 難しい話が易しく説明されており「あ、そうだったのか」と思うことが度々でした。ボリュームも全９章とコンパクトで、１日１章読むのに丁度よかったです。読んでメモった箇所を中心にまとめていきます。第２章 単一責任のクラスを設計する インスタンス変数へのアクセス方法を誤解していました。 P46変数はそれらを定義しているクラスからでさえも隠蔽しましょう 今まで他のクラスから隠蔽する時は、直接 @hoge などにアクセスしていましたが、中からも attr_reader などで隠蔽する必要があるそうです。「データではなく、振る舞いに依存する」ためだそうです。メモ化などでこうした手法は使っていたけど、単純な参照も隠蔽する必要があるのですね…。ただ、中からしか使わない変数も単純な attr_reader を使っていたのは、納得いかなかったです。こうして外から隠蔽する必要はないでしょうか？class Hoge attr_reader :hoge # 外からも参照される #... private attr_reader :hogehoge # 中からしか参照されない #... end 第３章 依存関係を管理する 「依存オブジェクトの注入（DI）」を中心に疎結合なコードの書き方がまとまった章です。DI は正直今までピンと来ていませんでしたが、この章を読んで完璧に理解しました。10 年前から使っていました…。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  数日経ってもまだ何か言ってる。","link":"https://masutaka.net/2016-09-22-1/","isoDate":"2016-09-22T00:00:00.000Z","dateMiliSeconds":1474502400000,"authorName":"masutaka"},{"title":"安くてダサすぎない腕時計を買った","content":"今日アキバに ASUS のタブレット を見に行ったついでに、腕時計も見ていて\nらふらっと買ってしまいました。\nここ何年か腕時計を身に付けていませんでしたが、私は結構時間を気にし\nて iPhone を見てしまうのですよね。都度ケツポケから出すのも面倒になっ\nたので、こんなのを探していました。\n 日付も分かるデジタル 見やすくて軽くてダサすぎない程度のデザイン。ちょっと違うけど\nPebble Time Round っぽいやつ 充電はしたくない。数日しか持たないバッテリーは論外 歩数や心拍数は測らなくて良い。iPhone との連携も不要 置いたときに転がらず、時刻を確認できればうれしい 値段は ￥5,000 未満  案外なくてここ半年ほど探していましたが、この度購入する運びとなりま\nした。\n 置いた時に転がらないというのは、こういうことです。はい、細かい奴で\nすね。試着した時に正直確認し忘れていましたが、うまく自立して良かっ\nたです。\n帰って Amazon を見ていたら、逆輸入版で ￥2,732 のやつを発見。ちょっ\nと後悔したけどまあいいか。\n ","contentSnippet":"今日アキバに ASUS のタブレット を見に行ったついでに、腕時計も見ていてらふらっと買ってしまいました。ここ何年か腕時計を身に付けていませんでしたが、私は結構時間を気にして iPhone を見てしまうのですよね。都度ケツポケから出すのも面倒になったので、こんなのを探していました。 日付も分かるデジタル 見やすくて軽くてダサすぎない程度のデザイン。ちょっと違うけどPebble Time Round っぽいやつ 充電はしたくない。数日しか持たないバッテリーは論外 歩数や心拍数は測らなくて良い。iPhone との連携も不要 置いたときに転がらず、時刻を確認できればうれしい 値段は ￥5,000 未満  案外なくてここ半年ほど探していましたが、この度購入する運びとなりました。 置いた時に転がらないというのは、こういうことです。はい、細かい奴ですね。試着した時に正直確認し忘れていましたが、うまく自立して良かったです。帰って Amazon を見ていたら、逆輸入版で ￥2,732 のやつを発見。ちょっと後悔したけどまあいいか。","link":"https://masutaka.net/2016-09-19-1/","isoDate":"2016-09-19T00:00:00.000Z","dateMiliSeconds":1474243200000,"authorName":"masutaka"},{"title":"Emacs-25.1 にアップデートした","content":"本日 Emacs-25.1 がリリースされていました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  いつもであれば、[2015-04-12-1] のように Mac port パッチを当てます\nが、Emacs 25 からほとんどの機能が本体にマージされるという話 があっ\nたので、パッチを当てずにアップデートしてみました。\nちなみに私が Mac port パッチを当てていたのは、Emacs が頻繁に強制終\n了していたからです。素の Emacs が安定していれば、今後もパッチを当\nてないと思います。\nすでに Emacs-25.1 対応の Mac port パッチは出ています。早い&hellip;。\nftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-25.1-mac-6.0.tar.gz 素晴らしいことに、Homebrew も速攻対応されており $ brew cask install emacs でインストール出来ます。\nアップデート時のエラーや警告対応 init.el がエラーになったのは、1 の php-mode だけでした。\n参考までに修正後の init.el はこちらです。\nhttps://gist.github.com/masutaka/8177244/8d4e0d1364b401d65480d52e00555820a7a1d0df 1. (require &lsquo;php-mode) が謎のエラーを吐く バイトコンパイル要因のエラーっぽかったので、Emacs-25.","contentSnippet":"本日 Emacs-25.1 がリリースされていました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  いつもであれば、[2015-04-12-1] のように Mac port パッチを当てますが、Emacs 25 からほとんどの機能が本体にマージされるという話 があったので、パッチを当てずにアップデートしてみました。ちなみに私が Mac port パッチを当てていたのは、Emacs が頻繁に強制終了していたからです。素の Emacs が安定していれば、今後もパッチを当てないと思います。すでに Emacs-25.1 対応の Mac port パッチは出ています。早い…。ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-25.1-mac-6.0.tar.gz 素晴らしいことに、Homebrew も速攻対応されており $ brew cask install emacs でインストール出来ます。アップデート時のエラーや警告対応 init.el がエラーになったのは、1 の php-mode だけでした。参考までに修正後の init.el はこちらです。https://gist.github.com/masutaka/8177244/8d4e0d1364b401d65480d52e00555820a7a1d0df 1. (require ‘php-mode) が謎のエラーを吐く バイトコンパイル要因のエラーっぽかったので、Emacs-25.","link":"https://masutaka.net/2016-09-18-1/","isoDate":"2016-09-18T00:00:00.000Z","dateMiliSeconds":1474156800000,"authorName":"masutaka"},{"title":"『SQLアンチパターン』を読んだ","content":"SQL との接点は Rails を使う時くらいで、Explain でテンポラリテーブ\nルが作られるようなクエリを極力発行しない注意くらいしかしておらず、\n危機感があったので読んでみました。あ、監訳者の @t_wada さんのツイ\nートにももちろん影響されました。\n実は 3 月には手に入れていたのですが、ずっと積読していて読み始めた\nのが先月からだったという&hellip;。とは言え、各章が 10 ページほどで収まっ\nているので、なるべく毎日 2 章読むようにしたら、20 日ほどで読み終え\nることが出来ました。\n第 1 章は名前はさておき知っている人も多いジェイウォーク（信号無視）。\nVARCHAR 型にカンマ区切りのテキストを入れてしまうアレです。さすがに\n私も知っているので、ニヤリとしたのを覚えています。出だしのアンチパ\nターンとしては難易度低目で良かったです。\n読む前は上記のようなテーブル設計（本書ではデータベース論理設計とあ\nる）のアンチパターンがほとんどかと思っていましたが、クエリのアンチ\nパターンにも言及していたのが意外でした。そりゃそうか。\n         データベース論理設計のアンチパターン 全 8 章   データベース物理設計のアンチパターン 全 4 章   クエリのアンチパターン 全 6 章   アプリケーション開発のアンチパターン 全 7 章   付録: 正規化のルール 全 1 章    個人的には Rails が所々で言及されていたのが助かりました。ポリモー","contentSnippet":"SQL との接点は Rails を使う時くらいで、Explain でテンポラリテーブルが作られるようなクエリを極力発行しない注意くらいしかしておらず、危機感があったので読んでみました。あ、監訳者の @t_wada さんのツイートにももちろん影響されました。実は 3 月には手に入れていたのですが、ずっと積読していて読み始めたのが先月からだったという…。とは言え、各章が 10 ページほどで収まっているので、なるべく毎日 2 章読むようにしたら、20 日ほどで読み終えることが出来ました。第 1 章は名前はさておき知っている人も多いジェイウォーク（信号無視）。VARCHAR 型にカンマ区切りのテキストを入れてしまうアレです。さすがに私も知っているので、ニヤリとしたのを覚えています。出だしのアンチパターンとしては難易度低目で良かったです。読む前は上記のようなテーブル設計（本書ではデータベース論理設計とある）のアンチパターンがほとんどかと思っていましたが、クエリのアンチパターンにも言及していたのが意外でした。そりゃそうか。         データベース論理設計のアンチパターン 全 8 章   データベース物理設計のアンチパターン 全 4 章   クエリのアンチパターン 全 6 章   アプリケーション開発のアンチパターン 全 7 章   付録: 正規化のルール 全 1 章    個人的には Rails が所々で言及されていたのが助かりました。ポリモー","link":"https://masutaka.net/2016-08-17-1/","isoDate":"2016-08-17T00:00:00.000Z","dateMiliSeconds":1471392000000,"authorName":"masutaka"},{"title":"DeNA の遺伝子検査サービス MYCODE を試してみた","content":"以前 DeNA が遺伝子検査サービスを始めると話題になった MYCODE がキャ\nンペーンをやっていたので試してみました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  今回試したのは『ヘルスケア 』というパッケージ。通常 ￥29,800 のとこ\nろ、キャンペーンが使えたので 40% OFF の ￥17,800 でした。\nやり方は簡単で、送られてくる容器に唾液を入れて郵送するだけ。３週間\nくらいで結果が Web 上から確認できました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ディスカバリーという、祖先のルーツを教えてくれるオプションも試して\nみました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.","contentSnippet":"以前 DeNA が遺伝子検査サービスを始めると話題になった MYCODE がキャンペーンをやっていたので試してみました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  今回試したのは『ヘルスケア 』というパッケージ。通常 ￥29,800 のところ、キャンペーンが使えたので 40% OFF の ￥17,800 でした。やり方は簡単で、送られてくる容器に唾液を入れて郵送するだけ。３週間くらいで結果が Web 上から確認できました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ディスカバリーという、祖先のルーツを教えてくれるオプションも試してみました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.","link":"https://masutaka.net/2016-07-30-1/","isoDate":"2016-07-30T00:00:00.000Z","dateMiliSeconds":1469836800000,"authorName":"masutaka"},{"title":"『Atom実践入門』を読んだ","content":"著者の @tomoyaton さんから献本頂きました。ありがとうございます。\n本書を読んでまず思ったことは「良い時代になったなあ」です。\n私は 2000 年から Emacs を愛用しており、20 代の頃、多大な時間を使っ\nて Emacs をカスタマイズしてきました。そこで習得した Elisp はプログ\nラマーとしての私に幅を持たせてくれましたが、実務でそのまま使える技\n術ではありませんでした。\nでも今は Atom があります。使い込めば JS や HTML/CSS を始めとした、\n実務で即使える、最新の Web 技術を習得できます。\n本書では第６章からがその本領発揮で、Chrome Developer Tools の使い\n方に始まり、180 ページ目では Shadow DOM と Custom Elements まで解\n説しています。\n今は時間とか優先度とかの兼ね合いで乗り換えない予定ですが、隠居して\n時間ができたら乗り換えるかも？\nAtom をインストール そうこう言いつつも、本書を読みながら久々に Atom をインストールして\nみました。\nEmacs と違って、ネイティブにサポートしている機能がいくつも見つかり\nます。\n  Atom にはタブがありますが、Emacs には未だにありません。Elscreen\n等を自分でインストールする必要がある上に、タブは 10 個までしか使え\nません。\n  Atom は Git を標準でサポートしていますが、Emacs は vc.el という\n不完全な形のサポートです。私は Magit に挫折して egg.","contentSnippet":"著者の @tomoyaton さんから献本頂きました。ありがとうございます。本書を読んでまず思ったことは「良い時代になったなあ」です。私は 2000 年から Emacs を愛用しており、20 代の頃、多大な時間を使って Emacs をカスタマイズしてきました。そこで習得した Elisp はプログラマーとしての私に幅を持たせてくれましたが、実務でそのまま使える技術ではありませんでした。でも今は Atom があります。使い込めば JS や HTML/CSS を始めとした、実務で即使える、最新の Web 技術を習得できます。本書では第６章からがその本領発揮で、Chrome Developer Tools の使い方に始まり、180 ページ目では Shadow DOM と Custom Elements まで解説しています。今は時間とか優先度とかの兼ね合いで乗り換えない予定ですが、隠居して時間ができたら乗り換えるかも？Atom をインストール そうこう言いつつも、本書を読みながら久々に Atom をインストールしてみました。Emacs と違って、ネイティブにサポートしている機能がいくつも見つかります。  Atom にはタブがありますが、Emacs には未だにありません。Elscreen等を自分でインストールする必要がある上に、タブは 10 個までしか使えません。  Atom は Git を標準でサポートしていますが、Emacs は vc.el という不完全な形のサポートです。私は Magit に挫折して egg.","link":"https://masutaka.net/2016-07-20-1/","isoDate":"2016-07-20T00:00:00.000Z","dateMiliSeconds":1468972800000,"authorName":"masutaka"},{"title":"第16回Elasticsearch勉強会に参加してきた #elasticsearchjp","content":"Elasticsearch は [2014-12-14-1] から個人で使っています。会社によう\nやく導入できた こともあり、今月は自分にとって Elasticsearch 一色でした。\n GrowthForecast のデータを Elasticsearch にインポートした [2016-06-13-1]  1.7 から 2.3 にバージョンアップしたらハマってフォーラムで質問した 2016/06/14  Kibana-4.5 がメモリをバカ食いするので調べて対策した [2016-06-26-1]   ちょうどよいタイミングで勉強会の案内を見つけたため、月の締めとして\n初参加してきました。\n第16回elasticsearch勉強会 #elasticsearch #elasticsearchjp - elasticsearch勉強会｜Doorkeeper 当日の朝、60 人くらいキャンセル待ちだったので諦めていたのですよ。\nでも、あれよあれよという間に参加可能に・・・！\n@johtani はじめとした主催者の皆様、ありがとうございました。\nLogstashとElasticsearchで作るEnterprise Search Platform   Elastic 社の Kosho Owa 氏による発表。\nsamba 上のドキュメントの変更を vfs_full_audit でシステムログに記録。\n必要なログを Logstash から Elasticsearch に送ることで検索インデッ\nクス更新のトリガーとしているというお話。\n残念ながら Logstash は使ったことはありませんが、ちょっとだけ興味持\nちました。\noutput で curl とかを eval するのはスケールしないとのこと。その代\nわりの方法で filter で ruby を使っていたので、質問タイムで毎回","contentSnippet":"Elasticsearch は [2014-12-14-1] から個人で使っています。会社にようやく導入できた こともあり、今月は自分にとって Elasticsearch 一色でした。 GrowthForecast のデータを Elasticsearch にインポートした [2016-06-13-1]  1.7 から 2.3 にバージョンアップしたらハマってフォーラムで質問した 2016/06/14  Kibana-4.5 がメモリをバカ食いするので調べて対策した [2016-06-26-1]   ちょうどよいタイミングで勉強会の案内を見つけたため、月の締めとして初参加してきました。第16回elasticsearch勉強会 #elasticsearch #elasticsearchjp - elasticsearch勉強会｜Doorkeeper 当日の朝、60 人くらいキャンセル待ちだったので諦めていたのですよ。でも、あれよあれよという間に参加可能に・・・！@johtani はじめとした主催者の皆様、ありがとうございました。LogstashとElasticsearchで作るEnterprise Search Platform   Elastic 社の Kosho Owa 氏による発表。samba 上のドキュメントの変更を vfs_full_audit でシステムログに記録。必要なログを Logstash から Elasticsearch に送ることで検索インデックス更新のトリガーとしているというお話。残念ながら Logstash は使ったことはありませんが、ちょっとだけ興味持ちました。output で curl とかを eval するのはスケールしないとのこと。その代わりの方法で filter で ruby を使っていたので、質問タイムで毎回","link":"https://masutaka.net/2016-06-28-1/","isoDate":"2016-06-28T00:00:00.000Z","dateMiliSeconds":1467072000000,"authorName":"masutaka"},{"title":"Kibana-4.5 のメモリ使用量が増え続ける件への対処方法と結果","content":"先日 Elasticsearch を 1.7.5 から 2.3.3 に、Kibana を 4.1.2 から\n4.5.1 にアップデートしました。\nアップデート自体はそれなりにハマったものの、なんとか対処できました。 ただ、Kibana のメモリ使用量が増え続け、さながらメモリリークのよう\nでした。\nこちらの記事の方法で解決できたので、結果とともに記録します。\nver4.2以降のkibanaが突然死する問題について - mnatsu31’s blog 環境 OS: Ubuntu-14.04 LTS\nMemory: 2GB\nElasticsearch: 2.3.3\nKibana: 4.5.1\n※ Elasticsearch と Kibana はともに公式パッケージを使用。\n Repositories｜Elasticsearch Reference [2.3]｜Elastic  Getting Kibana Up and Running｜Kibana User Guide [4.5]｜Elastic   対処方法 /etc/init.d/kibana を以下のように変更し、&quot;$ service kibana\nrestart&quot; しました。本当はこのファイルは構成管理したくないのですがね&hellip;。\n--- /etc/init.d/kibana_orig\t2016-06-25 13:03:43.000000000 +0900 +++ /etc/init.d/kibana\t2016-06-26 10:13:28.000000000 +0900 @@ -18,6 +18,9 @@ PATH=/sbin:/usr/sbin:/bin:/usr/bin export PATH +NODE_OPTIONS=&#34;--max-old-space-size=256&#34; +export NODE_OPTIONS + name=kibana program=/opt/kibana/bin/kibana args=&#39;&#39; 前述の記事によると Kibana （というか Node.","contentSnippet":"先日 Elasticsearch を 1.7.5 から 2.3.3 に、Kibana を 4.1.2 から4.5.1 にアップデートしました。アップデート自体はそれなりにハマったものの、なんとか対処できました。 ただ、Kibana のメモリ使用量が増え続け、さながらメモリリークのようでした。こちらの記事の方法で解決できたので、結果とともに記録します。ver4.2以降のkibanaが突然死する問題について - mnatsu31’s blog 環境 OS: Ubuntu-14.04 LTSMemory: 2GBElasticsearch: 2.3.3Kibana: 4.5.1※ Elasticsearch と Kibana はともに公式パッケージを使用。 Repositories｜Elasticsearch Reference [2.3]｜Elastic  Getting Kibana Up and Running｜Kibana User Guide [4.5]｜Elastic   対処方法 /etc/init.d/kibana を以下のように変更し、\"$ service kibanarestart\" しました。本当はこのファイルは構成管理したくないのですがね…。--- /etc/init.d/kibana_orig\t2016-06-25 13:03:43.000000000 +0900 +++ /etc/init.d/kibana\t2016-06-26 10:13:28.000000000 +0900 @@ -18,6 +18,9 @@ PATH=/sbin:/usr/sbin:/bin:/usr/bin export PATH +NODE_OPTIONS=\"--max-old-space-size=256\" +export NODE_OPTIONS + name=kibana program=/opt/kibana/bin/kibana args='' 前述の記事によると Kibana （というか Node.","link":"https://masutaka.net/2016-06-26-1/","isoDate":"2016-06-26T00:00:00.000Z","dateMiliSeconds":1466899200000,"authorName":"masutaka"},{"title":"Ruby の構文をトークンに切り分ける","content":"個人的なメモ\n[1] pry(main)&gt; Ripper.lex(&#39;:manage/home&#39;) =&gt; [[[1, 0], :on_symbeg, &#34;:&#34;], [[1, 1], :on_ident, &#34;manage&#34;], [[1, 7], :on_op, &#34;/&#34;], [[1, 8], :on_ident, &#34;home&#34;]] &ldquo;:&rdquo; → シンボルの開始\n&ldquo;manage&rdquo; → 識別子(identifier)\n&ldquo;/&rdquo; → 演算子(operator)\n&ldquo;home&rdquo; → 識別子\nclass Ripper (Ruby 2.3.0) ","contentSnippet":"個人的なメモ[1] pry(main)> Ripper.lex(':manage/home') => [[[1, 0], :on_symbeg, \":\"], [[1, 1], :on_ident, \"manage\"], [[1, 7], :on_op, \"/\"], [[1, 8], :on_ident, \"home\"]] “:” → シンボルの開始“manage” → 識別子(identifier)“/” → 演算子(operator)“home” → 識別子class Ripper (Ruby 2.3.0)","link":"https://masutaka.net/2016-06-22-1/","isoDate":"2016-06-22T00:00:00.000Z","dateMiliSeconds":1466553600000,"authorName":"masutaka"},{"title":"BitBar の Emacs プラグインにエラー処理を追加した","content":"たまに https://melpa.org のレスポンスが悪いせいか、\n~/.emacs.d/elpa/archives/melpa/archive-contents が壊れるので、\nエラー処理を追加しました。\n壊れた時はこのファイルの最後がこのようになります。\n;; 壊れてない時 (:keywords &#34;convenience&#34; &#34;window-management&#34;))]))  ;; 壊れた時はこの辺に nil が入る (:keywords &#34;convenience&#34; &#34;window-management&#34;))])nil) 壊れていたら最大 3 回リトライして修復を試みます。それでも壊れてい\nたら仕方ないということで。\n1 週間くらい使っていて大丈夫そうだったので、PR 出して本日マージさ\nれました。\nhttps://github.com/matryer/bitbar-plugins/pull/444 公式サイトからインストールできます。\nhttps://getbitbar.com/plugins/Dev/Emacs/emacs-package-updates.1d.sh ","contentSnippet":"たまに https://melpa.org のレスポンスが悪いせいか、~/.emacs.d/elpa/archives/melpa/archive-contents が壊れるので、エラー処理を追加しました。壊れた時はこのファイルの最後がこのようになります。;; 壊れてない時 (:keywords \"convenience\" \"window-management\"))]))  ;; 壊れた時はこの辺に nil が入る (:keywords \"convenience\" \"window-management\"))])nil) 壊れていたら最大 3 回リトライして修復を試みます。それでも壊れていたら仕方ないということで。1 週間くらい使っていて大丈夫そうだったので、PR 出して本日マージされました。https://github.com/matryer/bitbar-plugins/pull/444 公式サイトからインストールできます。https://getbitbar.com/plugins/Dev/Emacs/emacs-package-updates.1d.sh","link":"https://masutaka.net/2016-06-21-1/","isoDate":"2016-06-21T00:00:00.000Z","dateMiliSeconds":1466467200000,"authorName":"masutaka"},{"title":"fluent-logger-ruby が堅牢だった件","content":"[2016-06-13-1] にも書いたとおり、こちらの PR で fluent-logger-ruby を導入しました。\nfluentd にも POST する by masutaka · Pull Request #40 · masutaka/masutaka-metrics その時に、こんな問題に気づきました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結論から言うと、Wrapper を作る必要はありません（一度作ってしまった\nけど&hellip; ）。fluent-logger-ruby がいい感じに処理してくれます。\nfluent-logger-ruby の基本的な使い方は、プログラム開始時に #new し\nてインスタンスを保持し、あとは必要な時に #post を呼ぶだけです。\nclass Masutaka def initialize @fluent_logger = ::Fluent::Logger::FluentLogger.new end def hoge metrics = { &#39;field1&#39; =&gt; &#39;hogehoge&#39; } @fluent_logger.post(&#39;masutaka.metrics&#39;, metrics) end end プログラム稼働中に fluentd が restart または reload すると、","contentSnippet":"[2016-06-13-1] にも書いたとおり、こちらの PR で fluent-logger-ruby を導入しました。fluentd にも POST する by masutaka · Pull Request #40 · masutaka/masutaka-metrics その時に、こんな問題に気づきました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結論から言うと、Wrapper を作る必要はありません（一度作ってしまったけど… ）。fluent-logger-ruby がいい感じに処理してくれます。fluent-logger-ruby の基本的な使い方は、プログラム開始時に #new してインスタンスを保持し、あとは必要な時に #post を呼ぶだけです。class Masutaka def initialize @fluent_logger = ::Fluent::Logger::FluentLogger.new end def hoge metrics = { 'field1' => 'hogehoge' } @fluent_logger.post('masutaka.metrics', metrics) end end プログラム稼働中に fluentd が restart または reload すると、","link":"https://masutaka.net/2016-06-13-2/","isoDate":"2016-06-13T01:00:00.000Z","dateMiliSeconds":1465779600000,"authorName":"masutaka"},{"title":"GrowthForecast のデータを Elasticsearch にインポートした","content":"そもそもこんな理由で、インポートしました。\n このサーバで Elasticsearch + Kibana と GrowthForecast を両方稼働するのはリソースの無駄 GrowthForecast は私の環境では [2014-09-23-2] という問題がある  インポートする方法はこちらの Issue にまとめました。\nGrowthForecastのデータをelasticsearchにインポートする方法を調べる · Issue #4 · masutaka/masutaka-metrics Elasticsearch の Bulk API で比較的簡単にインポートすることが出来ま\nした。少しクセがあり苦戦した経緯は上の Issue に書いてあります。\nインポートしたデータ量はたったの 600 レコード程度です。データの内\n容としてはこのブログの Feedly, Hatena::Bookmark, Live Dwango\nReader の購読者数やブックマーク数をグラフ化しています。\nPOST しているのは自作の masutaka-metrics です。今は GrowthForecast\nと fluentd 両方に POST していますが、そのうち fluentd だけにします。\n今回 fluent-logger gem を導入しました。\nfluentd にも POST する by masutaka · Pull Request #40 · masutaka/masutaka-metrics いろいろあった話は次回に書くとして、簡単に fluentd に任意のデータ","contentSnippet":"そもそもこんな理由で、インポートしました。 このサーバで Elasticsearch + Kibana と GrowthForecast を両方稼働するのはリソースの無駄 GrowthForecast は私の環境では [2014-09-23-2] という問題がある  インポートする方法はこちらの Issue にまとめました。GrowthForecastのデータをelasticsearchにインポートする方法を調べる · Issue #4 · masutaka/masutaka-metrics Elasticsearch の Bulk API で比較的簡単にインポートすることが出来ました。少しクセがあり苦戦した経緯は上の Issue に書いてあります。インポートしたデータ量はたったの 600 レコード程度です。データの内容としてはこのブログの Feedly, Hatena::Bookmark, Live DwangoReader の購読者数やブックマーク数をグラフ化しています。POST しているのは自作の masutaka-metrics です。今は GrowthForecastと fluentd 両方に POST していますが、そのうち fluentd だけにします。今回 fluent-logger gem を導入しました。fluentd にも POST する by masutaka · Pull Request #40 · masutaka/masutaka-metrics いろいろあった話は次回に書くとして、簡単に fluentd に任意のデータ","link":"https://masutaka.net/2016-06-13-1/","isoDate":"2016-06-13T00:00:00.000Z","dateMiliSeconds":1465776000000,"authorName":"masutaka"},{"title":"Bugsnag に metadata を送る方法","content":"Bugsnag に metadata を送ることが出来るので、ここにもメモします。\n# どこかに定義 class MasutakaError &lt; StandardError include Bugsnag::MetaData end # それぞれの例外クラスは StandardError の代わりに MasutakaError を継承する class SummarizedResultBlankError &lt; MasutakaError; end class SizeZeroError &lt; MasutakaError; end exception = SummarizedResultBlankError.new(&#34;It broke!&#34;) exception.bugsnag_meta_data = { user_info: { name: &#39;masutaka&#39; } } Bugsnag.notify(exception) ドキュメントはこちら。\nhttps://github.com/bugsnag/bugsnag-ruby/blob/v4.1.0/docs/Notification%20Options.md#exception-mixin 追記(2016-06-08):\n職場の同僚から Bugsnag.notify に直接渡せると教えてもらいました。\nhttps://github.com/bugsnag/bugsnag-ruby/blob/v4.1.0/spec/notification_spec.rb#L118-L148 以下のように書きかえられます。初めに挙げた方法と同じ metadata を設\n定したら、こちらが優先されます。\nclass SummarizedResultBlankError &lt; StandardError; end class SizeZeroError &lt; StandardError; end Bugsnag.notify( SummarizedResultBlankError.new(&#34;It broke!&#34;), user_info: { name: &#39;masutaka&#39; } ) ","contentSnippet":"Bugsnag に metadata を送ることが出来るので、ここにもメモします。# どこかに定義 class MasutakaError < StandardError include Bugsnag::MetaData end # それぞれの例外クラスは StandardError の代わりに MasutakaError を継承する class SummarizedResultBlankError < MasutakaError; end class SizeZeroError < MasutakaError; end exception = SummarizedResultBlankError.new(\"It broke!\") exception.bugsnag_meta_data = { user_info: { name: 'masutaka' } } Bugsnag.notify(exception) ドキュメントはこちら。https://github.com/bugsnag/bugsnag-ruby/blob/v4.1.0/docs/Notification%20Options.md#exception-mixin 追記(2016-06-08):職場の同僚から Bugsnag.notify に直接渡せると教えてもらいました。https://github.com/bugsnag/bugsnag-ruby/blob/v4.1.0/spec/notification_spec.rb#L118-L148 以下のように書きかえられます。初めに挙げた方法と同じ metadata を設定したら、こちらが優先されます。class SummarizedResultBlankError < StandardError; end class SizeZeroError < StandardError; end Bugsnag.notify( SummarizedResultBlankError.new(\"It broke!\"), user_info: { name: 'masutaka' } )","link":"https://masutaka.net/2016-06-07-1/","isoDate":"2016-06-07T00:00:00.000Z","dateMiliSeconds":1465257600000,"authorName":"masutaka"},{"title":"AWS Summit Tokyo 2016 に行ってきた #AWSSummit","content":"[2014-07-19-1] と [2015-06-07-1] に引き続き、今年も AWS Summit\nTokyo に行ってきました。\n今回は会社の期末かつキックオフがあった関係で 2 日目のみの参加。通\n常業務だったら無理していったのですがね。濃いセッションは 3 日目が\n多かっただけに少し残念。\n全てのセッションの動画や資料はこちらをどうぞ。\nAWS Summit Tokyo 2016 開催レポート｜AWS Day2 キーノート  資料ダウンロード 今年も AWS 日本法人社長の長崎氏によるキーノート。\nゲストスピーカーの日本電産 佐藤氏のプレゼンは予想に反して（失礼）\n面白かった。氏の Everything goes to Cloud! という掛け声の下、現在\nは社内サーバゼロとのこと。この規模 でそれはすごいぞ・・・！\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ランチタイム やったー！寿司だー！\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.","contentSnippet":"[2014-07-19-1] と [2015-06-07-1] に引き続き、今年も AWS SummitTokyo に行ってきました。今回は会社の期末かつキックオフがあった関係で 2 日目のみの参加。通常業務だったら無理していったのですがね。濃いセッションは 3 日目が多かっただけに少し残念。全てのセッションの動画や資料はこちらをどうぞ。AWS Summit Tokyo 2016 開催レポート｜AWS Day2 キーノート  資料ダウンロード 今年も AWS 日本法人社長の長崎氏によるキーノート。ゲストスピーカーの日本電産 佐藤氏のプレゼンは予想に反して（失礼）面白かった。氏の Everything goes to Cloud! という掛け声の下、現在は社内サーバゼロとのこと。この規模 でそれはすごいぞ・・・！loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ランチタイム やったー！寿司だー！loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.","link":"https://masutaka.net/2016-06-04-1/","isoDate":"2016-06-04T00:00:00.000Z","dateMiliSeconds":1464998400000,"authorName":"masutaka"},{"title":"init.el にパスワードやアクセストークンを書かずに済む方法","content":"[2016-05-06-1] で init.el にアクセストークンを設定するという話をし\nたので。\n最近は dotfiles を GitHub に公開する方も増えているかと思います。\ninit.el にパスワードやアクセストークンを書いたのを忘れて、GitHub\nの公開リポジトリに push すると悲惨なことになりますよね。\nそこで、こんな方法はいかがでしょう？\nこんな関数を init.el に書いておきます。\n こんな設定をしたければ、、\n(setq helm-qiita-access-token &#34;1234abcd....&#34;) init.el にはこのように書きます。\n(setq helm-qiita-access-token (my-lisp-load &#34;helm-qiita-access-token&#34;)) あとは ~/.emacs.d/spec/helm-qiita-access-token を作成し、\n&#34;1234abcd....&#34; とだけ書いておきます。ダブルクオーテーションも必要です。もちろん\n~/.emacs.d/spec は .gitignore に追加します。\nread() で読み込んでいるので、S式であればなんでも書けます。もちろん\nコメントも OK。\n実はこれ、mew-lisp-load() の簡易版です。昔よく Mew のソース を読ん\nでいて、こりゃ使えそうだということで、結構前に拝借致しました。","contentSnippet":"[2016-05-06-1] で init.el にアクセストークンを設定するという話をしたので。最近は dotfiles を GitHub に公開する方も増えているかと思います。init.el にパスワードやアクセストークンを書いたのを忘れて、GitHubの公開リポジトリに push すると悲惨なことになりますよね。そこで、こんな方法はいかがでしょう？こんな関数を init.el に書いておきます。 こんな設定をしたければ、、(setq helm-qiita-access-token \"1234abcd....\") init.el にはこのように書きます。(setq helm-qiita-access-token (my-lisp-load \"helm-qiita-access-token\")) あとは ~/.emacs.d/spec/helm-qiita-access-token を作成し、\"1234abcd....\" とだけ書いておきます。ダブルクオーテーションも必要です。もちろん~/.emacs.d/spec は .gitignore に追加します。read() で読み込んでいるので、S式であればなんでも書けます。もちろんコメントも OK。実はこれ、mew-lisp-load() の簡易版です。昔よく Mew のソース を読んでいて、こりゃ使えそうだということで、結構前に拝借致しました。","link":"https://masutaka.net/2016-05-06-2/","isoDate":"2016-05-06T01:00:00.000Z","dateMiliSeconds":1462496400000,"authorName":"masutaka"},{"title":"Qiita や Qiita:Team のストックを Emacs から開ける helm-qiita.el を作った","content":"休み前に職場の同僚と話していて脈絡なく閃いたので、ズビっと作ってみ\nました。\n  こんな感じに、Qiita や Qiita:Team のストックを Helm Interface 上で\n絞り込んで、ブラウザで開くことが出来ます。\nMELPAにも取り込まれた ので、M-x package-install helm-qiita でイン\nストールできます。\n設定方法 README.md に書いたとおり 、このような設定をすると使えます。\n(setq helm-qiita-username &#34;Your Qiita Account&#34;) (setq helm-qiita-organization &#34;Your Organization&#34;) ;; optional (setq helm-qiita-access-token &#34;Your Access Token&#34;) (helm-qiita-initialize) Organization は https://feedforce.qiita.com/ の場合は &ldquo;feedforce&rdquo;\nを設定して下さい。指定しなければ（nil なら）、https://qiita.com/\nになります。\nAccess Token は https://qiita.com/settings/applications から作れま\nす。read_qiita または read_qiita_team のスコープを付けて下さい。\nデフォルトでは 1 時間に 1 回、Emacs の Timer から非同期で Qiita\nAPI を叩いて ~/.emacs.d/helm-qiita を更新します。helm-qiita.el は","contentSnippet":"休み前に職場の同僚と話していて脈絡なく閃いたので、ズビっと作ってみました。  こんな感じに、Qiita や Qiita:Team のストックを Helm Interface 上で絞り込んで、ブラウザで開くことが出来ます。MELPAにも取り込まれた ので、M-x package-install helm-qiita でインストールできます。設定方法 README.md に書いたとおり 、このような設定をすると使えます。(setq helm-qiita-username \"Your Qiita Account\") (setq helm-qiita-organization \"Your Organization\") ;; optional (setq helm-qiita-access-token \"Your Access Token\") (helm-qiita-initialize) Organization は https://feedforce.qiita.com/ の場合は “feedforce”を設定して下さい。指定しなければ（nil なら）、https://qiita.com/になります。Access Token は https://qiita.com/settings/applications から作れます。read_qiita または read_qiita_team のスコープを付けて下さい。デフォルトでは 1 時間に 1 回、Emacs の Timer から非同期で QiitaAPI を叩いて ~/.emacs.d/helm-qiita を更新します。helm-qiita.el は","link":"https://masutaka.net/2016-05-06-1/","isoDate":"2016-05-06T00:00:00.000Z","dateMiliSeconds":1462492800000,"authorName":"masutaka"},{"title":"社内勉強会で github-nippou v2.0.0 をライブリリースした","content":"[2016-03-23-1] に予告したとおり、今回は破壊的変更をしました。\nhttps://github.com/masutaka/github-nippou/releases/tag/v2.0.0  改良  &ndash;all と &ndash;num オプションを削除 代わりに &ndash;since-date と &ndash;until-date を追加 デバッグオプション &ndash;debug を追加 サブコマンド version を追加 パフォーマンスの改善   バグ修正  Issue や Pull request 発生時ではなく、現在のタイトルを使用 同じく現在のステータスを使用   その他  ソースコードのリファクタリング    github-nippou は引数を付けなければ、今日の GitHub の活動から日報用\nのリンクを生成します。今回の v2.0.0 から &ndash;since-date や\n&ndash;until-date を付けることで、GitHub の活動を柔軟に取って来れるよう\nになりました。\nGitHub Events API の仕様 限界である 90 日前からも取得できます。ただ\nし同仕様で最大数が 300 という制限があります。\nパフォーマンスも改善したので、上のような激しい使い方も可能です。\n内部的には最大 5 並列で動作します。\n並列数を指定するオプションは作りませんでした。並列数を意識すべきは\n私であって、ユーザではないからです。ですが、開発用と設定厨の方向け\nに環境変数や git config で設定する方法 はあります。ご自由にどうぞ。","contentSnippet":"[2016-03-23-1] に予告したとおり、今回は破壊的変更をしました。https://github.com/masutaka/github-nippou/releases/tag/v2.0.0  改良  –all と –num オプションを削除 代わりに –since-date と –until-date を追加 デバッグオプション –debug を追加 サブコマンド version を追加 パフォーマンスの改善   バグ修正  Issue や Pull request 発生時ではなく、現在のタイトルを使用 同じく現在のステータスを使用   その他  ソースコードのリファクタリング    github-nippou は引数を付けなければ、今日の GitHub の活動から日報用のリンクを生成します。今回の v2.0.0 から –since-date や–until-date を付けることで、GitHub の活動を柔軟に取って来れるようになりました。GitHub Events API の仕様 限界である 90 日前からも取得できます。ただし同仕様で最大数が 300 という制限があります。パフォーマンスも改善したので、上のような激しい使い方も可能です。内部的には最大 5 並列で動作します。並列数を指定するオプションは作りませんでした。並列数を意識すべきは私であって、ユーザではないからです。ですが、開発用と設定厨の方向けに環境変数や git config で設定する方法 はあります。ご自由にどうぞ。","link":"https://masutaka.net/2016-04-09-1/","isoDate":"2016-04-09T00:00:00.000Z","dateMiliSeconds":1460160000000,"authorName":"masutaka"},{"title":"GitHub の pull request commit URL から以前の commit URL に移動するブックマークレット","content":"GitHub が１ヶ月ほど前にリリースした、More code review tools は全般\n的に気に入っていません。\n 変更されたファイル一覧が分かりづらくなった commit 単位でのコメントがしづらくなった  とくに後者は、ブラウザのアドレスバーでこのようにいじって凌いでいました&hellip;。\nhttps://github.com/masutaka/hoge-repository/pull/128/commits/12345678 &hellip;\n↓\nhttps://github.com/masutaka/hoge-repository/commit/12345678 &hellip;\nこれではあんまりなので、こんなブックマークレットを作り\n&ldquo;to commit URL&rdquo; という名前のブックマークにしました。\n javascript:location.href=location.href.replace(//pull/\\d+/commits// , &ldquo;/commit/&rdquo;)\n ひとまずこれで凌げそうです。そもそもなぜコメントできるようにしてな\nいのですかね？","contentSnippet":"GitHub が１ヶ月ほど前にリリースした、More code review tools は全般的に気に入っていません。 変更されたファイル一覧が分かりづらくなった commit 単位でのコメントがしづらくなった  とくに後者は、ブラウザのアドレスバーでこのようにいじって凌いでいました…。https://github.com/masutaka/hoge-repository/pull/128/commits/12345678 …↓https://github.com/masutaka/hoge-repository/commit/12345678 …これではあんまりなので、こんなブックマークレットを作り“to commit URL” という名前のブックマークにしました。 javascript:location.href=location.href.replace(//pull/\\d+/commits// , “/commit/”) ひとまずこれで凌げそうです。そもそもなぜコメントできるようにしてないのですかね？","link":"https://masutaka.net/2016-04-08-1/","isoDate":"2016-04-08T00:00:00.000Z","dateMiliSeconds":1460073600000,"authorName":"masutaka"},{"title":"BitBar の Emacs と GitHub のプラグインを少し便利にした","content":"それぞれ以下の Pull Request です。\n [Emacs Package Updates] Add error handler by masutaka · Pull Request #357 · matryer/bitbar-plugins  [GitHub status] Add link to official github status by masutaka · Pull Request #356 · matryer/bitbar-plugins   Emacs Package Updates plugin  Emacs が見つからないとか、パッケージを更新できないなど、エラーが発\n生した時はいつもの Gnu（ヌー）さんの横に err と表示されます。→ パット見、牛に見えますが、れっきとしたヌーです。多分。\nパッケージを更新できないのは 100% これなんですよね。本当に謎。ネッ\nトに繋がらないだけだったら、エラーにはなりません。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  GitHub status plugin  &ldquo;Everything operating normally.","contentSnippet":"それぞれ以下の Pull Request です。 [Emacs Package Updates] Add error handler by masutaka · Pull Request #357 · matryer/bitbar-plugins  [GitHub status] Add link to official github status by masutaka · Pull Request #356 · matryer/bitbar-plugins   Emacs Package Updates plugin  Emacs が見つからないとか、パッケージを更新できないなど、エラーが発生した時はいつもの Gnu（ヌー）さんの横に err と表示されます。→ パット見、牛に見えますが、れっきとしたヌーです。多分。パッケージを更新できないのは 100% これなんですよね。本当に謎。ネットに繋がらないだけだったら、エラーにはなりません。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  GitHub status plugin  “Everything operating normally.","link":"https://masutaka.net/2016-03-30-1/","isoDate":"2016-03-30T00:00:00.000Z","dateMiliSeconds":1459296000000,"authorName":"masutaka"},{"title":"github-nippou v1.2.0 released","content":"https://github.com/masutaka/github-nippou/releases/tag/v1.2.0  改良  URL でソートしたリストを出力 Issue や PR がクローズされていたら、closed! を付加    v2.0.0 では [2016-03-21-1] に追加した -a, -n オプションが早くもな\nくなる予定です・・・！","contentSnippet":"https://github.com/masutaka/github-nippou/releases/tag/v1.2.0  改良  URL でソートしたリストを出力 Issue や PR がクローズされていたら、closed! を付加    v2.0.0 では [2016-03-21-1] に追加した -a, -n オプションが早くもなくなる予定です・・・！","link":"https://masutaka.net/2016-03-23-1/","isoDate":"2016-03-23T00:00:00.000Z","dateMiliSeconds":1458691200000,"authorName":"masutaka"},{"title":"BitBar の Emacs Package Updates プラグイン作って、本家にマージされた","content":"Rebuild の Aftershow 132 で紹介された BitBar を使い始めました。\nHomebrew のアップデート可能数 や、GitHub のステータス を表示させてい\nます。宮川さんがやっている、現在のタスクを OSX のメニューバーに表\n示というやつも試しています。\nで、Emacs の Package アップデート可能数も出したかったので、本家に\nPR だして無事マージされました 。\nこんな感じに表示されます。\nPlugin のページからインストール出来ます。ポーリング間隔や Emacs の\n場所は適宜変えて下さい。\nEmacs Package Updates on BitBar - Put anything in your Mac OS X menu bar エラー処理が甘いので、あとで直すかも。本当はシェルスクリプトじゃな\nくて、Emacs Lisp スクリプトにしたかったのですが、標準出力の捨て方\nが分からず一旦断念しました。\nおまけ\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ","contentSnippet":"Rebuild の Aftershow 132 で紹介された BitBar を使い始めました。Homebrew のアップデート可能数 や、GitHub のステータス を表示させています。宮川さんがやっている、現在のタスクを OSX のメニューバーに表示というやつも試しています。で、Emacs の Package アップデート可能数も出したかったので、本家にPR だして無事マージされました 。こんな感じに表示されます。Plugin のページからインストール出来ます。ポーリング間隔や Emacs の場所は適宜変えて下さい。Emacs Package Updates on BitBar - Put anything in your Mac OS X menu bar エラー処理が甘いので、あとで直すかも。本当はシェルスクリプトじゃなくて、Emacs Lisp スクリプトにしたかったのですが、標準出力の捨て方が分からず一旦断念しました。おまけloading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i","link":"https://masutaka.net/2016-03-22-1/","isoDate":"2016-03-22T00:00:00.000Z","dateMiliSeconds":1458604800000,"authorName":"masutaka"},{"title":"github-nippou v1.1.0 and v1.1.1 released","content":"https://github.com/masutaka/github-nippou/releases/tag/v1.1.0 https://github.com/masutaka/github-nippou/releases/tag/v1.1.1 -a オプションを追加しました。今日より前のイベントも（存在すれば）\n標準出力に出力します。日報書き忘れの時などにご利用下さい。\n-n オプションも追加しました。たまに、作成した PR の取りこぼしがあ\nったのはこのせいでした。以前 Issue 作って 忘れてました。\n Events｜GitHub Developer Guide Events support pagination , however the per_page option is\nunsupported. The fixed page size is 30 items. Fetching up to ten\npages is supported, for a total of 300 events.\n Octokit::Client::Events#user_events が使う\n&ldquo;GET /users/:username/events&rdquo; は pagination をサポートしており、\nデフォルトでは 30 イベントしか返さないからです。\nデフォルトを 50 にして且つ、オプションで指定可能にしました。10 の\n倍数を指定して下さい。上限は 300 です。\nあとは &ldquo;&lt;&rdquo; と &ldquo;&gt;&rdquo; をエスケープしたり、使用する Gem のバージョンの","contentSnippet":"https://github.com/masutaka/github-nippou/releases/tag/v1.1.0 https://github.com/masutaka/github-nippou/releases/tag/v1.1.1 -a オプションを追加しました。今日より前のイベントも（存在すれば）標準出力に出力します。日報書き忘れの時などにご利用下さい。-n オプションも追加しました。たまに、作成した PR の取りこぼしがあったのはこのせいでした。以前 Issue 作って 忘れてました。 Events｜GitHub Developer Guide Events support pagination , however the per_page option isunsupported. The fixed page size is 30 items. Fetching up to tenpages is supported, for a total of 300 events. Octokit::Client::Events#user_events が使う“GET /users/:username/events” は pagination をサポートしており、デフォルトでは 30 イベントしか返さないからです。デフォルトを 50 にして且つ、オプションで指定可能にしました。10 の倍数を指定して下さい。上限は 300 です。あとは “<” と “>” をエスケープしたり、使用する Gem のバージョンの","link":"https://masutaka.net/2016-03-21-1/","isoDate":"2016-03-21T00:00:00.000Z","dateMiliSeconds":1458518400000,"authorName":"masutaka"},{"title":"このサイトを http2 対応した","content":"今まで http だったこのサイトを http2 対応しました。\n静的ファイルもそうですが、このサイトで動いている kibana が体感で速\nくなった気がします（計測すればよかった）。\nSSL 証明書は最近流行りの Let&rsquo;s Encrypt ではなくて、温かみのある\nStartSSL で取得しました。パスワードではなく、証明書でのログインが\nいいですね。\nどちらも無料で取得できます。前者はコマンドラインから取得できるが構\n成管理難しめ、後者はサイト上から手作業で取得が必要だが構成管理は容\n易、というおおざっぱな違いがあります。\n今回学んだことは**「出来るだけ https 対応してから http2 対応すべし」**\nでした。雑に http2 にしたら 403 Forbidden や、Chrome で\nERR_SPDY_INADEQUATE_TRANSPORT_SECURITY が発生しハマりました。\nあとは**「早く寝ろ」**でしょうか。日曜日の後半は完全に頭が働いていませ\nんでした&hellip;。\nnginx の設定では主に以下を学びました。\n ssl_session_cache  高速化のため、セッションキャッシュを設定する   ssl_ciphers  より安全にするため、暗号化スイートを明示的に設定する   ssl_dhparam  より安全にするため、DH パラメータファイルを指定する   add_header Strict-Transport-Security  より安全にするため、HSTS を用いて常に HTTPS 通信を行う HTTP Strict Transport Security    以下、作業メモです。","contentSnippet":"今まで http だったこのサイトを http2 対応しました。静的ファイルもそうですが、このサイトで動いている kibana が体感で速くなった気がします（計測すればよかった）。SSL 証明書は最近流行りの Let’s Encrypt ではなくて、温かみのあるStartSSL で取得しました。パスワードではなく、証明書でのログインがいいですね。どちらも無料で取得できます。前者はコマンドラインから取得できるが構成管理難しめ、後者はサイト上から手作業で取得が必要だが構成管理は容易、というおおざっぱな違いがあります。今回学んだことは**「出来るだけ https 対応してから http2 対応すべし」**でした。雑に http2 にしたら 403 Forbidden や、Chrome でERR_SPDY_INADEQUATE_TRANSPORT_SECURITY が発生しハマりました。あとは**「早く寝ろ」**でしょうか。日曜日の後半は完全に頭が働いていませんでした…。nginx の設定では主に以下を学びました。 ssl_session_cache  高速化のため、セッションキャッシュを設定する   ssl_ciphers  より安全にするため、暗号化スイートを明示的に設定する   ssl_dhparam  より安全にするため、DH パラメータファイルを指定する   add_header Strict-Transport-Security  より安全にするため、HSTS を用いて常に HTTPS 通信を行う HTTP Strict Transport Security    以下、作業メモです。","link":"https://masutaka.net/2016-03-15-1/","isoDate":"2016-03-15T00:00:00.000Z","dateMiliSeconds":1458000000000,"authorName":"masutaka"},{"title":"Chrome 拡張 Tweets Favicon Badges に要望出したら 29 分で対応された","content":"最近はなるべくデフォルトのツールを選択するようにしていて、OSX で\nTwitter を見るときはブラウザで https://twitter.com/ を見ています。\n私はホームと複数のリストをタブで開いていますが、問題になるのがその\n幅。３つとなると結構邪魔です。\nじゃあと「タブを固定」すると新着ツイートが分からなくなってしまいます。\nそこで見つけたのが Chrome 拡張の Tweets Favicon Badges 。このように\nfavicon にバッジを付けてくれます。\nただ、リストの favicon にはバッジが付かなかったので、要望を出した\nら 29 分で対応して下さいました。感謝！\nShowing a badge of list pages · Issue #1 · yurtaev/extension-tweets-favicon-badges 似た Chrome 拡張に Favicon Badges もありました。こちらは\ntwitter.com 以外の favicon にも付けてくれるようです。バッジが見づ\nらいのと全サイトの Read 権限を与える必要があるので、今回は見送りま\nした。","contentSnippet":"最近はなるべくデフォルトのツールを選択するようにしていて、OSX でTwitter を見るときはブラウザで https://twitter.com/ を見ています。私はホームと複数のリストをタブで開いていますが、問題になるのがその幅。３つとなると結構邪魔です。じゃあと「タブを固定」すると新着ツイートが分からなくなってしまいます。そこで見つけたのが Chrome 拡張の Tweets Favicon Badges 。このようにfavicon にバッジを付けてくれます。ただ、リストの favicon にはバッジが付かなかったので、要望を出したら 29 分で対応して下さいました。感謝！Showing a badge of list pages · Issue #1 · yurtaev/extension-tweets-favicon-badges 似た Chrome 拡張に Favicon Badges もありました。こちらはtwitter.com 以外の favicon にも付けてくれるようです。バッジが見づらいのと全サイトの Read 権限を与える必要があるので、今回は見送りました。","link":"https://masutaka.net/2016-02-28-1/","isoDate":"2016-02-28T00:00:00.000Z","dateMiliSeconds":1456617600000,"authorName":"masutaka"},{"title":"PLANTRONICS Bluetooth ヘッドセットの電源が付かなくなった件","content":"一昨日ジムから帰ってきてから、気づかないうちに iPhone と接続し、勝\n手にリダイアルを始めるようになりました&hellip;。\nしばらくいじっていたら電源が付かなくなり、どうにもならない状態に。\n充電はできるけど一瞬でバッテリーが消費されるような動き。\n充電直後は電源が付くので公式のこちらの方法でリセットしたところ、\nまだ 20 分くらいですが、使えるようになりました。\nBackBeat GO トラブルシューティング : ボタンが応答しない またおかしくなったらサポート に連絡してみよう。\nBluetooth イヤホンにしては ￥5,000 ちょっとと割安だし、性能も申し\n分ないのでオススメです。\n 最近ジムでランニングしながら、ゼノブレイドとか FF13 の戦闘音楽聞く\nのがマイブームなので、こちらも気になっている。\n上の BackBeat GO は汗に強いわけではないのと、カナル型なので走った\n時の振動が耳に伝わりやすいという理由もあるけどね。\n P.S.\nスタビライザー（変なフック）の使い方が未だに全然わからないんですけどw\nスタビライザー（イヤフォン）の使い方 - オーディオ｜【OKWAVE】 ","contentSnippet":"一昨日ジムから帰ってきてから、気づかないうちに iPhone と接続し、勝手にリダイアルを始めるようになりました…。しばらくいじっていたら電源が付かなくなり、どうにもならない状態に。充電はできるけど一瞬でバッテリーが消費されるような動き。充電直後は電源が付くので公式のこちらの方法でリセットしたところ、まだ 20 分くらいですが、使えるようになりました。BackBeat GO トラブルシューティング : ボタンが応答しない またおかしくなったらサポート に連絡してみよう。Bluetooth イヤホンにしては ￥5,000 ちょっとと割安だし、性能も申し分ないのでオススメです。 最近ジムでランニングしながら、ゼノブレイドとか FF13 の戦闘音楽聞くのがマイブームなので、こちらも気になっている。上の BackBeat GO は汗に強いわけではないのと、カナル型なので走った時の振動が耳に伝わりやすいという理由もあるけどね。 P.S.スタビライザー（変なフック）の使い方が未だに全然わからないんですけどwスタビライザー（イヤフォン）の使い方 - オーディオ｜【OKWAVE】","link":"https://masutaka.net/2016-02-11-1/","isoDate":"2016-02-11T00:00:00.000Z","dateMiliSeconds":1455148800000,"authorName":"masutaka"},{"title":"yard doc コマンドの -o オプション以外で出力ディレクトリを変更する考察","content":"結論から言うとできませんでした。-o オプションが必須です。\n以下、調査結果のメモ。\n$ bundle exec yard doc したら、doc ディレクトリではなく hoge ディ\nレクトリにドキュメントファイルを作りたかったんです。\nでも設定ファイルやモンキーパッチではどうにもなりませんでした。\nPull Request 出すしかないけど、そこまでして変えたいわけじゃないか\nらなあ&hellip;。\n-o オプション指定した場合のフロー $ yard doc -o hoge すると、options.serializer.basepath に &lsquo;hoge&rsquo;\nが入る。\nhttps://github.com/lsegal/yard/blob/v0.8.7.6/lib/yard/cli/yardoc.rb#L652-L655 opts.on(&#39;-o&#39;, &#39;--output-dir PATH&#39;, &#39;The output directory. (defaults to ./doc)&#39;) do |dir| options.serializer.basepath = dir end options.serializer は YARD::Serializers::FileSystemSerializer\nclass のインスタンスで、basepath の setter は以下のように定義され\nている。\nhttps://github.com/lsegal/yard/blob/v0.8.7.6/lib/yard/serializers/file_system_serializer.rb#L9-L11 def basepath=(value) @basepath = options[:basepath] = value end @basepath はその後、同 class 内の #serialize で参照される。\n-o オプション指定しない場合のフロー 前述のフローには入らないので","contentSnippet":"結論から言うとできませんでした。-o オプションが必須です。以下、調査結果のメモ。$ bundle exec yard doc したら、doc ディレクトリではなく hoge ディレクトリにドキュメントファイルを作りたかったんです。でも設定ファイルやモンキーパッチではどうにもなりませんでした。Pull Request 出すしかないけど、そこまでして変えたいわけじゃないからなあ…。-o オプション指定した場合のフロー $ yard doc -o hoge すると、options.serializer.basepath に ‘hoge’が入る。https://github.com/lsegal/yard/blob/v0.8.7.6/lib/yard/cli/yardoc.rb#L652-L655 opts.on('-o', '--output-dir PATH', 'The output directory. (defaults to ./doc)') do |dir| options.serializer.basepath = dir end options.serializer は YARD::Serializers::FileSystemSerializerclass のインスタンスで、basepath の setter は以下のように定義されている。https://github.com/lsegal/yard/blob/v0.8.7.6/lib/yard/serializers/file_system_serializer.rb#L9-L11 def basepath=(value) @basepath = options[:basepath] = value end @basepath はその後、同 class 内の #serialize で参照される。-o オプション指定しない場合のフロー 前述のフローには入らないので","link":"https://masutaka.net/2016-01-31-1/","isoDate":"2016-01-31T00:00:00.000Z","dateMiliSeconds":1454198400000,"authorName":"masutaka"},{"title":"Qiita の markdown を Emacs からプレビューする","content":"[2015-04-05-1] の Qiita 版です。雑です。\ninit.el にこんなのを定義します。\n(defun qiitadown ()  (interactive)  (shell-command (format &#34;qiitadown.sh %s&#34; (buffer-file-name))))  (with-eval-after-load &#34;markdown-mode&#34;  (define-key markdown-mode-map (kbd &#34;C-c C-c C-q&#34;) &#39;qiitadown)) パスの通ったディレクトリに以下のシェルスクリプトをパーミッション\n755 とかで置きます。\n あと、qmc コマンドが必要です。Prepare に書いてあるように\nqiita-markdown-cli gem もインストールして下さい。\nmarkdown ファイルを開いて、C-c C-c C-q すれば Chrome とかでプレビュー\nが見られます。","contentSnippet":"[2015-04-05-1] の Qiita 版です。雑です。init.el にこんなのを定義します。(defun qiitadown ()  (interactive)  (shell-command (format \"qiitadown.sh %s\" (buffer-file-name))))  (with-eval-after-load \"markdown-mode\"  (define-key markdown-mode-map (kbd \"C-c C-c C-q\") 'qiitadown)) パスの通ったディレクトリに以下のシェルスクリプトをパーミッション755 とかで置きます。 あと、qmc コマンドが必要です。Prepare に書いてあるようにqiita-markdown-cli gem もインストールして下さい。markdown ファイルを開いて、C-c C-c C-q すれば Chrome とかでプレビューが見られます。","link":"https://masutaka.net/2016-01-15-1/","isoDate":"2016-01-15T00:00:00.000Z","dateMiliSeconds":1452816000000,"authorName":"masutaka"},{"title":"できるだけ人感センサー付きLED照明に変えてみた","content":"日頃からおすすめしている2015年に買ってよかったもの｜Act as Professional 引っ越してから、トイレの照明を消し忘れたり、出かけようと靴を履いた\nらキッチンの照明を消し忘れて靴をまた脱ぐ、ということがよくあったの\nで、私もえいやっと変えてしまいました。\n照明の消し忘れはないか、照明のスイッチはどこかなど、考える必要が減\nり良い感じです。\n 電球のサイズ Amazon で買うにあたり、まずサイズを調べました。\n電球の口金サイズの種類、測り方を徹底解説。電球買いに行く前にチェックすべし！｜Only1 Press しかし、うちの電球にはサイズが書いてない・・・！\n仕方がないので、ものさしで測り E17 だとあたりを付けて、1 つだけ買\nいました。幸運にも合ってました。\n垂直か斜めか 人感センサーなしと比べて、ここが一番注意すべきポイントかもしれません。\n電球を垂直に取り付けるタイプか、斜めに取り付けるタイプかで、センサー\nの位置が変わってきます。間違えると照明が付かず悲惨なことになるので、\n一度電球を取り外すなどして、しっかり確認する必要があります。\nこちらは垂直式。形状からして全然違います。\n 照明の色 元の電球と同じ電球色を探したのですが、同じアイリスオーヤマの商品で\nは値段が 2 倍くらい違いました。\n 昼白色 : ￥1,779 電球色 : ￥3,400  メーカーのウェブサイトを見たら、本来法人向けの商品のようで、公式の\nアイリスプラザ では売っておらず。両方とも定価が ￥4,500 でした。\n LDA4N-H-E17SH LED電球 一般電球ﾀｲﾌﾟ 斜め取付人感ｾﾝｻｰ付 昼白色相当  LDA3L-H-E17SH LED電球 一般電球ﾀｲﾌﾟ 斜め取付人感ｾﾝｻｰ付 電球色相当   どうやら昼白色タイプだけが Amazon だけで ￥1,779 という、おそらく\n激安価格で売られている状況のようでした。\n直感で今が買いだ！と判断し、ズビっと 5 つ（※）購入するに至りました。\nしめて ￥8,895 なり。ギリギリで良い買い物をしたと信じましょう。","contentSnippet":"日頃からおすすめしている2015年に買ってよかったもの｜Act as Professional 引っ越してから、トイレの照明を消し忘れたり、出かけようと靴を履いたらキッチンの照明を消し忘れて靴をまた脱ぐ、ということがよくあったので、私もえいやっと変えてしまいました。照明の消し忘れはないか、照明のスイッチはどこかなど、考える必要が減り良い感じです。 電球のサイズ Amazon で買うにあたり、まずサイズを調べました。電球の口金サイズの種類、測り方を徹底解説。電球買いに行く前にチェックすべし！｜Only1 Press しかし、うちの電球にはサイズが書いてない・・・！仕方がないので、ものさしで測り E17 だとあたりを付けて、1 つだけ買いました。幸運にも合ってました。垂直か斜めか 人感センサーなしと比べて、ここが一番注意すべきポイントかもしれません。電球を垂直に取り付けるタイプか、斜めに取り付けるタイプかで、センサーの位置が変わってきます。間違えると照明が付かず悲惨なことになるので、一度電球を取り外すなどして、しっかり確認する必要があります。こちらは垂直式。形状からして全然違います。 照明の色 元の電球と同じ電球色を探したのですが、同じアイリスオーヤマの商品では値段が 2 倍くらい違いました。 昼白色 : ￥1,779 電球色 : ￥3,400  メーカーのウェブサイトを見たら、本来法人向けの商品のようで、公式のアイリスプラザ では売っておらず。両方とも定価が ￥4,500 でした。 LDA4N-H-E17SH LED電球 一般電球ﾀｲﾌﾟ 斜め取付人感ｾﾝｻｰ付 昼白色相当  LDA3L-H-E17SH LED電球 一般電球ﾀｲﾌﾟ 斜め取付人感ｾﾝｻｰ付 電球色相当   どうやら昼白色タイプだけが Amazon だけで ￥1,779 という、おそらく激安価格で売られている状況のようでした。直感で今が買いだ！と判断し、ズビっと 5 つ（※）購入するに至りました。しめて ￥8,895 なり。ギリギリで良い買い物をしたと信じましょう。","link":"https://masutaka.net/2016-01-10-1/","isoDate":"2016-01-10T00:00:00.000Z","dateMiliSeconds":1452384000000,"authorName":"masutaka"},{"title":"『武士の家計簿』は落ち着いた良い映画だった","content":"え、家計簿付けてなかったの？\nというのがツッコミどころ。\n当時の武士はそんなもんだったのかな？\nとは言え、全体的な雰囲気は好き。\n若い頃にそろばんにのめり込む猪山直之を見て、今の時代だったらどんな\n職業に就いていたのかなと思った。\n普段の暮らしから見た、幕末の混乱も興味深かった。\n 武士の家計簿の猪山家は、今も続いているんでしょうか? - Yahoo!知恵袋 しかし、家宝ともいえよう家計簿を含む文書類が古本屋で売りに出されて\nいたということから推測すると、猪山家はもはやまともな形では存続して\nいないのではないかと思われます。\n 諸行無常ですね&hellip;。\nAmazon プライム・ビデオにありました。\n DVD 版はこちら。\n ","contentSnippet":"え、家計簿付けてなかったの？というのがツッコミどころ。当時の武士はそんなもんだったのかな？とは言え、全体的な雰囲気は好き。若い頃にそろばんにのめり込む猪山直之を見て、今の時代だったらどんな職業に就いていたのかなと思った。普段の暮らしから見た、幕末の混乱も興味深かった。 武士の家計簿の猪山家は、今も続いているんでしょうか? - Yahoo!知恵袋 しかし、家宝ともいえよう家計簿を含む文書類が古本屋で売りに出されていたということから推測すると、猪山家はもはやまともな形では存続していないのではないかと思われます。 諸行無常ですね…。Amazon プライム・ビデオにありました。 DVD 版はこちら。","link":"https://masutaka.net/2016-01-07-1/","isoDate":"2016-01-07T00:00:00.000Z","dateMiliSeconds":1452124800000,"authorName":"masutaka"},{"title":"El Capitan で eventmachine や puma のビルドが通らないアレへの対策と解説","content":"El Capitan から openssl のヘッダファイルが削除されました。ヽ(`Д´)ﾉﾌﾟﾝﾌﾟﾝ\nHomebrew をお使いの方は、eventmachine や puma をインストールしよう\nとすると、こんなエラーが発生すると思います。（発生しない方は、すで\nに後述のコマンドを実行しているのだと思います。）\nmake &#34;DESTDIR=&#34; clean make &#34;DESTDIR=&#34; compiling binder.cpp In file included from binder.cpp:20: ./project.h:116:10: fatal error: &#39;openssl/ssl.h&#39; file not found #include &lt;openssl/ssl.h&gt; ^ 1 error generated. make: *** [binder.o] Error 1 make failed, exit code 2 対策方法 このコマンドを実行するだけです。\n$ brew link openssl --force /usr/local/include や /usr/local/lib に openssl へのシンボリックリ\nンクが作られ、gem install 可能になります。\nHomebrew の openssl がリンクされていますね！\n$ otool -L ~/.","contentSnippet":"El Capitan から openssl のヘッダファイルが削除されました。ヽ(`Д´)ﾉﾌﾟﾝﾌﾟﾝHomebrew をお使いの方は、eventmachine や puma をインストールしようとすると、こんなエラーが発生すると思います。（発生しない方は、すでに後述のコマンドを実行しているのだと思います。）make \"DESTDIR=\" clean make \"DESTDIR=\" compiling binder.cpp In file included from binder.cpp:20: ./project.h:116:10: fatal error: 'openssl/ssl.h' file not found #include <openssl/ssl.h> ^ 1 error generated. make: *** [binder.o] Error 1 make failed, exit code 2 対策方法 このコマンドを実行するだけです。$ brew link openssl --force /usr/local/include や /usr/local/lib に openssl へのシンボリックリンクが作られ、gem install 可能になります。Homebrew の openssl がリンクされていますね！$ otool -L ~/.","link":"https://masutaka.net/2016-01-01-1/","isoDate":"2016-01-01T00:00:00.000Z","dateMiliSeconds":1451606400000,"authorName":"masutaka"},{"title":"東京の単身引越しは『ケーエー引越センター』最強説","content":"http://ka-center.jp/ 最近の記事のカテゴリは Life ばかりです。\nこのブログは一体どこに向かうのでしょう&hellip;？\nさて、[2015-12-14-1] にも書いたとおり、先月 20 日に荒川区に引越し\nました。使ったのは『ケーエー引越センター 』です。\nこれまで 7 回の引越しをしてきましたが、その中でも東京の単身引越し\nはここが一番だと思いました。2 万円を切る価格で、質も悪くない、むし\nろ非常に良い。\n他に良い点を上げると、\n 見積もり前は電話が一切かかってこない  個人的に最も評価しています   訪問見積もりがない  こちらからかけたフリーダイヤルで見積もってもらいます   ダンボール代もオプション  頑張ればさらに 3,000 円前後安く出来た   まっとうな手段で低価格を実現しているようにみえる  費用を抑えても高い品質で引越しができるケーエー引越センターの秘密    作業が早くて丁寧  引越しの概要 【日時】\n2015年11月20日（金曜日・作業開始時間 12:00頃～）\n【荷物量】\n単身・1人暮らし用程度の荷物量（やや多め）\n【お部屋】\nアパート（2LDK）→ マンション（1K）\n【移動距離】\n21.7km（世田谷区 → 荒川区）\n【付属サービス】\n家電設置サービス（洗濯機のみ）\n【料金】\n19,560円\n見積もりまで 平日の夜 0:00 過ぎに、某大手とケーエー引越センター（以下ケーエー）\nのサイト上で見積もり依頼をしました。\n某大手は今電話してよいか SMS で確認が来ました。OK したら、すぐに電","contentSnippet":"http://ka-center.jp/ 最近の記事のカテゴリは Life ばかりです。このブログは一体どこに向かうのでしょう…？さて、[2015-12-14-1] にも書いたとおり、先月 20 日に荒川区に引越しました。使ったのは『ケーエー引越センター 』です。これまで 7 回の引越しをしてきましたが、その中でも東京の単身引越しはここが一番だと思いました。2 万円を切る価格で、質も悪くない、むしろ非常に良い。他に良い点を上げると、 見積もり前は電話が一切かかってこない  個人的に最も評価しています   訪問見積もりがない  こちらからかけたフリーダイヤルで見積もってもらいます   ダンボール代もオプション  頑張ればさらに 3,000 円前後安く出来た   まっとうな手段で低価格を実現しているようにみえる  費用を抑えても高い品質で引越しができるケーエー引越センターの秘密    作業が早くて丁寧  引越しの概要 【日時】2015年11月20日（金曜日・作業開始時間 12:00頃～）【荷物量】単身・1人暮らし用程度の荷物量（やや多め）【お部屋】アパート（2LDK）→ マンション（1K）【移動距離】21.7km（世田谷区 → 荒川区）【付属サービス】家電設置サービス（洗濯機のみ）【料金】19,560円見積もりまで 平日の夜 0:00 過ぎに、某大手とケーエー引越センター（以下ケーエー）のサイト上で見積もり依頼をしました。某大手は今電話してよいか SMS で確認が来ました。OK したら、すぐに電","link":"https://masutaka.net/2015-12-29-1/","isoDate":"2015-12-29T00:00:00.000Z","dateMiliSeconds":1451347200000,"authorName":"masutaka"},{"title":"月一で家事代行サービス CaSy（カジー）を使うことにした","content":"以前から興味があった家事代行サービス CaSy（カジー）を昨日利用しま\nした。\n家事代行サービスを東京でお探しなら1時間2,190円のCaSy かなり満足したので、さっそく来月から月（4 週）に 1 回の定期を予約\nしました。鍵のお預けサービスも使うので、帰宅したら勝手にきれいになっ\nている感じです。\n今回は初めてということもあり、約束の時間に立ち会ってすぐ近所のガス\nトに退散。終わる少し前に帰宅しました。\nそんな初回の内訳は以下のとおり。\n         時間 2時間   料金 5,020円   内訳 2,500円/時間 × 2時間 + 交通費700円 + 消費税320円 - クーポン1,000円    定期予約はこのようにしました。\n         頻度 4週間に1回   時間 2時間   料金 6,842円   内訳 2,390円/時間 × 2時間 + 交通費700円 + 消費税382円 + 鍵預かり980円    プロモーションコード HgmTP を使って会員登録すると、あなたも私も","contentSnippet":"以前から興味があった家事代行サービス CaSy（カジー）を昨日利用しました。家事代行サービスを東京でお探しなら1時間2,190円のCaSy かなり満足したので、さっそく来月から月（4 週）に 1 回の定期を予約しました。鍵のお預けサービスも使うので、帰宅したら勝手にきれいになっている感じです。今回は初めてということもあり、約束の時間に立ち会ってすぐ近所のガストに退散。終わる少し前に帰宅しました。そんな初回の内訳は以下のとおり。         時間 2時間   料金 5,020円   内訳 2,500円/時間 × 2時間 + 交通費700円 + 消費税320円 - クーポン1,000円    定期予約はこのようにしました。         頻度 4週間に1回   時間 2時間   料金 6,842円   内訳 2,390円/時間 × 2時間 + 交通費700円 + 消費税382円 + 鍵預かり980円    プロモーションコード HgmTP を使って会員登録すると、あなたも私も","link":"https://masutaka.net/2015-12-27-1/","isoDate":"2015-12-27T00:00:00.000Z","dateMiliSeconds":1451174400000,"authorName":"masutaka"},{"title":"各記事の最後に『当日のツイート』へのリンクを追加した","content":"このブログを読んでいると、その日マスタカがどんなツイートをしていた\nか気になりますよね？\nそういうわけで各記事の最後に『当日のツイート』へのリンクを追加しま\nした。\nTwitter『高度な検索』の問題点 そもそも Twitter には高度な検索という機能があり、ユーザ名や日付な\nどを指定して検索することが出来ます。\n高度な検索の使い方｜Twitterヘルプセンター こちらがそのページです。\nTwitterの高度な検索 しかし、ここでユーザ名と日付を指定しても、うまくその日のツイートを\n検索することが出来ませんでした。\n 何も検索されない from:masutaka since:2015-12-23 until:2015-12-23\n22 日と 23 日のツイートがよく分からない感じで混ざってしまう from:masutaka since:2015-12-22 until:2015-12-23\n 日付を指定してツイートを検索する 調べていたところ、こちらの記事を見つけました。\nツイッターの時間指定検索方法 - さまざまなめりっと こちらの記事にあるように since と until 演算子には時間とタイムゾー\nンを指定することが出来ました。\nこれを利用すれば任意の日のツイートを絞り込むことが出来るようです。\n 2015-12-23 のマスタカのツイートを絞り込む from:masutaka since:2015-12-23_00:00:00_JST until:2015-12-23_23:59:59_JST\n ややクセのある仕様でした。\n タイムゾーンを指定しないと、UTC で検索される タイムゾーンを指定する場合、日付と時間の指定も必要 日付とタイムゾーンの組み合わせ（例: since:2015-12-23_JST）ではうまく検索されない  微調整 普通に検索すると、『トップ』に飛んでしまうため『ライブ』へのリンク\nになるように URL パラメータ &ldquo;f=tweets&rdquo; を付けています。\n最終的なリンクはこちらになりました。\n 2015-12-23 当日のツイート https://twitter.com/search?f=tweets&vertical=default&q=from%3Amasutaka%20since%3A2015-12-23_00%3A00%3A00_JST%20until%3A2015-12-23_23%3A59%3A59_JST&src=typd  おまけ: 公式の検索ウィジェット ウィジェットの設定 - twitter.","contentSnippet":"このブログを読んでいると、その日マスタカがどんなツイートをしていたか気になりますよね？そういうわけで各記事の最後に『当日のツイート』へのリンクを追加しました。Twitter『高度な検索』の問題点 そもそも Twitter には高度な検索という機能があり、ユーザ名や日付などを指定して検索することが出来ます。高度な検索の使い方｜Twitterヘルプセンター こちらがそのページです。Twitterの高度な検索 しかし、ここでユーザ名と日付を指定しても、うまくその日のツイートを検索することが出来ませんでした。 何も検索されない from:masutaka since:2015-12-23 until:2015-12-2322 日と 23 日のツイートがよく分からない感じで混ざってしまう from:masutaka since:2015-12-22 until:2015-12-23 日付を指定してツイートを検索する 調べていたところ、こちらの記事を見つけました。ツイッターの時間指定検索方法 - さまざまなめりっと こちらの記事にあるように since と until 演算子には時間とタイムゾーンを指定することが出来ました。これを利用すれば任意の日のツイートを絞り込むことが出来るようです。 2015-12-23 のマスタカのツイートを絞り込む from:masutaka since:2015-12-23_00:00:00_JST until:2015-12-23_23:59:59_JST ややクセのある仕様でした。 タイムゾーンを指定しないと、UTC で検索される タイムゾーンを指定する場合、日付と時間の指定も必要 日付とタイムゾーンの組み合わせ（例: since:2015-12-23_JST）ではうまく検索されない  微調整 普通に検索すると、『トップ』に飛んでしまうため『ライブ』へのリンクになるように URL パラメータ “f=tweets” を付けています。最終的なリンクはこちらになりました。 2015-12-23 当日のツイート https://twitter.com/search?f=tweets&vertical=default&q=from%3Amasutaka%20since%3A2015-12-23_00%3A00%3A00_JST%20until%3A2015-12-23_23%3A59%3A59_JST&src=typd  おまけ: 公式の検索ウィジェット ウィジェットの設定 - twitter.","link":"https://masutaka.net/2015-12-23-1/","isoDate":"2015-12-23T00:00:00.000Z","dateMiliSeconds":1450828800000,"authorName":"masutaka"},{"title":"iPhone から家電を操作できる IRKit が便利だった #rebuildfm","content":"IRKit - Open Source WiFi Connected Infrared Remote Controller @miyagawa さんのタイムラインに何度も出ていたので、RubyKaigi [2015-12-13-1] 中に衝動的に買ってしまいました。\nしかし、Episode 120 を聞く前に買ったので、クーポンコードをスルーしてしまったという&hellip;。Episode 30 でも触れられたみたいですね。\n設定は簡単で 10 分くらいで使えるようになりました。カーテンレールの上に設置しました。この位置だと反応が良いです。\nLED が眩しすぎて気になる方は、こちらの記事をどうぞ。この位置だと、それほど気になりませんでした。\nエアコンと扇風機を完全自動でON/OFF 暑くて寝れない寝室とはおさらばだ！｜Act as Professional 今のところ、まだ軽い使い方です。\n 公式 iOS アプリ IRKit シンプルリモコン を使用 照明はボタンを全部登録（全灯, 省エネ, 常夜灯, 消灯） エアコンは ON/OFF のみ テレビは ON/OFF, 音量UP/DOWN, NHK のみ  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  寝る時に照明のリモコンがなくて、布団から這い出す事態がなくなりました。起きたら、寝たまま照明とエアコンとテレビを付けています。この辺は連動させたい。\n公式サイト を見ると、iOS SDK が公開されており、IRKit 自体にも HTTP サーバが立っているのでプログラマルな使い方ができるようです。","contentSnippet":"IRKit - Open Source WiFi Connected Infrared Remote Controller @miyagawa さんのタイムラインに何度も出ていたので、RubyKaigi [2015-12-13-1] 中に衝動的に買ってしまいました。しかし、Episode 120 を聞く前に買ったので、クーポンコードをスルーしてしまったという…。Episode 30 でも触れられたみたいですね。設定は簡単で 10 分くらいで使えるようになりました。カーテンレールの上に設置しました。この位置だと反応が良いです。LED が眩しすぎて気になる方は、こちらの記事をどうぞ。この位置だと、それほど気になりませんでした。エアコンと扇風機を完全自動でON/OFF 暑くて寝れない寝室とはおさらばだ！｜Act as Professional 今のところ、まだ軽い使い方です。 公式 iOS アプリ IRKit シンプルリモコン を使用 照明はボタンを全部登録（全灯, 省エネ, 常夜灯, 消灯） エアコンは ON/OFF のみ テレビは ON/OFF, 音量UP/DOWN, NHK のみ  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  寝る時に照明のリモコンがなくて、布団から這い出す事態がなくなりました。起きたら、寝たまま照明とエアコンとテレビを付けています。この辺は連動させたい。公式サイト を見ると、iOS SDK が公開されており、IRKit 自体にも HTTP サーバが立っているのでプログラマルな使い方ができるようです。","link":"https://masutaka.net/2015-12-19-1/","isoDate":"2015-12-19T00:00:00.000Z","dateMiliSeconds":1450483200000,"authorName":"masutaka"},{"title":"引っ越しで買って良かったものランキング","content":"捨てるものあれば買うものもまたあり。ということで、前回 [2015-12-14-1] の続きです。\n今回の引っ越しで買って良かったものをランキング形式でお届けします。\n立て続けに Amazon を使うことが確実だったので、遅ればせながらついにAmazon のプライム会員になりました。Amazon ばかり使って、他の EC サイトに申し訳ないです。\n引っ越して宅配ボックスも手に入れたので、いろいろ最強です。\n第９位：すのこ型除湿マット これは失敗。このサイト で知って購入しましたが、朝起きてマットの下を確認するとフローリングが濡れています。使う意味を感じられません。￥6,500 はもったいなかった。\nAmazon のレビューも見ましたが、なぜか「すごく良いはず」という先入観を消せないまま買ってしまいました。\n唯一良いことは「すのこ」と比べて場所を取らないことでしょうか&hellip;。\nカビの生えづらさでは「すのこ」の方が優れていますが、フローリングを傷つけますし、場所をとるのですよね。\n 第８位：カーテンのふさかけ 賃貸マンションなので、跡が残らないカーテンのふさかけを探していました。￥253 と安かった。\nこういうの、引っ越し直後に近所で探すと意外に見つけられないのですよね。\n 第７位：突っ張り棒 洗濯機の上の空間を有効利用するために買いました。なかなか力強い作りです。￥847 はお買い得すぎました。\n 第６位：Apple USB Super Drive [2015-12-14-1] で手放した存在感のある外付けDVDドライブ が場所を取りすぎるので、ついに購入しました。\n他にもスリムなドライブはありましたが、考えるのが面倒になりつい&hellip;。\namazon.co.jp より apple.jp のほうが少しお得でした（前者￥10,850、後者￥10,260）。それにしてもお高い。\n 第５位：マットレス 引っ越してしばらくマットレスなしの布団だけで寝ていたところ、体中が痛い！マッサージに行くハメになりました&hellip;。\n購入してすぐに痛みが解消。厚みは 4cm ほどしかありませんが、全然違います。もしかして９位のすのこ型除湿マットとの相乗効果？お値段も￥3,072 とお手頃でした。\n 第４位：羽根布団７点セット 布団を新調したかったので、全部入りでお値段も手頃で評判も良さそうなこちらに。適当な枕だと思ったら、なぜか私に合って毎日ぐっすりです。\n掛け布団もこんなに薄くて大丈夫かな？と思いましたが、今のところ毛布なしで眠れています。当時のお値段は ￥9,800 でした。ただネイビーは色が濃すぎたかも。\n 第３位：チェスト [2015-12-14-1] で手放した押入れチェスト の後釜です。\n今の部屋のクローゼットには入れられないので、外に出しても貧相でないデザインかつ、次の引っ越しで手放しても惜しくないお値段のものを購入しました（￥5,445）。\n 第２位：IRKit スマフォやタブレットから、リモコン付きの家電を操作できるアイテムです。￥7,700 なり。\n前はルームシェアしていた関係で、自分の部屋にはエアコンのリモコンしかありませんでした。今はテレビと照明のリモコンもあるので、購入したところ大正解。\n枕元には必ず iPhone があるので、寝ようとして照明のリモコンがなくてまた起きることがなくなりました。目覚ましが鳴ったら、照明とエアコンとテレビを全部連動して付けたいです。\nカーテンレールの上に設置した様子。この位置だと眩しいと悪評の LED の光は気になりませんでした。","contentSnippet":"捨てるものあれば買うものもまたあり。ということで、前回 [2015-12-14-1] の続きです。今回の引っ越しで買って良かったものをランキング形式でお届けします。立て続けに Amazon を使うことが確実だったので、遅ればせながらついにAmazon のプライム会員になりました。Amazon ばかり使って、他の EC サイトに申し訳ないです。引っ越して宅配ボックスも手に入れたので、いろいろ最強です。第９位：すのこ型除湿マット これは失敗。このサイト で知って購入しましたが、朝起きてマットの下を確認するとフローリングが濡れています。使う意味を感じられません。￥6,500 はもったいなかった。Amazon のレビューも見ましたが、なぜか「すごく良いはず」という先入観を消せないまま買ってしまいました。唯一良いことは「すのこ」と比べて場所を取らないことでしょうか…。カビの生えづらさでは「すのこ」の方が優れていますが、フローリングを傷つけますし、場所をとるのですよね。 第８位：カーテンのふさかけ 賃貸マンションなので、跡が残らないカーテンのふさかけを探していました。￥253 と安かった。こういうの、引っ越し直後に近所で探すと意外に見つけられないのですよね。 第７位：突っ張り棒 洗濯機の上の空間を有効利用するために買いました。なかなか力強い作りです。￥847 はお買い得すぎました。 第６位：Apple USB Super Drive [2015-12-14-1] で手放した存在感のある外付けDVDドライブ が場所を取りすぎるので、ついに購入しました。他にもスリムなドライブはありましたが、考えるのが面倒になりつい…。amazon.co.jp より apple.jp のほうが少しお得でした（前者￥10,850、後者￥10,260）。それにしてもお高い。 第５位：マットレス 引っ越してしばらくマットレスなしの布団だけで寝ていたところ、体中が痛い！マッサージに行くハメになりました…。購入してすぐに痛みが解消。厚みは 4cm ほどしかありませんが、全然違います。もしかして９位のすのこ型除湿マットとの相乗効果？お値段も￥3,072 とお手頃でした。 第４位：羽根布団７点セット 布団を新調したかったので、全部入りでお値段も手頃で評判も良さそうなこちらに。適当な枕だと思ったら、なぜか私に合って毎日ぐっすりです。掛け布団もこんなに薄くて大丈夫かな？と思いましたが、今のところ毛布なしで眠れています。当時のお値段は ￥9,800 でした。ただネイビーは色が濃すぎたかも。 第３位：チェスト [2015-12-14-1] で手放した押入れチェスト の後釜です。今の部屋のクローゼットには入れられないので、外に出しても貧相でないデザインかつ、次の引っ越しで手放しても惜しくないお値段のものを購入しました（￥5,445）。 第２位：IRKit スマフォやタブレットから、リモコン付きの家電を操作できるアイテムです。￥7,700 なり。前はルームシェアしていた関係で、自分の部屋にはエアコンのリモコンしかありませんでした。今はテレビと照明のリモコンもあるので、購入したところ大正解。枕元には必ず iPhone があるので、寝ようとして照明のリモコンがなくてまた起きることがなくなりました。目覚ましが鳴ったら、照明とエアコンとテレビを全部連動して付けたいです。カーテンレールの上に設置した様子。この位置だと眩しいと悪評の LED の光は気になりませんでした。","link":"https://masutaka.net/2015-12-15-1/","isoDate":"2015-12-15T00:00:00.000Z","dateMiliSeconds":1450137600000,"authorName":"masutaka"},{"title":"引っ越しで捨てたものと譲ったもの","content":"[2015-11-30-1] の記事でお気づきかもしれませんが(!)、\n先月 20 日に 3 年 4 ヶ月住んだ世田谷区から荒川区に引っ越しました。\n引っ越しはかれこれ 7 回目です。\nこの記事は引越し前後に捨てた粗大ごみと、ジモティー で譲ったもの\nリストです。誰得なんでしょうか？\n粗大ゴミとして捨てたもの  灯油用ポリタンク x 2 扇風機 ダイニングテーブル 二人掛けソファー 応接用一人掛け椅子 PC 用椅子 x 2 丸椅子 掛け布団 x 2 敷き布団 x 3 マットレス 自転車 照明器具 x 3 エアコン  捨てたものがやたら多いのは、前職のラングリッチ のオフィスが明石にあっ\nた頃の家具が一部引き継がれたのと、@tomoyaton とルームシェアしてい\nたからです。\nここに写っているテーブルや椅子です。\n生ハムの原木がある、ギークハウス神戸（明石）はじめました。 - 日々、とんは語る。 エアコンは壊れて暖房しか付かなくなったので、取り外しと引き取りを青\n雲電機にお願いしました。いいおっちゃんが来てくれました。\n穴のパテ埋めも込みで ￥3,024（税込み） でした。めっちゃ安い！\n引っ越し屋とかに頼むと ￥10,000 くらいすると思います。\nそんな青雲電機のサイトがこちら。\nだまされてはいけない！エアコン工事の取外し取付け代金 タイトルに会社名を入れるとか、もう少し怪しくないサイトにしたほうが\nよいのでは&hellip;？もったいない。\n譲ったもの  三菱電機 22W型 ノングレア液晶 [無料]  押入れチェスト（74cm x 71cm x 59cm）  スリッパラック  木製の丸椅子  直方体のクッション（２個）  ふとん乾燥機（シングルサイズ）  ダブルサイズの布団用すのこ  照明器具（カサのみ、直径55cm）  照明器具（直径40cm）  都市ガス用ガステーブル  高さのあるハンガーラック  木製のスタンドミラー  存在感のある外付けDVDドライブ  見やすい掛け時計  SHARP ふろ水ポンプセット（ホースの長さ4ｍ） 210 396 0102   [2014-05-31-1] でも書いたジモティが大活躍でした。早ければ 30 分く","contentSnippet":"[2015-11-30-1] の記事でお気づきかもしれませんが(!)、先月 20 日に 3 年 4 ヶ月住んだ世田谷区から荒川区に引っ越しました。引っ越しはかれこれ 7 回目です。この記事は引越し前後に捨てた粗大ごみと、ジモティー で譲ったものリストです。誰得なんでしょうか？粗大ゴミとして捨てたもの  灯油用ポリタンク x 2 扇風機 ダイニングテーブル 二人掛けソファー 応接用一人掛け椅子 PC 用椅子 x 2 丸椅子 掛け布団 x 2 敷き布団 x 3 マットレス 自転車 照明器具 x 3 エアコン  捨てたものがやたら多いのは、前職のラングリッチ のオフィスが明石にあった頃の家具が一部引き継がれたのと、@tomoyaton とルームシェアしていたからです。ここに写っているテーブルや椅子です。生ハムの原木がある、ギークハウス神戸（明石）はじめました。 - 日々、とんは語る。 エアコンは壊れて暖房しか付かなくなったので、取り外しと引き取りを青雲電機にお願いしました。いいおっちゃんが来てくれました。穴のパテ埋めも込みで ￥3,024（税込み） でした。めっちゃ安い！引っ越し屋とかに頼むと ￥10,000 くらいすると思います。そんな青雲電機のサイトがこちら。だまされてはいけない！エアコン工事の取外し取付け代金 タイトルに会社名を入れるとか、もう少し怪しくないサイトにしたほうがよいのでは…？もったいない。譲ったもの  三菱電機 22W型 ノングレア液晶 [無料]  押入れチェスト（74cm x 71cm x 59cm）  スリッパラック  木製の丸椅子  直方体のクッション（２個）  ふとん乾燥機（シングルサイズ）  ダブルサイズの布団用すのこ  照明器具（カサのみ、直径55cm）  照明器具（直径40cm）  都市ガス用ガステーブル  高さのあるハンガーラック  木製のスタンドミラー  存在感のある外付けDVDドライブ  見やすい掛け時計  SHARP ふろ水ポンプセット（ホースの長さ4ｍ） 210 396 0102   [2014-05-31-1] でも書いたジモティが大活躍でした。早ければ 30 分く","link":"https://masutaka.net/2015-12-14-1/","isoDate":"2015-12-14T00:00:00.000Z","dateMiliSeconds":1450051200000,"authorName":"masutaka"},{"title":"RubyKaigi 2015 に行ってきた #rubykaigi","content":"http://rubykaigi.org/2015 12/11（金）から始まった RubyKaigi 2015 に 3 日間参加してきました。\n1 日目は自宅を出た時は小雨で、東銀座駅に着いたら暴風雨、\n会場に着いたら快晴と、汐留とはなんとハードな場所かと疲労困憊\n汗ダラダラで始まりました。\n以下、自分用のメモです。\nKeynote by @yukihiro_matz  ※ TODO: 資料やビデオが公開されたらここに貼る\n Did-you-mean 機能  間違えたら提示してくれる機能   Enumerable#grep_v Hash#dig は便利そう frozen-string-literal: true とコメントを書くと、文字列が freeze される &amp;. Lonely operator  &amp;&amp; の圧縮だそう。なるほど今理解した。   https://github.com/matz/streem の話  foo = nil foo &amp;&amp; foo.size =&gt; nil foo = &#34;aaa&#34; foo &amp;&amp; foo.size =&gt; 3 # 上記を &amp;. で書き換えると foo = nil foo&amp;.size =&gt; nil foo = &#34;aaa&#34; foo&amp;.","contentSnippet":"http://rubykaigi.org/2015 12/11（金）から始まった RubyKaigi 2015 に 3 日間参加してきました。1 日目は自宅を出た時は小雨で、東銀座駅に着いたら暴風雨、会場に着いたら快晴と、汐留とはなんとハードな場所かと疲労困憊汗ダラダラで始まりました。以下、自分用のメモです。Keynote by @yukihiro_matz  ※ TODO: 資料やビデオが公開されたらここに貼る Did-you-mean 機能  間違えたら提示してくれる機能   Enumerable#grep_v Hash#dig は便利そう frozen-string-literal: true とコメントを書くと、文字列が freeze される &. Lonely operator  && の圧縮だそう。なるほど今理解した。   https://github.com/matz/streem の話  foo = nil foo && foo.size => nil foo = \"aaa\" foo && foo.size => 3 # 上記を &. で書き換えると foo = nil foo&.size => nil foo = \"aaa\" foo&.","link":"https://masutaka.net/2015-12-13-1/","isoDate":"2015-12-13T00:00:00.000Z","dateMiliSeconds":1449964800000,"authorName":"masutaka"},{"title":"『良い不動産屋を見つけるメソッド』で良い物件に引っ越せた","content":"効率的な賃貸物件の探し方｜nanapi [ナナピ] └良い物件ではなく良い不動産屋を探した - $shibayu36-&gt;blog; 今まで足掛け 4 年ほどルームシェアしてましたが、ちょうど引っ越しの\nタイミングが合ったのでこちらを実践してみました。結果として大正解。\n賃貸は 7 軒目ですけど、一番当たりでした。\nnanapi の記事に沿うような形で書いていきます。\nSTEP1：WEB で家賃の相場を知る 私は HOME&rsquo;S とかでダラダラ探しました。\n探し始めるまでがハードルが高くて、だいぶ時間がかかってしまいました。\nSTEP2：自分の希望条件をまとめる これは問題なし。なぜなら過去に書いた引っ越しの希望条件が、Dropbox\nに保存してあるから。← A 型奴ー\n少々バージョンアップするだけで済みました。ちなみにこんなのです。改\nめて見ると、必須はほぼ叶えられてますね。（でもこのくらいの必須は普\n通だよな&hellip;。）\n◆必須\n 家賃 X 万円まで 7 畳以上 居間・キッチン別 風呂・トイレ別 2 口ガスコンロ 室内洗濯機置き場 駅まで 5 分以内 コンビニやスーパーが近い まわりが静か 布団が干せる 家賃は銀行振り込み インターネットが快適 収納が狭くない  ◆あったらうれしい\n 2 階以上 保証人不要 宅配ボックス 雨戸 居間にガスコンセントまたは床暖房  ガスファンヒーター（都市ガス、12or13A）   ベランダ エアコン 浴室乾燥機 独立洗面台 インターホン 風呂の追い炊き機能がある ゴミをいつでも（もしくは前日の夜に）出せる 大家が近くに住んでいない 服をある程度掛けられるクローゼット  ◆注意すべき点","contentSnippet":"効率的な賃貸物件の探し方｜nanapi [ナナピ] └良い物件ではなく良い不動産屋を探した - $shibayu36->blog; 今まで足掛け 4 年ほどルームシェアしてましたが、ちょうど引っ越しのタイミングが合ったのでこちらを実践してみました。結果として大正解。賃貸は 7 軒目ですけど、一番当たりでした。nanapi の記事に沿うような形で書いていきます。STEP1：WEB で家賃の相場を知る 私は HOME’S とかでダラダラ探しました。探し始めるまでがハードルが高くて、だいぶ時間がかかってしまいました。STEP2：自分の希望条件をまとめる これは問題なし。なぜなら過去に書いた引っ越しの希望条件が、Dropboxに保存してあるから。← A 型奴ー少々バージョンアップするだけで済みました。ちなみにこんなのです。改めて見ると、必須はほぼ叶えられてますね。（でもこのくらいの必須は普通だよな…。）◆必須 家賃 X 万円まで 7 畳以上 居間・キッチン別 風呂・トイレ別 2 口ガスコンロ 室内洗濯機置き場 駅まで 5 分以内 コンビニやスーパーが近い まわりが静か 布団が干せる 家賃は銀行振り込み インターネットが快適 収納が狭くない  ◆あったらうれしい 2 階以上 保証人不要 宅配ボックス 雨戸 居間にガスコンセントまたは床暖房  ガスファンヒーター（都市ガス、12or13A）   ベランダ エアコン 浴室乾燥機 独立洗面台 インターホン 風呂の追い炊き機能がある ゴミをいつでも（もしくは前日の夜に）出せる 大家が近くに住んでいない 服をある程度掛けられるクローゼット  ◆注意すべき点","link":"https://masutaka.net/2015-11-30-1/","isoDate":"2015-11-30T00:00:00.000Z","dateMiliSeconds":1448841600000,"authorName":"masutaka"},{"title":"OpenID Summit Tokyo 2015 に行ってきた #openid_tokyo","content":"OpenID Summit Tokyo 2015 一応、ID 業界の片隅に生息しているので行ってきました。会社から歩い\nて 10 分くらいだったし。\n最新の動向をキャッチアップ出来て有意義なイベントでした。気になるセッ\nションだけ聞こうと思ってましたが、結局ほぼ最後まで聞いてました。\n同時通訳は助かりました。運営の皆さん、ありがとうございました。\n※ メモが少ないセッションは、疲れていたか、メモを取るリズムが掴め\nなかったからです。\nアイデンティティ・オーバービュー 崎村 夏彦 — OpenID Foundation 理事長\n楠 正憲 — OpenIDファウンデーション・ジャパン 代表理事\n※ TODO: 資料が公開されたらここに貼る\n前回は 2011 年とのこと。毎年やっているのかと思いました。\nIoT時代の認証技術 増井俊之 — 慶應義塾大学 環境情報学部 教授  資料置き場: http://gyump.com/OpenID/ 初めて増井さんのセッションを聞いたかも。さすがの増井節。私が増井さ\nんを認識したのはもちろん dmacro.el や keisen.el が最初。keisen.el\nは今もたまに使います。てか、Emacs-24.5 でも動くのはすごい！\n 個人の秘密情報は認証に使えるはず Suica履歴、ログイン履歴、etc トイレに何回行ったかとかw  Clouds + ID ~ クラウドビジネスにおけるIDの現在と今後 ~ 藤井 彰人 — KDDI株式会社 ソリューション事業企画本部クラウドサービス企画部 部長 ※ TODO: 資料が公開されたらここに貼る","contentSnippet":"OpenID Summit Tokyo 2015 一応、ID 業界の片隅に生息しているので行ってきました。会社から歩いて 10 分くらいだったし。最新の動向をキャッチアップ出来て有意義なイベントでした。気になるセッションだけ聞こうと思ってましたが、結局ほぼ最後まで聞いてました。同時通訳は助かりました。運営の皆さん、ありがとうございました。※ メモが少ないセッションは、疲れていたか、メモを取るリズムが掴めなかったからです。アイデンティティ・オーバービュー 崎村 夏彦 — OpenID Foundation 理事長楠 正憲 — OpenIDファウンデーション・ジャパン 代表理事※ TODO: 資料が公開されたらここに貼る前回は 2011 年とのこと。毎年やっているのかと思いました。IoT時代の認証技術 増井俊之 — 慶應義塾大学 環境情報学部 教授  資料置き場: http://gyump.com/OpenID/ 初めて増井さんのセッションを聞いたかも。さすがの増井節。私が増井さんを認識したのはもちろん dmacro.el や keisen.el が最初。keisen.elは今もたまに使います。てか、Emacs-24.5 でも動くのはすごい！ 個人の秘密情報は認証に使えるはず Suica履歴、ログイン履歴、etc トイレに何回行ったかとかw  Clouds + ID ~ クラウドビジネスにおけるIDの現在と今後 ~ 藤井 彰人 — KDDI株式会社 ソリューション事業企画本部クラウドサービス企画部 部長 ※ TODO: 資料が公開されたらここに貼る","link":"https://masutaka.net/2015-11-13-1/","isoDate":"2015-11-13T00:00:00.000Z","dateMiliSeconds":1447372800000,"authorName":"masutaka"},{"title":"コマンドラインで URL encode するやつ","content":"[2015-07-28-2] のコマンドライン版。\nfunction urlencode() { echo $(php -r &#34;echo rawurlencode(&#39;$1&#39;);&#34;) } function urldecode() { echo $(php -r &#34;echo rawurldecode(&#39;$1&#39;);&#34;) } urlencode &#34;http://masutaka.net/&#34; =&gt; http%3A%2F%2Fmasutaka.net%2F urldecode &#34;http%3A%2F%2Fmasutaka.net%2F&#34; =&gt; http://masutaka.net/ PHP 便利！","contentSnippet":"[2015-07-28-2] のコマンドライン版。function urlencode() { echo $(php -r \"echo rawurlencode('$1');\") } function urldecode() { echo $(php -r \"echo rawurldecode('$1');\") } urlencode \"http://masutaka.net/\" => http%3A%2F%2Fmasutaka.net%2F urldecode \"http%3A%2F%2Fmasutaka.net%2F\" => http://masutaka.net/ PHP 便利！","link":"https://masutaka.net/2015-10-21-1/","isoDate":"2015-10-21T00:00:00.000Z","dateMiliSeconds":1445385600000,"authorName":"masutaka"},{"title":"継続的 bundle update サービス deppbot を使ってみた","content":"昨日話題になっていた https://www.deppbot.com と、\n拙作のツール ci-build-trigger [2015-07-28-1] を比較してみました。\nタイミングよく、Gem のアップデートがあってよかったです。\n私のツールが作った Pull request https://github.com/masutaka/masutaka-metrics/pull/19 deppbot が作った Pull request https://github.com/masutaka/masutaka-metrics/pull/20 良くなったこと  アップデートされた Gem の情報が Pull request の description にまとまってすっきりした compare_linker では取得できないことがあった、リポジトリや Diff へのリンクが完璧に取得できている CHANGELOG へのリンクもある  悪くなったこと  機能面では特にない デフォルトで Private リポジトリにアクセスされるのが少し心配  仕様など ▼必要な GitHub のパーミッション\n Access user email addresses (read-only) Access private repositories  FAQ のページ で\nHowever, we will ONLY access a repository after you Subscribe it on your Dashboard.","contentSnippet":"昨日話題になっていた https://www.deppbot.com と、拙作のツール ci-build-trigger [2015-07-28-1] を比較してみました。タイミングよく、Gem のアップデートがあってよかったです。私のツールが作った Pull request https://github.com/masutaka/masutaka-metrics/pull/19 deppbot が作った Pull request https://github.com/masutaka/masutaka-metrics/pull/20 良くなったこと  アップデートされた Gem の情報が Pull request の description にまとまってすっきりした compare_linker では取得できないことがあった、リポジトリや Diff へのリンクが完璧に取得できている CHANGELOG へのリンクもある  悪くなったこと  機能面では特にない デフォルトで Private リポジトリにアクセスされるのが少し心配  仕様など ▼必要な GitHub のパーミッション Access user email addresses (read-only) Access private repositories  FAQ のページ でHowever, we will ONLY access a repository after you Subscribe it on your Dashboard.","link":"https://masutaka.net/2015-10-04-1/","isoDate":"2015-10-04T00:00:00.000Z","dateMiliSeconds":1443916800000,"authorName":"masutaka"},{"title":"結局 package.el に戻ってきた","content":"[2014-11-03-1] に package.el から Cask に乗り換え、\n[2015-06-17-1] に Cask から El-Get に乗り換えましたが、\n結局 package.el に戻ってきました。\n理由は M-x el-get-update(-all) の更新がうまくいかず、エラーにな\nり、~/.emacs.d/el-get や ~/.emacs.d/elpa を全削除して入れなおすこ\nとがよくあったからです。最近は面倒になりアップデートもしなくなりま\nした&hellip;。\npackage.el でインストールするパッケージも init.el に書いてしまえば、\n何をインストールしたか分かります。なにより Emacs デフォルトの機能\nなので安心感があります（私はライトなデフォルト厨）。\nバージョンロック出来ない問題は、アップデート前に ~/.emacs.d/elpa\nをバックアップすれば良いでしょう&hellip;。Time Machine もありますし&hellip;。\n変更前と後の init.el はこちら。\n◆変更前\n;; See http://d.hatena.ne.jp/tarao/20150221/1424518030  (add-to-list &#39;load-path (locate-user-emacs-file &#34;el-get/el-get&#34;))  (unless (require &#39;el-get nil &#39;noerror)  (with-current-buffer  (url-retrieve-synchronously  &#34;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&#34;)  (goto-char (point-max))  (eval-print-last-sexp)))  ;; lock the pacakge versions (el-get-bundle tarao/el-get-lock) (el-get-lock)  (el-get-bundle ajtulloch/mkdown.","contentSnippet":"[2014-11-03-1] に package.el から Cask に乗り換え、[2015-06-17-1] に Cask から El-Get に乗り換えましたが、結局 package.el に戻ってきました。理由は M-x el-get-update(-all) の更新がうまくいかず、エラーになり、~/.emacs.d/el-get や ~/.emacs.d/elpa を全削除して入れなおすことがよくあったからです。最近は面倒になりアップデートもしなくなりました…。package.el でインストールするパッケージも init.el に書いてしまえば、何をインストールしたか分かります。なにより Emacs デフォルトの機能なので安心感があります（私はライトなデフォルト厨）。バージョンロック出来ない問題は、アップデート前に ~/.emacs.d/elpaをバックアップすれば良いでしょう…。Time Machine もありますし…。変更前と後の init.el はこちら。◆変更前;; See http://d.hatena.ne.jp/tarao/20150221/1424518030  (add-to-list 'load-path (locate-user-emacs-file \"el-get/el-get\"))  (unless (require 'el-get nil 'noerror)  (with-current-buffer  (url-retrieve-synchronously  \"https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el\")  (goto-char (point-max))  (eval-print-last-sexp)))  ;; lock the pacakge versions (el-get-bundle tarao/el-get-lock) (el-get-lock)  (el-get-bundle ajtulloch/mkdown.","link":"https://masutaka.net/2015-10-03-1/","isoDate":"2015-10-03T00:00:00.000Z","dateMiliSeconds":1443830400000,"authorName":"masutaka"},{"title":"iPhone 6s 64GB を購入して、au のプランも変更した","content":"[2013-10-14-1] に iPhone 5s 64GB を購入してもうすぐ 2 年。少しフラ\nイングですが、iPhone 6s 64GB を購入しました。\n使用感 指紋認証がとにかく速く正確です。ミスするのが難しいほど。センサーの\n向上でしょうか？それとも CPU が A7 から A9 に上がったから？\n目玉の 3D Touch はデフォルトのアプリのいくつかと、Twitter アプリで\n使えました。Live Photos も面白いですね。\n画面も大きくなりました。このサイズまでなら大丈夫そうです。\n細かいところでは、パスコードが 4 文字から 6 文字に増えてました。ハー\nドと関係があるんだ&hellip;？\nケースは付けずに Sinji Pouch Basic 2 に下記の 2 枚を入れて使ってます。\n Pasmo（定期） エラー防止シート   See also iPhoneにカードを入れるポケットが増える「Sinji Pouch Basic 2」を購入｜Act as Professional プランを変更 「LTE プラン（￥1,008） + LTE フラット(7GB)（￥6,156） = ￥7,164」を\n「電話カケ放題プランS（￥1,836） + データ定額5(5GB)（￥5,400） = ￥7,236」に","contentSnippet":"[2013-10-14-1] に iPhone 5s 64GB を購入してもうすぐ 2 年。少しフライングですが、iPhone 6s 64GB を購入しました。使用感 指紋認証がとにかく速く正確です。ミスするのが難しいほど。センサーの向上でしょうか？それとも CPU が A7 から A9 に上がったから？目玉の 3D Touch はデフォルトのアプリのいくつかと、Twitter アプリで使えました。Live Photos も面白いですね。画面も大きくなりました。このサイズまでなら大丈夫そうです。細かいところでは、パスコードが 4 文字から 6 文字に増えてました。ハードと関係があるんだ…？ケースは付けずに Sinji Pouch Basic 2 に下記の 2 枚を入れて使ってます。 Pasmo（定期） エラー防止シート   See also iPhoneにカードを入れるポケットが増える「Sinji Pouch Basic 2」を購入｜Act as Professional プランを変更 「LTE プラン（￥1,008） + LTE フラット(7GB)（￥6,156） = ￥7,164」を「電話カケ放題プランS（￥1,836） + データ定額5(5GB)（￥5,400） = ￥7,236」に","link":"https://masutaka.net/2015-09-29-1/","isoDate":"2015-09-29T00:00:00.000Z","dateMiliSeconds":1443484800000,"authorName":"masutaka"},{"title":"Swift 2.0 で自分のクラス名を表示する方法","content":"The Swift Programming Language (Swift 2.1): A Swift Tour やってる\n&#34;hoge&#34;.dynamicType =&gt; String.Type String(&#34;hoge&#34;.dynamicType) =&gt; &#34;String&#34; 1.dynamicType =&gt; Int.Type String(1.dynamicType) =&gt; &#34;Int&#34; class Hoge { } var hoge = Hoge() hoge.dynamicType =&gt; Hoge.type String(hoge.dynamicType) =&gt; &#34;Hoge&#34; 参考になったけど、Swift 2.0 では結構使えなくなっていた\nSwiftで自分のクラス名を表示する方法 - Qiita ","contentSnippet":"The Swift Programming Language (Swift 2.1): A Swift Tour やってる\"hoge\".dynamicType => String.Type String(\"hoge\".dynamicType) => \"String\" 1.dynamicType => Int.Type String(1.dynamicType) => \"Int\" class Hoge { } var hoge = Hoge() hoge.dynamicType => Hoge.type String(hoge.dynamicType) => \"Hoge\" 参考になったけど、Swift 2.0 では結構使えなくなっていたSwiftで自分のクラス名を表示する方法 - Qiita","link":"https://masutaka.net/2015-09-26-1/","isoDate":"2015-09-26T00:00:00.000Z","dateMiliSeconds":1443225600000,"authorName":"masutaka"},{"title":"『るろうに剣心』の映画版が案外良かった","content":"今さらですが、３本全部見ました。シナリオはアレですが、配役や全体の\n雰囲気が良かったです。\n緋村剣心 - 佐藤健\n相楽左之助 - 青木崇高\n四乃森蒼紫 - 伊勢谷友介\n謎の男 - 福山雅治\n斎藤一 - 江口洋介\n志々雄真実 - 藤原竜也\n龍馬伝と随分似てるなあと思ったら、監督が同じ大友啓史さん。ある意味\n確信犯だったのですね。\n佐藤さんは龍馬伝での人斬り以蔵からの転身(?)。個人的には江口さんが\nツボで、福山さんは意外性があって◯でした。\nアクションも昔の映画に比べて、素晴らしく良かった。\n   ","contentSnippet":"今さらですが、３本全部見ました。シナリオはアレですが、配役や全体の雰囲気が良かったです。緋村剣心 - 佐藤健相楽左之助 - 青木崇高四乃森蒼紫 - 伊勢谷友介謎の男 - 福山雅治斎藤一 - 江口洋介志々雄真実 - 藤原竜也龍馬伝と随分似てるなあと思ったら、監督が同じ大友啓史さん。ある意味確信犯だったのですね。佐藤さんは龍馬伝での人斬り以蔵からの転身(?)。個人的には江口さんがツボで、福山さんは意外性があって◯でした。アクションも昔の映画に比べて、素晴らしく良かった。","link":"https://masutaka.net/2015-09-23-2/","isoDate":"2015-09-23T01:00:00.000Z","dateMiliSeconds":1442970000000,"authorName":"masutaka"},{"title":"「この記事に言及しているこのブログ内の記事」一覧を表示するようにしました","content":"こちらのパクリです。\n「この記事に言及しているこのブログ内の記事」一覧を表示するようにしました - たつをの ChangeLog 修正前\n修正後\nずっとやろうとしていて、今日やっとやる気になりました。ﾊﾟｰﾙﾂﾗｲﾃﾞｽ\nchalow スクリプトがまた秘伝のタレ化してしまった&hellip;。","contentSnippet":"こちらのパクリです。「この記事に言及しているこのブログ内の記事」一覧を表示するようにしました - たつをの ChangeLog 修正前修正後ずっとやろうとしていて、今日やっとやる気になりました。ﾊﾟｰﾙﾂﾗｲﾃﾞｽchalow スクリプトがまた秘伝のタレ化してしまった…。","link":"https://masutaka.net/2015-09-23-1/","isoDate":"2015-09-23T00:00:00.000Z","dateMiliSeconds":1442966400000,"authorName":"masutaka"},{"title":"『現役プロダクトマネージャーが語る、日本企業におけるプロダクトマネージャーの課題と今後の展望 ～プロダクトオーナーシップ勉強会～』に参加した #postudy","content":"[ITビジネスセミナー] 現役プロダクトマネージャーが語る、日本企業におけるプロダクトマネージャーの課題と今後の展望 - POStudy ～プロダクトオーナーシップ勉強会～ 最近よく話題になる、プロダクトマネージャーについて集中して学習する\n良い機会と思い、行って来ました。\n関さん始め、運営された皆さん、ありがとうございました。期待通りの勉\n強会でした。\n以下、気になった点の箇条書きです。普段あまり行かない類の勉強会なの\nで、量多めです。\n1. 【基調講演】プロダクトマネージャーとは  関 満徳氏 POStudy ～プロダクトオーナーシップ勉強会～ 主宰\n プロダクト全体に責任をもっている プロジェクトマネージャーとプロダクトマネージャーの責務は PMBOK に定義されている  プロジェクトマネージャーは 10 個 プロダクトマネージャーは 2 個のみ  プロダクトマネジメント 顧客（市場）マネジメント     起業家とプロダクトマネージャーの違い  資金調達が必要ない それ以外はだいたい同じ   必要な 7 つのスキルがある 執行役員以上が担う もしくは執行役員以上から期間限定で任命 ラピッドプロトタイピング  プロトタイプを作ったら、関係者ではなく実際のユーザでテスト   マネジメントとリーダーは違うので、同じ人だったら意識して帽子を脱ぎ変える必要がある  前者は製品を対象とし、チームを対象とする   &ldquo;目標を与えれば人は動く&rdquo;  2. 【キーセッション】個人と組織からもう一度考えるプロダクトマネジャー  新井 宏征氏 株式会社スタイリッシュ・アイデア 代表取締役\n 『プロダクトマネジャーの教科書 』の訳者の方 「プロダクト」=「製品」ではない  プロダクトとは、顧客のニーズや欲求を満たすベネフィットの集合である まあそうだよね   ドライな目標（MBO）と想いのマネジメント（MBB）の両輪を回すことが組織にとって必要  MBO: Management By Objectives MBB: Management By Belief   &ldquo;組織が急速に成長しているときには、絶え間ないコミュニケーションと強い一体感が何にもまして重要だ&rdquo; V2MOM でビジョン主導型マネジメント  V2MOM (Vision, Values, Methods, Obstacles, Measures) 作成する際にはボトムアップで社員からの声を集めている 「社長目線で考えろ」と精神論を言うのではなく、V2MOM のようなフレームワークをトップも社員も使うことが重要    3.","contentSnippet":"[ITビジネスセミナー] 現役プロダクトマネージャーが語る、日本企業におけるプロダクトマネージャーの課題と今後の展望 - POStudy ～プロダクトオーナーシップ勉強会～ 最近よく話題になる、プロダクトマネージャーについて集中して学習する良い機会と思い、行って来ました。関さん始め、運営された皆さん、ありがとうございました。期待通りの勉強会でした。以下、気になった点の箇条書きです。普段あまり行かない類の勉強会なので、量多めです。1. 【基調講演】プロダクトマネージャーとは  関 満徳氏 POStudy ～プロダクトオーナーシップ勉強会～ 主宰 プロダクト全体に責任をもっている プロジェクトマネージャーとプロダクトマネージャーの責務は PMBOK に定義されている  プロジェクトマネージャーは 10 個 プロダクトマネージャーは 2 個のみ  プロダクトマネジメント 顧客（市場）マネジメント     起業家とプロダクトマネージャーの違い  資金調達が必要ない それ以外はだいたい同じ   必要な 7 つのスキルがある 執行役員以上が担う もしくは執行役員以上から期間限定で任命 ラピッドプロトタイピング  プロトタイプを作ったら、関係者ではなく実際のユーザでテスト   マネジメントとリーダーは違うので、同じ人だったら意識して帽子を脱ぎ変える必要がある  前者は製品を対象とし、チームを対象とする   “目標を与えれば人は動く”  2. 【キーセッション】個人と組織からもう一度考えるプロダクトマネジャー  新井 宏征氏 株式会社スタイリッシュ・アイデア 代表取締役 『プロダクトマネジャーの教科書 』の訳者の方 「プロダクト」=「製品」ではない  プロダクトとは、顧客のニーズや欲求を満たすベネフィットの集合である まあそうだよね   ドライな目標（MBO）と想いのマネジメント（MBB）の両輪を回すことが組織にとって必要  MBO: Management By Objectives MBB: Management By Belief   “組織が急速に成長しているときには、絶え間ないコミュニケーションと強い一体感が何にもまして重要だ” V2MOM でビジョン主導型マネジメント  V2MOM (Vision, Values, Methods, Obstacles, Measures) 作成する際にはボトムアップで社員からの声を集めている 「社長目線で考えろ」と精神論を言うのではなく、V2MOM のようなフレームワークをトップも社員も使うことが重要    3.","link":"https://masutaka.net/2015-09-06-1/","isoDate":"2015-09-06T00:00:00.000Z","dateMiliSeconds":1441497600000,"authorName":"masutaka"},{"title":"knife-solo v0.5.0 から --forward-agent オプションが必要かも","content":"knife-solo v0.5.0 から &ndash;forward-agent オプションを付けないと、\nCook に失敗するケースがありました。\n例えばこのように指定します。\nbundle exec knife solo cook ci-docker\n↓\nbundle exec knife solo cook ci-docker &ndash;forward-agent\n変更があったのはこちらの PR\nhttps://github.com/matschaffer/knife-solo/pull/394 knife-solo では sudo が使われますが、v0.5.0 から &ndash;forward-agent\nオプションを付けた場合だけ -E オプションが付くように変更されました。\nsudo の -E オプションはこのようなものだそうです。\n-E, --preserve-env Indicates to the security policy that the user wishes to preserve their existing environment variables. The security policy may return an error if the user does not have permission to preserve the environment.","contentSnippet":"knife-solo v0.5.0 から –forward-agent オプションを付けないと、Cook に失敗するケースがありました。例えばこのように指定します。bundle exec knife solo cook ci-docker↓bundle exec knife solo cook ci-docker –forward-agent変更があったのはこちらの PRhttps://github.com/matschaffer/knife-solo/pull/394 knife-solo では sudo が使われますが、v0.5.0 から –forward-agentオプションを付けた場合だけ -E オプションが付くように変更されました。sudo の -E オプションはこのようなものだそうです。-E, --preserve-env Indicates to the security policy that the user wishes to preserve their existing environment variables. The security policy may return an error if the user does not have permission to preserve the environment.","link":"https://masutaka.net/2015-08-30-2/","isoDate":"2015-08-30T01:00:00.000Z","dateMiliSeconds":1440896400000,"authorName":"masutaka"},{"title":"サーバの CI を EC2 から Docker に変更したけどモヤモヤ","content":"サーバの CI ってどうするのが良いのでしょうね。現状やむを得ず行って\nいますが、やり過ぎ感も否めないです。\n[2014-09-14-1] に Wercker+Vagrant+EC2 の組み合わせでこのサーバの\nCI を始めてから、[2015-02-08-2] に CircleCI+Vagrant+EC2 に変更しま\nした。そして今回、CircleCI+Docker に変更しました。\n理由は EC2 を使うのは大げさだと思い始めたからです。CI 時間の短縮を\n期待しましたが、ほとんど変わりませんでした。結果的に、時々 EC2 イ\nンスタンスを起動するのに 30 分以上かかり、CircleCI のタイムアウト\n時間を超える問題は解決出来ましたが。\nDocker 入門できて自己満足は得られたのですが、Docker の使い方ではな\nいなあというのが正直な感想です。\nDocker を使ってサーバの CI をするためには、openssh-server をインス\nトールする必要があります。そもそも Docker は一度インスタンスを作っ\nたら変更を加えるべきではないため、Docker を起動してから knife-solo\nで変更を加えるのは誤った使い方です。\nこのブログのサーバ（さくらの VPS）には nginx や td-agent、\nelasticsearch などがごちゃごちゃと入ってますが、同じ環境を Docker\nで作るのもおかしな話です。Docker は 1 サーバ 1 責務だと思うので、\n例えば nginx だけをインストールする使い方が正しい気がします。\nそういう意味で無理して CI しているなあと、モヤモヤしているところです。\n修正内容はこちらです。末尾に解説を記載しました。\n ./script/bootstrap-docker.sh このスクリプトは CircleCI の dependencies.pre で実行されます。","contentSnippet":"サーバの CI ってどうするのが良いのでしょうね。現状やむを得ず行っていますが、やり過ぎ感も否めないです。[2014-09-14-1] に Wercker+Vagrant+EC2 の組み合わせでこのサーバのCI を始めてから、[2015-02-08-2] に CircleCI+Vagrant+EC2 に変更しました。そして今回、CircleCI+Docker に変更しました。理由は EC2 を使うのは大げさだと思い始めたからです。CI 時間の短縮を期待しましたが、ほとんど変わりませんでした。結果的に、時々 EC2 インスタンスを起動するのに 30 分以上かかり、CircleCI のタイムアウト時間を超える問題は解決出来ましたが。Docker 入門できて自己満足は得られたのですが、Docker の使い方ではないなあというのが正直な感想です。Docker を使ってサーバの CI をするためには、openssh-server をインストールする必要があります。そもそも Docker は一度インスタンスを作ったら変更を加えるべきではないため、Docker を起動してから knife-soloで変更を加えるのは誤った使い方です。このブログのサーバ（さくらの VPS）には nginx や td-agent、elasticsearch などがごちゃごちゃと入ってますが、同じ環境を Dockerで作るのもおかしな話です。Docker は 1 サーバ 1 責務だと思うので、例えば nginx だけをインストールする使い方が正しい気がします。そういう意味で無理して CI しているなあと、モヤモヤしているところです。修正内容はこちらです。末尾に解説を記載しました。 ./script/bootstrap-docker.sh このスクリプトは CircleCI の dependencies.pre で実行されます。","link":"https://masutaka.net/2015-08-30-1/","isoDate":"2015-08-30T00:00:00.000Z","dateMiliSeconds":1440892800000,"authorName":"masutaka"},{"title":"OpenID TechNight Vol.13 に行ってきた #openid #technight","content":"OpenID TechNight Vol.13 - ID連携入門 運良く会社枠で行くことが出来ました。業務的にど真ん中なのに\nOAuth1&amp;2 しか使ってなかったという。。。\n1. ID連携概要 by @nov   初心者向けセッションでした。GREE の方。\n弊社で言うと、新卒の営業が聞くとうれしい内容だったかも。\n ENTITY と IDENTITY  ENTITY は実体   IDENTITY PROFFING  本人確認   用語解説  IDP: Identity Provider  Facebook, Twitter,&hellip;   RP: Relying Party  Disqus とか     高度なセキュリティ対策  &ldquo;セキュリティ専任スタッフを100人以下しか雇えないようなサービスにパスワード預けるなんてバカげてる&rdquo;  Eric Sachs, Google     エンタープライズ分野では属性連携開始してからも、部署とかを更新し続けないといけないらしい  2. ID連携のあるとき～,ないとき～ #エンプラ編 by @paoneJP   エンタープライズで ID 連携するメリットのお話。オージス総研の方。","contentSnippet":"OpenID TechNight Vol.13 - ID連携入門 運良く会社枠で行くことが出来ました。業務的にど真ん中なのにOAuth1&2 しか使ってなかったという。。。1. ID連携概要 by @nov   初心者向けセッションでした。GREE の方。弊社で言うと、新卒の営業が聞くとうれしい内容だったかも。 ENTITY と IDENTITY  ENTITY は実体   IDENTITY PROFFING  本人確認   用語解説  IDP: Identity Provider  Facebook, Twitter,…   RP: Relying Party  Disqus とか     高度なセキュリティ対策  “セキュリティ専任スタッフを100人以下しか雇えないようなサービスにパスワード預けるなんてバカげてる”  Eric Sachs, Google     エンタープライズ分野では属性連携開始してからも、部署とかを更新し続けないといけないらしい  2. ID連携のあるとき～,ないとき～ #エンプラ編 by @paoneJP   エンタープライズで ID 連携するメリットのお話。オージス総研の方。","link":"https://masutaka.net/2015-08-27-1/","isoDate":"2015-08-27T00:00:00.000Z","dateMiliSeconds":1440633600000,"authorName":"masutaka"},{"title":"Ruby の定数や Object.freeze の理解が曖昧だったのでメモ","content":"◆定数には再代入可能（怒られるけど）。\nirb(main):001:0&gt; HOGE = &#39;abc&#39; =&gt; &#34;abc&#34; irb(main):002:0&gt; HOGE = &#39;xyz&#39; (irb):2: warning: already initialized constant HOGE (irb):1: warning: previous definition of HOGE was here =&gt; &#34;xyz&#34; irb(main):003:0&gt; HOGE =&gt; &#34;xyz&#34; ◆書き換えは普通にできる。怒られない。\n$ irb irb(main):001:0&gt; HOGE = &#39;abc&#39; =&gt; &#34;abc&#34; irb(main):002:0&gt; HOGE[0] = &#39;x&#39; =&gt; &#34;x&#34; irb(main):003:0&gt; HOGE =&gt; &#34;xbc&#34; ◆freeze すれば、書き換えできなくなる。\n$ irb irb(main):001:0&gt; HOGE = &#39;abc&#39;.freeze =&gt; &#34;abc&#34; irb(main):002:0&gt; HOGE[0] = &#39;x&#39; RuntimeError: can&#39;t modify frozen String from (irb):2:in `[]=&#39; from (irb):2 from /Users/masutaka/.","contentSnippet":"◆定数には再代入可能（怒られるけど）。irb(main):001:0> HOGE = 'abc' => \"abc\" irb(main):002:0> HOGE = 'xyz' (irb):2: warning: already initialized constant HOGE (irb):1: warning: previous definition of HOGE was here => \"xyz\" irb(main):003:0> HOGE => \"xyz\" ◆書き換えは普通にできる。怒られない。$ irb irb(main):001:0> HOGE = 'abc' => \"abc\" irb(main):002:0> HOGE[0] = 'x' => \"x\" irb(main):003:0> HOGE => \"xbc\" ◆freeze すれば、書き換えできなくなる。$ irb irb(main):001:0> HOGE = 'abc'.freeze => \"abc\" irb(main):002:0> HOGE[0] = 'x' RuntimeError: can't modify frozen String from (irb):2:in `[]=' from (irb):2 from /Users/masutaka/.","link":"https://masutaka.net/2015-07-29-1/","isoDate":"2015-07-29T00:00:00.000Z","dateMiliSeconds":1438128000000,"authorName":"masutaka"},{"title":"Emacs で URL encode するやつ","content":"(require &#39;url-util)  (url-hexify-string &#34;http://masutaka.net/&#34;) =&gt; &#34;http%3A%2F%2Fmasutaka.net%2F&#34;  (url-unhex-string &#34;http%3A%2F%2Fmasutaka.net%2F&#34;) =&gt; &#34;http://masutaka.net/&#34; ","contentSnippet":"(require 'url-util)  (url-hexify-string \"http://masutaka.net/\") => \"http%3A%2F%2Fmasutaka.net%2F\"  (url-unhex-string \"http%3A%2F%2Fmasutaka.net%2F\") => \"http://masutaka.net/\"","link":"https://masutaka.net/2015-07-28-2/","isoDate":"2015-07-28T01:00:00.000Z","dateMiliSeconds":1438045200000,"authorName":"masutaka"},{"title":"【保存版】自前で継続的 bundle update を導入する方法","content":"俺得な保存版記事です。設定するたびにやり方を思い出すのが面倒になり。\n1. CircleCI の設定 GitHub の Personal access tokens のページで token を作成し、\nCircleCI の Project Setting -&gt; Environment variables に\nGITHUB_ACCESS_TOKEN という名前で追加します。\nCircleCI の URL は以下になります。\nhttps://circleci.com/gh/{ユーザ名}/{リポジトリ名}/edit#env-vars\n2. circle.yml の変更 このように circle.yml の deployment section を変更します。\nhttps://github.com/masutaka/masutaka-29hours/commit/0ba9ef03348568baaa5cf271d4f6e41305f8fdfe 環境変数 BUNDLE_UPDATE が指定されていたら、\ncircleci-bundle-update-pr gem をインストールして、同コマンドを実行\nしています。この環境変数は後述するトリガーが設定してきます。\ncircleci-bundle-update-pr コマンドでは以下が実行されます。\n bundle update を実行する Gemfile.lock に差分があれば、git commit し、GitHub のリモートブランチに git push する GitHub の Pull Request を作成する アップデートした Gem の差分へのリンクをコメントとして POST する  bundler もアップデートしているのは、1.","contentSnippet":"俺得な保存版記事です。設定するたびにやり方を思い出すのが面倒になり。1. CircleCI の設定 GitHub の Personal access tokens のページで token を作成し、CircleCI の Project Setting -> Environment variables にGITHUB_ACCESS_TOKEN という名前で追加します。CircleCI の URL は以下になります。https://circleci.com/gh/{ユーザ名}/{リポジトリ名}/edit#env-vars2. circle.yml の変更 このように circle.yml の deployment section を変更します。https://github.com/masutaka/masutaka-29hours/commit/0ba9ef03348568baaa5cf271d4f6e41305f8fdfe 環境変数 BUNDLE_UPDATE が指定されていたら、circleci-bundle-update-pr gem をインストールして、同コマンドを実行しています。この環境変数は後述するトリガーが設定してきます。circleci-bundle-update-pr コマンドでは以下が実行されます。 bundle update を実行する Gemfile.lock に差分があれば、git commit し、GitHub のリモートブランチに git push する GitHub の Pull Request を作成する アップデートした Gem の差分へのリンクをコメントとして POST する  bundler もアップデートしているのは、1.","link":"https://masutaka.net/2015-07-28-1/","isoDate":"2015-07-28T00:00:00.000Z","dateMiliSeconds":1438041600000,"authorName":"masutaka"},{"title":"Chef で nginx の reload が出来なくなっていたので対策した","content":"Ubuntu 14.04 LTS + nginx 1.9.3 の環境で、knife solo 経由での nginx\nreload が出来なくなっていました（Chef のバージョンは 12.4.1）。\nサーバの CI では nginx start のみが実行され、nginx restart は実行\nされないため、気づけなかったようです。\nレシピは至って普通。\nservice &#39;nginx&#39; do action [:enable, :start] supports status: true, restart: true, reload: true end template &#39;/etc/nginx/sites-available/masutaka.net&#39; do notifies :reload, &#39;service[nginx]&#39; end /var/chef/cache/chef-stacktrace.out にはこんなエラーが。\nGenerated at 2015-07-26 01:10:55 +0900 ---- Begin output of /sbin/reload nginx ---- STDOUT: STDERR: reload: Job is not running: nginx ---- End output of /sbin/reload nginx ---- Ran /sbin/reload nginx returned 1 実際、そうなりました。よく分かりません。","contentSnippet":"Ubuntu 14.04 LTS + nginx 1.9.3 の環境で、knife solo 経由での nginxreload が出来なくなっていました（Chef のバージョンは 12.4.1）。サーバの CI では nginx start のみが実行され、nginx restart は実行されないため、気づけなかったようです。レシピは至って普通。service 'nginx' do action [:enable, :start] supports status: true, restart: true, reload: true end template '/etc/nginx/sites-available/masutaka.net' do notifies :reload, 'service[nginx]' end /var/chef/cache/chef-stacktrace.out にはこんなエラーが。Generated at 2015-07-26 01:10:55 +0900 ---- Begin output of /sbin/reload nginx ---- STDOUT: STDERR: reload: Job is not running: nginx ---- End output of /sbin/reload nginx ---- Ran /sbin/reload nginx returned 1 実際、そうなりました。よく分かりません。","link":"https://masutaka.net/2015-07-26-1/","isoDate":"2015-07-26T00:00:00.000Z","dateMiliSeconds":1437868800000,"authorName":"masutaka"},{"title":"29hours を Heroku からさくらの VPS に引っ越した","content":"Heroku の料金体系が変わり 、24 時間動かし続けるためには課金()が必要\nになりました。Traditional dyno はそのうち使えなくなるそうです。\n昨日のアルコールが少し残る今日の午後、なんとなくやる気になったので、\n[2013-04-14-2] から Heroku で動かしていた 29hours をさくらの VPS\nに引越しました。このブログと同じサーバです。\n※ サービス料を支払いたくないわけではないです。年間 ￥16,745 支払っ\nているさくらの VPS があるのにもったいないと思い。\nHeroku の時は https://github.com/june29/29hours を変更せずに git\npush すればデプロイできました。でもさくらの VPS には当然そんな機能\nはないため、またまた Capistrano で頑張りました。つらい。\n作ったリポジトリがこちらです。\n  https://github.com/june29/29hours を git submodule として追加した\nため、デプロイを少々工夫する必要がありました。\n  submodule を clone するために capistrano-git-submodule-strategy\nを使った   一階層下のディレクトリで bundle install するために\ncapistrano-bundler の設定を変更した   settings.yml を Dropbox から取得した。CircleCI のビルドが公開さ\nれているため 、URL がバレないように Capistrano の capture を使った   デプロイ時に 29hours を再起動するための cap task を書いた   29hours は Procfile を持っているので、最後の cap task で foreman を使う方法も考えましたが、foreman の良さげなインストール場所を思い","contentSnippet":"Heroku の料金体系が変わり 、24 時間動かし続けるためには課金()が必要になりました。Traditional dyno はそのうち使えなくなるそうです。昨日のアルコールが少し残る今日の午後、なんとなくやる気になったので、[2013-04-14-2] から Heroku で動かしていた 29hours をさくらの VPSに引越しました。このブログと同じサーバです。※ サービス料を支払いたくないわけではないです。年間 ￥16,745 支払っているさくらの VPS があるのにもったいないと思い。Heroku の時は https://github.com/june29/29hours を変更せずに gitpush すればデプロイできました。でもさくらの VPS には当然そんな機能はないため、またまた Capistrano で頑張りました。つらい。作ったリポジトリがこちらです。  https://github.com/june29/29hours を git submodule として追加したため、デプロイを少々工夫する必要がありました。  submodule を clone するために capistrano-git-submodule-strategyを使った   一階層下のディレクトリで bundle install するためにcapistrano-bundler の設定を変更した   settings.yml を Dropbox から取得した。CircleCI のビルドが公開されているため 、URL がバレないように Capistrano の capture を使った   デプロイ時に 29hours を再起動するための cap task を書いた   29hours は Procfile を持っているので、最後の cap task で foreman を使う方法も考えましたが、foreman の良さげなインストール場所を思い","link":"https://masutaka.net/2015-07-25-1/","isoDate":"2015-07-25T00:00:00.000Z","dateMiliSeconds":1437782400000,"authorName":"masutaka"},{"title":"helm-bundle-show.elからRubyGems.orgのページに飛べるようにした","content":"[2015-04-13-1] の機能追加。\n絞り込んでからの  キーで、RubyGems.org のページに飛べるように\nしました（下記デモ画像中 [f4] ）。例えば https://rubygems.org/gems/rails です。\nURL をコピーするだけも可能です（下記デモ画像中 [f5] ）。","contentSnippet":"[2015-04-13-1] の機能追加。絞り込んでからの  キーで、RubyGems.org のページに飛べるようにしました（下記デモ画像中 [f4] ）。例えば https://rubygems.org/gems/rails です。URL をコピーするだけも可能です（下記デモ画像中 [f5] ）。","link":"https://masutaka.net/2015-07-13-1/","isoDate":"2015-07-13T00:00:00.000Z","dateMiliSeconds":1436745600000,"authorName":"masutaka"},{"title":"AWSリザーブドインスタンス購入時の注意まとめ","content":"自戒を込めて&hellip;。\nEC2  http://aws.amazon.com/jp/ec2/purchasing-options/reserved-instances/getting-started/  Modifying a Reserved Instance  You can request to move your Reserved Instance to another Availability Zone within the same region, change its Network Platform, or, for Linux/UNIX RIs, modify the instance size of your reservation to another size of the same instance type at no additional cost. (Certain conditions apply.)\nSell Reserved Instances on the AWS Reserved Instance Marketplace  The Reserved Instance Marketplace provides you with the opportunity to sell Reserved Instances if your needs change (i.","contentSnippet":"自戒を込めて…。EC2  http://aws.amazon.com/jp/ec2/purchasing-options/reserved-instances/getting-started/  Modifying a Reserved Instance  You can request to move your Reserved Instance to another Availability Zone within the same region, change its Network Platform, or, for Linux/UNIX RIs, modify the instance size of your reservation to another size of the same instance type at no additional cost. (Certain conditions apply.)Sell Reserved Instances on the AWS Reserved Instance Marketplace  The Reserved Instance Marketplace provides you with the opportunity to sell Reserved Instances if your needs change (i.","link":"https://masutaka.net/2015-07-08-1/","isoDate":"2015-07-08T00:00:00.000Z","dateMiliSeconds":1436313600000,"authorName":"masutaka"},{"title":"ドッグフーディングを始めてみた","content":"赤枠がソーシャルPLUS のコメントウィジェット。全然違和感がない。\n今までその下にある Zenback の Facebook コメントフォームを有効にし\nてましたが、使われませんし飽きてきました。ちなみにその前は DISQUS で[2010-05-03-1] 、その前はくっつきBBS でした[2008-09-29-1] 。\nまだ Twitter ログインにしか対応していませんが、これから各種ソーシャ\nルログインに対応していくかも？\n本当はメイン機能であるログインと繋ぎ込みをしたり、他のウィジェット\n（アクションボタン、シェアウィジェット、プロバイダーボタンバー、ア\nクティビティウィジェット等）もフルで使いたかったのですが、このブロ\nグが静的サイトということもあり面倒になって止めました。","contentSnippet":"赤枠がソーシャルPLUS のコメントウィジェット。全然違和感がない。今までその下にある Zenback の Facebook コメントフォームを有効にしてましたが、使われませんし飽きてきました。ちなみにその前は DISQUS で[2010-05-03-1] 、その前はくっつきBBS でした[2008-09-29-1] 。まだ Twitter ログインにしか対応していませんが、これから各種ソーシャルログインに対応していくかも？本当はメイン機能であるログインと繋ぎ込みをしたり、他のウィジェット（アクションボタン、シェアウィジェット、プロバイダーボタンバー、アクティビティウィジェット等）もフルで使いたかったのですが、このブログが静的サイトということもあり面倒になって止めました。","link":"https://masutaka.net/2015-07-02-1/","isoDate":"2015-07-02T00:00:00.000Z","dateMiliSeconds":1435795200000,"authorName":"masutaka"},{"title":"自前でufwのレシピとserverspecのテストを書いた","content":"ufw = Uncomplicated FireWall です。\nレシピはこんなのを作りました。opscode のレシピとか使うと、何設定し\nているか分からず結局全部読むことになるので自前で書いてます。\nexecute &#39;ufw reload&#39; do action :nothing end execute &#39;ufw default deny&#39; do not_if &#39;ufw status verbose | fgrep &#34;Default: deny (incoming)&#34;&#39; notifies :run, &#39;execute[ufw reload]&#39; end execute &#39;ufw allow http&#39; do not_if &#39;ufw status | egrep &#34;^80 +ALLOW&#34;&#39; notifies :run, &#39;execute[ufw reload]&#39; end execute &#39;ufw allow ssh&#39; do not_if &#39;ufw status | egrep &#34;^22 +ALLOW&#34;&#39; notifies :run, &#39;execute[ufw reload]&#39; end execute &#39;ufw enable&#39; do command &#39;yes | ufw enable&#39; not_if &#39;ufw status | fgrep &#34;Status: active&#34;&#39; end serverspec はだいたいこんな感じです。","contentSnippet":"ufw = Uncomplicated FireWall です。レシピはこんなのを作りました。opscode のレシピとか使うと、何設定しているか分からず結局全部読むことになるので自前で書いてます。execute 'ufw reload' do action :nothing end execute 'ufw default deny' do not_if 'ufw status verbose | fgrep \"Default: deny (incoming)\"' notifies :run, 'execute[ufw reload]' end execute 'ufw allow http' do not_if 'ufw status | egrep \"^80 +ALLOW\"' notifies :run, 'execute[ufw reload]' end execute 'ufw allow ssh' do not_if 'ufw status | egrep \"^22 +ALLOW\"' notifies :run, 'execute[ufw reload]' end execute 'ufw enable' do command 'yes | ufw enable' not_if 'ufw status | fgrep \"Status: active\"' end serverspec はだいたいこんな感じです。","link":"https://masutaka.net/2015-06-29-1/","isoDate":"2015-06-29T00:00:00.000Z","dateMiliSeconds":1435536000000,"authorName":"masutaka"},{"title":"El-Get を多少理解できた気がする","content":"Cask から El-Get に移行したのが先月。\n（ちなみに Homebrew の Cask は Emacs の Cask を参考にしたらしいです。）\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  el-get-update とかで頻繁にエラーになるので、調べ始めて文句を言って\nいるところ（愚かな奴めw）。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結果、ようやく El-Get を理解できた気がする。","contentSnippet":"Cask から El-Get に移行したのが先月。（ちなみに Homebrew の Cask は Emacs の Cask を参考にしたらしいです。）loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  el-get-update とかで頻繁にエラーになるので、調べ始めて文句を言っているところ（愚かな奴めw）。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結果、ようやく El-Get を理解できた気がする。","link":"https://masutaka.net/2015-06-17-1/","isoDate":"2015-06-17T00:00:00.000Z","dateMiliSeconds":1434499200000,"authorName":"masutaka"},{"title":"AWS Summit Tokyo 2015 に行ってきた #AWSSummit","content":"去年 [2014-07-19-1] に引き続き、AWS Summit Tokyo に行って参りました。今年も 2 日目だけ。\n今年は開発者向けの「デベロッパーカンファレンス（DevCon）」がメインセッションとは別にあったので、主にそっちを聴いてました。\n全てのセッションの動画や資料はこちらをどうぞ。\nAWS Summit Tokyo 2015 開催レポート｜AWS Day2 キーノート   資料ダウンロード AWS のサービスや事例の紹介。モバイルや IoT 時代に向けて、脱 EC2 を意識した話が多かった気が。\n昼休み 炭水化物は十分だったけど量が少なかった。売店とかないのでこれで凌ぐしかない感じだった。\nAmazon Machine Learning のセッション を聴きながら食べようかと思いましたが、人多杉で断念。実践 GitHub Flow の同時上映の会場が空いていたのでそこで。レシーバーを借り忘れたので、音声なしで。\n開発生産性を上げるためのデプロイ戦略  吉羽 龍太郎（アマゾン データ サービス ジャパン株式会社 プロフェッショナルサービス本部 部長）\n資料ダウンロード デプロイに何時間もかかって困っている方向けのセッションだったので、ちょっと選択を誤った。ただ、吉羽さんの話を聴くのは初めてだったので、それはそれで良かった。\n会場内に１時間以内にデプロイ出来る人少なかった。\nクロスファンクショナルチームを意識する。メンバーごとのスキルセットのマトリクス作るのは良いかも。HTML5 とか Rails とか fluentd とか。\nデプロイツールのデプロイ問題の話もあった。\n開発者のローカル環境からデプロイすると、最新の master ブランチでなかったりして、デプロイツールのバージョンが古いことがある。やはり、CI ツールからデプロイするのが現在のベストプラクティスっぽい。穴あけるのが面倒だなあ&hellip;。\nなぜクックパッドは開発しやすいのか  成田 一生（クックパッド株式会社 インフラストラクチャー部 部長）\n  chanko がロールごとの機能の ON/OFF する Gem だったのね。クックパッドのスタッフだけに先行してリリースするとか。","contentSnippet":"去年 [2014-07-19-1] に引き続き、AWS Summit Tokyo に行って参りました。今年も 2 日目だけ。今年は開発者向けの「デベロッパーカンファレンス（DevCon）」がメインセッションとは別にあったので、主にそっちを聴いてました。全てのセッションの動画や資料はこちらをどうぞ。AWS Summit Tokyo 2015 開催レポート｜AWS Day2 キーノート   資料ダウンロード AWS のサービスや事例の紹介。モバイルや IoT 時代に向けて、脱 EC2 を意識した話が多かった気が。昼休み 炭水化物は十分だったけど量が少なかった。売店とかないのでこれで凌ぐしかない感じだった。Amazon Machine Learning のセッション を聴きながら食べようかと思いましたが、人多杉で断念。実践 GitHub Flow の同時上映の会場が空いていたのでそこで。レシーバーを借り忘れたので、音声なしで。開発生産性を上げるためのデプロイ戦略  吉羽 龍太郎（アマゾン データ サービス ジャパン株式会社 プロフェッショナルサービス本部 部長）資料ダウンロード デプロイに何時間もかかって困っている方向けのセッションだったので、ちょっと選択を誤った。ただ、吉羽さんの話を聴くのは初めてだったので、それはそれで良かった。会場内に１時間以内にデプロイ出来る人少なかった。クロスファンクショナルチームを意識する。メンバーごとのスキルセットのマトリクス作るのは良いかも。HTML5 とか Rails とか fluentd とか。デプロイツールのデプロイ問題の話もあった。開発者のローカル環境からデプロイすると、最新の master ブランチでなかったりして、デプロイツールのバージョンが古いことがある。やはり、CI ツールからデプロイするのが現在のベストプラクティスっぽい。穴あけるのが面倒だなあ…。なぜクックパッドは開発しやすいのか  成田 一生（クックパッド株式会社 インフラストラクチャー部 部長）  chanko がロールごとの機能の ON/OFF する Gem だったのね。クックパッドのスタッフだけに先行してリリースするとか。","link":"https://masutaka.net/2015-06-07-1/","isoDate":"2015-06-07T00:00:00.000Z","dateMiliSeconds":1433635200000,"authorName":"masutaka"},{"title":"『ブレイブリーセカンド』は想像の斜め上を行くRPGだった。オススメ（ネタバレなし）","content":"前作のブレイブリーデフォルトがかなり良かった [2013-12-30-2] ので、\n4ヶ月も前から予約して、昨日ようやくクリアしました。\nいろいろあって、103時間もかけてしまいましたが、後悔はしていない&hellip;。\n本作はブレイブリーシリーズの二作目にあたります。\n一作目が『ブレイブリーデフォルト フライングフェアリー 』で、その改\n良版が『ブレイブリーデフォルト フォーザ・シークウェル 』になります。\n分かりづらいので注意。\nブレイブリーシリーズが初めての方は、\n 『ブレイブリーデフォルト フォーザ・シークウェル 』 『ブレイブリーセカンド 』\nの順にプレイすると、よろしいかと思います。  システムは今回も改良されています。例えばブレイブやデフォルトの重ね\nがけが十字キーで簡単に入力できるようになってました。便利。\nジョブはメインシナリオにおいては、今までの使い回しは「すっぴん」を\n除きひとつもなく、新たに作られたものだけ。新ジョブはクセがあるもの\nばかりでしたが、魔法系のジョブは新しいほうを使うことが多かったかな。\n意外なジョブが終盤役に立ったり&hellip;。\nストーリーは以下のとおり。プレイ中「マジか！」と声が出ることが何度\nもありました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ダンジョンは前作と比べて立体的で複雑になりましたが、サブシナリオは\n前作の使い回しが多く、ゲップが出たのは残念なところ。\nとは言え、製作者の方はそれこそ四六時中ブレイブリーセカンドのことを\n考えていたんだろうなあと感じる箇所が多々あり、心地よくプレイ出来ま\nした。実際、プロデューサーの浅野智也氏は髪を 1 年間切れていなかった とのことｗ\nサントラも買いました。いつもはクリアーしてから買いますが、今回は待\nちきれず発売日とほぼ同時に iTunes で。ネタバレ感があるので注意です。\n そういうわけで超オススメな RPG です！\n 前作は先にプレイしたほうが良いです！\n ","contentSnippet":"前作のブレイブリーデフォルトがかなり良かった [2013-12-30-2] ので、4ヶ月も前から予約して、昨日ようやくクリアしました。いろいろあって、103時間もかけてしまいましたが、後悔はしていない…。本作はブレイブリーシリーズの二作目にあたります。一作目が『ブレイブリーデフォルト フライングフェアリー 』で、その改良版が『ブレイブリーデフォルト フォーザ・シークウェル 』になります。分かりづらいので注意。ブレイブリーシリーズが初めての方は、 『ブレイブリーデフォルト フォーザ・シークウェル 』 『ブレイブリーセカンド 』の順にプレイすると、よろしいかと思います。  システムは今回も改良されています。例えばブレイブやデフォルトの重ねがけが十字キーで簡単に入力できるようになってました。便利。ジョブはメインシナリオにおいては、今までの使い回しは「すっぴん」を除きひとつもなく、新たに作られたものだけ。新ジョブはクセがあるものばかりでしたが、魔法系のジョブは新しいほうを使うことが多かったかな。意外なジョブが終盤役に立ったり…。ストーリーは以下のとおり。プレイ中「マジか！」と声が出ることが何度もありました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ダンジョンは前作と比べて立体的で複雑になりましたが、サブシナリオは前作の使い回しが多く、ゲップが出たのは残念なところ。とは言え、製作者の方はそれこそ四六時中ブレイブリーセカンドのことを考えていたんだろうなあと感じる箇所が多々あり、心地よくプレイ出来ました。実際、プロデューサーの浅野智也氏は髪を 1 年間切れていなかった とのことｗサントラも買いました。いつもはクリアーしてから買いますが、今回は待ちきれず発売日とほぼ同時に iTunes で。ネタバレ感があるので注意です。 そういうわけで超オススメな RPG です！ 前作は先にプレイしたほうが良いです！","link":"https://masutaka.net/2015-05-23-1/","isoDate":"2015-05-23T00:00:00.000Z","dateMiliSeconds":1432339200000,"authorName":"masutaka"},{"title":"6年ぶりにこのブログをリニューアルした","content":"多分、[2009-02-21-1] 以来。\nいやあ、ずっとデザインは直さなくちゃと思ってたんですよ。しかし、\nまさかこのGWに直すことになるとは。\n今まではtdiary のkaeruテーマを使わせて頂いていました。分からないな\nりに継ぎ足していったところ、スマホ時代に反したデザインになっている\nと自覚。味があったといえばありましたが。\nそこでGWの初めにたつをさんの記事 を見ながらスマホ対応をしたんですが、\n元がアレなのでサイドバーを引っ込めるくらいしか出来ず。\nGWも終盤の昨日の午後、天からイベントが降ってきたので、一気にリニュー\nアルしてしまいました。うん、12時間くらい。\nPagerやPaginationは分かりやすくしたつもり。どうでしょう？\nテーマは、みんな大好きBootstrapをベースにいい感じのテーマが集まっ\nている https://bootswatch.com/ のYeti を使わせて頂きました。\n時間がかかったのは、ある程度形にするまでと、カテゴリページの\nPaginationをいい感じにするため、chalowのソース に修正を入れたところ。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  chalowのソースをいじるのは今回が初めてではありませんが、Perlは未だ\nに分かりません。。\nもう一つは、使うべきcssがよく分からなかったこと。\nというのも、初めは各テーマのソースを参考にしていたので、\nhttps://github.com/thomaspark/bootswatch をgit cloneして実装を進め\nていました。\n&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt; &lt;link rel=&#34;stylesheet&#34; href=&#34;/bootswatch/yeti/bootstrap.min.css&#34; media=&#34;screen&#34;&gt; &lt;link rel=&#34;stylesheet&#34; href=&#34;/bootswatch/assets/css/bootswatch.min.css&#34;&gt; いざ調べてみたらこれで良いっぽい。しかしデザインが変わる。。\n&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt; &lt;link href=&#34;//netdna.bootstrapcdn.com/bootswatch/3.3.4/yeti/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;&gt; https://bootswatch.com/ は彼ら自身のデザインをカスタマイズしていた","contentSnippet":"多分、[2009-02-21-1] 以来。いやあ、ずっとデザインは直さなくちゃと思ってたんですよ。しかし、まさかこのGWに直すことになるとは。今まではtdiary のkaeruテーマを使わせて頂いていました。分からないなりに継ぎ足していったところ、スマホ時代に反したデザインになっていると自覚。味があったといえばありましたが。そこでGWの初めにたつをさんの記事 を見ながらスマホ対応をしたんですが、元がアレなのでサイドバーを引っ込めるくらいしか出来ず。GWも終盤の昨日の午後、天からイベントが降ってきたので、一気にリニューアルしてしまいました。うん、12時間くらい。PagerやPaginationは分かりやすくしたつもり。どうでしょう？テーマは、みんな大好きBootstrapをベースにいい感じのテーマが集まっている https://bootswatch.com/ のYeti を使わせて頂きました。時間がかかったのは、ある程度形にするまでと、カテゴリページのPaginationをいい感じにするため、chalowのソース に修正を入れたところ。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  chalowのソースをいじるのは今回が初めてではありませんが、Perlは未だに分かりません。。もう一つは、使うべきcssがよく分からなかったこと。というのも、初めは各テーマのソースを参考にしていたので、https://github.com/thomaspark/bootswatch をgit cloneして実装を進めていました。<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"/bootswatch/yeti/bootstrap.min.css\" media=\"screen\"> <link rel=\"stylesheet\" href=\"/bootswatch/assets/css/bootswatch.min.css\"> いざ調べてみたらこれで良いっぽい。しかしデザインが変わる。。<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link href=\"//netdna.bootstrapcdn.com/bootswatch/3.3.4/yeti/bootstrap.min.css\" rel=\"stylesheet\"> https://bootswatch.com/ は彼ら自身のデザインをカスタマイズしていた","link":"https://masutaka.net/2015-05-06-1/","isoDate":"2015-05-06T00:00:00.000Z","dateMiliSeconds":1430870400000,"authorName":"masutaka"},{"title":"LINE DEVELOPER DAY_2015 Tokyoに行ってきた #linedevday","content":"イベントがあったのが火曜日(4/28)で今日が土曜日(5/2)。寝かせすぎて\n発酵するところでした。\nLINE DEVELOPER DAY_2015 Tokyo 社内のSlackで知り、ノリで応募したら当選してしまいました。社内で4人\n応募して全員当選していたので、早い順だったんですかね！？しかし、実\n際に行った(もしくは行けた)のは私だけだったという。。\n会場に入ってまず思ったのが、寒い！\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ハッシュタグにもなっていたようで。 お金がかかっておるとも感じました。会場の設備は安っぽくなくて、机や\n椅子のキャパシティも十分。ドリンクは飲み放題、クッキーも自由、LINE\nグッズのおみやげあり(荷物になるので個人的には不要だったが)。ランチ\nの軽食と懇親会(行かなかった)も無料。リクルーティング目的というのも\n頷けます。\n午前中は4月にCEOになった出澤さんや、CTOの朴さんによる、LINEの概要\nや文化のお話でした。午後は会場が2つに別れ、より掘り下げたセッショ\nンが始まりました。\n以下は午前中のメモ。\n途中、画像へのリンクは\nLINEが開発体制、グローバル対応の秘策、サービス基盤の変遷を解説 - ケータイ Watch を使わせて頂きました。むしろこちらを見たほうが良いかと。\nA-1 オープニング 代表取締役社長 CEO 出澤 剛  A-2 LINE Global Culture by 上級執行役員 CTO 朴イビン   開発者が国をまたいでプロジェクトを立ち上げる。跨がない場合もある リモートコラボレーション Trust and Respect マネージャーの役割は働きやすい環境を作ることだけ。評価は他のエンジニアから  A-3 LINE Messenger for the World by 上級執行役員 サービス開発担当 池邉智洋   エンジニアがLINE遠征隊として、実際に現地に赴く 現地の人と同じプリペイド携帯を手に入れるところから始める エスカレーターを上下したり、地下鉄や飛行機とかの移動中のテストをしたり 日本は回線が太いので、あまり対策はしていないそう 回線が細い地域は画像のサイズを小さくするなど、パフォーマンスチューニングしている あとは、ユーザーがメッセージを送ろうかなとする前に、データをサーバに送ってUXを向上させるとか  A-4 LINE Platform Development Chronicle by Tom.","contentSnippet":"イベントがあったのが火曜日(4/28)で今日が土曜日(5/2)。寝かせすぎて発酵するところでした。LINE DEVELOPER DAY_2015 Tokyo 社内のSlackで知り、ノリで応募したら当選してしまいました。社内で4人応募して全員当選していたので、早い順だったんですかね！？しかし、実際に行った(もしくは行けた)のは私だけだったという。。会場に入ってまず思ったのが、寒い！loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ハッシュタグにもなっていたようで。 お金がかかっておるとも感じました。会場の設備は安っぽくなくて、机や椅子のキャパシティも十分。ドリンクは飲み放題、クッキーも自由、LINEグッズのおみやげあり(荷物になるので個人的には不要だったが)。ランチの軽食と懇親会(行かなかった)も無料。リクルーティング目的というのも頷けます。午前中は4月にCEOになった出澤さんや、CTOの朴さんによる、LINEの概要や文化のお話でした。午後は会場が2つに別れ、より掘り下げたセッションが始まりました。以下は午前中のメモ。途中、画像へのリンクはLINEが開発体制、グローバル対応の秘策、サービス基盤の変遷を解説 - ケータイ Watch を使わせて頂きました。むしろこちらを見たほうが良いかと。A-1 オープニング 代表取締役社長 CEO 出澤 剛  A-2 LINE Global Culture by 上級執行役員 CTO 朴イビン   開発者が国をまたいでプロジェクトを立ち上げる。跨がない場合もある リモートコラボレーション Trust and Respect マネージャーの役割は働きやすい環境を作ることだけ。評価は他のエンジニアから  A-3 LINE Messenger for the World by 上級執行役員 サービス開発担当 池邉智洋   エンジニアがLINE遠征隊として、実際に現地に赴く 現地の人と同じプリペイド携帯を手に入れるところから始める エスカレーターを上下したり、地下鉄や飛行機とかの移動中のテストをしたり 日本は回線が太いので、あまり対策はしていないそう 回線が細い地域は画像のサイズを小さくするなど、パフォーマンスチューニングしている あとは、ユーザーがメッセージを送ろうかなとする前に、データをサーバに送ってUXを向上させるとか  A-4 LINE Platform Development Chronicle by Tom.","link":"https://masutaka.net/2015-05-02-1/","isoDate":"2015-05-02T00:00:00.000Z","dateMiliSeconds":1430524800000,"authorName":"masutaka"},{"title":"helm-hatena-bookmark.elに神対応を入れた","content":"はてブを使っているEmacsユーザに朗報です！\n今まで~/.hatenabookmarkを作るために\nhttp://coderepos.org/share/browser/lang/shellscript/misc/anything-hatena-bookmark-get-dump を手動実行したりcrontabに登録する必要がありましたが、この度不要に\nなりました。\n~/.emacs.d/init.elに以下の設定をするだけで~/.hatenabookmarkを自動\n更新してくれます。デフォルトでは1時間に1回更新します。\n(setq helm-hatena-bookmark:username &#34;Your Hatena Account&#34;) (helm-hatena-bookmark:initialize) 使用方法は今までどおりM-x helm-hatena-bookmarkです。私は⌘-bに割り\n当てています。\n(define-key global-map (kbd &#34;s-b&#34;) &#39;helm-hatena-bookmark) すでにMELPAにもリリースされているので、M-x package-install\nhelm-hatena-bookmarkでインストールできます。\nあと、これとは別にコマンド実行したらすぐ一覧を出す ようにしました。\n今まで不便だと感じつつ使っていて、あ、自分が作ったツールだから直せ\nばいいのか！と気づきましたw\nあまりユーザはいないようなので、カスタマイズ可能にはせず、ばっさり\n切り捨てました。必要なら変更しますのでIssueやPull requestなどお願\nいします。\n  ~/.hatenabookmarkの作成は今までのシェルスクリプトとほぼ同じです。\n内部でcurlをstart-processで非同期実行し、sentinelで終了通知が来た\nらGNU sedで置換しています。高速化のために外部コマンドを使うことに\nしました。\n私のはてブ数6030の場合、curlが約30秒、sedが約0.5秒でした。sedでの\ncall-process-regionが速いのが意外でした。curlは非同期で動くので、\n60秒とかに増えても気にならないと思います。\nsedの特殊な文法を使っているので、OSXのsedでは使えません(見つからな\nいと(helm-hatena-bookmark:initialize)がエラーで止まります)。\nbrew等でGNU sedをインストールしてください。\n $ brew install gnu-sed\n 良い実装が出来て満足。","contentSnippet":"はてブを使っているEmacsユーザに朗報です！今まで~/.hatenabookmarkを作るためにhttp://coderepos.org/share/browser/lang/shellscript/misc/anything-hatena-bookmark-get-dump を手動実行したりcrontabに登録する必要がありましたが、この度不要になりました。~/.emacs.d/init.elに以下の設定をするだけで~/.hatenabookmarkを自動更新してくれます。デフォルトでは1時間に1回更新します。(setq helm-hatena-bookmark:username \"Your Hatena Account\") (helm-hatena-bookmark:initialize) 使用方法は今までどおりM-x helm-hatena-bookmarkです。私は⌘-bに割り当てています。(define-key global-map (kbd \"s-b\") 'helm-hatena-bookmark) すでにMELPAにもリリースされているので、M-x package-installhelm-hatena-bookmarkでインストールできます。あと、これとは別にコマンド実行したらすぐ一覧を出す ようにしました。今まで不便だと感じつつ使っていて、あ、自分が作ったツールだから直せばいいのか！と気づきましたwあまりユーザはいないようなので、カスタマイズ可能にはせず、ばっさり切り捨てました。必要なら変更しますのでIssueやPull requestなどお願いします。  ~/.hatenabookmarkの作成は今までのシェルスクリプトとほぼ同じです。内部でcurlをstart-processで非同期実行し、sentinelで終了通知が来たらGNU sedで置換しています。高速化のために外部コマンドを使うことにしました。私のはてブ数6030の場合、curlが約30秒、sedが約0.5秒でした。sedでのcall-process-regionが速いのが意外でした。curlは非同期で動くので、60秒とかに増えても気にならないと思います。sedの特殊な文法を使っているので、OSXのsedでは使えません(見つからないと(helm-hatena-bookmark:initialize)がエラーで止まります)。brew等でGNU sedをインストールしてください。 $ brew install gnu-sed 良い実装が出来て満足。","link":"https://masutaka.net/2015-04-19-1/","isoDate":"2015-04-19T00:00:00.000Z","dateMiliSeconds":1429401600000,"authorName":"masutaka"},{"title":"helm-bundle-show.elを作ったら、またEmacsから離れられなくなった","content":"bundleしてるgemにcdする。pecoで絞り込みつつ - Qiita Emacsでも同じことがやりたかったので、helm-bundle-show.elを作りまし\nた。絶対誰か作っているだろ！と思って探したけどありませんでした。\n  MELPAにも取り込まれた ので、M-x package-install helm-bundle-showで\nインストールできます。\n私は &ldquo;C-x y&rdquo; に割り当てました。便利！\n(define-key ctl-x-map (kbd &#34;y&#34;) &#39;helm-bundle-show) パッケージ名をhelm-bundlerにするか、helm-bundle-showにするか悩みま\nした。helm-bundlerだと責務が大きくなりそうなので、helm-bundle-show\nにしました。\nちなみにzshの関数はこんなのを作りました。awkでprint以外使ったの初\nめてかも。\nfunction peco_bundle_show() { local selected_dir=$(bundle show | awk &#39;NR&gt;1 {print $2}&#39; | peco | xargs bundle show) if [ -n &#34;$selected_dir&#34; ]; then BUFFER=&#34;cd ${selected_dir}&#34; zle accept-line fi zle clear-screen } zle -N peco_bundle_show bindkey &#39;^xy&#39; peco_bundle_show ","contentSnippet":"bundleしてるgemにcdする。pecoで絞り込みつつ - Qiita Emacsでも同じことがやりたかったので、helm-bundle-show.elを作りました。絶対誰か作っているだろ！と思って探したけどありませんでした。  MELPAにも取り込まれた ので、M-x package-install helm-bundle-showでインストールできます。私は “C-x y” に割り当てました。便利！(define-key ctl-x-map (kbd \"y\") 'helm-bundle-show) パッケージ名をhelm-bundlerにするか、helm-bundle-showにするか悩みました。helm-bundlerだと責務が大きくなりそうなので、helm-bundle-showにしました。ちなみにzshの関数はこんなのを作りました。awkでprint以外使ったの初めてかも。function peco_bundle_show() { local selected_dir=$(bundle show | awk 'NR>1 {print $2}' | peco | xargs bundle show) if [ -n \"$selected_dir\" ]; then BUFFER=\"cd ${selected_dir}\" zle accept-line fi zle clear-screen } zle -N peco_bundle_show bindkey '^xy' peco_bundle_show","link":"https://masutaka.net/2015-04-13-1/","isoDate":"2015-04-13T00:00:00.000Z","dateMiliSeconds":1428883200000,"authorName":"masutaka"},{"title":"Emacs-24.5 on OSX Yosemiteのビルド手順詳細","content":"Emacs-24.5がリリースされたので 、さっそくビルドしました。\n[2014-10-25-1] の手順と同じです。\n/usr/includeがないとビルドに失敗するので、\n$ xcode-select --installでCommand Line Toolsをインストールしてからね。\n$ curl -LO http://ftp.gnu.org/pub/gnu/emacs/emacs-24.5.tar.xz $ curl -LO ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-24.5-mac-5.9.tar.gz $ tar xfJ emacs-24.5.tar.xz $ tar xfz emacs-24.5-mac-5.9.tar.gz $ cd emacs-24.5 $ patch -p 1 &lt; ../emacs-24.5-mac-5.9/patch-mac $ cp -r ../emacs-24.5-mac-5.9/mac mac $ cp ../emacs-24.5-mac-5.9/src/* src $ cp ../emacs-24.5-mac-5.9/lisp/term/mac-win.el lisp/term $ \\cp nextstep/Cocoa/Emacs.base/Contents/Resources/Emacs.icns mac/Emacs.app/Contents/Resources/Emacs.icns $ ./configure --prefix=$HOME/opt/emacs-24.5 --with-mac --without-x $ make $ make GZIP_PROG=&#39;&#39; install # *.elを圧縮したくないので $ cp -r mac/Emacs.app ~/Applications emacs-mac patchの配布元は従来通り","contentSnippet":"Emacs-24.5がリリースされたので 、さっそくビルドしました。[2014-10-25-1] の手順と同じです。/usr/includeがないとビルドに失敗するので、$ xcode-select --installでCommand Line Toolsをインストールしてからね。$ curl -LO http://ftp.gnu.org/pub/gnu/emacs/emacs-24.5.tar.xz $ curl -LO ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-24.5-mac-5.9.tar.gz $ tar xfJ emacs-24.5.tar.xz $ tar xfz emacs-24.5-mac-5.9.tar.gz $ cd emacs-24.5 $ patch -p 1 < ../emacs-24.5-mac-5.9/patch-mac $ cp -r ../emacs-24.5-mac-5.9/mac mac $ cp ../emacs-24.5-mac-5.9/src/* src $ cp ../emacs-24.5-mac-5.9/lisp/term/mac-win.el lisp/term $ \\cp nextstep/Cocoa/Emacs.base/Contents/Resources/Emacs.icns mac/Emacs.app/Contents/Resources/Emacs.icns $ ./configure --prefix=$HOME/opt/emacs-24.5 --with-mac --without-x $ make $ make GZIP_PROG='' install # *.elを圧縮したくないので $ cp -r mac/Emacs.app ~/Applications emacs-mac patchの配布元は従来通り","link":"https://masutaka.net/2015-04-12-1/","isoDate":"2015-04-12T00:00:00.000Z","dateMiliSeconds":1428796800000,"authorName":"masutaka"},{"title":"『Web API： The Good Parts』を読んだ","content":"200ページの中によくまとまってました。後半は密度濃かったです。\n 4章のHTTP Statusでの筆者の見解が良かった。ぶっちゃけ何使えばよいのよ的な GitHubやTwitter、Facebookなど事例が豊富 セキュリティ対策が詳しい  最近はバックエンドはクローズドなAPIを提供し、フロントエンドを別途\n実装するパターンが増えているので、APIを実装する機会も増えてきまし\nた。そういう意味でも読んで良かったなあと思いました。","contentSnippet":"200ページの中によくまとまってました。後半は密度濃かったです。 4章のHTTP Statusでの筆者の見解が良かった。ぶっちゃけ何使えばよいのよ的な GitHubやTwitter、Facebookなど事例が豊富 セキュリティ対策が詳しい  最近はバックエンドはクローズドなAPIを提供し、フロントエンドを別途実装するパターンが増えているので、APIを実装する機会も増えてきました。そういう意味でも読んで良かったなあと思いました。","link":"https://masutaka.net/2015-04-09-2/","isoDate":"2015-04-09T01:00:00.000Z","dateMiliSeconds":1428541200000,"authorName":"masutaka"},{"title":"『夕凪の街 桜の国』が漫画も映画版も素晴らしかった","content":"ちょっと前にKindleで漫画を読んで感動したので、DVDで映画版も見てみた。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  映画版が漫画をうまく補完していて、なんというか見入ってしまった。\nたいがい原作から映画が作られるパターンはがっかりする。それで後で映\n像化に意味があっただとか、こういう解釈もありだとか理由をつけて自分\nを納得させるんだけど、今回は全くそれがなかった。\nキャスティングも良かった。\n麻生久美子 さんと田中麗奈 さんがイメージにピッタリで感心してしまった。\n中越典子 さんもフワフワした感じが合っていた。堺正章 さんはミスキャス\nトだったけど頑張っていた(何様？)w\n残念だったのは子役または青年と、大人の役者が似てなさすぎが多かった\nこと。逆に太田京花役の小池里奈 さんと粟田麗 さんは、似すぎてて気付か\nなかった。あとで調べて気づいた。マジか。\nエキストラの動きがなんかぎこちなかったのも気になった。\nでもまあそれくらい。いい映画です。また見よう。\nP.S.\n麻生さんいいですね〜\nなにげにこのブログでも『モテキ』の[2013-01-27-1] で褒めてるw\n  ","contentSnippet":"ちょっと前にKindleで漫画を読んで感動したので、DVDで映画版も見てみた。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  映画版が漫画をうまく補完していて、なんというか見入ってしまった。たいがい原作から映画が作られるパターンはがっかりする。それで後で映像化に意味があっただとか、こういう解釈もありだとか理由をつけて自分を納得させるんだけど、今回は全くそれがなかった。キャスティングも良かった。麻生久美子 さんと田中麗奈 さんがイメージにピッタリで感心してしまった。中越典子 さんもフワフワした感じが合っていた。堺正章 さんはミスキャストだったけど頑張っていた(何様？)w残念だったのは子役または青年と、大人の役者が似てなさすぎが多かったこと。逆に太田京花役の小池里奈 さんと粟田麗 さんは、似すぎてて気付かなかった。あとで調べて気づいた。マジか。エキストラの動きがなんかぎこちなかったのも気になった。でもまあそれくらい。いい映画です。また見よう。P.S.麻生さんいいですね〜なにげにこのブログでも『モテキ』の[2013-01-27-1] で褒めてるw","link":"https://masutaka.net/2015-04-09-1/","isoDate":"2015-04-09T00:00:00.000Z","dateMiliSeconds":1428537600000,"authorName":"masutaka"},{"title":"GitHub markdown previewer octodownをEmacsから使う","content":"今までレンダリング結果を確認するために、適当なGitHubのリポジトリの\nREADME.mdを開いて編集して確認。ということをやっておりました。。\nGitHubのREADMEをローカルで確認する。octodownをインストール。 - 気の向くままに書き綴る 2ヶ月前のこちらの記事が気になっていたので、ズビっと設定してみました。\n予め、markdown-mode をpackage.el等からインストールしておきます。\nあとは前述の記事を参考にoctodownコマンドをインストールし、以下\nを~/.emacs.d/init.elに追加すればOKです。\n(defun octodown ()  (interactive)  (shell-command (format &#34;octodown %s&#34; (buffer-file-name))))  (with-eval-after-load &#34;markdown-mode&#34;  (define-key markdown-mode-map (kbd &#34;C-c C-c C-c&#34;) &#39;octodown)) markdownファイルを開いて、C-c C-c C-cすればChromeとかに開いてくれます。\nまたEmacsが便利になってしまった。。。","contentSnippet":"今までレンダリング結果を確認するために、適当なGitHubのリポジトリのREADME.mdを開いて編集して確認。ということをやっておりました。。GitHubのREADMEをローカルで確認する。octodownをインストール。 - 気の向くままに書き綴る 2ヶ月前のこちらの記事が気になっていたので、ズビっと設定してみました。予め、markdown-mode をpackage.el等からインストールしておきます。あとは前述の記事を参考にoctodownコマンドをインストールし、以下を~/.emacs.d/init.elに追加すればOKです。(defun octodown ()  (interactive)  (shell-command (format \"octodown %s\" (buffer-file-name))))  (with-eval-after-load \"markdown-mode\"  (define-key markdown-mode-map (kbd \"C-c C-c C-c\") 'octodown)) markdownファイルを開いて、C-c C-c C-cすればChromeとかに開いてくれます。またEmacsが便利になってしまった。。。","link":"https://masutaka.net/2015-04-05-1/","isoDate":"2015-04-05T00:00:00.000Z","dateMiliSeconds":1428192000000,"authorName":"masutaka"},{"title":"通知サービスPushoverがなかなか便利","content":"何年も前からim.kayac.com を使ってきましたが、時々通知が来なくなるの\nで(アプリを再起動すれば直る)、Pushover に乗り換えました。1ヶ月ほど\n使っていますが、なかなか良いです。\n※ im.kayac.comは2009年11月18日以来更新がないようです。 iPhoneアプリの画面はこのような感じです。\nCircleCIは後述のGemで通知しています。\nTwitterはHerokuで動かしている29hours[2013-04-14-2] 経由で通知してい\nます。29hoursはデフォルトでPushoverに対応しているので、\nsettings.ymlを変更しただけです。\nim.kayac.comに出来ることはひととおり出来ました。さらに以下の機能があります。\n プライオリティ(low,normal,high,emergency)を指定できる emergencyの時は、Acknowledgeするまで60秒ごと24時間通知し続けることも可能 通知しない時間帯を指定できる 通知ごとにサウンドを切り替えられる デバイス(iPhone,Android,Desktop)を登録でき、指定したデバイスのみに通知可能 グループやユーザを登録でき、通知先に指定可能 利用状況をグラフで確認できる  唯一、Tiarraからの通知はできなくなりましたが、最近IRCは使ってない\nので割り切りました。\nアプリは無料で5日間制限なく使えます。それ以降は1度だけ500円支払え\nば同様に使えます。Desktop版はさらに$4.99 USDの課金が発生します。\nGemもあるので、結構お手軽に使えました。\n pushover | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.","contentSnippet":"何年も前からim.kayac.com を使ってきましたが、時々通知が来なくなるので(アプリを再起動すれば直る)、Pushover に乗り換えました。1ヶ月ほど使っていますが、なかなか良いです。※ im.kayac.comは2009年11月18日以来更新がないようです。 iPhoneアプリの画面はこのような感じです。CircleCIは後述のGemで通知しています。TwitterはHerokuで動かしている29hours[2013-04-14-2] 経由で通知しています。29hoursはデフォルトでPushoverに対応しているので、settings.ymlを変更しただけです。im.kayac.comに出来ることはひととおり出来ました。さらに以下の機能があります。 プライオリティ(low,normal,high,emergency)を指定できる emergencyの時は、Acknowledgeするまで60秒ごと24時間通知し続けることも可能 通知しない時間帯を指定できる 通知ごとにサウンドを切り替えられる デバイス(iPhone,Android,Desktop)を登録でき、指定したデバイスのみに通知可能 グループやユーザを登録でき、通知先に指定可能 利用状況をグラフで確認できる  唯一、Tiarraからの通知はできなくなりましたが、最近IRCは使ってないので割り切りました。アプリは無料で5日間制限なく使えます。それ以降は1度だけ500円支払えば同様に使えます。Desktop版はさらに$4.99 USDの課金が発生します。Gemもあるので、結構お手軽に使えました。 pushover | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.","link":"https://masutaka.net/2015-03-08-1/","isoDate":"2015-03-08T00:00:00.000Z","dateMiliSeconds":1425772800000,"authorName":"masutaka"},{"title":"継続的bundle updateを簡単に導入できるGemを作った","content":"[2015-01-25-1] のバージョンアップ。\n個人、会社含めて、複数リポジトリで継続的bundle updateを始めて一ヶ月。\n汎用コードをGemに外出ししました。\n circleci-bundle-update-pr | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.\n  circle.ymlで完結できるのでなかなか良さげです。ただし[2015-01-25-1] のスクリプト部分をGem化しただけで、テストもなく、名前が安直です。\nでもとりあえず動いています。\n変更前後をご覧になると分かりますが、deploymentで\ncircleci-bundle-update-prを呼ぶだけで良くなりました。\n◆変更前\nhttps://gist.github.com/masutaka/d9bf91e22567753fe76b ◆変更後\nhttps://gist.github.com/masutaka/8a01fe50e3917ca0b6d8 compare_linker とも依存を付けたので、できるだけdiffへのリンクを貼っ\nてくれます。\nトリガーは[2015-01-25-1] で紹介したci-build-triggerをどうぞ。","contentSnippet":"[2015-01-25-1] のバージョンアップ。個人、会社含めて、複数リポジトリで継続的bundle updateを始めて一ヶ月。汎用コードをGemに外出ししました。 circleci-bundle-update-pr | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.  circle.ymlで完結できるのでなかなか良さげです。ただし[2015-01-25-1] のスクリプト部分をGem化しただけで、テストもなく、名前が安直です。でもとりあえず動いています。変更前後をご覧になると分かりますが、deploymentでcircleci-bundle-update-prを呼ぶだけで良くなりました。◆変更前https://gist.github.com/masutaka/d9bf91e22567753fe76b ◆変更後https://gist.github.com/masutaka/8a01fe50e3917ca0b6d8 compare_linker とも依存を付けたので、できるだけdiffへのリンクを貼ってくれます。トリガーは[2015-01-25-1] で紹介したci-build-triggerをどうぞ。","link":"https://masutaka.net/2015-03-03-1/","isoDate":"2015-03-03T00:00:00.000Z","dateMiliSeconds":1425340800000,"authorName":"masutaka"},{"title":"『Webエンジニアが知っておきたいインフラの基本』を読んだ","content":"長らく会社で借りていた本を読了した。\nインフラエンジニアの教本にはもちろん、アプリエンジニアもためになる\n内容。\n 休憩を勧めても「大丈夫」「休憩不要」と言うことがありますが、それ\nこそがもう大丈夫ではなくなっているサインなので無理やり休憩を取ら\nせましょう。\n 大障害時のこの心構えはあるあるだけど、本に書いてあることは素晴らしい。\n最終章は筆者曰く「本章に書いてあることがひと通り実践できるようにな\nれば、チューニング大会でも確実に上位を狙えますよ」とのこと。","contentSnippet":"長らく会社で借りていた本を読了した。インフラエンジニアの教本にはもちろん、アプリエンジニアもためになる内容。 休憩を勧めても「大丈夫」「休憩不要」と言うことがありますが、それこそがもう大丈夫ではなくなっているサインなので無理やり休憩を取らせましょう。 大障害時のこの心構えはあるあるだけど、本に書いてあることは素晴らしい。最終章は筆者曰く「本章に書いてあることがひと通り実践できるようになれば、チューニング大会でも確実に上位を狙えますよ」とのこと。","link":"https://masutaka.net/2015-03-02-1/","isoDate":"2015-03-02T00:00:00.000Z","dateMiliSeconds":1425254400000,"authorName":"masutaka"},{"title":"WEB+DB PRESS Vol.82の「はじめてのGO」を実際に書いて動かした","content":"WEB+DB PRESS Vol.82｜技術評論社 記事は非常にわかりやすく、A Tour of Go の途中で挫折した私でも大丈夫\nでした。GOとCは結構似ているので、C経験者にもオススメです。\nGOは必要最小限の機能しか用意されていない点が好きです。~~最近Rubyの高\n機能さにゲップが出るので。~~ちょっとGOで何か作ってみようかな。\nそういえば一度この記事のコードも試したのですよね。良い復習になりました。\n「今日から始める Go言語 と appengine」というテーマで社内勉強会をしました｜feedforce Engineers&rsquo; blog Emacsの開発環境は「Goプログラミングの環境構築 - Emacs JP 」を参考に\ngo-mode, go-autocomplete, go-eldocを入れたところ、非常に快適になり\nました。機能としてはIDEと遜色ないんじゃないかな？\n C-c C-aでパッケージのimport文を簡単に追加できる。補完も効く importしたパッケージに含まれる関数名の動的補完 補完した関数の型情報をミニバッファに表示 M-.でfmt.Println等の組み込み関数の定義元にジャンプ ファイルの保存時に、自動的にgofmtコマンドで整形  加えて、open-junk-fileで書き捨てのファイルを作ってコードを書き、\nquickrunで即時実行する感じで進めていきました(意外にボリュームがあ\nり、時間はかかりましたが..)。\ninit.elはこんな設定にしました。タブ幅はEmacsデフォルトの8だと見づ\nらいので4に変更。\n(with-eval-after-load &#34;go-mode&#34;  (require &#39;go-autocomplete)   (defun go-mode-hook-func ()  (setq tab-width 4)  (go-eldoc-setup))  (add-hook &#39;go-mode-hook &#39;go-mode-hook-func)   (define-key go-mode-map (kbd &#34;M-.&#34;) &#39;godef-jump)  (define-key go-mode-map (kbd &#34;M-,&#34;) &#39;pop-tag-mark))  (add-hook &#39;before-save-hook &#39;gofmt-before-save) GO++","contentSnippet":"WEB+DB PRESS Vol.82｜技術評論社 記事は非常にわかりやすく、A Tour of Go の途中で挫折した私でも大丈夫でした。GOとCは結構似ているので、C経験者にもオススメです。GOは必要最小限の機能しか用意されていない点が好きです。~~最近Rubyの高機能さにゲップが出るので。~~ちょっとGOで何か作ってみようかな。そういえば一度この記事のコードも試したのですよね。良い復習になりました。「今日から始める Go言語 と appengine」というテーマで社内勉強会をしました｜feedforce Engineers’ blog Emacsの開発環境は「Goプログラミングの環境構築 - Emacs JP 」を参考にgo-mode, go-autocomplete, go-eldocを入れたところ、非常に快適になりました。機能としてはIDEと遜色ないんじゃないかな？ C-c C-aでパッケージのimport文を簡単に追加できる。補完も効く importしたパッケージに含まれる関数名の動的補完 補完した関数の型情報をミニバッファに表示 M-.でfmt.Println等の組み込み関数の定義元にジャンプ ファイルの保存時に、自動的にgofmtコマンドで整形  加えて、open-junk-fileで書き捨てのファイルを作ってコードを書き、quickrunで即時実行する感じで進めていきました(意外にボリュームがあり、時間はかかりましたが..)。init.elはこんな設定にしました。タブ幅はEmacsデフォルトの8だと見づらいので4に変更。(with-eval-after-load \"go-mode\"  (require 'go-autocomplete)   (defun go-mode-hook-func ()  (setq tab-width 4)  (go-eldoc-setup))  (add-hook 'go-mode-hook 'go-mode-hook-func)   (define-key go-mode-map (kbd \"M-.\") 'godef-jump)  (define-key go-mode-map (kbd \"M-,\") 'pop-tag-mark))  (add-hook 'before-save-hook 'gofmt-before-save) GO++","link":"https://masutaka.net/2015-02-11-1/","isoDate":"2015-02-11T00:00:00.000Z","dateMiliSeconds":1423612800000,"authorName":"masutaka"},{"title":"サーバのCIをWerckerからCircleCIに移行した","content":"[2014-01-09-1] からWerckerを使い始めて1年とちょっと。このたび\nCircleCIに移行しました。理由は以下のとおり。\n 会社のJenkinsが壊れてCircleCIを使い始めた。2つ覚えているのが面倒 [2015-01-25-1] の継続的bundle updateをやりたい(WerckerはAPIがないっぽい) [2014-01-09-1] 当時と違いCircleCIは1コンテナまで無料になった  Werckerは自分のBoxを簡単に作れたのが良かったんですけどね。\n(masutaka/wercker-box-rvm-vagrant-aws の更新は停止します。)\n特殊なことはしていないので、Vagrantfileとcircle.ymlを晒すだけにし\nておきます。\n CircleCIはコンテナにsshログイン出来るのは良いけど、EC2インスタンス\nが起動されてそのままになるような。。。さっさとDockerに移行しないと。","contentSnippet":"[2014-01-09-1] からWerckerを使い始めて1年とちょっと。このたびCircleCIに移行しました。理由は以下のとおり。 会社のJenkinsが壊れてCircleCIを使い始めた。2つ覚えているのが面倒 [2015-01-25-1] の継続的bundle updateをやりたい(WerckerはAPIがないっぽい) [2014-01-09-1] 当時と違いCircleCIは1コンテナまで無料になった  Werckerは自分のBoxを簡単に作れたのが良かったんですけどね。(masutaka/wercker-box-rvm-vagrant-aws の更新は停止します。)特殊なことはしていないので、Vagrantfileとcircle.ymlを晒すだけにしておきます。 CircleCIはコンテナにsshログイン出来るのは良いけど、EC2インスタンスが起動されてそのままになるような。。。さっさとDockerに移行しないと。","link":"https://masutaka.net/2015-02-08-2/","isoDate":"2015-02-08T01:00:00.000Z","dateMiliSeconds":1423357200000,"authorName":"masutaka"},{"title":"bundle updateを定期実行した時、更新されたGemのDiffも分かるようにした","content":"feedforce/tech.feedforce.jp#55 で、tachikoma.io の中の人とこんなやりとりが。\n  早速[2015-01-25-1] に実装した継続的bundle updateで、compare linker\nを使ってみました(残念ながらこの例ではdiffはGitHubのリンクになりませんでした)。\n[2015-01-25-1] のGemfileとcreate_pull_request.rbを以下に置換すればOKです。\n See also\nSpeaker としての #rubykaigi 2014 を終えて - @kyanny&rsquo;s blog P.S.\n何か理由があってrubygems.orgにアップロードされてないのかな？","contentSnippet":"feedforce/tech.feedforce.jp#55 で、tachikoma.io の中の人とこんなやりとりが。  早速[2015-01-25-1] に実装した継続的bundle updateで、compare linkerを使ってみました(残念ながらこの例ではdiffはGitHubのリンクになりませんでした)。[2015-01-25-1] のGemfileとcreate_pull_request.rbを以下に置換すればOKです。 See alsoSpeaker としての #rubykaigi 2014 を終えて - @kyanny’s blog P.S.何か理由があってrubygems.orgにアップロードされてないのかな？","link":"https://masutaka.net/2015-02-08-1/","isoDate":"2015-02-08T00:00:00.000Z","dateMiliSeconds":1423353600000,"authorName":"masutaka"},{"title":"CircleCIを使ってbundle updateを定期実行するHerokuアプリを作った","content":"CircleCIを使ってbundle updateを定期実行する - Qiita こちらの「1. CircleCIを起動する」のシェルスクリプトをRubyスクリプ\nトにしてみました。Herokuボタンで簡単に設置できます。\n  ◆ci-build-triggerの解説\nやっていることは単純で、build_parametersに{BUNDLE_UPDATE: true}を\n指定して、CircleCIのビルドを実行しているだけです。BUNDLE_UPDATEは\n後述するcircle.ymlで参照します。\nHerokuボタンをクリックしたら、App NameやEnvを設定してください。\nCIRCLECI_TOKEN Envは、CircleCIのProject Settings -&gt; API\nPermissionsからScopeがallなtokenを作成します。\nEXEC_DAYS Envは実行する曜日です。Heroku Schedulerは実行間隔を\n「Daily」「Hourly」「Every 10 minutes」からしか選べません。さすが\nに毎日のbundle updateは必要ないので、「Daily」を選択しつつスクリプ\nトの中でこの環境変数を参照するようにしました。\nカンマ区切りで1つまたは複数の曜日を指定することが出来ます。指定が\nなければ毎日CircleCIをビルドします。\n Sun\nMon,Wed,Fri\n あとはHeroku Schedulerを設定するだけで、CircleCIのビルドを自動実行\nできます。\n◆CircleCIの設定\n前述の記事に書いてあるとおりですが、circle.ymlの中で、\nBUNDLE_UPDATEがtrueの時だけ処理が切り替わるようにしました。\n[2015-01-15-1] のcircle.ymlはこのように変わりました。\n ※ circle.ymlのpre,override,postはよく忘れるので、リンクを張ってお\nきます。 https://circleci.com/docs/configuration あとはここでGitHubのtokenを作成 し、CircleCIのProject Setting -&gt;\nEnvironment variablesにGITHUB_ACCESS_TOKENという名前で追加するだけです。\n◆まとめ\nCircleCIを起動するRubyスクリプトを作成し、Heroku Buttonでインストー\nル可能にしました。bundle updateが必要な数だけHerokuアプリを作成し、\n必要なくなったら捨てれば良いので、メンテナンスコストが少なく済みます。\n追記(2015-01-25):\nhttps://github.com/masutaka/ci-build-trigger 自体のbundle updateは\nhttp://tachikoma.io を使うことにしました。外部サービス使えたら使う\nに越したことはないですよね。","contentSnippet":"CircleCIを使ってbundle updateを定期実行する - Qiita こちらの「1. CircleCIを起動する」のシェルスクリプトをRubyスクリプトにしてみました。Herokuボタンで簡単に設置できます。  ◆ci-build-triggerの解説やっていることは単純で、build_parametersに{BUNDLE_UPDATE: true}を指定して、CircleCIのビルドを実行しているだけです。BUNDLE_UPDATEは後述するcircle.ymlで参照します。Herokuボタンをクリックしたら、App NameやEnvを設定してください。CIRCLECI_TOKEN Envは、CircleCIのProject Settings -> APIPermissionsからScopeがallなtokenを作成します。EXEC_DAYS Envは実行する曜日です。Heroku Schedulerは実行間隔を「Daily」「Hourly」「Every 10 minutes」からしか選べません。さすがに毎日のbundle updateは必要ないので、「Daily」を選択しつつスクリプトの中でこの環境変数を参照するようにしました。カンマ区切りで1つまたは複数の曜日を指定することが出来ます。指定がなければ毎日CircleCIをビルドします。 SunMon,Wed,Fri あとはHeroku Schedulerを設定するだけで、CircleCIのビルドを自動実行できます。◆CircleCIの設定前述の記事に書いてあるとおりですが、circle.ymlの中で、BUNDLE_UPDATEがtrueの時だけ処理が切り替わるようにしました。[2015-01-15-1] のcircle.ymlはこのように変わりました。 ※ circle.ymlのpre,override,postはよく忘れるので、リンクを張っておきます。 https://circleci.com/docs/configuration あとはここでGitHubのtokenを作成 し、CircleCIのProject Setting ->Environment variablesにGITHUB_ACCESS_TOKENという名前で追加するだけです。◆まとめCircleCIを起動するRubyスクリプトを作成し、Heroku Buttonでインストール可能にしました。bundle updateが必要な数だけHerokuアプリを作成し、必要なくなったら捨てれば良いので、メンテナンスコストが少なく済みます。追記(2015-01-25):https://github.com/masutaka/ci-build-trigger 自体のbundle updateはhttp://tachikoma.io を使うことにしました。外部サービス使えたら使うに越したことはないですよね。","link":"https://masutaka.net/2015-01-25-1/","isoDate":"2015-01-25T00:00:00.000Z","dateMiliSeconds":1422144000000,"authorName":"masutaka"},{"title":"GitHubにpushしたらCircleCIが自動デプロイしてim.kayacに通知する","content":"[2015-01-13-1] でデプロイ時にchalow が実行されるようになったので、\nGitHubへのPushをトリガーにして自動デプロイを実装してみました。\n文字で分かりづらいですが、よくある自動デプロイと同じです。(chalow\nでここまでやっている人はいるのかな？)\n GitHubのmasterへのマージをトリガーにして、CircleCIが自動デプロイ開始 CircleCIがGitHubの最新のソースを取得(a) テスト実行(chalowを実行するだけ) capistranoでデプロイ開始。masutaka.netにsshでログインする(b) masutaka.netの中でGitHubの最新のソースを取得(c) index.html等、静的コンテンツを配置 chalowを実行して/chalow以下の静的コンテンツを配置 IRC -&gt; tiarra(-&gt; Auto::Im) -&gt; im.kayacという流れで手元のiPhoneに通知  sshの鍵が3つ必要でした\n(a) CircleCIとGitHub連携時に自動生成される\n(b) CircleCIのProject settings -&gt; Permissions -&gt; Checkout SSH keysから生成する。(a)もここで確認可能\n(c) ローカルでssh-keygenコマンドを実行して生成して、Project settings -&gt; Permissions -&gt; SSH Permissionsに登録\n(c)は普段使っているsshの鍵でも動きますが、CircleCIに秘密鍵を渡した\nくなかったので、新規に作りました。\ncircle.ymlとその中で使われるシェルスクリプトはこんな感じです。\nYAMLだけで書けないのかな。。\n 8はCircleCIのIRC連携です(Project setting -&gt; Notifications -&gt; Chat Notifications)。\n適当なUsernameを入れないとエラーになってしまいました。\niPhoneのim.kayac.comへの通知はこんな感じ。\nLimeChatにはこのように通知されます。","contentSnippet":"[2015-01-13-1] でデプロイ時にchalow が実行されるようになったので、GitHubへのPushをトリガーにして自動デプロイを実装してみました。文字で分かりづらいですが、よくある自動デプロイと同じです。(chalowでここまでやっている人はいるのかな？) GitHubのmasterへのマージをトリガーにして、CircleCIが自動デプロイ開始 CircleCIがGitHubの最新のソースを取得(a) テスト実行(chalowを実行するだけ) capistranoでデプロイ開始。masutaka.netにsshでログインする(b) masutaka.netの中でGitHubの最新のソースを取得(c) index.html等、静的コンテンツを配置 chalowを実行して/chalow以下の静的コンテンツを配置 IRC -> tiarra(-> Auto::Im) -> im.kayacという流れで手元のiPhoneに通知  sshの鍵が3つ必要でした(a) CircleCIとGitHub連携時に自動生成される(b) CircleCIのProject settings -> Permissions -> Checkout SSH keysから生成する。(a)もここで確認可能(c) ローカルでssh-keygenコマンドを実行して生成して、Project settings -> Permissions -> SSH Permissionsに登録(c)は普段使っているsshの鍵でも動きますが、CircleCIに秘密鍵を渡したくなかったので、新規に作りました。circle.ymlとその中で使われるシェルスクリプトはこんな感じです。YAMLだけで書けないのかな。。 8はCircleCIのIRC連携です(Project setting -> Notifications -> Chat Notifications)。適当なUsernameを入れないとエラーになってしまいました。iPhoneのim.kayac.comへの通知はこんな感じ。LimeChatにはこのように通知されます。","link":"https://masutaka.net/2015-01-15-1/","isoDate":"2015-01-15T00:00:00.000Z","dateMiliSeconds":1421280000000,"authorName":"masutaka"},{"title":"このブログをデプロイする時にchalowも実行するようにした","content":"[2014-05-03-1] のバージョンアップ。\nhttp://masutaka.net はcapistranoでデプロイしてますが、\nhttp://masutaka.net/chalow はchalow+rsyncを実行する\nmkchalow[2009-06-14-3] というコマンドでアップロードしてました。\nローカルのChangeLogメモをchalowで変換しrsyncするので、自分の\nMacBook Airと会社のMac miniの複数環境でブログを書くと、過去記事が\n消える可能性が出てきます。\nそういうのを気をつけるのが面倒なので、capistranoでのデプロイ時に\nchalowコマンドも実行するようにしました。\n以下はcapistranoの設定ファイルです。melodyはVagrantのVMです。\n [2009-06-14-3] に作ったEmacsのmkchalow()もcap-deploy()として\n新たに生まれ変わりました。ChangeLogメモを開いた状態でC-cC-cすると\nデプロイ出来ます。\n default-directoryの最後に/(slash)を付けないと、実行ディレクトリ\nが~/src/github.com/masutakaになる問題にハマりました。\nstart-process()でencode_current_directory()からカレントディレクト\nリを求めており 、その中でFunhandled_file_name_directory()を使ってい\nる ためのようです。\nFunhandled_file_name_directory()はelispのfile-name-directory()と等\n価です。\nUNIX上のEmacsではディレクトリ名の最後には/(slash)を付けたほうが良\nいかもしれません。\n http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html The value is always a string ending with a slash.\n default-directory ⇒ &quot;/user/lewis/manual/&quot;   ","contentSnippet":"[2014-05-03-1] のバージョンアップ。http://masutaka.net はcapistranoでデプロイしてますが、http://masutaka.net/chalow はchalow+rsyncを実行するmkchalow[2009-06-14-3] というコマンドでアップロードしてました。ローカルのChangeLogメモをchalowで変換しrsyncするので、自分のMacBook Airと会社のMac miniの複数環境でブログを書くと、過去記事が消える可能性が出てきます。そういうのを気をつけるのが面倒なので、capistranoでのデプロイ時にchalowコマンドも実行するようにしました。以下はcapistranoの設定ファイルです。melodyはVagrantのVMです。 [2009-06-14-3] に作ったEmacsのmkchalow()もcap-deploy()として新たに生まれ変わりました。ChangeLogメモを開いた状態でC-cC-cするとデプロイ出来ます。 default-directoryの最後に/(slash)を付けないと、実行ディレクトリが~/src/github.com/masutakaになる問題にハマりました。start-process()でencode_current_directory()からカレントディレクトリを求めており 、その中でFunhandled_file_name_directory()を使っている ためのようです。Funhandled_file_name_directory()はelispのfile-name-directory()と等価です。UNIX上のEmacsではディレクトリ名の最後には/(slash)を付けたほうが良いかもしれません。 http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html The value is always a string ending with a slash. default-directory ⇒ \"/user/lewis/manual/\"","link":"https://masutaka.net/2015-01-13-1/","isoDate":"2015-01-13T00:00:00.000Z","dateMiliSeconds":1421107200000,"authorName":"masutaka"},{"title":"WERCKER-BOX-RVM-VAGRANT-AWS v1.2.0 released","content":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Vagrant-1.7.2に対応しました。\nVagrant-1.7.1で必要になったworkaroundを削除出来ました。 CHANGELOG のこれが相当するのかな\n installer: SSL cert bundle contains 1024-bit keys, fixing SSL verification for a lot of sites.\n 会社のJenkinsマシンに入れているVagrantもバージョンアップしよう。","contentSnippet":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Vagrant-1.7.2に対応しました。Vagrant-1.7.1で必要になったworkaroundを削除出来ました。 CHANGELOG のこれが相当するのかな installer: SSL cert bundle contains 1024-bit keys, fixing SSL verification for a lot of sites. 会社のJenkinsマシンに入れているVagrantもバージョンアップしよう。","link":"https://masutaka.net/2015-01-11-2/","isoDate":"2015-01-11T01:00:00.000Z","dateMiliSeconds":1420938000000,"authorName":"masutaka"},{"title":"Herokuにberkshelf-apiサーバを立ててみた","content":"前回[2015-01-09-1] はBerksfileにGitリポジトリを直接書きましたが、レ\nシピの依存関係の解決ができませんでした。\nberkshelf-apiサーバを立てるとその問題が解消されるようなので、\nHerokuにberkshelf-apiサーバを立てて検証してみました。\n適当なOrganizationを作り  $ berks cookbook git .\nなどで作ったcookbookを用意します。gitのtagを振る必要がある点は注意です。\n https://github.com/doramichan/git/releases https://github.com/doramichan/hub/releases berksコマンドは\n $ gem install berkshelf\nなどでインストールできます。\n hubレシピはgitレシピに依存させた ため、Berksfileに\n cookbook &lsquo;hub&rsquo;\nと書けばgitレシピもインストールされるはずです。\n※適当なレシピなので動作は保証しません。\n 次にapiサーバを用意します。Heroku stackがcedar-14だと動かなかった のでcedarに変更しています。LD_LIBRARY_PATHの追加はREADME.md の説明\nのとおりです。\n$ git clone git@github.com:berkshelf/api.berkshelf.com.git $ cd api.berkshelf.com $ heroku create -s cedar masutaka-api-berkshelf $ heroku config:add LD_LIBRARY_PATH=/app/vendor/libarchive-3.1/lib $ git push heroku master 続けてconfig.jsonを追加し、先ほどのdoramichan Organizationを参照さ\nせます。\n{ &#34;endpoints&#34;: [ { &#34;type&#34;: &#34;github&#34;, &#34;options&#34;: { &#34;organization&#34;: &#34;doramichan&#34;, &#34;access_token&#34;: &#34;YOUR GITHUB ACCESS TOKEN&#34;, &#34;api_endpoint&#34;: &#34;https://api.","contentSnippet":"前回[2015-01-09-1] はBerksfileにGitリポジトリを直接書きましたが、レシピの依存関係の解決ができませんでした。berkshelf-apiサーバを立てるとその問題が解消されるようなので、Herokuにberkshelf-apiサーバを立てて検証してみました。適当なOrganizationを作り  $ berks cookbook git .などで作ったcookbookを用意します。gitのtagを振る必要がある点は注意です。 https://github.com/doramichan/git/releases https://github.com/doramichan/hub/releases berksコマンドは $ gem install berkshelfなどでインストールできます。 hubレシピはgitレシピに依存させた ため、Berksfileに cookbook ‘hub’と書けばgitレシピもインストールされるはずです。※適当なレシピなので動作は保証しません。 次にapiサーバを用意します。Heroku stackがcedar-14だと動かなかった のでcedarに変更しています。LD_LIBRARY_PATHの追加はREADME.md の説明のとおりです。$ git clone git@github.com:berkshelf/api.berkshelf.com.git $ cd api.berkshelf.com $ heroku create -s cedar masutaka-api-berkshelf $ heroku config:add LD_LIBRARY_PATH=/app/vendor/libarchive-3.1/lib $ git push heroku master 続けてconfig.jsonを追加し、先ほどのdoramichan Organizationを参照させます。{ \"endpoints\": [ { \"type\": \"github\", \"options\": { \"organization\": \"doramichan\", \"access_token\": \"YOUR GITHUB ACCESS TOKEN\", \"api_endpoint\": \"https://api.","link":"https://masutaka.net/2015-01-11-1/","isoDate":"2015-01-11T00:00:00.000Z","dateMiliSeconds":1420934400000,"authorName":"masutaka"},{"title":"あるGitリポジトリのサブディレクトリにあるChefレシピを1つだけ取り込む方法","content":"Chef-solo(Knife-solo)とBerkshelfの話。\nBerksfileに例えばこうやって書けば使えた。これは有能！\nrelってサブディレクトリのことだったのか。Gemfileで使ったことなかった。\n cookbook &rsquo;nginx&rsquo;, git: &lsquo;git@github.com :masutaka/cookbooks.git&rsquo;, rel: &rsquo;nginx&rsquo;\n $ bundle exec berks vendor vendor/cookbooksを実行すると、\nvendor/cookbooks/nginxにインストールされる。\n.chef/knife.rbを以下のように変更すると、インストールしたnginxレシ\nピをnodeやroleから参照できる。ちなみにcookbook_pathは後ろから先に\n参照される。$PATHの逆。\n cookbook_path [&ldquo;cookbooks&rdquo;, &ldquo;site-cookbooks&rdquo;]\n↓\ncookbook_path [&ldquo;cookbooks&rdquo;, &ldquo;site-cookbooks&rdquo;, &ldquo;vendor/cookbooks&rdquo;]\n ※ .gitignoreに/vendor/cookbooksの追加も忘れずに。\nprivate repositoryの時はこの書式は使えなかった。やり方はあるかもし\nれない。\n cookbook &rsquo;nginx&rsquo;, github: &lsquo;masutaka/cookbooks&rsquo;, rel: &rsquo;nginx&rsquo;\n 今までは https://github.com/masutaka/cookbooks とかをGitのsub\nmoduleとしてガッツリ指定していたため、追随するのが大変だった。\ncookbooksを変更する人も気を使ったし。\nこの辺の話に関連する。\nJenkinsでサーバのCIを始めました｜feedforce Engineers&rsquo; blog Berksfileの書き方は公式ドキュメントに書いてある。\nhttp://berkshelf.com/ 追記:\n依存関係(metadata.rbのdepends)は見てくれなかった。そりゃそうか。\n継続調査。","contentSnippet":"Chef-solo(Knife-solo)とBerkshelfの話。Berksfileに例えばこうやって書けば使えた。これは有能！relってサブディレクトリのことだったのか。Gemfileで使ったことなかった。 cookbook ’nginx’, git: ‘git@github.com :masutaka/cookbooks.git’, rel: ’nginx’ $ bundle exec berks vendor vendor/cookbooksを実行すると、vendor/cookbooks/nginxにインストールされる。.chef/knife.rbを以下のように変更すると、インストールしたnginxレシピをnodeやroleから参照できる。ちなみにcookbook_pathは後ろから先に参照される。$PATHの逆。 cookbook_path [“cookbooks”, “site-cookbooks”]↓cookbook_path [“cookbooks”, “site-cookbooks”, “vendor/cookbooks”] ※ .gitignoreに/vendor/cookbooksの追加も忘れずに。private repositoryの時はこの書式は使えなかった。やり方はあるかもしれない。 cookbook ’nginx’, github: ‘masutaka/cookbooks’, rel: ’nginx’ 今までは https://github.com/masutaka/cookbooks とかをGitのsubmoduleとしてガッツリ指定していたため、追随するのが大変だった。cookbooksを変更する人も気を使ったし。この辺の話に関連する。JenkinsでサーバのCIを始めました｜feedforce Engineers’ blog Berksfileの書き方は公式ドキュメントに書いてある。http://berkshelf.com/ 追記:依存関係(metadata.rbのdepends)は見てくれなかった。そりゃそうか。継続調査。","link":"https://masutaka.net/2015-01-09-1/","isoDate":"2015-01-09T00:00:00.000Z","dateMiliSeconds":1420761600000,"authorName":"masutaka"},{"title":"OSXのEmacsにインラインパッチなんていらなかったんや...","content":"今更ながら年末のEmacs Advent Calendarを読んでいたら、\n「Emacs Lispの汎変数（とその他） - Qiita 」にさらりとmac-auto-ascii-modeの紹介が。\n また、新機能 mac-auto-ascii-mode を有効にすると、ミニバッファにカーソルを移動する際、自動的に英語モードになります。これで日本語入力モードでうっかり M-x shell と入力しようとして M-x しぇっl になるような悲惨な事故をなくすことができます。\n 2014-11-21のemacs-devel でアナウンスされていました。\n *** New global minor mode `mac-auto-ascii-mode&rsquo; for Mac OS X 10.5 and\nlater. If enabled, it automatically selects the most-recently-used\nASCII-capable keyboard input source on some occasions: after prefix\nkey (bound in the global keymap) press such as C-x and M-g, and at the\nstart of minibuffer input.","contentSnippet":"今更ながら年末のEmacs Advent Calendarを読んでいたら、「Emacs Lispの汎変数（とその他） - Qiita 」にさらりとmac-auto-ascii-modeの紹介が。 また、新機能 mac-auto-ascii-mode を有効にすると、ミニバッファにカーソルを移動する際、自動的に英語モードになります。これで日本語入力モードでうっかり M-x shell と入力しようとして M-x しぇっl になるような悲惨な事故をなくすことができます。 2014-11-21のemacs-devel でアナウンスされていました。 *** New global minor mode `mac-auto-ascii-mode’ for Mac OS X 10.5 andlater. If enabled, it automatically selects the most-recently-usedASCII-capable keyboard input source on some occasions: after prefixkey (bound in the global keymap) press such as C-x and M-g, and at thestart of minibuffer input.","link":"https://masutaka.net/2015-01-04-1/","isoDate":"2015-01-04T00:00:00.000Z","dateMiliSeconds":1420329600000,"authorName":"masutaka"},{"title":"WERCKER-BOX-RVM-VAGRANT-AWS v1.1.1 released","content":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Ruby-2.2.0に対応しました。\nこのPRがマージされるのを待ってました。\nhttps://github.com/wercker/box-rvm/pull/9 ","contentSnippet":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Ruby-2.2.0に対応しました。このPRがマージされるのを待ってました。https://github.com/wercker/box-rvm/pull/9","link":"https://masutaka.net/2015-01-01-1/","isoDate":"2015-01-01T00:00:00.000Z","dateMiliSeconds":1420070400000,"authorName":"masutaka"},{"title":"WERCKER-BOX-RVM-VAGRANT-AWS v1.0.2 released","content":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Vagrantを最新の1.7.1にしました。\nメジャーバージョンも思い切って'1&rsquo;に上げました。\n今のvagrant-aws(v0.6.0)とUbuntu-12.04の組み合わせだとvagrant\n(up|destroy)に失敗しますが、うまく対策出来たのでリリース＆アナウン\nスすることにしました。\n&lsquo;1.0.0&rsquo;で対策なし、&lsquo;1.0.1&rsquo;で間違ったworkaroundを追加、&lsquo;1.0.2&rsquo;で修\n正したので無駄にバージョンが上がっています。\n こうしたらうまくいったよコメント  実際に対策した修正   P.S.\nwerckerでvagrant-awsを含むBoxは自分の含めて2つしかないけど、EC2使っ\nたサーバのCIって需要少ないのかな？不思議。","contentSnippet":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Vagrantを最新の1.7.1にしました。メジャーバージョンも思い切って'1’に上げました。今のvagrant-aws(v0.6.0)とUbuntu-12.04の組み合わせだとvagrant(up|destroy)に失敗しますが、うまく対策出来たのでリリース＆アナウンスすることにしました。‘1.0.0’で対策なし、‘1.0.1’で間違ったworkaroundを追加、‘1.0.2’で修正したので無駄にバージョンが上がっています。 こうしたらうまくいったよコメント  実際に対策した修正   P.S.werckerでvagrant-awsを含むBoxは自分の含めて2つしかないけど、EC2使ったサーバのCIって需要少ないのかな？不思議。","link":"https://masutaka.net/2014-12-24-1/","isoDate":"2014-12-24T00:00:00.000Z","dateMiliSeconds":1419379200000,"authorName":"masutaka"},{"title":"github-nippou v0.1.1 released","content":"https://rubygems.org/gems/github-nippou/versions/0.1.1 イベントを取得できない問題を修正しました。\n今までIssuesEvent, IssueCommentEvent, PullRequestEventを表示してい\nましたが、PullRequestReviewCommentEventを読み捨てていたのが原因。\n(動けば良いレベルで作っているので。。)\nあとはCommitCommentEventに対応できれば完璧な日報が書けそうですが、\nどのように表示しようか悩み中。\nhttps://github.com/masutaka/github-nippou/issues/1 にグダグダ書い\nています。\n職場の同僚がさっそく使ってくれてうれしい限り。","contentSnippet":"https://rubygems.org/gems/github-nippou/versions/0.1.1 イベントを取得できない問題を修正しました。今までIssuesEvent, IssueCommentEvent, PullRequestEventを表示していましたが、PullRequestReviewCommentEventを読み捨てていたのが原因。(動けば良いレベルで作っているので。。)あとはCommitCommentEventに対応できれば完璧な日報が書けそうですが、どのように表示しようか悩み中。https://github.com/masutaka/github-nippou/issues/1 にグダグダ書いています。職場の同僚がさっそく使ってくれてうれしい限り。","link":"https://masutaka.net/2014-12-18-1/","isoDate":"2014-12-18T00:00:00.000Z","dateMiliSeconds":1418860800000,"authorName":"masutaka"},{"title":"nginxのアクセスログをFluentd経由でelasticsearchとBigQueryに送り始めた","content":"masutaka.netのnginxアクセスログはmongodbとGrowthForecastに送ってます。\n [2013-07-14-1] nginxのアクセスログをFluentd経由でMongoDBに保存してみた [2013-08-15-1] nginxのアクセスログをFluentd経由でGrowthForecastのグラフにしてみた  今回、elasticsearchとBigQueryにも送り始めました。個人での必要性は\n全くなく、単にelasticsearchとBigQueryを知っておきたかったからです。\nelasticsearch    http://kibana.masutaka.net/ からkibana 経由で検索出来るようにしてい\nます(要Basic認証)。kibanaは評判が良かったので期待してたんですが、\n使いづらいです。学習が必要そうです。。\nインストールの概要 elasticsearchはopenjdk-7-jdkのインストールと、公式のインストール方\n法 をそのままChefのレシピにしました。\nkibanaは/var/www以下に公式のtar ball を展開して、nginxの静的コンテ\nンツの設定を追加しました。\nハマりどころ 特になく、jdk, elasticsearch, kibana, nginxのレシピを良い感じに組\nみ立てるのに時間を使いました。\nGoogle BigQuery    SQLなのでelasticsearchより取っ付きやすいのが良いです。\nあ、Row=4はアカンやつや\nインストールの概要 fluent-plugin-bigqueryのREADME.md を読みつつ、以下の記事そのままで\nできました。ありがとうございます。\nFluentdでGoogle BigQueryにログを挿入してクエリを実行する - Qiita projectはウェブ上から作り、dataset(db)とtableはGoogle Cloud SDK付\n属のbqコマンドで作りました。google-cloud-sdkはbrew caskでインストー\nルできます。\n $ bq mk masutakanet:nginx\n$ bq mk -t masutakanet:nginx.access bigquery-nginx.json\n td-agent.confはこのようになりました。\n&lt;match nginx.access.masutaka.net&gt; type copy &lt;store&gt; type mongo (省略) &lt;/store&gt; &lt;store&gt; type elasticsearch (省略) &lt;/store&gt; &lt;store&gt; type growthforecast (省略) &lt;/store&gt; &lt;store&gt; type bigquery method insert auth_method private_key email XXXXXXXX@developer.","contentSnippet":"masutaka.netのnginxアクセスログはmongodbとGrowthForecastに送ってます。 [2013-07-14-1] nginxのアクセスログをFluentd経由でMongoDBに保存してみた [2013-08-15-1] nginxのアクセスログをFluentd経由でGrowthForecastのグラフにしてみた  今回、elasticsearchとBigQueryにも送り始めました。個人での必要性は全くなく、単にelasticsearchとBigQueryを知っておきたかったからです。elasticsearch    http://kibana.masutaka.net/ からkibana 経由で検索出来るようにしています(要Basic認証)。kibanaは評判が良かったので期待してたんですが、使いづらいです。学習が必要そうです。。インストールの概要 elasticsearchはopenjdk-7-jdkのインストールと、公式のインストール方法 をそのままChefのレシピにしました。kibanaは/var/www以下に公式のtar ball を展開して、nginxの静的コンテンツの設定を追加しました。ハマりどころ 特になく、jdk, elasticsearch, kibana, nginxのレシピを良い感じに組み立てるのに時間を使いました。Google BigQuery    SQLなのでelasticsearchより取っ付きやすいのが良いです。あ、Row=4はアカンやつやインストールの概要 fluent-plugin-bigqueryのREADME.md を読みつつ、以下の記事そのままでできました。ありがとうございます。FluentdでGoogle BigQueryにログを挿入してクエリを実行する - Qiita projectはウェブ上から作り、dataset(db)とtableはGoogle Cloud SDK付属のbqコマンドで作りました。google-cloud-sdkはbrew caskでインストールできます。 $ bq mk masutakanet:nginx$ bq mk -t masutakanet:nginx.access bigquery-nginx.json td-agent.confはこのようになりました。<match nginx.access.masutaka.net> type copy <store> type mongo (省略) </store> <store> type elasticsearch (省略) </store> <store> type growthforecast (省略) </store> <store> type bigquery method insert auth_method private_key email XXXXXXXX@developer.","link":"https://masutaka.net/2014-12-14-1/","isoDate":"2014-12-14T00:00:00.000Z","dateMiliSeconds":1418515200000,"authorName":"masutaka"},{"title":"emacs-helm-ghq v1.4.1 released","content":"https://github.com/masutaka/emacs-helm-ghq/releases/tag/1.4.1 最新のHelmではe000b84 でhelm-files-match-only-basenameが削除され、\nhelm-source-ghqが使えなくなったので修正しました。\nhttps://github.com/masutaka/emacs-helm-ghq/pull/6 https://github.com/masutaka/emacs-helm-ghq/pull/7 削除された関数をただ復活させただけという。。。\n最近のEmacsはdefclassなんてあるんだ。なるほど分からん。\nむしろ、(helm-get-actions-from-type helm-source-locate)がnilを返し\nて、何もactionが発動しないのにハマりました。結果的にDRYに書けたの\nでよかったのかな。\n@yuutayamadaさんありがとうございました。","contentSnippet":"https://github.com/masutaka/emacs-helm-ghq/releases/tag/1.4.1 最新のHelmではe000b84 でhelm-files-match-only-basenameが削除され、helm-source-ghqが使えなくなったので修正しました。https://github.com/masutaka/emacs-helm-ghq/pull/6 https://github.com/masutaka/emacs-helm-ghq/pull/7 削除された関数をただ復活させただけという。。。最近のEmacsはdefclassなんてあるんだ。なるほど分からん。むしろ、(helm-get-actions-from-type helm-source-locate)がnilを返して、何もactionが発動しないのにハマりました。結果的にDRYに書けたのでよかったのかな。@yuutayamadaさんありがとうございました。","link":"https://masutaka.net/2014-12-13-1/","isoDate":"2014-12-13T00:00:00.000Z","dateMiliSeconds":1418428800000,"authorName":"masutaka"},{"title":"markdownの目次を自動生成する方法はこれかな？","content":"http://stackoverflow.com/a/27045099 $ npm install -g coryfklein/doctoc $ rehash # for zsh $ doctoc README.md README.mdに自動挿入される。修正せずそのまま使えば良いと思う。\nちなみにNode.jsのインストールはnvmでやると良いと思う。\nnvmのインストール\n$ brew install nvm ~/.zshenvに以下を追加\nexport NVM_DIR=$HOME/.nvm source $(brew --prefix nvm)/nvm.sh Node.jsのインストール\n$ nvm install v0.10.33 $ nvm alias default v0.10.33 ","contentSnippet":"http://stackoverflow.com/a/27045099 $ npm install -g coryfklein/doctoc $ rehash # for zsh $ doctoc README.md README.mdに自動挿入される。修正せずそのまま使えば良いと思う。ちなみにNode.jsのインストールはnvmでやると良いと思う。nvmのインストール$ brew install nvm ~/.zshenvに以下を追加export NVM_DIR=$HOME/.nvm source $(brew --prefix nvm)/nvm.sh Node.jsのインストール$ nvm install v0.10.33 $ nvm alias default v0.10.33","link":"https://masutaka.net/2014-12-12-1/","isoDate":"2014-12-12T00:00:00.000Z","dateMiliSeconds":1418342400000,"authorName":"masutaka"},{"title":"会社の技術ブログを書きました(3回目)","content":"[2014-10-20-1] に引き続き、会社の技術ブログを書きました。\nVagrantで簡単に作れる！！RubyやKyotoTycoonのrpmたち｜feedforce Engineers&rsquo; blog CentOSを本番環境で使っている方は、Rubyのバージョンアップはどうして\nいるんですかね？\nrbenvを使っているところもあるのかな。記事にも書いたけど、それだと\nサーバのCIは使いものにならないけど。\n最近はサーバのCIやDockerのおかげか、低レイヤーな技術が見直されてい\nる気がします。前者は今回のrpm、後者はシェルスクリプト。\n個人的には地味な技術は好きなのでちょっとうれしい。","contentSnippet":"[2014-10-20-1] に引き続き、会社の技術ブログを書きました。Vagrantで簡単に作れる！！RubyやKyotoTycoonのrpmたち｜feedforce Engineers’ blog CentOSを本番環境で使っている方は、Rubyのバージョンアップはどうしているんですかね？rbenvを使っているところもあるのかな。記事にも書いたけど、それだとサーバのCIは使いものにならないけど。最近はサーバのCIやDockerのおかげか、低レイヤーな技術が見直されている気がします。前者は今回のrpm、後者はシェルスクリプト。個人的には地味な技術は好きなのでちょっとうれしい。","link":"https://masutaka.net/2014-12-11-1/","isoDate":"2014-12-11T00:00:00.000Z","dateMiliSeconds":1418256000000,"authorName":"masutaka"},{"title":"いつも日報書くときに使っているスクリプトをGem化した","content":"Githubで今日なにをしたか、調べるスクリプトを書いた - きたけーTechブログ こちらのスクリプトを自分用に変更して使ってましたが、gem化してない\nのが気持ち悪かったので、この度公開しました。\n github-nippou | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.\n  ◆インストール方法\n$ gem install github-nippou\n◆説明\n実行するとmarkdown形式で出力されるので、Qiita:Teamにペタっと貼っています。\n$ github-nippou ＊ [Fix 勤怠1ヶ月前から今日までcsvで - blockgiven/ruboty-kintai](https://github.com/blockgiven/ruboty-kintai/pull/1) by masutaka あらかじめ、GitHubのアカウントとトークンを設定する必要があります。","contentSnippet":"Githubで今日なにをしたか、調べるスクリプトを書いた - きたけーTechブログ こちらのスクリプトを自分用に変更して使ってましたが、gem化してないのが気持ち悪かったので、この度公開しました。 github-nippou | RubyGems.org | your community gem host  RubyGems.org is the Ruby community's gem hosting service. Instantly publish your gems and install them. Use the API to interact and find out more information about available gems. Become a contributor and enhance the site with your own changes.  ◆インストール方法$ gem install github-nippou◆説明実行するとmarkdown形式で出力されるので、Qiita:Teamにペタっと貼っています。$ github-nippou ＊ [Fix 勤怠1ヶ月前から今日までcsvで - blockgiven/ruboty-kintai](https://github.com/blockgiven/ruboty-kintai/pull/1) by masutaka あらかじめ、GitHubのアカウントとトークンを設定する必要があります。","link":"https://masutaka.net/2014-12-07-1/","isoDate":"2014-12-07T00:00:00.000Z","dateMiliSeconds":1417910400000,"authorName":"masutaka"},{"title":"『X'mas Collections music from BRAVELY DEFAULT』がめっちゃいい","content":"  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  もう何十回も聴きましたが、めっちゃ良いです。仕事中はエンドレスでか\nけてますし、今も聴いてます。あとは寝る前と起きた時。\n中でも『永遠の刹那』がすごい変わり様で壮大な曲になっています。\n Original (Disc1 Track02)  X&rsquo;mas Collections (Trask04)   もう別の曲になっていて、初め分かりませんでした。\n逆にTrack12の『追憶は郷愁の調べ』はなぜこのアレンジにしたんでしょ\nう？違和感ありまくりです。\nにしてもいいサントラだなー\nブレイブリーセカンド もそろそろ出るのかな。楽しみです。あ、その前に\nレジェンドオブレガシー が出ますね。Newニンテンドー3DS も合わせて買わ\nないと。。。\n  ","contentSnippet":"loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  もう何十回も聴きましたが、めっちゃ良いです。仕事中はエンドレスでかけてますし、今も聴いてます。あとは寝る前と起きた時。中でも『永遠の刹那』がすごい変わり様で壮大な曲になっています。 Original (Disc1 Track02)  X’mas Collections (Trask04)   もう別の曲になっていて、初め分かりませんでした。逆にTrack12の『追憶は郷愁の調べ』はなぜこのアレンジにしたんでしょう？違和感ありまくりです。にしてもいいサントラだなーブレイブリーセカンド もそろそろ出るのかな。楽しみです。あ、その前にレジェンドオブレガシー が出ますね。Newニンテンドー3DS も合わせて買わないと。。。","link":"https://masutaka.net/2014-12-03-1/","isoDate":"2014-12-03T00:00:00.000Z","dateMiliSeconds":1417564800000,"authorName":"masutaka"},{"title":"package.elでインストールしたパッケージをCaskで管理することにした","content":"今まで\n「package.elでインストールしたパッケージはGitリポジトリに丸ごとcommit」\nという豪快な管理をしていました。\nアップデートで不具合があってもすぐ戻せるという利点はあったものの、\n Gitリポジトリが肥大化する なんか頭悪い\nという問題がありました。  ちょっと前からCask で管理するのが流行っています。\n Cask - naoyaのはてなダイアリー  package.elから Caskに切り替えました - Life is very short   brewでインストールすると依存でEmacsが入るのでNG。\n $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python\n こちらでのインストールは単純に~/.caskにgit cloneするだけでしたので、\nCaskに移行しました。\nGitで管理していたとはいえ、インストールされたパッケージが直接イン\nストールしたのか、依存で入ったのか、使わなくなって残っているだけな\nのかの確認がめっちゃ大変でした。2時間くらいかかった。。\nRubyのbundlerのようにCask.lock的なファイルがあればベストでしたが、\nTime Machine使い始めたし[2014-09-10-1] 、まあいいかなと。\nこちらが私のCaskファイル。http://masutaka.net/ からも辿れます。\n 今回の件で[2014-10-25-1] の方法でEmacsをビルドすると、/usr/local\n以下にEmacsがインストールされることに気づきました。。\n一旦/usr/local/bin/emacsをリネームしました。\n追記(2014-11-03):\n[2014-10-25-1] のビルド手順を変更しました。","contentSnippet":"今まで「package.elでインストールしたパッケージはGitリポジトリに丸ごとcommit」という豪快な管理をしていました。アップデートで不具合があってもすぐ戻せるという利点はあったものの、 Gitリポジトリが肥大化する なんか頭悪いという問題がありました。  ちょっと前からCask で管理するのが流行っています。 Cask - naoyaのはてなダイアリー  package.elから Caskに切り替えました - Life is very short   brewでインストールすると依存でEmacsが入るのでNG。 $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python こちらでのインストールは単純に~/.caskにgit cloneするだけでしたので、Caskに移行しました。Gitで管理していたとはいえ、インストールされたパッケージが直接インストールしたのか、依存で入ったのか、使わなくなって残っているだけなのかの確認がめっちゃ大変でした。2時間くらいかかった。。RubyのbundlerのようにCask.lock的なファイルがあればベストでしたが、Time Machine使い始めたし[2014-09-10-1] 、まあいいかなと。こちらが私のCaskファイル。http://masutaka.net/ からも辿れます。 今回の件で[2014-10-25-1] の方法でEmacsをビルドすると、/usr/local以下にEmacsがインストールされることに気づきました。。一旦/usr/local/bin/emacsをリネームしました。追記(2014-11-03):[2014-10-25-1] のビルド手順を変更しました。","link":"https://masutaka.net/2014-11-03-1/","isoDate":"2014-11-03T00:00:00.000Z","dateMiliSeconds":1414972800000,"authorName":"masutaka"},{"title":"Slackを使っている時、⌘-wでウィンドウを閉じないようにした","content":"Slackでうっかり⌘-wするとウィンドウが閉じてしまい、Slackを再起動し\nないと復旧できないですよね？(隣の席の同僚はそうではなった。私だけ？)\nそういうわけでKarabiner (旧名KeyRemap4MacBook)で、⌘-wを無視する設定\nを書きました。\n追加後の~/Library/Application Support/Karabiner/private.xmlはこちら。\n&ldquo;Disable Command-w in Slack&quot;というitemを追加しました。\n 最初の&quot;For Slack ALT+N=move next channel, ALT+P=move previous\nchannel&quot;はMaedaさんのブログで紹介されていたやつです。便利。\nSlackのチャンネル移動をキーボードで簡単に出来るようKarabinerのprivate.xmlを書いた - Glide Note - グライドノート というかなんで⌘-wが有効なんだ。。。\nSee also private.xml Reference Manual 追記(2020-03-21):\n⌘-1 で元に戻せるので設定を削除しました。というか、デフォルト厨なので\nKarabiner 自体使わなくなりました。","contentSnippet":"Slackでうっかり⌘-wするとウィンドウが閉じてしまい、Slackを再起動しないと復旧できないですよね？(隣の席の同僚はそうではなった。私だけ？)そういうわけでKarabiner (旧名KeyRemap4MacBook)で、⌘-wを無視する設定を書きました。追加後の~/Library/Application Support/Karabiner/private.xmlはこちら。“Disable Command-w in Slack\"というitemを追加しました。 最初の\"For Slack ALT+N=move next channel, ALT+P=move previouschannel\"はMaedaさんのブログで紹介されていたやつです。便利。Slackのチャンネル移動をキーボードで簡単に出来るようKarabinerのprivate.xmlを書いた - Glide Note - グライドノート というかなんで⌘-wが有効なんだ。。。See also private.xml Reference Manual 追記(2020-03-21):⌘-1 で元に戻せるので設定を削除しました。というか、デフォルト厨なのでKarabiner 自体使わなくなりました。","link":"https://masutaka.net/2014-11-02-2/","isoDate":"2014-11-02T01:00:00.000Z","dateMiliSeconds":1414890000000,"authorName":"masutaka"},{"title":"MELPAのバッジを付けてMELPA Stableを知るなど","content":"MELPA badge - Life is very short 私も以下のMELPAのパッケージを持っているので、付けてみました。\nhttps://github.com/masutaka/emacs-helm-ghq https://github.com/masutaka/elscreen-mew https://github.com/masutaka/emacs-helm-hatena-bookmark こんなのです。\n    ただ、elscreen-mewとemacs-helm-hatena-bookmarkはMELPA Stableのバッ\nジが表示されませんでした。(というか、MELPA Stableなんて出来てたんや。。)\nmelpaのREADME によると、version-to-list()と互換性のあるバージョン文\n字列をgitやhgのタグに付けるだけでStableとして扱われるそう。&ldquo;1.0.0&rdquo;\nとかですね。prefixに&rsquo;v&rsquo;, &lsquo;v.&rsquo;, &lsquo;v-&lsquo;を付けてもOK\nversion-to-list()はこんな動作です。subr.elに定義されていました。\n知らなかった。\n(version-to-list &#34;1.0.0&#34;) =&gt; (1 0 0)  (version-to-list &#34;1.0.0pre2&#34;) =&gt; (1 0 0 -1 2) emacs-helm-ghqはたまたまタグを付けていたので、Stableバージョンがあ\nると扱われたみたいです。\nhttps://github.com/masutaka/emacs-helm-ghq/tags 他の2つもタグをふったらしばらくしてStableに上がりました。\nhttps://stable.melpa.org/#/elscreen-mew https://stable.melpa.org/#/helm-hatena-bookmark ","contentSnippet":"MELPA badge - Life is very short 私も以下のMELPAのパッケージを持っているので、付けてみました。https://github.com/masutaka/emacs-helm-ghq https://github.com/masutaka/elscreen-mew https://github.com/masutaka/emacs-helm-hatena-bookmark こんなのです。    ただ、elscreen-mewとemacs-helm-hatena-bookmarkはMELPA Stableのバッジが表示されませんでした。(というか、MELPA Stableなんて出来てたんや。。)melpaのREADME によると、version-to-list()と互換性のあるバージョン文字列をgitやhgのタグに付けるだけでStableとして扱われるそう。“1.0.0”とかですね。prefixに’v’, ‘v.’, ‘v-‘を付けてもOKversion-to-list()はこんな動作です。subr.elに定義されていました。知らなかった。(version-to-list \"1.0.0\") => (1 0 0)  (version-to-list \"1.0.0pre2\") => (1 0 0 -1 2) emacs-helm-ghqはたまたまタグを付けていたので、Stableバージョンがあると扱われたみたいです。https://github.com/masutaka/emacs-helm-ghq/tags 他の2つもタグをふったらしばらくしてStableに上がりました。https://stable.melpa.org/#/elscreen-mew https://stable.melpa.org/#/helm-hatena-bookmark","link":"https://masutaka.net/2014-11-02-1/","isoDate":"2014-11-02T00:00:00.000Z","dateMiliSeconds":1414886400000,"authorName":"masutaka"},{"title":"WERCKER-BOX-RVM-VAGRANT-AWSをRuby-2.1.4対応させた","content":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Ruby 2.1.4がリリースされたので。 とは言え、こいつが使っているBOX-RVMのバージョンを上げて デプロイし\nただけです。\nWerckerはDockerに似たBOXを使用するので、継承元のBOXが更新されたら\nデプロイし直す必要があります。\nWercker上でAWSを使ったサーバのCIする方法は[2014-09-14-1] 、\nWERCKER-BOX-RVM-VAGRANT-AWS自体の説明は[2014-09-15-1] をどうぞ。","contentSnippet":"WERCKER-BOX-RVM-VAGRANT-AWS - wercker Ruby 2.1.4がリリースされたので。 とは言え、こいつが使っているBOX-RVMのバージョンを上げて デプロイしただけです。WerckerはDockerに似たBOXを使用するので、継承元のBOXが更新されたらデプロイし直す必要があります。Wercker上でAWSを使ったサーバのCIする方法は[2014-09-14-1] 、WERCKER-BOX-RVM-VAGRANT-AWS自体の説明は[2014-09-15-1] をどうぞ。","link":"https://masutaka.net/2014-11-01-1/","isoDate":"2014-11-01T00:00:00.000Z","dateMiliSeconds":1414800000000,"authorName":"masutaka"},{"title":"MySQLは出力先が標準出力かファイルかによって内容を変える","content":"こちらのブログの受け売りになりますが、タイトルのとおりです。\nMySQL の結果を csv 形式で標準出力させたい - BOOLEANLABEL # 標準出力への出力と $ mysql -u root mysql -e &#39;select count(*) from user&#39; +----------+ | count(*) | +----------+ | 6 | +----------+ # ファイルへの出力は異なります。 $ mysql -u root mysql -e &#39;select count(*) from user&#39; &gt; /tmp/hoge &amp;&amp; cat /tmp/hoge count(*) 6 isatty(3)で判定しているそうです。\n/* mysql-5.6.21/client/mysql.ccの1233行目 */ if (!isatty(0) || !isatty(1)) { status.batch=1; opt_silent=1; ignore_errors=0; } else status.add_to_history=1; 実際に使ってみました。\n/* test.c */ #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int main(int argc, char **argv) { /* 標準出力のファイルディスクリプタは1固定 */ if(isatty(1)) { printf(&#34;貴様！標準出力だな！\\n&#34;); } else { printf(&#34;貴様！ファイル出力だな！\\n&#34;); } return 0; } コンパイル＆実行","contentSnippet":"こちらのブログの受け売りになりますが、タイトルのとおりです。MySQL の結果を csv 形式で標準出力させたい - BOOLEANLABEL # 標準出力への出力と $ mysql -u root mysql -e 'select count(*) from user' +----------+ | count(*) | +----------+ | 6 | +----------+ # ファイルへの出力は異なります。 $ mysql -u root mysql -e 'select count(*) from user' > /tmp/hoge && cat /tmp/hoge count(*) 6 isatty(3)で判定しているそうです。/* mysql-5.6.21/client/mysql.ccの1233行目 */ if (!isatty(0) || !isatty(1)) { status.batch=1; opt_silent=1; ignore_errors=0; } else status.add_to_history=1; 実際に使ってみました。/* test.c */ #include <stdio.h> #include <unistd.h> int main(int argc, char **argv) { /* 標準出力のファイルディスクリプタは1固定 */ if(isatty(1)) { printf(\"貴様！標準出力だな！\\n\"); } else { printf(\"貴様！ファイル出力だな！\\n\"); } return 0; } コンパイル＆実行","link":"https://masutaka.net/2014-10-31-1/","isoDate":"2014-10-31T00:00:00.000Z","dateMiliSeconds":1414713600000,"authorName":"masutaka"},{"title":"rbenv installの時に指定したgemを入れてくれるrbenv-default-gemsが便利","content":"Ruby 2.1.4 リリース 早速インストールしたところ、同僚からrbenv-default-gems を教えてもら\nいました。rbenv pluginです。\nインストールは簡単。git cloneして、\n $ git clone git@github.com :sstephenson/rbenv-default-gems.git ~/.rbenv/plugins/rbenv-default-gems\n ~/.rbenv/default-gemsを作るだけです。\n$ cat ~/.rbenv/default-gems gem-src bundler ghn puppet-lint html2haml octokit git-pr-release gem-search sass github_scouter rbenv install時に上のgemが自動的にインストールされます。\n$ RUBY_CONFIGURE_OPTS=&#34;--with-readline-dir=`brew --prefix readline` --with-openssl-dir=`brew --prefix openssl`&#34; rbenv install 2.1.4 Downloading ruby-2.1.4.tar.gz... -&gt; http://dqw8nmjcqpjn7.cloudfront.net/bf9952cdeb3a0c6a5a27745c9b4c0e5e264e92b669b2b08efb363f5156549204 Installing ruby-2.1.4... Installed ruby-2.1.4 to /Users/masutaka/.rbenv/versions/2.1.4 Fetching: gem-src-0.6.3.gem (100%) # &lt;= ここから ... See also Rbenv-default-gemsを試してみた - akadama ","contentSnippet":"Ruby 2.1.4 リリース 早速インストールしたところ、同僚からrbenv-default-gems を教えてもらいました。rbenv pluginです。インストールは簡単。git cloneして、 $ git clone git@github.com :sstephenson/rbenv-default-gems.git ~/.rbenv/plugins/rbenv-default-gems ~/.rbenv/default-gemsを作るだけです。$ cat ~/.rbenv/default-gems gem-src bundler ghn puppet-lint html2haml octokit git-pr-release gem-search sass github_scouter rbenv install時に上のgemが自動的にインストールされます。$ RUBY_CONFIGURE_OPTS=\"--with-readline-dir=`brew --prefix readline` --with-openssl-dir=`brew --prefix openssl`\" rbenv install 2.1.4 Downloading ruby-2.1.4.tar.gz... -> http://dqw8nmjcqpjn7.cloudfront.net/bf9952cdeb3a0c6a5a27745c9b4c0e5e264e92b669b2b08efb363f5156549204 Installing ruby-2.1.4... Installed ruby-2.1.4 to /Users/masutaka/.rbenv/versions/2.1.4 Fetching: gem-src-0.6.3.gem (100%) # <= ここから ... See also Rbenv-default-gemsを試してみた - akadama","link":"https://masutaka.net/2014-10-28-1/","isoDate":"2014-10-28T00:00:00.000Z","dateMiliSeconds":1414454400000,"authorName":"masutaka"},{"title":"ローカルの静的コンテンツをHerokuに置き始めた","content":"他の人に見せたくない静的コンテンツは、ローカルのnginx経由で見られ\nるようにしていたんだけど、いろいろ面倒になってきたのでHerokuに置き\n始めた。\nやり方は簡単で、以下のリポジトリのHerokuボタンを押すだけ。\nmasutaka/heroku-static-contents public以下に.htmlとかをcommitして、git push heroku masterすればOK。\nBASIC認証も使えて便利。","contentSnippet":"他の人に見せたくない静的コンテンツは、ローカルのnginx経由で見られるようにしていたんだけど、いろいろ面倒になってきたのでHerokuに置き始めた。やり方は簡単で、以下のリポジトリのHerokuボタンを押すだけ。masutaka/heroku-static-contents public以下に.htmlとかをcommitして、git push heroku masterすればOK。BASIC認証も使えて便利。","link":"https://masutaka.net/2014-10-25-2/","isoDate":"2014-10-25T01:00:00.000Z","dateMiliSeconds":1414198800000,"authorName":"masutaka"},{"title":"Emacs-24.4 on OSX Yosemiteのビルド手順詳細","content":"なんとかビルド出来ました。こりゃEmacs人口が減るわけだ。。\nEmacs-24.3の頃からクラッシュする問題に悩まされていたんです。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  そんな中見つけたのがMew-jaのこの情報 。\n 素の Emacs は、Mac では不安定です。山本さんのパッチを当てて使うと、ほ\nとんど落ちなくなります。\n ftp://ftp.math.s.chiba-u.ac.jp/emacs/  &ndash;かず\n そこで今回からこのパッチ(experimental/hackers-onlyパッチ)を使うことにしました。\nEmacs24 のインストールと新機能 : 紹介マニア インラインパッチ(IMEパッチ)は当たらなくなるので、ac-mozc.el +\nmozc_emacs_helperを使うことにしました。というかインラインパッチの\n最新はどこに。。(2015-01-04追記: もういらないみたいです。→ [2015-01-04-1] )\nmozc-emacs-helperをインストールするhomebrewを書いた｜Act as Professional 最終的なビルド手順はこちら。前述の紹介マニアのやり方ほぼそのままです。\nデフォルトでは/usr/local以下に一部インストールされてしまうので、\nconfigureに&ndash;prefixオプションを指定し、~/opt以下に変更しています。\nこの辺はご自由に。パッチなしのビルドではなぜ必要ないかは調べていません。\n$ curl -LO http://ftp.gnu.org/pub/gnu/emacs/emacs-24.4.tar.xz $ curl -LO ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-24.4-mac-5.2.tar.gz $ tar xfJ emacs-24.4.tar.xz $ tar xfz emacs-24.4-mac-5.2.tar.gz $ cd emacs-24.","contentSnippet":"なんとかビルド出来ました。こりゃEmacs人口が減るわけだ。。Emacs-24.3の頃からクラッシュする問題に悩まされていたんです。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  そんな中見つけたのがMew-jaのこの情報 。 素の Emacs は、Mac では不安定です。山本さんのパッチを当てて使うと、ほとんど落ちなくなります。 ftp://ftp.math.s.chiba-u.ac.jp/emacs/  –かず そこで今回からこのパッチ(experimental/hackers-onlyパッチ)を使うことにしました。Emacs24 のインストールと新機能 : 紹介マニア インラインパッチ(IMEパッチ)は当たらなくなるので、ac-mozc.el +mozc_emacs_helperを使うことにしました。というかインラインパッチの最新はどこに。。(2015-01-04追記: もういらないみたいです。→ [2015-01-04-1] )mozc-emacs-helperをインストールするhomebrewを書いた｜Act as Professional 最終的なビルド手順はこちら。前述の紹介マニアのやり方ほぼそのままです。デフォルトでは/usr/local以下に一部インストールされてしまうので、configureに–prefixオプションを指定し、~/opt以下に変更しています。この辺はご自由に。パッチなしのビルドではなぜ必要ないかは調べていません。$ curl -LO http://ftp.gnu.org/pub/gnu/emacs/emacs-24.4.tar.xz $ curl -LO ftp://ftp.math.s.chiba-u.ac.jp/emacs/emacs-24.4-mac-5.2.tar.gz $ tar xfJ emacs-24.4.tar.xz $ tar xfz emacs-24.4-mac-5.2.tar.gz $ cd emacs-24.","link":"https://masutaka.net/2014-10-25-1/","isoDate":"2014-10-25T00:00:00.000Z","dateMiliSeconds":1414195200000,"authorName":"masutaka"},{"title":"会社の技術ブログを書きました(2回目)","content":"[2014-08-09-1] に引き続き、会社の技術ブログを書きました。\nJenkinsでサーバのCIを始めました｜feedforce Engineers&rsquo; blog ネタ的には新しくはないのですが、フィードフォースのエンジニアが今今\nどんなことをしているかを伝えたくて書きました。\nこういう記事を投稿し続けていけば、興味あるエンジニアの目に止まるん\nじゃないかと。\n弊社は最近採用に力を入れています。\n結構気軽に会いにいけるので、興味ある方はどうぞ☆\n フィードフォースは「会いにいける！」ベンチャーです！(社長指名可) - 株式会社フィードフォースの求人 - Wantedly  Rubyで開発したいエンジニアをウォンテッド！（土日面談／スカイプ面談可） - 株式会社フィードフォースの求人 - Wantedly  【株式会社フィードフォースの求人】 【自社サービス開発／新規事業立ち上げ／残業10H以内／土日面談可】Webエンジニア - Forkwell Jobs   ","contentSnippet":"[2014-08-09-1] に引き続き、会社の技術ブログを書きました。JenkinsでサーバのCIを始めました｜feedforce Engineers’ blog ネタ的には新しくはないのですが、フィードフォースのエンジニアが今今どんなことをしているかを伝えたくて書きました。こういう記事を投稿し続けていけば、興味あるエンジニアの目に止まるんじゃないかと。弊社は最近採用に力を入れています。結構気軽に会いにいけるので、興味ある方はどうぞ☆ フィードフォースは「会いにいける！」ベンチャーです！(社長指名可) - 株式会社フィードフォースの求人 - Wantedly  Rubyで開発したいエンジニアをウォンテッド！（土日面談／スカイプ面談可） - 株式会社フィードフォースの求人 - Wantedly  【株式会社フィードフォースの求人】 【自社サービス開発／新規事業立ち上げ／残業10H以内／土日面談可】Webエンジニア - Forkwell Jobs","link":"https://masutaka.net/2014-10-20-1/","isoDate":"2014-10-20T00:00:00.000Z","dateMiliSeconds":1413763200000,"authorName":"masutaka"},{"title":"Werckerのデプロイボタンはなんだかんだ言って便利だった","content":"[2014-09-14-1] に書いたとおり、このmasutaka.netではサーバのCIをして\nいます。\n今までテストが通ってから、手動でCook+Serverspecして不便に感じてませ\nんでしたが、試しにWerckerのデプロイ設定をしてみたら、案外便利でよく\n使っています。\nwercker.ymlはこんな感じです。\n 管理画面からDeploy targetを作る必要があります。ちょっと管理画面が古\nいですが、こちらを参考にしてください。\nwercker + Capistrano で自動デプロイ - milk1000cc&rsquo;s blog 私はTarget nameをProductionにして、SSH keysで作った鍵を\n$WERCKER_SSH_KEY_PRIVATEという名前でwercker.ymlから参照できるように\nしました。\nブラウザからWerckerのサイトに行くのが面倒だけど、個人でChatOpsやっ\nてもなあ&hellip;。とはいえ、やるかもしれませんが。","contentSnippet":"[2014-09-14-1] に書いたとおり、このmasutaka.netではサーバのCIをしています。今までテストが通ってから、手動でCook+Serverspecして不便に感じてませんでしたが、試しにWerckerのデプロイ設定をしてみたら、案外便利でよく使っています。wercker.ymlはこんな感じです。 管理画面からDeploy targetを作る必要があります。ちょっと管理画面が古いですが、こちらを参考にしてください。wercker + Capistrano で自動デプロイ - milk1000cc’s blog 私はTarget nameをProductionにして、SSH keysで作った鍵を$WERCKER_SSH_KEY_PRIVATEという名前でwercker.ymlから参照できるようにしました。ブラウザからWerckerのサイトに行くのが面倒だけど、個人でChatOpsやってもなあ…。とはいえ、やるかもしれませんが。","link":"https://masutaka.net/2014-10-04-1/","isoDate":"2014-10-04T00:00:00.000Z","dateMiliSeconds":1412380800000,"authorName":"masutaka"},{"title":"『ベヨネッタ2』がやってきた！","content":"ちょっとやってみた感じ、良い意味で1のシステムが使いまわされています(けっこう同じw)。前作をやった人は違和感ないでしょう。\nベヨネッタ特有の「連打しない」「回避重要」にも慣れてきました。下手くそですけどね！\n あ、同封の1は無駄に任天堂色がついており、なかなか良さげです。ご覧のとおりのピー◯姫になります。\nんで、Wii Uはベヨネッタ2のために買いました。ドラクエ7のために3DSを買った[2013-02-16-1] 以来です。ちなみにPS3はデビルメイクライ4。\nそれにしても、Wii Uの予想以上の性能の良さにビックリ。全くストレスなく動きます。ベヨネッタ出たての頃、PS3はローディングがめちゃめちゃ遅かったのに(その後のアップデートでましになった)。\nコントローラにも画面があるし、ここまでの性能必要なのかしら？w\n Wii U本体縦置きスタンド も買いました。送料込みで500円と安かったので。\n※今回は柴田さんの記事でよし買おう！と思いました。\n Wii U を買った - HsbtDiary(2014-08-31)  Wii U の縦置き台を買った - HsbtDiary(2014-09-11)   P.S.\n序盤にジェット機の上で戦うやつ、Kunoichi のオマージュ？と思いました。両方とも田中敦子 さんだし、キャラ被っているし。どうなんでしょう？","contentSnippet":"ちょっとやってみた感じ、良い意味で1のシステムが使いまわされています(けっこう同じw)。前作をやった人は違和感ないでしょう。ベヨネッタ特有の「連打しない」「回避重要」にも慣れてきました。下手くそですけどね！ あ、同封の1は無駄に任天堂色がついており、なかなか良さげです。ご覧のとおりのピー◯姫になります。んで、Wii Uはベヨネッタ2のために買いました。ドラクエ7のために3DSを買った[2013-02-16-1] 以来です。ちなみにPS3はデビルメイクライ4。それにしても、Wii Uの予想以上の性能の良さにビックリ。全くストレスなく動きます。ベヨネッタ出たての頃、PS3はローディングがめちゃめちゃ遅かったのに(その後のアップデートでましになった)。コントローラにも画面があるし、ここまでの性能必要なのかしら？w Wii U本体縦置きスタンド も買いました。送料込みで500円と安かったので。※今回は柴田さんの記事でよし買おう！と思いました。 Wii U を買った - HsbtDiary(2014-08-31)  Wii U の縦置き台を買った - HsbtDiary(2014-09-11)   P.S.序盤にジェット機の上で戦うやつ、Kunoichi のオマージュ？と思いました。両方とも田中敦子 さんだし、キャラ被っているし。どうなんでしょう？","link":"https://masutaka.net/2014-09-23-3/","isoDate":"2014-09-23T02:00:00.000Z","dateMiliSeconds":1411437600000,"authorName":"masutaka"},{"title":"GrowthForecastがsegmentation faultで落ちるのでrelocatable-perlを使い始めた件","content":"こちらも前回[2014-09-23-1] に引き続き、さくらのVPS上のUbuntu 14.04の話です。\n今までのUbuntu 12.04 32bitではGrowthForecast は問題なく動いていたのに、Ubuntu 14.04 64bitにしたらなぜか動かなくなりました。。\nPerlはplenvでインストールした5.20.0と5.20.1で確認。GrowthForecastは最新。\n$ carton exec -- perl growthforecast.pl --data-dir . --enable-float-number &amp; zsh: segmentation fault carton exec growthforecast.pl --data-dir . --enable-float-number (エラーメッセージはメモしてなかったので適当) ググってみたらこちらを発見。\nhttps://github.com/shoichikaji/relocatable-perl-growthforecast って、YAPC[2014-08-31-1] のLTで発表されていたKajiさんじゃないですか。\nリロケータブル Perl - skaji&rsquo;sblog にも紹介記事があります。\nひとことで言うと「ツールのためにPerlインストールのだるいので、再配置可能なPerlにしてツールと一緒に配布しちゃえばいいんじゃね？」というやつです。\nトラブル続きで意識が低くなっているので、リリース版をそのまま使用。\n$ mkdir ~/growthforecast &amp;&amp; cd $_ $ wget https://github.com/shoichikaji/relocatable-perl-growthforecast/releases/download/0.23/growthforecast-0.83-x86_64-linux.tar.gz $ tar xzf growthforecast-0.83-x86_64-linux.tar.gz $ ./growthforecast-0.83-x86_64-linux/bin/growthforecast.pl --data-dir . --enable-float-number &amp; 動いた！ http://masutaka.net:5125 しかし、、\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"","contentSnippet":"こちらも前回[2014-09-23-1] に引き続き、さくらのVPS上のUbuntu 14.04の話です。今までのUbuntu 12.04 32bitではGrowthForecast は問題なく動いていたのに、Ubuntu 14.04 64bitにしたらなぜか動かなくなりました。。Perlはplenvでインストールした5.20.0と5.20.1で確認。GrowthForecastは最新。$ carton exec -- perl growthforecast.pl --data-dir . --enable-float-number & zsh: segmentation fault carton exec growthforecast.pl --data-dir . --enable-float-number (エラーメッセージはメモしてなかったので適当) ググってみたらこちらを発見。https://github.com/shoichikaji/relocatable-perl-growthforecast って、YAPC[2014-08-31-1] のLTで発表されていたKajiさんじゃないですか。リロケータブル Perl - skaji’sblog にも紹介記事があります。ひとことで言うと「ツールのためにPerlインストールのだるいので、再配置可能なPerlにしてツールと一緒に配布しちゃえばいいんじゃね？」というやつです。トラブル続きで意識が低くなっているので、リリース版をそのまま使用。$ mkdir ~/growthforecast && cd $_ $ wget https://github.com/shoichikaji/relocatable-perl-growthforecast/releases/download/0.23/growthforecast-0.83-x86_64-linux.tar.gz $ tar xzf growthforecast-0.83-x86_64-linux.tar.gz $ ./growthforecast-0.83-x86_64-linux/bin/growthforecast.pl --data-dir . --enable-float-number & 動いた！ http://masutaka.net:5125 しかし、、loading...   if (localStorage.getItem(\"pref-theme\") === \"","link":"https://masutaka.net/2014-09-23-2/","isoDate":"2014-09-23T01:00:00.000Z","dateMiliSeconds":1411434000000,"authorName":"masutaka"},{"title":"さくらのVPSでCookがダンマリになる件を回避した","content":"[2013-05-19-1] にインストールしたUbuntu 12.04はうっかり32bit版でした。。仕方がないのでUbuntu 14.04へのアップグレードがてら、クリーンインストールすることにしました。\n管理画面からポチポチしてOSのインストールは完了。CookはあらかじめVirtualBoxとEC2で確認していたので万全です(ｷﾘｯ\nと思いきや、いつまでたってもRecipeが処理されません&hellip;。\n$ knife solo cook masutaka.net Running Chef on masutaka.net... Checking Chef version... Uploading the kitchen... Generating solo config... Running Chef... Starting Chef Client, version 11.16.2 (ここでダンマリ) これまた仕方がないので、サーバ側の/opt/chef/embedded/lib/ruby/gems/1.9.1/gems以下をprintfデバッグ(というかpデバッグか)で調べたところ、Chefがサーバ情報を取得するときに使うOhaiのGCEプラグインから返ってこないことがわかりました。GCEとはGoogle Compute Engineです。なんでChefが？\nで、結論から言うと、GCEプラグインをOFFにしたら解決しました。\nknife solo prepareのあとに/opt/chefが作られるので、/opt/chef/embedded/lib/ruby/gems/1.9.1/gems/ohai-7.4.0/lib/ohai/config.rbを以下のように修正。あとはknife solo cookするだけです。knife solo bootstrapは出来ないことになります。\n default :disabled_plugins, []\n↓\ndefault :disabled_plugins, [:GCE]\n knife soloはchef-soloをリモートから実行するコマンドで、\n /opt/chef/embedded/bin/ruby /usr/bin/chef-solo -c /home/masutaka/chef-solo/solo.rb -j /home/masutaka/chef-solo/dna.json\nのようなchef-soloコマンドを実行します。root権限だったかな？\n この/home/masutaka/chef-solo/solo.rbに\n Ohai::Config[:disabled_plugins] = [:GCE]\nを書き、前述のchef-soloコマンドを実行すれば/opt/chef以下を修正する必要はありませんが、残念ながらこのファイルはknife solo cook時に自動生成されます。","contentSnippet":"[2013-05-19-1] にインストールしたUbuntu 12.04はうっかり32bit版でした。。仕方がないのでUbuntu 14.04へのアップグレードがてら、クリーンインストールすることにしました。管理画面からポチポチしてOSのインストールは完了。CookはあらかじめVirtualBoxとEC2で確認していたので万全です(ｷﾘｯと思いきや、いつまでたってもRecipeが処理されません…。$ knife solo cook masutaka.net Running Chef on masutaka.net... Checking Chef version... Uploading the kitchen... Generating solo config... Running Chef... Starting Chef Client, version 11.16.2 (ここでダンマリ) これまた仕方がないので、サーバ側の/opt/chef/embedded/lib/ruby/gems/1.9.1/gems以下をprintfデバッグ(というかpデバッグか)で調べたところ、Chefがサーバ情報を取得するときに使うOhaiのGCEプラグインから返ってこないことがわかりました。GCEとはGoogle Compute Engineです。なんでChefが？で、結論から言うと、GCEプラグインをOFFにしたら解決しました。knife solo prepareのあとに/opt/chefが作られるので、/opt/chef/embedded/lib/ruby/gems/1.9.1/gems/ohai-7.4.0/lib/ohai/config.rbを以下のように修正。あとはknife solo cookするだけです。knife solo bootstrapは出来ないことになります。 default :disabled_plugins, []↓default :disabled_plugins, [:GCE] knife soloはchef-soloをリモートから実行するコマンドで、 /opt/chef/embedded/bin/ruby /usr/bin/chef-solo -c /home/masutaka/chef-solo/solo.rb -j /home/masutaka/chef-solo/dna.jsonのようなchef-soloコマンドを実行します。root権限だったかな？ この/home/masutaka/chef-solo/solo.rbに Ohai::Config[:disabled_plugins] = [:GCE]を書き、前述のchef-soloコマンドを実行すれば/opt/chef以下を修正する必要はありませんが、残念ながらこのファイルはknife solo cook時に自動生成されます。","link":"https://masutaka.net/2014-09-23-1/","isoDate":"2014-09-23T00:00:00.000Z","dateMiliSeconds":1411430400000,"authorName":"masutaka"},{"title":"WerckerでRVMとVagrantのBoxを作った","content":"昨日[2014-09-14-1] の記事より。\n wercker.ymlも毎回Vagrantをインストールして、vagrant upするという無\n駄なことをしているので、Docker使って時短させるかもしれない。\n この場合Dockerは間違い。Wercker的にはBox使うのが正解なので作ってみ\nました。(このくらいのBoxはあるかと思ったらなかったのが意外でした。)\n  以下のようにinheritsを使うと、任意のBoxを継承できるみたいです。\nちょっと前までwercker.ymlに複数書けばそうなるかと思ってました。  inherits: wercker/rvm@2.0.1  実コードはスクリプトのベタ書きだけです。\nscript: | VAGRANT_VERSION=1.6.5 wget https://dl.bintray.com/mitchellh/vagrant/vagrant_${VAGRANT_VERSION}_x86_64.deb sudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb vagrant plugin install vagrant-aws unf あとはWerckerの管理画面からGitHubのリポジトリを登録し、Wercker\ndirectoryにデプロイすれば使えます。Public Appにすることをお忘れなく。\nwercker.ymlはこのようになりました。昨日 と比べるとBoxがwercker/rvmか\nらmasutaka/rvm-vagrant-awsに変わったことと、vagrantやvagrant-awsプ\nラグインをインストールしてないのが分かると思います。\n Boxの作り方自体はこちらが参考になると思います。\nwerckerで自分のBOXを作ってみた - 紺屋高尾 11分33秒かかっていたテストが10分46秒に短縮されました！\nって、あれ、あんまり変わってない。。\nパフォーマンス云々より、Dockerっぽく改善できたので良しとします。\n今度はEC2使わずにWerckerでDocker立ち上げてCIしたいなあ。","contentSnippet":"昨日[2014-09-14-1] の記事より。 wercker.ymlも毎回Vagrantをインストールして、vagrant upするという無駄なことをしているので、Docker使って時短させるかもしれない。 この場合Dockerは間違い。Wercker的にはBox使うのが正解なので作ってみました。(このくらいのBoxはあるかと思ったらなかったのが意外でした。)  以下のようにinheritsを使うと、任意のBoxを継承できるみたいです。ちょっと前までwercker.ymlに複数書けばそうなるかと思ってました。  inherits: wercker/rvm@2.0.1  実コードはスクリプトのベタ書きだけです。script: | VAGRANT_VERSION=1.6.5 wget https://dl.bintray.com/mitchellh/vagrant/vagrant_${VAGRANT_VERSION}_x86_64.deb sudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb vagrant plugin install vagrant-aws unf あとはWerckerの管理画面からGitHubのリポジトリを登録し、Werckerdirectoryにデプロイすれば使えます。Public Appにすることをお忘れなく。wercker.ymlはこのようになりました。昨日 と比べるとBoxがwercker/rvmからmasutaka/rvm-vagrant-awsに変わったことと、vagrantやvagrant-awsプラグインをインストールしてないのが分かると思います。 Boxの作り方自体はこちらが参考になると思います。werckerで自分のBOXを作ってみた - 紺屋高尾 11分33秒かかっていたテストが10分46秒に短縮されました！って、あれ、あんまり変わってない。。パフォーマンス云々より、Dockerっぽく改善できたので良しとします。今度はEC2使わずにWerckerでDocker立ち上げてCIしたいなあ。","link":"https://masutaka.net/2014-09-15-1/","isoDate":"2014-09-15T00:00:00.000Z","dateMiliSeconds":1410739200000,"authorName":"masutaka"},{"title":"Wercker + Vagrant + AWS + serverspecでChefのレシピをCIする","content":"[2014-01-09-1] からmasutaka.netのCIを開始したが、残念ながら\nmasutaka.netに直接serverspecする、なんちゃってCIだった。\nmasutaka.netにcookしてからPRを出して、WerckerにCIさせていた。\nWerckerとAWSを連携させて、テストのたびにサーバをまっさらな状態から\n作り、終わったら破棄することが可能になったので、ここに記録しておく。\n去年くらいに話題になったこの辺の話。\nVagrant + Chef Solo + serverspec + Jenkins でサーバー構築を CI - naoyaのはてなダイアリー naoya/circleci-serverspec なんで今までやらなかったかというと、cookが一発で通らないレシピになっ\nていたから。。気づいてはいたんだけど、本番サーバのテストが通りさえ\nすればよかったし。。。\nインフラ系技術の流れ - Gosuke Miyashita こちらの記事でいうところの、Orchestrationの仕事までChefにやらせてい\nたのが敗因。GitHubのprivateリポジトリにおいてあるdotfilesや、\ngrowthforecast、tiarra、mobircまでもChefにインストールさせていた。\nユーザmasutakaに依存しないレシピに変更して、手元の\nVagrant+VirtualBoxで一発でspecが通るまでがステップ１。\n次に手元のVagrant+AWSで同じことが出来るまでがステップ２。\nこれをWercker上で実行できるようにwercker.ymlを書き換えたのがステッ\nプ３。\n最終的なVagrantfileとwercker.ymlは以下のとおり。\n いくつかハマったけど、凡ミスだったので特には触れない。上の設定に従\nえば同じことは出来るはず。(CircleCIだと各インスタンスにssh出来るの\nで、調査は早かったんだろうと夢想。)\nでも一点だけad hocな対応をしていて、plenvやrbenvを使ったPerl/Rubyの\nインストールはビルド済みのtar ballを展開するだけに変更した。\nWerckerはビルドが5分間止まると失敗だと見なすから。ビルド全体の時間\nは25分までOK。\nそもそもImmutable Infrastructure的にplenvやrbenvを使うのはどうなの？\nという節もあって、そこは今後変えるかもしれない。\nwercker.ymlも毎回Vagrantをインストールして、vagrant upするという無\n駄なことをしているので、Docker使って時短させるかもしれない。\nとりあえずCI出来るようになったので、今回はこれで良しとする。","contentSnippet":"[2014-01-09-1] からmasutaka.netのCIを開始したが、残念ながらmasutaka.netに直接serverspecする、なんちゃってCIだった。masutaka.netにcookしてからPRを出して、WerckerにCIさせていた。WerckerとAWSを連携させて、テストのたびにサーバをまっさらな状態から作り、終わったら破棄することが可能になったので、ここに記録しておく。去年くらいに話題になったこの辺の話。Vagrant + Chef Solo + serverspec + Jenkins でサーバー構築を CI - naoyaのはてなダイアリー naoya/circleci-serverspec なんで今までやらなかったかというと、cookが一発で通らないレシピになっていたから。。気づいてはいたんだけど、本番サーバのテストが通りさえすればよかったし。。。インフラ系技術の流れ - Gosuke Miyashita こちらの記事でいうところの、Orchestrationの仕事までChefにやらせていたのが敗因。GitHubのprivateリポジトリにおいてあるdotfilesや、growthforecast、tiarra、mobircまでもChefにインストールさせていた。ユーザmasutakaに依存しないレシピに変更して、手元のVagrant+VirtualBoxで一発でspecが通るまでがステップ１。次に手元のVagrant+AWSで同じことが出来るまでがステップ２。これをWercker上で実行できるようにwercker.ymlを書き換えたのがステップ３。最終的なVagrantfileとwercker.ymlは以下のとおり。 いくつかハマったけど、凡ミスだったので特には触れない。上の設定に従えば同じことは出来るはず。(CircleCIだと各インスタンスにssh出来るので、調査は早かったんだろうと夢想。)でも一点だけad hocな対応をしていて、plenvやrbenvを使ったPerl/Rubyのインストールはビルド済みのtar ballを展開するだけに変更した。Werckerはビルドが5分間止まると失敗だと見なすから。ビルド全体の時間は25分までOK。そもそもImmutable Infrastructure的にplenvやrbenvを使うのはどうなの？という節もあって、そこは今後変えるかもしれない。wercker.ymlも毎回Vagrantをインストールして、vagrant upするという無駄なことをしているので、Docker使って時短させるかもしれない。とりあえずCI出来るようになったので、今回はこれで良しとする。","link":"https://masutaka.net/2014-09-14-1/","isoDate":"2014-09-14T00:00:00.000Z","dateMiliSeconds":1410652800000,"authorName":"masutaka"},{"title":"Time Machineはじめました","content":"やっと自分のMacBookAirでもTime Machine始めました。\n もう21世紀なんです。cronでバックアップスクリプト動かしている場合じゃないんです！\n写真だと大きく見えてしまいますね。縦はiPhone5sより小さなHDDです。\n1TB, 2TB, 500GBがあります。1TBを買いました。\nAirMacに繋げて自動にしようかと思いましたが、直接つないで試したら遅くなかったしルームシェアだし、とりあえず必要なときに手動でバックアップすることにしました(あれ)。\nMacBookAirは120GB程度使っていて、初回は2時間ほどかかりました。差分バックアップは優秀で5分程度です。さすがOSが面倒みていると違います。pdumpfs とか使って頑張っていた頃とは違いますね。pdumpfsには大変お世話になりましたが。\n日曜日にたつをさんのアフィリンクからポチッとして、昨日火曜日に最寄りのローソンで受け取りました。\n「My Passport for Mac」で MacBook Air のバックアップをようやくスタート！ ","contentSnippet":"やっと自分のMacBookAirでもTime Machine始めました。 もう21世紀なんです。cronでバックアップスクリプト動かしている場合じゃないんです！写真だと大きく見えてしまいますね。縦はiPhone5sより小さなHDDです。1TB, 2TB, 500GBがあります。1TBを買いました。AirMacに繋げて自動にしようかと思いましたが、直接つないで試したら遅くなかったしルームシェアだし、とりあえず必要なときに手動でバックアップすることにしました(あれ)。MacBookAirは120GB程度使っていて、初回は2時間ほどかかりました。差分バックアップは優秀で5分程度です。さすがOSが面倒みていると違います。pdumpfs とか使って頑張っていた頃とは違いますね。pdumpfsには大変お世話になりましたが。日曜日にたつをさんのアフィリンクからポチッとして、昨日火曜日に最寄りのローソンで受け取りました。「My Passport for Mac」で MacBook Air のバックアップをようやくスタート！","link":"https://masutaka.net/2014-09-10-1/","isoDate":"2014-09-10T00:00:00.000Z","dateMiliSeconds":1410307200000,"authorName":"masutaka"},{"title":"大腸カメラ飲んだ ٩(๑❛ᴗ❛๑)۶","content":"※内容が内容ですので、閲覧注意で。\n健康診断で潜血が見つかったので飲んで(?)来た。会社の1Q飲み会(焼き肉)に行けなかったのはこういう訳。\n前日の金曜日は21:00までに食事。消化の良い物を少量。野菜ダメとのこと。セブンのぶっかけうどんを食べた。あとなぜかレアチーズ大福。うまかった。炭水化物＼(^o^)／\n【コンビニスイーツ】セブンイレブンのレアチーズ大福が美味しすぎてやばい - NAVER まとめ   8:00に起きて8:15くらいから飲み始めた。2時間で2L飲めとの注意書きが。水に溶かすと色は透明。レモン味と塩味で案外飲みやすかった。バリウムを想像してた。最初の一杯は15分くらいかけてゆっくり飲めとのこと。そうした。\n説明書きどおり、1L飲んだくらいで固形物と水分が出て、あとは水分。残り500mlくらいから少し辛くなってきた。主に味が。\n肛門から小便のようなものが出る感じは不思議。10年くらい前に2週間ほどウィルス性の下痢になったときは脂汗がすごかったが、今回はそんなことない。むしろ気持ちよくシャーっと出せた。徐々に透明になっていき、最後は黄色みがかった透明に。胆汁由来の色らしい。これでOKなはず。\nネット見ながらだらだら飲んでたら2時間オーバー。2時間15分くらいかな。水分はずっと取ってよし。むしろ脱水症状を抑えるために積極的に取るべしとのこと。シャワー浴びて病院にGO。お腹が安定しなくてちょっとギリギリだった。\n14:05頃阿佐ヶ谷駅着。新宿から総武線に乗ったら、電車が中野で引き返して困惑した。\n14:10河北総合病院 着。受付後、内視鏡室で再度受付。大便の写真一覧を見せられて、一番薄いやつを選んだ。OK。\nそのあと着替え。上は浴衣ぽいやつ、下は使い捨てズボン。お尻の部分に縦の切れ目がある。テレビ見ながら待つ。長い。\n15:00前から検査開始。ベッドに横たわったあと、注意事項の説明あり。仮にポリープが見つかって切除する場合は1週間ほど食事制限があるとか、帰りは車も自転車もダメだとか。直後に別の先生から同じことをまた言われて？？？になった。\n(たぶん)ぼーっとする注射を打つ。そのあとすぐ始まったので、麻酔ではなかったと思う。腸の運動を抑制するやつかと。\n問診もするかと思ってたところで急に始まった。横向きで自分の腸内が映ったモニターを見ることが出来る。なかなかきれい。\n往路はモニターを見る余裕があったが、復路は時々奥に戻る時があって、それがきつかった。痛いわけではないのだけど。この時先生が写真を撮ってた気が。\n終わると1時間ほど休憩スペースに。カーテンに仕切られた半個室の部屋。お腹が張ってガスを出すことしか考えてなかった。頭がボーっとしていた。\n着替えてトイレに行ってガスをたくさん出して終わり。今日は消化の良い物にして下さいとのこと。明日からはいつもどおりでOK。週末の社内飲みに参加できそうで安心。\n阿佐ヶ谷の飲み屋に行こうかと思ってたけど断念＆残念。そういう体調＆気分でもなかったし。\n結局阿佐ヶ谷のはなまるうどん へ。帰って軽くシャワー浴びて22:00まで寝てた。\n明けて月曜日。結果を聞くために再度訪問。写真を一緒に見ながら「きれいな粘膜ですね」と言われた(๑′ᴗ'๑)ｴﾍﾍღ もちろん異常なし。結果を紹介元(大久保検診センター)に送ってくれるとのこと。そういうきまりらしい。\n土曜日に見つけて気になったミートソース専門店 があったので、食べてから出社した。パスタ屋なのにジャンクで良かった。近所にあったら通っちゃいそう。\n＜感想＞\n最近便秘気味の割に案外入っていなかった。出しても体重にあまり変わりなし。全部出せばお腹が引っ込むと思っていた。このお腹の張りはなんだろう。。自分の大腸きれい。","contentSnippet":"※内容が内容ですので、閲覧注意で。健康診断で潜血が見つかったので飲んで(?)来た。会社の1Q飲み会(焼き肉)に行けなかったのはこういう訳。前日の金曜日は21:00までに食事。消化の良い物を少量。野菜ダメとのこと。セブンのぶっかけうどんを食べた。あとなぜかレアチーズ大福。うまかった。炭水化物＼(^o^)／【コンビニスイーツ】セブンイレブンのレアチーズ大福が美味しすぎてやばい - NAVER まとめ   8:00に起きて8:15くらいから飲み始めた。2時間で2L飲めとの注意書きが。水に溶かすと色は透明。レモン味と塩味で案外飲みやすかった。バリウムを想像してた。最初の一杯は15分くらいかけてゆっくり飲めとのこと。そうした。説明書きどおり、1L飲んだくらいで固形物と水分が出て、あとは水分。残り500mlくらいから少し辛くなってきた。主に味が。肛門から小便のようなものが出る感じは不思議。10年くらい前に2週間ほどウィルス性の下痢になったときは脂汗がすごかったが、今回はそんなことない。むしろ気持ちよくシャーっと出せた。徐々に透明になっていき、最後は黄色みがかった透明に。胆汁由来の色らしい。これでOKなはず。ネット見ながらだらだら飲んでたら2時間オーバー。2時間15分くらいかな。水分はずっと取ってよし。むしろ脱水症状を抑えるために積極的に取るべしとのこと。シャワー浴びて病院にGO。お腹が安定しなくてちょっとギリギリだった。14:05頃阿佐ヶ谷駅着。新宿から総武線に乗ったら、電車が中野で引き返して困惑した。14:10河北総合病院 着。受付後、内視鏡室で再度受付。大便の写真一覧を見せられて、一番薄いやつを選んだ。OK。そのあと着替え。上は浴衣ぽいやつ、下は使い捨てズボン。お尻の部分に縦の切れ目がある。テレビ見ながら待つ。長い。15:00前から検査開始。ベッドに横たわったあと、注意事項の説明あり。仮にポリープが見つかって切除する場合は1週間ほど食事制限があるとか、帰りは車も自転車もダメだとか。直後に別の先生から同じことをまた言われて？？？になった。(たぶん)ぼーっとする注射を打つ。そのあとすぐ始まったので、麻酔ではなかったと思う。腸の運動を抑制するやつかと。問診もするかと思ってたところで急に始まった。横向きで自分の腸内が映ったモニターを見ることが出来る。なかなかきれい。往路はモニターを見る余裕があったが、復路は時々奥に戻る時があって、それがきつかった。痛いわけではないのだけど。この時先生が写真を撮ってた気が。終わると1時間ほど休憩スペースに。カーテンに仕切られた半個室の部屋。お腹が張ってガスを出すことしか考えてなかった。頭がボーっとしていた。着替えてトイレに行ってガスをたくさん出して終わり。今日は消化の良い物にして下さいとのこと。明日からはいつもどおりでOK。週末の社内飲みに参加できそうで安心。阿佐ヶ谷の飲み屋に行こうかと思ってたけど断念＆残念。そういう体調＆気分でもなかったし。結局阿佐ヶ谷のはなまるうどん へ。帰って軽くシャワー浴びて22:00まで寝てた。明けて月曜日。結果を聞くために再度訪問。写真を一緒に見ながら「きれいな粘膜ですね」と言われた(๑′ᴗ'๑)ｴﾍﾍღ もちろん異常なし。結果を紹介元(大久保検診センター)に送ってくれるとのこと。そういうきまりらしい。土曜日に見つけて気になったミートソース専門店 があったので、食べてから出社した。パスタ屋なのにジャンクで良かった。近所にあったら通っちゃいそう。＜感想＞最近便秘気味の割に案外入っていなかった。出しても体重にあまり変わりなし。全部出せばお腹が引っ込むと思っていた。このお腹の張りはなんだろう。。自分の大腸きれい。","link":"https://masutaka.net/2014-09-08-1/","isoDate":"2014-09-08T00:00:00.000Z","dateMiliSeconds":1410134400000,"authorName":"masutaka"},{"title":"ghqとcdrの出力を一緒にpecoに食わせたら捗った","content":"最近はghq+pecoでリポジトリのあるディレクトリ、cdr+pecoで最近訪れた\nディレクトリに簡単に移動できて、非常に捗っている。\nghq+pecoとcdr+pecoはそれぞれ以下の記事が詳しい。\n ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts  pecoを使い始めた - $shibayu36-&gt;blog;   ただ、ghq+pecoはC-x C-y、cdr+pecoはC-x bと、当然別々のキーになるの\nで、どっちを使うか考えたり間違えたりするのでモヤモヤしていた。\nEmacsは自作のhelm-ghq.el で同じ操作感にしていたので、同じモヤモヤだっ\nたが、最近来たPull Request を取り込んでからは改善。\nC-x b (helm-for-files)でghqの出力も出すことでキーバインドを1つに集\n約できた。C-x C-yのキーバインドは削除。\nC-x bでこのような一覧が表示されて、絞り込む感じ。\n ghq list &ndash;full-pathの出力 現在開いているバッファ 最近開いたファイル カレントディレクトリにあるファイルやディレクトリ  複数のソースを出力していても、混乱しないどころか便利に使えたので、\nzshも同じでいいじゃんと思い、変更した関数がこれ。(リファクタリング出来そう&hellip;)\n ghqとcdrの両方の出力が候補に出ているのが分かると思う。\nC-x bだけでghqとcdrを呼び出せるし、Emacsと操作が同じだし、非常に満\n足行く設定になった。\nIFSをいじっているのは、スペースを含むディレクトリも適切に処理するた\nめ。デリミタを改行だけにしている。\nawkの処理はソートなしの重複削除。なんでこれで出来るのか全く分からな\nいけど。。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  追記(2014-10-07):","contentSnippet":"最近はghq+pecoでリポジトリのあるディレクトリ、cdr+pecoで最近訪れたディレクトリに簡単に移動できて、非常に捗っている。ghq+pecoとcdr+pecoはそれぞれ以下の記事が詳しい。 ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts  pecoを使い始めた - $shibayu36->blog;   ただ、ghq+pecoはC-x C-y、cdr+pecoはC-x bと、当然別々のキーになるので、どっちを使うか考えたり間違えたりするのでモヤモヤしていた。Emacsは自作のhelm-ghq.el で同じ操作感にしていたので、同じモヤモヤだったが、最近来たPull Request を取り込んでからは改善。C-x b (helm-for-files)でghqの出力も出すことでキーバインドを1つに集約できた。C-x C-yのキーバインドは削除。C-x bでこのような一覧が表示されて、絞り込む感じ。 ghq list –full-pathの出力 現在開いているバッファ 最近開いたファイル カレントディレクトリにあるファイルやディレクトリ  複数のソースを出力していても、混乱しないどころか便利に使えたので、zshも同じでいいじゃんと思い、変更した関数がこれ。(リファクタリング出来そう…) ghqとcdrの両方の出力が候補に出ているのが分かると思う。C-x bだけでghqとcdrを呼び出せるし、Emacsと操作が同じだし、非常に満足行く設定になった。IFSをいじっているのは、スペースを含むディレクトリも適切に処理するため。デリミタを改行だけにしている。awkの処理はソートなしの重複削除。なんでこれで出来るのか全く分からないけど。。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  追記(2014-10-07):","link":"https://masutaka.net/2014-09-06-1/","isoDate":"2014-09-06T00:00:00.000Z","dateMiliSeconds":1409961600000,"authorName":"masutaka"},{"title":"YAPC::Asia Tokyo 2014に参加してきた #yapcasia","content":"去年[2013-09-29-1] に引き続き、今年も参加してきました。\nYAPCはバラエティがあり、Perl以外の情報も多いので好きです。\nまさにYet Another Programming Conference\nよく考えたらこのブログもPerlで生成しているので[2007-07-01-1] 、Perl\nとの関わりはゼロではなかった。\n参加者が過去最大ということもあり座れないことが多々ありました。YAPC\nではおなじみの光景みたいですが、この辺改善されると良いですね。Wifi\nとか運営とかは素晴らしかったです。\n以下、参加したトークへのメモ。\nインフラエンジニア(狭義)は死んだ  (スライドがアップされたらここに貼る)\n問題を解決するためには自分の肩書きに縛られないほうが良いよという話。\nまあそうだよね。そういう意味で私は、「Rubyエンジニア」とか「PHPエン\nジニア」とか名乗らないようにしている。最近は「ソフトウェアエンジニ\nア」か「カレー大好き！」かな(えっ\nGo For Perl Mongers  スライドはこちら pecoの牧さんによるGOを書き始めた人向けのトーク。GOはチュートリアル\nを半分くらいやった程度なので、途中から付いて行けなかったorz\n 例外などない オブジェクト指向など忘れてしまえ fmtは「ふむと」と読む GOは継承ではなく委譲  JSON SchemaとAPIテスト  (スライドがアップされたらここに貼る)\n良さそう。JSON Schema知らなかったので、あとで最新の\nWebDBPress(Vol. 82)のWEB APIデザイン鉄則読む。\n作られては消えていく、泡のように儚いクラスタの運用話   テレビと連携するサービスの話。案件ごとにぐわーっとスケールさせて、\n終わったら全部削除とか。期末とか年末はやっぱり忙しいそう。Rakeタス\nクでいろいろ出来るようにしていた。\nあと、PanisherというNodeJS製ベンチマーククラスタ使って、想定される\nシナリオを作って対策し、負荷が原因のトラブルはほぼゼロになったとの\nこと。良さそう。\nGit を使ったツール開発    ghqは自作のemacs-helm-ghq で毎日使っていて、GitHub Kaigiでも紹介され\nたgit-pr-releaseは業務で毎週使っているので、聴いてみたかったトーク。\nGitコマンドの濃い話も聞けました。このトークも超満員で地べたに座って\nいたので、上半分しかスライドが見えなかったけどorz\ngit-browse-remote、以前試したことあったみたい。emacsから使えたら便\n利そうです。\nコマンドラインツールについて語るときに僕の語ること    力強くて熱いトークだった。最近のCLIツール界隈も熱いですね。","contentSnippet":"去年[2013-09-29-1] に引き続き、今年も参加してきました。YAPCはバラエティがあり、Perl以外の情報も多いので好きです。まさにYet Another Programming Conferenceよく考えたらこのブログもPerlで生成しているので[2007-07-01-1] 、Perlとの関わりはゼロではなかった。参加者が過去最大ということもあり座れないことが多々ありました。YAPCではおなじみの光景みたいですが、この辺改善されると良いですね。Wifiとか運営とかは素晴らしかったです。以下、参加したトークへのメモ。インフラエンジニア(狭義)は死んだ  (スライドがアップされたらここに貼る)問題を解決するためには自分の肩書きに縛られないほうが良いよという話。まあそうだよね。そういう意味で私は、「Rubyエンジニア」とか「PHPエンジニア」とか名乗らないようにしている。最近は「ソフトウェアエンジニア」か「カレー大好き！」かな(えっGo For Perl Mongers  スライドはこちら pecoの牧さんによるGOを書き始めた人向けのトーク。GOはチュートリアルを半分くらいやった程度なので、途中から付いて行けなかったorz 例外などない オブジェクト指向など忘れてしまえ fmtは「ふむと」と読む GOは継承ではなく委譲  JSON SchemaとAPIテスト  (スライドがアップされたらここに貼る)良さそう。JSON Schema知らなかったので、あとで最新のWebDBPress(Vol. 82)のWEB APIデザイン鉄則読む。作られては消えていく、泡のように儚いクラスタの運用話   テレビと連携するサービスの話。案件ごとにぐわーっとスケールさせて、終わったら全部削除とか。期末とか年末はやっぱり忙しいそう。Rakeタスクでいろいろ出来るようにしていた。あと、PanisherというNodeJS製ベンチマーククラスタ使って、想定されるシナリオを作って対策し、負荷が原因のトラブルはほぼゼロになったとのこと。良さそう。Git を使ったツール開発    ghqは自作のemacs-helm-ghq で毎日使っていて、GitHub Kaigiでも紹介されたgit-pr-releaseは業務で毎週使っているので、聴いてみたかったトーク。Gitコマンドの濃い話も聞けました。このトークも超満員で地べたに座っていたので、上半分しかスライドが見えなかったけどorzgit-browse-remote、以前試したことあったみたい。emacsから使えたら便利そうです。コマンドラインツールについて語るときに僕の語ること    力強くて熱いトークだった。最近のCLIツール界隈も熱いですね。","link":"https://masutaka.net/2014-08-31-1/","isoDate":"2014-08-31T00:00:00.000Z","dateMiliSeconds":1409443200000,"authorName":"masutaka"},{"title":"QuickSilverからLaunchBar+Snapに乗り換えた","content":"OSXのランチャーの話。\n日本語入力ONの時にQuickSilver を使うと、「emacs」と打つつもりが\n「えまｃｓ」になります。しかたがないのでQuickSilverを一度終了して\n日本語入力OFF、もう一度「emacs」と打っていました。憂鬱です。\n職場の同僚に聞いたところ、LaunchBar は自動で日本語入力OFFにしてくれ\nるそうなので、早速乗り換えました。クリックボード履歴の機能も付いて\nいたので、ClipMenu も要らなくなるかも。\nQuickSilverのHotKeyも使っていたので、同じく紹介されたSnap をインストール。\nちょっとハマったのが、Symbolic linkのApplicationがLaunchBarの検索対\n象にならないことでした。brew caskを使っているので、そういうのが出来\nてしまうのですよね。\n&ldquo;Use OS X LaunchServices database&quot;をOFFにすれば検索対象になりました。 DockのLaunchBarをクリックし、メニューバーを表示。\nIndex -&gt; Show Index に進みます。\nあとは&quot;Use OS X LaunchServices database&quot;をOFFにするだけです。\nこの画像見るとわかりますが、iTunesで任意の曲を再生とかのIndexは削除\nしました。純粋にランチャーとしてしか使わないので。\n追記(2014-12-04):\nSnapはショートカットキーを複数回打つと、カレントと当該アプリがトグ\nルするのがツライので、これだけのためにQuickSilver入れなおしました。","contentSnippet":"OSXのランチャーの話。日本語入力ONの時にQuickSilver を使うと、「emacs」と打つつもりが「えまｃｓ」になります。しかたがないのでQuickSilverを一度終了して日本語入力OFF、もう一度「emacs」と打っていました。憂鬱です。職場の同僚に聞いたところ、LaunchBar は自動で日本語入力OFFにしてくれるそうなので、早速乗り換えました。クリックボード履歴の機能も付いていたので、ClipMenu も要らなくなるかも。QuickSilverのHotKeyも使っていたので、同じく紹介されたSnap をインストール。ちょっとハマったのが、Symbolic linkのApplicationがLaunchBarの検索対象にならないことでした。brew caskを使っているので、そういうのが出来てしまうのですよね。“Use OS X LaunchServices database\"をOFFにすれば検索対象になりました。 DockのLaunchBarをクリックし、メニューバーを表示。Index -> Show Index に進みます。あとは\"Use OS X LaunchServices database\"をOFFにするだけです。この画像見るとわかりますが、iTunesで任意の曲を再生とかのIndexは削除しました。純粋にランチャーとしてしか使わないので。追記(2014-12-04):Snapはショートカットキーを複数回打つと、カレントと当該アプリがトグルするのがツライので、これだけのためにQuickSilver入れなおしました。","link":"https://masutaka.net/2014-08-24-1/","isoDate":"2014-08-24T00:00:00.000Z","dateMiliSeconds":1408838400000,"authorName":"masutaka"},{"title":"10代の自分に教えたかった歯のメンテナンス方法これだけ","content":"歯間ブラシは絶対使え。\n 私は歯並びは良い方で、親知らずもありません。でも、高2の時に銀歯が8本くらい一気に増えてしまいました。\nそんな10代の自分に送る鎮魂記事。もっと早くから使っていれば。。\n超重要な歯間ブラシ 使い始めてから慢性的な歯茎の腫れが引き、出血もなくなり、虫歯になりづらくなりました。3年くらい継続しています。\nお世話になった歯医者さんがこちら。神戸に住んでいた時に通いました。\n神戸市西区の予防歯科なら「たかし歯科」 そもそも初めは歯茎の腫れがひどく、歯間ブラシが全く通りませんでした。歯石を取ってもらって、細いブラシが通る歯から開始。\n重要なのは歯間ブラシがきちんとブラシになっていることです。プラスチックの歯間ブラシは止めましょう。\n毎日寝る前に使っていて、結構取れます。使う前はこれが腫れや虫歯の原因になっていたんだなあと。。。\nはじめは面倒でしたが、習慣化してからは使わないと気持ち悪くなりました。\n日々のメンテナンス まあ、メンテナンスと言っても、そんなに気合入れていません。歯磨きと歯間ブラシは寝る前だけです。\n起きているときは唾液の殺菌作用が効くため、それほど神経質にならなくても良いみたい。\nそういえば昔は食べて3分以内に磨くように言われましたが、今は30分おいた方が良いみたいですね。食べた直後は口の中が酸性になっており、歯が柔らかくなっているためだそう。\n歯茎と歯を痛めたくないので、歯ブラシは柔らかめ、デンタルペーストは研磨剤のないタイプを使っています。\n 寝るときはナイトガードを使います。\n私は寝るときに歯を食いしばるらしく、歯茎が少し減ってきたので、寝る前はナイトガードをしています。歯医者さんで5000円で作れます。\nナイトガードにはハードタイプとソフトタイプがありますが、ハードタイプを作りましょう。\n東京に戻った後に壊れたので、近所の歯医者で作ってもらったんですが、これがソフトタイプでおまけにサイズが合わない。今思えばやる気のない歯医者だったなあ。。。\n近所の別の歯医者さんで作ってもらったナイトガードが上の写真です。調子は上々。定期健診もここでしています。\n宮内デンタルクリニック 良い歯医者さんを見つけるのは難しいですね。\n朝はリステリンでグチュグチュ。\n 3ヶ月に1度の定期健診 3ヶ月に1度、歯医者で歯石を取ってもらいます。最近は色素沈着しやすいので、クリーニングもしてもらいます。ホワイトニングはしていません。\n歯医者からはハガキでお知らせが来て、電話で予約するんですが、せめてメールで通知、ウェブから予約にならないのかなあ。\nと思い、以前聞いてみたらメールでお知らせはできないとのこと。不便。。\nまとめ いろいろ書きましたが、早く再生医療が使えるようになって欲しいですね。メンテナンスは面倒ですから。","contentSnippet":"歯間ブラシは絶対使え。 私は歯並びは良い方で、親知らずもありません。でも、高2の時に銀歯が8本くらい一気に増えてしまいました。そんな10代の自分に送る鎮魂記事。もっと早くから使っていれば。。超重要な歯間ブラシ 使い始めてから慢性的な歯茎の腫れが引き、出血もなくなり、虫歯になりづらくなりました。3年くらい継続しています。お世話になった歯医者さんがこちら。神戸に住んでいた時に通いました。神戸市西区の予防歯科なら「たかし歯科」 そもそも初めは歯茎の腫れがひどく、歯間ブラシが全く通りませんでした。歯石を取ってもらって、細いブラシが通る歯から開始。重要なのは歯間ブラシがきちんとブラシになっていることです。プラスチックの歯間ブラシは止めましょう。毎日寝る前に使っていて、結構取れます。使う前はこれが腫れや虫歯の原因になっていたんだなあと。。。はじめは面倒でしたが、習慣化してからは使わないと気持ち悪くなりました。日々のメンテナンス まあ、メンテナンスと言っても、そんなに気合入れていません。歯磨きと歯間ブラシは寝る前だけです。起きているときは唾液の殺菌作用が効くため、それほど神経質にならなくても良いみたい。そういえば昔は食べて3分以内に磨くように言われましたが、今は30分おいた方が良いみたいですね。食べた直後は口の中が酸性になっており、歯が柔らかくなっているためだそう。歯茎と歯を痛めたくないので、歯ブラシは柔らかめ、デンタルペーストは研磨剤のないタイプを使っています。 寝るときはナイトガードを使います。私は寝るときに歯を食いしばるらしく、歯茎が少し減ってきたので、寝る前はナイトガードをしています。歯医者さんで5000円で作れます。ナイトガードにはハードタイプとソフトタイプがありますが、ハードタイプを作りましょう。東京に戻った後に壊れたので、近所の歯医者で作ってもらったんですが、これがソフトタイプでおまけにサイズが合わない。今思えばやる気のない歯医者だったなあ。。。近所の別の歯医者さんで作ってもらったナイトガードが上の写真です。調子は上々。定期健診もここでしています。宮内デンタルクリニック 良い歯医者さんを見つけるのは難しいですね。朝はリステリンでグチュグチュ。 3ヶ月に1度の定期健診 3ヶ月に1度、歯医者で歯石を取ってもらいます。最近は色素沈着しやすいので、クリーニングもしてもらいます。ホワイトニングはしていません。歯医者からはハガキでお知らせが来て、電話で予約するんですが、せめてメールで通知、ウェブから予約にならないのかなあ。と思い、以前聞いてみたらメールでお知らせはできないとのこと。不便。。まとめ いろいろ書きましたが、早く再生医療が使えるようになって欲しいですね。メンテナンスは面倒ですから。","link":"https://masutaka.net/2014-08-10-1/","isoDate":"2014-08-10T00:00:00.000Z","dateMiliSeconds":1407628800000,"authorName":"masutaka"},{"title":"『パーフェクトRuby on Rails』のサンプルアプリにHerokuボタンを付けてみた","content":"  Herokuボタンがリリースされました。\nHeroku｜Introducing Heroku Button 詳しくはnaoyaさんの記事をどうぞ。\nDeploy to Heroku / Webアプリケーションのポータビリティ再び - naoyaのはてなダイアリー ざっくり言うと、これだけでGitHubの任意のブランチをHerokuにデプロイ出来ます。\n GitHubにHerokuで動くコードを置く 上記リポジトリのrootにapp.jsonを追加する README.mdにHerokuボタンを追加する  もちろんHerokuアカウントは必要です。\n試してみた 試しに[2014-07-10-1] で写経した、『パーフェクトRuby on Rails』の\nサンプルアプリにHerokuボタンを付けてみました。\n  デプロイすると、このような自動生成されたURLが割り当てられます。\nhttp://blooming-reef-2288.herokuapp.com/ blooming-reef-2288の部分は自分で指定することも出来ます。\nアプリケーションを実行するために環境変数やマイグレーションが必要で\nあれば、app.jsonに指定します。\nhttps://github.com/masutaka/awesome-events/blob/master/app.json 任意のブランチもデプロイ出来る 特筆すべきは、任意のブランチをHerokuにデプロイ出来ることです。\n以下のhogehogeブランチのHerokuボタンをクリックすると、左上のタイト\nルがHogeHogeになります。\nhttps://github.com/masutaka/awesome-events/tree/hogehoge CIにhookすれば、テストが成功したら自動でHerokuにデプロイも出来そう\nです。\n今までは、他の開発者やテスターに動く環境を提供するためには、\nQuipperのように 自力でなんとかする必要がありましたが、もうそんなこと\nありません。これは本当にすごい！！\nprivateリポジトリは未対応なようなので、仕事のリポジトリにはまだ使え\nませんが&hellip;。\n任意の場所にHerokuボタンを設置 こちらをクリックしてもデプロイすることが出来ます。\n  このようにGitHub以外に設置する場合は、URLパラメータを指定する必要が\nあります。\nhttps://heroku.com/deploy?template=https://github.com/masutaka/awesome-events ブランチも指定できます。\nhttps://heroku.com/deploy?template=https://github.com/masutaka/awesome-events/tree/hogehoge ヘルプ Herokuボタンについて詳しくはヘルプをどうぞ\nCreating a &lsquo;Deploy to Heroku&rsquo; Button｜Heroku Dev Center  ","contentSnippet":"Herokuボタンがリリースされました。Heroku｜Introducing Heroku Button 詳しくはnaoyaさんの記事をどうぞ。Deploy to Heroku / Webアプリケーションのポータビリティ再び - naoyaのはてなダイアリー ざっくり言うと、これだけでGitHubの任意のブランチをHerokuにデプロイ出来ます。 GitHubにHerokuで動くコードを置く 上記リポジトリのrootにapp.jsonを追加する README.mdにHerokuボタンを追加する  もちろんHerokuアカウントは必要です。試してみた 試しに[2014-07-10-1] で写経した、『パーフェクトRuby on Rails』のサンプルアプリにHerokuボタンを付けてみました。  デプロイすると、このような自動生成されたURLが割り当てられます。http://blooming-reef-2288.herokuapp.com/ blooming-reef-2288の部分は自分で指定することも出来ます。アプリケーションを実行するために環境変数やマイグレーションが必要であれば、app.jsonに指定します。https://github.com/masutaka/awesome-events/blob/master/app.json 任意のブランチもデプロイ出来る 特筆すべきは、任意のブランチをHerokuにデプロイ出来ることです。以下のhogehogeブランチのHerokuボタンをクリックすると、左上のタイトルがHogeHogeになります。https://github.com/masutaka/awesome-events/tree/hogehoge CIにhookすれば、テストが成功したら自動でHerokuにデプロイも出来そうです。今までは、他の開発者やテスターに動く環境を提供するためには、Quipperのように 自力でなんとかする必要がありましたが、もうそんなことありません。これは本当にすごい！！privateリポジトリは未対応なようなので、仕事のリポジトリにはまだ使えませんが…。任意の場所にHerokuボタンを設置 こちらをクリックしてもデプロイすることが出来ます。  このようにGitHub以外に設置する場合は、URLパラメータを指定する必要があります。https://heroku.com/deploy?template=https://github.com/masutaka/awesome-events ブランチも指定できます。https://heroku.com/deploy?template=https://github.com/masutaka/awesome-events/tree/hogehoge ヘルプ Herokuボタンについて詳しくはヘルプをどうぞCreating a ‘Deploy to Heroku’ Button｜Heroku Dev Center","link":"https://masutaka.net/2014-08-09-2/","isoDate":"2014-08-09T01:00:00.000Z","dateMiliSeconds":1407546000000,"authorName":"masutaka"},{"title":"初めて会社の技術ブログを書きました","content":"アジャイル開発で便利だったホワイトボードなどまとめ｜feedforce Engineers&rsquo; blog 先週の話ですが。\n3月に入社して早5ヶ月。\n何度か書く書く詐欺してましたが、ようやく書きました。\n特に奇をてらったわけではなく、自分が興味あることをまとめただけ。\nこのブログも同じです。\n良い記事が書けると、何度も読み返したくなりますね。\n自分が一番の読者です。\n次回は技術の話を書く。","contentSnippet":"アジャイル開発で便利だったホワイトボードなどまとめ｜feedforce Engineers’ blog 先週の話ですが。3月に入社して早5ヶ月。何度か書く書く詐欺してましたが、ようやく書きました。特に奇をてらったわけではなく、自分が興味あることをまとめただけ。このブログも同じです。良い記事が書けると、何度も読み返したくなりますね。自分が一番の読者です。次回は技術の話を書く。","link":"https://masutaka.net/2014-08-09-1/","isoDate":"2014-08-09T00:00:00.000Z","dateMiliSeconds":1407542400000,"authorName":"masutaka"},{"title":"こんな方法で漫画を読み忘れないようにしてる","content":"会社の人とこんな話をしていて、我ながら無駄にシステマチックだなと思っ\nたので、記事にして晒します。\n私は特にガチなヲタではなくて、普通に漫画読むくらいの人です。ダイの\n大冒険とかジョジョとかテラフォーマーズとか、あと格闘漫画系をよく読\nみます。\nツールはRTM とブックオフオンライン を使っています。\n毎週買っている週刊誌はヤングジャンプ(以下ヤンジャン)だけで、\nRTM「1雑用」タブの毎週木曜日に登録している。これで忘れない。完璧。\nヤンジャン以外に読んでいるのは、「はじめの一歩」「刃牙道」「ジョジョ\nリオン」「ヒストリエ」くらい。\nこれらはブックオフオンラインのデマチメールに登録していて、新刊が出\nたらメールで通知が来るようになっている。通知が来たらRTM「5漫画」タ\nブに登録して、3ヶ月に1回とかのタイミングで漫喫でまとめて読む。完璧。\n↑巻数が書かれてない漫画は、読んだことなくてあとで読もうと思った本。\nこんなの公開してどうするんや。。\n他に良い方法があれば教えて下さい。\n追記(2014-08-01):\nどの巻まで読んだかはメモアプリに記録してます。って更新し忘れてる。。","contentSnippet":"会社の人とこんな話をしていて、我ながら無駄にシステマチックだなと思ったので、記事にして晒します。私は特にガチなヲタではなくて、普通に漫画読むくらいの人です。ダイの大冒険とかジョジョとかテラフォーマーズとか、あと格闘漫画系をよく読みます。ツールはRTM とブックオフオンライン を使っています。毎週買っている週刊誌はヤングジャンプ(以下ヤンジャン)だけで、RTM「1雑用」タブの毎週木曜日に登録している。これで忘れない。完璧。ヤンジャン以外に読んでいるのは、「はじめの一歩」「刃牙道」「ジョジョリオン」「ヒストリエ」くらい。これらはブックオフオンラインのデマチメールに登録していて、新刊が出たらメールで通知が来るようになっている。通知が来たらRTM「5漫画」タブに登録して、3ヶ月に1回とかのタイミングで漫喫でまとめて読む。完璧。↑巻数が書かれてない漫画は、読んだことなくてあとで読もうと思った本。こんなの公開してどうするんや。。他に良い方法があれば教えて下さい。追記(2014-08-01):どの巻まで読んだかはメモアプリに記録してます。って更新し忘れてる。。","link":"https://masutaka.net/2014-07-29-1/","isoDate":"2014-07-29T00:00:00.000Z","dateMiliSeconds":1406592000000,"authorName":"masutaka"},{"title":"AWS Summit Tokyo 2014に行ってきた #awssummit","content":"仕事の都合で、２日目だけ行ってきました。天気は曇りでジメジメ。品川駅からほど近い場所でしたが、歩くには暑い日でした。\n全てのセッションの動画や資料はこちらをどうぞ。\nAWS Summit Tokyo 2014 開催レポート｜AWS オープニング  DJ田中氏による派手なオープニング。\nDay2 基調講演 ～Deep Dive to Enterprise～   アマゾン データ サービス ジャパンの社長がAWSを紹介。内容としては、アジリティ(機敏性)重要なのでAWS使うと捗るとかの話。\nガリバー、積水化学、ローソンの講演もありました。大企業もどんどんAWSに移行しています。\nニュース - ローソンや日通がAWSへ全面移行、AWS Summitで明らかに：ITpro あと、堀内氏からAWSのマネジメントコンソールが日本語化されるとの発表もありました。うーん、使うのかな？\n静岡県のGISはなぜAWSを使ったのか  スピーカーの杉本さんが熱かった！\n数々の困難にもめげず、静岡県庁にAWSを導入したお話。一度は理不尽な理由で却下されたけど、3.11を境にクラウド化が一気に進んだそう。\nエンジニアの採用どうやってるんだろ？\nAWS上のシステムはこう作る！InfrastructureAsCode／ImmutableInfrastructureを実践した構築自動化とHinemosで実現するクラウド運用自動化   Chef+Serverspecと、監視ツールHinemosのお話。SI業界にも同じ波は来ているんだなあと。\nモバイルゲームの全世界オンライン対戦を実現する方法を考察する  モバイルゲームで実際に使われている構成の話。レベル高い。\n資料ダウンロード Amazon DynamoDB テーブル設計と実践 Tips   NoSQLなDynamoDBの話。\nConditional Write使ったオンライン対戦ゲームの話が面白かった。\n条件をHPが0より大きい時に設定。数十人同時にボスを攻撃しHPを減らしつつ、最後に攻撃した人カラム(last_attackerだっけ？)にも書き込み。HPがマイナスになると書き込みに失敗することを利用し、戦闘を終了させる。\n同じことをMySQLでやるとLockとか考えなくちゃいけないので大変。\nちょっとバグっていたけど、デモを体験できた。\nhttp://bit.ly/dynamoquest ログ収集のためにRDS使う場合は、DynamoDB使ったほうが良いかも。RedShiftで分析もできるし。\n資料ダウンロード 【パネルディスカッション】 クラウドで実現する次世代マーケティングとは？   すかいらーく、良品計画(無印良品)、スシローのパネルディスカッション。\n無印、顧客時間重視。顧客の能動性を重視。\n無印、オンプレだと初期費用2000万かかるところ、AWS使って数百万。月額も30万とか。\nスシロー、皿にICタグ。位置情報を取得。年10億データだったかな？クラスメソッドと組んでスシデータをAWSへ。Amazon Kinesis使う。\nスシロー、AWS導入検討の時に、10億のデータを経営陣や店長の目の前で処理して見せたのが効果的だったとのこと。皮膚感覚で認識している通りのデータを出したり、見落としていたデータを出したり。\n新しいことをやるメリットと、やらないことのデメリットの天秤にかけると、やらない理由はないとかの話も。\nすかいらーく、無印とスシローもSEOはやってないとのこと。認知度が十分なのと業種的にあまり意味ないからか。店舗登録くらいはやってるそう。","contentSnippet":"仕事の都合で、２日目だけ行ってきました。天気は曇りでジメジメ。品川駅からほど近い場所でしたが、歩くには暑い日でした。全てのセッションの動画や資料はこちらをどうぞ。AWS Summit Tokyo 2014 開催レポート｜AWS オープニング  DJ田中氏による派手なオープニング。Day2 基調講演 ～Deep Dive to Enterprise～   アマゾン データ サービス ジャパンの社長がAWSを紹介。内容としては、アジリティ(機敏性)重要なのでAWS使うと捗るとかの話。ガリバー、積水化学、ローソンの講演もありました。大企業もどんどんAWSに移行しています。ニュース - ローソンや日通がAWSへ全面移行、AWS Summitで明らかに：ITpro あと、堀内氏からAWSのマネジメントコンソールが日本語化されるとの発表もありました。うーん、使うのかな？静岡県のGISはなぜAWSを使ったのか  スピーカーの杉本さんが熱かった！数々の困難にもめげず、静岡県庁にAWSを導入したお話。一度は理不尽な理由で却下されたけど、3.11を境にクラウド化が一気に進んだそう。エンジニアの採用どうやってるんだろ？AWS上のシステムはこう作る！InfrastructureAsCode／ImmutableInfrastructureを実践した構築自動化とHinemosで実現するクラウド運用自動化   Chef+Serverspecと、監視ツールHinemosのお話。SI業界にも同じ波は来ているんだなあと。モバイルゲームの全世界オンライン対戦を実現する方法を考察する  モバイルゲームで実際に使われている構成の話。レベル高い。資料ダウンロード Amazon DynamoDB テーブル設計と実践 Tips   NoSQLなDynamoDBの話。Conditional Write使ったオンライン対戦ゲームの話が面白かった。条件をHPが0より大きい時に設定。数十人同時にボスを攻撃しHPを減らしつつ、最後に攻撃した人カラム(last_attackerだっけ？)にも書き込み。HPがマイナスになると書き込みに失敗することを利用し、戦闘を終了させる。同じことをMySQLでやるとLockとか考えなくちゃいけないので大変。ちょっとバグっていたけど、デモを体験できた。http://bit.ly/dynamoquest ログ収集のためにRDS使う場合は、DynamoDB使ったほうが良いかも。RedShiftで分析もできるし。資料ダウンロード 【パネルディスカッション】 クラウドで実現する次世代マーケティングとは？   すかいらーく、良品計画(無印良品)、スシローのパネルディスカッション。無印、顧客時間重視。顧客の能動性を重視。無印、オンプレだと初期費用2000万かかるところ、AWS使って数百万。月額も30万とか。スシロー、皿にICタグ。位置情報を取得。年10億データだったかな？クラスメソッドと組んでスシデータをAWSへ。Amazon Kinesis使う。スシロー、AWS導入検討の時に、10億のデータを経営陣や店長の目の前で処理して見せたのが効果的だったとのこと。皮膚感覚で認識している通りのデータを出したり、見落としていたデータを出したり。新しいことをやるメリットと、やらないことのデメリットの天秤にかけると、やらない理由はないとかの話も。すかいらーく、無印とスシローもSEOはやってないとのこと。認知度が十分なのと業種的にあまり意味ないからか。店舗登録くらいはやってるそう。","link":"https://masutaka.net/2014-07-19-1/","isoDate":"2014-07-19T00:00:00.000Z","dateMiliSeconds":1405728000000,"authorName":"masutaka"},{"title":"『パーフェクトRuby on Rails』を全部読んで写経してHerokuにデプロイした","content":" 先月からRailsをガッツリ使うプロジェクトに入ったので、結構気合い入れて\n読みましたよ。\nRailsはそこそこ分かっているつもりですが、ネットの知識のみでまとまっ\nた学習をしたことがなかったので、タイミングの良い発売でうれしかった\nです。なんて運がよいのだろう。\n『パーフェクト Ruby on Rails』と名乗るだけあって、基本的なことは網\n羅していたと思います。後半はRackとかRailtieとかの濃い話題になって、\nちょっとしんどかったです。\nまずはひととおり読んで気になったところを付箋。\n次に6章を理解しながらひたすら写経。erbはタイプが辛かったのでhamlに\n変換しながら。写経なんていつ依頼だろう？本だと前のコードとのdiffが\n分からなかったのが辛かったです。\nransackは6章の著者、前島さんの記事 で知った程度で、使ったのは初めて\nです。簡単に検索フォーム作れてよいですね。\nテストは普段から書いているので7章は写経しませんでしたが、\npoltergeistが気になりました。capybara-webkit入れることあれば、\n代わりに使ってみようかな。\nせっかくなので、写経結果をHerokuにデプロイしました。誰でもイベント\nを登録できます。\nhttp://masutaka-awesome-events.herokuapp.com/ 以下メモ。\n$ heroku apps:create masutaka-awesome-events $ heroku addons:add heroku-postgresql --app masutaka-awesome-events $ heroku run rake db:migrate --app masutaka-awesome-events $ heroku restart --app masutaka-awesome-events $ heroku config:add TWITTER_CONSUMER_KEY=&lt;TWITTER_CONSUMER_KEY&gt; $ heroku config:add TWITTER_CONSUMER_SECRET=&lt;TWITTER_CONSUMER_SECRET&gt; P.S.\n写経してからこの記事に気づきました&hellip;。後悔はしていない。\nパーフェクト Ruby on Rails のサンプルアプリケーションを Github 上で公開しました - willnet.in ","contentSnippet":"先月からRailsをガッツリ使うプロジェクトに入ったので、結構気合い入れて読みましたよ。Railsはそこそこ分かっているつもりですが、ネットの知識のみでまとまった学習をしたことがなかったので、タイミングの良い発売でうれしかったです。なんて運がよいのだろう。『パーフェクト Ruby on Rails』と名乗るだけあって、基本的なことは網羅していたと思います。後半はRackとかRailtieとかの濃い話題になって、ちょっとしんどかったです。まずはひととおり読んで気になったところを付箋。次に6章を理解しながらひたすら写経。erbはタイプが辛かったのでhamlに変換しながら。写経なんていつ依頼だろう？本だと前のコードとのdiffが分からなかったのが辛かったです。ransackは6章の著者、前島さんの記事 で知った程度で、使ったのは初めてです。簡単に検索フォーム作れてよいですね。テストは普段から書いているので7章は写経しませんでしたが、poltergeistが気になりました。capybara-webkit入れることあれば、代わりに使ってみようかな。せっかくなので、写経結果をHerokuにデプロイしました。誰でもイベントを登録できます。http://masutaka-awesome-events.herokuapp.com/ 以下メモ。$ heroku apps:create masutaka-awesome-events $ heroku addons:add heroku-postgresql --app masutaka-awesome-events $ heroku run rake db:migrate --app masutaka-awesome-events $ heroku restart --app masutaka-awesome-events $ heroku config:add TWITTER_CONSUMER_KEY=<TWITTER_CONSUMER_KEY> $ heroku config:add TWITTER_CONSUMER_SECRET=<TWITTER_CONSUMER_SECRET> P.S.写経してからこの記事に気づきました…。後悔はしていない。パーフェクト Ruby on Rails のサンプルアプリケーションを Github 上で公開しました - willnet.in","link":"https://masutaka.net/2014-07-10-1/","isoDate":"2014-07-10T00:00:00.000Z","dateMiliSeconds":1404950400000,"authorName":"masutaka"},{"title":"Railsでapp以下の変更をSpringが検知しない問題を解決した(?)","content":"最近またSpring を使い始めたんですが、相変わらずモデルやコントローラ\nを変更してもSpringは検知しませんよね？みんなどうしているんだろう？\nfiles in the app directory are not being watched · Issue #115 · rails/spring このIssueによると、そもそもRailsのリロードはコストが高いため、\nSpringはリロードが必要ない設計にしているそう。\nうーん、、、とは言ったものの実際問題、モデルのメソッドを修正した後\nテストを走らせても、変なエラーが出て、手動でリロードさせると直ると\nいうことが多々あります。\nちなみに手動リロードはtouch config/application.rbでイケます。thx!\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Zeus を使ってた頃はとても快適だったので、Zeusに戻る準備までし始めま\nしたが、READMEのWatching files and directories やソースを読んで、\n自動リロードさせる方法を見つけました。\nconfig/spring.rbを作って、以下を書けばOKです。\nSpring.watch &#39;app&#39; 他にもwatchしたいディレクトリやファイルがあればこのように書きます。\nSpring.watch &#39;app&#39;, &#39;lib&#39; ◆適用前\n$ bundle exec spring status Spring is running: 56071 spring server | awesome_events | started 25 secs ago 56072 spring app | awesome_events | started 25 secs ago | development mode $ touch app/models/user.","contentSnippet":"最近またSpring を使い始めたんですが、相変わらずモデルやコントローラを変更してもSpringは検知しませんよね？みんなどうしているんだろう？files in the app directory are not being watched · Issue #115 · rails/spring このIssueによると、そもそもRailsのリロードはコストが高いため、Springはリロードが必要ない設計にしているそう。うーん、、、とは言ったものの実際問題、モデルのメソッドを修正した後テストを走らせても、変なエラーが出て、手動でリロードさせると直るということが多々あります。ちなみに手動リロードはtouch config/application.rbでイケます。thx!loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Zeus を使ってた頃はとても快適だったので、Zeusに戻る準備までし始めましたが、READMEのWatching files and directories やソースを読んで、自動リロードさせる方法を見つけました。config/spring.rbを作って、以下を書けばOKです。Spring.watch 'app' 他にもwatchしたいディレクトリやファイルがあればこのように書きます。Spring.watch 'app', 'lib' ◆適用前$ bundle exec spring status Spring is running: 56071 spring server | awesome_events | started 25 secs ago 56072 spring app | awesome_events | started 25 secs ago | development mode $ touch app/models/user.","link":"https://masutaka.net/2014-07-06-1/","isoDate":"2014-07-06T00:00:00.000Z","dateMiliSeconds":1404604800000,"authorName":"masutaka"},{"title":"helm-ghq.elを作ってGO WAYに乗った","content":"先日percolをインストールしたばかりですが[2014-06-20-1] 、peco も気に\nなっていたのでインストールしました。\n後発なだけあって動作が速い！Ctrl-rで検索条件を\nIgnoreCase/CaseSensitive/Regexpと変えられるのもお手軽でよいです。\nちなみにデフォルトのキーバインドはkeymap.go#L464 付近を見ると分かる\nと思います。\nあんちぽさんの記事によると、ghq も良さそうなのでこちらもインストール。\nghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結局私もあんちぽさんと同じ設定にしました..。\n~/.zshenvにexport GOPATH=$HOMEを追加し、~/.gitconfigに以下を追加。\n[ghq] root = ~/src 以下を~/.zshrcに追加して、Ctrl-x Ctrl-yでpeco経由のghqを使えるよう\nにしました。\nfunction ghq_look() { local selected_dir=$(ghq list --full-path | peco --query &#34;$LBUFFER&#34;) if [ -n &#34;$selected_dir&#34; ]; then BUFFER=&#34;cd ${selected_dir}&#34; zle accept-line fi zle clear-screen } zle -N ghq_look bindkey &#39;^x^y&#39; ghq_look ターミナルは移動が楽になりましたが、Emacs上では移動が大変。。仕方が","contentSnippet":"先日percolをインストールしたばかりですが[2014-06-20-1] 、peco も気になっていたのでインストールしました。後発なだけあって動作が速い！Ctrl-rで検索条件をIgnoreCase/CaseSensitive/Regexpと変えられるのもお手軽でよいです。ちなみにデフォルトのキーバインドはkeymap.go#L464 付近を見ると分かると思います。あんちぽさんの記事によると、ghq も良さそうなのでこちらもインストール。ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  結局私もあんちぽさんと同じ設定にしました..。~/.zshenvにexport GOPATH=$HOMEを追加し、~/.gitconfigに以下を追加。[ghq] root = ~/src 以下を~/.zshrcに追加して、Ctrl-x Ctrl-yでpeco経由のghqを使えるようにしました。function ghq_look() { local selected_dir=$(ghq list --full-path | peco --query \"$LBUFFER\") if [ -n \"$selected_dir\" ]; then BUFFER=\"cd ${selected_dir}\" zle accept-line fi zle clear-screen } zle -N ghq_look bindkey '^x^y' ghq_look ターミナルは移動が楽になりましたが、Emacs上では移動が大変。。仕方が","link":"https://masutaka.net/2014-06-22-1/","isoDate":"2014-06-22T00:00:00.000Z","dateMiliSeconds":1403395200000,"authorName":"masutaka"},{"title":"pyenvとpercolをインストールした","content":"数年前にRTMに入れたままになってましたが、ようやくpercolをインストー\nルしました。zshでhelmっぽい履歴検索をやりたかったためです。\nhttps://github.com/mooz/percol ※ 最近の毎週木曜日は、会社の人ともくもくしています。\n作者はあのKeySnail のmoozさん。2年くらい前にお会いしましたが、お元気\nでしょうか。\nREADME.mdに書いてあったHOMEにインストールする方法だと、以下のエラー\nが出て使えませんでした。Python力ゼロなので分かりません。\n$ ps aux | percol Traceback (most recent call last): File &#34;/Users/masutaka/.local/bin/percol&#34;, line 29, in &lt;module&gt; from percol.cli import main ImportError: No module named percol.cli 試しにpyenvでPythonをインストールし、そこにpipでpercolをインストー\nルすることにしました。\npyenvはbrewでインストールできます。python-build的なものやpipも同時\nに入るので楽ちん。\n最新のPython2系とpercolはこんな感じでインストールできます。\n$ pyenv install 2.7.7 $ pyenv global 2.7.7 &amp;&amp; pyenv rehash &amp;&amp; rehash $ pip install percol $ pyenv rehash &amp;&amp; rehash percolの設定ファイルは~/.percol.d/rc.pyです。色を自分好みに、キーバ\nインドをREADME.mdに書いてあったEmacs風にしました。\npercol.view.PROMPT = ur&#34;&lt;on_blue&gt;QUERY&gt;&lt;/on_blue&gt; &lt;on_red&gt;&lt;on_red&gt;%q&lt;/on_red&gt;&#34; percol.view.CANDIDATES_LINE_BASIC = (&#34;black&#34;, &#34;on_white&#34;) percol.","contentSnippet":"数年前にRTMに入れたままになってましたが、ようやくpercolをインストールしました。zshでhelmっぽい履歴検索をやりたかったためです。https://github.com/mooz/percol ※ 最近の毎週木曜日は、会社の人ともくもくしています。作者はあのKeySnail のmoozさん。2年くらい前にお会いしましたが、お元気でしょうか。README.mdに書いてあったHOMEにインストールする方法だと、以下のエラーが出て使えませんでした。Python力ゼロなので分かりません。$ ps aux | percol Traceback (most recent call last): File \"/Users/masutaka/.local/bin/percol\", line 29, in <module> from percol.cli import main ImportError: No module named percol.cli 試しにpyenvでPythonをインストールし、そこにpipでpercolをインストールすることにしました。pyenvはbrewでインストールできます。python-build的なものやpipも同時に入るので楽ちん。最新のPython2系とpercolはこんな感じでインストールできます。$ pyenv install 2.7.7 $ pyenv global 2.7.7 && pyenv rehash && rehash $ pip install percol $ pyenv rehash && rehash percolの設定ファイルは~/.percol.d/rc.pyです。色を自分好みに、キーバインドをREADME.mdに書いてあったEmacs風にしました。percol.view.PROMPT = ur\"<on_blue>QUERY></on_blue> <on_red><on_red>%q</on_red>\" percol.view.CANDIDATES_LINE_BASIC = (\"black\", \"on_white\") percol.","link":"https://masutaka.net/2014-06-20-1/","isoDate":"2014-06-20T00:00:00.000Z","dateMiliSeconds":1403222400000,"authorName":"masutaka"},{"title":"会社でルーキー賞に選ばれた","content":"3月に入社し[2014-03-09-1] 、先月が弊社フィードフォース の期の終わりで\nした。そして今日が納会(※)。運良く、ルーキー賞(の1人)に選ばれました。\n※ 納会が年末以外にもあることにビックリ。\n何度かお話しましたが、私の能力が云々という話では全くなくて、単純に\nタイミングが良かっただけだと感じています。\n納会を企画したイベントチーム、ならびに私を選んで頂いた方、業務でお\n世話になった方、その他もろもろありがとうございました。\n組み込み業界から前職ラングリッチ に飛び込んだ時[2011-04-22-1] 、意外\nにも今までの経験がちょいちょい役に立ちました。\n今のフィードフォースでは、あの時以上にタイミングよく、皆さんのお役\nに立てたようで嬉しいです。自分の成長と会社の成長が、いい感じに重なっ\nたというか。\n役に立ったと思われるのは以下のとおり。\n・アジャイル開発の経験\n・チームビルディング\n・GitHub的ななにか\n・Rails&amp;Rspec全般\n・Chef&amp;Serverspec全般\n・ELF的な知識\n地固めが出来たので、これからはより技術的なことに挑戦していきます。\nぶっちゃけ、そちらに関しては他の開発者の方のほうが詳しいので、その\n辺は教えを請いつつ学びつつ、チームの力を伸ばしていくことに集中します。\n私個人も成長しますが、チーム力を高めたほうがなにかと早いので。\n今後ともよろしくお願いします。","contentSnippet":"3月に入社し[2014-03-09-1] 、先月が弊社フィードフォース の期の終わりでした。そして今日が納会(※)。運良く、ルーキー賞(の1人)に選ばれました。※ 納会が年末以外にもあることにビックリ。何度かお話しましたが、私の能力が云々という話では全くなくて、単純にタイミングが良かっただけだと感じています。納会を企画したイベントチーム、ならびに私を選んで頂いた方、業務でお世話になった方、その他もろもろありがとうございました。組み込み業界から前職ラングリッチ に飛び込んだ時[2011-04-22-1] 、意外にも今までの経験がちょいちょい役に立ちました。今のフィードフォースでは、あの時以上にタイミングよく、皆さんのお役に立てたようで嬉しいです。自分の成長と会社の成長が、いい感じに重なったというか。役に立ったと思われるのは以下のとおり。・アジャイル開発の経験・チームビルディング・GitHub的ななにか・Rails&Rspec全般・Chef&Serverspec全般・ELF的な知識地固めが出来たので、これからはより技術的なことに挑戦していきます。ぶっちゃけ、そちらに関しては他の開発者の方のほうが詳しいので、その辺は教えを請いつつ学びつつ、チームの力を伸ばしていくことに集中します。私個人も成長しますが、チーム力を高めたほうがなにかと早いので。今後ともよろしくお願いします。","link":"https://masutaka.net/2014-06-13-1/","isoDate":"2014-06-13T00:00:00.000Z","dateMiliSeconds":1402617600000,"authorName":"masutaka"},{"title":"アジャイル開発を経験して『アジャイルサムライ』を再読した","content":"[2013-01-10-1] から約1年半。アジャイル開発をそこそこ経験したので、再\n読しました。\n気になったところをざっと引用。\n P70\n弟子: もしも、そうした方々にインセプションデッキを作るための時間を\n割いてもらえないとか、質問にも答えられないほど忙しい場合、私はどう\nすべきでしょうか？\nセンセイ: まずはそのことを喜ぶがよい。なぜならお前はプロジェクトの\n最初の重大なリスクを発見したのだから。\n難しい問題だよね。\n  P94\nプロジェクトの今の段階で、誰が決断を下すのかということを確認してお\nけば、後で起きることになるであろうさまざまな混乱を防ぐことが出来る。\n重要。\n  P131\n「相対サイズで見積もる」というシンプルな原則がアジャイルな見積りと\n計画づくりの真髄だ。\n無意識にやってて忘れてたけど、改めて認識。\n  P161\n個人の生産性を測るのは、プロジェクトマネジメントのダークサイドへの\n道だ。\n個人の生産性を測ると、バグと手戻りと思い違いが増える。一方、強調し\nようとかスキルを伸ばそうとか知見を共有しようとかいった態度は薄れて\nいく。各人がなんとしてでも自分自身の生産性を確保しようと躍起になる\nからだ。\nケースバイケースだけど、そういう傾向にはなりやすくなると思う。\n  P170\nプロジェクトが既に始まっているのなら、インセプションデッキのすべて\nの課題をこなす必要はないかもしれないが、少なくとも次の５つの質問に\nはチーム全員が答えられなきゃまずい。\n・このプロジェクトにいるのはなぜ？\n・成し遂げようとしていることは何？\n・顧客は誰？\n・解決すべき主要な課題は何？\n・最終決断を下すのは誰？\nこのへんは使えそう\n  P214\nつまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私\nはこれをやります」とコミットメントを表明するんだ。これを続けていけ\nば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっ\nていくはずだ。\nこれは明日からやる。\n  P216\nアジャイルサムライには、ストーリーが半分終わったとか、４分の３終わ\nらせたとか、８割完了したなどいったことは無いのだ。ストーリーは完了\nしたか、していないか。そのどちらかだ。\nそうね。\n  P291\nアジャイルソフトウェア開発宣言\nプロセスやツールよりも個人と対話を、\n包括的なドキュメントよりも動くソフトウェアを、","contentSnippet":"[2013-01-10-1] から約1年半。アジャイル開発をそこそこ経験したので、再読しました。気になったところをざっと引用。 P70弟子: もしも、そうした方々にインセプションデッキを作るための時間を割いてもらえないとか、質問にも答えられないほど忙しい場合、私はどうすべきでしょうか？センセイ: まずはそのことを喜ぶがよい。なぜならお前はプロジェクトの最初の重大なリスクを発見したのだから。難しい問題だよね。  P94プロジェクトの今の段階で、誰が決断を下すのかということを確認しておけば、後で起きることになるであろうさまざまな混乱を防ぐことが出来る。重要。  P131「相対サイズで見積もる」というシンプルな原則がアジャイルな見積りと計画づくりの真髄だ。無意識にやってて忘れてたけど、改めて認識。  P161個人の生産性を測るのは、プロジェクトマネジメントのダークサイドへの道だ。個人の生産性を測ると、バグと手戻りと思い違いが増える。一方、強調しようとかスキルを伸ばそうとか知見を共有しようとかいった態度は薄れていく。各人がなんとしてでも自分自身の生産性を確保しようと躍起になるからだ。ケースバイケースだけど、そういう傾向にはなりやすくなると思う。  P170プロジェクトが既に始まっているのなら、インセプションデッキのすべての課題をこなす必要はないかもしれないが、少なくとも次の５つの質問にはチーム全員が答えられなきゃまずい。・このプロジェクトにいるのはなぜ？・成し遂げようとしていることは何？・顧客は誰？・解決すべき主要な課題は何？・最終決断を下すのは誰？このへんは使えそう  P214つまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私はこれをやります」とコミットメントを表明するんだ。これを続けていけば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっていくはずだ。これは明日からやる。  P216アジャイルサムライには、ストーリーが半分終わったとか、４分の３終わらせたとか、８割完了したなどいったことは無いのだ。ストーリーは完了したか、していないか。そのどちらかだ。そうね。  P291アジャイルソフトウェア開発宣言プロセスやツールよりも個人と対話を、包括的なドキュメントよりも動くソフトウェアを、","link":"https://masutaka.net/2014-06-08-1/","isoDate":"2014-06-08T00:00:00.000Z","dateMiliSeconds":1402185600000,"authorName":"masutaka"},{"title":"予備知識なしでChromecast買った結果www","content":"結構面白かった\nビッグウェーブに乗る感じで勢いで買った。後悔はしていない。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  これはiPhone5sのAirPlay使って、MacBookProにiPhoneの画面を表示させ、その画面をChrome拡張のGoogle Cast使ってテレビに表示させてるところ。\nこれはさらにもう一台のiPhone5sを接続したところ。鏡みたいになって面白い。\nYouTubeはウェブ、iPhoneアプリ、ニンテンドー3DSのアプリ、どれでもChromecast繋いだテレビやモニターに表示させられる。もちろん音声も。\n上の画像のテレビはスマートTVなのであまり意味ないけど、ただのモニターがスマートTVになるのはまあ面白い。\nニンテンドー3DSの画面を表示させられたらマジ神だったけど、さすがに無理だった。\nChromecastがあればケーブルが要らないので、プレゼンの時は便利かなーと思いました。ネタになりそうなので、しばらく持ち歩くことにします。お声がけくださいませ。\n See also\nChromecastが日本発売、何に使えるの？オススメアプリは？ 【@maskin】 : TechWave 404 Blog Not Found:来た、観た、呆れた - 品評 - Google Chromecast ","contentSnippet":"結構面白かったビッグウェーブに乗る感じで勢いで買った。後悔はしていない。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  これはiPhone5sのAirPlay使って、MacBookProにiPhoneの画面を表示させ、その画面をChrome拡張のGoogle Cast使ってテレビに表示させてるところ。これはさらにもう一台のiPhone5sを接続したところ。鏡みたいになって面白い。YouTubeはウェブ、iPhoneアプリ、ニンテンドー3DSのアプリ、どれでもChromecast繋いだテレビやモニターに表示させられる。もちろん音声も。上の画像のテレビはスマートTVなのであまり意味ないけど、ただのモニターがスマートTVになるのはまあ面白い。ニンテンドー3DSの画面を表示させられたらマジ神だったけど、さすがに無理だった。Chromecastがあればケーブルが要らないので、プレゼンの時は便利かなーと思いました。ネタになりそうなので、しばらく持ち歩くことにします。お声がけくださいませ。 See alsoChromecastが日本発売、何に使えるの？オススメアプリは？ 【@maskin】 : TechWave 404 Blog Not Found:来た、観た、呆れた - 品評 - Google Chromecast","link":"https://masutaka.net/2014-05-31-2/","isoDate":"2014-05-31T01:00:00.000Z","dateMiliSeconds":1401498000000,"authorName":"masutaka"},{"title":"ジモティー使ったら、不要品欲しい人が即効決まった！","content":"今週日曜日の深夜にジモティー で不要品欲しい人を募集したら、速攻決まって本日お渡し出来たので、メモがてらご紹介します。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  お品物1: 寝るときに涼しいエアコンマットあげます  最寄り駅まで取りに来て頂ける方を0円で募集した。\nAM1:41に投稿した直後に6件(1:46, 1:52, 1:52, 1:52, 1:54, 2:01)メールが来た。掲載時に電話番号を書いてたので、1:57に1件電話も来た。電話の方にお譲りすることにして、すぐ受付終了させた。","contentSnippet":"今週日曜日の深夜にジモティー で不要品欲しい人を募集したら、速攻決まって本日お渡し出来たので、メモがてらご紹介します。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  お品物1: 寝るときに涼しいエアコンマットあげます  最寄り駅まで取りに来て頂ける方を0円で募集した。AM1:41に投稿した直後に6件(1:46, 1:52, 1:52, 1:52, 1:54, 2:01)メールが来た。掲載時に電話番号を書いてたので、1:57に1件電話も来た。電話の方にお譲りすることにして、すぐ受付終了させた。","link":"https://masutaka.net/2014-05-31-1/","isoDate":"2014-05-31T00:00:00.000Z","dateMiliSeconds":1401494400000,"authorName":"masutaka"},{"title":"ペアプロの話とOSXのsayコマンドや通知センターを使ったタイマーの話","content":"弊社フィードフォース のQiita:Team にも書いたのですが、一般的な話なのでこちらにも加筆しつつ紹介します。(書いてたら全面改訂になってしまったw)\nsayコマンドを使ったタイマー なんだかんだ言って、サウンドが一番気づきやすいです。サウンドが使える環境の方どうぞ。\n前職ラングリッチ の時に使っていたのはズバリこれ。開始の「はじめるでやんす」で始まり、4分50秒から終了予告、最後は「おわったでやんす」。\n $ say &lsquo;はじめるでやんす&rsquo; ; sleep 290 ; say &lsquo;10秒前&rsquo;; sleep 5; say &lsquo;5秒前&rsquo;; sleep 5; say &lsquo;おわったでやんす&rsquo;\n 上のように日本語でサウンドを出すときは、「システム環境設定」→「音声入力と読み上げ」からKyokoさんやOtoyaさんの声を追加します。\n通知センターを使ったタイマー terminal-notifierをインストール\n $ brew install terminal-notifier\n 4分50秒から終了予告、5分で「時間ですよ！」。これは今日作りました。\n $ sleep 290; terminal-notifier -message &lsquo;あと10秒&rsquo;; sleep 5; terminal-notifier -message &lsquo;5秒&rsquo;; sleep 2; terminal-notifier -message &lsquo;3&rsquo;; sleep 1; terminal-notifier -message &lsquo;2&rsquo;; sleep 1; terminal-notifier -message &lsquo;1&rsquo;; sleep 1; terminal-notifier -message &lsquo;時間ですよ！&rsquo;\n ワンライナーなのが結構大事です。シェルの履歴は1,000,000件くらいは残しとくと思うので、C-rで簡単に探せます。[2014-05-18-2] も御覧ください。","contentSnippet":"弊社フィードフォース のQiita:Team にも書いたのですが、一般的な話なのでこちらにも加筆しつつ紹介します。(書いてたら全面改訂になってしまったw)sayコマンドを使ったタイマー なんだかんだ言って、サウンドが一番気づきやすいです。サウンドが使える環境の方どうぞ。前職ラングリッチ の時に使っていたのはズバリこれ。開始の「はじめるでやんす」で始まり、4分50秒から終了予告、最後は「おわったでやんす」。 $ say ‘はじめるでやんす’ ; sleep 290 ; say ‘10秒前’; sleep 5; say ‘5秒前’; sleep 5; say ‘おわったでやんす’ 上のように日本語でサウンドを出すときは、「システム環境設定」→「音声入力と読み上げ」からKyokoさんやOtoyaさんの声を追加します。通知センターを使ったタイマー terminal-notifierをインストール $ brew install terminal-notifier 4分50秒から終了予告、5分で「時間ですよ！」。これは今日作りました。 $ sleep 290; terminal-notifier -message ‘あと10秒’; sleep 5; terminal-notifier -message ‘5秒’; sleep 2; terminal-notifier -message ‘3’; sleep 1; terminal-notifier -message ‘2’; sleep 1; terminal-notifier -message ‘1’; sleep 1; terminal-notifier -message ‘時間ですよ！’ ワンライナーなのが結構大事です。シェルの履歴は1,000,000件くらいは残しとくと思うので、C-rで簡単に探せます。[2014-05-18-2] も御覧ください。","link":"https://masutaka.net/2014-05-26-1/","isoDate":"2014-05-26T00:00:00.000Z","dateMiliSeconds":1401062400000,"authorName":"masutaka"},{"title":"zshの履歴検索は↑やC-rだけじゃないよM-pもあるよ＆履歴マニアの話","content":"少し前にこちらの記事が話題になりました。\nnaoya_itoの火を噴いたシェルtips - Togetterまとめ rebuild.fmのEpisode41 でも言及されていた気がします。\n弊社フィードフォース でも、ペアプロの時にこういった話をすることはあります。ただ、C-rやC-uは知られていても、M-pはあまり知られていない雰囲気でしたのでまとめました。\nはじめに M-pやM-nは、Escapeを押して離してpまたはnです。\nOSXのターミナルをお使いの方は以下を設定すると、option-pまたはoption-nが使えます。それ以外の環境ではAltが使えるかもしれません。\nデフォルトの動作を知る デフォルトのM-pとM-nには、それぞれhistory-search-backwardとhistory-search-forwardが割り当てられています。\n敢えて設定を書くとこんな感じです。\nbindkey &#34;^[p&#34; history-search-backward bindkey &#34;^[n&#34; history-search-forward &ldquo;git re&quot;のあとにM-pを続けて打つ様子。&ldquo;git&quot;にマッチした履歴が現れます。M-nすると戻ってきます。\n既存の関数をキーに割り当てる 以下の設定をすると、マッチする履歴が変わります。\nbindkey &#34;^[p&#34; history-beginning-search-backward bindkey &#34;^[n&#34; history-beginning-search-forward 設定場所は~/.zshrcが適切でしょう。[2002-05-14-1] &ldquo;git re&quot;のあとにM-pを続けて打つ様子。今度は&quot;git re&quot;から始まる履歴にマッチします。こちらの方が直感的だと思います。\n期待する履歴が現れたらReturnキーで確定して下さい。C-eで行末に移動したくなりますが不要です。\nもう少しカスタマイズ 以下の設定をすると、ヒット後のカーソル位置が変わります。\nautoload -U history-search-end zle -N history-beginning-search-backward-end history-search-end zle -N history-beginning-search-forward-end history-search-end bindkey &#34;^[p&#34; history-beginning-search-backward-end bindkey &#34;^[n&#34; history-beginning-search-forward-end &ldquo;git re&quot;から始まる履歴にマッチするのは変わりませんが、カーソル位置が行末になります。\n期待した履歴が現れたらReturnキーで確定してください。カーソル位置が行末なので、こちらの方が自然に感じるかもしれません。Emacsのshell-modeをお使いの方は特に。\nこの設定はおそらく漢のzshで知ったのだと思いますが、昔すぎて覚えていません。\n漢のzsh (4) コマンド履歴の検索～EmacsとVi、どっちも設定できるぜzsh｜マイナビニュース 履歴マニアの話 シェルの履歴を辿るには十分な数の履歴が必要です。この程度の設定は当然でしょう。\n# 履歴を保存するファイル HISTFILE=$HOME/.zhistory # メモリ内の履歴の数 HISTSIZE=1000000 # $HISTFILE に保存される履歴の数 SAVEHIST=1000000 ※ 信じられないことにHISTSIZEのデフォルト値は30、SAVEHISTは0です。","contentSnippet":"少し前にこちらの記事が話題になりました。naoya_itoの火を噴いたシェルtips - Togetterまとめ rebuild.fmのEpisode41 でも言及されていた気がします。弊社フィードフォース でも、ペアプロの時にこういった話をすることはあります。ただ、C-rやC-uは知られていても、M-pはあまり知られていない雰囲気でしたのでまとめました。はじめに M-pやM-nは、Escapeを押して離してpまたはnです。OSXのターミナルをお使いの方は以下を設定すると、option-pまたはoption-nが使えます。それ以外の環境ではAltが使えるかもしれません。デフォルトの動作を知る デフォルトのM-pとM-nには、それぞれhistory-search-backwardとhistory-search-forwardが割り当てられています。敢えて設定を書くとこんな感じです。bindkey \"^[p\" history-search-backward bindkey \"^[n\" history-search-forward “git re\"のあとにM-pを続けて打つ様子。“git\"にマッチした履歴が現れます。M-nすると戻ってきます。既存の関数をキーに割り当てる 以下の設定をすると、マッチする履歴が変わります。bindkey \"^[p\" history-beginning-search-backward bindkey \"^[n\" history-beginning-search-forward 設定場所は~/.zshrcが適切でしょう。[2002-05-14-1] “git re\"のあとにM-pを続けて打つ様子。今度は\"git re\"から始まる履歴にマッチします。こちらの方が直感的だと思います。期待する履歴が現れたらReturnキーで確定して下さい。C-eで行末に移動したくなりますが不要です。もう少しカスタマイズ 以下の設定をすると、ヒット後のカーソル位置が変わります。autoload -U history-search-end zle -N history-beginning-search-backward-end history-search-end zle -N history-beginning-search-forward-end history-search-end bindkey \"^[p\" history-beginning-search-backward-end bindkey \"^[n\" history-beginning-search-forward-end “git re\"から始まる履歴にマッチするのは変わりませんが、カーソル位置が行末になります。期待した履歴が現れたらReturnキーで確定してください。カーソル位置が行末なので、こちらの方が自然に感じるかもしれません。Emacsのshell-modeをお使いの方は特に。この設定はおそらく漢のzshで知ったのだと思いますが、昔すぎて覚えていません。漢のzsh (4) コマンド履歴の検索～EmacsとVi、どっちも設定できるぜzsh｜マイナビニュース 履歴マニアの話 シェルの履歴を辿るには十分な数の履歴が必要です。この程度の設定は当然でしょう。# 履歴を保存するファイル HISTFILE=$HOME/.zhistory # メモリ内の履歴の数 HISTSIZE=1000000 # $HISTFILE に保存される履歴の数 SAVEHIST=1000000 ※ 信じられないことにHISTSIZEのデフォルト値は30、SAVEHISTは0です。","link":"https://masutaka.net/2014-05-18-2/","isoDate":"2014-05-18T01:00:00.000Z","dateMiliSeconds":1400374800000,"authorName":"masutaka"},{"title":"ひらくPCバッグを買った","content":"型番: D1001G\n販売価格: 20,550円\n※画像は公式サイトより\n今まで使ってたバッグがヘタれてきたので、この「ひらくPCバッグ」を買いました。\n公式サイト には6/27発送予定と書かれていましたが、予定より相当早い1週間で受け取ることが出来ました。\n5/10(土) 公式サイトから注文\n5/14(水) 5/16に発送を早められるとの連絡\n5/16(金) 商品発送のお知らせ\n5/17(土) 受け取り\nこれが今までのCalvin Kleinのバッグです。画像では分かりづらいですが、6年ほど前に買って酷使してきたため色がだいぶ剥げてきました。\n中の物を全部出すとより残念感が漂います。今までよく頑張った！\n購入したひらくPCバッグ。予想より一回り小さかったです。\n開けるとこんな感じ\n上の画像にはこんなものが入っています。\n MacBookAir 13inch [2014-05-12-1]  Kindle Paperwhite Nintendo3DS [2013-02-16-1]  メガネケース 各種コード類 財布 ハンドタオル 折りたたみ傘 扇子 メモ帳  購入前は取っ手がないのが気になってましたが、何か自信があって付けないのだろうと割りきって買いました。\n予想より早く届いたので実物も見ませんでした(1週間に10時間だけ開いている、渋谷の実店舗 に行く予定ではありました)。\n人気のバッグだけあってWeb上にたくさんレビューがあります。\n clmemo@aka: ひらく PC バッグを入手した  【新旧比較】あたらしい「ひらくPCバッグ」開封の儀！新旧のひらくPCバッグと徹底比較したぞ！　#hiraP｜むねさだブログ   どれも評価が高かったので自然と期待が高まりましたが、まあ予想通りではありました。この辺、発売前にゲームのトレイラーを見過ぎたのと似ているかもしれませんw\nMacBookAirやKindleが内ポケットにジャストフィットで入るのは素晴らしいです。衝撃を若干吸収しそうな素材なので、ケースは不要でしょう。\nマジックテープで着脱可能な仕切りが3つ付いているので財布とか折りたたみ傘とか、いい感じに収められます。\n反面、確かに今までのバッグよりは持ちやすくはありますが、これだけ入れるとさすがに重いです。このブログにあるギター用のショルダーパッド買うかもしれません。出費がかさみます。。\n あひるちゃんがゆく:オットくんがひそかに「ひらくPCバッグ」を買っていた   あと、やはり取っ手はあったほうが良いと感じました。でも今のデザインだと難しいのかもしれませんね。\nこれから使い倒していきます☆","contentSnippet":"型番: D1001G販売価格: 20,550円※画像は公式サイトより今まで使ってたバッグがヘタれてきたので、この「ひらくPCバッグ」を買いました。公式サイト には6/27発送予定と書かれていましたが、予定より相当早い1週間で受け取ることが出来ました。5/10(土) 公式サイトから注文5/14(水) 5/16に発送を早められるとの連絡5/16(金) 商品発送のお知らせ5/17(土) 受け取りこれが今までのCalvin Kleinのバッグです。画像では分かりづらいですが、6年ほど前に買って酷使してきたため色がだいぶ剥げてきました。中の物を全部出すとより残念感が漂います。今までよく頑張った！購入したひらくPCバッグ。予想より一回り小さかったです。開けるとこんな感じ上の画像にはこんなものが入っています。 MacBookAir 13inch [2014-05-12-1]  Kindle Paperwhite Nintendo3DS [2013-02-16-1]  メガネケース 各種コード類 財布 ハンドタオル 折りたたみ傘 扇子 メモ帳  購入前は取っ手がないのが気になってましたが、何か自信があって付けないのだろうと割りきって買いました。予想より早く届いたので実物も見ませんでした(1週間に10時間だけ開いている、渋谷の実店舗 に行く予定ではありました)。人気のバッグだけあってWeb上にたくさんレビューがあります。 clmemo@aka: ひらく PC バッグを入手した  【新旧比較】あたらしい「ひらくPCバッグ」開封の儀！新旧のひらくPCバッグと徹底比較したぞ！　#hiraP｜むねさだブログ   どれも評価が高かったので自然と期待が高まりましたが、まあ予想通りではありました。この辺、発売前にゲームのトレイラーを見過ぎたのと似ているかもしれませんwMacBookAirやKindleが内ポケットにジャストフィットで入るのは素晴らしいです。衝撃を若干吸収しそうな素材なので、ケースは不要でしょう。マジックテープで着脱可能な仕切りが3つ付いているので財布とか折りたたみ傘とか、いい感じに収められます。反面、確かに今までのバッグよりは持ちやすくはありますが、これだけ入れるとさすがに重いです。このブログにあるギター用のショルダーパッド買うかもしれません。出費がかさみます。。 あひるちゃんがゆく:オットくんがひそかに「ひらくPCバッグ」を買っていた   あと、やはり取っ手はあったほうが良いと感じました。でも今のデザインだと難しいのかもしれませんね。これから使い倒していきます☆","link":"https://masutaka.net/2014-05-18-1/","isoDate":"2014-05-18T00:00:00.000Z","dateMiliSeconds":1400371200000,"authorName":"masutaka"},{"title":"Railsセミナーに行ってきた #railssemi","content":"【学生無料！】【Railsセミナー】Why choose Ruby on Rails ? : ATND 弊社フィードフォースの応援要員として、メンバーズ様主催のRailsセミナーに行ってきました。メモ程度ですが軽く記録しときます。\n◆第1部 名刺管理アプリ「Eight」を育てるチームと技術\nSansan株式会社 宍倉功一さん\n法人向けのSanSanは.NETだが、個人向けのEightはRailsを採用。\nspider for MySQL使うとテーブル単位でDB分割できて便利。\nSLASHで効果測定。新人研修は徳島の一軒家で2週間。\n高負荷サービスの話聞けてよかった。\n◆第2部 Railsとアジャイルで変える受託開発\n株式会社メンバーズ 木村壮介さん\nCircleCIでfeature branchをHerokuに継続deploy - Masatomo Nakano Blog みたいなdeapというツール良かった。受託の関係でHerokuではなく、自社サーバを使うんだっけかな？\n◆第3部 変化を産み出すための組織文化作り\n株式会社フィードフォース 鈴木龍さん\n他の発表より生々しい感じで存在感を出せてた感。途中の「お金は大事だよー」の画像とか、HipChatの実際のチャットとか追加されてて、数日前の素振りよりもすごく良くなってた。\n◆第4部 国内最大級のクラウドソーシングサービス「クラウドワークス」のつくりかた\n株式会社クラウドワークス 大場光一郎さん\nCIはJenkinsツライのでSEMAPHORE を採用。\nAmazon Redshift(分散RDBS)を使用。\n 分析用のプラットホームに向いてる Hadoopに似てる FlydataでRedShiftに転送\nなぜCircleCIじゃなくてSEMAPHOREを採用したのでしょう？と質問したら、無料期間中に最後までテスト出来たのがSEMAPHOREだけだったからとのこと。CircleCI含めた他のサービスはは15分以上かかるテストkillされてしまったらしい。  ◆懇親会\n何人かの方とお話出来た。弊社のメンバー多めだったけど。。\n大場さんと話すのがちょっとした目的だったので、ホント来た甲斐がありました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading.","contentSnippet":"【学生無料！】【Railsセミナー】Why choose Ruby on Rails ? : ATND 弊社フィードフォースの応援要員として、メンバーズ様主催のRailsセミナーに行ってきました。メモ程度ですが軽く記録しときます。◆第1部 名刺管理アプリ「Eight」を育てるチームと技術Sansan株式会社 宍倉功一さん法人向けのSanSanは.NETだが、個人向けのEightはRailsを採用。spider for MySQL使うとテーブル単位でDB分割できて便利。SLASHで効果測定。新人研修は徳島の一軒家で2週間。高負荷サービスの話聞けてよかった。◆第2部 Railsとアジャイルで変える受託開発株式会社メンバーズ 木村壮介さんCircleCIでfeature branchをHerokuに継続deploy - Masatomo Nakano Blog みたいなdeapというツール良かった。受託の関係でHerokuではなく、自社サーバを使うんだっけかな？◆第3部 変化を産み出すための組織文化作り株式会社フィードフォース 鈴木龍さん他の発表より生々しい感じで存在感を出せてた感。途中の「お金は大事だよー」の画像とか、HipChatの実際のチャットとか追加されてて、数日前の素振りよりもすごく良くなってた。◆第4部 国内最大級のクラウドソーシングサービス「クラウドワークス」のつくりかた株式会社クラウドワークス 大場光一郎さんCIはJenkinsツライのでSEMAPHORE を採用。Amazon Redshift(分散RDBS)を使用。 分析用のプラットホームに向いてる Hadoopに似てる FlydataでRedShiftに転送なぜCircleCIじゃなくてSEMAPHOREを採用したのでしょう？と質問したら、無料期間中に最後までテスト出来たのがSEMAPHOREだけだったからとのこと。CircleCI含めた他のサービスはは15分以上かかるテストkillされてしまったらしい。  ◆懇親会何人かの方とお話出来た。弊社のメンバー多めだったけど。。大場さんと話すのがちょっとした目的だったので、ホント来た甲斐がありました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading.","link":"https://masutaka.net/2014-05-12-2/","isoDate":"2014-05-12T01:00:00.000Z","dateMiliSeconds":1399856400000,"authorName":"masutaka"},{"title":"MacBook Airを買い替えたよメモ","content":"新マシンへの引っ越しもだいたい終わったのでメモ。\nGW中でしたが、注文から約1週間で受け取れました。\n4/29(火) apple.jpから注文\n5/ 3(土) 上海から出荷のお知らせ\n5/ 6(火) 受け取り\n2010年秋モデルからの買い替えです。おおよその違いは以下のとおり。キーボードはなんとなくUSに変えました。会社もUSにしとくんだったなあ&hellip;。\n    旧(MacBook Air (13-inch, Late 2010) ) 新(MacBook Air (13-inch, Early 2014) )     CPU 1.86GHz Intel Core 2 Duo 1.4GHzデュアルコアIntel Core i5（Turbo Boost使用時最大2.7GHz）   CPUキャッシュ 6MBオンチップ共有二次キャッシュ 3MB共有L3キャッシュ   Memory 4GB 8GB   SSD 256GB 同じ   キーボード JIS US    移行アシスタンスは使わずに手動で移行しました。HOME以下にゴミファイルが溜まってそうだったし、Brewfile[2014-03-19-2] があるのでそんなに手間ではないと思ったからです。実際、SSDの空きが60GBから130GBくらいに増えました。\nコマンドやアプリ類はBrewfileでサクッとインストール。iTunesの音楽ファイルやiPhotoの画像ファイルは、共有設定からリモートログインをONにして、rsyncでコピー。Wifiなので1昼夜かかりました。Dropboxも時間かかった。\niTunesは~/Music/iTunesを上書きする感じでいけました。\niPhotoは~/Pictures/iPhoto Libraryを~/Pictures/iPhoto Library.","contentSnippet":"新マシンへの引っ越しもだいたい終わったのでメモ。GW中でしたが、注文から約1週間で受け取れました。4/29(火) apple.jpから注文5/ 3(土) 上海から出荷のお知らせ5/ 6(火) 受け取り2010年秋モデルからの買い替えです。おおよその違いは以下のとおり。キーボードはなんとなくUSに変えました。会社もUSにしとくんだったなあ…。    旧(MacBook Air (13-inch, Late 2010) ) 新(MacBook Air (13-inch, Early 2014) )     CPU 1.86GHz Intel Core 2 Duo 1.4GHzデュアルコアIntel Core i5（Turbo Boost使用時最大2.7GHz）   CPUキャッシュ 6MBオンチップ共有二次キャッシュ 3MB共有L3キャッシュ   Memory 4GB 8GB   SSD 256GB 同じ   キーボード JIS US    移行アシスタンスは使わずに手動で移行しました。HOME以下にゴミファイルが溜まってそうだったし、Brewfile[2014-03-19-2] があるのでそんなに手間ではないと思ったからです。実際、SSDの空きが60GBから130GBくらいに増えました。コマンドやアプリ類はBrewfileでサクッとインストール。iTunesの音楽ファイルやiPhotoの画像ファイルは、共有設定からリモートログインをONにして、rsyncでコピー。Wifiなので1昼夜かかりました。Dropboxも時間かかった。iTunesは~/Music/iTunesを上書きする感じでいけました。iPhotoは~/Pictures/iPhoto Libraryを~/Pictures/iPhoto Library.","link":"https://masutaka.net/2014-05-12-1/","isoDate":"2014-05-12T00:00:00.000Z","dateMiliSeconds":1399852800000,"authorName":"masutaka"},{"title":"Emacsの自動保存ファイル(#*#)やバックアップファイル(*~)の作成先変更まとめ","content":"Emacsをデフォルトの設定で何かファイルを編集していると、たくさんファ\nイルが出来てゲンナリします。\nあと、起動したEmacs単位でこういうファイルも作られます。\nファイルを保存すると①と②が消えます。③は残ります。\nEmacsを終了すると④は消えます。\n当然ですが、Emacsが強制終了すると①②④は消えません。\n一切作らない方法 ③を作りたくない方は多いと思うので、こんな設定をする方も多いと思います。\n(setq make-backup-files nil) ④も作りたくない方はこちら。Mule時代はHOMEに作られたので、結構ウザ\nかったです。\n(setq auto-save-list-file-prefix nil) ②も作りたくない方はこちら。\n(setq create-lockfiles nil) ①は調べてません。出来ないかもしれません。\n作成先の変更 とはいえバージョン管理していない場合、③はあればうれしいかもしれま\nせん。\n実は③の作成先はカスタマイズ可能です。HOME以下のファイルを対象に、\nOSXのゴミ箱~/.Trashに変更してみましょう。\n~/.Trash/!Users!masutaka!hoge!aaa.txt~のようなファイルが作られます。\n(add-to-list &#39;backup-directory-alist  (cons (expand-file-name &#34;~/&#34;) (expand-file-name &#34;~/.Trash/&#34;))) ついでに①も変更してみます。\n同様に~/.Trash/#!Users!masutaka!hoge!aaa.txt#のようなファイルが作られます。\n(add-to-list &#39;auto-save-file-name-transforms  `(&#34;~/\\\\([^/]*/\\\\)*\\\\([^/]*\\\\)$&#34; &#34;~/.Trash/\\\\2&#34; t)) ④はもっと簡単です。\nこちらも~/.Trash/.saves-70938-Takashi-no-MacBook-Air.local~のような\nファイルが作られます。\n(setq auto-save-list-file-prefix &#34;~/.Trash/.saves-&#34;) 詳しくはヘルプ(F1 v)をご覧ください。\n②は分かりませんでした。\nDRYに書く EmacsLispもプログラミング言語です。DRY に書きます。\n(let ((target-dir (expand-file-name &#34;~/&#34;))  (dest-dir (expand-file-name &#34;~/.Trash/&#34;)))   ;; ①自動保存ファイル(#*#)の作成先変更  (add-to-list &#39;auto-save-file-name-transforms  `(,(concat target-dir &#34;\\\\([^/]*/\\\\)*\\\\([^/]*\\\\)$&#34;)  ,(concat dest-dir &#34;\\\\2&#34;)  t))   ;; ③バックアップファイル(*~)の作成先変更  (add-to-list &#39;backup-directory-alist (cons target-dir dest-dir))   ;; ④自動保存リスト(.","contentSnippet":"Emacsをデフォルトの設定で何かファイルを編集していると、たくさんファイルが出来てゲンナリします。あと、起動したEmacs単位でこういうファイルも作られます。ファイルを保存すると①と②が消えます。③は残ります。Emacsを終了すると④は消えます。当然ですが、Emacsが強制終了すると①②④は消えません。一切作らない方法 ③を作りたくない方は多いと思うので、こんな設定をする方も多いと思います。(setq make-backup-files nil) ④も作りたくない方はこちら。Mule時代はHOMEに作られたので、結構ウザかったです。(setq auto-save-list-file-prefix nil) ②も作りたくない方はこちら。(setq create-lockfiles nil) ①は調べてません。出来ないかもしれません。作成先の変更 とはいえバージョン管理していない場合、③はあればうれしいかもしれません。実は③の作成先はカスタマイズ可能です。HOME以下のファイルを対象に、OSXのゴミ箱~/.Trashに変更してみましょう。~/.Trash/!Users!masutaka!hoge!aaa.txt~のようなファイルが作られます。(add-to-list 'backup-directory-alist  (cons (expand-file-name \"~/\") (expand-file-name \"~/.Trash/\"))) ついでに①も変更してみます。同様に~/.Trash/#!Users!masutaka!hoge!aaa.txt#のようなファイルが作られます。(add-to-list 'auto-save-file-name-transforms  `(\"~/\\\\([^/]*/\\\\)*\\\\([^/]*\\\\)$\" \"~/.Trash/\\\\2\" t)) ④はもっと簡単です。こちらも~/.Trash/.saves-70938-Takashi-no-MacBook-Air.local~のようなファイルが作られます。(setq auto-save-list-file-prefix \"~/.Trash/.saves-\") 詳しくはヘルプ(F1 v)をご覧ください。②は分かりませんでした。DRYに書く EmacsLispもプログラミング言語です。DRY に書きます。(let ((target-dir (expand-file-name \"~/\"))  (dest-dir (expand-file-name \"~/.Trash/\")))   ;; ①自動保存ファイル(#*#)の作成先変更  (add-to-list 'auto-save-file-name-transforms  `(,(concat target-dir \"\\\\([^/]*/\\\\)*\\\\([^/]*\\\\)$\")  ,(concat dest-dir \"\\\\2\")  t))   ;; ③バックアップファイル(*~)の作成先変更  (add-to-list 'backup-directory-alist (cons target-dir dest-dir))   ;; ④自動保存リスト(.","link":"https://masutaka.net/2014-05-11-1/","isoDate":"2014-05-11T00:00:00.000Z","dateMiliSeconds":1399766400000,"authorName":"masutaka"},{"title":"masutaka.netをCapistrano3でデプロイ","content":"http://masutaka.net/ 以下の静的なhtmlはGitHubのprivateリポジトリで\n管理しており、変更があったらrsyncでコピーしてました。\nあまり変更しないのでそんなに困ってませんでしたが、ちょっとダサいの\nとCapistrano3を使ってみたかったので、エイヤッと導入しました。\nhttps://github.com/capistrano/capistrano の通りにGemfileに\n gem &lsquo;capistrano&rsquo;, &lsquo;~&gt; 3.2.0&rsquo;\nを追加して、以下を実行しました。\n$ bundle exec cap install\n このようなファイルが自動生成されます。\nCapfile config ├── deploy │　├── production.rb │　└── staging.rb └── deploy.rb ファイル名を以下のように変更しました。melodyはVagrantのVMです。\nCapfile config ├── deploy │　├── prod.rb │　└── melody.rb └── deploy.rb ファイルの内容はこんな感じ\n Capistrano3からdeploy:setup不要になったので、初回から以下のコマンド\nでOKです。\n# to masutaka.net $ bundle exec cap prod deploy # to vagrant $ bundle exec cap melody deploy /var/www/vhosts/masutaka.net以下にデプロイされます。","contentSnippet":"http://masutaka.net/ 以下の静的なhtmlはGitHubのprivateリポジトリで管理しており、変更があったらrsyncでコピーしてました。あまり変更しないのでそんなに困ってませんでしたが、ちょっとダサいのとCapistrano3を使ってみたかったので、エイヤッと導入しました。https://github.com/capistrano/capistrano の通りにGemfileに gem ‘capistrano’, ‘~> 3.2.0’を追加して、以下を実行しました。$ bundle exec cap install このようなファイルが自動生成されます。Capfile config ├── deploy │　├── production.rb │　└── staging.rb └── deploy.rb ファイル名を以下のように変更しました。melodyはVagrantのVMです。Capfile config ├── deploy │　├── prod.rb │　└── melody.rb └── deploy.rb ファイルの内容はこんな感じ Capistrano3からdeploy:setup不要になったので、初回から以下のコマンドでOKです。# to masutaka.net $ bundle exec cap prod deploy # to vagrant $ bundle exec cap melody deploy /var/www/vhosts/masutaka.net以下にデプロイされます。","link":"https://masutaka.net/2014-05-03-1/","isoDate":"2014-05-03T00:00:00.000Z","dateMiliSeconds":1399075200000,"authorName":"masutaka"},{"title":"『チーム開発実践入門』はツライ環境で開発している方にオススメ","content":"第２章のケーススタディにある、以下の様なツライ環境で開発している方にお\nすすめの一冊です。\n・毎日バグ対応に追われている\n・検証用環境がない\n・適切なバージョン管理システムを使っていない。もしくはバージョン管理システムを適切に使っていない\n・リファクタリングできない、もしくは奨励されていない\n・リリース手順が複雑\nチームで開発するために必要なノウハウが広く浅く書かれています。手始めに\nこの本を読んでから『GitHub実践入門 』や『入門ChefSolo 』に進むと良いので\nはないでしょうか。\n幸いにも私はそれほど当てはまらない職場で働いている(いた)ため、ほぼ既知\nの内容でしたが、第６章のデプロイの自動化や第７章のリグレッションテスト\nは思考を再整理する上で有用でした。\n個人的にはSeleniumはいきなり導入するものではなく、Capybaraでカバーでき\nないブラウザ依存のテストをするくらいが良いとは思いますが。\n第３章ではバージョン管理の歴史が書かれています。初めて使ったSCMがRCSだっ\nた私のようなおっさんホイホイの章でもあります。(そういえば20年くらい前の\nキ○ノンのある部署ではNFS上に巨大なRCSファイル群が配置され、RCSなのにリ\nポジトリのように扱えました。今考えるとすごい環境だったなあと思います。)\nちょっと気になったのが第４章のチケット管理。\n P112\nチケット管理システムを使って、チケットを中心として開発フローを組み立て\nた方法論をチケット駆動開発(TiDD)と呼びます。\n 個人的にはチケット管理システムにこだわる必要はないと思います。付箋紙を\n使ってもTiDDはできるので。\n取り留めがなくなってしまいましたが、何か引っかかるものがある方は読むと\n良いと思います。\n※ Amazonのレビューにも同じ内容を投稿しました。","contentSnippet":"第２章のケーススタディにある、以下の様なツライ環境で開発している方におすすめの一冊です。・毎日バグ対応に追われている・検証用環境がない・適切なバージョン管理システムを使っていない。もしくはバージョン管理システムを適切に使っていない・リファクタリングできない、もしくは奨励されていない・リリース手順が複雑チームで開発するために必要なノウハウが広く浅く書かれています。手始めにこの本を読んでから『GitHub実践入門 』や『入門ChefSolo 』に進むと良いのではないでしょうか。幸いにも私はそれほど当てはまらない職場で働いている(いた)ため、ほぼ既知の内容でしたが、第６章のデプロイの自動化や第７章のリグレッションテストは思考を再整理する上で有用でした。個人的にはSeleniumはいきなり導入するものではなく、Capybaraでカバーできないブラウザ依存のテストをするくらいが良いとは思いますが。第３章ではバージョン管理の歴史が書かれています。初めて使ったSCMがRCSだった私のようなおっさんホイホイの章でもあります。(そういえば20年くらい前のキ○ノンのある部署ではNFS上に巨大なRCSファイル群が配置され、RCSなのにリポジトリのように扱えました。今考えるとすごい環境だったなあと思います。)ちょっと気になったのが第４章のチケット管理。 P112チケット管理システムを使って、チケットを中心として開発フローを組み立てた方法論をチケット駆動開発(TiDD)と呼びます。 個人的にはチケット管理システムにこだわる必要はないと思います。付箋紙を使ってもTiDDはできるので。取り留めがなくなってしまいましたが、何か引っかかるものがある方は読むと良いと思います。※ Amazonのレビューにも同じ内容を投稿しました。","link":"https://masutaka.net/2014-04-26-1/","isoDate":"2014-04-26T00:00:00.000Z","dateMiliSeconds":1398470400000,"authorName":"masutaka"},{"title":"NHKニュース24で遊んでたら今日のピックアップツイートに採用された件","content":"今年2月に、最後の3種の神器であるテレビが来たわけですが、最近の\nNHKニュースはツイートを表示するんですね。なんとリスキーな&hellip;。\nというわけでちょっと遊んでみました。\nまずは軽いジャブ。ゲストの中山先生(?)の額の汗が気になったので。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  先を越されてしまいましたorz\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  投げやり\nloading...\n   if (localStorage.","contentSnippet":"今年2月に、最後の3種の神器であるテレビが来たわけですが、最近のNHKニュースはツイートを表示するんですね。なんとリスキーな…。というわけでちょっと遊んでみました。まずは軽いジャブ。ゲストの中山先生(?)の額の汗が気になったので。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  先を越されてしまいましたorzloading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  投げやりloading...   if (localStorage.","link":"https://masutaka.net/2014-04-25-1/","isoDate":"2014-04-25T00:00:00.000Z","dateMiliSeconds":1398384000000,"authorName":"masutaka"},{"title":"serverspecでファイルやディレクトリのテストの重複を取り除く","content":"serverspecでは、このようなテストを書くことが多いと思います。\ndescribe file &#39;/var/www/vhosts&#39; do it { should be_directory } it { should be_owned_by &#39;root&#39; } it { should be_grouped_into &#39;www-data&#39; } it { should be_mode 775 } end describe file &#39;/home/masutaka/.ssh/authorized_keys&#39; do it { should be_file } it { should be_owned_by &#39;masutaka&#39; } it { should be_grouped_into &#39;masutaka&#39; } it { should be_mode 600 } end テストはDRYにしすぎるべきではありませんが、数が増えてくるとさすがに\n冗長なのでこのように変更してみました。\ndescribe file &#39;/var/www/vhosts&#39; do it_behaves_like &#39;a directory root:www-data 775&#39; end describe file &#39;/home/masutaka/.","contentSnippet":"serverspecでは、このようなテストを書くことが多いと思います。describe file '/var/www/vhosts' do it { should be_directory } it { should be_owned_by 'root' } it { should be_grouped_into 'www-data' } it { should be_mode 775 } end describe file '/home/masutaka/.ssh/authorized_keys' do it { should be_file } it { should be_owned_by 'masutaka' } it { should be_grouped_into 'masutaka' } it { should be_mode 600 } end テストはDRYにしすぎるべきではありませんが、数が増えてくるとさすがに冗長なのでこのように変更してみました。describe file '/var/www/vhosts' do it_behaves_like 'a directory root:www-data 775' end describe file '/home/masutaka/.","link":"https://masutaka.net/2014-04-20-2/","isoDate":"2014-04-20T01:00:00.000Z","dateMiliSeconds":1397955600000,"authorName":"masutaka"},{"title":"大江戸Ruby会議04に行ってきた #oedo04","content":"大江戸Ruby会議04 前日のアルコールが残っていて、着いたのは午後&hellip;。バカバカバカバカ。\nそれでも楽しめました。\n柴田さんの発表を聞けなかったことは激しく後悔。\nFrom &lsquo;Legacy&rsquo; to &lsquo;Edge&rsquo; 2014 edition // Speaker Deck 何度かお会いしたことがある伊藤さんの発表は、チャレンジングで一番良\nかった。\n&ldquo;1年かけてgemを1つ作りました&rdquo;\nKawamotoさんの発表を聞いて、C言語経験者の端くれとして\nruby-2.1.1.tar.gzをダウンロードしてobject.cを眺めるところまでやった。\n&ldquo;RubyVM読んでみた&rdquo;\nSasada夫妻の発表は圧巻。勉強にもなりました。メソッド名忘れた。。\n&ldquo;Object Bouquet ～ 幸せの花束・RValue のきらめきを添えて ～&rdquo;\nNishimuraさんの発表は30歳になって英語留学した話。実際に行動した人の\n話は面白いし説得力がある。\n&ldquo;Another language you should learn&rdquo;\n松田さんはこんな発表もするんですね。ソフトウェア開発は建築の手法の\n多くを参考にしているので、家を建てることはある意味究極的なことかも\nしれない。小学校高学年頃に実家の建て替えをした時、大工さんの仕事を\n見るために毎日毎日通ったことを思い出した。\n&ldquo;Hacking Home&rdquo;\nAokiさんの話も面白かったなあ。同期会が19:00から恵比寿であったので、\n19:00過ぎに撤退..。\n&ldquo;Ruby会議でSQLの話をするのは間違っているだろうか&rdquo;\n追記(2014-04-20):\nスライドはこちらにまとまってました。この記事へのリンクもありがとう\nございます。\n大江戸Ruby会議04参加しました！ スライド・リンクまとめ - 酒と泪とRubyとRailsと あとで読むかも。\nRuby Hacking Guide を Kindle で読めるようにする - Stats of the Rivers Ruby Under a Microscope を読んでみた （つまみぐい紹介編） // Speaker Deck ","contentSnippet":"大江戸Ruby会議04 前日のアルコールが残っていて、着いたのは午後…。バカバカバカバカ。それでも楽しめました。柴田さんの発表を聞けなかったことは激しく後悔。From ‘Legacy’ to ‘Edge’ 2014 edition // Speaker Deck 何度かお会いしたことがある伊藤さんの発表は、チャレンジングで一番良かった。“1年かけてgemを1つ作りました”Kawamotoさんの発表を聞いて、C言語経験者の端くれとしてruby-2.1.1.tar.gzをダウンロードしてobject.cを眺めるところまでやった。“RubyVM読んでみた”Sasada夫妻の発表は圧巻。勉強にもなりました。メソッド名忘れた。。“Object Bouquet ～ 幸せの花束・RValue のきらめきを添えて ～”Nishimuraさんの発表は30歳になって英語留学した話。実際に行動した人の話は面白いし説得力がある。“Another language you should learn”松田さんはこんな発表もするんですね。ソフトウェア開発は建築の手法の多くを参考にしているので、家を建てることはある意味究極的なことかもしれない。小学校高学年頃に実家の建て替えをした時、大工さんの仕事を見るために毎日毎日通ったことを思い出した。“Hacking Home”Aokiさんの話も面白かったなあ。同期会が19:00から恵比寿であったので、19:00過ぎに撤退..。“Ruby会議でSQLの話をするのは間違っているだろうか”追記(2014-04-20):スライドはこちらにまとまってました。この記事へのリンクもありがとうございます。大江戸Ruby会議04参加しました！ スライド・リンクまとめ - 酒と泪とRubyとRailsと あとで読むかも。Ruby Hacking Guide を Kindle で読めるようにする - Stats of the Rivers Ruby Under a Microscope を読んでみた （つまみぐい紹介編） // Speaker Deck","link":"https://masutaka.net/2014-04-20-1/","isoDate":"2014-04-20T00:00:00.000Z","dateMiliSeconds":1397952000000,"authorName":"masutaka"},{"title":"Ubuntu13.10のVagrantで/vagrantが見れなくてハマった","content":"ls /vagrantから返ってこなくて、今日はずっと調べてました。。。\nBoxはUbuntu Officialのやつ\nhttp://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box 結論から言うと、vagrant-vbguest pluginをインストールし、vagrantを起\n動、vagrantの中で/usr/lib/VBoxGuestAdditionsを見えるようにしてあげ\nればOK。道は長かった。\n $ vagrant plugin install vagrant-vbguest\n$ vagrant up\n Vagrant起動の途中でvbguest pluginによって\n/Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso\nがvagrantにインストールされます。\nこの時点ではマウントに失敗します。\ndefault: /vagrant =&gt; /Users/masutaka/projects/example.com Failed to mount folders in Linux guest. This is usually because the &#34;vboxsf&#34; file system is not available. Please verify that the guest additions are properly installed in the guest and can work properly. The command attempted was: mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` /vagrant /vagrant mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` /vagrant /vagrant sshログインして、/usr/lib/VBoxGuestAdditionsを見えるようにしてあげます。","contentSnippet":"ls /vagrantから返ってこなくて、今日はずっと調べてました。。。BoxはUbuntu Officialのやつhttp://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box 結論から言うと、vagrant-vbguest pluginをインストールし、vagrantを起動、vagrantの中で/usr/lib/VBoxGuestAdditionsを見えるようにしてあげればOK。道は長かった。 $ vagrant plugin install vagrant-vbguest$ vagrant up Vagrant起動の途中でvbguest pluginによって/Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.isoがvagrantにインストールされます。この時点ではマウントに失敗します。default: /vagrant => /Users/masutaka/projects/example.com Failed to mount folders in Linux guest. This is usually because the \"vboxsf\" file system is not available. Please verify that the guest additions are properly installed in the guest and can work properly. The command attempted was: mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` /vagrant /vagrant mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` /vagrant /vagrant sshログインして、/usr/lib/VBoxGuestAdditionsを見えるようにしてあげます。","link":"https://masutaka.net/2014-04-12-1/","isoDate":"2014-04-12T00:00:00.000Z","dateMiliSeconds":1397260800000,"authorName":"masutaka"},{"title":"RubyのOpenSSL::OPENSSL_VERSIONはなぜ定数？","content":"本日ネットを震撼させているopensslの脆弱性。\nOpenSSLの重大バグが発覚。インターネットの大部分に影響の可能性｜TechCrunch Japan 私のMacbookAirにインストールしたrubyはHomebrewのopensslをリンクして\nいるので、状況を調べてみました。\n[2014-01-25-2] の方法でrubyをビルドしているので、Homebrewのopensslを\nリンクしています。\n$ otool -L ~/.rbenv/versions/2.1.0/lib/ruby/2.1.0/x86_64-darwin13.0/openssl.bundle /Users/masutaka/.rbenv/versions/2.1.0/lib/ruby/2.1.0/x86_64-darwin13.0/openssl.bundle: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0) ★これ /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0) ★これ /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5) /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1) /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0) brew info opensslによると、Homebrewのopensslは1.0.1fです。\n今回の対象です。\n以下のコマンドでも調べられるようです。同様の結果を得られました。\n $ ruby -ropenssl -e &ldquo;p OpenSSL::OPENSSL_VERSION&rdquo;\n&ldquo;OpenSSL 1.0.1f 6 Jan 2014&rdquo;\n 対策が施された1.0.1gにアップデートします。\n $ brew upgrade openssl","contentSnippet":"本日ネットを震撼させているopensslの脆弱性。OpenSSLの重大バグが発覚。インターネットの大部分に影響の可能性｜TechCrunch Japan 私のMacbookAirにインストールしたrubyはHomebrewのopensslをリンクしているので、状況を調べてみました。[2014-01-25-2] の方法でrubyをビルドしているので、Homebrewのopensslをリンクしています。$ otool -L ~/.rbenv/versions/2.1.0/lib/ruby/2.1.0/x86_64-darwin13.0/openssl.bundle /Users/masutaka/.rbenv/versions/2.1.0/lib/ruby/2.1.0/x86_64-darwin13.0/openssl.bundle: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0) ★これ /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0) ★これ /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5) /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1) /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0) brew info opensslによると、Homebrewのopensslは1.0.1fです。今回の対象です。以下のコマンドでも調べられるようです。同様の結果を得られました。 $ ruby -ropenssl -e “p OpenSSL::OPENSSL_VERSION”“OpenSSL 1.0.1f 6 Jan 2014” 対策が施された1.0.1gにアップデートします。 $ brew upgrade openssl","link":"https://masutaka.net/2014-04-08-1/","isoDate":"2014-04-08T00:00:00.000Z","dateMiliSeconds":1396915200000,"authorName":"masutaka"},{"title":"Suicaを簡単に取り出せるiPhone5ケースを買った","content":"前回[2014-01-10-1] から3ヶ月経ってませんが、また買いました。\n電車通勤というものを始めてみたんです(何年ぶりだろう)。JRを経由しな\nいのでPASMOになるんですよね。そうするとオートチャージが付いたビュー\nカードは使えない！\n京王パスポート(JRのビューカードみたいなの)を調べた感じ、オートチャー\nジ機能がついた定期券はないようなので、普通の(自分でチャージする)\nPASMO定期券を買うことにしました。(入社から1ヶ月過ぎたのにまだ買って\nませんがw)\n そうすると、問題は前回買ったケース。ICカードを取り出すのがやや面倒\nなんですよね。以前たつをさんのサイトで見たケースを買うことにしました。\nSuica が格納できる iPhone 5 ケースで通勤も買物も快適！ もうひとつの理由は汚れが吸着しやすく、残念な見た目になったこと。\n滑りにくくて好きだったんですけどねえ。\nかかった費用はこんな感じ。\n本体￥1,100 + 送料￥500 - Amazonギフト券￥1,338 = ￥262\n白・水色・ピンクの３色パネル付きです。最初、パネルが外れやすいので\nは？と不安になりましたが、すぐにピッタリはまりました。見た目もスリ\nムでおしゃれです。滑りやすいので、気をつけないとなー。\nSuicaとiPhoneが一緒になってるとめっちゃ快適です。iD(カード)も一緒に\nしたい。","contentSnippet":"前回[2014-01-10-1] から3ヶ月経ってませんが、また買いました。電車通勤というものを始めてみたんです(何年ぶりだろう)。JRを経由しないのでPASMOになるんですよね。そうするとオートチャージが付いたビューカードは使えない！京王パスポート(JRのビューカードみたいなの)を調べた感じ、オートチャージ機能がついた定期券はないようなので、普通の(自分でチャージする)PASMO定期券を買うことにしました。(入社から1ヶ月過ぎたのにまだ買ってませんがw) そうすると、問題は前回買ったケース。ICカードを取り出すのがやや面倒なんですよね。以前たつをさんのサイトで見たケースを買うことにしました。Suica が格納できる iPhone 5 ケースで通勤も買物も快適！ もうひとつの理由は汚れが吸着しやすく、残念な見た目になったこと。滑りにくくて好きだったんですけどねえ。かかった費用はこんな感じ。本体￥1,100 + 送料￥500 - Amazonギフト券￥1,338 = ￥262白・水色・ピンクの３色パネル付きです。最初、パネルが外れやすいのでは？と不安になりましたが、すぐにピッタリはまりました。見た目もスリムでおしゃれです。滑りやすいので、気をつけないとなー。SuicaとiPhoneが一緒になってるとめっちゃ快適です。iD(カード)も一緒にしたい。","link":"https://masutaka.net/2014-04-02-2/","isoDate":"2014-04-02T01:00:00.000Z","dateMiliSeconds":1396400400000,"authorName":"masutaka"},{"title":"Emacs-24.3からネイティブプロファイラが使えてた","content":"M-x profiler-start で開始。cpu, cpu+mem, mem のどれかを選ぶ。 適当に何か操作する。 M-x profiler-report でレポート表示。\nこれだけです。  profiler-cpu-start()やprofiler-memory-start()がCで実装されているよ\nうです。よくわからんけどEmacs遅い時あるわーって方は使ってみてはいか\nがでしょうか？\n作者はauto-complete.el の@m2ym さん。2009年tokyo-emacs #x02の発表が\nEmacs-23.4で取り込まれたんですね。SUGOI!!\ntokyo-emacs - Google グループ (tokyo-emacs #x02) : 発表者用ページ : ATND elpってのもありますが 、指定したパッケージの関数全てにadviceかけるよ\nうで遅いです。パッケージを跨ぐことも出来ないみたい。\nという話を@tomoyaton として、@hirocaster の問題を解決出来ました！","contentSnippet":"M-x profiler-start で開始。cpu, cpu+mem, mem のどれかを選ぶ。 適当に何か操作する。 M-x profiler-report でレポート表示。これだけです。  profiler-cpu-start()やprofiler-memory-start()がCで実装されているようです。よくわからんけどEmacs遅い時あるわーって方は使ってみてはいかがでしょうか？作者はauto-complete.el の@m2ym さん。2009年tokyo-emacs #x02の発表がEmacs-23.4で取り込まれたんですね。SUGOI!!tokyo-emacs - Google グループ (tokyo-emacs #x02) : 発表者用ページ : ATND elpってのもありますが 、指定したパッケージの関数全てにadviceかけるようで遅いです。パッケージを跨ぐことも出来ないみたい。という話を@tomoyaton として、@hirocaster の問題を解決出来ました！","link":"https://masutaka.net/2014-04-02-1/","isoDate":"2014-04-02T00:00:00.000Z","dateMiliSeconds":1396396800000,"authorName":"masutaka"},{"title":"Brewfileをシェルスクリプト化したら少し幸せになった","content":"loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ぶ、Brewfileの方がカッコいいじゃないですか..(震え声)\nまあ実際そのとおりで、if文とか使えないので不便です。\nさらに、すでにインストール済みのパッケージに新バージョンが出ている\nと、brew bundleの当該installでエラーになるのも不便です。\n今までbrew update =&gt; brew outdated =&gt; brew upgrade =&gt; brew bundleな\nどと頭悪い感じに使っていたので、シェルスクリプト化して賢くしました。\n下記シェルスクリプトを実行すると、更新対象のパッケージがあれば\nupgradeするかプロンプトで問い合わせ(Ctrl-cで中断可)、なければいつも\nのinstallフェーズに進みます。\n 作ってみたら、メソッドとデータを分けるという意味でもtapやinstallは\nBrewfileとして切り出すべきか&hellip;と余計もやもやしましたw\n関連記事: 私もBoxen止めてBrewfile+brew-caskにした [2014-01-25-1] ","contentSnippet":"loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ぶ、Brewfileの方がカッコいいじゃないですか..(震え声)まあ実際そのとおりで、if文とか使えないので不便です。さらに、すでにインストール済みのパッケージに新バージョンが出ていると、brew bundleの当該installでエラーになるのも不便です。今までbrew update => brew outdated => brew upgrade => brew bundleなどと頭悪い感じに使っていたので、シェルスクリプト化して賢くしました。下記シェルスクリプトを実行すると、更新対象のパッケージがあればupgradeするかプロンプトで問い合わせ(Ctrl-cで中断可)、なければいつものinstallフェーズに進みます。 作ってみたら、メソッドとデータを分けるという意味でもtapやinstallはBrewfileとして切り出すべきか…と余計もやもやしましたw関連記事: 私もBoxen止めてBrewfile+brew-caskにした [2014-01-25-1]","link":"https://masutaka.net/2014-03-19-2/","isoDate":"2014-03-19T01:00:00.000Z","dateMiliSeconds":1395190800000,"authorName":"masutaka"},{"title":"今さらながらftpコマンドでの自動ログインとか","content":"数年に一回調べるのでメモ。\n~/.netrcを下記内容で、パーミッションは600で作成。\nmachine ftp.example.com login ユーザ名 password パスワード macdef init bin set prompt &#34;ftp://%M%/ &gt; &#34; cd /hoge ターミナルからftp ftp.example.comを実行すると、バイナリモードに設\n定し、自動ログインしてプロンプトをいい感じに、いつものディレクトリ\nにcdしてくれる。最後の空行は必須。複数ホストは試してない。\nftp -d ftp.example.comなどと、-dオプションをつけると挙動を確認\nできて捗る。\nman ftpも確認すべし。\nUNIXの部屋 コマンド検索:~/.netrc (*BSD/Linux) ","contentSnippet":"数年に一回調べるのでメモ。~/.netrcを下記内容で、パーミッションは600で作成。machine ftp.example.com login ユーザ名 password パスワード macdef init bin set prompt \"ftp://%M%/ > \" cd /hoge ターミナルからftp ftp.example.comを実行すると、バイナリモードに設定し、自動ログインしてプロンプトをいい感じに、いつものディレクトリにcdしてくれる。最後の空行は必須。複数ホストは試してない。ftp -d ftp.example.comなどと、-dオプションをつけると挙動を確認できて捗る。man ftpも確認すべし。UNIXの部屋 コマンド検索:~/.netrc (*BSD/Linux)","link":"https://masutaka.net/2014-03-19-1/","isoDate":"2014-03-19T00:00:00.000Z","dateMiliSeconds":1395187200000,"authorName":"masutaka"},{"title":"フィードフォースに入社してまだ２週間も経っていないけど","content":"リーン開発の現場 P109\n 理想とはたどりつくべき場所のことではなく、\nありたい姿に向かい続けることなんだ！\n ビジネス面や技術面でさまざまな困難を抱えたとしても、こんなチームだっ\nたら必ず成功するはず。そして今のチームは素晴らしいチーム！\n ","contentSnippet":"リーン開発の現場 P109 理想とはたどりつくべき場所のことではなく、ありたい姿に向かい続けることなんだ！ ビジネス面や技術面でさまざまな困難を抱えたとしても、こんなチームだったら必ず成功するはず。そして今のチームは素晴らしいチーム！","link":"https://masutaka.net/2014-03-13-1/","isoDate":"2014-03-13T00:00:00.000Z","dateMiliSeconds":1394668800000,"authorName":"masutaka"},{"title":"ラングリッチを退職し、フィードフォースに入社しました","content":"去年の11月14日にラングリッチ を退職しました。\n退職は人生２回目で[2011-04-22-1] のメタテクノ以来です。\n組み込み業界出身でWebの知識があまりない私を受け入れてくれたラングリッ\nチには、本当に感謝しております。\n今回の退職と転職活動では、多くの方にご心配とご迷惑をお掛けしました。\nこの場を借りてお礼とお詫びを申し上げます。\nラングリッチを振り返る 当時のラングリッチは会社設立からちょうど1年、サービスがローンチされ\nてから9ヶ月経ったあたりでした。\n社員はまだいなかったので、社員番号一桁 どころか社員第一号でした。\n社員番号などない的な。\n当時起きたことをまとめてみました。\n2010年7月17日 ラングリッチ誕生\n2010年8月5日 ラングリッチのプロモアカウントに捕捉される。 多分このツイート をした\nから。\n2010年8月25日 ラングリッチのレッスンを初受講。 滝のような汗は出たが、かなり面白かっ\nたのでレッスンを毎日受け続けることに！(元々私、ラングリッチの生徒だっ\nたんです。こんな記事も[2010-12-19-1] )\n2011年1月1日 ラングリッチのtomoyaさんにTwitterのダイレクトメッセージでコンタクト\nをとり、後日Skypeのチャットでいろいろお話。\n2011年3月2日 メタテクノ最終出社日\n2011年3月3日 有給消化期間を満喫し始める。\n2011年3月11日 14:46に東日本大震災発生。15:00からラングリッチのレッスンが始まって\nしまった(キャンセルはレッスン開始1時間前までw)。停電のためiPhoneの\nSkypeを使って、プライ先生に実況中継。\n2011年3月15日 地震の混乱が収まらない中、関西空港でtomoyaさんと落ち合いフィリピン\nはセブ島にGO!!\n2011年4月1日 サービスの裏側やフィリピンを体験して帰国。この辺からラングリッチの\nカスタマーサポートのお手伝い開始。開発にも着手し始める。\n2011年4月21日 メタテクノ退職日\n2011年4月27日 川崎から引っ越し。西明石行きの夜行バスに乗る。\n2011年4月28日 荷物が来るまでCEOの家に居候。\n2011年5月2日 荷物が来て、オフィス兼住居への引越し完了。\nラングリッチでは本当に色々なことを学びました。スタートアップの黎明\n期からの成長っぷりを体験できたことはもちろんですし、東京に進出して\nからは、アジャイル開発、TDD、まともなWebアプリケーションの作り方等、\nこれらは今も自分の資産となっております。\n最後の大きなプロジェクトはラングリッチへの恩返しのつもりで、全てを\n出し尽くしました。しかしこれが本当に大変で、期日までに終わるのかと\nいう不安があり昼夜問わず開発していたため、2ヶ月間の総コミット数は\n637にもなりました。\n※表示が変ですが、2013年8月31日から2013年11月1日の総コミット数です。\nもちろんこれは開発者の皆さんだけでなく、関係者全員のご協力のおかげ\nです。そもそもPull Request見てくれる人がいないと成立しないですし。\n開発内で言うと、セキュリティチェック、サーバ構築、フロントエンド、\n要件整理等、自然に役割分担されていきました。あ、オレこれやるわ的な。\n私はアプリ側を実装したため、コミット数が膨れ上がったというわけです。","contentSnippet":"去年の11月14日にラングリッチ を退職しました。退職は人生２回目で[2011-04-22-1] のメタテクノ以来です。組み込み業界出身でWebの知識があまりない私を受け入れてくれたラングリッチには、本当に感謝しております。今回の退職と転職活動では、多くの方にご心配とご迷惑をお掛けしました。この場を借りてお礼とお詫びを申し上げます。ラングリッチを振り返る 当時のラングリッチは会社設立からちょうど1年、サービスがローンチされてから9ヶ月経ったあたりでした。社員はまだいなかったので、社員番号一桁 どころか社員第一号でした。社員番号などない的な。当時起きたことをまとめてみました。2010年7月17日 ラングリッチ誕生2010年8月5日 ラングリッチのプロモアカウントに捕捉される。 多分このツイート をしたから。2010年8月25日 ラングリッチのレッスンを初受講。 滝のような汗は出たが、かなり面白かったのでレッスンを毎日受け続けることに！(元々私、ラングリッチの生徒だったんです。こんな記事も[2010-12-19-1] )2011年1月1日 ラングリッチのtomoyaさんにTwitterのダイレクトメッセージでコンタクトをとり、後日Skypeのチャットでいろいろお話。2011年3月2日 メタテクノ最終出社日2011年3月3日 有給消化期間を満喫し始める。2011年3月11日 14:46に東日本大震災発生。15:00からラングリッチのレッスンが始まってしまった(キャンセルはレッスン開始1時間前までw)。停電のためiPhoneのSkypeを使って、プライ先生に実況中継。2011年3月15日 地震の混乱が収まらない中、関西空港でtomoyaさんと落ち合いフィリピンはセブ島にGO!!2011年4月1日 サービスの裏側やフィリピンを体験して帰国。この辺からラングリッチのカスタマーサポートのお手伝い開始。開発にも着手し始める。2011年4月21日 メタテクノ退職日2011年4月27日 川崎から引っ越し。西明石行きの夜行バスに乗る。2011年4月28日 荷物が来るまでCEOの家に居候。2011年5月2日 荷物が来て、オフィス兼住居への引越し完了。ラングリッチでは本当に色々なことを学びました。スタートアップの黎明期からの成長っぷりを体験できたことはもちろんですし、東京に進出してからは、アジャイル開発、TDD、まともなWebアプリケーションの作り方等、これらは今も自分の資産となっております。最後の大きなプロジェクトはラングリッチへの恩返しのつもりで、全てを出し尽くしました。しかしこれが本当に大変で、期日までに終わるのかという不安があり昼夜問わず開発していたため、2ヶ月間の総コミット数は637にもなりました。※表示が変ですが、2013年8月31日から2013年11月1日の総コミット数です。もちろんこれは開発者の皆さんだけでなく、関係者全員のご協力のおかげです。そもそもPull Request見てくれる人がいないと成立しないですし。開発内で言うと、セキュリティチェック、サーバ構築、フロントエンド、要件整理等、自然に役割分担されていきました。あ、オレこれやるわ的な。私はアプリ側を実装したため、コミット数が膨れ上がったというわけです。","link":"https://masutaka.net/2014-03-09-1/","isoDate":"2014-03-09T00:00:00.000Z","dateMiliSeconds":1394323200000,"authorName":"masutaka"},{"title":"Chromeでよく訪れるサイトにアクセスするためのベストプラクティス","content":"こんな感じで、ブックマークバーに名前なしブックマークを登録します。\nスペースを取りませんし、faviconだけでも案外分かるものです。\nなぜこうしたか？ 実はずっとこの現象に悩まされていました。時々ね。\n ⌘-tで新しいタブを開く fとか打つとfacebook.comなどと補完されるのでReturnキーを押す facebookに移動することなく、アドレスバーの入力も消える ＼(^o^)／ しかたがないのでもう一度入力する  これ、Chrome拡張のSpeed Dial 2 のせいだったんですね。\n1でサムネイル付きブックマークの読み込みが始まって、2でフォーカスを\n奪われるみたい。\nどうやって解決したか？ 安直にSpeed Dial 2を消すと、Googleのトップページっぽいものが表示さ\nれてイヤな感じです。良く見るページの読み込みが若干もたつきますし。\nなので、Speed Dial 2を削除し、同じくChrome拡張のEmpty New Tab Page をインストールしました。この拡張は新しいタブを空っぽで開くだけの拡\n張です。\nこれでSpeed Dial 2の時より、高速に新しいタブを開くことが出来ました。\nよく訪れるサイトは、ブックマークバーから楽々訪問です。\n新たなきづき github.comやfacebook.comなど、本当によく訪れるサイトは、表題のベス\nトプラクティスを使わず、上の方法(アドレスバーから訪問)を使っていた！\nおまけ ⌘-l(エル)でアドレスバーに移動できます。","contentSnippet":"こんな感じで、ブックマークバーに名前なしブックマークを登録します。スペースを取りませんし、faviconだけでも案外分かるものです。なぜこうしたか？ 実はずっとこの現象に悩まされていました。時々ね。 ⌘-tで新しいタブを開く fとか打つとfacebook.comなどと補完されるのでReturnキーを押す facebookに移動することなく、アドレスバーの入力も消える ＼(^o^)／ しかたがないのでもう一度入力する  これ、Chrome拡張のSpeed Dial 2 のせいだったんですね。1でサムネイル付きブックマークの読み込みが始まって、2でフォーカスを奪われるみたい。どうやって解決したか？ 安直にSpeed Dial 2を消すと、Googleのトップページっぽいものが表示されてイヤな感じです。良く見るページの読み込みが若干もたつきますし。なので、Speed Dial 2を削除し、同じくChrome拡張のEmpty New Tab Page をインストールしました。この拡張は新しいタブを空っぽで開くだけの拡張です。これでSpeed Dial 2の時より、高速に新しいタブを開くことが出来ました。よく訪れるサイトは、ブックマークバーから楽々訪問です。新たなきづき github.comやfacebook.comなど、本当によく訪れるサイトは、表題のベストプラクティスを使わず、上の方法(アドレスバーから訪問)を使っていた！おまけ ⌘-l(エル)でアドレスバーに移動できます。","link":"https://masutaka.net/2014-02-13-2/","isoDate":"2014-02-13T01:00:00.000Z","dateMiliSeconds":1392253200000,"authorName":"masutaka"},{"title":"phpenvでちょっと古めのphp-5.3.28をインストールしたメモ","content":"ちょっと5.3系があるとうれしいかも的な状況になったので、OSX Mavericksで\nphp-5.3.28をビルドしてみました。すると、こんなリンクエラーになります。\n$ phpenv install 5.3.28 (省略) ----------------- | BUILD ERROR | ----------------- Here are the last 10 lines from the log: ----------------------------------------- _load_all_certs_from_file in openssl.o &#34;_sk_value&#34;, referenced from: _zif_openssl_x509_parse in openssl.o _zif_openssl_csr_new in openssl.o _zif_openssl_pkcs7_verify in openssl.o _php_openssl_parse_config in openssl.o _php_openssl_sockop_set_option in xp_ssl.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [sapi/fpm/php-fpm] Error 1 ----------------------------------------- The full Log is available at &#39;/tmp/php-build.","contentSnippet":"ちょっと5.3系があるとうれしいかも的な状況になったので、OSX Mavericksでphp-5.3.28をビルドしてみました。すると、こんなリンクエラーになります。$ phpenv install 5.3.28 (省略) ----------------- | BUILD ERROR | ----------------- Here are the last 10 lines from the log: ----------------------------------------- _load_all_certs_from_file in openssl.o \"_sk_value\", referenced from: _zif_openssl_x509_parse in openssl.o _zif_openssl_csr_new in openssl.o _zif_openssl_pkcs7_verify in openssl.o _php_openssl_parse_config in openssl.o _php_openssl_sockop_set_option in xp_ssl.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [sapi/fpm/php-fpm] Error 1 ----------------------------------------- The full Log is available at '/tmp/php-build.","link":"https://masutaka.net/2014-02-13-1/","isoDate":"2014-02-13T00:00:00.000Z","dateMiliSeconds":1392249600000,"authorName":"masutaka"},{"title":"Homebrewのnginxをphpenvのphp-fpm付きでセットアップしたメモ","content":"最新のPHPを使えるようになったので[2014-02-09-1] 、nginxもセットアッ\nプしてみました。\nこれでようやくOSX MavericksのApache&amp;PHPとオサラバできます。\nphp-fpmの設定と起動 ~/.phpenv/versions/5.5.9/etc/php-fpm.conf.defaultを以下のように修正し、\n同ディレクトリにphp-fpm.confとして保存しました。\nuserとgroupをコメントアウトしているのは、今回のNgnixはユーザ権限で\n動かす適当なものだからです。\nlistenはnginxとの橋渡しです。今回は同一マシンなのでUNIXドメインソケッ\nトを使用しました。\n 自動起動スクリプトを作成しました。\n 上記自動起動用のファイルを設置しました。\n$ ln -sfv &lt;path to org.php.php-fpm.plist&gt; ~/Library/LaunchAgents 自動起動ON＆起動しました。\n$ launchctl load -w ~/Library/LaunchAgents/org.php.php-fpm.plist nginxのインストールと設定、起動 Apacheを自動起動する設定にしていたので削除しました。\n$ sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist Ngnixはbrewコマンドでインストールしました。\n(実際はbrew bundle[2014-01-25-1] でインストールしてます。)\n$ brew install nginx ==&gt; Downloading http://nginx.org/download/nginx-1.4.4.tar.gz Already downloaded: /Library/Caches/Homebrew/nginx-1.4.4.tar.gz ==&gt; ./configure --prefix=/usr/local/Cellar/nginx/1.4.4 --with-http_ssl_module --with-pcre --with-ipv6 --sbin-path=/usr/local/Cellar/nginx/1.4.4/bin/nginx --with-cc-opt=-I/usr ==&gt; make ==&gt; make install ==&gt; Caveats Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.","contentSnippet":"最新のPHPを使えるようになったので[2014-02-09-1] 、nginxもセットアップしてみました。これでようやくOSX MavericksのApache&PHPとオサラバできます。php-fpmの設定と起動 ~/.phpenv/versions/5.5.9/etc/php-fpm.conf.defaultを以下のように修正し、同ディレクトリにphp-fpm.confとして保存しました。userとgroupをコメントアウトしているのは、今回のNgnixはユーザ権限で動かす適当なものだからです。listenはnginxとの橋渡しです。今回は同一マシンなのでUNIXドメインソケットを使用しました。 自動起動スクリプトを作成しました。 上記自動起動用のファイルを設置しました。$ ln -sfv <path to org.php.php-fpm.plist> ~/Library/LaunchAgents 自動起動ON＆起動しました。$ launchctl load -w ~/Library/LaunchAgents/org.php.php-fpm.plist nginxのインストールと設定、起動 Apacheを自動起動する設定にしていたので削除しました。$ sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist Ngnixはbrewコマンドでインストールしました。(実際はbrew bundle[2014-01-25-1] でインストールしてます。)$ brew install nginx ==> Downloading http://nginx.org/download/nginx-1.4.4.tar.gz Already downloaded: /Library/Caches/Homebrew/nginx-1.4.4.tar.gz ==> ./configure --prefix=/usr/local/Cellar/nginx/1.4.4 --with-http_ssl_module --with-pcre --with-ipv6 --sbin-path=/usr/local/Cellar/nginx/1.4.4/bin/nginx --with-cc-opt=-I/usr ==> make ==> make install ==> Caveats Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.","link":"https://masutaka.net/2014-02-11-1/","isoDate":"2014-02-11T00:00:00.000Z","dateMiliSeconds":1392076800000,"authorName":"masutaka"},{"title":"HomebrewのphpenvでPHPをインストールしたメモ","content":"Vagrant使ってたから、OSXでPHP使う必要なかっただけだから..(震え声)\nそういうわけでphpenvでPHP環境を作ってみました。まずは基礎知識。\n  phpenv\nRubyのrbenv、Perlのplenvに相当。複数バージョンのPHPをHOMEにインストー\nルし、切り替えて使うツール。というよりシステムを汚さないために使う感じ。\n  pecl, pear\nRubyのgem、Perlのcpanmに相当。peclはCで書かれ、pearはPHPで書かれて\nいる。PHPはCで書かれたライブラリ(要は*.so)を動的にロードできないた\nめ、このように分かれているそう。\n  composer\nRubyのbundler、Perlのcartonに相当。アプリごとにライブラリを切り替え\nることが出来る。\n  Homebrewのphpenvをインストール 普通にbrewコマンドでインストールします。\n(実際はbrew bundle[2014-01-25-1] でインストールしてます。)\n$ brew install phpenv ==&gt; Downloading https://github.com/CHH/phpenv/archive/01a2c1e25096f8ff10f2f781428a5d470e1ecaba.tar.gz Already downloaded: /Library/Caches/Homebrew/phpenv-01a2c1e.tar.gz ==&gt; /usr/local/Cellar/phpenv/01a2c1e/bin/phpenv-install.sh ==&gt; Caveats To finish installing phpenv: * Add ~/.phpenv/bin to your $PATH * Add &#34;eval $(phpenv init -)&#34; at the end of your ~/.bashrc * Restart your shell ==&gt; Summary � /usr/local/Cellar/phpenv/01a2c1e: 6 files, 24K, built in 7 seconds 上の説明のとおり、~/.","contentSnippet":"Vagrant使ってたから、OSXでPHP使う必要なかっただけだから..(震え声)そういうわけでphpenvでPHP環境を作ってみました。まずは基礎知識。  phpenvRubyのrbenv、Perlのplenvに相当。複数バージョンのPHPをHOMEにインストールし、切り替えて使うツール。というよりシステムを汚さないために使う感じ。  pecl, pearRubyのgem、Perlのcpanmに相当。peclはCで書かれ、pearはPHPで書かれている。PHPはCで書かれたライブラリ(要は*.so)を動的にロードできないため、このように分かれているそう。  composerRubyのbundler、Perlのcartonに相当。アプリごとにライブラリを切り替えることが出来る。  Homebrewのphpenvをインストール 普通にbrewコマンドでインストールします。(実際はbrew bundle[2014-01-25-1] でインストールしてます。)$ brew install phpenv ==> Downloading https://github.com/CHH/phpenv/archive/01a2c1e25096f8ff10f2f781428a5d470e1ecaba.tar.gz Already downloaded: /Library/Caches/Homebrew/phpenv-01a2c1e.tar.gz ==> /usr/local/Cellar/phpenv/01a2c1e/bin/phpenv-install.sh ==> Caveats To finish installing phpenv: * Add ~/.phpenv/bin to your $PATH * Add \"eval $(phpenv init -)\" at the end of your ~/.bashrc * Restart your shell ==> Summary � /usr/local/Cellar/phpenv/01a2c1e: 6 files, 24K, built in 7 seconds 上の説明のとおり、~/.","link":"https://masutaka.net/2014-02-09-1/","isoDate":"2014-02-09T00:00:00.000Z","dateMiliSeconds":1391904000000,"authorName":"masutaka"},{"title":"このブログのはてなブックマーク数もGrowthForecastに記録し始めた","content":"前回[2014-02-03-1] に引き続きこの話題です。\nこのブログのはてなブックマーク数も記録し始めました。\nhttp://masutaka.net:5125/list/chalow/subscribers 実装はこれ。\nhttps://github.com/masutaka/growthforecast_postman/pull/1/files 今回初めてXMLRPC APIを使いましたが面倒ですね。Wikipedia によると\n その後、これに新たな機能を追加したものがSOAPへと発展した。\nとあるので、今は廃れた仕様なのでしょうか。\n 初め、こんな感じでXMLRPC::Client使おうとしたけど、取得後のエラー\nチェックに引っかかってうまくいかなかった。\n 最終的にはNet::HTTP使ったシンプルなもの になりました。RESTに慣れてい\nる身としては、こちらのほうが分かりやすい。\nSee also\nはてなブックマーク件数取得API - Hatena Developer Center ","contentSnippet":"前回[2014-02-03-1] に引き続きこの話題です。このブログのはてなブックマーク数も記録し始めました。http://masutaka.net:5125/list/chalow/subscribers 実装はこれ。https://github.com/masutaka/growthforecast_postman/pull/1/files 今回初めてXMLRPC APIを使いましたが面倒ですね。Wikipedia によると その後、これに新たな機能を追加したものがSOAPへと発展した。とあるので、今は廃れた仕様なのでしょうか。 初め、こんな感じでXMLRPC::Client使おうとしたけど、取得後のエラーチェックに引っかかってうまくいかなかった。 最終的にはNet::HTTP使ったシンプルなもの になりました。RESTに慣れている身としては、こちらのほうが分かりやすい。See alsoはてなブックマーク件数取得API - Hatena Developer Center","link":"https://masutaka.net/2014-02-04-1/","isoDate":"2014-02-04T00:00:00.000Z","dateMiliSeconds":1391472000000,"authorName":"masutaka"},{"title":"FeedlyやlivedoorReaderの購読者数をGrowthForecastにポストするRubyスクリプト作った","content":"   settings.example.ymlをsettings.ymlとしてコピーし、適当に書き換えて\nmain.rbを実行すれば、お手元のGrowthForecastにポストされると思います。\ncronに登録しとけばよいかと。\nこんな感じで確認できます。\nhttp://masutaka.net:5125/list/chalow/subscribers 作ったきっかけ 先日、55はてブ取得できた[2014-01-25-1] は、Pocketでは68ストックされ\nていたのですよね。\nあと、今までは[TopHatenar] masutaka.net さんの順位 を見ていればなん\nとなく人気具合が分かりましたが、他のサービスも台頭してきてよく分か\nらなくなってきました。更新もリアルタイムじゃないし。\nそれじゃあ、全部まとめてGrowthForecastに記録すれば分かりやすいかなと。\n今のところ記録するのは、FeedlyとlivedoorReaderだけです。Pocketや\nはてブは今後対応する予定です。Pocketについてはひとまずパブリッシャー\nツールを申し込みました。\nあとで読まれた回数までわかる！Pocketパブリッシャーツールを使ってみることにしました。サイトの登録方法など｜10251 最初は気になったらFeedly Subscribers Checker 2 で調べりゃいいかなー\nと思いましたが、調べるうちに履歴も欲しくなってきたｗ\n雑感 初めはshell scriptでcurl使うくらいのつもりが、気がついたらそれなり\nの大きさになっていました。。\nRaspberry Pi[2013-12-05-1] を有効活用しようとも思っていたけど、使う\n意味を見出せなかった。\n作るにあたって、@june29 さんの29hours[2013-04-14-2] を参考にさせて頂\nきました。gemとか全く調べずに車輪の再発明する気満々で作ったので、今\n後はリファクタリングもする予定です。\nThanks!\nFeedlyでのブログ購読者数を取得するためのメモ｜メモ帳代わりのブログ RubyでJSON形式の結果が返ってくるURLをParseする - Qiita [キータ] RSS購読者数を知るための方法をご紹介 / かりんと～く 【 夢猫工房 】 See also\nThe feedly Cloud API ","contentSnippet":"settings.example.ymlをsettings.ymlとしてコピーし、適当に書き換えてmain.rbを実行すれば、お手元のGrowthForecastにポストされると思います。cronに登録しとけばよいかと。こんな感じで確認できます。http://masutaka.net:5125/list/chalow/subscribers 作ったきっかけ 先日、55はてブ取得できた[2014-01-25-1] は、Pocketでは68ストックされていたのですよね。あと、今までは[TopHatenar] masutaka.net さんの順位 を見ていればなんとなく人気具合が分かりましたが、他のサービスも台頭してきてよく分からなくなってきました。更新もリアルタイムじゃないし。それじゃあ、全部まとめてGrowthForecastに記録すれば分かりやすいかなと。今のところ記録するのは、FeedlyとlivedoorReaderだけです。Pocketやはてブは今後対応する予定です。Pocketについてはひとまずパブリッシャーツールを申し込みました。あとで読まれた回数までわかる！Pocketパブリッシャーツールを使ってみることにしました。サイトの登録方法など｜10251 最初は気になったらFeedly Subscribers Checker 2 で調べりゃいいかなーと思いましたが、調べるうちに履歴も欲しくなってきたｗ雑感 初めはshell scriptでcurl使うくらいのつもりが、気がついたらそれなりの大きさになっていました。。Raspberry Pi[2013-12-05-1] を有効活用しようとも思っていたけど、使う意味を見出せなかった。作るにあたって、@june29 さんの29hours[2013-04-14-2] を参考にさせて頂きました。gemとか全く調べずに車輪の再発明する気満々で作ったので、今後はリファクタリングもする予定です。Thanks!Feedlyでのブログ購読者数を取得するためのメモ｜メモ帳代わりのブログ RubyでJSON形式の結果が返ってくるURLをParseする - Qiita [キータ] RSS購読者数を知るための方法をご紹介 / かりんと～く 【 夢猫工房 】 See alsoThe feedly Cloud API","link":"https://masutaka.net/2014-02-03-1/","isoDate":"2014-02-03T00:00:00.000Z","dateMiliSeconds":1391385600000,"authorName":"masutaka"},{"title":"HomebrewのPostgreSQLをきれいにインストールした","content":"Heroku用にインストールしていたPostgreSQL.app をHomebrewのものに変更\nしました。\nPostgreSQL.app をアンインストール [Mac] PostgreSQL.app をアンインストール at technote を参考に。\n /Library/PostgreSQL/9.3/uninstall-postgresql.appを実行 /Library/PostgreSQLを削除 OSXのシステム環境設定→ユーザとグループからpostgresユーザを削除 ~/.zshenvからsource /Library/PostgreSQL/9.3/pg_env.shを削除  環境変数とか残っているので、OSXを再起動するのが無難です。\nHomebrewのPostgreSQLをインストール まずは普通にbrewコマンドでインストール。\n(実際はbrew bundle[2014-01-25-1] でインストールしてます。)\n$ brew install postgres ==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/postgresql-9.3.2.mavericks.bottle.tar.gz Already downloaded: /Library/Caches/Homebrew/postgresql-9.3.2.mavericks.bottle.tar.gz ==&gt; Pouring postgresql-9.3.2.mavericks.bottle.tar.gz ==&gt; Caveats If builds of PostgreSQL 9 are failing and you have version 8.x installed, you may need to remove the previous version first. See: https://github.com/Homebrew/homebrew/issues/issue/2510 To migrate existing data from a previous major version (pre-9.","contentSnippet":"Heroku用にインストールしていたPostgreSQL.app をHomebrewのものに変更しました。PostgreSQL.app をアンインストール [Mac] PostgreSQL.app をアンインストール at technote を参考に。 /Library/PostgreSQL/9.3/uninstall-postgresql.appを実行 /Library/PostgreSQLを削除 OSXのシステム環境設定→ユーザとグループからpostgresユーザを削除 ~/.zshenvからsource /Library/PostgreSQL/9.3/pg_env.shを削除  環境変数とか残っているので、OSXを再起動するのが無難です。HomebrewのPostgreSQLをインストール まずは普通にbrewコマンドでインストール。(実際はbrew bundle[2014-01-25-1] でインストールしてます。)$ brew install postgres ==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/postgresql-9.3.2.mavericks.bottle.tar.gz Already downloaded: /Library/Caches/Homebrew/postgresql-9.3.2.mavericks.bottle.tar.gz ==> Pouring postgresql-9.3.2.mavericks.bottle.tar.gz ==> Caveats If builds of PostgreSQL 9 are failing and you have version 8.x installed, you may need to remove the previous version first. See: https://github.com/Homebrew/homebrew/issues/issue/2510 To migrate existing data from a previous major version (pre-9.","link":"https://masutaka.net/2014-02-01-1/","isoDate":"2014-02-01T00:00:00.000Z","dateMiliSeconds":1391212800000,"authorName":"masutaka"},{"title":"改めてHomebrewをクリーンインストールしたメモ","content":"BoxenからHomebrewに戻ってきたので[2014-01-25-1] 、改めてまっさらな状\n態からインストール。[2011-07-26-1] 以来だね。/usr/localは空っぽにしといた。\nhttp://brew.sh より。\n $ ruby -e &ldquo;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"  インストールが終わると、brew doctorしろと言われた。doctorから促され\nるがままにXQuartz-2.7.5.dmgをインストール。\nbrewのzsh補完ファイルのリンク先をBoxenからHomebrewに変更。\n $ ln -sf /usr/local/Library/Contributions/brew_zsh_completion.zsh ~/.zsh/functions/_brew\n※ ~/.zshrcでFPATH=$HOME/.zsh/functions:$FPATHを追加してある。\n [2014-01-25-1] のBrewfile使って、brew bundleで各パッケージをインストール。\nRubyはrbenvから2.0.0-p353とruby-2.1.0をインストール。\n# ruby-buildはHomebrew管理にはしない $ git clone git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build # 2.1.0のインストール $ RUBY_CONFIGURE_OPTS=&#34;--with-readline-dir=`brew --prefix readline` --with-openssl-dir=`brew --prefix openssl`&#34; rbenv install 2.1.0 $ rbenv global 2.1.0 &amp;&amp; rbenv rehash &amp;&amp; rehash $ cat ~/projects/home/Gemfile.txt | xargs gem install $ rbenv rehash &amp;&amp; rehash # 2.","contentSnippet":"BoxenからHomebrewに戻ってきたので[2014-01-25-1] 、改めてまっさらな状態からインストール。[2011-07-26-1] 以来だね。/usr/localは空っぽにしといた。http://brew.sh より。 $ ruby -e “$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"  インストールが終わると、brew doctorしろと言われた。doctorから促されるがままにXQuartz-2.7.5.dmgをインストール。brewのzsh補完ファイルのリンク先をBoxenからHomebrewに変更。 $ ln -sf /usr/local/Library/Contributions/brew_zsh_completion.zsh ~/.zsh/functions/_brew※ ~/.zshrcでFPATH=$HOME/.zsh/functions:$FPATHを追加してある。 [2014-01-25-1] のBrewfile使って、brew bundleで各パッケージをインストール。Rubyはrbenvから2.0.0-p353とruby-2.1.0をインストール。# ruby-buildはHomebrew管理にはしない $ git clone git@github.com:sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build # 2.1.0のインストール $ RUBY_CONFIGURE_OPTS=\"--with-readline-dir=`brew --prefix readline` --with-openssl-dir=`brew --prefix openssl`\" rbenv install 2.1.0 $ rbenv global 2.1.0 && rbenv rehash && rehash $ cat ~/projects/home/Gemfile.txt | xargs gem install $ rbenv rehash && rehash # 2.","link":"https://masutaka.net/2014-01-25-2/","isoDate":"2014-01-25T01:00:00.000Z","dateMiliSeconds":1390611600000,"authorName":"masutaka"},{"title":"私もBoxen止めてBrewfile+brew-caskにした","content":"Boxenと比べなくても、導入が簡単なので何かとオススメです。\n要点  Brewfileを使えば、インストールするパッケージを管理できる BrewfileはHomebrewで最初から使える brew-caskもインストールすれば、Chromeとかもインストールできる  Boxenの問題点 [2013-11-23-1] に導入したBoxenは以下の問題がありました。\n○インストールした一部のツールが壊れていることがある。再インストー\nルで直ることもあるし、直らないこともある(詳細は[2013-11-23-1] の追記\n参照)。\n % wget\nzsh: illegal hardware instruction wget\n ○PuppetfileでRubyレシピ等のバージョンが固定されているため、最新の\nバージョンを気軽に試しづらい。というか、レシピのバージョンを上げて\nも問題がないか試したり考えたりするのが面倒くさい。\n○パッケージをインストールしたり構成を変えるときに、エネルギーがい\nる。なんだか腰が重い。\nというわけでBoxenはズビっと削除しました。\n $ git clone git@github.com :masutaka/my-boxen.git\n$ cd my-boxen\n$ ./script/nuke &ndash;all &ndash;force\n 導入方法 Homebrewではbrew bundleコマンドが最初から使えます。このコマンドは\nカレントディレクトリのBrewfileに書かれたコマンドを実行します。\nbrew bundle path/to/Brewfileのようにファイルを指定することも出来ます。\nBrewfileは例えばこんな感じ\n update\ninstall ack\n こちらと同じ意味になります。\n $ brew update\n$ brew install ack\n また、brew-caskというコマンドをインストールすることで、Chromeや\nSkypeなどのアプリも入れられます。","contentSnippet":"Boxenと比べなくても、導入が簡単なので何かとオススメです。要点  Brewfileを使えば、インストールするパッケージを管理できる BrewfileはHomebrewで最初から使える brew-caskもインストールすれば、Chromeとかもインストールできる  Boxenの問題点 [2013-11-23-1] に導入したBoxenは以下の問題がありました。○インストールした一部のツールが壊れていることがある。再インストールで直ることもあるし、直らないこともある(詳細は[2013-11-23-1] の追記参照)。 % wgetzsh: illegal hardware instruction wget ○PuppetfileでRubyレシピ等のバージョンが固定されているため、最新のバージョンを気軽に試しづらい。というか、レシピのバージョンを上げても問題がないか試したり考えたりするのが面倒くさい。○パッケージをインストールしたり構成を変えるときに、エネルギーがいる。なんだか腰が重い。というわけでBoxenはズビっと削除しました。 $ git clone git@github.com :masutaka/my-boxen.git$ cd my-boxen$ ./script/nuke –all –force 導入方法 Homebrewではbrew bundleコマンドが最初から使えます。このコマンドはカレントディレクトリのBrewfileに書かれたコマンドを実行します。brew bundle path/to/Brewfileのようにファイルを指定することも出来ます。Brewfileは例えばこんな感じ updateinstall ack こちらと同じ意味になります。 $ brew update$ brew install ack また、brew-caskというコマンドをインストールすることで、ChromeやSkypeなどのアプリも入れられます。","link":"https://masutaka.net/2014-01-25-1/","isoDate":"2014-01-25T00:00:00.000Z","dateMiliSeconds":1390608000000,"authorName":"masutaka"},{"title":"Herokuにデプロイした時にChatWorkに通知するrakeタスク作った","content":"使っているのはこんな環境です。\n HerokuにRailsのProductionとStaging環境がある。 Stagingで任意のブランチを動かしたいことがある。  今までHerokuにデプロイする時はこうしてましたが、\n$ git push prod master 今後はこのようになりました。\n$ bundle exec rake deploy:prod Dryrunも出来ます。\n$ bundle exec rake deploy:prod DRYRUN=1 Stagingで任意のブランチを動かしたい時はこちら。\n$ bundle exec rake deploy:staging BRANCH=&lt;any-branch&gt;  Gistのページ にも補足情報を書きました。\n皆さん、Herokuへのデプロイはどんな方法でやってます？\nSee also\nChatWorkのAPIを叩けるGemをつくった - 良いあそなすちゃん チャットワークAPIを限定プレビュー公開します！｜ChatWorkブログ 追記(2014-01-24):\nなぜかデプロイ後のHashが更新されないことがあったので、\ngit ls-remote prodの代わりにheroku releaseを使うようにしました。\nなんだかコードが長くなってしまったorz","contentSnippet":"使っているのはこんな環境です。 HerokuにRailsのProductionとStaging環境がある。 Stagingで任意のブランチを動かしたいことがある。  今までHerokuにデプロイする時はこうしてましたが、$ git push prod master 今後はこのようになりました。$ bundle exec rake deploy:prod Dryrunも出来ます。$ bundle exec rake deploy:prod DRYRUN=1 Stagingで任意のブランチを動かしたい時はこちら。$ bundle exec rake deploy:staging BRANCH=<any-branch>  Gistのページ にも補足情報を書きました。皆さん、Herokuへのデプロイはどんな方法でやってます？See alsoChatWorkのAPIを叩けるGemをつくった - 良いあそなすちゃん チャットワークAPIを限定プレビュー公開します！｜ChatWorkブログ 追記(2014-01-24):なぜかデプロイ後のHashが更新されないことがあったので、git ls-remote prodの代わりにheroku releaseを使うようにしました。なんだかコードが長くなってしまったorz","link":"https://masutaka.net/2014-01-19-1/","isoDate":"2014-01-19T00:00:00.000Z","dateMiliSeconds":1390089600000,"authorName":"masutaka"},{"title":"『過負荷に耐えるWebの作り方 ~国民的アイドルグループ選抜総選挙の舞台裏』を読んだ","content":"現場の生々しい声を知ることが出来て大変面白かったです。\n納期が2ヶ月なんですよね。私も去年、同じ期間でボリュームのあるプロジェ\nクトに関わったので、胃がキリキリしてきましたw\nスゴイなと思ったのが、運用経験の少ない技術でシステムを作ったこと。\n毎秒10,000投票以上を実現可能なサンプルプログラムがあり、その後の耐\n久テストにもパスしたとはいえ、よく採用したなあと思いました。まあ、\nカットオーバー直後は心配で一睡もせずにアクセスログを凝視したそうで\nすがw この辺の話もキリキリしてきます。\nあとはこれかな。\nP43\n 入力されたシリアル番号が正しいものか（事前に発行したものか）を確認する\nために、\n・データベースを使って発行済みシリアル番号を管理し、その中に入力された\n番号があるかを検索する\n・データベースではなく、メモリ上で発行済みシリアル番号を管理し、入力さ\nれた番号を検索する\nという方法が挙げられましたが、今回は、処理速度を最優先に考えて、検索処理\nをせずにアルゴリズムでシリアル番号の正当性を確認する方法を採用しました。\n 当初はここがボトルネックになるとの話だったので、この方法を採用した\nのはうまいというか、過負荷なシステムならではと感じました。\n採用された技術は馴染みのないものばかりでしたが、採用の経緯は参考に\nなりました。\nというわけでオススメです。\nP.S.\nP68でtypoを発見。\n×ダウウンロードページ\n○ダウンロードページ","contentSnippet":"現場の生々しい声を知ることが出来て大変面白かったです。納期が2ヶ月なんですよね。私も去年、同じ期間でボリュームのあるプロジェクトに関わったので、胃がキリキリしてきましたwスゴイなと思ったのが、運用経験の少ない技術でシステムを作ったこと。毎秒10,000投票以上を実現可能なサンプルプログラムがあり、その後の耐久テストにもパスしたとはいえ、よく採用したなあと思いました。まあ、カットオーバー直後は心配で一睡もせずにアクセスログを凝視したそうですがw この辺の話もキリキリしてきます。あとはこれかな。P43 入力されたシリアル番号が正しいものか（事前に発行したものか）を確認するために、・データベースを使って発行済みシリアル番号を管理し、その中に入力された番号があるかを検索する・データベースではなく、メモリ上で発行済みシリアル番号を管理し、入力された番号を検索するという方法が挙げられましたが、今回は、処理速度を最優先に考えて、検索処理をせずにアルゴリズムでシリアル番号の正当性を確認する方法を採用しました。 当初はここがボトルネックになるとの話だったので、この方法を採用したのはうまいというか、過負荷なシステムならではと感じました。採用された技術は馴染みのないものばかりでしたが、採用の経緯は参考になりました。というわけでオススメです。P.S.P68でtypoを発見。×ダウウンロードページ○ダウンロードページ","link":"https://masutaka.net/2014-01-13-2/","isoDate":"2014-01-13T01:00:00.000Z","dateMiliSeconds":1389574800000,"authorName":"masutaka"},{"title":"『Upgrading to Rails 4』をKindleとiBookで読めるようにした","content":"Upgrading to Rails 4 を読んだ - HsbtDiary(2013-10-26) 遅ればせながら着手。。\nKindlegenのインストール あらかじめKindlegenをインストールしておきます。Amazonからダウンロー\nド してきても良いですが、Homebrewもお手軽でよいと思います。\n私のHomebrewはBoxenでインストールしたので[2013-11-23-1] 、kindlegen\nをmodules/people/manifests/masutaka.ppに追加してインストールしました。\n素のHomebrewの方は、初めにhomebrew-binary をインストールする必要があ\nるみたいです。バイナリファイルの扱いが少し変わったんですね。\n $ brew tap homebrew/binary\n$ brew install kindlegen\n mobiファイルとepubファイルへの変換 公開されている書籍をGitHubから持ってきて、kitabuで変換するだけです。\n$ git clone git@github.com:alindeman/upgradingtorails4.git $ bundle install --path vendor/bundle $ bundle exec kitabu export $ ls output/ tmp upgradingtorails4.epub upgradingtorails4.html upgradingtorails4.mobi kitabuが生成するファイルはepubとhtmlファイルですが、Kindlegenがイン\nストールされていると、mobiファイルも作ってくれるみたいです。もちろ\nん手動でkindlegen upgradingtorails4.epubして作ることも出来ます。\nあとは、mobiファイルをUSB接続やメールでKindleに転送し、epubファイル\nをiBookにドラッグアンドドロップするだけです。","contentSnippet":"Upgrading to Rails 4 を読んだ - HsbtDiary(2013-10-26) 遅ればせながら着手。。Kindlegenのインストール あらかじめKindlegenをインストールしておきます。Amazonからダウンロード してきても良いですが、Homebrewもお手軽でよいと思います。私のHomebrewはBoxenでインストールしたので[2013-11-23-1] 、kindlegenをmodules/people/manifests/masutaka.ppに追加してインストールしました。素のHomebrewの方は、初めにhomebrew-binary をインストールする必要があるみたいです。バイナリファイルの扱いが少し変わったんですね。 $ brew tap homebrew/binary$ brew install kindlegen mobiファイルとepubファイルへの変換 公開されている書籍をGitHubから持ってきて、kitabuで変換するだけです。$ git clone git@github.com:alindeman/upgradingtorails4.git $ bundle install --path vendor/bundle $ bundle exec kitabu export $ ls output/ tmp upgradingtorails4.epub upgradingtorails4.html upgradingtorails4.mobi kitabuが生成するファイルはepubとhtmlファイルですが、Kindlegenがインストールされていると、mobiファイルも作ってくれるみたいです。もちろん手動でkindlegen upgradingtorails4.epubして作ることも出来ます。あとは、mobiファイルをUSB接続やメールでKindleに転送し、epubファイルをiBookにドラッグアンドドロップするだけです。","link":"https://masutaka.net/2014-01-13-1/","isoDate":"2014-01-13T00:00:00.000Z","dateMiliSeconds":1389571200000,"authorName":"masutaka"},{"title":"499円のSuica対応iPhone5ケースを買った","content":"[2013-10-14-1] にiPhone5sを買ってから、ずっとケースなしで過ごしてき\nました。\nそれは良いのですが、駅の改札を通るときに財布からSuicaを出すのが大変\n面倒だったので(※)、ついにケースを買いました。\n※ 定期入れは落としたことがあるので持ちたくなかった。\nまだSuicaでテストしてませんが、触った感触は499円(※)のわりに悪くな\nい感じです。ただし、背面のGoldは完全に見えなくなりました。\n※ 送料は別途210円でした。\n上海問屋、結構良いですね〜\nhttp://www.donya.jp/ 追記(2014-01-13):\nケースに入れたSuicaは無事使えました。\n追記(2014-01-30):\nあー、ちょっと汚れやすいですね。色がついたり、濡れた後が残ったりし\nています。","contentSnippet":"[2013-10-14-1] にiPhone5sを買ってから、ずっとケースなしで過ごしてきました。それは良いのですが、駅の改札を通るときに財布からSuicaを出すのが大変面倒だったので(※)、ついにケースを買いました。※ 定期入れは落としたことがあるので持ちたくなかった。まだSuicaでテストしてませんが、触った感触は499円(※)のわりに悪くない感じです。ただし、背面のGoldは完全に見えなくなりました。※ 送料は別途210円でした。上海問屋、結構良いですね〜http://www.donya.jp/ 追記(2014-01-13):ケースに入れたSuicaは無事使えました。追記(2014-01-30):あー、ちょっと汚れやすいですね。色がついたり、濡れた後が残ったりしています。","link":"https://masutaka.net/2014-01-10-1/","isoDate":"2014-01-10T00:00:00.000Z","dateMiliSeconds":1389312000000,"authorName":"masutaka"},{"title":"GitHubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってserverspecを動かした","content":"[2013-05-27-2] で書いたとおり、このブログのサーバmasutaka.netは\nChef-soloでレシピを、serverspecでそのテストを書いています。\nソースコードはGitHubのプライベートリポジトリに置いており、お金をか\nけてまでやる気が出なかったのでCIはしていませんでした(※)。\n※ CircleCIの場合、一番安いプランで$19/month\nはてブのホットエントリでこちらの記事を見つけたので、serverspecのCI\nを設定してみました。\nGithubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる｜mah365 serverspec固有の設定 基本的な手順は記事のとおりなので、詰まることはないと思います。\nただしserverspecはssh経由で動作するため、sshの設定が必要です。\n(1) WerckerのサイトでSSH key pairを作成する\n(2) ユーザmasutakaとしてssh接続する設定をする\n(3) ssh接続した時にknown_hostsに追加するか聞かれない設定をする\n(1)は以下のサイトが参考になりました。\nwercker + Capistrano で自動デプロイ - milk1000cc&rsquo;s blog wercker.ymlの中で秘密鍵を $WERCKER_SSH_KEY_PRIVATE として参照できる\nようになります。公開鍵はmasutaka.net:~/.ssh/authorized_keysに追記します。\n最終的なwercker.yml (1)の秘密鍵$HOME/.ssh/id_rsaは39行目で作っています。\n(2)と(3)は26行目で$HOME/.ssh/configに設定しています。\n(2)は33行目の&quot;User masutaka&quot;、(3)は34行目の&quot;StrictHostKeyChecking no&quot;です。\n見たまんまですが、serverspecは49行目で設定しています。\n wercker.ymlの書式 基本的な書式は http://devcenter.wercker.com/articles/werckeryml/ で\n分かると思います。wercker.ymlのValidaterもありました。 bundle-installやcreate-fileは拡張という扱いなのか、\nhttps://app.wercker.com/#wercker にアプリとして存在してました。\nドキュメントもあるので、必要に応じてどうぞ。\nビルド結果 Werckerの各アプリのページでもちろん分かりますが、\n各Pull Requstのページでも分かるので、今後はローカルでTest&amp;Cookして\nPull Requst出す、ビルドが通っていればmasterにマージという使い方をし\nそうです(Collaboratorはもちろん私一人)。\nWerckerバッジ TravisCIやCircleCIでお馴染み、ビルドステータスが分かるバッジも\n各アプリのページ、右上から取得できます。\nREADME.mdに追加しました。","contentSnippet":"[2013-05-27-2] で書いたとおり、このブログのサーバmasutaka.netはChef-soloでレシピを、serverspecでそのテストを書いています。ソースコードはGitHubのプライベートリポジトリに置いており、お金をかけてまでやる気が出なかったのでCIはしていませんでした(※)。※ CircleCIの場合、一番安いプランで$19/monthはてブのホットエントリでこちらの記事を見つけたので、serverspecのCIを設定してみました。Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる｜mah365 serverspec固有の設定 基本的な手順は記事のとおりなので、詰まることはないと思います。ただしserverspecはssh経由で動作するため、sshの設定が必要です。(1) WerckerのサイトでSSH key pairを作成する(2) ユーザmasutakaとしてssh接続する設定をする(3) ssh接続した時にknown_hostsに追加するか聞かれない設定をする(1)は以下のサイトが参考になりました。wercker + Capistrano で自動デプロイ - milk1000cc’s blog wercker.ymlの中で秘密鍵を $WERCKER_SSH_KEY_PRIVATE として参照できるようになります。公開鍵はmasutaka.net:~/.ssh/authorized_keysに追記します。最終的なwercker.yml (1)の秘密鍵$HOME/.ssh/id_rsaは39行目で作っています。(2)と(3)は26行目で$HOME/.ssh/configに設定しています。(2)は33行目の\"User masutaka\"、(3)は34行目の\"StrictHostKeyChecking no\"です。見たまんまですが、serverspecは49行目で設定しています。 wercker.ymlの書式 基本的な書式は http://devcenter.wercker.com/articles/werckeryml/ で分かると思います。wercker.ymlのValidaterもありました。 bundle-installやcreate-fileは拡張という扱いなのか、https://app.wercker.com/#wercker にアプリとして存在してました。ドキュメントもあるので、必要に応じてどうぞ。ビルド結果 Werckerの各アプリのページでもちろん分かりますが、各Pull Requstのページでも分かるので、今後はローカルでTest&CookしてPull Requst出す、ビルドが通っていればmasterにマージという使い方をしそうです(Collaboratorはもちろん私一人)。Werckerバッジ TravisCIやCircleCIでお馴染み、ビルドステータスが分かるバッジも各アプリのページ、右上から取得できます。README.mdに追加しました。","link":"https://masutaka.net/2014-01-09-1/","isoDate":"2014-01-09T00:00:00.000Z","dateMiliSeconds":1389225600000,"authorName":"masutaka"},{"title":"iOS7のメールとブラウザとマップアプリをGoogleからAppleに変えた","content":"気がついたら、iOS7のメールやブラウザ、マップはどれもGoogleのアプリ\nを使っていましたが、Appleもだいぶ改善されたようなので、全て移行しました。\n◆メール\niOS6までは、Gmailのアーカイブにあまり対応してませんでしたが(設定で\n削除をアーカイブとすることはできた)、さっき試したらアーカイブやスター\nが使えたので移行しました。\n◆ブラウザ\n元々、OSXのChromeとブックマークを同期したくて使ってましたが、まあ必\n要ないよねということで移行しました。iOSは標準のブラウザがSafari固定\nなので、ちょいちょいSafariが開いてうざかったのですよね。iOSの制約で\nChrome自体、Safariよりパフォーマンスが悪いようですし。 ◆マップ\niOS7が出た時のマップアプリの酷さはもはや伝説ですが、今はまあまあ完\n全されたようなので、これも移行しました。まあでも気に食わなかったら\nまたGoogleに戻すかも。他のアプリと依存関係無いですし。\nまとめ:\niPhoneにインストールしたアプリ多すぎなので整理したい。","contentSnippet":"気がついたら、iOS7のメールやブラウザ、マップはどれもGoogleのアプリを使っていましたが、Appleもだいぶ改善されたようなので、全て移行しました。◆メールiOS6までは、Gmailのアーカイブにあまり対応してませんでしたが(設定で削除をアーカイブとすることはできた)、さっき試したらアーカイブやスターが使えたので移行しました。◆ブラウザ元々、OSXのChromeとブックマークを同期したくて使ってましたが、まあ必要ないよねということで移行しました。iOSは標準のブラウザがSafari固定なので、ちょいちょいSafariが開いてうざかったのですよね。iOSの制約でChrome自体、Safariよりパフォーマンスが悪いようですし。 ◆マップiOS7が出た時のマップアプリの酷さはもはや伝説ですが、今はまあまあ完全されたようなので、これも移行しました。まあでも気に食わなかったらまたGoogleに戻すかも。他のアプリと依存関係無いですし。まとめ:iPhoneにインストールしたアプリ多すぎなので整理したい。","link":"https://masutaka.net/2014-01-03-1/","isoDate":"2014-01-03T00:00:00.000Z","dateMiliSeconds":1388707200000,"authorName":"masutaka"},{"title":"Rspecのshouldをexpectに置き換えた後の、itの使い道はこれ？ #rspec","content":"Ruby - RSpecのshouldはもう古い！新しい記法expectを使おう！ - Qiita [キータ] こちらの記事は以前から何度も読み返しております。o\n以前から、これには英語的に違和感がありました。\nit { expect(hoge).to be_true } 複数行でもitの意味が分かりません。\nit do result = hoge expect(result).to be_true end もちろん、今までのshouldであれば自然です。\nsubject { hoge } it { should be_true } 前の記事で知りましたが(※)、lib/rspec/core/example_group.rbのとおり、\nitはexampleやspecifyで置き換え可能なので、今後はitは使わない方が良\nい気がしました。\nexample { expect(hoge).to be_true } # or specify { expect(hoge).to be_true } ※ https://github.com/rspec/rspec-core にも置き換え可能云々は書いて\nありますね。\n複数行でもそれほど変ではありません。\nexample do result = hoge expect(result).to be_true end # or specify do result = hoge expect(result).to be_true end ここまで書いて、改めてrspecのテストを確認しました。","contentSnippet":"Ruby - RSpecのshouldはもう古い！新しい記法expectを使おう！ - Qiita [キータ] こちらの記事は以前から何度も読み返しております。o以前から、これには英語的に違和感がありました。it { expect(hoge).to be_true } 複数行でもitの意味が分かりません。it do result = hoge expect(result).to be_true end もちろん、今までのshouldであれば自然です。subject { hoge } it { should be_true } 前の記事で知りましたが(※)、lib/rspec/core/example_group.rbのとおり、itはexampleやspecifyで置き換え可能なので、今後はitは使わない方が良い気がしました。example { expect(hoge).to be_true } # or specify { expect(hoge).to be_true } ※ https://github.com/rspec/rspec-core にも置き換え可能云々は書いてありますね。複数行でもそれほど変ではありません。example do result = hoge expect(result).to be_true end # or specify do result = hoge expect(result).to be_true end ここまで書いて、改めてrspecのテストを確認しました。","link":"https://masutaka.net/2013-12-31-1/","isoDate":"2013-12-31T00:00:00.000Z","dateMiliSeconds":1388448000000,"authorName":"masutaka"},{"title":"FF1,3,5にハマった人には『ブレイブリーデフォルト フォーザ・シークウェル』はめっちゃオススメ","content":"モンハン４に挫折し、3DSを一ヶ月放置していたマスタカです。\nなんとなくRPGやろうかなと思い、評判が良かった『ブレイブリーデフォル\nト フォーザ・シークウェル』を購入しました。\nいや〜、こんなにハマるとは思いませんでした。買って一週間経ってない\nのに32時間プレイしてます。\nこれ、タイトルは違いますが、中身はFinalFantasy3(FF3)に近いですね。\n寧ろ、FF3の正当な後継版と言えるかもしれません。\nFFはファミコンから始まり、スーファミ、PS、PS2、PS3にハードを変更し\n進化していきました。他方で、ロマンシング サ・ガや聖剣伝説、ルドラの\n秘宝などにも、そのシステムは受け継がれていきました。\nブレイブリーデフォルトはその中で最も色濃く、特にFF3の血を受け継いで\nいると感じました。\nバトルシステム 戦闘は単純なターン制で取っ付き易いです。しかし！このゲームはターン\nを溜めたり(デフォルトと言います)、溜めたターンを使ったり(ブレイブと\n言います)、ターンを前借りしたり(同じくブレイブ)も出来るのですよ。\nって、文章にすると大したことありませんが、実際は戦闘の幅がかなり広\nがっていて、2次元から3次元に広がった感じです。\nFF4のアクティブタイムバトルの他に、こんな解もあったのか！と一人興奮\nしてしまいました。\n例えば、誰か死んだ時、BP(ブレイブポイント)を消費すれば、レイズ→ケ\nアルラを絶対に連続でかけられます。\n途中からザコ戦に苦戦し始めたのですが、ふと気づいて全キャラブレイブ\nを3回したら(4回攻撃可能になる)、１ターンで倒せました。もっとも、１\nターンで倒せなかったらその後３ターン何も出来なくなります。\n敵もブレイブ＆デフォルトを使ってきますし、溜めたBPを消費するコマン\nドがあったり、攻撃を食らったらBPが溜まるアビリティもあったりします。\n「ターンを溜める」だけで、これほど戦闘の幅が広がるのに驚愕しました。\nあと、単純なターン制と書きましたが、アクティブタイムバトルのように\n時を感じさせる要素も盛り込まれています。のんびりしてられません。\n 必殺技を出した後はBGMが終わるまでは味方が強化状態なので、急いでコ\nマンド入力しないともったいない。 SP(スリープポイント)があれば、STARTボタンを押して時を止めることが\n出来る。SPは3DSをスリープ状態にすれば溜まる。必要ないけど課金も可能。  さらにテンポよく進むように、痒いところに手が届いています。\n バトルをAUTOにすることが出来ます。直前のターンと同じ行動を取ります。 バトルスピードを最大の４倍速にすると激速です。召喚獣のアニメーショ\nンは２倍速からカットされます。  ゲーム中はいつでも難易度を変えられるのも軽く驚きました。エンカウン\nト率も自由に変えられます。自由すぎw\nあ、魔法の名前はFF5あたりとほとんど同じです。\nストーリー ゲームなので不自然な展開もありますが、意外に練られていると感じました。\nまだ３章ですが、終盤の展開が見えません。でも、人死にすぎ殺しすぎw\nほぼ全キャラ喋るので臨場感もあります。3DSのくせに！\nよく知りませんが、声優陣は豪華らしいです 。てか、ヴィクトリア様って、\n本当に子供だったのかw\nまとめ 以上のように、おっさんホイホイの要素が強いゲームとなっております。\nフレンドやすれ違い機能もあるので、誰か一緒にやりましょう！\n@masutaka にお声がけください！\n ※ 本作『ブレイブリーデフォルト フォーザ・シークウェル』は\n『ブレイブリーデフォルト フライングフェアリー』の完全版、廉価版、\n続編体験版という位置づけです。誤購入注意。","contentSnippet":"モンハン４に挫折し、3DSを一ヶ月放置していたマスタカです。なんとなくRPGやろうかなと思い、評判が良かった『ブレイブリーデフォルト フォーザ・シークウェル』を購入しました。いや〜、こんなにハマるとは思いませんでした。買って一週間経ってないのに32時間プレイしてます。これ、タイトルは違いますが、中身はFinalFantasy3(FF3)に近いですね。寧ろ、FF3の正当な後継版と言えるかもしれません。FFはファミコンから始まり、スーファミ、PS、PS2、PS3にハードを変更し進化していきました。他方で、ロマンシング サ・ガや聖剣伝説、ルドラの秘宝などにも、そのシステムは受け継がれていきました。ブレイブリーデフォルトはその中で最も色濃く、特にFF3の血を受け継いでいると感じました。バトルシステム 戦闘は単純なターン制で取っ付き易いです。しかし！このゲームはターンを溜めたり(デフォルトと言います)、溜めたターンを使ったり(ブレイブと言います)、ターンを前借りしたり(同じくブレイブ)も出来るのですよ。って、文章にすると大したことありませんが、実際は戦闘の幅がかなり広がっていて、2次元から3次元に広がった感じです。FF4のアクティブタイムバトルの他に、こんな解もあったのか！と一人興奮してしまいました。例えば、誰か死んだ時、BP(ブレイブポイント)を消費すれば、レイズ→ケアルラを絶対に連続でかけられます。途中からザコ戦に苦戦し始めたのですが、ふと気づいて全キャラブレイブを3回したら(4回攻撃可能になる)、１ターンで倒せました。もっとも、１ターンで倒せなかったらその後３ターン何も出来なくなります。敵もブレイブ＆デフォルトを使ってきますし、溜めたBPを消費するコマンドがあったり、攻撃を食らったらBPが溜まるアビリティもあったりします。「ターンを溜める」だけで、これほど戦闘の幅が広がるのに驚愕しました。あと、単純なターン制と書きましたが、アクティブタイムバトルのように時を感じさせる要素も盛り込まれています。のんびりしてられません。 必殺技を出した後はBGMが終わるまでは味方が強化状態なので、急いでコマンド入力しないともったいない。 SP(スリープポイント)があれば、STARTボタンを押して時を止めることが出来る。SPは3DSをスリープ状態にすれば溜まる。必要ないけど課金も可能。  さらにテンポよく進むように、痒いところに手が届いています。 バトルをAUTOにすることが出来ます。直前のターンと同じ行動を取ります。 バトルスピードを最大の４倍速にすると激速です。召喚獣のアニメーションは２倍速からカットされます。  ゲーム中はいつでも難易度を変えられるのも軽く驚きました。エンカウント率も自由に変えられます。自由すぎwあ、魔法の名前はFF5あたりとほとんど同じです。ストーリー ゲームなので不自然な展開もありますが、意外に練られていると感じました。まだ３章ですが、終盤の展開が見えません。でも、人死にすぎ殺しすぎwほぼ全キャラ喋るので臨場感もあります。3DSのくせに！よく知りませんが、声優陣は豪華らしいです 。てか、ヴィクトリア様って、本当に子供だったのかwまとめ 以上のように、おっさんホイホイの要素が強いゲームとなっております。フレンドやすれ違い機能もあるので、誰か一緒にやりましょう！@masutaka にお声がけください！ ※ 本作『ブレイブリーデフォルト フォーザ・シークウェル』は『ブレイブリーデフォルト フライングフェアリー』の完全版、廉価版、続編体験版という位置づけです。誤購入注意。","link":"https://masutaka.net/2013-12-30-2/","isoDate":"2013-12-30T01:00:00.000Z","dateMiliSeconds":1388365200000,"authorName":"masutaka"},{"title":".emacsをGistにアップしてみた","content":"https://github.com/emacs-jp/emacs-jp.github.com/issues/15 皆さんの.emacsが最近ジワジワとアップされているので、私もアップして\nみました。\n.emacs含めたdot filesは、GitHubのPrivate Repositoryで管理しているの\nで、現時点のコピーです。気が向いたら更新するかもしれません。\n以前el-get試しましたが、MELPA+gitsubmodule以上の便利さを味わえなく\nて、使いませんでした。init-loaderは分類が面倒で。。\n昔は仕事中に/home以下(NFS管理されている)の.emacsを読み漁ったもので\nすが、良い時代になってきましたねえ。\n ","contentSnippet":"https://github.com/emacs-jp/emacs-jp.github.com/issues/15 皆さんの.emacsが最近ジワジワとアップされているので、私もアップしてみました。.emacs含めたdot filesは、GitHubのPrivate Repositoryで管理しているので、現時点のコピーです。気が向いたら更新するかもしれません。以前el-get試しましたが、MELPA+gitsubmodule以上の便利さを味わえなくて、使いませんでした。init-loaderは分類が面倒で。。昔は仕事中に/home以下(NFS管理されている)の.emacsを読み漁ったものですが、良い時代になってきましたねえ。","link":"https://masutaka.net/2013-12-30-1/","isoDate":"2013-12-30T00:00:00.000Z","dateMiliSeconds":1388361600000,"authorName":"masutaka"},{"title":"OSXのzshで直前の履歴をクリップボードにコピーするやつ作った","content":"何かコマンドを打ってから、Ctrl-x Ctrl-pするとクリップボードに\nコピーされます。","contentSnippet":"何かコマンドを打ってから、Ctrl-x Ctrl-pするとクリップボードにコピーされます。","link":"https://masutaka.net/2013-12-07-1/","isoDate":"2013-12-07T00:00:00.000Z","dateMiliSeconds":1386374400000,"authorName":"masutaka"},{"title":"Raspberry Piを購入して、部屋の温度を淡々とグラフにしてみた","content":"特に目的はなかったけどRaspberry Pi を買ったので、ついでに温度センサーも買って、淡々と部屋の温度を記録することにしました。\nRaspberry Pi購入まで 購入したのはRaspberry Pi Type B with 8GB SD card です。$52.28でした。\n昔より性能も値段も高くなったような。。。\nFeatures\n•8GB SD card pre-installed with the Raspian operating system\n•Broadcom BCM2835 700MHz ARM1176JZFS processor with FPU and Videocore 4 GPU\n•GPU provides Open GL ES 2.0, hardware-accelerated OpenVG, and 1080p30 H.264 high-profile decode\n•GPU is capable of 1Gpixel/s, 1.5Gtexel/s or 24GFLOPs with texture filtering and DMA infrastructure\n•512MB RAM\n•Boots from SD card, running a version of the Linux operating system","contentSnippet":"特に目的はなかったけどRaspberry Pi を買ったので、ついでに温度センサーも買って、淡々と部屋の温度を記録することにしました。Raspberry Pi購入まで 購入したのはRaspberry Pi Type B with 8GB SD card です。$52.28でした。昔より性能も値段も高くなったような。。。Features•8GB SD card pre-installed with the Raspian operating system•Broadcom BCM2835 700MHz ARM1176JZFS processor with FPU and Videocore 4 GPU•GPU provides Open GL ES 2.0, hardware-accelerated OpenVG, and 1080p30 H.264 high-profile decode•GPU is capable of 1Gpixel/s, 1.5Gtexel/s or 24GFLOPs with texture filtering and DMA infrastructure•512MB RAM•Boots from SD card, running a version of the Linux operating system","link":"https://masutaka.net/2013-12-05-1/","isoDate":"2013-12-05T00:00:00.000Z","dateMiliSeconds":1386201600000,"authorName":"masutaka"},{"title":"elscreen-mew.elをMELPAに登録しました","content":"loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  世界で3人くらい使っているかもしれないelscreen-mew.elを、表題の通り\nMELPAに登録しました。\nこのパッケージで何ができるとかはなくて、現状はelscreen とMew の組み合\nわせで発生する不具合を回避するだけです。詳細は下記リポジトリの\nREADMEを御覧ください。\nインストール方法 M-x package-install elscreen-mew\nリポジトリ   ","contentSnippet":"loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  世界で3人くらい使っているかもしれないelscreen-mew.elを、表題の通りMELPAに登録しました。このパッケージで何ができるとかはなくて、現状はelscreen とMew の組み合わせで発生する不具合を回避するだけです。詳細は下記リポジトリのREADMEを御覧ください。インストール方法 M-x package-install elscreen-mewリポジトリ","link":"https://masutaka.net/2013-12-01-1/","isoDate":"2013-12-01T00:00:00.000Z","dateMiliSeconds":1385856000000,"authorName":"masutaka"},{"title":"helm-hatena-bookmark.elを作ってHelmに完全移行した","content":"ようやくHelmに移行出来ました。以前試みたのですが、\nanything-hatena-bookmark.elがうまく動かなくてペンドしていたのでした。\n今日天からイベントが降ってきたので、helm-hatena-bookmark.elを作りま\nした。\n  MELPAにも取り込まれたのでM-x list-packagesからインストールできます。\nMELPAへのPull Requstは初めてでした！ anything-hatena-bookmark.elについては[2011-12-17-1] で書いたことがあ\nりますが、もう一度おさらいしますね。\nhelm-hatena-bookmark.elで何ができるのか？ Emacsから自分のはてなブックマークを検索し、ブラウザから開けます。\n普通にHelm絞り込みができるので便利です。\nM-x helm-hatena-bookmark して、&ldquo;emacs git&quot;で絞り込んだところ\n  インストール方法 M-x package-install helm-hatena-bookmark\n使用方法 M-x helm-hatena-bookmarkして検索するだけです。\n初回はキャッシュファイル~/.hatenabookmarkが作成されるのですが、はて\nブの数によってはなかなか終わりません。以下のシェルスクリプト版を使\nうと良いでしょう。\n自分のはてなブックマークを検索するanything-hatena-bookmark.elのデータ更新用シェルスクリプト - aki77の日記 ただ、リポジトリが見えなくなっていたので、一旦\nhelm-hatena-bookmark.elのリポジトリにインポートしました。\nhttps://github.com/masutaka/emacs-helm-hatena-bookmark/tree/master/script あとでhelm-hatena-bookmark-get-dump()にいい感じにマージします。","contentSnippet":"ようやくHelmに移行出来ました。以前試みたのですが、anything-hatena-bookmark.elがうまく動かなくてペンドしていたのでした。今日天からイベントが降ってきたので、helm-hatena-bookmark.elを作りました。  MELPAにも取り込まれたのでM-x list-packagesからインストールできます。MELPAへのPull Requstは初めてでした！ anything-hatena-bookmark.elについては[2011-12-17-1] で書いたことがありますが、もう一度おさらいしますね。helm-hatena-bookmark.elで何ができるのか？ Emacsから自分のはてなブックマークを検索し、ブラウザから開けます。普通にHelm絞り込みができるので便利です。M-x helm-hatena-bookmark して、“emacs git\"で絞り込んだところ  インストール方法 M-x package-install helm-hatena-bookmark使用方法 M-x helm-hatena-bookmarkして検索するだけです。初回はキャッシュファイル~/.hatenabookmarkが作成されるのですが、はてブの数によってはなかなか終わりません。以下のシェルスクリプト版を使うと良いでしょう。自分のはてなブックマークを検索するanything-hatena-bookmark.elのデータ更新用シェルスクリプト - aki77の日記 ただ、リポジトリが見えなくなっていたので、一旦helm-hatena-bookmark.elのリポジトリにインポートしました。https://github.com/masutaka/emacs-helm-hatena-bookmark/tree/master/script あとでhelm-hatena-bookmark-get-dump()にいい感じにマージします。","link":"https://masutaka.net/2013-11-26-1/","isoDate":"2013-11-26T00:00:00.000Z","dateMiliSeconds":1385424000000,"authorName":"masutaka"},{"title":"OSXの構成管理ツールBoxenを導入してみた","content":"過去にこんなネタ記事[2011-06-06-1] も書きましたが、Mavericksになって\nCLI Toolsからrcsが削除されたのと、今どきRCSもないよねということで、\n話題のBoxenを導入してみました。\nBoxenはGitHub社が開発した、エンジニアの開発環境を構築するための\nツールです。GitHub社員じゃなくても使えます。\nHomebrewやrbenv、plenv等を包括出来るだけでなく、ChromeやSkype等も\nコマンド一発でインストールできます。さらにはOSXの設定まで管理できます。\n私の場合、HomebrewでインストールしたコマンドやGemはもう分かりません\nし、今までインストールしたさまざまなアプリはメモしていました[2011-04-21-1] 。\nそれらをコード化できるのが良いと感じました。\nMavericksに対応しきれていないので、まだハマりどころはあります。\nそういう意味ではちょっと待ったほうが良いかも。\n導入はそこそこ簡単で、ここ のREADMEのとおりに実行するだけです。\n% sudo mkdir -p /opt/boxen % sudo chown ${USER}:staff /opt/boxen % git clone https://github.com/boxen/our-boxen /opt/boxen/repo % cd /opt/boxen/repo % git remote rm origin % git remote add origin &lt;the location of my new git repository&gt; # (1) % git push -u origin master GitHubアカウントが必要です。あらかじめ自分用のリポジトリを作って、\n(1)で指定すると良いです。\nあとはboxenコマンドを実行すれば、manifests/site.ppで指定されたツー\nルが/opt/boxen以下にインストールされます(暗号化は不要なのでOFFにし\nてます)。シンボリックリンク~/src/our-boxenも作られます。\n % script/boxen &ndash;no-fde","contentSnippet":"過去にこんなネタ記事[2011-06-06-1] も書きましたが、MavericksになってCLI Toolsからrcsが削除されたのと、今どきRCSもないよねということで、話題のBoxenを導入してみました。BoxenはGitHub社が開発した、エンジニアの開発環境を構築するためのツールです。GitHub社員じゃなくても使えます。Homebrewやrbenv、plenv等を包括出来るだけでなく、ChromeやSkype等もコマンド一発でインストールできます。さらにはOSXの設定まで管理できます。私の場合、HomebrewでインストールしたコマンドやGemはもう分かりませんし、今までインストールしたさまざまなアプリはメモしていました[2011-04-21-1] 。それらをコード化できるのが良いと感じました。Mavericksに対応しきれていないので、まだハマりどころはあります。そういう意味ではちょっと待ったほうが良いかも。導入はそこそこ簡単で、ここ のREADMEのとおりに実行するだけです。% sudo mkdir -p /opt/boxen % sudo chown ${USER}:staff /opt/boxen % git clone https://github.com/boxen/our-boxen /opt/boxen/repo % cd /opt/boxen/repo % git remote rm origin % git remote add origin <the location of my new git repository> # (1) % git push -u origin master GitHubアカウントが必要です。あらかじめ自分用のリポジトリを作って、(1)で指定すると良いです。あとはboxenコマンドを実行すれば、manifests/site.ppで指定されたツールが/opt/boxen以下にインストールされます(暗号化は不要なのでOFFにしてます)。シンボリックリンク~/src/our-boxenも作られます。 % script/boxen –no-fde","link":"https://masutaka.net/2013-11-23-1/","isoDate":"2013-11-23T00:00:00.000Z","dateMiliSeconds":1385164800000,"authorName":"masutaka"},{"title":"Simplenote再開しました！","content":"[を] Simplenote の Max OS X アプリが登場してた！ [2012-09-09-1] にSimplenoteからAppleのメモアプリに乗り換えましたが、\nOSX用のSimplenoteアプリが出ていたので、また戻って参りました。\nEmacsのsimplenote.elは今は必要ないかな。\nAppleのメモアプリはGoogleアカウントと連携していたので、Gmailに過去\nのリビジョンが溜まっていたのですよね。気にしなきゃいいんだけど。。。\nたつをさん++","contentSnippet":"[を] Simplenote の Max OS X アプリが登場してた！ [2012-09-09-1] にSimplenoteからAppleのメモアプリに乗り換えましたが、OSX用のSimplenoteアプリが出ていたので、また戻って参りました。Emacsのsimplenote.elは今は必要ないかな。AppleのメモアプリはGoogleアカウントと連携していたので、Gmailに過去のリビジョンが溜まっていたのですよね。気にしなきゃいいんだけど。。。たつをさん++","link":"https://masutaka.net/2013-11-10-1/","isoDate":"2013-11-10T00:00:00.000Z","dateMiliSeconds":1384041600000,"authorName":"masutaka"},{"title":"過去1000件のFoursquareチェックイン履歴をD3.jsで可視化してみた","content":"WEB&#43;DB PRESS Vol.76 のD3.jsの記事をちょっと試したかっただけだったの\nです。\n D3.js自体は記事のとおりに書けば理解出来ましたが、「過去1000件の\nFoursquareチェックイン履歴」を取ってくるのに難儀しました。記事では\nさらっと書いてあるだけですねw\nどうにかしてoauth_tokenを取得する 私は http://tdoc.info/foursquare-API/authentication.html を参考にし\nて、泥臭く手に入れました。Twitterだと簡単なのにね。\n  https://developer.foursquare.com/ にアクセスし、適当なマイアプリを作る。\n  以下にアクセスし、&ldquo;code&quot;を取得する(長いので改行入れてます)。\n  https://foursquare.com/oauth2/authenticate?client_id=&lt;Client ID&gt; &amp;response_type=code&amp;redirect_uri=&lt;Redirect URI&gt; ブラウザのアドレスバーに&quot;code&quot;が表示されるので、以下にアクセスす\nる(長いので改行入れてます)。  https://foursquare.com/oauth2/access_token?client_id=&lt;Client ID&gt; &amp;client_secret=&lt;Client secret&gt;&amp;grant_type=authorization_code &amp;redirect_uri=&lt;Redirect URI&gt;&amp;code=&lt;2で取得したコード&gt; oauth_tokenを取得出来た！  {&#34;access_token&#34;:&#34;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#34;} 過去1000件のFoursquareチェックイン履歴を取得する  foursquare2 gemをインストールする。   % gem install foursquare2\n  取得できるか確認。\n   JSONフォーマットにしつつ、緯度と経度を取得する。\nhttps://developer.foursquare.com/docs/users/checkins によると、\n250ずつしか取得できないようなので、小分けにして取得。\n   こんなデータが取得できるはず。\n[ {&#34;coordinates&#34;: [139.645709, 35.667857]}, {&#34;coordinates&#34;: [139.","contentSnippet":"WEB+DB PRESS Vol.76 のD3.jsの記事をちょっと試したかっただけだったのです。 D3.js自体は記事のとおりに書けば理解出来ましたが、「過去1000件のFoursquareチェックイン履歴」を取ってくるのに難儀しました。記事ではさらっと書いてあるだけですねwどうにかしてoauth_tokenを取得する 私は http://tdoc.info/foursquare-API/authentication.html を参考にして、泥臭く手に入れました。Twitterだと簡単なのにね。  https://developer.foursquare.com/ にアクセスし、適当なマイアプリを作る。  以下にアクセスし、“code\"を取得する(長いので改行入れてます)。  https://foursquare.com/oauth2/authenticate?client_id=<Client ID> &response_type=code&redirect_uri=<Redirect URI> ブラウザのアドレスバーに\"code\"が表示されるので、以下にアクセスする(長いので改行入れてます)。  https://foursquare.com/oauth2/access_token?client_id=<Client ID> &client_secret=<Client secret>&grant_type=authorization_code &redirect_uri=<Redirect URI>&code=<2で取得したコード> oauth_tokenを取得出来た！  {\"access_token\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"} 過去1000件のFoursquareチェックイン履歴を取得する  foursquare2 gemをインストールする。   % gem install foursquare2  取得できるか確認。   JSONフォーマットにしつつ、緯度と経度を取得する。https://developer.foursquare.com/docs/users/checkins によると、250ずつしか取得できないようなので、小分けにして取得。   こんなデータが取得できるはず。[ {\"coordinates\": [139.645709, 35.667857]}, {\"coordinates\": [139.","link":"https://masutaka.net/2013-10-30-1/","isoDate":"2013-10-30T00:00:00.000Z","dateMiliSeconds":1383091200000,"authorName":"masutaka"},{"title":"iPhone 4s 32GBからiPhone 5s 64GBに変えたけど案外高くなかったお話","content":"9/23に予約し、ちょうど3週間でiPhone 5s Gold 64GBモデルをゲット出来\nました。Goldだし1ヶ月はかかるかなーと気長に待っていたので、思ったよ\nり早かった感じです。\nキャリアはLTEにおいて盤石の体制を築いたau様。IDO 時代から15年使い続\nけた甲斐がありました(感涙)。\n昨日から使い始めた感想は以下のとおり。\n iOS7でのiPhone4sにあった、表示のもたつきがなくなった。 軽くなった(物理的に)。 画面がだいぶ広くなった感。 指紋認証はやっぱり楽。 64GBは気持ちに余裕ができる(今までは32GBでカツカツだった)。 テザリングうれしい。適当なタイミングでEMOBILE解約しよう。[2012-04-22-2]  イヤホンの音が良くなった。  A5からA7へのCPU性能のアップは予想以上に快適で、iOS7が本当に気持ちよ\nく動きます。個人的には、はてブアプリ で性能差を一番体感出来ました。\n指紋認証もやっぱり楽です。登録した指が使えない時は今までのパスコー\nド認証になりますが。。\n料金はだいたいこんな感じとのこと。今までが￥5,538だったので、しばら\nくは同じくらいです。高くなる頃にEMOBILEの2年縛りが切れるので、まあ\n大丈夫でしょう。\n◆2013年10月〜2014年2月\n         LTEプラン +￥980   LTEフラット +￥5,460   iPhone4s残り +￥2,570   iPhone5s本体(※1) +￥3,237   割引(※2) -￥3,237   毎月割 -￥2,230   auスマートバリュー -￥1,480   合計 ￥5,300    ◆2014年3月","contentSnippet":"9/23に予約し、ちょうど3週間でiPhone 5s Gold 64GBモデルをゲット出来ました。Goldだし1ヶ月はかかるかなーと気長に待っていたので、思ったより早かった感じです。キャリアはLTEにおいて盤石の体制を築いたau様。IDO 時代から15年使い続けた甲斐がありました(感涙)。昨日から使い始めた感想は以下のとおり。 iOS7でのiPhone4sにあった、表示のもたつきがなくなった。 軽くなった(物理的に)。 画面がだいぶ広くなった感。 指紋認証はやっぱり楽。 64GBは気持ちに余裕ができる(今までは32GBでカツカツだった)。 テザリングうれしい。適当なタイミングでEMOBILE解約しよう。[2012-04-22-2]  イヤホンの音が良くなった。  A5からA7へのCPU性能のアップは予想以上に快適で、iOS7が本当に気持ちよく動きます。個人的には、はてブアプリ で性能差を一番体感出来ました。指紋認証もやっぱり楽です。登録した指が使えない時は今までのパスコード認証になりますが。。料金はだいたいこんな感じとのこと。今までが￥5,538だったので、しばらくは同じくらいです。高くなる頃にEMOBILEの2年縛りが切れるので、まあ大丈夫でしょう。◆2013年10月〜2014年2月         LTEプラン +￥980   LTEフラット +￥5,460   iPhone4s残り +￥2,570   iPhone5s本体(※1) +￥3,237   割引(※2) -￥3,237   毎月割 -￥2,230   auスマートバリュー -￥1,480   合計 ￥5,300    ◆2014年3月","link":"https://masutaka.net/2013-10-14-1/","isoDate":"2013-10-14T00:00:00.000Z","dateMiliSeconds":1381708800000,"authorName":"masutaka"},{"title":"YAPC::ASIA 2013 はノベルティに満足","content":"最近は仕事とか二日酔いとかで結構忙しくて、もう一週間が経ってしまい\nました。。\n今回YAPCというPerl最大のイベントに初参加しました。残念ながら土曜日、\n最終日だけの参加でしたが、なかなかに満足度が高かったです。(YAPCって、\n怖いイベントじゃなかったんですねw)\n最初の @yusukebe さんのトークの分かりやすさが半端なかった(以前聞い\nたLTも良かった)。Perlをほぼいじったことない私でも普通に理解出来まし\nた。トークがわかりやすいのか、Mojoliciousが分かりやすいのか。\nMojoliciousのデフォルトはVCしかないというのは清々しさを感じました。\n16:30から始まったLT大会は個人的にはツボのものが多く、他のLLのLTとは\n違った雰囲気でした。\n以下、当日聞いたトークです。\n Mojoliciousでつくる！Webアプリ入門 → ブログ記事  Programming AWS with Perl  What&rsquo;s new in Carton &amp; cpanm  GitHubでつくる、たのしい開発現場 → ブログ記事  中規模チャットサービスの運用事例  PhantomJSによる多岐にわたる広告枠の確実な表示テスト  フルテストも50msで終わらせたい 〜 FreakOutの取り組み 〜  Lightning Talks Day 2  Keynote  YAPC::Asia Tokyo 2013 クロージング   P.S.\nノベルティが良かったです。中でもmixiプランニングポーカーが一番嬉し\nかった。普通に買おうと思ってたので。DeNAのスマホスタンドも使ってま\nすし、YAPCタオルは今日ジムで使ってきました。","contentSnippet":"最近は仕事とか二日酔いとかで結構忙しくて、もう一週間が経ってしまいました。。今回YAPCというPerl最大のイベントに初参加しました。残念ながら土曜日、最終日だけの参加でしたが、なかなかに満足度が高かったです。(YAPCって、怖いイベントじゃなかったんですねw)最初の @yusukebe さんのトークの分かりやすさが半端なかった(以前聞いたLTも良かった)。Perlをほぼいじったことない私でも普通に理解出来ました。トークがわかりやすいのか、Mojoliciousが分かりやすいのか。MojoliciousのデフォルトはVCしかないというのは清々しさを感じました。16:30から始まったLT大会は個人的にはツボのものが多く、他のLLのLTとは違った雰囲気でした。以下、当日聞いたトークです。 Mojoliciousでつくる！Webアプリ入門 → ブログ記事  Programming AWS with Perl  What’s new in Carton & cpanm  GitHubでつくる、たのしい開発現場 → ブログ記事  中規模チャットサービスの運用事例  PhantomJSによる多岐にわたる広告枠の確実な表示テスト  フルテストも50msで終わらせたい 〜 FreakOutの取り組み 〜  Lightning Talks Day 2  Keynote  YAPC::Asia Tokyo 2013 クロージング   P.S.ノベルティが良かったです。中でもmixiプランニングポーカーが一番嬉しかった。普通に買おうと思ってたので。DeNAのスマホスタンドも使ってますし、YAPCタオルは今日ジムで使ってきました。","link":"https://masutaka.net/2013-09-29-1/","isoDate":"2013-09-29T00:00:00.000Z","dateMiliSeconds":1380412800000,"authorName":"masutaka"},{"title":"さらばATOK","content":"かれこれ20年近く使ってきたATOK とお別れすることになりました。残念です。\n理由は単純で、実用に耐えないレベルでストレスを感じるようになったか\nらです。\n-1. 時々固まったり、遅くなることがある。\n-2. 変換するためにスペースを押すと、変換された漢字部分が消えることがある。\n-3. 以前のATOKと比べて、頭悪くなった気がする。\n1はOSXが悪さをしているのかもしれません。というのも、OSXではキーが押\nしっぱなしになったり、遅くなったりする現象が私や周りの人も発生して\nいるからです。\n2はEmacs上だけかもしれません。\n3は好意的に解釈すると、私の変換方法と最近のATOKのアルゴリズムが合わないのかも。\n今はGoogle日本語入力 を使ってます。以前試した時は微妙だったのに、\n今は全く問題ないですね。普通にサクサク使えてます。こんなん無料で配\nられたらJustSystems厳しいよなあ。。\n最後にATOKとの出会いから別れをまとめます。\nそういえばベータテストに協力したこともあったなあ.. [2010-02-06-1]    登録日 製品名     1996/04/03 一太郎V.6.3 /R.1 Win FMV プリ版 CD-ROM   1997/03/19 一太郎8 Win95/NT CD-ROM   2001/11/25 ATOK14 for Windows ESDベクター版   2004/02/15 ATOK17 for Windows JMS DL版   2005/02/11 ATOK 2005 for Windows JMS DL版   2006/02/20 ATOK 2006 for Windows JMS DL版   2008/02/11 ATOK 2008 for Windows JMS DL版   2010/02/06 ATOK 2010 for Windows JMS DL版   2010/12/30 ATOK 2010 for Mac JMS DL版   2012/05/24 ATOK Passport    そして、2013/09/08にATOK Passportを解約しました。","contentSnippet":"かれこれ20年近く使ってきたATOK とお別れすることになりました。残念です。理由は単純で、実用に耐えないレベルでストレスを感じるようになったからです。-1. 時々固まったり、遅くなることがある。-2. 変換するためにスペースを押すと、変換された漢字部分が消えることがある。-3. 以前のATOKと比べて、頭悪くなった気がする。1はOSXが悪さをしているのかもしれません。というのも、OSXではキーが押しっぱなしになったり、遅くなったりする現象が私や周りの人も発生しているからです。2はEmacs上だけかもしれません。3は好意的に解釈すると、私の変換方法と最近のATOKのアルゴリズムが合わないのかも。今はGoogle日本語入力 を使ってます。以前試した時は微妙だったのに、今は全く問題ないですね。普通にサクサク使えてます。こんなん無料で配られたらJustSystems厳しいよなあ。。最後にATOKとの出会いから別れをまとめます。そういえばベータテストに協力したこともあったなあ.. [2010-02-06-1]    登録日 製品名     1996/04/03 一太郎V.6.3 /R.1 Win FMV プリ版 CD-ROM   1997/03/19 一太郎8 Win95/NT CD-ROM   2001/11/25 ATOK14 for Windows ESDベクター版   2004/02/15 ATOK17 for Windows JMS DL版   2005/02/11 ATOK 2005 for Windows JMS DL版   2006/02/20 ATOK 2006 for Windows JMS DL版   2008/02/11 ATOK 2008 for Windows JMS DL版   2010/02/06 ATOK 2010 for Windows JMS DL版   2010/12/30 ATOK 2010 for Mac JMS DL版   2012/05/24 ATOK Passport    そして、2013/09/08にATOK Passportを解約しました。","link":"https://masutaka.net/2013-09-09-1/","isoDate":"2013-09-09T00:00:00.000Z","dateMiliSeconds":1378684800000,"authorName":"masutaka"},{"title":"GitHubのPrivateリポジトリをChef経由でcloneしようとしたらハマった","content":"自分のinit.elや.zshenvはGitHubのPrivateリポジトリで管理しています。\nmasutaka.netでも同じ設定を使いたかったので、Chef経由(実際はKnife\nSolo経由)でgit cloneしようとしたら結構ハマったので、メモしておきます。\nぶっちゃけmasutaka.netに秘密鍵をおけば、ハマることはないです。でも\nセキュリティ的にあんまりなので、sshのforward agent機能を使い、ロー\nカルの公開鍵をリモートでも使うようにします。\n(1) sshのforward agentを設定する やり方は簡単で、ローカルの~/.ssh/configに以下を追加し、ローカルで\nssh-addコマンドを実行するだけ。\nHost masutaka.net ForwardAgent yes この状態でmasutaka.netにsshログインし、git cloneすることが出来まし\nた。ssh-add -lコマンドでローカルの公開鍵が使われていることを確認\nできます。\n検証環境にVagrantを使っているので、Vagrantfileにも追加しました\n(~/.ssh/configに設定しても構いません)。\nconfig.ssh.forward_agent = true (2) sudo時に公開鍵を引き継ぐ Chefからgit cloneするため、内部的にはsudo経由でgit cloneすることに\nなります。\nUbuntu 12.04.2 LTSのデフォルト設定は以下のとおり、sudo時に環境変数\nは引き継ぎません(実際sudo git cloneすると失敗するはず)。\n# /etc/sudoers Defaults\tenv_reset 環境変数SSH_AUTH_SOCKだけ引き継ぐようにします(レシピを書きました)。\n# /etc/sudoers Defaults\tenv_reset Defaults\tenv_keep += &#34;SSH_AUTH_SOCK&#34; sudo ssh-add -lコマンドでローカルの公開鍵が使われていることを確認\nできます。\n(3) ~/.ssh/known_hostsに書き込むか尋ねさせない これで大丈夫だろうとChefのレシピを実行したところ、以下のプロンプト\nが。でもyesと打っても一向に再開されません。\nThe authenticity of host &#39;masutaka.net (XXX.XXX.XXX.XXX)&#39; can&#39;t be established.","contentSnippet":"自分のinit.elや.zshenvはGitHubのPrivateリポジトリで管理しています。masutaka.netでも同じ設定を使いたかったので、Chef経由(実際はKnifeSolo経由)でgit cloneしようとしたら結構ハマったので、メモしておきます。ぶっちゃけmasutaka.netに秘密鍵をおけば、ハマることはないです。でもセキュリティ的にあんまりなので、sshのforward agent機能を使い、ローカルの公開鍵をリモートでも使うようにします。(1) sshのforward agentを設定する やり方は簡単で、ローカルの~/.ssh/configに以下を追加し、ローカルでssh-addコマンドを実行するだけ。Host masutaka.net ForwardAgent yes この状態でmasutaka.netにsshログインし、git cloneすることが出来ました。ssh-add -lコマンドでローカルの公開鍵が使われていることを確認できます。検証環境にVagrantを使っているので、Vagrantfileにも追加しました(~/.ssh/configに設定しても構いません)。config.ssh.forward_agent = true (2) sudo時に公開鍵を引き継ぐ Chefからgit cloneするため、内部的にはsudo経由でgit cloneすることになります。Ubuntu 12.04.2 LTSのデフォルト設定は以下のとおり、sudo時に環境変数は引き継ぎません(実際sudo git cloneすると失敗するはず)。# /etc/sudoers Defaults\tenv_reset 環境変数SSH_AUTH_SOCKだけ引き継ぐようにします(レシピを書きました)。# /etc/sudoers Defaults\tenv_reset Defaults\tenv_keep += \"SSH_AUTH_SOCK\" sudo ssh-add -lコマンドでローカルの公開鍵が使われていることを確認できます。(3) ~/.ssh/known_hostsに書き込むか尋ねさせない これで大丈夫だろうとChefのレシピを実行したところ、以下のプロンプトが。でもyesと打っても一向に再開されません。The authenticity of host 'masutaka.net (XXX.XXX.XXX.XXX)' can't be established.","link":"https://masutaka.net/2013-08-20-1/","isoDate":"2013-08-20T00:00:00.000Z","dateMiliSeconds":1376956800000,"authorName":"masutaka"},{"title":"nginxのアクセスログをFluentd経由でGrowthForecastのグラフにしてみた","content":"昨日[2013-08-14-1] インストールしたGrowthForecast をFluentdと連携させ\nてみます。\n今回グラフにしたのは2つの情報です。\n(1) nginxが各リクエストを処理した時間($request_time)\n  (2) nginxが返したHTTP Status Codeの数\n  (1) nginxが各リクエストを処理した時間($request_time) [2013-07-14-1] に追加した設定が以下になります。それぞれ\nfluent-plugin-growthforecast をインストールするChefのレシピと、\ntd-agent.confの設定です。\n FluentdがnginxのアクセスログをMongoDBとGrowthForecastに渡しています。\n特に難しいことはなくて、type copyとstoreを使うと複数の出力先を指定\nできました。\n&lt;match タグ名&gt; type copy &lt;store&gt; type mongo ... &lt;/store&gt; &lt;store&gt; type growthforecast ... &lt;/store&gt; &lt;/match&gt; (2) nginxが返したHTTP Status Codeの数 追加した設定が以下になります。さらにdatacounter plugin に渡して、\nHTTP Status Codeを数え、それをGrowthForecastに渡しています。\n name_keysに何を渡せばよいか少し悩みました。\nタグの中でtype fileなstoreを\n増やしたら、datacounter pluginが吐き出すjsonを確認出来ました。この\nタグの実行は数分のタイムラグがあるのは注意です。\nグラフのタイトルはもっと短くしたかったのですが、remove_prefixや\ninput_tag_remove_prefixを使っても希望のタイトルに出来なかったので、\n今回は見送りました。(タイムラグのせいでデバッグしづらく、ムキーッて\nなって諦めました。。)\n最後に http://example.com:5125 とかに(1)と(2)が表示されたはずです。\n今回は伊藤直也さんの記事 が参考になりました。","contentSnippet":"昨日[2013-08-14-1] インストールしたGrowthForecast をFluentdと連携させてみます。今回グラフにしたのは2つの情報です。(1) nginxが各リクエストを処理した時間($request_time)  (2) nginxが返したHTTP Status Codeの数  (1) nginxが各リクエストを処理した時間($request_time) [2013-07-14-1] に追加した設定が以下になります。それぞれfluent-plugin-growthforecast をインストールするChefのレシピと、td-agent.confの設定です。 FluentdがnginxのアクセスログをMongoDBとGrowthForecastに渡しています。特に難しいことはなくて、type copyとstoreを使うと複数の出力先を指定できました。<match タグ名> type copy <store> type mongo ... </store> <store> type growthforecast ... </store> </match> (2) nginxが返したHTTP Status Codeの数 追加した設定が以下になります。さらにdatacounter plugin に渡して、HTTP Status Codeを数え、それをGrowthForecastに渡しています。 name_keysに何を渡せばよいか少し悩みました。タグの中でtype fileなstoreを増やしたら、datacounter pluginが吐き出すjsonを確認出来ました。このタグの実行は数分のタイムラグがあるのは注意です。グラフのタイトルはもっと短くしたかったのですが、remove_prefixやinput_tag_remove_prefixを使っても希望のタイトルに出来なかったので、今回は見送りました。(タイムラグのせいでデバッグしづらく、ムキーッてなって諦めました。。)最後に http://example.com:5125 とかに(1)と(2)が表示されたはずです。今回は伊藤直也さんの記事 が参考になりました。","link":"https://masutaka.net/2013-08-15-1/","isoDate":"2013-08-15T00:00:00.000Z","dateMiliSeconds":1376524800000,"authorName":"masutaka"},{"title":"GrowthForecastをインストールする","content":"前回[2013-07-17-1] から間が空いてしまいましたが、GrowthForecast をイ\nンストールしました。\nインストールするだけなら、これだけでOKです。\n% mkdir ~/growthforecast % cd ~/growthforecast % echo &#34;requires &#39;GrowthForecast&#39;;&#34; &gt; cpanfile % sudo apt-get build-dep rrdtool % plenv exec carton install 起動方法はこんな感じ。http://example.com:5125とかにアクセスすると確\n認出来ると思います。\n% cd ~/growthforecast % carton exec -- perl growthforecast.pl --data-dir . &amp; &ndash;data-dirオプションを指定しないと\n~/growthforecast/local/lib/perl5/auto/share/dist/GrowthForecast/data/\n以下にsqlite関連のファイルが作られます。~/growthforecast/localは\n削除することもあるでしょうから、指定した方が良いと思います。\nChefのレシピはこれ。&lsquo;Install packages depending RRDTool&rsquo;のあたりが\n汚いですが、仕方がないですかね。\n 今回初めて知りました。。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  次回はGrowthForecastとfluentdの連携を試してみます。","contentSnippet":"前回[2013-07-17-1] から間が空いてしまいましたが、GrowthForecast をインストールしました。インストールするだけなら、これだけでOKです。% mkdir ~/growthforecast % cd ~/growthforecast % echo \"requires 'GrowthForecast';\" > cpanfile % sudo apt-get build-dep rrdtool % plenv exec carton install 起動方法はこんな感じ。http://example.com:5125とかにアクセスすると確認出来ると思います。% cd ~/growthforecast % carton exec -- perl growthforecast.pl --data-dir . & –data-dirオプションを指定しないと~/growthforecast/local/lib/perl5/auto/share/dist/GrowthForecast/data/以下にsqlite関連のファイルが作られます。~/growthforecast/localは削除することもあるでしょうから、指定した方が良いと思います。Chefのレシピはこれ。‘Install packages depending RRDTool’のあたりが汚いですが、仕方がないですかね。 今回初めて知りました。。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  次回はGrowthForecastとfluentdの連携を試してみます。","link":"https://masutaka.net/2013-08-14-1/","isoDate":"2013-08-14T00:00:00.000Z","dateMiliSeconds":1376438400000,"authorName":"masutaka"},{"title":"『ここは退屈迎えに来て』を読んだ","content":"@antipopさんのブログ を見て、フラフラッと買ってしまった。\n読んですぐに、「はてなでこの手の話題で盛り上がっている ところに、な\nんというシンクロニシティ！」 と思ったのですが、引用元がこの本の感想 だったのね(笑)\n本自体は地方都市を舞台としたオムニバス形式。かなりサクサク３日で読\nめた。第２話に進んで「ああそう来るのね」と少々の意外性があったり。\nオススメ。\nとは言え、帰省中に読むもんじゃないなーと思いました！","contentSnippet":"@antipopさんのブログ を見て、フラフラッと買ってしまった。読んですぐに、「はてなでこの手の話題で盛り上がっている ところに、なんというシンクロニシティ！」 と思ったのですが、引用元がこの本の感想 だったのね(笑)本自体は地方都市を舞台としたオムニバス形式。かなりサクサク３日で読めた。第２話に進んで「ああそう来るのね」と少々の意外性があったり。オススメ。とは言え、帰省中に読むもんじゃないなーと思いました！","link":"https://masutaka.net/2013-08-13-1/","isoDate":"2013-08-13T00:00:00.000Z","dateMiliSeconds":1376352000000,"authorName":"masutaka"},{"title":"Jenkinsをアップデートしたらジョブが消えた。。だけど無事復活！","content":"Jenkinsを1.516から1.526にアップデートし、プラグインもアップデートし\nたらRuby関連のジョブが消えました。。\n小一時間悩んで管理画面からシステムログを見たら、\nFailed Loading plugin ruby-runtime\nとのエラーメッセージ。このプラグインをインストールしたら直りました。\nなぜ急に必要になった？と思い、/var/log/jenkins/jenkins.logを見たら、\nrbenvとrvmプラグインが要求していました。\n 2013/08/10 11:11:01 jenkins.InitReactorRunner$1 onTaskFailed\n致命的: Failed Loading plugin rbenv\njava.io.IOException: Dependency ruby-runtime (0.10) doesn&rsquo;t exist\n2013/08/10 11:11:01 jenkins.InitReactorRunner$1 onTaskFailed\n致命的: Failed Loading plugin rvm\njava.io.IOException: Dependency ruby-runtime (0.7) doesn&rsquo;t exist\n プラグインのページを見ると、確かにそう書いてあります。\nhttps://wiki.jenkins-ci.org/display/JENKINS/Rbenv+Plugin https://wiki.jenkins-ci.org/display/JENKINS/RVM+Plugin 最初のプラグインアップデートで、rbenvもrvmもアップデートされなかっ\nたようなので(※)、Jenkinsがエラーを正しく処理してジョブが消えたのか\nもしれません。\n※ どのプラグインをアップデートしたかはログに書かれないようなので、\n確定ではないですが。\nしかし、依存関係が出来たのに、なぜruby-runtimeがインストールされな\nかったのだろう。。\n結論: ログ大事","contentSnippet":"Jenkinsを1.516から1.526にアップデートし、プラグインもアップデートしたらRuby関連のジョブが消えました。。小一時間悩んで管理画面からシステムログを見たら、Failed Loading plugin ruby-runtimeとのエラーメッセージ。このプラグインをインストールしたら直りました。なぜ急に必要になった？と思い、/var/log/jenkins/jenkins.logを見たら、rbenvとrvmプラグインが要求していました。 2013/08/10 11:11:01 jenkins.InitReactorRunner$1 onTaskFailed致命的: Failed Loading plugin rbenvjava.io.IOException: Dependency ruby-runtime (0.10) doesn’t exist2013/08/10 11:11:01 jenkins.InitReactorRunner$1 onTaskFailed致命的: Failed Loading plugin rvmjava.io.IOException: Dependency ruby-runtime (0.7) doesn’t exist プラグインのページを見ると、確かにそう書いてあります。https://wiki.jenkins-ci.org/display/JENKINS/Rbenv+Plugin https://wiki.jenkins-ci.org/display/JENKINS/RVM+Plugin 最初のプラグインアップデートで、rbenvもrvmもアップデートされなかったようなので(※)、Jenkinsがエラーを正しく処理してジョブが消えたのかもしれません。※ どのプラグインをアップデートしたかはログに書かれないようなので、確定ではないですが。しかし、依存関係が出来たのに、なぜruby-runtimeがインストールされなかったのだろう。。結論: ログ大事","link":"https://masutaka.net/2013-08-10-1/","isoDate":"2013-08-10T00:00:00.000Z","dateMiliSeconds":1376092800000,"authorName":"masutaka"},{"title":"『とんび』を読んだ","content":"ホリエモンがオススメしていたのでKindle版を買った(7/31は￥434で超お\n買い得だった(今は￥620))。\n昭和30年後半から最近くらいまでのお話。正直、出だしはあまり期待感が\n持てなかったけど、予想外にスピード感があってすぐ読めた。続きを読む\nのが楽しみな小説は久しぶりだった。\nなんというか対比が素晴らしかったですね。オススメ。","contentSnippet":"ホリエモンがオススメしていたのでKindle版を買った(7/31は￥434で超お買い得だった(今は￥620))。昭和30年後半から最近くらいまでのお話。正直、出だしはあまり期待感が持てなかったけど、予想外にスピード感があってすぐ読めた。続きを読むのが楽しみな小説は久しぶりだった。なんというか対比が素晴らしかったですね。オススメ。","link":"https://masutaka.net/2013-08-09-1/","isoDate":"2013-08-09T00:00:00.000Z","dateMiliSeconds":1376006400000,"authorName":"masutaka"},{"title":"flymake-puppet.elをインストールした","content":"flymake-puppet 1.0.0 - Marmalade: Spreadable Elisp 最近Marmaladeに登録されたので、インストールしてみました。\n(puppet-flymake ってのもあるのですね。ややこしい。。)\n puppet-lintというコマンドを要求するので、gemでインストールする(※1)。   % gem install puppet-lint\n  M-x list-packagesからflymake-puppetをインストールする(※2)。\n  ~/.emacs.d/init.elに以下を追加すればOK(※3)\n  ;;(load &#34;puppet-mode-init&#34;) ; (a) (add-hook &#39;puppet-mode-hook &#39;flymake-puppet-load) ; (b) 普通にflymakeが効いていて使える予感。\n ※1 あらかじめrbenvとかでrubyをインストールしないと、/usr/lib/ruby\n以下とかにインストールされるので注意。\n※2 Emacsのパッケージについては、以下のページやEmacs実践入門 を参考\nにどうぞ\npackage.elを使う場合の設定ファイルの書き方 - Life is very short ※3 M-x list-packagesからインストールすると、通常こういった基本的な\n設定は不要です。でも今回は~~(a)を設定しないと*.ppがpuppet-modeに関連\n付かない~~、(b)を設定しないとflymake-puppetが使われない、という状況だっ\nたので設定しました。\n 追記(2013-10-05):\npuppet-modeからpuppet-mode-init.elが削除され、設定が不要になったの\nで、(a)をコメントアウトしました。","contentSnippet":"flymake-puppet 1.0.0 - Marmalade: Spreadable Elisp 最近Marmaladeに登録されたので、インストールしてみました。(puppet-flymake ってのもあるのですね。ややこしい。。) puppet-lintというコマンドを要求するので、gemでインストールする(※1)。   % gem install puppet-lint  M-x list-packagesからflymake-puppetをインストールする(※2)。  ~/.emacs.d/init.elに以下を追加すればOK(※3)  ;;(load \"puppet-mode-init\") ; (a) (add-hook 'puppet-mode-hook 'flymake-puppet-load) ; (b) 普通にflymakeが効いていて使える予感。 ※1 あらかじめrbenvとかでrubyをインストールしないと、/usr/lib/ruby以下とかにインストールされるので注意。※2 Emacsのパッケージについては、以下のページやEmacs実践入門 を参考にどうぞpackage.elを使う場合の設定ファイルの書き方 - Life is very short ※3 M-x list-packagesからインストールすると、通常こういった基本的な設定は不要です。でも今回は~~(a)を設定しないと*.ppがpuppet-modeに関連付かない~~、(b)を設定しないとflymake-puppetが使われない、という状況だったので設定しました。 追記(2013-10-05):puppet-modeからpuppet-mode-init.elが削除され、設定が不要になったので、(a)をコメントアウトしました。","link":"https://masutaka.net/2013-08-05-1/","isoDate":"2013-08-05T00:00:00.000Z","dateMiliSeconds":1375660800000,"authorName":"masutaka"},{"title":"plenv + cpanm + cartonでPerlの環境を構築した(OSX版)","content":"[2013-07-17-1] のOSX(Mountain Lion)版です。こっちはめっちゃ簡単。\nbrewでplenvとperl-buildをインストール\n% brew install plenv % brew install perl-build あとはUbuntuと同じようにperl+cpanm+cartonをインストール\n% plenv install 5.18.0 -Dusethreads % plenv global 5.18.0 &amp;&amp; plenv rehash &amp;&amp; rehash % plenv install-cpanm % plenv exec cpanm Carton P.S.\n入れたは良いけど、OSXでPerl使わないなーと思ってたら、chalow(このブ\nログを生成するツール)で使ってた。てか、HTML::Templateがなくて\nchalowを実行出来なくなっていた&hellip;。早速インストール☆\n% plenv exec cpanm HTML::Template ","contentSnippet":"[2013-07-17-1] のOSX(Mountain Lion)版です。こっちはめっちゃ簡単。brewでplenvとperl-buildをインストール% brew install plenv % brew install perl-build あとはUbuntuと同じようにperl+cpanm+cartonをインストール% plenv install 5.18.0 -Dusethreads % plenv global 5.18.0 && plenv rehash && rehash % plenv install-cpanm % plenv exec cpanm Carton P.S.入れたは良いけど、OSXでPerl使わないなーと思ってたら、chalow(このブログを生成するツール)で使ってた。てか、HTML::Templateがなくてchalowを実行出来なくなっていた…。早速インストール☆% plenv exec cpanm HTML::Template","link":"https://masutaka.net/2013-07-17-2/","isoDate":"2013-07-17T01:00:00.000Z","dateMiliSeconds":1374022800000,"authorName":"masutaka"},{"title":"plenv + cpanm + cartonでPerlの環境を構築した(Ubuntu版)","content":"plenv + cpanm + carton でPerlの開発環境を構築する｜Act as Professional - hiroki.jp 私もGrowthForecast をインストールするために、Ubuntu 12.04.2 LTS上に\nPerlの環境を構築しました。@hirocaster さんと若干違いがあった(下記★\nの箇所)ので、私の手順も書き留めておきます。\nPerl力はゼロな私ですが、以下の認識でだいたい合っていると思います。\n  plenv\nRubyのrbenvに相当。複数バージョンのperlをHOMEにインストールし、切り\n替えて使うツール。というよりシステムを汚さないために使う感じ。\n  cpanm\nRubyのgemに相当。Perlのライブラリをインストールするために必要なツー\nル。今はcpanじゃなくてこれを使うみたい。\n  carton\nRubyのbundlerに相当。アプリごとにライブラリを切り替えることが出来る。\n  plenv+perl-build これは同じ。\n% git clone git://github.com/tokuhirom/plenv.git ~/.plenv 以下を~/.zshenv等に設定して、shellを再起動とかして完了。\nexport PATH=$HOME/.plenv/bin:$PATH eval &#34;$(plenv init -)&#34; Perlをビルドするためにはperl-buildが必要(★)。\n% git clone git://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/ インストール可能なPerlがずらずらと表示されるようになった(★)。\n% plenv install -l Available versions: (省略) 5.18.0 5.19.0 5.19.1 Perl 現時点での最新リリース版5.18.0をインストールする。Perlはx.y.zのy番\n号が奇数が開発版で偶数が安定版とのこと。&rsquo;-Dusethreads&rsquo;がなぜ必要な\nのかは知らない。\n% plenv install 5.","contentSnippet":"plenv + cpanm + carton でPerlの開発環境を構築する｜Act as Professional - hiroki.jp 私もGrowthForecast をインストールするために、Ubuntu 12.04.2 LTS上にPerlの環境を構築しました。@hirocaster さんと若干違いがあった(下記★の箇所)ので、私の手順も書き留めておきます。Perl力はゼロな私ですが、以下の認識でだいたい合っていると思います。  plenvRubyのrbenvに相当。複数バージョンのperlをHOMEにインストールし、切り替えて使うツール。というよりシステムを汚さないために使う感じ。  cpanmRubyのgemに相当。Perlのライブラリをインストールするために必要なツール。今はcpanじゃなくてこれを使うみたい。  cartonRubyのbundlerに相当。アプリごとにライブラリを切り替えることが出来る。  plenv+perl-build これは同じ。% git clone git://github.com/tokuhirom/plenv.git ~/.plenv 以下を~/.zshenv等に設定して、shellを再起動とかして完了。export PATH=$HOME/.plenv/bin:$PATH eval \"$(plenv init -)\" Perlをビルドするためにはperl-buildが必要(★)。% git clone git://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/ インストール可能なPerlがずらずらと表示されるようになった(★)。% plenv install -l Available versions: (省略) 5.18.0 5.19.0 5.19.1 Perl 現時点での最新リリース版5.18.0をインストールする。Perlはx.y.zのy番号が奇数が開発版で偶数が安定版とのこと。’-Dusethreads’がなぜ必要なのかは知らない。% plenv install 5.","link":"https://masutaka.net/2013-07-17-1/","isoDate":"2013-07-17T00:00:00.000Z","dateMiliSeconds":1374019200000,"authorName":"masutaka"},{"title":"nginxのアクセスログをFluentd経由でMongoDBに保存してみた","content":"Fluentdを使ってみたかったので、masutaka.netのnginxアクセスログを\nFluentd経由でMongoDBに保存してみました。\nFluentdについては以下が分かりやすいです。\nFluentdで始めるリアルタイムでのログ有効活用 - CodeZine 今回も@hirocaster さんの記事をほぼトレース。\n なぜFluentdなどを使ってログデータ活用するのか？｜Act as Professional - hiroki.jp  fluentdをインストールしてnginxのログをまずはローカルで集める｜Act as Professional - hiroki.jp  fluentd経由のデータをmongodbへ保存する｜Act as Professional - hiroki.jp  実際に運用しているサービスのnginxログをLTSVにしてみた！｜Act as Professional - hiroki.jp   実際、やっていることは単純で、\n nginxがアクセスログをファイルに書き出す。 それを検知したFluentd(実際はtd-agentを利用)がMongoDBに記録する。\nってだけです。  最後の記事を参考に、nginxのログ形式はデフォルト(Combined形式と呼ぶ\nらしい)からLTSV 形式に変更してます。最近のtd-agentはLTSVをサポートし\nているのでシンプルに書けました。あと、td-agentのログでWarningが出て\nいたので、pos_fileも追加しました。\nfluent-plugin-mongoをインストールするChefのレシピと、nginxの設定も\nコピペしておきますね。\n 始め、nginxとtd-agentの通信はパイプかなにかを介するのかと思い、難し\nく考えていましたが、実際は単なるファイルでした。ポーリングしている\nみたいです。\nもうひとつ誤解してたのが、\ntd-agentを使う ＝ Hadoopを使わなければならない\nだと思い込んでいたことでした。やたら難しく考えていた。\nやってみたら予想以上に単純でした。むしろChefのレシピを作るのに、\n多大な時間を使ってしまった。。\n次はGrowthForecast を試してみます。\n追記(2013-07-15):\n今のtd-agentはLTSVをサポートしているFluentdを同封していると指摘を受\nけましたので、記事を書き換えました。repeatedlyさん、ありがとうござ\nいました。\n追記(2013-08-15):\nChefのレシピやnginxの設定も追加しました。","contentSnippet":"Fluentdを使ってみたかったので、masutaka.netのnginxアクセスログをFluentd経由でMongoDBに保存してみました。Fluentdについては以下が分かりやすいです。Fluentdで始めるリアルタイムでのログ有効活用 - CodeZine 今回も@hirocaster さんの記事をほぼトレース。 なぜFluentdなどを使ってログデータ活用するのか？｜Act as Professional - hiroki.jp  fluentdをインストールしてnginxのログをまずはローカルで集める｜Act as Professional - hiroki.jp  fluentd経由のデータをmongodbへ保存する｜Act as Professional - hiroki.jp  実際に運用しているサービスのnginxログをLTSVにしてみた！｜Act as Professional - hiroki.jp   実際、やっていることは単純で、 nginxがアクセスログをファイルに書き出す。 それを検知したFluentd(実際はtd-agentを利用)がMongoDBに記録する。ってだけです。  最後の記事を参考に、nginxのログ形式はデフォルト(Combined形式と呼ぶらしい)からLTSV 形式に変更してます。最近のtd-agentはLTSVをサポートしているのでシンプルに書けました。あと、td-agentのログでWarningが出ていたので、pos_fileも追加しました。fluent-plugin-mongoをインストールするChefのレシピと、nginxの設定もコピペしておきますね。 始め、nginxとtd-agentの通信はパイプかなにかを介するのかと思い、難しく考えていましたが、実際は単なるファイルでした。ポーリングしているみたいです。もうひとつ誤解してたのが、td-agentを使う ＝ Hadoopを使わなければならないだと思い込んでいたことでした。やたら難しく考えていた。やってみたら予想以上に単純でした。むしろChefのレシピを作るのに、多大な時間を使ってしまった。。次はGrowthForecast を試してみます。追記(2013-07-15):今のtd-agentはLTSVをサポートしているFluentdを同封していると指摘を受けましたので、記事を書き換えました。repeatedlyさん、ありがとうございました。追記(2013-08-15):Chefのレシピやnginxの設定も追加しました。","link":"https://masutaka.net/2013-07-14-1/","isoDate":"2013-07-14T00:00:00.000Z","dateMiliSeconds":1373760000000,"authorName":"masutaka"},{"title":"masutaka.netをさくらのVPSに置き換えました","content":"このブログはほぼ静的コンテンツなので、置き換えるメリットはほぼあり\nません。でもいろいろ遊びたかったので置き換えました！\n◆置き換え前→さくらのレンタルサーバ [2009-05-17-4] リアルサーバ。\n他の人と/homeを共有する。\nコントロールパネルからメールアドレスを作ったり、アクセス解析出来る。\nカスタマイズ性はほぼない。\nOSはFreeBSD 7.1-RELEASE-p16\nWebサーバはApache/1.3.42\n年間5,000円(スタンダードプラン)\n◆置き換え後→さくらのVPS 仮想サーバ。\nユーザは自分だけ。\nコントロールパネルとかはない。\nカスタマイズしまくり。\nOSはUbuntu12.04 LTSにした。[2013-05-19-1] Webサーバはnginx/1.1.19にした。\n年間16,280円(プランは2G。石狩リージョン)\n結構真面目にサーバを構築しました。\n参考にしたのはもちろん『入門Chef Solo』[2013-04-22-4] 基本的にVagrantとserverspec で検証しつつレシピを書いたので、本番環境\nで悩むことは少なかったです。時代は進みましたね。\nWebサーバはnginxにしました。Apacheに比べて、設定がシンプルで惚れま\nした。あと、ごく一部で使っているcgi用にfcgiwrapをインストール。\nchef-soloで構築してみた疑問や課題はこんな感じ\n・パッケージ全体のupgradeはどのタイミングでやれば良いのか？\n・他の人のChef-soloリポジトリを知りたい。Vagrantでも真面目にテスト書いている？とか。\nchalowはChef-soloでは管理してません。まあ、Webアプリケーションなの\nで、デプロイ対象とかそっちの話だと思う。今は自作のmkchalowコマンド\nでアップロードしてます。[2009-06-14-3] ","contentSnippet":"このブログはほぼ静的コンテンツなので、置き換えるメリットはほぼありません。でもいろいろ遊びたかったので置き換えました！◆置き換え前→さくらのレンタルサーバ [2009-05-17-4] リアルサーバ。他の人と/homeを共有する。コントロールパネルからメールアドレスを作ったり、アクセス解析出来る。カスタマイズ性はほぼない。OSはFreeBSD 7.1-RELEASE-p16WebサーバはApache/1.3.42年間5,000円(スタンダードプラン)◆置き換え後→さくらのVPS 仮想サーバ。ユーザは自分だけ。コントロールパネルとかはない。カスタマイズしまくり。OSはUbuntu12.04 LTSにした。[2013-05-19-1] Webサーバはnginx/1.1.19にした。年間16,280円(プランは2G。石狩リージョン)結構真面目にサーバを構築しました。参考にしたのはもちろん『入門Chef Solo』[2013-04-22-4] 基本的にVagrantとserverspec で検証しつつレシピを書いたので、本番環境で悩むことは少なかったです。時代は進みましたね。Webサーバはnginxにしました。Apacheに比べて、設定がシンプルで惚れました。あと、ごく一部で使っているcgi用にfcgiwrapをインストール。chef-soloで構築してみた疑問や課題はこんな感じ・パッケージ全体のupgradeはどのタイミングでやれば良いのか？・他の人のChef-soloリポジトリを知りたい。Vagrantでも真面目にテスト書いている？とか。chalowはChef-soloでは管理してません。まあ、Webアプリケーションなので、デプロイ対象とかそっちの話だと思う。今は自作のmkchalowコマンドでアップロードしてます。[2009-06-14-3]","link":"https://masutaka.net/2013-05-27-2/","isoDate":"2013-05-27T01:00:00.000Z","dateMiliSeconds":1369616400000,"authorName":"masutaka"},{"title":"パソナテック様主催のセミナー『アジャイル開発におけるリーダーシップとは』に行ってきた","content":"先週木曜日の話になりますが、このツイートを見てノリで行ってきました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  【講演】アジャイル開発における新しいリーダシップのありかた｜Act as Professional - hiroki.jp 【講演資料】アジャイル開発における新しいリーダシップのありかた｜Act as Professional - hiroki.jp   当日は間違えて丸の内北口から出てしまったので、着いたのは結構ギリギ\nリな時間に&hellip;。でも大塚さんの目の前に陣取った！\n最初はアジャイルの基本的な話。変化が当然のこの時代に機敏に行動する\nための一つの解がアジャイルという(私の)認識。一度大塚さんから直接レ\nクチャーを受けたことがありますが、結構忘れてますね。。。補正が出来\nてよかったです。\nこの辺をメモってた。\n・スクラムは炭鉱のカナリア\n・スクラム用語ではイテレーションはスプリント\nスクラムとアジャイルの違いが分かってませんでしたが、wikipedia による\nと『スクラムは、ソフトウェア開発における軽量なアジャイルソフトウェ\nア開発手法の1つである。』とのこと。なるほど。\nしかし、アジャイルは難しい。スクラムマスターいないと絶対最初は失敗\nするでしょw 講演では40ページ目がスクラムの全てと言ってましたが、絶\n対イメージわかないでしょw\n後半は本題。アジャイル開発におけるリーダーシップの話でした。スクラ\nムマスターにリーダーシップが求められるのは当然ですが、彼がいなくて\nも回るチームが目標とのこと。そうですよね。ってことは、メンバー全員\nにリーダーシップが必要になります(今読んでいる本でも同じこと言ってる)。\n終わったあとは大塚さんとパソナテックのお姉さん２人とで、飲んで振り\n返りをしてきました。スクラムでは振り返りが大事ですからね！\n終わり。","contentSnippet":"先週木曜日の話になりますが、このツイートを見てノリで行ってきました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  【講演】アジャイル開発における新しいリーダシップのありかた｜Act as Professional - hiroki.jp 【講演資料】アジャイル開発における新しいリーダシップのありかた｜Act as Professional - hiroki.jp   当日は間違えて丸の内北口から出てしまったので、着いたのは結構ギリギリな時間に…。でも大塚さんの目の前に陣取った！最初はアジャイルの基本的な話。変化が当然のこの時代に機敏に行動するための一つの解がアジャイルという(私の)認識。一度大塚さんから直接レクチャーを受けたことがありますが、結構忘れてますね。。。補正が出来てよかったです。この辺をメモってた。・スクラムは炭鉱のカナリア・スクラム用語ではイテレーションはスプリントスクラムとアジャイルの違いが分かってませんでしたが、wikipedia によると『スクラムは、ソフトウェア開発における軽量なアジャイルソフトウェア開発手法の1つである。』とのこと。なるほど。しかし、アジャイルは難しい。スクラムマスターいないと絶対最初は失敗するでしょw 講演では40ページ目がスクラムの全てと言ってましたが、絶対イメージわかないでしょw後半は本題。アジャイル開発におけるリーダーシップの話でした。スクラムマスターにリーダーシップが求められるのは当然ですが、彼がいなくても回るチームが目標とのこと。そうですよね。ってことは、メンバー全員にリーダーシップが必要になります(今読んでいる本でも同じこと言ってる)。終わったあとは大塚さんとパソナテックのお姉さん２人とで、飲んで振り返りをしてきました。スクラムでは振り返りが大事ですからね！終わり。","link":"https://masutaka.net/2013-05-27-1/","isoDate":"2013-05-27T00:00:00.000Z","dateMiliSeconds":1369612800000,"authorName":"masutaka"},{"title":"さくらのVPS Ubuntuを10.04から12.04 LTSにバージョンアップした","content":"[2013-04-22-4] で書いたとおり、このmasutaka.netのリプレイス先のサー\nバをセットアップ中です。\n今回はカスタムOSインストールからUbuntu 10.04 i386をインストールして\nから、12.04 LTSにアップデートしました。\n参考にしたのはこの記事。\nさくらのVPS Ubuntu 10.04から12.04 LTSヘバージョンアップする｜Act as Professional - hiroki.jp ほぼこのまんまやってうまくいきました。毎度ありがとうございます。\nresolvconfはバージョンアップしたら勝手に入ったので、apt-get\ninstallは不要と言えば不要でした。\n名前解決はやっぱりできなかったので、記事と同じように\n/etc/resolvconf/resolv.conf.d/baseへの追記と、\n設定の反映&quot;sudo resolvconf -u&quot;をして終了。\nMySQLはまだ使わないのでこの時点では何もせず。\nUbuntuは/etc/lsb-release見ればリリース情報が分かるみたいですね。\nこれはバージョンアップ前\n% cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=10.04 DISTRIB_CODENAME=lucid DISTRIB_DESCRIPTION=&#34;Ubuntu 10.04.4 LTS&#34; これはバージョンアップ後\n% cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=12.04 DISTRIB_CODENAME=precise DISTRIB_DESCRIPTION=&#34;Ubuntu 12.04.2 LTS&#34; Chef-soloの使い方もだいたい理解したので、これからnginxとか入れてい\nきます。\nP.S.\npreciseって、コードネームだったのか。。(Debian脳ェ&hellip;)","contentSnippet":"[2013-04-22-4] で書いたとおり、このmasutaka.netのリプレイス先のサーバをセットアップ中です。今回はカスタムOSインストールからUbuntu 10.04 i386をインストールしてから、12.04 LTSにアップデートしました。参考にしたのはこの記事。さくらのVPS Ubuntu 10.04から12.04 LTSヘバージョンアップする｜Act as Professional - hiroki.jp ほぼこのまんまやってうまくいきました。毎度ありがとうございます。resolvconfはバージョンアップしたら勝手に入ったので、apt-getinstallは不要と言えば不要でした。名前解決はやっぱりできなかったので、記事と同じように/etc/resolvconf/resolv.conf.d/baseへの追記と、設定の反映\"sudo resolvconf -u\"をして終了。MySQLはまだ使わないのでこの時点では何もせず。Ubuntuは/etc/lsb-release見ればリリース情報が分かるみたいですね。これはバージョンアップ前% cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=10.04 DISTRIB_CODENAME=lucid DISTRIB_DESCRIPTION=\"Ubuntu 10.04.4 LTS\" これはバージョンアップ後% cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=12.04 DISTRIB_CODENAME=precise DISTRIB_DESCRIPTION=\"Ubuntu 12.04.2 LTS\" Chef-soloの使い方もだいたい理解したので、これからnginxとか入れていきます。P.S.preciseって、コードネームだったのか。。(Debian脳ェ…)","link":"https://masutaka.net/2013-05-19-1/","isoDate":"2013-05-19T00:00:00.000Z","dateMiliSeconds":1368921600000,"authorName":"masutaka"},{"title":"『トモダチコレクション 新生活』がやってきた！","content":"ダウンロード版を買っちゃった♡\n今までやったゲームって、難しすぎてコントローラを叩きつける系のが多\nかったんです。例えばデビルメイクライ3→[2011-02-11-5] それと比べると、なんとヌルイゲームであることか。\n主にすれちがい通信のMiiを登録してますが、近所の子供とかに告白して\nキモイオッサンになってます。やばいw (※基本勝手にするんです)\nググると芸能人Miiもあったので、QRコードで何人か登録してます。\n@Nintendo_Mii_ もフォロー☆\nキャンペーン もやってたので、「トモダチコレクション 新生活 ファッショ\nンカタログ」を50Pで申し込みました。もうどうにでもなれ..ヽ(´▽｀)ノ\nそれにしてもボスがなかなか出てこないなー","contentSnippet":"ダウンロード版を買っちゃった♡今までやったゲームって、難しすぎてコントローラを叩きつける系のが多かったんです。例えばデビルメイクライ3→[2011-02-11-5] それと比べると、なんとヌルイゲームであることか。主にすれちがい通信のMiiを登録してますが、近所の子供とかに告白してキモイオッサンになってます。やばいw (※基本勝手にするんです)ググると芸能人Miiもあったので、QRコードで何人か登録してます。@Nintendo_Mii_ もフォロー☆キャンペーン もやってたので、「トモダチコレクション 新生活 ファッションカタログ」を50Pで申し込みました。もうどうにでもなれ..ヽ(´▽｀)ノそれにしてもボスがなかなか出てこないなー","link":"https://masutaka.net/2013-05-10-1/","isoDate":"2013-05-10T00:00:00.000Z","dateMiliSeconds":1368144000000,"authorName":"masutaka"},{"title":"『コーディングを支える技術』を読んだ","content":"ちょいちょい話題になっているようだったので読んだ。一見、エディタや\n統合開発環境の本に見えるけど、そうじゃなくてプログラミング言語の歴\n史が書かれた本。\n前半はなじみ深いCやLispが例に出ることが多く、サクサク読めた。やっぱ、\nCとLispはテッパンですね。\n今なんとなく使っているif文や名前空間、継承などは、歴史によって磨か\nれ当たり前に使われていると再認識。\n各章はコンパクトにまとめられているのでサクサク読めた。内容もそんな\nに濃くないので、GWにさっと読むのは良いかも知れない。","contentSnippet":"ちょいちょい話題になっているようだったので読んだ。一見、エディタや統合開発環境の本に見えるけど、そうじゃなくてプログラミング言語の歴史が書かれた本。前半はなじみ深いCやLispが例に出ることが多く、サクサク読めた。やっぱ、CとLispはテッパンですね。今なんとなく使っているif文や名前空間、継承などは、歴史によって磨かれ当たり前に使われていると再認識。各章はコンパクトにまとめられているのでサクサク読めた。内容もそんなに濃くないので、GWにさっと読むのは良いかも知れない。","link":"https://masutaka.net/2013-05-03-1/","isoDate":"2013-05-03T00:00:00.000Z","dateMiliSeconds":1367539200000,"authorName":"masutaka"},{"title":"『入門Chef Solo - Infrastructure as Code』を読んだ","content":"業務でちょろっと使ったことある程度だし、890円だし、買ってみた。\nChefはサーバー設定や更新を自動化するツールです。サーバにちょっとで\nも興味がある人は今すぐ読んだ方が良いです。仮想サーバのVagrant使って、\n本当に簡単に試すことが出来ます。\n前職で頑張ってNFSやLDAPをセットアップしてましたが、もうそういう時代\nじゃないんですね。\nknife-solo 0.3.0のrake installや、knife solo initでエラーになり 、\nちょっと調べる必要があったので、そこはアップデート版に期待したいです。\n買った時は考えていませんでしたが、これを機にこのブログのサーバをリ\nプレイスすることにしました。\n今はさくらのレンタルサーバ スタンダードを使っています。[2009-05-17-4] 要は共有サーバなので、自由にパッケージを入れたり設定を変えることは\n出来ません。HOMEディレクトリも共有です。\nちょうど4/20が契約更新のタイミングだったので契約を停止し、さくらの\nVPS 2Gプラン を申し込みました。nginx動かしたり、fluentd(というかtd)\nでログ集めたりしようかなあと思ってます。\nそのためのサーバの設定をChef Soloで書きます。5/31までにリプレイスし\nないと、masutaka.netにアクセスできなくなる。ヤバイw","contentSnippet":"業務でちょろっと使ったことある程度だし、890円だし、買ってみた。Chefはサーバー設定や更新を自動化するツールです。サーバにちょっとでも興味がある人は今すぐ読んだ方が良いです。仮想サーバのVagrant使って、本当に簡単に試すことが出来ます。前職で頑張ってNFSやLDAPをセットアップしてましたが、もうそういう時代じゃないんですね。knife-solo 0.3.0のrake installや、knife solo initでエラーになり 、ちょっと調べる必要があったので、そこはアップデート版に期待したいです。買った時は考えていませんでしたが、これを機にこのブログのサーバをリプレイスすることにしました。今はさくらのレンタルサーバ スタンダードを使っています。[2009-05-17-4] 要は共有サーバなので、自由にパッケージを入れたり設定を変えることは出来ません。HOMEディレクトリも共有です。ちょうど4/20が契約更新のタイミングだったので契約を停止し、さくらのVPS 2Gプラン を申し込みました。nginx動かしたり、fluentd(というかtd)でログ集めたりしようかなあと思ってます。そのためのサーバの設定をChef Soloで書きます。5/31までにリプレイスしないと、masutaka.netにアクセスできなくなる。ヤバイw","link":"https://masutaka.net/2013-04-22-4/","isoDate":"2013-04-22T03:00:00.000Z","dateMiliSeconds":1366599600000,"authorName":"masutaka"},{"title":"『若者よ、アジアのウミガメとなれ』を読んだ","content":"なんとなく買ってしまった。講演は一度聴いたことあるし、直接話も聞い\nたことがあるのにw\n読んでいると加藤さんの声が聞こえてくる不思議な本。講演のテープを本\nに起こしたので、当たり前と言えばそうなんですが。\nしかしまあ、こういう形で出したのは大正解。加藤さんと非常に相性が良\nい。ボリュームが手頃だし読みやすいのでガンガン読める。\n日々悶々としている人は、とりあえず読むと何か変わるかもしれません。\nKindole版は270円。安い！\nラングリッチの話もちょっと出て来ますよ。","contentSnippet":"なんとなく買ってしまった。講演は一度聴いたことあるし、直接話も聞いたことがあるのにw読んでいると加藤さんの声が聞こえてくる不思議な本。講演のテープを本に起こしたので、当たり前と言えばそうなんですが。しかしまあ、こういう形で出したのは大正解。加藤さんと非常に相性が良い。ボリュームが手頃だし読みやすいのでガンガン読める。日々悶々としている人は、とりあえず読むと何か変わるかもしれません。Kindole版は270円。安い！ラングリッチの話もちょっと出て来ますよ。","link":"https://masutaka.net/2013-04-22-3/","isoDate":"2013-04-22T02:00:00.000Z","dateMiliSeconds":1366596000000,"authorName":"masutaka"},{"title":"『ビッグデータの衝撃』を読んだ","content":"ビッグデータの衝撃がKindleセール中だったので読んでみた - UNIX的なアレ まさに「データ解析をやらないとなーと漠然と思ってるけれど、それによっ\nて何が起きるのかイマイチわかってない人」なので読んだ。\n知識ゼロだったので読んで良かった。\n前半は面白くサクサク読めます。HadoopとかMapReduceとか知らなくても\nOKというか、むしろそういう人向けの内容。\n後半はやや退屈さが増してきて、読むのに時間がかかってしまった。\nでもオススメ。","contentSnippet":"ビッグデータの衝撃がKindleセール中だったので読んでみた - UNIX的なアレ まさに「データ解析をやらないとなーと漠然と思ってるけれど、それによって何が起きるのかイマイチわかってない人」なので読んだ。知識ゼロだったので読んで良かった。前半は面白くサクサク読めます。HadoopとかMapReduceとか知らなくてもOKというか、むしろそういう人向けの内容。後半はやや退屈さが増してきて、読むのに時間がかかってしまった。でもオススメ。","link":"https://masutaka.net/2013-04-22-2/","isoDate":"2013-04-22T01:00:00.000Z","dateMiliSeconds":1366592400000,"authorName":"masutaka"},{"title":"2013年3月も11回しかジムに行けなかった。 #クイックシェイプ","content":"2013年3月の記録    日付 最高血圧 最低血圧 脈拍     3/ 3(日) 111 76 102   3/ 6(水) 119 69 92   3/ 8(金) 121 72 95   3/12(火) 129 77 98   3/14(木) 119 75 96   3/16(土) 117 74 107   3/19(火) 119 72 78   3/21(木) 105 65 86   3/23(土) 119 72 98   3/27(水) 121 75 98   3/31(日) 124 72 96    ※運動前に測定","contentSnippet":"2013年3月の記録    日付 最高血圧 最低血圧 脈拍     3/ 3(日) 111 76 102   3/ 6(水) 119 69 92   3/ 8(金) 121 72 95   3/12(火) 129 77 98   3/14(木) 119 75 96   3/16(土) 117 74 107   3/19(火) 119 72 78   3/21(木) 105 65 86   3/23(土) 119 72 98   3/27(水) 121 75 98   3/31(日) 124 72 96    ※運動前に測定","link":"https://masutaka.net/2013-04-22-1/","isoDate":"2013-04-22T00:00:00.000Z","dateMiliSeconds":1366588800000,"authorName":"masutaka"},{"title":"通知特化型Twitterアプリ「29hours」をHerokuで動かせた","content":"通知特化型Twitterアプリ「29hours」をつくってHerokuで動かしているお話 - 準二級.jp 昨日というか今朝Heroku力がついたおかげで[2013-04-14-1] 、案外簡単に\nできました。\nsettings.ymlはだいたいこんな感じ。\ntwitter: my_screen_name: masutaka consumer_key: XXXXXXXX consumer_secret: XXXXXXXX access_key: XXXXXXXX access_secret: XXXXXXXX matchers: keywords: - masutaka - マスタカ - 増田 notifiers: imkayac: username: XXXXXXXX linker: http https://dev.twitter.com/apps からアプリを作って、consumer_keyや\nconsumer_secretなどを埋める必要があります。やったことない人は気づく\nまで時間がかかるかもしれません。\n普段使っているTweetAtokは個別ツイートのURLスキーマは対応してなさそ\nうでした。残念。\n以下、記事の見出しと対応してます。\n動かす ここまで来ると、ローカルで普通に動きます。タイムラインがだらだら流\nれていくことと、普段から使っているim.kayac.com から通知が来ることを\n確認しました。\nあ、今朝と同じようにgemはvender/gems以下にインストールして動作確認\nしました。[2013-04-14-1] Heroku に乗せる ここはちょっとハマりました。Dropboxにsettings.ymlを置きリンクを有効\nにしたんですが、29hoursは起動してないようでした。\nログを見るため、Papertrail を入れようと\n% heroku addons:add papertrail:choklad\nを実行したら下記のエラーメッセージ。Freeプランでもクレジットカード\n情報が必要みたいです。\n! Please verify your account to install this add-on ! For more information, see http://devcenter.","contentSnippet":"通知特化型Twitterアプリ「29hours」をつくってHerokuで動かしているお話 - 準二級.jp 昨日というか今朝Heroku力がついたおかげで[2013-04-14-1] 、案外簡単にできました。settings.ymlはだいたいこんな感じ。twitter: my_screen_name: masutaka consumer_key: XXXXXXXX consumer_secret: XXXXXXXX access_key: XXXXXXXX access_secret: XXXXXXXX matchers: keywords: - masutaka - マスタカ - 増田 notifiers: imkayac: username: XXXXXXXX linker: http https://dev.twitter.com/apps からアプリを作って、consumer_keyやconsumer_secretなどを埋める必要があります。やったことない人は気づくまで時間がかかるかもしれません。普段使っているTweetAtokは個別ツイートのURLスキーマは対応してなさそうでした。残念。以下、記事の見出しと対応してます。動かす ここまで来ると、ローカルで普通に動きます。タイムラインがだらだら流れていくことと、普段から使っているim.kayac.com から通知が来ることを確認しました。あ、今朝と同じようにgemはvender/gems以下にインストールして動作確認しました。[2013-04-14-1] Heroku に乗せる ここはちょっとハマりました。Dropboxにsettings.ymlを置きリンクを有効にしたんですが、29hoursは起動してないようでした。ログを見るため、Papertrail を入れようと% heroku addons:add papertrail:chokladを実行したら下記のエラーメッセージ。Freeプランでもクレジットカード情報が必要みたいです。! Please verify your account to install this add-on ! For more information, see http://devcenter.","link":"https://masutaka.net/2013-04-14-2/","isoDate":"2013-04-14T01:00:00.000Z","dateMiliSeconds":1365901200000,"authorName":"masutaka"},{"title":"やっとHerokuデビューできた","content":"Railsで簡単なアプリをscaffoldで作ってHerokuにデプロイするまで #heroku #PostgreSQL #Rails #Ruby - Qiita Rails力がそこそこついてきたので、こちら試したら案外簡単にできました。\n年末に別な記事で試した時はギブアップしたのですが。orz\nHerokuアプリ: http://sample-masutaka.herokuapp.com/ GitHub: https://github.com/masutaka/rails.sample/ 基本、記事の通りで大丈夫ですが、最初からRailアプリを作ったことがな\nかったので、ちょっとだけハマりました。\nローカルでRailsアプリ作成 アプリ名のディレクトリ(今回はsample)作って、cdしました。\n次にRails gemをインストールしました。Gemfileを作って&quot;bundle\ninstall&quot;実行です。今回は.bundle/configを作って、ローカルのgemは\nvender/gems以下にインストールされるようにしました(Heroku上では強制\n的にvendor/bundle以下にインストールされるみたい)。\nhttps://github.com/masutaka/rails.sample/commit/e69e24db750b97576a67d62c1e526b8dc57e5f09 最後に&quot;bundle exec rails new .&ldquo;を実行すれば、Rails環境がセットアッ\nプされます。&ldquo;Could not find gem &lsquo;jquery-rails&quot;というエラーが発生し\nましたが、&ldquo;bundle install&quot;したら問題なさそうでした。\nhttps://github.com/masutaka/rails.sample/commit/fffc748ce3ddf86c286b0ec3515ddc6792b1061c この状態で&rdquo;./script/rails s&quot;すると、http://localhost:3000 にアクセ\nス出来るようになります。\n初めてのHerokuへのデプロイ 記事の通りに&quot;heroku create sample-masutaka&quot;でアプリを作り、\ngit push herku masterすればデプロイ完了です。\nちなみにアプリを作ると&quot;git remote add heroku ..&ldquo;されるため、\n&ldquo;git push heroku master&quot;出来るようになります。\n&ldquo;git remote -v show&quot;で確認出来ますね。\n記事の通りにDBを指定しなかったので、sqlite3関連でエラーになってしま\nいました。Herokuではsqlite3使えないのですね。production環境のDBを\npostgreSQLにして解決しました。\nhttps://github.com/masutaka/rails.sample/commit/a73fa5cd3b10dd8a47d1daf6b8483051db257374 http://sample-masutaka.herokuapp.com/ にアクセス出来ました。\n簡単なブログアプリを作る 以下を実行するだけで http://localhost:3000/articles から記事を書け","contentSnippet":"Railsで簡単なアプリをscaffoldで作ってHerokuにデプロイするまで #heroku #PostgreSQL #Rails #Ruby - Qiita Rails力がそこそこついてきたので、こちら試したら案外簡単にできました。年末に別な記事で試した時はギブアップしたのですが。orzHerokuアプリ: http://sample-masutaka.herokuapp.com/ GitHub: https://github.com/masutaka/rails.sample/ 基本、記事の通りで大丈夫ですが、最初からRailアプリを作ったことがなかったので、ちょっとだけハマりました。ローカルでRailsアプリ作成 アプリ名のディレクトリ(今回はsample)作って、cdしました。次にRails gemをインストールしました。Gemfileを作って\"bundleinstall\"実行です。今回は.bundle/configを作って、ローカルのgemはvender/gems以下にインストールされるようにしました(Heroku上では強制的にvendor/bundle以下にインストールされるみたい)。https://github.com/masutaka/rails.sample/commit/e69e24db750b97576a67d62c1e526b8dc57e5f09 最後に\"bundle exec rails new .“を実行すれば、Rails環境がセットアップされます。“Could not find gem ‘jquery-rails\"というエラーが発生しましたが、“bundle install\"したら問題なさそうでした。https://github.com/masutaka/rails.sample/commit/fffc748ce3ddf86c286b0ec3515ddc6792b1061c この状態で”./script/rails s\"すると、http://localhost:3000 にアクセス出来るようになります。初めてのHerokuへのデプロイ 記事の通りに\"heroku create sample-masutaka\"でアプリを作り、git push herku masterすればデプロイ完了です。ちなみにアプリを作ると\"git remote add heroku ..“されるため、“git push heroku master\"出来るようになります。“git remote -v show\"で確認出来ますね。記事の通りにDBを指定しなかったので、sqlite3関連でエラーになってしまいました。Herokuではsqlite3使えないのですね。production環境のDBをpostgreSQLにして解決しました。https://github.com/masutaka/rails.sample/commit/a73fa5cd3b10dd8a47d1daf6b8483051db257374 http://sample-masutaka.herokuapp.com/ にアクセス出来ました。簡単なブログアプリを作る 以下を実行するだけで http://localhost:3000/articles から記事を書け","link":"https://masutaka.net/2013-04-14-1/","isoDate":"2013-04-14T00:00:00.000Z","dateMiliSeconds":1365897600000,"authorName":"masutaka"},{"title":"ついにドラクエ７をクリアーしたぞ！","content":"  歩いて歩いて歩いて歩いて歩きまくって、上り階段を間違えて間違えて間\n違えて間違えて間違えて上りまくって、ようやくクリアー出来ました。\nクリアー時間はなんと98時間22分。レベルも熟練度も上げてないんですよ\nこれ(街とかダンジョンはまあまあ念入りに探索した)。長い長いと聞いて\nいたけど、ホントに長かったw\nラスボスは弱いと聞いていたので、まものハンター、パラディン、パラディ\nン、盗賊という戦略もなにもないパーティでプラッと倒しに行きました。\n弱いなんてとんでもない！全てを出し尽くして、ようやく勝てました。世\n界樹のしずく、世界樹の葉、まほうの聖水がほぼゼロになった。。\nクリアーレベルは43, 39, 38, 40。そんなに低くないみたい。職業が適当\nすぎたかw\n攻撃力が一番高いキャラに仕事が集中してしまって、バイキルトやマジッ\nクバリア、ザオリクに忙しく、全然攻撃出来なかった。一方で賢者の石か\n炎の爪を使うしかやることがないキャラもいたしw\nフバーハとかスクルトとかかけてもすぐ無効にされるので、最後の方はバ\nイキルトしか使いませんでした。\nドラクエ７は歩きゲー それにしてもよく歩かされたゲームでした。それもこれも過去の世界でルー\nラが使えないのが大きい。\n現代に復活させてからも、同じ街やダンジョンを歩くことになるので、と\nにかく歩きました。私情弱なので、大灯台なんて５回くらい上りましたよw\n隅々まで確認しないと気が済まない私の性格もありますけど。\nレベルも熟練度も上げなかった ボスとか接戦で倒すのが好きなので、レベルも熟練度も敢えて上げません\nでした。でも、誰も勇者になったことがないってどういうことなの？w (ゴッ\nドハンドや天地雷鳴士にもなってない)\nでも楽しかった！ [2013-02-16-1] で書いたとおりゲームは２年ぶりだったので、思い切り楽\nしめました。７のシナリオは歴代のドラクエの中でも、屈指の出来だと思\nいます。結果を曖昧にして、それとなく伝わってくる感じが素晴らしい。\nリアリティがあります。\nそんなわけで無駄な有意義な時間を使いたい方は、是非プレイをオススメします！\n ","contentSnippet":"歩いて歩いて歩いて歩いて歩きまくって、上り階段を間違えて間違えて間違えて間違えて間違えて上りまくって、ようやくクリアー出来ました。クリアー時間はなんと98時間22分。レベルも熟練度も上げてないんですよこれ(街とかダンジョンはまあまあ念入りに探索した)。長い長いと聞いていたけど、ホントに長かったwラスボスは弱いと聞いていたので、まものハンター、パラディン、パラディン、盗賊という戦略もなにもないパーティでプラッと倒しに行きました。弱いなんてとんでもない！全てを出し尽くして、ようやく勝てました。世界樹のしずく、世界樹の葉、まほうの聖水がほぼゼロになった。。クリアーレベルは43, 39, 38, 40。そんなに低くないみたい。職業が適当すぎたかw攻撃力が一番高いキャラに仕事が集中してしまって、バイキルトやマジックバリア、ザオリクに忙しく、全然攻撃出来なかった。一方で賢者の石か炎の爪を使うしかやることがないキャラもいたしwフバーハとかスクルトとかかけてもすぐ無効にされるので、最後の方はバイキルトしか使いませんでした。ドラクエ７は歩きゲー それにしてもよく歩かされたゲームでした。それもこれも過去の世界でルーラが使えないのが大きい。現代に復活させてからも、同じ街やダンジョンを歩くことになるので、とにかく歩きました。私情弱なので、大灯台なんて５回くらい上りましたよw隅々まで確認しないと気が済まない私の性格もありますけど。レベルも熟練度も上げなかった ボスとか接戦で倒すのが好きなので、レベルも熟練度も敢えて上げませんでした。でも、誰も勇者になったことがないってどういうことなの？w (ゴッドハンドや天地雷鳴士にもなってない)でも楽しかった！ [2013-02-16-1] で書いたとおりゲームは２年ぶりだったので、思い切り楽しめました。７のシナリオは歴代のドラクエの中でも、屈指の出来だと思います。結果を曖昧にして、それとなく伝わってくる感じが素晴らしい。リアリティがあります。そんなわけで無駄な有意義な時間を使いたい方は、是非プレイをオススメします！","link":"https://masutaka.net/2013-03-24-4/","isoDate":"2013-03-24T03:00:00.000Z","dateMiliSeconds":1364094000000,"authorName":"masutaka"},{"title":"2013年2月は全然ダメ。10回しかジムに行けなかった。 #クイックシェイプ","content":"2013年2月の記録    日付 最高血圧 最低血圧 脈拍     2/ 1(金) 111 66 89   2/ 3(日) 121 71 93   2/ 5(火) 120 69 75   2/ 7(木) 127 83 86   2/ 9(土) 115 72 97   2/12(火) 120 77 77   2/14(木) 117 69 89   2/16(土) 測り 忘 れ   2/22(金) 117 76 83   2/24(日) 128 71 91    ※運動前に測定","contentSnippet":"2013年2月の記録    日付 最高血圧 最低血圧 脈拍     2/ 1(金) 111 66 89   2/ 3(日) 121 71 93   2/ 5(火) 120 69 75   2/ 7(木) 127 83 86   2/ 9(土) 115 72 97   2/12(火) 120 77 77   2/14(木) 117 69 89   2/16(土) 測り 忘 れ   2/22(金) 117 76 83   2/24(日) 128 71 91    ※運動前に測定","link":"https://masutaka.net/2013-03-24-3/","isoDate":"2013-03-24T02:00:00.000Z","dateMiliSeconds":1364090400000,"authorName":"masutaka"},{"title":"better than grepなackを試してみた","content":"better than grepなツールack がタイムラインでちょっと話題になっていた\nので、試してみました。find+grepより速くて良いね。\nOSXならbrewでインストールするとお手軽なんでしょう。\n % brew install ack\n デフォルトで再帰検索してくれます。.gitとか.svnディレクトリは勝手に\n無視してくれるようです。\n% ack hoge test/test-twittering-mode.el 405: (setcdr (assoc &#39;in-reply-to-screen-name status) &#34;hoge&#34;) 407: (test-assert-string-equal &#34; in reply to hoge&#34; 検索対象の拡張子は&quot;ack &ndash;help-types&quot;で確認出来ます。-kオプションを\n付けると、すべてのファイルを対象にします。\n% ack -k hoge ファイルやディレクトリも指定可能です。\n# ファイル % ack hoge twittering-mode.el # ディレクトリ % ack hoge test test/test-twittering-mode.el 405: (setcdr (assoc &#39;in-reply-to-screen-name status) &#34;hoge&#34;) 407: (test-assert-string-equal &#34; in reply to hoge&#34; &ndash;nogroupオプションを付けるとgrep -nっぽい出力になります。\n% ack --nogroup hoge test/test-twittering-mode.","contentSnippet":"better than grepなツールack がタイムラインでちょっと話題になっていたので、試してみました。find+grepより速くて良いね。OSXならbrewでインストールするとお手軽なんでしょう。 % brew install ack デフォルトで再帰検索してくれます。.gitとか.svnディレクトリは勝手に無視してくれるようです。% ack hoge test/test-twittering-mode.el 405: (setcdr (assoc 'in-reply-to-screen-name status) \"hoge\") 407: (test-assert-string-equal \" in reply to hoge\" 検索対象の拡張子は\"ack –help-types\"で確認出来ます。-kオプションを付けると、すべてのファイルを対象にします。% ack -k hoge ファイルやディレクトリも指定可能です。# ファイル % ack hoge twittering-mode.el # ディレクトリ % ack hoge test test/test-twittering-mode.el 405: (setcdr (assoc 'in-reply-to-screen-name status) \"hoge\") 407: (test-assert-string-equal \" in reply to hoge\" –nogroupオプションを付けるとgrep -nっぽい出力になります。% ack --nogroup hoge test/test-twittering-mode.","link":"https://masutaka.net/2013-03-24-2/","isoDate":"2013-03-24T01:00:00.000Z","dateMiliSeconds":1364086800000,"authorName":"masutaka"},{"title":"Railsのpreloader springを試してみた","content":"Rails使いよspork, zeusからspringへ！｜Act as Professional - hiroki.jp ようやくspring を試しました。\nまだzeus からは乗り換えられないかなー。開発は活発みたいなので、もう\n少ししたらまた試します。以下、詳細。\nテストを走らせたら、盛大にレッドになった。ちょっと調べたところ、\n1と2要因がほとんど。他にもあったかも知れない。3も困るかなあ。\n1. letではhogeは使えない。hoge_idを使う。 ※ この例ではLifeモデルはUserモデルのhas_oneです。\n以下のように直す必要がありました。まあ、直せば良いんですけどね。\n# 修正前 let(:taro) { FactoryGirl.create :taro_full_profile } let(:life_1) { FactoryGirl.build :life_1, user: taro } # 修正後 let(:taro) { FactoryGirl.create :taro_full_profile } let(:life_1) { FactoryGirl.build :life_1, user_id: taro.id } 2. スタブが使えない。 これが致命的でした。beforeとかでスタブを設定しても効きませんでした。\nbefore { Life.any_instance.stub(:fun?).and_return false } 3. モデルにbinding.pryを追加したらspringを再起動する必要あり。 手動でbundle exec spring stopする必要がありました。","contentSnippet":"Rails使いよspork, zeusからspringへ！｜Act as Professional - hiroki.jp ようやくspring を試しました。まだzeus からは乗り換えられないかなー。開発は活発みたいなので、もう少ししたらまた試します。以下、詳細。テストを走らせたら、盛大にレッドになった。ちょっと調べたところ、1と2要因がほとんど。他にもあったかも知れない。3も困るかなあ。1. letではhogeは使えない。hoge_idを使う。 ※ この例ではLifeモデルはUserモデルのhas_oneです。以下のように直す必要がありました。まあ、直せば良いんですけどね。# 修正前 let(:taro) { FactoryGirl.create :taro_full_profile } let(:life_1) { FactoryGirl.build :life_1, user: taro } # 修正後 let(:taro) { FactoryGirl.create :taro_full_profile } let(:life_1) { FactoryGirl.build :life_1, user_id: taro.id } 2. スタブが使えない。 これが致命的でした。beforeとかでスタブを設定しても効きませんでした。before { Life.any_instance.stub(:fun?).and_return false } 3. モデルにbinding.pryを追加したらspringを再起動する必要あり。 手動でbundle exec spring stopする必要がありました。","link":"https://masutaka.net/2013-03-24-1/","isoDate":"2013-03-24T00:00:00.000Z","dateMiliSeconds":1364083200000,"authorName":"masutaka"},{"title":"『虐殺器官』を読んだ","content":"舞台はサラエボに核爆弾が落とされた後の近未来。\n主人公は暗殺部隊の太尉。\n登場するギミックはなかなか面白く、ところどころにゾクゾクする面白さ\nがあったけど、不思議と一気に読めてしまうとまでは行かなかった。言葉\nが難しかったからかなあ。\nKindleじゃなかったら、途中で読むのを止めてしまったかも。。","contentSnippet":"舞台はサラエボに核爆弾が落とされた後の近未来。主人公は暗殺部隊の太尉。登場するギミックはなかなか面白く、ところどころにゾクゾクする面白さがあったけど、不思議と一気に読めてしまうとまでは行かなかった。言葉が難しかったからかなあ。Kindleじゃなかったら、途中で読むのを止めてしまったかも。。","link":"https://masutaka.net/2013-02-26-1/","isoDate":"2013-02-26T00:00:00.000Z","dateMiliSeconds":1361836800000,"authorName":"masutaka"},{"title":"ドラクエ７がやってきた！","content":"オンラインの１０を除いて唯一やってなかったので、発売のこのタイミングで買いました。ドラクエはゲームバランスが良いですね。中ボス戦が燃える！もうすぐダーマの神殿に着きます！\n話によるとシリーズ屈指の長さだそうで、覚悟してやってますw でも3DS版はリメイクが良く評判が良いそう。PS版は石版集めが超だるかったけど、3DS版はドラゴン石版レーダーがある等。\nAmazonだと1000円くらい安かったですよ。ダウンロード版もっと安くすれば買うのに。\n 明石に行く時にゲーム機は全て手放しましたが、この度(中古だけど)買いました。専用機でゲームやるのは実に２年ぶり。\n 付属のSDカードは2GBなので、サイズが大きいものに変えることをオススメします。\n ","contentSnippet":"オンラインの１０を除いて唯一やってなかったので、発売のこのタイミングで買いました。ドラクエはゲームバランスが良いですね。中ボス戦が燃える！もうすぐダーマの神殿に着きます！話によるとシリーズ屈指の長さだそうで、覚悟してやってますw でも3DS版はリメイクが良く評判が良いそう。PS版は石版集めが超だるかったけど、3DS版はドラゴン石版レーダーがある等。Amazonだと1000円くらい安かったですよ。ダウンロード版もっと安くすれば買うのに。 明石に行く時にゲーム機は全て手放しましたが、この度(中古だけど)買いました。専用機でゲームやるのは実に２年ぶり。 付属のSDカードは2GBなので、サイズが大きいものに変えることをオススメします。","link":"https://masutaka.net/2013-02-16-1/","isoDate":"2013-02-16T00:00:00.000Z","dateMiliSeconds":1360972800000,"authorName":"masutaka"},{"title":"2013年1月は良いスタート。皇居ランニング含めて14回ジムに行った。 #クイックシェイプ","content":"2013年1月の記録    日付 最高血圧 最低血圧 脈拍     1/ 5(土) 皇居 ラン ニング   1/ 6(日) 128 80 93   1/ 9(水) 116 68 79   1/10(木) 測り 忘 れ   1/12(土) 127 81 95   1/13(日) 119 73 90   1/15(火) 114 68 82   1/16(水) 119 72 80   1/19(土) 126 72 88   1/22(火) 121 72 79   1/23(水) 116 72 74   1/25(金) 116 67 80   1/27(日) 109 71 90   1/29(火) 120 75 76    ※運動前に測定","contentSnippet":"2013年1月の記録    日付 最高血圧 最低血圧 脈拍     1/ 5(土) 皇居 ラン ニング   1/ 6(日) 128 80 93   1/ 9(水) 116 68 79   1/10(木) 測り 忘 れ   1/12(土) 127 81 95   1/13(日) 119 73 90   1/15(火) 114 68 82   1/16(水) 119 72 80   1/19(土) 126 72 88   1/22(火) 121 72 79   1/23(水) 116 72 74   1/25(金) 116 67 80   1/27(日) 109 71 90   1/29(火) 120 75 76    ※運動前に測定","link":"https://masutaka.net/2013-02-02-1/","isoDate":"2013-02-02T00:00:00.000Z","dateMiliSeconds":1359763200000,"authorName":"masutaka"},{"title":"お料理共有アプリ『miil(ミイル)』が楽しい","content":"リリースされたのは確か1年半くらい前だったと思う。その時は「料理SNSっ\nてちょっと苦しくないかなあ。Instagram 使ってるから、使うの止めとこ\nう。」と思って使わなかった。\nでもこの4ヶ月使ってみて、間違いだったことに気づきました。というか楽\nしいw\n楽しいmiil 写真撮ってアップロードするだけで「食べたい！」が結構簡単に付きます。\nTwitter みたいに凝ったツイートをする必要もないし、Instagramみたいに\n美しいものを撮る必要もない。ただただこれから食べるものを撮るだけ。\nよく考えたらInstagramで撮ってたの料理ばかりだった。\nあと、ユーザー層がTwitterやFacebook と全然違うんです。気がついたらタ\nイムラインがほぼほぼ女性に。主婦の方がやっぱり多くて、大学生や高校\n生も普通にいる。中学生もいたw\n料理SNSという性格もそうだけど、TwitterのDirectMessageみたいなものが\nないのも理由かも。全部タイムラインに公開されるので危ない感じがしない。\n(寝る前にタイムライン眺めるのは非常に危ないですけどねw)\nおや？Twitterが？ それで思ったんですけど、SNSの多様性って確実に進んでますよね。という\nかTwitterがSNSじゃなくて、ただのデータ置き場になった感じがする。\n(そういう意味ではCrowsnest にはお世話になっています。[2012-12-24-1] )\nフォロワーさんとのやり取りは以前より相当減ったような..。って思って\nいたら、伊藤直也さんも同じことツイートしてた。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  SNSの使い分け そういうわけで、最近はなんとなく使い分けています。\nTwitterはなんでも流し込んでいて内訳は、どうでもいいツイート、はてブ\nしたURL(主にプログラミングネタ)、miilの写真かな。\nFacebookは直接投稿はまずしない。はてブもプログラミングネタは流さな\nいようにしてる。というか今見たらmiilの写真だらけになっていたw\nmiilはプログラミング色は一切排除。カレー大好き人間がいるだけ ですw\nまとめ そういうわけで、miil楽しいです。iPhoneとAndroid用のアプリがある ので、\n試してみるといいんじゃないかな。ああ、豚組 行きたい。","contentSnippet":"リリースされたのは確か1年半くらい前だったと思う。その時は「料理SNSってちょっと苦しくないかなあ。Instagram 使ってるから、使うの止めとこう。」と思って使わなかった。でもこの4ヶ月使ってみて、間違いだったことに気づきました。というか楽しいw楽しいmiil 写真撮ってアップロードするだけで「食べたい！」が結構簡単に付きます。Twitter みたいに凝ったツイートをする必要もないし、Instagramみたいに美しいものを撮る必要もない。ただただこれから食べるものを撮るだけ。よく考えたらInstagramで撮ってたの料理ばかりだった。あと、ユーザー層がTwitterやFacebook と全然違うんです。気がついたらタイムラインがほぼほぼ女性に。主婦の方がやっぱり多くて、大学生や高校生も普通にいる。中学生もいたw料理SNSという性格もそうだけど、TwitterのDirectMessageみたいなものがないのも理由かも。全部タイムラインに公開されるので危ない感じがしない。(寝る前にタイムライン眺めるのは非常に危ないですけどねw)おや？Twitterが？ それで思ったんですけど、SNSの多様性って確実に進んでますよね。というかTwitterがSNSじゃなくて、ただのデータ置き場になった感じがする。(そういう意味ではCrowsnest にはお世話になっています。[2012-12-24-1] )フォロワーさんとのやり取りは以前より相当減ったような..。って思っていたら、伊藤直也さんも同じことツイートしてた。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  SNSの使い分け そういうわけで、最近はなんとなく使い分けています。Twitterはなんでも流し込んでいて内訳は、どうでもいいツイート、はてブしたURL(主にプログラミングネタ)、miilの写真かな。Facebookは直接投稿はまずしない。はてブもプログラミングネタは流さないようにしてる。というか今見たらmiilの写真だらけになっていたwmiilはプログラミング色は一切排除。カレー大好き人間がいるだけ ですwまとめ そういうわけで、miil楽しいです。iPhoneとAndroid用のアプリがある ので、試してみるといいんじゃないかな。ああ、豚組 行きたい。","link":"https://masutaka.net/2013-01-27-2/","isoDate":"2013-01-27T01:00:00.000Z","dateMiliSeconds":1359248400000,"authorName":"masutaka"},{"title":"『モテキ』は神映画だった","content":"うん、前半だけね&hellip;。\nこの手の映画は多分つまらないけど、実は面白いんじゃないか的逆張りを\nしてみたら、前半はまさにその通りで、でも中盤から「ん？」ってなって\nきて、後半爆発した。前半のノリで突き進めば良かったんだけど、ガス欠\nになったのかね。\n主役の森山未來(今回初めて知った)のダンスがなかなか良かった。Amazon\nのレビュー見ると長澤まさみの評価が高いんだけど、私にはさっぱり分か\nらなかった。４人の女性の中では麻生久美子が良かった(百鬼丸の母役だっ\nたんだ。[2012-09-30-1] まあ、ああいう女性は無理だけどねw)。真木よう\n子はいつ絡んでくるかと待っていたんだけど、最後まで何もなかった。仲\n里依紗に至っては単なる１エピソード扱い。うーん。\nほとんどの役者さんは今回初めて動いているのを見たので、それだけでも\n収穫かな。リリー・フランキーってあんな人だったのね。","contentSnippet":"うん、前半だけね…。この手の映画は多分つまらないけど、実は面白いんじゃないか的逆張りをしてみたら、前半はまさにその通りで、でも中盤から「ん？」ってなってきて、後半爆発した。前半のノリで突き進めば良かったんだけど、ガス欠になったのかね。主役の森山未來(今回初めて知った)のダンスがなかなか良かった。Amazonのレビュー見ると長澤まさみの評価が高いんだけど、私にはさっぱり分からなかった。４人の女性の中では麻生久美子が良かった(百鬼丸の母役だったんだ。[2012-09-30-1] まあ、ああいう女性は無理だけどねw)。真木よう子はいつ絡んでくるかと待っていたんだけど、最後まで何もなかった。仲里依紗に至っては単なる１エピソード扱い。うーん。ほとんどの役者さんは今回初めて動いているのを見たので、それだけでも収穫かな。リリー・フランキーってあんな人だったのね。","link":"https://masutaka.net/2013-01-27-1/","isoDate":"2013-01-27T00:00:00.000Z","dateMiliSeconds":1359244800000,"authorName":"masutaka"},{"title":"昭和っぽいポットを買いました☆","content":"緑茶が美味しい季節ですよね。最近、白形傳四郎商店で清沢 というお茶を\n買ったんですが、うちにはやかんしかなかったので、あまり気軽に飲めま\nせんでした。\nそこで買ったのがこのポットです。\n いいでしょう〜 特にこのデザインw 昭和への郷愁を覚えます。小さい頃、\nこんなデザインのポットが家にありましたよ。\n決め手になったのはAmazonのこのレビュー 。金メダルごもっとも！\n 昔懐かしさのあるポットですが、取っ手の形状が良く見るとセンスのいいデザイン、\n片手で操作する重さとかお湯の出る口とかさすが象印ちゃんとゾウの鼻のような形状でデザインに金メダルを差し上げたい気持ちです。\n このポットは昔ながらのガラス魔法瓶です。うちみたいな独身者二人の家\nだったら電気ポットは要らないと思うのですよね。ケトルも持ってたこと\nがありますが、気がついたら冷めてることがあるのでイマイチです。シン\nプルが一番ですね。","contentSnippet":"緑茶が美味しい季節ですよね。最近、白形傳四郎商店で清沢 というお茶を買ったんですが、うちにはやかんしかなかったので、あまり気軽に飲めませんでした。そこで買ったのがこのポットです。 いいでしょう〜 特にこのデザインw 昭和への郷愁を覚えます。小さい頃、こんなデザインのポットが家にありましたよ。決め手になったのはAmazonのこのレビュー 。金メダルごもっとも！ 昔懐かしさのあるポットですが、取っ手の形状が良く見るとセンスのいいデザイン、片手で操作する重さとかお湯の出る口とかさすが象印ちゃんとゾウの鼻のような形状でデザインに金メダルを差し上げたい気持ちです。 このポットは昔ながらのガラス魔法瓶です。うちみたいな独身者二人の家だったら電気ポットは要らないと思うのですよね。ケトルも持ってたことがありますが、気がついたら冷めてることがあるのでイマイチです。シンプルが一番ですね。","link":"https://masutaka.net/2013-01-25-1/","isoDate":"2013-01-25T00:00:00.000Z","dateMiliSeconds":1359072000000,"authorName":"masutaka"},{"title":"最近作ったchalowプラグイン達","content":"ちょいちょい必要になったので作りました。\nGithubのリポジトリ 放置してるなあ。。\n 順番に説明。\ntwitter\nTwitterアカウントへのリンクを作るだけです。Twitter Anywhereは去年\nの12/6をもって使えないことになったので、代わりを探してましたが、こ\nの辺で妥協。\ntweet\n埋め込みツイートを挿入します。今まで公式の方法 で取得しHTMLをベタ\nに書いてましたが、これだけで表示出来るようです。\nspeakerdeck_f\nSpeaker Deckのプレゼンを表示します。\nmiil\nMiil の画像を表示します。画像は大きさを指定出来ますが、必ずそのサ\nイズを取得出来るとは限らない そうです。\n省略すると240x240になります。\nInstagram\nInstagram の画像を表示します。\nサイズはt(thumbnail), m(medium), l(large)を指定出来ます。\n省略するとmになります。\n追記(2013-02-06):\nInstagramを追加しました。","contentSnippet":"ちょいちょい必要になったので作りました。Githubのリポジトリ 放置してるなあ。。 順番に説明。twitterTwitterアカウントへのリンクを作るだけです。Twitter Anywhereは去年の12/6をもって使えないことになったので、代わりを探してましたが、この辺で妥協。tweet埋め込みツイートを挿入します。今まで公式の方法 で取得しHTMLをベタに書いてましたが、これだけで表示出来るようです。speakerdeck_fSpeaker Deckのプレゼンを表示します。miilMiil の画像を表示します。画像は大きさを指定出来ますが、必ずそのサイズを取得出来るとは限らない そうです。省略すると240x240になります。InstagramInstagram の画像を表示します。サイズはt(thumbnail), m(medium), l(large)を指定出来ます。省略するとmになります。追記(2013-02-06):Instagramを追加しました。","link":"https://masutaka.net/2013-01-14-2/","isoDate":"2013-01-14T01:00:00.000Z","dateMiliSeconds":1358125200000,"authorName":"masutaka"},{"title":"Emacsでカーソル下の記事に対応するchalowのURLをブラウザで開く","content":"結構便利。\n elisp久々に書いたら、だいぶ忘れてました。文字列ってシングルクオーテー\nションで括っちゃダメなんでしたっけ&hellip;？","contentSnippet":"結構便利。 elisp久々に書いたら、だいぶ忘れてました。文字列ってシングルクオーテーションで括っちゃダメなんでしたっけ…？","link":"https://masutaka.net/2013-01-14-1/","isoDate":"2013-01-14T00:00:00.000Z","dateMiliSeconds":1358121600000,"authorName":"masutaka"},{"title":"『アジャイルサムライ』を読まないプログラマはもぐりだよね。私でした。","content":" 去年後半から、アジャイルコーチの指導の下、アジャイル開発を始めてい\nます。薄々気づいてはいましたが、それ以前はアジャイル風開発でしたorz\n今までアジャイル本を何冊か読んだり、カンファレンスにも行ったことは\nありますが、ぶっちゃけよく分かりませんでした。(それでこの本も食わず\n嫌いのまま、読まなかったわけですが。)\nなんとなくこうなんじゃね？と、かんばん使ってみたり、Redmine導入した\nり、Jenkins導入したり、TDDっぽいことやってみたり。\n今思えばアジャイル風開発だったわけです。(それでも、やらなければもっ\nとひどいことになっていたと思いますが。)\nそういった状況で、この本を読んでみて思ったこと。\nやっぱり本だけじゃ無理だわw\n本自体はとっても読みやすいです。元が英語だったことを感じさせない翻\n訳は特筆に値します。ボリュームも300ページ弱と、めちゃめちゃ多いわけ\nではありません。そのわりに「アジャイルマニフェストの背後にある12の\n原則」をベースにしており、カッチリ作り込まれています(あとがきそのまま)。\nではありますが、(この本に限らず)本だけでアジャイル始めるのはかなり\n大変だと思います。でも、これ読まないでアジャイル開発始めるのは無理\nだと思います。アジャイルに少しでも興味あれば読むべきでしょう。\n今はたまたま良い環境に恵まれて、本当に幸運です。まあでも、実際やっ\nてみるとアジャイル開発はめちゃめちゃ大変ですねえ。8時間もやるとクタ\nクタです。腹も減るし。\nみなさまの苦労が偲ばれる電子書籍です。現在￥480とお買い得になってお\nります。\n サムライ・エピソード【電子書籍】 26人のサムライ達\n達人出版会\n発行日: 2012-09-14\n対応フォーマット: EPUB, PDF\n 詳細を見る   ","contentSnippet":"去年後半から、アジャイルコーチの指導の下、アジャイル開発を始めています。薄々気づいてはいましたが、それ以前はアジャイル風開発でしたorz今までアジャイル本を何冊か読んだり、カンファレンスにも行ったことはありますが、ぶっちゃけよく分かりませんでした。(それでこの本も食わず嫌いのまま、読まなかったわけですが。)なんとなくこうなんじゃね？と、かんばん使ってみたり、Redmine導入したり、Jenkins導入したり、TDDっぽいことやってみたり。今思えばアジャイル風開発だったわけです。(それでも、やらなければもっとひどいことになっていたと思いますが。)そういった状況で、この本を読んでみて思ったこと。やっぱり本だけじゃ無理だわw本自体はとっても読みやすいです。元が英語だったことを感じさせない翻訳は特筆に値します。ボリュームも300ページ弱と、めちゃめちゃ多いわけではありません。そのわりに「アジャイルマニフェストの背後にある12の原則」をベースにしており、カッチリ作り込まれています(あとがきそのまま)。ではありますが、(この本に限らず)本だけでアジャイル始めるのはかなり大変だと思います。でも、これ読まないでアジャイル開発始めるのは無理だと思います。アジャイルに少しでも興味あれば読むべきでしょう。今はたまたま良い環境に恵まれて、本当に幸運です。まあでも、実際やってみるとアジャイル開発はめちゃめちゃ大変ですねえ。8時間もやるとクタクタです。腹も減るし。みなさまの苦労が偲ばれる電子書籍です。現在￥480とお買い得になっております。 サムライ・エピソード【電子書籍】 26人のサムライ達達人出版会発行日: 2012-09-14対応フォーマット: EPUB, PDF 詳細を見る","link":"https://masutaka.net/2013-01-10-1/","isoDate":"2013-01-10T00:00:00.000Z","dateMiliSeconds":1357776000000,"authorName":"masutaka"},{"title":"飲みすぎたり食べすぎたりサボった日もあったりしたけど、2012年12月はなんとか12回ジムに行けた #クイックシェイプ","content":"2012年12月の記録    日付 最高血圧 最低血圧 脈拍     12/ 1(土) 103 67 89   12/ 4(火) 124 68 78   12/ 6(木) 119 72 76   12/ 9(日) 122 71 75   12/11(火) 112 72 83   12/18(火) 114 72 80   12/20(木) 120 77 88   12/22(土) 126 77 95   12/23(日) 140 87 109   12/25(火) 122 81 84   12/28(金) 125 73 97   12/29(土) 121 72 91    ※運動前に測定","contentSnippet":"2012年12月の記録    日付 最高血圧 最低血圧 脈拍     12/ 1(土) 103 67 89   12/ 4(火) 124 68 78   12/ 6(木) 119 72 76   12/ 9(日) 122 71 75   12/11(火) 112 72 83   12/18(火) 114 72 80   12/20(木) 120 77 88   12/22(土) 126 77 95   12/23(日) 140 87 109   12/25(火) 122 81 84   12/28(金) 125 73 97   12/29(土) 121 72 91    ※運動前に測定","link":"https://masutaka.net/2012-12-31-1/","isoDate":"2012-12-31T00:00:00.000Z","dateMiliSeconds":1356912000000,"authorName":"masutaka"},{"title":"Googleリーダーの未読が多くて困っている人はCrowsnestも使うと良いかも","content":"情報収集系の話題が熱いですね！Crowsnestもそうですが、SmartNews とか\nGunosy とかvingow とか。\nまあでもピンポイントで購読したいブログやウェブサイトは、RSSリーダー\nがテッパンです。\n若者が知らない最強の情報収集方法「RSSリーダー」 誰よりも詳しく！特定ジャンルの情報を効率的に得るたった1つの方法 狙い撃ち！！特定キーワードで最新情報をかき集めて完全把握する方法 私も以前からGoogleリーダーを使っていますが、250件くらいRSSを登録し\nていると毎日全部読むのはかなり大変です。\n特にはてブのお気に入り が大変で、数は多いわ同じ記事は何度も出て来る\nわで(livedoor Reader だとそんなことないそう)、たくさん未読があると憂\n鬱になります。マイホットエントリーには期待してたんですが、そのまま\n使うと未読管理出来ないし、かといってRSSに登録すると影響範囲が分から\nりません。うーん、残念。\nそんな時に見たのがこの記事。\niPhone 5での情報収集でCrowsnestを使うとかなり便利で快適になってきた件 - もとまか日記 CrowsnestはGoogleリーダーのフォルダ(＝タグ)を登録出来たんですね。\nおかげさまで情報収集にかける時間を1/3くらいに圧縮できました。\nどうやって使ってる？ 私はGoogleリーダーで購読している記事には以下の3つのタグを必ず付けて\nいます。名前の先頭に_(アンダーバー)を付けているのは、他のタグより上\nに表示したいからです。この辺は[2011-01-16-1] の「iPhone情報整理術」\nを参考にしてます。\n_mustread\n必ず読むサイトを登録しています。未読が出来たら何も考えずに別タブで\n開きます。そこまでしなくても良いかな〜と思ったら、次に説明する_scanタ\nグに変更します。\n_scan\nGoogleリーダー上でざっと見て、面白そうだったら別タブで開きます。新\nしくRSSを登録したら、だいたいこのタグを付けます。これも必要性が少な\nくなれば、次の_skipタグに変更します。\n_skip\n優先順位が一番低かったり、更新頻度が高すぎるサイトはこのタグを付け\nます。それさえも必要ないと思ったら、Googleリーダーへの登録を解除し\nます。\nCrowsnestに登録するのは_skipフォルダだけです。他の2つは今までどおり\nGoogle Readerで読みます。初めは全部Crowsnestで読んでたんですが、な\nんとなく今の形に落ち着きました。\nGoogleリーダーは大量の記事をざっくり読むのは得意ではないので、そこ\nをCrowsnestにお任せするのは良いアイディアなのかもしれませんね。\n今は_skipフォルダに気兼ねなく大量配信系のRSSを登録したり、はてブで\nフォローする人を増やせるようになりました。\nCrowsnestの良いところ、気になったところ ざっくり箇条書き。Crowsnest良いですよ！使ってて楽しいです。\n良いところ\n 何度も同じ記事を見なくて良い。☆☆☆ 影響度がすぐ分かる。☆☆ キーボードショートカット(?で表示)が便利。よく使うのはj,k,s,a,l,o 未読管理出来る。☆☆ タブ内はさくさく動く。 iPhoneでも読める。  気になったところ\n 未読数が表示されない。 タブを開くのが遅い時がある。 履歴とタイムラインの位置が固定。 iPhoneでの動作がもっさり。ブラウザの他のタブから戻ってくると再読","contentSnippet":"情報収集系の話題が熱いですね！Crowsnestもそうですが、SmartNews とかGunosy とかvingow とか。まあでもピンポイントで購読したいブログやウェブサイトは、RSSリーダーがテッパンです。若者が知らない最強の情報収集方法「RSSリーダー」 誰よりも詳しく！特定ジャンルの情報を効率的に得るたった1つの方法 狙い撃ち！！特定キーワードで最新情報をかき集めて完全把握する方法 私も以前からGoogleリーダーを使っていますが、250件くらいRSSを登録していると毎日全部読むのはかなり大変です。特にはてブのお気に入り が大変で、数は多いわ同じ記事は何度も出て来るわで(livedoor Reader だとそんなことないそう)、たくさん未読があると憂鬱になります。マイホットエントリーには期待してたんですが、そのまま使うと未読管理出来ないし、かといってRSSに登録すると影響範囲が分からりません。うーん、残念。そんな時に見たのがこの記事。iPhone 5での情報収集でCrowsnestを使うとかなり便利で快適になってきた件 - もとまか日記 CrowsnestはGoogleリーダーのフォルダ(＝タグ)を登録出来たんですね。おかげさまで情報収集にかける時間を1/3くらいに圧縮できました。どうやって使ってる？ 私はGoogleリーダーで購読している記事には以下の3つのタグを必ず付けています。名前の先頭に_(アンダーバー)を付けているのは、他のタグより上に表示したいからです。この辺は[2011-01-16-1] の「iPhone情報整理術」を参考にしてます。_mustread必ず読むサイトを登録しています。未読が出来たら何も考えずに別タブで開きます。そこまでしなくても良いかな〜と思ったら、次に説明する_scanタグに変更します。_scanGoogleリーダー上でざっと見て、面白そうだったら別タブで開きます。新しくRSSを登録したら、だいたいこのタグを付けます。これも必要性が少なくなれば、次の_skipタグに変更します。_skip優先順位が一番低かったり、更新頻度が高すぎるサイトはこのタグを付けます。それさえも必要ないと思ったら、Googleリーダーへの登録を解除します。Crowsnestに登録するのは_skipフォルダだけです。他の2つは今までどおりGoogle Readerで読みます。初めは全部Crowsnestで読んでたんですが、なんとなく今の形に落ち着きました。Googleリーダーは大量の記事をざっくり読むのは得意ではないので、そこをCrowsnestにお任せするのは良いアイディアなのかもしれませんね。今は_skipフォルダに気兼ねなく大量配信系のRSSを登録したり、はてブでフォローする人を増やせるようになりました。Crowsnestの良いところ、気になったところ ざっくり箇条書き。Crowsnest良いですよ！使ってて楽しいです。良いところ 何度も同じ記事を見なくて良い。☆☆☆ 影響度がすぐ分かる。☆☆ キーボードショートカット(?で表示)が便利。よく使うのはj,k,s,a,l,o 未読管理出来る。☆☆ タブ内はさくさく動く。 iPhoneでも読める。  気になったところ 未読数が表示されない。 タブを開くのが遅い時がある。 履歴とタイムラインの位置が固定。 iPhoneでの動作がもっさり。ブラウザの他のタブから戻ってくると再読","link":"https://masutaka.net/2012-12-24-1/","isoDate":"2012-12-24T00:00:00.000Z","dateMiliSeconds":1356307200000,"authorName":"masutaka"},{"title":"『ドラゴン・タトゥーの女』は凄まじく面白かった！","content":"2時間半の映画なんですが、全くダレることなく寧ろ一気に最後まで見られ\nました。気がついたら朝の4:00。次の日つらかった！w\n監督はソーシャル・ネットワーク のデヴィッド・フィンチャー 。ソーシャ\nルネットワークのスピード感そのままに、ストーリーがぎっちり詰め込め\nられています。かといって無駄なシーンは一つもありません。序盤はつい\nていくのが精一杯。タダでさえ横文字の名前は覚えられないのにw\n主演といっても良いルーニー・マーラがすごい。wikipediaの写真 を見た時、\n目を疑いました。これが本当に同じ人間なのかと。以下の記事が分かりや\nすいです。\nルーニー・マーラドラゴンタトゥーの女身長イメージ激変:ロハス美容ブログ あ、R-15指定なので、その点はご注意を。結構グロイシーンがあります。\nビュルマンのキャラ最高ですw","contentSnippet":"2時間半の映画なんですが、全くダレることなく寧ろ一気に最後まで見られました。気がついたら朝の4:00。次の日つらかった！w監督はソーシャル・ネットワーク のデヴィッド・フィンチャー 。ソーシャルネットワークのスピード感そのままに、ストーリーがぎっちり詰め込められています。かといって無駄なシーンは一つもありません。序盤はついていくのが精一杯。タダでさえ横文字の名前は覚えられないのにw主演といっても良いルーニー・マーラがすごい。wikipediaの写真 を見た時、目を疑いました。これが本当に同じ人間なのかと。以下の記事が分かりやすいです。ルーニー・マーラドラゴンタトゥーの女身長イメージ激変:ロハス美容ブログ あ、R-15指定なので、その点はご注意を。結構グロイシーンがあります。ビュルマンのキャラ最高ですw","link":"https://masutaka.net/2012-12-18-1/","isoDate":"2012-12-18T00:00:00.000Z","dateMiliSeconds":1355788800000,"authorName":"masutaka"},{"title":"『タイタンの逆襲』は続編ものだったのか..","content":"アクションが迫力あってストーリーはほぼなかったので、頭を使わずに見\nられました。死ぬほど殴られても大丈夫なのにナイフで刺されると即死亡\nとか、細かいことは気にしない方が良いでしょうw\n見終わってから『タイタンの戦い 』の続編だったと知り、ちょっとがっく\nり。そのうち借りようっと。","contentSnippet":"アクションが迫力あってストーリーはほぼなかったので、頭を使わずに見られました。死ぬほど殴られても大丈夫なのにナイフで刺されると即死亡とか、細かいことは気にしない方が良いでしょうw見終わってから『タイタンの戦い 』の続編だったと知り、ちょっとがっくり。そのうち借りようっと。","link":"https://masutaka.net/2012-12-17-1/","isoDate":"2012-12-17T00:00:00.000Z","dateMiliSeconds":1355702400000,"authorName":"masutaka"},{"title":"Emacsでカーソルに近接したスペースとタブを削除する","content":"いつもいつもdelete-horizontal-spaceのキーバインドを忘れて、\njust-one-spaceを使っているので、メモしておきます。\nM-\\ (delete-horizontal-space)\nカーソルに近接するスペースとタブを全て削除する。\nM-Space (just-one-space)\nスペース１つを除き、カーソルに近接するスペースとタブを全て削除する。\njust-one-spaceは一見使わなさそうですが、&quot;=&quot; や &ldquo;,&rdquo; の前後とか案外\n重宝しますよ。","contentSnippet":"いつもいつもdelete-horizontal-spaceのキーバインドを忘れて、just-one-spaceを使っているので、メモしておきます。M-\\ (delete-horizontal-space)カーソルに近接するスペースとタブを全て削除する。M-Space (just-one-space)スペース１つを除き、カーソルに近接するスペースとタブを全て削除する。just-one-spaceは一見使わなさそうですが、\"=\" や “,” の前後とか案外重宝しますよ。","link":"https://masutaka.net/2012-12-11-2/","isoDate":"2012-12-11T01:00:00.000Z","dateMiliSeconds":1355187600000,"authorName":"masutaka"},{"title":"anything-for-elscreen","content":"昨日か今日のペアプロで教えてもらったのですが、anythingからelscreen\nが使えるのですね。ググっても最近の記事が見つからなかったので、ageる\n意味で書き留めておきます。\n設定はこれだけ。\n Super-eはOSXデフォルトだとCommand-eです。isearch-yank-killが割り当\nてられています。使わないのでこのキーを潰しました。\nCommand-eするとこんな感じに一覧が出るので、簡単にタブを移動出来ます。\nC-z とかより打ちやすいと思います。\nhelmのこの方法もそのまま使えました。ありがとうございます。\nelscreenのタブをまとめて消す - Life is very short そういえば、elscreen-cloneとelscreen-toggleは結構便利ですよね。\n前者はC-z Cに、後者はC-z C-aとC-z aに割り当てられていますが、\n打ちづらいので私はそれぞれC-z C-lとC-z C-spaceに割り当てました。\n(define-key elscreen-map (kbd &#34;C-l&#34;) &#39;elscreen-clone) (define-key elscreen-map (kbd &#34;C-SPC&#34;) &#39;elscreen-toggle) P.S.\nhelmだと最初からhelm-elscreenが使えたりする？","contentSnippet":"昨日か今日のペアプロで教えてもらったのですが、anythingからelscreenが使えるのですね。ググっても最近の記事が見つからなかったので、ageる意味で書き留めておきます。設定はこれだけ。 Super-eはOSXデフォルトだとCommand-eです。isearch-yank-killが割り当てられています。使わないのでこのキーを潰しました。Command-eするとこんな感じに一覧が出るので、簡単にタブを移動出来ます。C-z とかより打ちやすいと思います。helmのこの方法もそのまま使えました。ありがとうございます。elscreenのタブをまとめて消す - Life is very short そういえば、elscreen-cloneとelscreen-toggleは結構便利ですよね。前者はC-z Cに、後者はC-z C-aとC-z aに割り当てられていますが、打ちづらいので私はそれぞれC-z C-lとC-z C-spaceに割り当てました。(define-key elscreen-map (kbd \"C-l\") 'elscreen-clone) (define-key elscreen-map (kbd \"C-SPC\") 'elscreen-toggle) P.S.helmだと最初からhelm-elscreenが使えたりする？","link":"https://masutaka.net/2012-12-11-1/","isoDate":"2012-12-11T00:00:00.000Z","dateMiliSeconds":1355184000000,"authorName":"masutaka"},{"title":"2012年11月は14回もジムに行けてた #クイックシェイプ","content":"2012年11月の記録    日付 最高血圧 最低血圧 脈拍     11/ 1(木) 121 75 87   11/ 2(金) 114 67 86   11/ 3(土) 111 69 94   11/ 6(火) 114 67 79   11/ 8(木) 108 66 83   11/ 9(金) 119 77 91   11/11(日) 107 65 100   11/13(火) 117 66 77   11/14(水) 117 65 90   11/22(木) 114 67 92   11/24(土) 118 75 100   11/25(日) 108 65 85   11/27(火) 120 77 87   11/30(金) 112 73 96    ※運動前に測定","contentSnippet":"2012年11月の記録    日付 最高血圧 最低血圧 脈拍     11/ 1(木) 121 75 87   11/ 2(金) 114 67 86   11/ 3(土) 111 69 94   11/ 6(火) 114 67 79   11/ 8(木) 108 66 83   11/ 9(金) 119 77 91   11/11(日) 107 65 100   11/13(火) 117 66 77   11/14(水) 117 65 90   11/22(木) 114 67 92   11/24(土) 118 75 100   11/25(日) 108 65 85   11/27(火) 120 77 87   11/30(金) 112 73 96    ※運動前に測定","link":"https://masutaka.net/2012-12-01-1/","isoDate":"2012-12-01T00:00:00.000Z","dateMiliSeconds":1354320000000,"authorName":"masutaka"},{"title":"Ruby 2.0 & Rails 4.0先取りセミナーに行ってきたメモ #webcat","content":"Ruby 2.0 &amp; Rails 4.0先取りセミナー : ATND Rubyの勉強会に来たのは今回が初めて(Ruby Kaigi[2011-07-21-1] はお祭り\nですからね)。\nRuby2.0もRails4.0もほぼ知識ゼロで来ました。Ruby2.0は前日rbenvでイン\nストールしましたけど。\n@a_matsuda さんの「Ruby 2.0 &amp; Rails 4.0を先取りしよう」   本当に重たい変更は1.9で済ませたそうなので、2.0への移行はすぐ出来る\nとのこと。実際互換性も問題ないらしい。あと、requireが高速化されたの\nで、Railsとかのライブラリたくさん読み込むプロジェクトが2.5倍とか速\nくなるらしい。 Rails4.0もRuby1.8を捨てた影響で速くなるとのこと。こちらも互換性は問\n題ないそう。\n@kentaro さんの「Rails4でアプリを作ってみた話」   で、こちらが開発中のRails4.0でアプリを作ったお話。Rails初めて使った\nのに開発版でやっちゃうんですか。。いろいろハマったのは開発版だった\nから。リリースされたらそんなことないとのこと。\nRails4 in Action - delirious thoughts ","contentSnippet":"Ruby 2.0 & Rails 4.0先取りセミナー : ATND Rubyの勉強会に来たのは今回が初めて(Ruby Kaigi[2011-07-21-1] はお祭りですからね)。Ruby2.0もRails4.0もほぼ知識ゼロで来ました。Ruby2.0は前日rbenvでインストールしましたけど。@a_matsuda さんの「Ruby 2.0 & Rails 4.0を先取りしよう」   本当に重たい変更は1.9で済ませたそうなので、2.0への移行はすぐ出来るとのこと。実際互換性も問題ないらしい。あと、requireが高速化されたので、Railsとかのライブラリたくさん読み込むプロジェクトが2.5倍とか速くなるらしい。 Rails4.0もRuby1.8を捨てた影響で速くなるとのこと。こちらも互換性は問題ないそう。@kentaro さんの「Rails4でアプリを作ってみた話」   で、こちらが開発中のRails4.0でアプリを作ったお話。Rails初めて使ったのに開発版でやっちゃうんですか。。いろいろハマったのは開発版だったから。リリースされたらそんなことないとのこと。Rails4 in Action - delirious thoughts","link":"https://masutaka.net/2012-11-23-2/","isoDate":"2012-11-23T01:00:00.000Z","dateMiliSeconds":1353632400000,"authorName":"masutaka"},{"title":"EmacsでMarkdownのプレビューをお手軽に確認する方法はこれかな？","content":"最近、業務のリポジトリがGithubに移行したので、Markdownをよく書いて\nます。(Github使うと、目に見えてソフトウェアの品質が上がりますね！)\nMarkdownのレンダリング結果を確認するために、Githubのwikiに貼り付け\nてプレビューとかやってましたが、バカらしくなったのでローカルで確認\n出来る方法を探しました。\n方法1: markdown-mode.elを使う 賢明な皆さんはEmacs24をお使いだと思うので、M-x list-packagesから\nmarkdown-mode.elをインストールし、以下を~/.emacs.d/init.elに追加し\nます。\n(add-to-list &#39;auto-mode-alist &#39;(&#34;\\\\.md\\\\&#39;&#34; . markdown-mode)) README.mdとかがmarkdown-modeで開くようになります。\nC-c C-c pでプレビューがブラウザに表示されます。markdownコマンドがな\nいと怒られたら、brewとかでインストールして下さい。\n% brew install markdown 方法2: node.jsのツール、markupを使う markdown のリアルタイムレンダリングツール markup をリリースしました - Block Rockin’ Codes こんなツールを作った方がいらっしゃいました。ありがたや〜\nnode.jsはbrewとかでインストールしておきます。\n% brew install node 適当なディレクトリにmarkupをインストールします。私は~/local/shareに\nインストールし、~/local/binにmarkupのシンボリックリンクを置きました。\n% cd ~/local/share % npm install markup % cd ~/local/bin % ln -s ../share/node_modules/.bin/markup markupコマンドで編集するMarkdownファイルを捕捉します。\n% markup README.md 3000 README.mdを保存するたびに、http://localhost:3000の結果が書き換わり\nます。\nGithubのAPI制限は5000回/時みたいです。\nまとめ ちょっと編集する時はmarkdown-mode.el、それなりの量を編集する時は\nmarkupが良さそうです。\nP.S.\nこんな方法もありました。","contentSnippet":"最近、業務のリポジトリがGithubに移行したので、Markdownをよく書いてます。(Github使うと、目に見えてソフトウェアの品質が上がりますね！)Markdownのレンダリング結果を確認するために、Githubのwikiに貼り付けてプレビューとかやってましたが、バカらしくなったのでローカルで確認出来る方法を探しました。方法1: markdown-mode.elを使う 賢明な皆さんはEmacs24をお使いだと思うので、M-x list-packagesからmarkdown-mode.elをインストールし、以下を~/.emacs.d/init.elに追加します。(add-to-list 'auto-mode-alist '(\"\\\\.md\\\\'\" . markdown-mode)) README.mdとかがmarkdown-modeで開くようになります。C-c C-c pでプレビューがブラウザに表示されます。markdownコマンドがないと怒られたら、brewとかでインストールして下さい。% brew install markdown 方法2: node.jsのツール、markupを使う markdown のリアルタイムレンダリングツール markup をリリースしました - Block Rockin’ Codes こんなツールを作った方がいらっしゃいました。ありがたや〜node.jsはbrewとかでインストールしておきます。% brew install node 適当なディレクトリにmarkupをインストールします。私は~/local/shareにインストールし、~/local/binにmarkupのシンボリックリンクを置きました。% cd ~/local/share % npm install markup % cd ~/local/bin % ln -s ../share/node_modules/.bin/markup markupコマンドで編集するMarkdownファイルを捕捉します。% markup README.md 3000 README.mdを保存するたびに、http://localhost:3000の結果が書き換わります。GithubのAPI制限は5000回/時みたいです。まとめ ちょっと編集する時はmarkdown-mode.el、それなりの量を編集する時はmarkupが良さそうです。P.S.こんな方法もありました。","link":"https://masutaka.net/2012-11-23-1/","isoDate":"2012-11-23T00:00:00.000Z","dateMiliSeconds":1353628800000,"authorName":"masutaka"},{"title":"OSXのGNU Screenは~/.zprofileを読み込まない？","content":"tmuxのすすめ｜catatsuyのBlog これを参考にtmuxを試していたら、なんかPATHがおかしい。調べてみたら、\nむしろGNU Screenの方がおかしくて、~/.zprofileが読み込まれていないこ\nとが分かった。\n私の~/.zprofileは以下のとおり。\n# # /etc/zprofile and ~/.zprofile are run for login shells # # all bourne shells should source /etc/profile source /etc/profile /etc/profileは以下のとおり。\n# System-wide .profile for sh(1) if [ -x /usr/libexec/path_helper ]; then eval `/usr/libexec/path_helper -s` fi if [ &#34;${BASH-no}&#34; != &#34;no&#34; ]; then [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc fi 結果的に以下が原因で、PATHとMANPATHが異なっていた。\nGNU Screen -&gt; eval /usr/libexec/path_helper -s が実行されない\ntmux -&gt; eval /usr/libexec/path_helper -s が実行される。","contentSnippet":"tmuxのすすめ｜catatsuyのBlog これを参考にtmuxを試していたら、なんかPATHがおかしい。調べてみたら、むしろGNU Screenの方がおかしくて、~/.zprofileが読み込まれていないことが分かった。私の~/.zprofileは以下のとおり。# # /etc/zprofile and ~/.zprofile are run for login shells # # all bourne shells should source /etc/profile source /etc/profile /etc/profileは以下のとおり。# System-wide .profile for sh(1) if [ -x /usr/libexec/path_helper ]; then eval `/usr/libexec/path_helper -s` fi if [ \"${BASH-no}\" != \"no\" ]; then [ -r /etc/bashrc ] && . /etc/bashrc fi 結果的に以下が原因で、PATHとMANPATHが異なっていた。GNU Screen -> eval /usr/libexec/path_helper -s が実行されないtmux -> eval /usr/libexec/path_helper -s が実行される。","link":"https://masutaka.net/2012-11-19-1/","isoDate":"2012-11-19T00:00:00.000Z","dateMiliSeconds":1353283200000,"authorName":"masutaka"},{"title":"『ショーシャンクの空に』はジワジワ来る映画だった","content":" 前半救いもない感じだったけど、後半ジワジワきましたね〜\nなんで観ることにしたか忘れましたが、悪くない映画でした。\n追記(2013-01-26):\nこれで知ったっぽい。\n期待せずにレンタルしたら意外にも面白かった映画:ツンダオワタ情報 ","contentSnippet":"前半救いもない感じだったけど、後半ジワジワきましたね〜なんで観ることにしたか忘れましたが、悪くない映画でした。追記(2013-01-26):これで知ったっぽい。期待せずにレンタルしたら意外にも面白かった映画:ツンダオワタ情報","link":"https://masutaka.net/2012-11-06-1/","isoDate":"2012-11-06T00:00:00.000Z","dateMiliSeconds":1352160000000,"authorName":"masutaka"},{"title":"2012年10月は15回ジムに行きました #クイックシェイプ","content":"2012年10月の記録    日付 最高血圧 最低血圧 脈拍     10/ 2(火) 119 73 84   10/ 5(金) 116 69 85   10/ 6(土) 115 73 91   10/ 7(日) 115 78 92   10/ 9(火) 106 73 92   10/11(木) 110 77 86   10/12(金) 123 73 84   10/13(土) 127 74 92   10/16(火) 119 70 82   10/17(水) 121 72 89   10/20(土) 117 68 96   10/21(日) 120 73 86   10/23(火) 129 77 89   10/25(木) 120 77 96   10/30(火) 117 70 76    ※運動前に測定","contentSnippet":"2012年10月の記録    日付 最高血圧 最低血圧 脈拍     10/ 2(火) 119 73 84   10/ 5(金) 116 69 85   10/ 6(土) 115 73 91   10/ 7(日) 115 78 92   10/ 9(火) 106 73 92   10/11(木) 110 77 86   10/12(金) 123 73 84   10/13(土) 127 74 92   10/16(火) 119 70 82   10/17(水) 121 72 89   10/20(土) 117 68 96   10/21(日) 120 73 86   10/23(火) 129 77 89   10/25(木) 120 77 96   10/30(火) 117 70 76    ※運動前に測定","link":"https://masutaka.net/2012-11-03-1/","isoDate":"2012-11-03T00:00:00.000Z","dateMiliSeconds":1351900800000,"authorName":"masutaka"},{"title":"『蒸気でホットアイマスク』が高いと思う人には『あずきのチカラ』がオススメ","content":"1分の仮眠でも効果があった！現役医師が教える「1分仮眠法」｜Act as Professional - hiroki.jp by HIROCASTER ここで『あずきのチカラ(以下あずき)』を見た時は、『蒸気でホットアイ\nマスク(以下アイマスク)』のパチモンかと思いましたよ(笑)。\n  でも700円で繰り返し(約200回)使えるという話なので、さっそく試してみ\nました。結論から言うと、アイマスクより安っぽくはありますが買いです。\nあずきは電子レンジで温めて使います。600Wだったら30秒です。アイマス\nクはじわじわ温まりますが、あずきは最初から温まっています。時間も5分\nと、アイマスクよりやや短いと思います。\nなんで買いかというと、やっぱり安いからなんですよね。\nアイマスクは無香料でも1枚80円くらいなので、あまり毎日使おうと思いま\nせん。あずきは1回あたり3円なので、毎日はおろか1日何度でも使えます\n(4時間の間隔を開ける必要はあります)。最近は寝る前と起きた時にあずき\nを使ってます。\nところでアイマスクって、今は５種類も香りがあるのですね！あずきは別\nの香りは絶対増えないので羨ましい！(笑)\n     追記(2013-04-21):\nホットアイマスクの発売って、6年も前だったのね。[2007-09-21-1] ","contentSnippet":"1分の仮眠でも効果があった！現役医師が教える「1分仮眠法」｜Act as Professional - hiroki.jp by HIROCASTER ここで『あずきのチカラ(以下あずき)』を見た時は、『蒸気でホットアイマスク(以下アイマスク)』のパチモンかと思いましたよ(笑)。  でも700円で繰り返し(約200回)使えるという話なので、さっそく試してみました。結論から言うと、アイマスクより安っぽくはありますが買いです。あずきは電子レンジで温めて使います。600Wだったら30秒です。アイマスクはじわじわ温まりますが、あずきは最初から温まっています。時間も5分と、アイマスクよりやや短いと思います。なんで買いかというと、やっぱり安いからなんですよね。アイマスクは無香料でも1枚80円くらいなので、あまり毎日使おうと思いません。あずきは1回あたり3円なので、毎日はおろか1日何度でも使えます(4時間の間隔を開ける必要はあります)。最近は寝る前と起きた時にあずきを使ってます。ところでアイマスクって、今は５種類も香りがあるのですね！あずきは別の香りは絶対増えないので羨ましい！(笑)     追記(2013-04-21):ホットアイマスクの発売って、6年も前だったのね。[2007-09-21-1]","link":"https://masutaka.net/2012-10-31-2/","isoDate":"2012-10-31T01:00:00.000Z","dateMiliSeconds":1351645200000,"authorName":"masutaka"},{"title":"『リーダブルコード』を読むことはプログラマとしてのたしなみ","content":"なんだかんだ言ってこの業界、読めるよりも動くコードが重視されて来た\nと感じています。\n動くだけで読むのが苦痛なコードって、ちゃんと読めるコードにするまで\nの時間を、これから読む人や修正する人に預けているだけなんですよね。\n書く回数より読む回数の方が圧倒的に多いのです。そしてそれは、ビジネ\nススピードに直接繋がります。\n私は今まで、読めるコードになるように丁寧に書いて来たつもりです。で\nも「ここまで丁寧に書くのは自己満足なのでは？」と思うことはよくあり\nましたし、コードレビューの時も指針となるものがありませんでした。\n本書を読んで「ああ、ここまで書いて良いのね」とある意味救われました\nし、いくつかの間違いにも気づきました。コードレビューの時も自信が持\nてそうです(笑)。\nプログラマ初心者は先輩のクソコードに染まる前に読むべきだし、日々良\nいコードを書こうと奮闘しているプログラマも読むべきでしょう。チーム\nで読書会など開くのも良いと思います。\n本書自体「リーダブル」な文章で書かれていますが、230ページと手頃なペー\nジ数も「リーダブル」です。","contentSnippet":"なんだかんだ言ってこの業界、読めるよりも動くコードが重視されて来たと感じています。動くだけで読むのが苦痛なコードって、ちゃんと読めるコードにするまでの時間を、これから読む人や修正する人に預けているだけなんですよね。書く回数より読む回数の方が圧倒的に多いのです。そしてそれは、ビジネススピードに直接繋がります。私は今まで、読めるコードになるように丁寧に書いて来たつもりです。でも「ここまで丁寧に書くのは自己満足なのでは？」と思うことはよくありましたし、コードレビューの時も指針となるものがありませんでした。本書を読んで「ああ、ここまで書いて良いのね」とある意味救われましたし、いくつかの間違いにも気づきました。コードレビューの時も自信が持てそうです(笑)。プログラマ初心者は先輩のクソコードに染まる前に読むべきだし、日々良いコードを書こうと奮闘しているプログラマも読むべきでしょう。チームで読書会など開くのも良いと思います。本書自体「リーダブル」な文章で書かれていますが、230ページと手頃なページ数も「リーダブル」です。","link":"https://masutaka.net/2012-10-31-1/","isoDate":"2012-10-31T00:00:00.000Z","dateMiliSeconds":1351641600000,"authorName":"masutaka"},{"title":"Mountain LionでのEmacsの安定度ハンパないっす！","content":"Lionではほぼ毎日Emacsが落ちてましたが、Mountain Lionにしてからは\n一度も落ちていません。やっぱり、OSXのバグだったんですね。。。\nOSXでのEmacs最新版のdmgはGNU Emacs For Mac OS X からダウンロード\n出来ます。","contentSnippet":"Lionではほぼ毎日Emacsが落ちてましたが、Mountain Lionにしてからは一度も落ちていません。やっぱり、OSXのバグだったんですね。。。OSXでのEmacs最新版のdmgはGNU Emacs For Mac OS X からダウンロード出来ます。","link":"https://masutaka.net/2012-10-06-2/","isoDate":"2012-10-06T01:00:00.000Z","dateMiliSeconds":1349485200000,"authorName":"masutaka"},{"title":"Emacsでお手軽にプレゼンできるorg-tree-slideはかなり良い感じ！","content":"過去にGody は挫折しましたが、org-tree-slideはお手軽に使えて良い感じ\nです。org-modeは必要性がなくて使っていませんでしたが、軽くプレゼン\n資料作るためだけに使うのは大いにアリです。\norg-modeはEmacsにデフォルトで入っているので、org-tree-slideを\nGitHubから入手して、、\n % git clone git://github.com/takaxp/org-tree-slide.git\n Emacsに以下の設定をするだけです。F5でプレゼンが始まります。\n(require &#39;org-tree-slide) (setq org-tree-slide-heading-emphasis t) (define-key global-map (kbd &#34;&lt;f5&gt;&#34;) &#39;org-tree-slide-mode) 文字サイズを大きくしたいとかは、以下のオフィシャルサイトを参考に\nして下さい。\nemacs:org-tree-slide - PastelWiki requireでエラーが出る方(load-pathが分からない方)はあらかじめ\n[2009-07-05-3] の設定をすると良いでしょう。\nP.S.\nOSXでorgファイルをpdfにする方法、誰か教えて。。\n追記(2012-10-07):\n@cvmat さんからアドバイス頂きました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ","contentSnippet":"過去にGody は挫折しましたが、org-tree-slideはお手軽に使えて良い感じです。org-modeは必要性がなくて使っていませんでしたが、軽くプレゼン資料作るためだけに使うのは大いにアリです。org-modeはEmacsにデフォルトで入っているので、org-tree-slideをGitHubから入手して、、 % git clone git://github.com/takaxp/org-tree-slide.git Emacsに以下の設定をするだけです。F5でプレゼンが始まります。(require 'org-tree-slide) (setq org-tree-slide-heading-emphasis t) (define-key global-map (kbd \"<f5>\") 'org-tree-slide-mode) 文字サイズを大きくしたいとかは、以下のオフィシャルサイトを参考にして下さい。emacs:org-tree-slide - PastelWiki requireでエラーが出る方(load-pathが分からない方)はあらかじめ[2009-07-05-3] の設定をすると良いでしょう。P.S.OSXでorgファイルをpdfにする方法、誰か教えて。。追記(2012-10-07):@cvmat さんからアドバイス頂きました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i","link":"https://masutaka.net/2012-10-06-1/","isoDate":"2012-10-06T00:00:00.000Z","dateMiliSeconds":1349481600000,"authorName":"masutaka"},{"title":"2012年9月は14回ジムに行きました #クイックシェイプ","content":"日付 最高血圧 最低血圧 脈拍     9/ 1(土) 125 74 86   9/ 2(日) 107 66 94   9/ 5(水) 127 70 78   9/ 8(土) 120 75 95   9/11(火) 111 68 -   9/13(木) 114 74 97   9/14(金) 128 81 90   9/16(日) 111 69 91   9/18(火) 119 75 87   9/19(水) 112 69 75   9/22(土) 113 75 98   9/25(火) 108 72 97   9/28(金) 124 80 86   9/29(土) 127 73 85    ※運動前に測定","contentSnippet":"日付 最高血圧 最低血圧 脈拍     9/ 1(土) 125 74 86   9/ 2(日) 107 66 94   9/ 5(水) 127 70 78   9/ 8(土) 120 75 95   9/11(火) 111 68 -   9/13(木) 114 74 97   9/14(金) 128 81 90   9/16(日) 111 69 91   9/18(火) 119 75 87   9/19(水) 112 69 75   9/22(土) 113 75 98   9/25(火) 108 72 97   9/28(金) 124 80 86   9/29(土) 127 73 85    ※運動前に測定","link":"https://masutaka.net/2012-10-03-1/","isoDate":"2012-10-03T00:00:00.000Z","dateMiliSeconds":1349222400000,"authorName":"masutaka"},{"title":"映画『どろろ』は普通に楽しめた","content":" 2007年の映画だったんですね。普通に楽しめました。ゲーム版\n[2011-02-11-5] と似た退廃的で貧しい雰囲気がよく出ていたと思います。\nWikipediaによると ロケはニュージーランドで行われたとのこと。その点\n意外でした。\n柴咲コウのどろろは私は好きだなあ。魔神もゲーム版と似ていて違和感を\n感じませんでした。唯一、ウルトラ怪獣みたいな魔神には、ん？と思いま\nしたがw\n ","contentSnippet":"2007年の映画だったんですね。普通に楽しめました。ゲーム版[2011-02-11-5] と似た退廃的で貧しい雰囲気がよく出ていたと思います。Wikipediaによると ロケはニュージーランドで行われたとのこと。その点意外でした。柴咲コウのどろろは私は好きだなあ。魔神もゲーム版と似ていて違和感を感じませんでした。唯一、ウルトラ怪獣みたいな魔神には、ん？と思いましたがw","link":"https://masutaka.net/2012-09-30-1/","isoDate":"2012-09-30T00:00:00.000Z","dateMiliSeconds":1348963200000,"authorName":"masutaka"},{"title":"2012年8月は11回ジムに行きました #クイックシェイプ","content":"2012年8月の記録 9月ももう終わりに近づいてきましたが、先月分の記録です。\n7月終わりに入会したので[2012-07-29-1] 、7月の分も書きました。\n   日付 最高血圧 最低血圧 脈拍     7/31(火) 120 64 93   8/ 2(木) 126 79 -   8/ 3(金) 124 76 -   8/ 5(日) 116 72 90   8/ 8(水) 114 73 83   8/ 9(木) 125 87 89   8/10(金) 126 75 88   8/21(火) 134 89 90   8/23(木) 118 76 83   8/26(日) 121 74 83   8/28(火) 104 73 90   8/31(金) 115 71 80    ※運動前に測定","contentSnippet":"2012年8月の記録 9月ももう終わりに近づいてきましたが、先月分の記録です。7月終わりに入会したので[2012-07-29-1] 、7月の分も書きました。   日付 最高血圧 最低血圧 脈拍     7/31(火) 120 64 93   8/ 2(木) 126 79 -   8/ 3(金) 124 76 -   8/ 5(日) 116 72 90   8/ 8(水) 114 73 83   8/ 9(木) 125 87 89   8/10(金) 126 75 88   8/21(火) 134 89 90   8/23(木) 118 76 83   8/26(日) 121 74 83   8/28(火) 104 73 90   8/31(金) 115 71 80    ※運動前に測定","link":"https://masutaka.net/2012-09-21-1/","isoDate":"2012-09-21T00:00:00.000Z","dateMiliSeconds":1348185600000,"authorName":"masutaka"},{"title":"EmacsからMacの辞書をお手軽に使う","content":"この記事の最近の状況。\n[2011-05-18-1] Emacs で Mac の辞書を sdic っぽく使う\nどうも最近、commandline-dictionary-appの呼び出しに時間がかかります。\nあと、Mountain LIONにバージョンアップしてから、\ncommandline-dictionary-appがこんな警告を吐くようになりました。検索\nは出来ますけどね。\ndict(6389,0x7fff7c6d6180) malloc: reference count underflow for 0x4001a1660, break on auto_refcount_underflow_error to debug. そんなわけでEmacsでコピーしてMacの辞書に貼り付けて調べるという、\n非生産的なことをしていました&hellip;。\n@elim によると dict:// に渡せばブラウザからMacの辞書を呼び出せるし、\nbrowse-url()使えばEmacsからも呼び出せるとのこと。\n→dotemacs/init-dictionary.el at master · elim/dotemacs 個人的にはwordがいきなり辞書に渡されるより、ミニバッファでワンクッ\nション置きたかったので、前回のコード を改良してみました。\n M-x my-dictionaryすると、カーソル下の単語がミニバッファに表示されま\nす。ReturnするとMacの辞書にフォーカスを移しつつ検索します。C-uを付\nけるとsdicで検索します。C-uC-uを付けるとcommandline-dictionary-app\nで検索します。\nなかなか良い感じ☆\nP.S.\nsdicインストールしてない人はsdic-read-from-minibuffer()を\nread-from-minibuffer()に置き換えれば良いです。","contentSnippet":"この記事の最近の状況。[2011-05-18-1] Emacs で Mac の辞書を sdic っぽく使うどうも最近、commandline-dictionary-appの呼び出しに時間がかかります。あと、Mountain LIONにバージョンアップしてから、commandline-dictionary-appがこんな警告を吐くようになりました。検索は出来ますけどね。dict(6389,0x7fff7c6d6180) malloc: reference count underflow for 0x4001a1660, break on auto_refcount_underflow_error to debug. そんなわけでEmacsでコピーしてMacの辞書に貼り付けて調べるという、非生産的なことをしていました…。@elim によると dict:// に渡せばブラウザからMacの辞書を呼び出せるし、browse-url()使えばEmacsからも呼び出せるとのこと。→dotemacs/init-dictionary.el at master · elim/dotemacs 個人的にはwordがいきなり辞書に渡されるより、ミニバッファでワンクッション置きたかったので、前回のコード を改良してみました。 M-x my-dictionaryすると、カーソル下の単語がミニバッファに表示されます。ReturnするとMacの辞書にフォーカスを移しつつ検索します。C-uを付けるとsdicで検索します。C-uC-uを付けるとcommandline-dictionary-appで検索します。なかなか良い感じ☆P.S.sdicインストールしてない人はsdic-read-from-minibuffer()をread-from-minibuffer()に置き換えれば良いです。","link":"https://masutaka.net/2012-09-17-1/","isoDate":"2012-09-17T00:00:00.000Z","dateMiliSeconds":1347840000000,"authorName":"masutaka"},{"title":"simplenoteやめました！","content":"今日からsimplenote を使うのを止めて、Mountain Lionから追加された標準\nアプリ「メモ」に乗り換えました。\nなぜ乗り換えたのか？ simplenoteはWeb、iPhone 、Emacs から編集できて便利なのですが、どうも\n最近調子がよくありません。Web版は以前よりログインに時間がかかる気が\nしますし、時々同じファイルがいくつも出来ることがあります。\nそんなわけで乗り換え先を探していたところ、Mountain LionからiPhoneの\nメモが同期出来ることを知りました。\nメモ: iPhone/iPad とメモを同期できるMac標準アプリが登場【Mountain Lion】 - iPhoneアプリのAppBank iPhone4を手に入れた頃はこのメモアプリを使っていたのですが、最大の短\n所はiPhoneでしか編集出来ないこと。それが今回改善されたわけです。\n悪くなったことはないの？ Emacsからは編集できなくなりました。でもコピペすれば良いだけなのであ\nまり困っていません。\nまとめ simplenoteからAppleの「メモ」に乗り換えました。\n居心地の良い監獄は最高です。","contentSnippet":"今日からsimplenote を使うのを止めて、Mountain Lionから追加された標準アプリ「メモ」に乗り換えました。なぜ乗り換えたのか？ simplenoteはWeb、iPhone 、Emacs から編集できて便利なのですが、どうも最近調子がよくありません。Web版は以前よりログインに時間がかかる気がしますし、時々同じファイルがいくつも出来ることがあります。そんなわけで乗り換え先を探していたところ、Mountain LionからiPhoneのメモが同期出来ることを知りました。メモ: iPhone/iPad とメモを同期できるMac標準アプリが登場【Mountain Lion】 - iPhoneアプリのAppBank iPhone4を手に入れた頃はこのメモアプリを使っていたのですが、最大の短所はiPhoneでしか編集出来ないこと。それが今回改善されたわけです。悪くなったことはないの？ Emacsからは編集できなくなりました。でもコピペすれば良いだけなのであまり困っていません。まとめ simplenoteからAppleの「メモ」に乗り換えました。居心地の良い監獄は最高です。","link":"https://masutaka.net/2012-09-09-1/","isoDate":"2012-09-09T00:00:00.000Z","dateMiliSeconds":1347148800000,"authorName":"masutaka"},{"title":"このブログがインターネット上から消えていました","content":"http://dlvr.it/ からの通知で気づいたのですが、このブログが1日半ほど\nインターネット上から消えていました。\nOSXをMountain Lionにバージョンアップしたら、Perlのバージョンが上が\nり、HTML::Templateがなくなったことが原因でした。\nCPANからインストールして解決しました。\ncpanの使い方の整理 « taichino.com このブログはChangeLogメモという1つのテキストファイルから、chalow と\nいう変換ツールを使いhtmlに変換しています。\nこの作業を自動化した自作のmkchalowスクリプトの作りが甘かった。。自\n分しか使わないツールと言えども、エラー処理はちゃんとした方が良いで\nすね。ブログが生きているかのチェックも。\nちなみにChangeLogメモを始めたのはこの記事がきっかけです。\n[2001-12-30-1] から書き続けていて、23,000行になりました。\n横着プログラミング 第1回: Unixのメモ技術 最近はEvernoteに全部まとめる人が多いみたいですが、技術者だったら絶\n対ChangeLogメモの方が良いですよ。手に馴染んだエディタが使えるし、整\n理する必要がないので。\nただchalowを使うかは微妙なところかも。やはり全てを自分が面倒見るの\nで、時間がないとなかなかメンテしきれません。ChangeLogをWordpressと\nかTumblrにインポート出来れば良いのですが。それも時間が..w","contentSnippet":"http://dlvr.it/ からの通知で気づいたのですが、このブログが1日半ほどインターネット上から消えていました。OSXをMountain Lionにバージョンアップしたら、Perlのバージョンが上がり、HTML::Templateがなくなったことが原因でした。CPANからインストールして解決しました。cpanの使い方の整理 « taichino.com このブログはChangeLogメモという1つのテキストファイルから、chalow という変換ツールを使いhtmlに変換しています。この作業を自動化した自作のmkchalowスクリプトの作りが甘かった。。自分しか使わないツールと言えども、エラー処理はちゃんとした方が良いですね。ブログが生きているかのチェックも。ちなみにChangeLogメモを始めたのはこの記事がきっかけです。[2001-12-30-1] から書き続けていて、23,000行になりました。横着プログラミング 第1回: Unixのメモ技術 最近はEvernoteに全部まとめる人が多いみたいですが、技術者だったら絶対ChangeLogメモの方が良いですよ。手に馴染んだエディタが使えるし、整理する必要がないので。ただchalowを使うかは微妙なところかも。やはり全てを自分が面倒見るので、時間がないとなかなかメンテしきれません。ChangeLogをWordpressとかTumblrにインポート出来れば良いのですが。それも時間が..w","link":"https://masutaka.net/2012-09-07-1/","isoDate":"2012-09-07T00:00:00.000Z","dateMiliSeconds":1346976000000,"authorName":"masutaka"},{"title":"Agile渋谷Emacs勉強会に参加してきた #Agile渋谷","content":"７月に東京に引っ越してきて、早３回目の勉強会。\nそろそろ何もない週末が欲しい&hellip;w\nさて、そうは言っても東京で何年ぶりかに開催されたEmacsのイベント。\n@mori_dev さんはじめ、お初にお目にかかれた方が何人もいて、楽しい時\n間を過ごせました。\n最近は勉強会ではなるべくメモを取らずに、イベントを楽しむようにして\nいるので、思い出したまま書いていきます。\n個人的に一番面白かったのは、@inoue_ariel さんの「Emacsのバッファの\n内部実装について 」。Emacsと言えばギャップバッファ、ギャップバッファ\nと言えばEmacsというのはもちろん、ギャップバッファという名前自体初め\nて聞きました。しかし、memcopy()のコストがあれほど低いのにはビックリ\nです。最近のCPUはキャッシュの容量が増えてるのが要因なんでしょうか。\nでもギャップバッファって昔から使っているのですよねえ。。\nEmacsのソースコードは [2010-06-19-2] で、その変態性を認識したことが\nありますが、この時の記事も井上さんじゃないですか！(やべっ！深夜に鳥\n肌立った！)2010年当時は組み込み業界で働いていたこともあり、アリエル\nも、アリエルの井上さんも存じ上げなかったのですが、自分の中で今繋が\nりました。\n(衝撃的すぎて、何も思い出せなくなってしまった。。)\nさて、私もLTやりました。\n 内容はegg.elとgit-dwin.elの紹介です。自分のまわりで、コマンドライン\nからgitを使っている人が意外に多いので、発表することになりました。\n頑張ってEmacsで全部やる必要はないけど、結構簡単に楽できるから、まあ\nゆるく使おうよ。そんな内容です。\n当日の夕方近くに急にやることが決まったので資料をちゃちゃっと作り、\nまあ5分なんて余裕でしょ。なんて思っていたら大失敗w 発表用の画面操作\nに手間取るわ、実演用のEmacsはミニバッファが見えないわ、時間は足りな\nいわでさんざんでした。さらには腹が減りすぎて、手がぷるぷる震える始\n末。よく考えたらLTやるのは初めてでした。次回に生かしたいと思います。。。","contentSnippet":"７月に東京に引っ越してきて、早３回目の勉強会。そろそろ何もない週末が欲しい…wさて、そうは言っても東京で何年ぶりかに開催されたEmacsのイベント。@mori_dev さんはじめ、お初にお目にかかれた方が何人もいて、楽しい時間を過ごせました。最近は勉強会ではなるべくメモを取らずに、イベントを楽しむようにしているので、思い出したまま書いていきます。個人的に一番面白かったのは、@inoue_ariel さんの「Emacsのバッファの内部実装について 」。Emacsと言えばギャップバッファ、ギャップバッファと言えばEmacsというのはもちろん、ギャップバッファという名前自体初めて聞きました。しかし、memcopy()のコストがあれほど低いのにはビックリです。最近のCPUはキャッシュの容量が増えてるのが要因なんでしょうか。でもギャップバッファって昔から使っているのですよねえ。。Emacsのソースコードは [2010-06-19-2] で、その変態性を認識したことがありますが、この時の記事も井上さんじゃないですか！(やべっ！深夜に鳥肌立った！)2010年当時は組み込み業界で働いていたこともあり、アリエルも、アリエルの井上さんも存じ上げなかったのですが、自分の中で今繋がりました。(衝撃的すぎて、何も思い出せなくなってしまった。。)さて、私もLTやりました。 内容はegg.elとgit-dwin.elの紹介です。自分のまわりで、コマンドラインからgitを使っている人が意外に多いので、発表することになりました。頑張ってEmacsで全部やる必要はないけど、結構簡単に楽できるから、まあゆるく使おうよ。そんな内容です。当日の夕方近くに急にやることが決まったので資料をちゃちゃっと作り、まあ5分なんて余裕でしょ。なんて思っていたら大失敗w 発表用の画面操作に手間取るわ、実演用のEmacsはミニバッファが見えないわ、時間は足りないわでさんざんでした。さらには腹が減りすぎて、手がぷるぷる震える始末。よく考えたらLTやるのは初めてでした。次回に生かしたいと思います。。。","link":"https://masutaka.net/2012-08-26-1/","isoDate":"2012-08-26T00:00:00.000Z","dateMiliSeconds":1345939200000,"authorName":"masutaka"},{"title":"Gmail に来た全てのメールをスパム判定しないフィルタリングルール","content":"「条件」に from:(@) を指定し、「処理」に「迷惑メールにしない」を\n指定するだけ。\nFrom がないメールは条件に一致しませんが、さすがに無視できる数でしょう。\nGmail の転送機能って、転送する前にスパム判定するのですよね。\nGmail から Gmail に転送していると、二重にスパム判定することになり、\nたまに誤判定されるので設定しています。\n追記(2012-11-10):\nfrom:(.*) はダメでした。実際に検索して、全てのスレッドが引っかかる\nか試せば分かることでしたね。。検索条件を from:(@) に変えました。\nこれなら大丈夫なはず。\n追記(2013-03-28):\nhttp://ziddy.japan.zdnet.com/qa8009043.html で引用されていたので追\n記。from:(@) でもダメなことがありました。半年で4件程度。完璧な方法\nはないのかしら。。","contentSnippet":"「条件」に from:(@) を指定し、「処理」に「迷惑メールにしない」を指定するだけ。From がないメールは条件に一致しませんが、さすがに無視できる数でしょう。Gmail の転送機能って、転送する前にスパム判定するのですよね。Gmail から Gmail に転送していると、二重にスパム判定することになり、たまに誤判定されるので設定しています。追記(2012-11-10):from:(.*) はダメでした。実際に検索して、全てのスレッドが引っかかるか試せば分かることでしたね。。検索条件を from:(@) に変えました。これなら大丈夫なはず。追記(2013-03-28):http://ziddy.japan.zdnet.com/qa8009043.html で引用されていたので追記。from:(@) でもダメなことがありました。半年で4件程度。完璧な方法はないのかしら。。","link":"https://masutaka.net/2012-08-06-2/","isoDate":"2012-08-06T01:00:00.000Z","dateMiliSeconds":1344214800000,"authorName":"masutaka"},{"title":"LL Decade は元組み込みプログラマーでも楽しめるイベントだった #lldecade","content":"この記事 で開催を知った LL Decade 。LL はおろか、Decade の単語の意味\nも知らなかった元組み込みプログラマー、現 Web プログラマーですが、予\n想以上に楽しめるイベントでした。\nしかし暑かった。予定どおり汗だくで会場に到着。今回は机がなかったの\nで MacBookAir は使わず、iPhone に軽くメモりながら純粋に楽しむことに\n専念。\n基調講演で初めて @miyagawa 氏を拝見。手錠をはめられてプログラミン\nグ..の下りが印象に残りました。PHP は知れば知るほど変態言語で、第一\n印象よりかなり好きになりましたが、私も手錠をはめられている感じはす\nるのですよね&hellip;。\n意外だったのは今まで Python に全く関わらずに生きてきたのに、\nLanguage Update Decadev で話を聞いて、やってみようかなと思ったこと。\nLL イベントは各言語をつまみ食い出来るので、組み込みなど別な分野の人\nが参加しても楽しめますね。今回はまつもとさんの mruby の話も熱かった\nですし。\n先週の Jenkins ユーザ・カンファレンスの熱が残っているのか、CI の話\nもセッションまるまる使われていました。まあでも CI は各言語やフレー\nムワークに共通する内容は薄いので、CakePHP2 と Jenkins みたいにドン\nピシャの話が聞きたいですね。それは個々の勉強会でやることか。。あ、\nもちろん各トークは面白かったです。 @yamashiro さんの話は特に。\nJsTestDriver いいかもと思ったけど、複数サーバが必要なのは残念でした。\nJavascript が機械語という解釈は今回一番面白かった。すなわち永遠に生\nき続ける。確かに各ブラウザ対応を考えると素で書くのはしんどい。アセ\nンブラに対する C みたいに、今後はもっとしっくりと上に乗っかるとうれ\nしいですね。&gt; jQuery, JSX, CoffeeScript","contentSnippet":"この記事 で開催を知った LL Decade 。LL はおろか、Decade の単語の意味も知らなかった元組み込みプログラマー、現 Web プログラマーですが、予想以上に楽しめるイベントでした。しかし暑かった。予定どおり汗だくで会場に到着。今回は机がなかったので MacBookAir は使わず、iPhone に軽くメモりながら純粋に楽しむことに専念。基調講演で初めて @miyagawa 氏を拝見。手錠をはめられてプログラミング..の下りが印象に残りました。PHP は知れば知るほど変態言語で、第一印象よりかなり好きになりましたが、私も手錠をはめられている感じはするのですよね…。意外だったのは今まで Python に全く関わらずに生きてきたのに、Language Update Decadev で話を聞いて、やってみようかなと思ったこと。LL イベントは各言語をつまみ食い出来るので、組み込みなど別な分野の人が参加しても楽しめますね。今回はまつもとさんの mruby の話も熱かったですし。先週の Jenkins ユーザ・カンファレンスの熱が残っているのか、CI の話もセッションまるまる使われていました。まあでも CI は各言語やフレームワークに共通する内容は薄いので、CakePHP2 と Jenkins みたいにドンピシャの話が聞きたいですね。それは個々の勉強会でやることか。。あ、もちろん各トークは面白かったです。 @yamashiro さんの話は特に。JsTestDriver いいかもと思ったけど、複数サーバが必要なのは残念でした。Javascript が機械語という解釈は今回一番面白かった。すなわち永遠に生き続ける。確かに各ブラウザ対応を考えると素で書くのはしんどい。アセンブラに対する C みたいに、今後はもっとしっくりと上に乗っかるとうれしいですね。> jQuery, JSX, CoffeeScript","link":"https://masutaka.net/2012-08-06-1/","isoDate":"2012-08-06T00:00:00.000Z","dateMiliSeconds":1344211200000,"authorName":"masutaka"},{"title":"@nifty がパスワードを平文で保存していることが分かり、大変残念に思っている件","content":"先週フィリピンから帰ってきて、ようやく自宅のインターネット回線の契\n約に着手することが出来ました。\n神戸にいたときは会社の回線を使っており、この１年は自分のアカウント\nを「@nifty基本料金(旧お手軽1コース)」にして休眠状態にしてました。\n(月額262円。メールアドレスがまだ必要だったので。)\nネットで申し込んでも良かったのですが、ぶっちゃけ分かりづらいので電\n話で契約完了。本日「契約内容のご案内」の封書が届きました。\nよしよし、@nifty の ID は今までのやつだね。あれ？ログインパスワード\nに見覚えのある文字列が。。これ、いつも使っているオレのパスワードやん！\n@nifty さんはパスワードを平文で保存していらっしゃるようです&hellip;。\n思えば十数年前、初めて買ったパソコンが FMV-5100C3 だった流れで始め\nた NIFTY-Serve。その後 33600bps の高速モデムを手に入れ、Infoweb に\n移行。気がついたら合併して、また nifty にカムバック。\n私のネット生活はある意味 nifty さんとともにあったわけですが、今回の\n件が分かってしまい大変残念です。今まで特に不具合もなく、快適に使っ\nていただけに..。\n会社の回線は神戸の時も nifty でしたし、東京に移転しても nifty。おま\nけに先週、実家の回線も nifty を新規に申し込んだばかりでした。二重に\nも三重にも残念な出来事でした。はぁ。","contentSnippet":"先週フィリピンから帰ってきて、ようやく自宅のインターネット回線の契約に着手することが出来ました。神戸にいたときは会社の回線を使っており、この１年は自分のアカウントを「@nifty基本料金(旧お手軽1コース)」にして休眠状態にしてました。(月額262円。メールアドレスがまだ必要だったので。)ネットで申し込んでも良かったのですが、ぶっちゃけ分かりづらいので電話で契約完了。本日「契約内容のご案内」の封書が届きました。よしよし、@nifty の ID は今までのやつだね。あれ？ログインパスワードに見覚えのある文字列が。。これ、いつも使っているオレのパスワードやん！@nifty さんはパスワードを平文で保存していらっしゃるようです…。思えば十数年前、初めて買ったパソコンが FMV-5100C3 だった流れで始めた NIFTY-Serve。その後 33600bps の高速モデムを手に入れ、Infoweb に移行。気がついたら合併して、また nifty にカムバック。私のネット生活はある意味 nifty さんとともにあったわけですが、今回の件が分かってしまい大変残念です。今まで特に不具合もなく、快適に使っていただけに..。会社の回線は神戸の時も nifty でしたし、東京に移転しても nifty。おまけに先週、実家の回線も nifty を新規に申し込んだばかりでした。二重にも三重にも残念な出来事でした。はぁ。","link":"https://masutaka.net/2012-07-31-1/","isoDate":"2012-07-31T00:00:00.000Z","dateMiliSeconds":1343692800000,"authorName":"masutaka"},{"title":"クイックシェイプに再入会しました！ #クイックシェイプ","content":"今月からオフィスが神戸から東京に移転した関係で、私自身も関東に戻っ\nて参りました。\nそのオフィスのすぐ近くに、ホントに偶然クイックシェイプ があったので、\n念願の再入会を果たすことが出来ました。本当にうれしい。\n6/4 にアパートの内覧で初めて下高井戸に降り立った時、早く始めたい気\n分でいっぱいでしたが、引っ越し後すぐのフィリピン出張も終わったし、\n引っ越しのもろもろの雑用も片付いてきたので、ようやく始められます。\n去年の４月に神戸に引っ越す関係で退会したので、１年３ヶ月ぶりの復帰\nとなります。\nさっそく一周 今日が初日というか初めて下高井戸店に来たので、まずは体験で一周。店\n内には聞き覚えのある音楽、モニターには見覚えのあるコーチの方々。\nそのあと軽く説明を受け、即入会しました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  現金は本当にたまたま持っていたんですが、銀行印はもちろんこのために\n持って来てましたw コーチも準備の良さに驚いていましたw\n支払い方法がちょっと変わってた 多分ですが、支払いの方法が以前とちょっと変わっていました。\nベーシック会員 … 月々6,300円、入会時に２ヶ月分を前払い。\nスタンダード会員 … 月々5,250円、入会時に６ヶ月分を前払い。\nバリュー会員 … 月々4,812円、入会時に１２ヶ月分を前払い。\nとりあえずスタンダード会員になりました。一括払い期間が終わったあと\n(つまり半年後)、希望すれば他のコースに変更することも出来るとのこと。\nその他、入会時の事務手数料が2,100円。キャンペーン中とのことで入会金\nはなしでした(前もそうだったような..)。\n入会手続き後、もう一周して帰路につきました。\n武蔵新城店と下高井戸店の違い 下高井戸店は武蔵新城店よりやや狭く、一周は 11 分とのこと(武蔵新城店\nは 15 分だったかな)。サンドバックがなく、エアボードの数も少ないです。\nまあでも手軽に出来るのは最大の魅力なので、最初は何も考えず毎日行く\n予定です。習慣化のためには、思考停止して毎日やるのが一番ですからね。\nとか言いつつ、今日は Jenkins ユーザカンファレンス 、明日は下高井戸店\nはお休みなので、初日は火曜日になります&hellip;。","contentSnippet":"今月からオフィスが神戸から東京に移転した関係で、私自身も関東に戻って参りました。そのオフィスのすぐ近くに、ホントに偶然クイックシェイプ があったので、念願の再入会を果たすことが出来ました。本当にうれしい。6/4 にアパートの内覧で初めて下高井戸に降り立った時、早く始めたい気分でいっぱいでしたが、引っ越し後すぐのフィリピン出張も終わったし、引っ越しのもろもろの雑用も片付いてきたので、ようやく始められます。去年の４月に神戸に引っ越す関係で退会したので、１年３ヶ月ぶりの復帰となります。さっそく一周 今日が初日というか初めて下高井戸店に来たので、まずは体験で一周。店内には聞き覚えのある音楽、モニターには見覚えのあるコーチの方々。そのあと軽く説明を受け、即入会しました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  現金は本当にたまたま持っていたんですが、銀行印はもちろんこのために持って来てましたw コーチも準備の良さに驚いていましたw支払い方法がちょっと変わってた 多分ですが、支払いの方法が以前とちょっと変わっていました。ベーシック会員 … 月々6,300円、入会時に２ヶ月分を前払い。スタンダード会員 … 月々5,250円、入会時に６ヶ月分を前払い。バリュー会員 … 月々4,812円、入会時に１２ヶ月分を前払い。とりあえずスタンダード会員になりました。一括払い期間が終わったあと(つまり半年後)、希望すれば他のコースに変更することも出来るとのこと。その他、入会時の事務手数料が2,100円。キャンペーン中とのことで入会金はなしでした(前もそうだったような..)。入会手続き後、もう一周して帰路につきました。武蔵新城店と下高井戸店の違い 下高井戸店は武蔵新城店よりやや狭く、一周は 11 分とのこと(武蔵新城店は 15 分だったかな)。サンドバックがなく、エアボードの数も少ないです。まあでも手軽に出来るのは最大の魅力なので、最初は何も考えず毎日行く予定です。習慣化のためには、思考停止して毎日やるのが一番ですからね。とか言いつつ、今日は Jenkins ユーザカンファレンス 、明日は下高井戸店はお休みなので、初日は火曜日になります…。","link":"https://masutaka.net/2012-07-29-1/","isoDate":"2012-07-29T00:00:00.000Z","dateMiliSeconds":1343520000000,"authorName":"masutaka"},{"title":"引っ越しの一括見積もりサービスを使ったら大変なことになった","content":"日通さんに普通に見積もりに来てもらうことになった後、他も確認してみ\nるか〜と、一括見積もりサービスを使ってみた。\n引越し費用比較は「引越料金.jp」一括見積もりで格安相場が分かる！ 数秒後１０通くらいメールが来て、やや引き。\n１分後最初の引っ越し屋さんから営業電話。さすが早いなあと感心しなが\nら電話を取る。聞いたことないとこだったけど、見積もりに来てもらうこ\nとに。\nそして５分後..\n電話がひっきりなしにかかってきてドン引き。。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  １時間半経った今、全部で２０件着信がありました。","contentSnippet":"日通さんに普通に見積もりに来てもらうことになった後、他も確認してみるか〜と、一括見積もりサービスを使ってみた。引越し費用比較は「引越料金.jp」一括見積もりで格安相場が分かる！ 数秒後１０通くらいメールが来て、やや引き。１分後最初の引っ越し屋さんから営業電話。さすが早いなあと感心しながら電話を取る。聞いたことないとこだったけど、見積もりに来てもらうことに。そして５分後..電話がひっきりなしにかかってきてドン引き。。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  １時間半経った今、全部で２０件着信がありました。","link":"https://masutaka.net/2012-07-03-1/","isoDate":"2012-07-03T00:00:00.000Z","dateMiliSeconds":1341273600000,"authorName":"masutaka"},{"title":"「以後気をつけます。」","content":"前職のころから気になっていました。「以後気をつけます。」\nこのフレーズ、私は使った記憶がありません。いや、使ったことはあるか\nもしれませんが、よほどのことがない限り使わないです。なんでかと言う\nと「以後気をつける」ことって、めちゃめちゃ大変だからです。\n例えば今日何かミスをして「以後気をつけます」と言ったとします。\nあなたは「以後気をつける」ことを 1 つ抱えます。\n３日後に別件でミスをして、また「以後気をつけます」と言ったとします。\nあなたの「以後気をつける」ことが 2 つになりました。\n一週間後に..(略)\nこのまま続くと「以後気をつける」ことが溜まりすぎて、本来やるべきこ\nとに集中できません。ギブアップです。まあ実際は「以後気をつける」の\nは忘却の彼方に行くのでしょう。\n重要なのは「以後気をつける」必要がないような仕組みを作ることです。\nもちろん頻度が少なければ、作らないのもアリです。その都度、自分のア\nタマで考えないといけませんね。","contentSnippet":"前職のころから気になっていました。「以後気をつけます。」このフレーズ、私は使った記憶がありません。いや、使ったことはあるかもしれませんが、よほどのことがない限り使わないです。なんでかと言うと「以後気をつける」ことって、めちゃめちゃ大変だからです。例えば今日何かミスをして「以後気をつけます」と言ったとします。あなたは「以後気をつける」ことを 1 つ抱えます。３日後に別件でミスをして、また「以後気をつけます」と言ったとします。あなたの「以後気をつける」ことが 2 つになりました。一週間後に..(略)このまま続くと「以後気をつける」ことが溜まりすぎて、本来やるべきことに集中できません。ギブアップです。まあ実際は「以後気をつける」のは忘却の彼方に行くのでしょう。重要なのは「以後気をつける」必要がないような仕組みを作ることです。もちろん頻度が少なければ、作らないのもアリです。その都度、自分のアタマで考えないといけませんね。","link":"https://masutaka.net/2012-06-29-2/","isoDate":"2012-06-29T01:00:00.000Z","dateMiliSeconds":1340931600000,"authorName":"masutaka"},{"title":"受託開発から自サービス開発に移って気づいたことメモ","content":"[2011-04-22-1] に受託開発から自サービス開発に移って、１年ちょっと過\nぎました。今さらながら気づいたことがあったので、ちょっとメモ。\n受託開発は契約が無事決まるとやるべき作業や予算が決まる。どのくらい\n開発リソースを使えるかが分かるので、その範囲内で新規実装やメンテナ\nンスなどをする。基本的には他の案件は発生しないが、この案件は○○に\n含まれるよねなどと、契約の範囲内で対応を要望されることはよくある。\nプロジェクト開始時の要件定義が重要。どちらかと言うとウォーターフォー\nル型開発と相性が良い。\n自サービス開発はやるべき作業が決まっても、どこからも予算(お金)は降\nりてこない。昨日決まったことが今日覆ったり、なくなったり、全然違う\n急ぎの作業を要望されることは日常茶飯事。サービスをリリースしないと\n売り上げが分からないので、極力小規模で開発することが重要。受託開発\nと同様、中長期的なスケジュールは立てる必要はあるが、状況は刻々と変\nわるため、よりこまめな更新が必要。アジャイル開発と相性が良いという\nか、それしか選択肢がない。\n※ 受託開発の時はそこそこの規模の会社(300人くらい)で、自サービス開\n発は零細企業(開発者数人)なので、その辺の違いもあります。","contentSnippet":"[2011-04-22-1] に受託開発から自サービス開発に移って、１年ちょっと過ぎました。今さらながら気づいたことがあったので、ちょっとメモ。受託開発は契約が無事決まるとやるべき作業や予算が決まる。どのくらい開発リソースを使えるかが分かるので、その範囲内で新規実装やメンテナンスなどをする。基本的には他の案件は発生しないが、この案件は○○に含まれるよねなどと、契約の範囲内で対応を要望されることはよくある。プロジェクト開始時の要件定義が重要。どちらかと言うとウォーターフォール型開発と相性が良い。自サービス開発はやるべき作業が決まっても、どこからも予算(お金)は降りてこない。昨日決まったことが今日覆ったり、なくなったり、全然違う急ぎの作業を要望されることは日常茶飯事。サービスをリリースしないと売り上げが分からないので、極力小規模で開発することが重要。受託開発と同様、中長期的なスケジュールは立てる必要はあるが、状況は刻々と変わるため、よりこまめな更新が必要。アジャイル開発と相性が良いというか、それしか選択肢がない。※ 受託開発の時はそこそこの規模の会社(300人くらい)で、自サービス開発は零細企業(開発者数人)なので、その辺の違いもあります。","link":"https://masutaka.net/2012-06-29-1/","isoDate":"2012-06-29T00:00:00.000Z","dateMiliSeconds":1340928000000,"authorName":"masutaka"},{"title":"プログラムは仕様通りに動いて当たり前","content":"去年の [2011-04-22-1] に組み込み系＆受託のお仕事から、Web 系＆自サー\nビス提供のお仕事に転職し改めて思ったので書き留めておきます。特定の\n個人を批判する記事ではないのであしからず..。\n何かサービスを作るときに、中身がぐちゃぐちゃでも動くプログラムに価\n値があることには全く同意します。私は０を１にするのは得意ではないの\nで、むしろ尊敬します。しかしそこで終わってしまってはそのサービスの\n将来は暗いでしょう。\nメンテナンス性の高いコードに！ サービスが安定稼働し始めたら、メンテナンス性の良いコードに変更して\nいく必要がありますし、新しく追加する機能も同じです。\n※ もっとも、緊急時は最小限の工数でできる変更を採用すべきですが、\nあとで絶対に適切な修正に改めなければいけません。\nその新しく追加する機能なんですが、私は実装して開発環境で意図通りに\n動いた時がスタートラインだと思っています。\nちゃんと動いた時がスタートライン そこからバグや重複、むだなコード、むだなコメントを減らし、いかにメ\nンテナンス性の良いコードにするか、集中して作り込みます。もちろんテ\nストも書きます。\n私はここがプログラマの腕の見せ所だと思ってますし、細かいこだわりを\n入れられたり、より良いやり方で作り込めると、何度も何度もコードを読\nみ直してニヤニヤしてしまいます。\nプログラムは仕様通りに動いて当たり前なので、プログラマとしてはメン\nテナス性の良さだとか、パフォーマンスだとかの付加価値を付けることが\n重要です。しょうもないバグは論外です。\nもうひとつ大事なのが、コミットにストーリー性を持たせることです。\nコミットにストーリー性を持たせる 私は最低でもインストール前に５回は変更を見直して、「本当にこの変更\nで良いのかな」「このコミットは２つに分けた方が良いな」とか「これと\nこれは同じコミットだろう」とかやってます。Git だとこれが容易なので、\nとっても便利です。最終的には２０回くらい見直していると思います。\n※ 平時はこのくらいやる習慣を付けることが重要です。ろくに確認しない\nことを習慣化してはいけません。\nインストール後は(当たり前ですが)、インストールした環境で正常に動作\nするかをチェックします。\nまあ、Jenkins で CI(継続的インテグレーション) やっているので、単体\nレベルでの動作はあまり気にしなくて良いのは助かります。\nまとめ 仕様通りに動くようにプログラムを作るのは、プログラマとして当然です。\nコードに付加価値を付けることが、自分への付加価値に繋がると信じてい\nます。\nおまけ 組み込み系でも Web 系でも「品質の良いコードを書く」ことについては同\nじでした。前職では数百人規模のプロジェクトに所属しており、自分要因\nでシステムが止まる恐ろしさは十分すぎるほど分かっているので、その点\nは良い経験でした。\nWeb 系だと新しいツールを使いやすかったり、テスト環境も構築しやすかっ\nたり、他社のプログラマーとの交流もしやすいので、プログラマーの幸福\n度は高いかも？","contentSnippet":"去年の [2011-04-22-1] に組み込み系＆受託のお仕事から、Web 系＆自サービス提供のお仕事に転職し改めて思ったので書き留めておきます。特定の個人を批判する記事ではないのであしからず..。何かサービスを作るときに、中身がぐちゃぐちゃでも動くプログラムに価値があることには全く同意します。私は０を１にするのは得意ではないので、むしろ尊敬します。しかしそこで終わってしまってはそのサービスの将来は暗いでしょう。メンテナンス性の高いコードに！ サービスが安定稼働し始めたら、メンテナンス性の良いコードに変更していく必要がありますし、新しく追加する機能も同じです。※ もっとも、緊急時は最小限の工数でできる変更を採用すべきですが、あとで絶対に適切な修正に改めなければいけません。その新しく追加する機能なんですが、私は実装して開発環境で意図通りに動いた時がスタートラインだと思っています。ちゃんと動いた時がスタートライン そこからバグや重複、むだなコード、むだなコメントを減らし、いかにメンテナンス性の良いコードにするか、集中して作り込みます。もちろんテストも書きます。私はここがプログラマの腕の見せ所だと思ってますし、細かいこだわりを入れられたり、より良いやり方で作り込めると、何度も何度もコードを読み直してニヤニヤしてしまいます。プログラムは仕様通りに動いて当たり前なので、プログラマとしてはメンテナス性の良さだとか、パフォーマンスだとかの付加価値を付けることが重要です。しょうもないバグは論外です。もうひとつ大事なのが、コミットにストーリー性を持たせることです。コミットにストーリー性を持たせる 私は最低でもインストール前に５回は変更を見直して、「本当にこの変更で良いのかな」「このコミットは２つに分けた方が良いな」とか「これとこれは同じコミットだろう」とかやってます。Git だとこれが容易なので、とっても便利です。最終的には２０回くらい見直していると思います。※ 平時はこのくらいやる習慣を付けることが重要です。ろくに確認しないことを習慣化してはいけません。インストール後は(当たり前ですが)、インストールした環境で正常に動作するかをチェックします。まあ、Jenkins で CI(継続的インテグレーション) やっているので、単体レベルでの動作はあまり気にしなくて良いのは助かります。まとめ 仕様通りに動くようにプログラムを作るのは、プログラマとして当然です。コードに付加価値を付けることが、自分への付加価値に繋がると信じています。おまけ 組み込み系でも Web 系でも「品質の良いコードを書く」ことについては同じでした。前職では数百人規模のプロジェクトに所属しており、自分要因でシステムが止まる恐ろしさは十分すぎるほど分かっているので、その点は良い経験でした。Web 系だと新しいツールを使いやすかったり、テスト環境も構築しやすかったり、他社のプログラマーとの交流もしやすいので、プログラマーの幸福度は高いかも？","link":"https://masutaka.net/2012-06-22-1/","isoDate":"2012-06-22T00:00:00.000Z","dateMiliSeconds":1340323200000,"authorName":"masutaka"},{"title":"git stash やめました！","content":"git stash は便利なんですけど、stash したのを忘れたり、egg 使ってい\nると pop しても消えなかったりするので、もう使わないことにしました。\ngitで現在の作業内容をクイックセーブする - アジャイルSEを目指すブログ この記事からヒントを得て、最近はオレオレ git qsave を使ってます。\n 見てのとおり、変更点を全部 commit しているだけです。\ngit reset &ndash;soft &lsquo;HEAD^1&rsquo; とかすれば commit 前の状態、つまり\nStaging の状態に戻ります。\nリセットしないであとで圧縮 commit しても良いですね。\ngit-qsave という名前で(git-qsave**.sh** じゃないですよ！)パスの通ったディ\nレクトリに置けば、git qsave で実行できます。","contentSnippet":"git stash は便利なんですけど、stash したのを忘れたり、egg 使っていると pop しても消えなかったりするので、もう使わないことにしました。gitで現在の作業内容をクイックセーブする - アジャイルSEを目指すブログ この記事からヒントを得て、最近はオレオレ git qsave を使ってます。 見てのとおり、変更点を全部 commit しているだけです。git reset –soft ‘HEAD^1’ とかすれば commit 前の状態、つまりStaging の状態に戻ります。リセットしないであとで圧縮 commit しても良いですね。git-qsave という名前で(git-qsave**.sh** じゃないですよ！)パスの通ったディレクトリに置けば、git qsave で実行できます。","link":"https://masutaka.net/2012-06-17-2/","isoDate":"2012-06-17T01:00:00.000Z","dateMiliSeconds":1339894800000,"authorName":"masutaka"},{"title":"Jenkins-CLI使わずに、リポジトリの変更をプッシュ通知する方法がやっと分かった","content":"git push したら、すぐにテストを実行して欲しいだけなんです。\nもう、ポーリング [2011-12-30-5] で新しい commit があるかチェック\nするのは嫌なんです。\nいや〜、Jenkins-CLI でやろうとしてかなりハマりました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  初心に返ってJenkins実践入門 読みましたが、Git には特に触れられておらず&hellip;。","contentSnippet":"git push したら、すぐにテストを実行して欲しいだけなんです。もう、ポーリング [2011-12-30-5] で新しい commit があるかチェックするのは嫌なんです。いや〜、Jenkins-CLI でやろうとしてかなりハマりました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  初心に返ってJenkins実践入門 読みましたが、Git には特に触れられておらず…。","link":"https://masutaka.net/2012-06-17-1/","isoDate":"2012-06-17T00:00:00.000Z","dateMiliSeconds":1339891200000,"authorName":"masutaka"},{"title":"Emacs の C-x h (mark-whole-buffer) を使うようになった 〜手癖は直せる〜","content":"loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  連投しようかと思いましたが、思い直してブログに書くことにしました。\nツイッターやるとそれなりに発散できますが、どこにも収束しませんからね。\n上のツイートでは M-&lt; とか書いてますけど、実は Esc-&lt; って打ってます。\n最初に触った Emacs(NEmacs(ver18.55)) は X など使えなかったので。\n手癖は直せる こういう手癖ってなかなか直せないと思いがちですが、そんなことないです。\n  半年ほど前、Return キーは Ctrl-m に、Tab キー Ctrl-i を打つように\n手癖を直しました。キータッチが少し速くなったと思います。(鬼軍曹.el さんありがとう！)\n  C-; や C-: を 1 行スクロールアップ/ダウンに割り当ててましたが、\nCommand-j,k に変更しました。右手小指の痛みが治りました。\n  メタキーを打ちやすいように、以下の設定で Command と Option を入れ\n替えてましたが、デフォルトの設定に戻しました。おかげで Emacs でも\nMac 特有のキーバインドを使えるようになったり、Super キーを積極的に\n使えるようになりました。\n  (setq mac-command-modifier &#39;meta) (setq mac-option-modifier &#39;super) 最初の 2 つは 10 年以上染みついた手癖です。最初は結構イライラしまし","contentSnippet":"loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  連投しようかと思いましたが、思い直してブログに書くことにしました。ツイッターやるとそれなりに発散できますが、どこにも収束しませんからね。上のツイートでは M-< とか書いてますけど、実は Esc-< って打ってます。最初に触った Emacs(NEmacs(ver18.55)) は X など使えなかったので。手癖は直せる こういう手癖ってなかなか直せないと思いがちですが、そんなことないです。  半年ほど前、Return キーは Ctrl-m に、Tab キー Ctrl-i を打つように手癖を直しました。キータッチが少し速くなったと思います。(鬼軍曹.el さんありがとう！)  C-; や C-: を 1 行スクロールアップ/ダウンに割り当ててましたが、Command-j,k に変更しました。右手小指の痛みが治りました。  メタキーを打ちやすいように、以下の設定で Command と Option を入れ替えてましたが、デフォルトの設定に戻しました。おかげで Emacs でもMac 特有のキーバインドを使えるようになったり、Super キーを積極的に使えるようになりました。  (setq mac-command-modifier 'meta) (setq mac-option-modifier 'super) 最初の 2 つは 10 年以上染みついた手癖です。最初は結構イライラしまし","link":"https://masutaka.net/2012-06-02-1/","isoDate":"2012-06-02T00:00:00.000Z","dateMiliSeconds":1338595200000,"authorName":"masutaka"},{"title":"PHPカンファレンス関西2012に参加してきました #phpkansai","content":"今まで参加した勉強会で一番実践的だったと思います。\nもちろん私にとって。\nとか言いつつ、20 分くらい遅刻してしまいましたw\nPHP5.3、PHP 5.4、次のPHP 第2回 関西PHP勉強会 [2011-11-26-3] で一度聞いてはいましたが、それで\nも知らないことは多々ありました。\nPHP5.3 レイト・スタティック・バインディングがサポートされた。static:: が\nC++ とかと同じように動作する。self::who じゃなくて static::who と\n書くと、継承先の who() が使われる。\ngoto がサポートされた。loop の中には入れない。\nクロージャがサポートされた。\nクラススコープ外で const を使えるようになった。define は APC 使った\n時に実行されてしまう。const はそうじゃないらしい。\n省略三項演算子がサポートされた。フォームのデフォルト値を処理するの\nに便利とのこと。さっそく試してみた。確かにこれは便利。\n// セットされていれば、その値が使われる。 $aaa = &#39;masutaka&#39;; $value = $aaa ?: &#39;aaa&#39;; var_dump($value); //=&gt; string(8) &#34;masutaka&#34; // されていなければ、デフォルト値(&#39;aaa&#39;)が使われる。 $aaa = 0; $value = $aaa ?: &#39;aaa&#39;; var_dump($value); //=&gt; string(3) &#34;aaa&#34; PHP5.4 Traits がサポートされた。早く使おう。\nClass が垂直再利用なのに対して、Traits は水平利用とのこと。なるほど。","contentSnippet":"今まで参加した勉強会で一番実践的だったと思います。もちろん私にとって。とか言いつつ、20 分くらい遅刻してしまいましたwPHP5.3、PHP 5.4、次のPHP 第2回 関西PHP勉強会 [2011-11-26-3] で一度聞いてはいましたが、それでも知らないことは多々ありました。PHP5.3 レイト・スタティック・バインディングがサポートされた。static:: がC++ とかと同じように動作する。self::who じゃなくて static::who と書くと、継承先の who() が使われる。goto がサポートされた。loop の中には入れない。クロージャがサポートされた。クラススコープ外で const を使えるようになった。define は APC 使った時に実行されてしまう。const はそうじゃないらしい。省略三項演算子がサポートされた。フォームのデフォルト値を処理するのに便利とのこと。さっそく試してみた。確かにこれは便利。// セットされていれば、その値が使われる。 $aaa = 'masutaka'; $value = $aaa ?: 'aaa'; var_dump($value); //=> string(8) \"masutaka\" // されていなければ、デフォルト値('aaa')が使われる。 $aaa = 0; $value = $aaa ?: 'aaa'; var_dump($value); //=> string(3) \"aaa\" PHP5.4 Traits がサポートされた。早く使おう。Class が垂直再利用なのに対して、Traits は水平利用とのこと。なるほど。","link":"https://masutaka.net/2012-05-13-3/","isoDate":"2012-05-13T02:00:00.000Z","dateMiliSeconds":1336874400000,"authorName":"masutaka"},{"title":"今見ているページをRTMに登録するブックマークレットを作った","content":"RTM(Remember The Milk)へページを簡単に登録するブックマークレット － エンジニアが作る最新ITブログ by DODA  ここにあるAdd to RTM!ブックマークレットだと、URLとか登録できないからいやなので、\nm.rememberthemilk.com経由で登録するブックマークレットを作って使っている。\n たしかに Add to RTM! ブックマークレットにはもう少し頑張って欲しいですね。\nってことで私も作りました。\njavascript:(function(){var%20cp=&#39;http://m.rememberthemilk.com/add?name=&#39;+document.title+ &#39;&amp;due=Today&amp;url=&#39;+document.location; var%20w=window.open(cp,&#39;addwindow&#39;,&#39;status=no,toolbar=no,width=475,height=260,resizable=yes&#39;); setTimeout(function(){w.focus();},500);})(); // 可読性を良くするために複数行にしています。ブックマーク登録時には 1 行にしてください。  サイトのタイトルをタスク名にセットしています。 期日は今日決めうちです。リストへの振り分けは後でやるからです。 サイトの URL を URL にセットしています。 フォーカスを「タスクを追加」に合わせたいのですが、よく分かりませんでした。  Opera をお使いの聡明な皆さんへ ブックマークに追加する時にニックネームを設定すると便利です。\n私は r にしました。\nShift-F2 -&gt; r の操作でこのブックマークレットのウィンドウが開きます。\n参考情報: Remember the Milkを便利に使う7つのツール｜Nomad Worker Style ","contentSnippet":"RTM(Remember The Milk)へページを簡単に登録するブックマークレット － エンジニアが作る最新ITブログ by DODA  ここにあるAdd to RTM!ブックマークレットだと、URLとか登録できないからいやなので、m.rememberthemilk.com経由で登録するブックマークレットを作って使っている。 たしかに Add to RTM! ブックマークレットにはもう少し頑張って欲しいですね。ってことで私も作りました。javascript:(function(){var%20cp='http://m.rememberthemilk.com/add?name='+document.title+ '&due=Today&url='+document.location; var%20w=window.open(cp,'addwindow','status=no,toolbar=no,width=475,height=260,resizable=yes'); setTimeout(function(){w.focus();},500);})(); // 可読性を良くするために複数行にしています。ブックマーク登録時には 1 行にしてください。  サイトのタイトルをタスク名にセットしています。 期日は今日決めうちです。リストへの振り分けは後でやるからです。 サイトの URL を URL にセットしています。 フォーカスを「タスクを追加」に合わせたいのですが、よく分かりませんでした。  Opera をお使いの聡明な皆さんへ ブックマークに追加する時にニックネームを設定すると便利です。私は r にしました。Shift-F2 -> r の操作でこのブックマークレットのウィンドウが開きます。参考情報: Remember the Milkを便利に使う7つのツール｜Nomad Worker Style","link":"https://masutaka.net/2012-05-13-2/","isoDate":"2012-05-13T01:00:00.000Z","dateMiliSeconds":1336870800000,"authorName":"masutaka"},{"title":"PHP の特殊メソッド __get(), __set()","content":"class に public な変数(プロパティ)を定義することは、オブジェクト指\n向のカプセル化の観点から論外ですが、private なプロパティを定義して、\nget_プロパティ名(), set_プロパティ名() とかを作るのもイケてなかった\nのですね。(薄々気づいてはいましたが&hellip;。)\nPHP には __get() と __set() という特殊メソッドがあります。\n例えば\n$myclass = new MyClass;\n$myclass-&gt;hoge = 1;\nの場合、定義していれば MyClass::__set() が呼ばれます。\n以下のように private なプロパティを定義し、__get(), __set() を介し\nてアクセス制御すると良いでしょう。このプロパティは読み取り専用、こ\nのプロパティは両方大丈夫とか。\nclass Post { private $title; private $content; private $author; private $comments; private $_getters = array(&#39;title&#39;, &#39;content&#39;, &#39;author&#39;, &#39;comments&#39;); private $_setters = array(&#39;title&#39;, &#39;content&#39;, &#39;author&#39;); public function __get($property) { if(in_array($property, $this-&gt;_getters)) { return $this-&gt;$property; } if(in_array($property, $this-&gt;_setters)) { throw new Exception(&#39;Property &#34;&#39; .","contentSnippet":"class に public な変数(プロパティ)を定義することは、オブジェクト指向のカプセル化の観点から論外ですが、private なプロパティを定義して、get_プロパティ名(), set_プロパティ名() とかを作るのもイケてなかったのですね。(薄々気づいてはいましたが…。)PHP には __get() と __set() という特殊メソッドがあります。例えば$myclass = new MyClass;$myclass->hoge = 1;の場合、定義していれば MyClass::__set() が呼ばれます。以下のように private なプロパティを定義し、__get(), __set() を介してアクセス制御すると良いでしょう。このプロパティは読み取り専用、このプロパティは両方大丈夫とか。class Post { private $title; private $content; private $author; private $comments; private $_getters = array('title', 'content', 'author', 'comments'); private $_setters = array('title', 'content', 'author'); public function __get($property) { if(in_array($property, $this->_getters)) { return $this->$property; } if(in_array($property, $this->_setters)) { throw new Exception('Property \"' .","link":"https://masutaka.net/2012-05-13-1/","isoDate":"2012-05-13T00:00:00.000Z","dateMiliSeconds":1336867200000,"authorName":"masutaka"},{"title":"第5回関西Emacsに参加してきました #kansai_emacs","content":"第3回、第4回[2011-10-11-1] に引き続き、今回も関西Emacsに参加してきました。3回目にしてようやく顔と名前が一致してきた気がする。。。\nまとめはこちらをどうぞ。\n= kansai-emacs #5 - ぺっくブログミラー@peccul = #kansai_emacs 5 終了 - ぺっくブログミラー@peccul 第５回関西Emacsまとめ - Togetter 始まる前に @tomoyaton @takaxp @sanryuu_ @shigemk2 で昼食。初めてお会いした @takaxp さんは、いかついアイコンとは真逆のナイスガイでした。\n  会場入りは少し遅れてしまいました。スミマセンデシタ。\nまずはいつもどおり、ポジションペーパーを使った自己紹介。\n @higaki さんのツイートがなにげに嬉しかったです。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  皆さんの発表を聞いて思ったんですが、ブログの記事で読むのと、発表を聴くのとでは、印象が全く変わるものですね。\n例えば flex-autopair.el の記事 は 4/1 に読んで、試さずにスルーしていたようです。でも当日は速攻インストールして試していましたw Emacs24 で動かなかったので、あとで調べてみようかな？\n=&gt; 対応して下さいました。 quickrun.el もちょいちょい使っているので、@syohex さんの生の発表を聞けて良かったです。PHP で CR(^M) が出力されてしまう件は、先ほど修正 して頂けました。ありがとうございます。","contentSnippet":"第3回、第4回[2011-10-11-1] に引き続き、今回も関西Emacsに参加してきました。3回目にしてようやく顔と名前が一致してきた気がする。。。まとめはこちらをどうぞ。= kansai-emacs #5 - ぺっくブログミラー@peccul = #kansai_emacs 5 終了 - ぺっくブログミラー@peccul 第５回関西Emacsまとめ - Togetter 始まる前に @tomoyaton @takaxp @sanryuu_ @shigemk2 で昼食。初めてお会いした @takaxp さんは、いかついアイコンとは真逆のナイスガイでした。  会場入りは少し遅れてしまいました。スミマセンデシタ。まずはいつもどおり、ポジションペーパーを使った自己紹介。 @higaki さんのツイートがなにげに嬉しかったです。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  皆さんの発表を聞いて思ったんですが、ブログの記事で読むのと、発表を聴くのとでは、印象が全く変わるものですね。例えば flex-autopair.el の記事 は 4/1 に読んで、試さずにスルーしていたようです。でも当日は速攻インストールして試していましたw Emacs24 で動かなかったので、あとで調べてみようかな？=> 対応して下さいました。 quickrun.el もちょいちょい使っているので、@syohex さんの生の発表を聞けて良かったです。PHP で CR(^M) が出力されてしまう件は、先ほど修正 して頂けました。ありがとうございます。","link":"https://masutaka.net/2012-04-30-1/","isoDate":"2012-04-30T00:00:00.000Z","dateMiliSeconds":1335744000000,"authorName":"masutaka"},{"title":"EMOBILE LTE を契約しました","content":"LITE(ライト)かと思ったら、LTE(エルティーイー)とのこと。\n  時々会社の UQ WiMAX ( WM3500R ) を借りて使ってましたが、面倒になっ\nたので個人で契約しました。端末は上の GL02P です。\nUQ WiMAX ではなくて EMOBILE LTE にした理由 やはり下り最大速度です。\nEMOBILE LTE (以下 EMOBILE) は 75Mbps、UQ WiMAX (以下 WiMAX) は\n40Mbps です。WiMAX でも遅くはありませんが、私はネットのスピードに\nこれで OK という上限はないと思っているので、これが決め手になりました。\n料金は大体同じです。EMOBILE は 3980円(2年縛り) のみ。WiMAX は 3980\n円(1年縛り) と 4480円(縛りなし) の 2 種類。\n通信エリアも WiMAX 優勢というわけでもなさそうです。WiMAX は首都圏に\n強いそうですが、EMOBILE も問題ないそうなので。むしろエリアの広さで\n言ったら、EMOBILE が優勢か。\nあと細かいところで EMOBILE がポイントを稼ぎました。\n すでに GL02P を使っている同じ会社の人曰く「結構良いですよ」 昔 ADSL を契約していたイー・アクセスの印象が良かった。 先週行った城崎温泉 [2012-04-22-1] では WiMAX が繋がらなかった。 イメージキャラクターがかわいいw てかこの人が AKB48 の板尾友美さんなのか。","contentSnippet":"LITE(ライト)かと思ったら、LTE(エルティーイー)とのこと。  時々会社の UQ WiMAX ( WM3500R ) を借りて使ってましたが、面倒になったので個人で契約しました。端末は上の GL02P です。UQ WiMAX ではなくて EMOBILE LTE にした理由 やはり下り最大速度です。EMOBILE LTE (以下 EMOBILE) は 75Mbps、UQ WiMAX (以下 WiMAX) は40Mbps です。WiMAX でも遅くはありませんが、私はネットのスピードにこれで OK という上限はないと思っているので、これが決め手になりました。料金は大体同じです。EMOBILE は 3980円(2年縛り) のみ。WiMAX は 3980円(1年縛り) と 4480円(縛りなし) の 2 種類。通信エリアも WiMAX 優勢というわけでもなさそうです。WiMAX は首都圏に強いそうですが、EMOBILE も問題ないそうなので。むしろエリアの広さで言ったら、EMOBILE が優勢か。あと細かいところで EMOBILE がポイントを稼ぎました。 すでに GL02P を使っている同じ会社の人曰く「結構良いですよ」 昔 ADSL を契約していたイー・アクセスの印象が良かった。 先週行った城崎温泉 [2012-04-22-1] では WiMAX が繋がらなかった。 イメージキャラクターがかわいいw てかこの人が AKB48 の板尾友美さんなのか。","link":"https://masutaka.net/2012-04-22-2/","isoDate":"2012-04-22T01:00:00.000Z","dateMiliSeconds":1335056400000,"authorName":"masutaka"},{"title":"次世代開発手法『温泉駆動開発』のご紹介","content":"先日ご紹介した『フィリピン駆動開発』[2012-03-30-1] は、導入障壁が高\nいことに気づきました。そこで、より導入障壁の低い『温泉駆動開発』を\n紹介したいと思います。\n先週の水〜金に城崎温泉(きのさきおんせん) に行ってきました。\n兵庫県の日本海側、京都府との境に近いところにあります。\n道中のコンビニで撮影。いい感じの田舎具合です。\n  昼食のため出石 で停車。萩に少し似た城下町でした。こういう町並みは好\nきですね。\n  誰？\n  この辺は皿そばが有名とのこと。1 人前 5 皿です。記念品がもらえるとの\nことだったので、5 人中 3 人が 20 皿完食しました。私ももちろん完食。\n  もらった記念品。肝心の皿数が書いてありません。\n  城崎温泉の宿に到着。\n  1 日目は内風呂が使えませんでしたが、全く問題なし。徒歩 1 分の所に外\n湯がありました。温泉街だけあって、外湯はそこかしこにあります。\n  スナックも多かった。夜の 9 時頃から看板の明かりが灯り始めます。\nただ、今回は勇気が出なくて入れませんでした。orz\n  肝心の開発ですが、急ぎの用件があったのでいつもどおりのタスクをこな\nしてしまいました。ネットワークが貧弱なのは残念でしたけど、『フィリ\nピン駆動開発』と同様、普通にはかどったと思います。\n部屋には作業しやすい机と椅子がなかったので、結構腰にきました。これ\nは次回への課題ですね。\n3 日目は雨でした。なんとか天気がもって良かったです。\n  合わせて読みたい:\n2012年春の開発合宿に行ってきました。 - 日々、とんは語る。 ","contentSnippet":"先日ご紹介した『フィリピン駆動開発』[2012-03-30-1] は、導入障壁が高いことに気づきました。そこで、より導入障壁の低い『温泉駆動開発』を紹介したいと思います。先週の水〜金に城崎温泉(きのさきおんせん) に行ってきました。兵庫県の日本海側、京都府との境に近いところにあります。道中のコンビニで撮影。いい感じの田舎具合です。  昼食のため出石 で停車。萩に少し似た城下町でした。こういう町並みは好きですね。  誰？  この辺は皿そばが有名とのこと。1 人前 5 皿です。記念品がもらえるとのことだったので、5 人中 3 人が 20 皿完食しました。私ももちろん完食。  もらった記念品。肝心の皿数が書いてありません。  城崎温泉の宿に到着。  1 日目は内風呂が使えませんでしたが、全く問題なし。徒歩 1 分の所に外湯がありました。温泉街だけあって、外湯はそこかしこにあります。  スナックも多かった。夜の 9 時頃から看板の明かりが灯り始めます。ただ、今回は勇気が出なくて入れませんでした。orz  肝心の開発ですが、急ぎの用件があったのでいつもどおりのタスクをこなしてしまいました。ネットワークが貧弱なのは残念でしたけど、『フィリピン駆動開発』と同様、普通にはかどったと思います。部屋には作業しやすい机と椅子がなかったので、結構腰にきました。これは次回への課題ですね。3 日目は雨でした。なんとか天気がもって良かったです。  合わせて読みたい:2012年春の開発合宿に行ってきました。 - 日々、とんは語る。","link":"https://masutaka.net/2012-04-22-1/","isoDate":"2012-04-22T00:00:00.000Z","dateMiliSeconds":1335052800000,"authorName":"masutaka"},{"title":"『八日目の蝉』を観た","content":"今回も前知識なしで観ました。すごく良い映画。\n過去と現在がパラレルに進行する映画はよくありますが、使い方を間違え\nると観てて訳が分からなくなります。そういう意味では、この映画は全く\n違和感がありませんでした。色使いを変えているんですかね。\n昔自分が住んでいた土地を訪問することって、なにか用語ありましたっけ？\n実は私、これがすごく好きなんです。\n社会人になった数年後に、大学時代に住んでいた宇都宮のアパートを訪問\nした時は何とも言えない思いになりましたし、最近だと２月に武蔵新城を\nぶらぶら歩いた時も同じでした。ゲームだと FF5 で故郷の村に戻るシーン\nが好きですね(音楽も)。\n失礼な話ではありますが、店が潰れてたりするとなお良いです。この映画\nでもそんなシーンが何カ所か出て来て、結構萌えました。\nそして永作博美 があいかわらず良いです。彼女は ribbon 時代から知って\nますが、青い鳥 で惚れました。思えば青い鳥も逃亡のドラマですね。\nということで(?)、オススメの映画です。","contentSnippet":"今回も前知識なしで観ました。すごく良い映画。過去と現在がパラレルに進行する映画はよくありますが、使い方を間違えると観てて訳が分からなくなります。そういう意味では、この映画は全く違和感がありませんでした。色使いを変えているんですかね。昔自分が住んでいた土地を訪問することって、なにか用語ありましたっけ？実は私、これがすごく好きなんです。社会人になった数年後に、大学時代に住んでいた宇都宮のアパートを訪問した時は何とも言えない思いになりましたし、最近だと２月に武蔵新城をぶらぶら歩いた時も同じでした。ゲームだと FF5 で故郷の村に戻るシーンが好きですね(音楽も)。失礼な話ではありますが、店が潰れてたりするとなお良いです。この映画でもそんなシーンが何カ所か出て来て、結構萌えました。そして永作博美 があいかわらず良いです。彼女は ribbon 時代から知ってますが、青い鳥 で惚れました。思えば青い鳥も逃亡のドラマですね。ということで(?)、オススメの映画です。","link":"https://masutaka.net/2012-04-17-1/","isoDate":"2012-04-17T00:00:00.000Z","dateMiliSeconds":1334620800000,"authorName":"masutaka"},{"title":"これからの開発手法の本流『フィリピン駆動開発』","content":"3/9 から 3/27 まで、フィリピンのセブシティ に出張に行ってました。\n  フィリピンは去年の 3 月[2011-04-22-1] 、8 月に続いて 3 回目です。出\n張と言っても特別に用があるわけでもなく、新オフィスが出来る関係で人\nが集まるから、ちょっと行ってみようかという程度の話でした。\n  でもまあ、現地スタッフと直接話して問題点が分かったのは良かったです\nし、半年前にはちょっと想像がつかないくらい大きくなった会社を目の当\nたりにすることも出来ました。\n  それ以外の時間はこういうカフェで仕事をしてました。\n  フィリピンには Wifi と電源が使えるカフェが結構あって、長時間いても\n文句を言われることはありません。みんなおおらかというか、気にしない\nのでしょうね。私のようにネットさえあれば仕事が出来る人にとっては、\n悪くない環境です。\n滞在場所はなかなかストイックなレジデンスでした。ネットが使えるのは\n1 階の、24:00 で閉まるインターネットスペースだけ(1時間15ペソ(30円))。\n部屋にシャワーは付いていますが、お湯は出ません(フィリピンだと普通)。\nこれが何をもたらしたかというと、、、生活が超規則正しくなりました。\n部屋でネットが出来ないので、帰ったら寝るしかないんです。私はホット\nシャワーじゃないと痛くて髭を剃れないので、シャワーも浴びず歯を磨い\nてバタンです。\nほぼ毎日こんなサイクルでした。\n8:00 起床、歯を磨いてすぐにマリオットホテル に移動\n8:30 同ホテルのジム(マンスリー会員になった)でシャワー\n9:30 近くのカフェで朝食を取りつつ仕事開始\n18:00 この辺で疲れてくるので仕事終了。飲みに行ったり、マッサージに行ったり。\n24:00 就寝\n生活が規則正しくなると、仕事が進むもんですね。先日こんな記事 があり\nましたが、やはりカフェとコーディングは相性がよいです。おまけにフィ\nリピンだと他の客が何喋っているか分からないので、さらに集中できます。\n実感として日本にいる時の２倍くらい捗っていた気がします。ちょっと調\nべてみました。\n   期間 終了したチケット commit回数 変更ファイル数 追加行数 削除行数     2012 2/1-2/29 18 35 165 2825 1228   2012 3/1-3/29 40 64 233 3321 1483    終了したチケットと commit 回数が２倍くらいになってます。変更した行","contentSnippet":"3/9 から 3/27 まで、フィリピンのセブシティ に出張に行ってました。  フィリピンは去年の 3 月[2011-04-22-1] 、8 月に続いて 3 回目です。出張と言っても特別に用があるわけでもなく、新オフィスが出来る関係で人が集まるから、ちょっと行ってみようかという程度の話でした。  でもまあ、現地スタッフと直接話して問題点が分かったのは良かったですし、半年前にはちょっと想像がつかないくらい大きくなった会社を目の当たりにすることも出来ました。  それ以外の時間はこういうカフェで仕事をしてました。  フィリピンには Wifi と電源が使えるカフェが結構あって、長時間いても文句を言われることはありません。みんなおおらかというか、気にしないのでしょうね。私のようにネットさえあれば仕事が出来る人にとっては、悪くない環境です。滞在場所はなかなかストイックなレジデンスでした。ネットが使えるのは1 階の、24:00 で閉まるインターネットスペースだけ(1時間15ペソ(30円))。部屋にシャワーは付いていますが、お湯は出ません(フィリピンだと普通)。これが何をもたらしたかというと、、、生活が超規則正しくなりました。部屋でネットが出来ないので、帰ったら寝るしかないんです。私はホットシャワーじゃないと痛くて髭を剃れないので、シャワーも浴びず歯を磨いてバタンです。ほぼ毎日こんなサイクルでした。8:00 起床、歯を磨いてすぐにマリオットホテル に移動8:30 同ホテルのジム(マンスリー会員になった)でシャワー9:30 近くのカフェで朝食を取りつつ仕事開始18:00 この辺で疲れてくるので仕事終了。飲みに行ったり、マッサージに行ったり。24:00 就寝生活が規則正しくなると、仕事が進むもんですね。先日こんな記事 がありましたが、やはりカフェとコーディングは相性がよいです。おまけにフィリピンだと他の客が何喋っているか分からないので、さらに集中できます。実感として日本にいる時の２倍くらい捗っていた気がします。ちょっと調べてみました。   期間 終了したチケット commit回数 変更ファイル数 追加行数 削除行数     2012 2/1-2/29 18 35 165 2825 1228   2012 3/1-3/29 40 64 233 3321 1483    終了したチケットと commit 回数が２倍くらいになってます。変更した行","link":"https://masutaka.net/2012-03-30-1/","isoDate":"2012-03-30T00:00:00.000Z","dateMiliSeconds":1333065600000,"authorName":"masutaka"},{"title":"『ハングオーバーII』を観た","content":"予想外に I よりもさらに面白かった。ダグはあいかわらず空気だったし、\n一部目を背けたくなるようなグロいシーンもあったけど、コメディだと割\nり切れば問題ない。\n最後にひとこと言わせてくれ。\nや っ ぱ り 二 日 酔 い じ ゃ な い じ ゃ ん w","contentSnippet":"予想外に I よりもさらに面白かった。ダグはあいかわらず空気だったし、一部目を背けたくなるようなグロいシーンもあったけど、コメディだと割り切れば問題ない。最後にひとこと言わせてくれ。や っ ぱ り 二 日 酔 い じ ゃ な い じ ゃ ん w","link":"https://masutaka.net/2012-02-18-1/","isoDate":"2012-02-18T00:00:00.000Z","dateMiliSeconds":1329523200000,"authorName":"masutaka"},{"title":"『ハングオーバー』を観た","content":"まあまあ面白かったが、ひとこと言わせてくれ。\n二 日 酔 い じ ゃ な い じ ゃ ん w","contentSnippet":"まあまあ面白かったが、ひとこと言わせてくれ。二 日 酔 い じ ゃ な い じ ゃ ん w","link":"https://masutaka.net/2012-02-16-1/","isoDate":"2012-02-16T00:00:00.000Z","dateMiliSeconds":1329350400000,"authorName":"masutaka"},{"title":"『南極料理人』を観た","content":"全体的にわざとらしさ感が充ち満ちている映画。だけれども、ドキュメン\nタリーっぽい感じがあり、悪くなかった。寝っ転がりながらぼ〜っと観る\nのがちょうど良いかも。ロケ地は南極ではなく、北海道網走市とのこと。\nさすがに無理なのか。\nKDD インマルサットの清水さんはなかなか良かった。","contentSnippet":"全体的にわざとらしさ感が充ち満ちている映画。だけれども、ドキュメンタリーっぽい感じがあり、悪くなかった。寝っ転がりながらぼ〜っと観るのがちょうど良いかも。ロケ地は南極ではなく、北海道網走市とのこと。さすがに無理なのか。KDD インマルサットの清水さんはなかなか良かった。","link":"https://masutaka.net/2012-01-29-1/","isoDate":"2012-01-29T00:00:00.000Z","dateMiliSeconds":1327795200000,"authorName":"masutaka"},{"title":"『ライフ・イズ・ビューティフル』を観た","content":"何人かに勧められてようやく観た。でも、私は無理矢理っぽさが合わなかっ\nたなあ。前半はコメディ版タイタニックか？と思ったけど、後半になると\n全く違った映画になる。最後は悪くなかった。","contentSnippet":"何人かに勧められてようやく観た。でも、私は無理矢理っぽさが合わなかったなあ。前半はコメディ版タイタニックか？と思ったけど、後半になると全く違った映画になる。最後は悪くなかった。","link":"https://masutaka.net/2012-01-28-2/","isoDate":"2012-01-28T01:00:00.000Z","dateMiliSeconds":1327712400000,"authorName":"masutaka"},{"title":"『ブラック・スワン』を観た","content":"これは凄まじい映画。特に中盤以降は本気で何が何だか分からなくなって\nくる。瞬きも惜しんで見ることになるとは思わなかった。","contentSnippet":"これは凄まじい映画。特に中盤以降は本気で何が何だか分からなくなってくる。瞬きも惜しんで見ることになるとは思わなかった。","link":"https://masutaka.net/2012-01-28-1/","isoDate":"2012-01-28T00:00:00.000Z","dateMiliSeconds":1327708800000,"authorName":"masutaka"},{"title":"『グラン・トリノ』を観た","content":"なかなかに渋い映画。前半はコメディチック、後半はシリアス。\nAmazon のレビューで「これは西部劇だ。」との意見が。なるほど。\n日本語吹き替えで観たので、次は字幕にしよう。","contentSnippet":"なかなかに渋い映画。前半はコメディチック、後半はシリアス。Amazon のレビューで「これは西部劇だ。」との意見が。なるほど。日本語吹き替えで観たので、次は字幕にしよう。","link":"https://masutaka.net/2012-01-09-1/","isoDate":"2012-01-09T00:00:00.000Z","dateMiliSeconds":1326067200000,"authorName":"masutaka"},{"title":"『ロボゲイシャ』を観た","content":"2011 年を締めくくるにふさわしい映画。笑いあり涙あり姉妹愛あり。それ\nにロボットまで付いてくれば見ないわけにはいかないでしょう。大物俳優\nが何人も出演し、脇を十二分に固めています。\n.\n.\n.\nここまでクソ映画だったとは。。。でも頑張って最後まで観たw\n片腕マシンガール [2011-12-11-2] を悪いほうに外した感じ。\n途中何カ所か面白いところはあったけど。本当に同じ監督が作った？\n低予算ではなくなったそうだけど、それと関係しているのかな？","contentSnippet":"2011 年を締めくくるにふさわしい映画。笑いあり涙あり姉妹愛あり。それにロボットまで付いてくれば見ないわけにはいかないでしょう。大物俳優が何人も出演し、脇を十二分に固めています。...ここまでクソ映画だったとは。。。でも頑張って最後まで観たw片腕マシンガール [2011-12-11-2] を悪いほうに外した感じ。途中何カ所か面白いところはあったけど。本当に同じ監督が作った？低予算ではなくなったそうだけど、それと関係しているのかな？","link":"https://masutaka.net/2011-12-31-1/","isoDate":"2011-12-31T00:00:00.000Z","dateMiliSeconds":1325289600000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (6/6)} 他にインストールしたプラグイン","content":"※ 詳細情報は「Jenkinsの管理」&gt;「プラグインの管理」から辿れる、各プ\nラグインのリンク先を参照して下さい。\nEmotional Jenkins Plugin これはインストールした方がよいでしょう。そしてテストを失敗させましょうw\n各プロジェクトの設定で ON/OFF できます。\nIRC Plugin 設定すると、指定した channel に Jenkins さんが常駐します。ビルド結\n果を IRC で通知してくれるだけでなく、IRC から Jenkins を実行できた\nりもします。\n私の設定は以下のとおり。\n         Hostname chat.freenode.net   Port 6667   Channels Name #example   Nickname jenkinsbot   Command prefix jenkinsbot:   (高度な設定)Use /notice command チェックを入れる    Hostname と Port と Channels Name を設定するだけで動くはずですが、","contentSnippet":"※ 詳細情報は「Jenkinsの管理」>「プラグインの管理」から辿れる、各プラグインのリンク先を参照して下さい。Emotional Jenkins Plugin これはインストールした方がよいでしょう。そしてテストを失敗させましょうw各プロジェクトの設定で ON/OFF できます。IRC Plugin 設定すると、指定した channel に Jenkins さんが常駐します。ビルド結果を IRC で通知してくれるだけでなく、IRC から Jenkins を実行できたりもします。私の設定は以下のとおり。         Hostname chat.freenode.net   Port 6667   Channels Name #example   Nickname jenkinsbot   Command prefix jenkinsbot:   (高度な設定)Use /notice command チェックを入れる    Hostname と Port と Channels Name を設定するだけで動くはずですが、","link":"https://masutaka.net/2011-12-30-6/","isoDate":"2011-12-30T05:00:00.000Z","dateMiliSeconds":1325221200000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (5/6)} Jenkins を自動実行する","content":"「リモートからビルド (例: スクリプトから)」がうまくいかないので、\nとりあえず「SCMをポーリング」にしました。\n10 分おきにポーリングです。\n*/10 * * * * Jenkins は良くできたツールなんだけど、微妙に設定が効かないことがあ\nるよなあ。単にまだ自分に馴染んでいないだけなのか。","contentSnippet":"「リモートからビルド (例: スクリプトから)」がうまくいかないので、とりあえず「SCMをポーリング」にしました。10 分おきにポーリングです。*/10 * * * * Jenkins は良くできたツールなんだけど、微妙に設定が効かないことがあるよなあ。単にまだ自分に馴染んでいないだけなのか。","link":"https://masutaka.net/2011-12-30-5/","isoDate":"2011-12-30T04:00:00.000Z","dateMiliSeconds":1325217600000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (4/6)} Jenkins から PHPUnit を実行する","content":"CakePHP2 から、奨励単体テストツールが SimpleTest から PHPUnit になっ\nたのは周知のとおり。http://example.com/cakephp/test.php などから単\n体テストができるようになり、カバレッジ率も測定できる環境が整ったら、\nJenkins でも実行したいところ。\nコマンドラインから単体テストを実行する まずはコマンドラインからテストを実行できることを確認する。\n% cd app % mkdir -p results % ../lib/Cake/Console/cake testsuite --log-junit results/phpunit.xml --coverage-clover results/coverage.xml app AllTests 上の例では、Controller や Model を含めた全てのテストケースを実行す\nる app/Test/Case/AllTestsTest.php を実行している。\nこのとき\n PHP Fatal error: Class &lsquo;DOMDocument&rsquo; not found in /usr/share/pear/PHPUnit/Util/Log/JUnit.php on line 135\nなんていうエラーが起きたら、configure で –with-dom を有効にした\nPHP がインストールされていない 。remi リポジトリからインストールする\nと良い(詳細は割愛)。\n % sudo yum --enablerepo=remi,epel,rpmforge,rpmforge-extras,rpmforge-testing install php-xml ここまで出来たらあとは簡単。Jenkins に設定するだけ。\nJenkins側の設定 トップの「Jenkinsの管理」&gt;「プラグインの管理」から、","contentSnippet":"CakePHP2 から、奨励単体テストツールが SimpleTest から PHPUnit になったのは周知のとおり。http://example.com/cakephp/test.php などから単体テストができるようになり、カバレッジ率も測定できる環境が整ったら、Jenkins でも実行したいところ。コマンドラインから単体テストを実行する まずはコマンドラインからテストを実行できることを確認する。% cd app % mkdir -p results % ../lib/Cake/Console/cake testsuite --log-junit results/phpunit.xml --coverage-clover results/coverage.xml app AllTests 上の例では、Controller や Model を含めた全てのテストケースを実行する app/Test/Case/AllTestsTest.php を実行している。このとき PHP Fatal error: Class ‘DOMDocument’ not found in /usr/share/pear/PHPUnit/Util/Log/JUnit.php on line 135なんていうエラーが起きたら、configure で –with-dom を有効にしたPHP がインストールされていない 。remi リポジトリからインストールすると良い(詳細は割愛)。 % sudo yum --enablerepo=remi,epel,rpmforge,rpmforge-extras,rpmforge-testing install php-xml ここまで出来たらあとは簡単。Jenkins に設定するだけ。Jenkins側の設定 トップの「Jenkinsの管理」>「プラグインの管理」から、","link":"https://masutaka.net/2011-12-30-4/","isoDate":"2011-12-30T03:00:00.000Z","dateMiliSeconds":1325214000000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (3/6)} Jenkins からコーディング規約をチェックする","content":"手っ取り早く使ってみたかったので、最初に Jenkins からコーディング規\n約チェック出来るようにしてみた。単体テストだと、最初にテストコード\nを書かなくちゃいけないからね。\nPHP_CodeSniffer のインストール インストールすると、phpcs コマンドを使えるようになる。\npear コマンドでインストール出来るが、\n% sudo pear install PHP_CodeSniffer エラーが発生してインストールできなかったので、\ndownloading PHP_CodeSniffer-1.3.2.tgz ... Starting to download PHP_CodeSniffer-1.3.2.tgz (328,845 bytes) ......................done: 328,845 bytes PHP Fatal error: Allowed memory size of 16777216 bytes exhausted (tried to allocate 23378 bytes) in /usr/share/pear/PEAR.php on line 252 PHP Stack trace: PHP 1. {main}() /usr/share/pear/pearcmd.php:0 PHP 2. PEAR_Command_Common-&gt;run() /usr/share/pear/pearcmd.php:305 PHP 3. PEAR_Command_Install-&gt;doInstall() /usr/share/pear/PEAR/Command/Common.php:271 PHP 4. PEAR_Installer-&gt;install() /usr/share/pear/PEAR/Command/Install.php:708 PHP 5. PEAR_Installer-&gt;_installFile2() /usr/share/pear/PEAR/Installer.","contentSnippet":"手っ取り早く使ってみたかったので、最初に Jenkins からコーディング規約チェック出来るようにしてみた。単体テストだと、最初にテストコードを書かなくちゃいけないからね。PHP_CodeSniffer のインストール インストールすると、phpcs コマンドを使えるようになる。pear コマンドでインストール出来るが、% sudo pear install PHP_CodeSniffer エラーが発生してインストールできなかったので、downloading PHP_CodeSniffer-1.3.2.tgz ... Starting to download PHP_CodeSniffer-1.3.2.tgz (328,845 bytes) ......................done: 328,845 bytes PHP Fatal error: Allowed memory size of 16777216 bytes exhausted (tried to allocate 23378 bytes) in /usr/share/pear/PEAR.php on line 252 PHP Stack trace: PHP 1. {main}() /usr/share/pear/pearcmd.php:0 PHP 2. PEAR_Command_Common->run() /usr/share/pear/pearcmd.php:305 PHP 3. PEAR_Command_Install->doInstall() /usr/share/pear/PEAR/Command/Common.php:271 PHP 4. PEAR_Installer->install() /usr/share/pear/PEAR/Command/Install.php:708 PHP 5. PEAR_Installer->_installFile2() /usr/share/pear/PEAR/Installer.","link":"https://masutaka.net/2011-12-30-3/","isoDate":"2011-12-30T02:00:00.000Z","dateMiliSeconds":1325210400000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (2/6)} Jenkins の認証設定","content":"今回採用したセキュリティポリシー ログインしないとアクセス出来ないようにする。\n管理者が手動でアカウントを作成すると、ユーザーがサインアップできる。\n第３者は勝手にサインアップできない。\n設定方法 「Jenkinsの管理」&gt;「システムの設定」&gt;「セキュリティを有効化」にチェック\n「アクセス制御」&gt;「ユーザー情報」&gt;「Jenkinsのユーザーデータベース」にチェック\n「ユーザーにサインアップを許可」のチェックを外す。\n「アクセス制御」&gt;「権限管理」&gt;「行列による権限設定」にチェック。\n「追加するユーザー/グループ」から masutaka を追加。全アクセス権を付与。\nトップに戻り masutaka のサインアップをすると、ログイン出来るようになる。","contentSnippet":"今回採用したセキュリティポリシー ログインしないとアクセス出来ないようにする。管理者が手動でアカウントを作成すると、ユーザーがサインアップできる。第３者は勝手にサインアップできない。設定方法 「Jenkinsの管理」>「システムの設定」>「セキュリティを有効化」にチェック「アクセス制御」>「ユーザー情報」>「Jenkinsのユーザーデータベース」にチェック「ユーザーにサインアップを許可」のチェックを外す。「アクセス制御」>「権限管理」>「行列による権限設定」にチェック。「追加するユーザー/グループ」から masutaka を追加。全アクセス権を付与。トップに戻り masutaka のサインアップをすると、ログイン出来るようになる。","link":"https://masutaka.net/2011-12-30-2/","isoDate":"2011-12-30T01:00:00.000Z","dateMiliSeconds":1325206800000,"authorName":"masutaka"},{"title":"{Jenkins x CakePHP2 (1/6)} Jenkins のインストール方法","content":"CakePHP-2.0.4 で継続的インテグレーション(CI) ができる環境を構築する\nため、Jenkins をインストールすることにした。\nネット上を探し回ったんだけど、まだ Jenkins x CakePHP2 の情報はまと\nまってないみたい。毎度のことながら途中何度も何度もハマり、設定して\nはアンインストールし、設定してはアンインストールしを 7〜8 回はやっ\nたと思う。同じように困っている人と、将来の自分のために構築メモを残\nすことにする。全 6 回。\nJenkins のバージョンは 1.445、CentOS のバージョンは 5.6。\nJenkins をインストール＆起動した。Jenkins 用のリポジトリを yum の\nリポジトリリストに追加して、yum install するだけ。\n% sudo yum install java-1.6.0-openjdk % sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo % sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key % sudo yum install jenkins % sudo /sbin/service jenkins start http://example.com:8080 にアクセスできるようになった。設定ファイル\nや workspace は /var/lib/jenkins に、ログは /var/log/jenkins に作ら\nれる。\n設定やビルド結果は xml で保存され、MySQL とかは使わないので、気楽と","contentSnippet":"CakePHP-2.0.4 で継続的インテグレーション(CI) ができる環境を構築するため、Jenkins をインストールすることにした。ネット上を探し回ったんだけど、まだ Jenkins x CakePHP2 の情報はまとまってないみたい。毎度のことながら途中何度も何度もハマり、設定してはアンインストールし、設定してはアンインストールしを 7〜8 回はやったと思う。同じように困っている人と、将来の自分のために構築メモを残すことにする。全 6 回。Jenkins のバージョンは 1.445、CentOS のバージョンは 5.6。Jenkins をインストール＆起動した。Jenkins 用のリポジトリを yum のリポジトリリストに追加して、yum install するだけ。% sudo yum install java-1.6.0-openjdk % sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo % sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key % sudo yum install jenkins % sudo /sbin/service jenkins start http://example.com:8080 にアクセスできるようになった。設定ファイルや workspace は /var/lib/jenkins に、ログは /var/log/jenkins に作られる。設定やビルド結果は xml で保存され、MySQL とかは使わないので、気楽と","link":"https://masutaka.net/2011-12-30-1/","isoDate":"2011-12-30T00:00:00.000Z","dateMiliSeconds":1325203200000,"authorName":"masutaka"},{"title":"『ミリオンダラーベイビー』を観た","content":"どこまでも救いようがない物語。でも嫌いじゃない。\nマギーは幸せだったのかな？","contentSnippet":"どこまでも救いようがない物語。でも嫌いじゃない。マギーは幸せだったのかな？","link":"https://masutaka.net/2011-12-24-1/","isoDate":"2011-12-24T00:00:00.000Z","dateMiliSeconds":1324684800000,"authorName":"masutaka"},{"title":"私の.emacsからピックアップした設定3つ #EmacsAdventJP","content":"Emacs Advent Calendar jp: 2011 の 17 日目です。16 日目は、@asudofu さんの点数付けの導入でタスク管理を楽しくする[Emacs拡張] でした。\nEmacs Advent Calendar jp には初めて参加します。Emacs は 2000 年から\n使っていますが [2009-06-26-2] 、あんまり凝ったことはしていません。な\nので、今回は私の .emacs から良さそうな設定を 3 つ紹介します。\nDired で今日変更したファイルを色づけ こんな感じに今日変更したファイルの日時に色が付きます。なかなか便利\nです。\n※ 意味もなく、s' でファイルを時間順に並べ替えるのも好きです。s'\nで元に戻ります。\n元々 blankspace &gt; emacs &gt; dired にあった設定なので、ご存知の方も多\nいのではないでしょうか。今の私のコードはこのようになっていました。\n日付が &ldquo;12 15&rdquo; でも &ldquo;Dec 15&rdquo; でも色が付くようになっています。\n フォントを大きくしたり小さくしたり Emacs-23.1 からフォントを動的に大きくしたり小さくしたり出来るように\nなりました。等幅フォントでは出来ないかもしれません。\nM-x text-scale-adjust の後に +' するだけでフォントが大きくなります。 -&rsquo; で小さくなります。`0&rsquo; で元に戻ります。\n等倍\n5回+\n10回+\n私は C-q C-a に割り当てて、何か行き詰まると大きくしたり小さくしたり","contentSnippet":"Emacs Advent Calendar jp: 2011 の 17 日目です。16 日目は、@asudofu さんの点数付けの導入でタスク管理を楽しくする[Emacs拡張] でした。Emacs Advent Calendar jp には初めて参加します。Emacs は 2000 年から使っていますが [2009-06-26-2] 、あんまり凝ったことはしていません。なので、今回は私の .emacs から良さそうな設定を 3 つ紹介します。Dired で今日変更したファイルを色づけ こんな感じに今日変更したファイルの日時に色が付きます。なかなか便利です。※ 意味もなく、s' でファイルを時間順に並べ替えるのも好きです。s'で元に戻ります。元々 blankspace > emacs > dired にあった設定なので、ご存知の方も多いのではないでしょうか。今の私のコードはこのようになっていました。日付が “12 15” でも “Dec 15” でも色が付くようになっています。 フォントを大きくしたり小さくしたり Emacs-23.1 からフォントを動的に大きくしたり小さくしたり出来るようになりました。等幅フォントでは出来ないかもしれません。M-x text-scale-adjust の後に +' するだけでフォントが大きくなります。 -’ で小さくなります。`0’ で元に戻ります。等倍5回+10回+私は C-q C-a に割り当てて、何か行き詰まると大きくしたり小さくしたり","link":"https://masutaka.net/2011-12-17-1/","isoDate":"2011-12-17T00:00:00.000Z","dateMiliSeconds":1324080000000,"authorName":"masutaka"},{"title":"Opera でうまく見られないサイトへの対策","content":"Opera はマイナーなブラウザなのか、うまく見られないサイトがいくつか\nありました。User-agent と HTTP Accept Language をカスタマイズすれば\nなんとか大丈夫なようです。ただし、後者は全てのサイトに影響するので、\n少し注意が必要です。\njp.techcrunch.com http://jp.techcrunch.com/ にアクセスすると、\nhttp://m.jp.techcrunch.com/ に飛ばされてしまう。Opera はモバイル機\n器で多く使われているようなので、jp.techcrunch.com が適当に判断して\nしまっているようだ。\nhttp://m.jp.techcrunch.com/ に飛ばされた状態で右クリック &gt; サイトご\nとの設定を編集 &gt; 一般設定タブに進む。サイトに jp.techcrunch.com を\n入力。\n  同様に右クリック &gt; サイトごとの設定を編集 &gt; ネットワークタブに進む。\nブラウザーの識別を「完全に Firefox として認識させる」にする。\n  dmm.com ログインしようとすると、以下のエラーページに飛ばされる。\n  アドレスバーに opera:config と打ち、Enter を押下。\nNetwork &gt; HTTP Accept Language に進み、\nja,en;q=0.9,en-US;q=0.8,fr;q=0.7,de;q=0.6,es;q=0.5,it;q=0.4,pt;q=0.3,pt-PT;q=0.2,nl;q=0.1,sv;q=0.1,nb;q=0.1,da;q=0.1,fi;q=0.1,ru;q=0.1,pl;q=0.1,zh-CN;q=0.1,zh-TW;q=0.1,ko;q=0.1,ar;q=0.1,cs;q=0.1,hu;q=0.1,tr;q=0.1 から\n,zh-CN;q=0.1,zh-TW;q=0.1,ko;q=0.1 を削除する。","contentSnippet":"Opera はマイナーなブラウザなのか、うまく見られないサイトがいくつかありました。User-agent と HTTP Accept Language をカスタマイズすればなんとか大丈夫なようです。ただし、後者は全てのサイトに影響するので、少し注意が必要です。jp.techcrunch.com http://jp.techcrunch.com/ にアクセスすると、http://m.jp.techcrunch.com/ に飛ばされてしまう。Opera はモバイル機器で多く使われているようなので、jp.techcrunch.com が適当に判断してしまっているようだ。http://m.jp.techcrunch.com/ に飛ばされた状態で右クリック > サイトごとの設定を編集 > 一般設定タブに進む。サイトに jp.techcrunch.com を入力。  同様に右クリック > サイトごとの設定を編集 > ネットワークタブに進む。ブラウザーの識別を「完全に Firefox として認識させる」にする。  dmm.com ログインしようとすると、以下のエラーページに飛ばされる。  アドレスバーに opera:config と打ち、Enter を押下。Network > HTTP Accept Language に進み、ja,en;q=0.9,en-US;q=0.8,fr;q=0.7,de;q=0.6,es;q=0.5,it;q=0.4,pt;q=0.3,pt-PT;q=0.2,nl;q=0.1,sv;q=0.1,nb;q=0.1,da;q=0.1,fi;q=0.1,ru;q=0.1,pl;q=0.1,zh-CN;q=0.1,zh-TW;q=0.1,ko;q=0.1,ar;q=0.1,cs;q=0.1,hu;q=0.1,tr;q=0.1 から,zh-CN;q=0.1,zh-TW;q=0.1,ko;q=0.1 を削除する。","link":"https://masutaka.net/2011-12-14-1/","isoDate":"2011-12-14T00:00:00.000Z","dateMiliSeconds":1323820800000,"authorName":"masutaka"},{"title":"『「リーダーの条件」が変わった』を読んだ","content":"氏は本書を含め、さまざまな場所で提言しているけど、本書にあるように\n問題はそれを実行できるリーダーがいないことなんだよね。まあでも大阪\nとか福岡とか地方が変わってきているので、それは一筋の光明かな？","contentSnippet":"氏は本書を含め、さまざまな場所で提言しているけど、本書にあるように問題はそれを実行できるリーダーがいないことなんだよね。まあでも大阪とか福岡とか地方が変わってきているので、それは一筋の光明かな？","link":"https://masutaka.net/2011-12-12-1/","isoDate":"2011-12-12T00:00:00.000Z","dateMiliSeconds":1323648000000,"authorName":"masutaka"},{"title":"『片腕マシンガール』を観た","content":" 天ぷら！ YAKUZA! NINJA! そして スーパー遺族！\nもう何も言うことはありません。\n2007 年の B 級スプラッター映画。日本では公開されてないとのこと。\nようやく観れたわ。てか、さっさと借りれば良かった。\n予告編はこれ。本編はこれより 200% グロい。\n 小飼弾氏も町山智浩氏も大絶賛です。\n404 Blog Not Found:紹介 - 片腕マシンガール 女子高生にマシンガンつけて忍者ヤクザと闘わせろ！ - ベイエリア在住町山智浩アメリカ日記 オフィスでみんなで観ようかと思ったけど、グロすぎるので躊躇している\nところ。メシ時避ければ良いのかな？\n全体的にみんなドスが効いた良い声をしていました。全てが良い意味でツッ\nコミどころ満載。監督が良い仕事をしている。体張ってたし。。。\n作中で片腕マシンガンを作った石川ゆうやさんは新宿ゴールデン街「ダー\nリン」の店主だそうです。是非行ってみたい。\nYAKUZA の人は「プロジェクトＡ」の海賊のボスと似てる。\n参考情報: 片腕マシンガール ","contentSnippet":"天ぷら！ YAKUZA! NINJA! そして スーパー遺族！もう何も言うことはありません。2007 年の B 級スプラッター映画。日本では公開されてないとのこと。ようやく観れたわ。てか、さっさと借りれば良かった。予告編はこれ。本編はこれより 200% グロい。 小飼弾氏も町山智浩氏も大絶賛です。404 Blog Not Found:紹介 - 片腕マシンガール 女子高生にマシンガンつけて忍者ヤクザと闘わせろ！ - ベイエリア在住町山智浩アメリカ日記 オフィスでみんなで観ようかと思ったけど、グロすぎるので躊躇しているところ。メシ時避ければ良いのかな？全体的にみんなドスが効いた良い声をしていました。全てが良い意味でツッコミどころ満載。監督が良い仕事をしている。体張ってたし。。。作中で片腕マシンガンを作った石川ゆうやさんは新宿ゴールデン街「ダーリン」の店主だそうです。是非行ってみたい。YAKUZA の人は「プロジェクトＡ」の海賊のボスと似てる。参考情報: 片腕マシンガール","link":"https://masutaka.net/2011-12-11-2/","isoDate":"2011-12-11T01:00:00.000Z","dateMiliSeconds":1323565200000,"authorName":"masutaka"},{"title":"『プロジェクトＡ』を観た","content":" 海賊のボスは絶対に真面目でいい人！\n参考情報: プロジェクトA ","contentSnippet":"海賊のボスは絶対に真面目でいい人！参考情報: プロジェクトA","link":"https://masutaka.net/2011-12-11-1/","isoDate":"2011-12-11T00:00:00.000Z","dateMiliSeconds":1323561600000,"authorName":"masutaka"},{"title":"Mew で新規作成や返信時に case を自動的に切り替える方法","content":"※ この記事は = MewでiCloudのメールを読み書き - ぺっくブログミラー\n@peccul への mention です。\n@peccul さんの記事のとおり、Mew で case を設定すると複数アカウント\nを切り替えることが出来ます。さらに、自動的に切り替えることも出来ます。\npooh@example.com から来たメールへの返信で、case に example を使いた\nい時は、このように設定します(mew-case-guess-when-replied-alist の書\n式は mew-refile-guess-alist と同じです)。\n;; 返信時(a,A)にケースを自動的に設定する。 (setq mew-case-guess-when-replied-alist  &#39;((&#34;\\\\(To\\\\|Cc\\\\):&#34;  (&#34;pooh@example\\\\.com&#34; &#34;example&#34;)))) 新規作成や転送の時は mew-case-guess-alist に設定します。でも普通は\nTo: や Cc: は空なので、推測に必要な情報がありません。\nそこで登場するのが mew-ask-to と mew-ask-cc です。以下のように設定\nすれば、返信の時と同じように case が自動的に切り替わります。\n;; 草稿を作る時(w,f,F)、最初に To: と Cc: を聞かれる。 (setq mew-ask-to t mew-ask-cc t)  ;; 草稿を作る時(w,f,F)や、再編集時(E)にケースを自動的に設定する。 (setq mew-case-guess-alist  &#39;((&#34;\\\\(To\\\\|Cc\\\\):&#34;  (&#34;pooh@example\\\\.com&#34; &#34;example&#34;)))) mew-case-guess-alist と mew-case-guess-when-replied-alist について","contentSnippet":"※ この記事は = MewでiCloudのメールを読み書き - ぺっくブログミラー@peccul への mention です。@peccul さんの記事のとおり、Mew で case を設定すると複数アカウントを切り替えることが出来ます。さらに、自動的に切り替えることも出来ます。pooh@example.com から来たメールへの返信で、case に example を使いたい時は、このように設定します(mew-case-guess-when-replied-alist の書式は mew-refile-guess-alist と同じです)。;; 返信時(a,A)にケースを自動的に設定する。 (setq mew-case-guess-when-replied-alist  '((\"\\\\(To\\\\|Cc\\\\):\"  (\"pooh@example\\\\.com\" \"example\")))) 新規作成や転送の時は mew-case-guess-alist に設定します。でも普通はTo: や Cc: は空なので、推測に必要な情報がありません。そこで登場するのが mew-ask-to と mew-ask-cc です。以下のように設定すれば、返信の時と同じように case が自動的に切り替わります。;; 草稿を作る時(w,f,F)、最初に To: と Cc: を聞かれる。 (setq mew-ask-to t mew-ask-cc t)  ;; 草稿を作る時(w,f,F)や、再編集時(E)にケースを自動的に設定する。 (setq mew-case-guess-alist  '((\"\\\\(To\\\\|Cc\\\\):\"  (\"pooh@example\\\\.com\" \"example\")))) mew-case-guess-alist と mew-case-guess-when-replied-alist について","link":"https://masutaka.net/2011-12-06-1/","isoDate":"2011-12-06T00:00:00.000Z","dateMiliSeconds":1323129600000,"authorName":"masutaka"},{"title":"『もし小泉進次郎がフリードマンの『資本主義と自由』を読んだら』を読んだ","content":"池田信夫さんのメルマガで連載されていた小説の漫画版。まあまあ面白かった。日本が財政破綻したらどうなるのか、私のように経済に疎い人にも想像できる内容に仕上がっている。\n漫画としては、もっと少し練った方が良かった。というのも小説をそのまま漫画化した感じで、全体的にメリハリがない(和間さんのところがある意味クライマックス？w)。小泉さんのキャラ設定は不十分というか、設定されていない。\n次は藤沢数希さんの「日本人がグローバル資本主義を生き抜くための経済学入門 もう代案はありません 」を読む予定(もう読み始めているけど)。","contentSnippet":"池田信夫さんのメルマガで連載されていた小説の漫画版。まあまあ面白かった。日本が財政破綻したらどうなるのか、私のように経済に疎い人にも想像できる内容に仕上がっている。漫画としては、もっと少し練った方が良かった。というのも小説をそのまま漫画化した感じで、全体的にメリハリがない(和間さんのところがある意味クライマックス？w)。小泉さんのキャラ設定は不十分というか、設定されていない。次は藤沢数希さんの「日本人がグローバル資本主義を生き抜くための経済学入門 もう代案はありません 」を読む予定(もう読み始めているけど)。","link":"https://masutaka.net/2011-12-04-1/","isoDate":"2011-12-04T00:00:00.000Z","dateMiliSeconds":1322956800000,"authorName":"masutaka"},{"title":"『Jenkins実践入門 〜ビルド・テスト・デプロイを自動化する技術』を読んだ","content":"その名の通り、Jenkins の入門書。Jenkins で出来ることを知っておくに\nは良い本。そんなに濃い内容ではないので、時間をかけずにさっと読めた。\n逆に、濃い情報を期待して読むと期待はずれだと思う。Subversion の説明\nなんていらないし、Java 以外の言語を使っている人にとって、Ant とか\nJUnit の説明もいらない。\nまあでも、Jenkins は yum で簡単にインストール出来ることが分かったし、\nSelenium というテストツールを使えば、Web ブラウザからの操作を自動化\nできることも分かったので、私には良い本だった。","contentSnippet":"その名の通り、Jenkins の入門書。Jenkins で出来ることを知っておくには良い本。そんなに濃い内容ではないので、時間をかけずにさっと読めた。逆に、濃い情報を期待して読むと期待はずれだと思う。Subversion の説明なんていらないし、Java 以外の言語を使っている人にとって、Ant とかJUnit の説明もいらない。まあでも、Jenkins は yum で簡単にインストール出来ることが分かったし、Selenium というテストツールを使えば、Web ブラウザからの操作を自動化できることも分かったので、私には良い本だった。","link":"https://masutaka.net/2011-12-01-1/","isoDate":"2011-12-01T00:00:00.000Z","dateMiliSeconds":1322697600000,"authorName":"masutaka"},{"title":"第2回 関西PHP勉強会 LightningTalk","content":"第2回 関西PHP勉強会 目次に戻る Memcached は NoSQL memcached って、NoSQL に分類されるのね。知りませんでした。。データ\n数は 100,000 件とかにすれば、違いがより分かりやすかったかも？\nPHP でも顔認識してみようぜ！ OpenCV を PHP から使う！\n画像をアップロードすると、顔を認識してくれる。iPhoto とかであるやつですね。\n実演は無事成功。8888\nWindows Azure で PHP 動くんです Windows Azure ってのがあるのですね。\nクラウドで動く Windows Server\n初心者でもわかる CakePHP と PDFlib PDFlib は何十万もするらしい。。。弊社ではちょい無理です。\nFPDF は無償。これはメモメモ。\n12 月中に第 2 回関西 PHP 初心者勉強会やるらしいです。\nPHP で Twitter OAuth には、twmode とかこのブログとかで使ったことがあるので、これは\n馴染み深かった。PHP でも簡単にできるんですね〜\nphp でも jubatus データを突っ込むと、そのデータが何かを類推してくれる。\n例えば、はてブのタグの suggestion とか。でも試作は失敗とのことw\nfacebook アプリ heroku 使うやつだったけかな。雛形が用意されているので、結構簡単に作\nれるらしい。プロジェクタートラブルはご愁傷様でした。","contentSnippet":"第2回 関西PHP勉強会 目次に戻る Memcached は NoSQL memcached って、NoSQL に分類されるのね。知りませんでした。。データ数は 100,000 件とかにすれば、違いがより分かりやすかったかも？PHP でも顔認識してみようぜ！ OpenCV を PHP から使う！画像をアップロードすると、顔を認識してくれる。iPhoto とかであるやつですね。実演は無事成功。8888Windows Azure で PHP 動くんです Windows Azure ってのがあるのですね。クラウドで動く Windows Server初心者でもわかる CakePHP と PDFlib PDFlib は何十万もするらしい。。。弊社ではちょい無理です。FPDF は無償。これはメモメモ。12 月中に第 2 回関西 PHP 初心者勉強会やるらしいです。PHP で Twitter OAuth には、twmode とかこのブログとかで使ったことがあるので、これは馴染み深かった。PHP でも簡単にできるんですね〜php でも jubatus データを突っ込むと、そのデータが何かを類推してくれる。例えば、はてブのタグの suggestion とか。でも試作は失敗とのことwfacebook アプリ heroku 使うやつだったけかな。雛形が用意されているので、結構簡単に作れるらしい。プロジェクタートラブルはご愁傷様でした。","link":"https://masutaka.net/2011-11-26-4/","isoDate":"2011-11-26T03:00:00.000Z","dateMiliSeconds":1322276400000,"authorName":"masutaka"},{"title":"第2回 関西PHP勉強会 セッション２ PHP5.4おいしさつまみぐい","content":"第2回 関西PHP勉強会 目次に戻る  @tanakahisateru さんの発表。\n5.4 はゆるやかな変更\n5.4 から 2 進数リテラル(例: 0b1111)が使える。\nArray Short Syntax array() 使わなくても [] でいいやつね。\nYAML 使わなくてもシンプルにできるかも、とのこと。\nBuiltin Server &ldquo;php -S localhost :8080&rdquo; で簡単起動。PHP5.3 とかの既存の環境を変更\nせずに試せる。.php だけでなく、static なファイル .html とかも表示で\nきる。引数にビルトインサーバ用スクリプトを指定すると、CakePHP とか\nの .htaccess を要求するフレームワークも動かせる。\nTRAIT 親クラス以外からもメソッド実装を持って来れる。\nclass の代わりに、trait で定義する。\n使いたい class でだけ use で使う。\nこれはいい！\nクロージャ 5.3 まではクロージャの中で $this を使えなかった。","contentSnippet":"第2回 関西PHP勉強会 目次に戻る  @tanakahisateru さんの発表。5.4 はゆるやかな変更5.4 から 2 進数リテラル(例: 0b1111)が使える。Array Short Syntax array() 使わなくても [] でいいやつね。YAML 使わなくてもシンプルにできるかも、とのこと。Builtin Server “php -S localhost :8080” で簡単起動。PHP5.3 とかの既存の環境を変更せずに試せる。.php だけでなく、static なファイル .html とかも表示できる。引数にビルトインサーバ用スクリプトを指定すると、CakePHP とかの .htaccess を要求するフレームワークも動かせる。TRAIT 親クラス以外からもメソッド実装を持って来れる。class の代わりに、trait で定義する。使いたい class でだけ use で使う。これはいい！クロージャ 5.3 まではクロージャの中で $this を使えなかった。","link":"https://masutaka.net/2011-11-26-3/","isoDate":"2011-11-26T02:00:00.000Z","dateMiliSeconds":1322272800000,"authorName":"masutaka"},{"title":"第2回 関西PHP勉強会 セッション１ あらためてPHP5.3","content":"第2回 関西PHP勉強会 目次に戻る  @shin1x1 さんの発表。\nPHP5.2 から大きく機能追加されたとのこと。PHP6 のリリースがいつにな\nるか分からないので、PHP6 から PHP5.3 にバックポートされたためだそう。\nclass の外でも const が使えるのはうれしいですね〜。と言いたいところ\nですが、define しか知りませんでした。。でも今試しました。OK! できた！\nconst AAA = &#39;huga&#39;;\t/* クラスの中に書いても外に書いても OK */ pr(self::AAA);\t/* クラスの中の時 */ pr(AAA);\t/* クラスの外の時 */ namespace PHP5.3 未満には存在しなかった。グローバルネームスペースのみ。\nバックスラッシュで階層化。(なんでスラッシュじゃないの？と思った。)\n影響は .php ファイルのみ。\nuse でインポート、エイリアス\nクラス、インターフェイス名と、関数、変数とでは名前空間の検索方法が異なる。\n名前空間の付け方 -&gt; PSR-0 でルール化\n結論。ハマりどころを抑えておけば問題なし。\nクロージャ 似たような処理を関数化することは多いと思うが、クロージャを使えばメ\nソッドを関数の中に閉じ込められる。うまく使うと、保守性の高いコーディ\nングが出来そう。そういえば C 言語でもクロージャは書けるみたいですね。\n[2010-03-30-1] LSB Late Static Bindings 遅延静的束縛\n実行時に評価される。\nself:: を static:: にするだけ。\nまとめ PHP マニュアル読みなさい。","contentSnippet":"第2回 関西PHP勉強会 目次に戻る  @shin1x1 さんの発表。PHP5.2 から大きく機能追加されたとのこと。PHP6 のリリースがいつになるか分からないので、PHP6 から PHP5.3 にバックポートされたためだそう。class の外でも const が使えるのはうれしいですね〜。と言いたいところですが、define しか知りませんでした。。でも今試しました。OK! できた！const AAA = 'huga';\t/* クラスの中に書いても外に書いても OK */ pr(self::AAA);\t/* クラスの中の時 */ pr(AAA);\t/* クラスの外の時 */ namespace PHP5.3 未満には存在しなかった。グローバルネームスペースのみ。バックスラッシュで階層化。(なんでスラッシュじゃないの？と思った。)影響は .php ファイルのみ。use でインポート、エイリアスクラス、インターフェイス名と、関数、変数とでは名前空間の検索方法が異なる。名前空間の付け方 -> PSR-0 でルール化結論。ハマりどころを抑えておけば問題なし。クロージャ 似たような処理を関数化することは多いと思うが、クロージャを使えばメソッドを関数の中に閉じ込められる。うまく使うと、保守性の高いコーディングが出来そう。そういえば C 言語でもクロージャは書けるみたいですね。[2010-03-30-1] LSB Late Static Bindings 遅延静的束縛実行時に評価される。self:: を static:: にするだけ。まとめ PHP マニュアル読みなさい。","link":"https://masutaka.net/2011-11-26-2/","isoDate":"2011-11-26T01:00:00.000Z","dateMiliSeconds":1322269200000,"authorName":"masutaka"},{"title":"初めて PHP 勉強会に参加してきた！ #kphpug","content":"ごあいさつ PHP 界隈の皆様はじめまして。@masutaka です。PHP 歴は 8 ヶ月ほどです。\n普段は Emacs に住んでいます。組み込み系の業務で C 言語を 11 年くら\nい使っていた関係で、私のPHP コードはすごく C 言語っぽい気がしてま\nす&hellip;。他、EmacsLisp と Ruby でたまに小粒なツールを作ります。\n第2回 関西PHP勉強会  というわけで、第2回 関西PHP勉強会に参加してきました。PHP 勉強会に参\n加するのは今回が初めてです。Emacs とも Ruby とも雰囲気が違って良い\nですね〜。初心者が一番参加しやすいんじゃないでしょうか。楽しかった。\n@shin1x1 さんを初めとする運営の方々、ありがとうございました。\n長くなってしまったので、各セッションは別記事にしました。ほとんど個\n人的なメモです。\nセッション１ あらためてPHP5.3 セッション２ PHP5.4おいしさつまみぐい LT(Lightning Talk) 来年の 5 月に PHP カンファレンス関西が開かれる予定とのこと。これは\n行かねば！","contentSnippet":"ごあいさつ PHP 界隈の皆様はじめまして。@masutaka です。PHP 歴は 8 ヶ月ほどです。普段は Emacs に住んでいます。組み込み系の業務で C 言語を 11 年くらい使っていた関係で、私のPHP コードはすごく C 言語っぽい気がしてます…。他、EmacsLisp と Ruby でたまに小粒なツールを作ります。第2回 関西PHP勉強会  というわけで、第2回 関西PHP勉強会に参加してきました。PHP 勉強会に参加するのは今回が初めてです。Emacs とも Ruby とも雰囲気が違って良いですね〜。初心者が一番参加しやすいんじゃないでしょうか。楽しかった。@shin1x1 さんを初めとする運営の方々、ありがとうございました。長くなってしまったので、各セッションは別記事にしました。ほとんど個人的なメモです。セッション１ あらためてPHP5.3 セッション２ PHP5.4おいしさつまみぐい LT(Lightning Talk) 来年の 5 月に PHP カンファレンス関西が開かれる予定とのこと。これは行かねば！","link":"https://masutaka.net/2011-11-26-1/","isoDate":"2011-11-26T00:00:00.000Z","dateMiliSeconds":1322265600000,"authorName":"masutaka"},{"title":"英語文法メモ４ - 助動詞","content":"難しいし、量が多いしで、part2 の 3 節までまとめて力尽きた。\n能力・許可を表す助動詞 can と be able to は同じ意味。ただし、will can のように助動詞を２つ\n続けることは出来ないので、その場合は will be able to を使う。\nただし、could と was able to には違いがある。\n(1) She could play the violin at five. (2) I was able to swim 200 meters yesterday. 過去において「〜する能力があった」という過去の能力を表す場合は、\n(1) のように could を用いることも出来るし、was able to を用いること\nも出来る。反対に「〜することが(実際に)できた」という過去に実行した\nことを表すときには、(2) のように was able to を用いる。could を用い\nることはできない。ややこしい。。。\n許可を表したい時は、can または may を使う。May I &hellip;? はやや堅苦し\nい言い方なので、Can I &hellip;? が使われることが多いとのこと。","contentSnippet":"難しいし、量が多いしで、part2 の 3 節までまとめて力尽きた。能力・許可を表す助動詞 can と be able to は同じ意味。ただし、will can のように助動詞を２つ続けることは出来ないので、その場合は will be able to を使う。ただし、could と was able to には違いがある。(1) She could play the violin at five. (2) I was able to swim 200 meters yesterday. 過去において「〜する能力があった」という過去の能力を表す場合は、(1) のように could を用いることも出来るし、was able to を用いることも出来る。反対に「〜することが(実際に)できた」という過去に実行したことを表すときには、(2) のように was able to を用いる。could を用いることはできない。ややこしい。。。許可を表したい時は、can または may を使う。May I …? はやや堅苦しい言い方なので、Can I …? が使われることが多いとのこと。","link":"https://masutaka.net/2011-11-22-1/","isoDate":"2011-11-22T00:00:00.000Z","dateMiliSeconds":1321920000000,"authorName":"masutaka"},{"title":"Emacs での UNIX 時間操作まとめ","content":"Emacs で UNIX 時間が必要になったので、いろいろ調べました。\nそういうわけで個人的なメモになります。\n;; 任意の日時の UNIX 時間を求める。 (let ((year 2011)  (month 11)  (day 21)  (hour 18)  (minutes 30)  (seconds 00))  (time-to-seconds  (encode-time seconds minutes hour day month year))) =&gt; 1321867800.0  ;; UNIX 時間を Emacs 時間(?) に変換する。 (seconds-to-time 1321867800.0) =&gt; (20170 6680 0)  ;; Emacs 時間を UNIX 時間に変換する。 (time-to-seconds &#39;(20170 6680 0)) =&gt; 1321867800.0  ;; Emacs 時間を日時に変換する。 (current-time-string &#39;(20170 6680 0)) =&gt; &#34;Mon Nov 21 18:30:00 2011&#34;  ;; Emacs 時間を任意のフォーマットの日時に変換する。 (format-time-string &#34;%Y/%m/%d %a %H:%M:%S&#34; &#39;(20170 6680 0)) =&gt; &#34;2011/11/21 月 18:30:00&#34;  ;; Emacs 時間を decode する。 (decode-time &#39;(20170 6680 0)) =&gt; (0 30 18 21 11 2011 1 nil 32400) ;; (SECONDS MINUTES HOUR DAY MONTH YEAR DOW DST ZONE)  ;; 現在の Emacs 時間を取得する。 (current-time) =&gt; (20170 6680 0) UNIX のコマンドラインと C 言語での取得方法はこちら。[2009-11-21-1] 追記(2011-11-22):","contentSnippet":"Emacs で UNIX 時間が必要になったので、いろいろ調べました。そういうわけで個人的なメモになります。;; 任意の日時の UNIX 時間を求める。 (let ((year 2011)  (month 11)  (day 21)  (hour 18)  (minutes 30)  (seconds 00))  (time-to-seconds  (encode-time seconds minutes hour day month year))) => 1321867800.0  ;; UNIX 時間を Emacs 時間(?) に変換する。 (seconds-to-time 1321867800.0) => (20170 6680 0)  ;; Emacs 時間を UNIX 時間に変換する。 (time-to-seconds '(20170 6680 0)) => 1321867800.0  ;; Emacs 時間を日時に変換する。 (current-time-string '(20170 6680 0)) => \"Mon Nov 21 18:30:00 2011\"  ;; Emacs 時間を任意のフォーマットの日時に変換する。 (format-time-string \"%Y/%m/%d %a %H:%M:%S\" '(20170 6680 0)) => \"2011/11/21 月 18:30:00\"  ;; Emacs 時間を decode する。 (decode-time '(20170 6680 0)) => (0 30 18 21 11 2011 1 nil 32400) ;; (SECONDS MINUTES HOUR DAY MONTH YEAR DOW DST ZONE)  ;; 現在の Emacs 時間を取得する。 (current-time) => (20170 6680 0) UNIX のコマンドラインと C 言語での取得方法はこちら。[2009-11-21-1] 追記(2011-11-22):","link":"https://masutaka.net/2011-11-21-1/","isoDate":"2011-11-21T00:00:00.000Z","dateMiliSeconds":1321833600000,"authorName":"masutaka"},{"title":"『自分のアタマで考えよう』を読んだ","content":" 前回とはうって変わり、表やグラフがよく出てくる分析的な本。考えるこ\nとについて突き詰めて考えた本なので、一度目を通しておいた方が良いと\n思う。\n以下、ビビッと来たところ。\nP168\n 日本企業は、与えられたフィルターの中で一番に選ばれるための商品を 開発することにはとても優れているのに、「今までになかった新たなフィ ルターを消費者に提示する」ことが必ずしも得意ではない、ということで す。 ビジネスの世界では、この「新たな選択基準＝新たなフィルターを提示 する」ことを、「ゲームのルールを変える」といいます。 P238\n①知識は思考の棚の中に整理すること ②空いている棚に入るべき、まだ手に入っていない知識を常に意識すること ③それらの知識が手に入れば言えるようになることを、事前に考えておくこと これが、ちきりんが考える「知識と思考の、理想的なカンケイ」なのです。 ","contentSnippet":"前回とはうって変わり、表やグラフがよく出てくる分析的な本。考えることについて突き詰めて考えた本なので、一度目を通しておいた方が良いと思う。以下、ビビッと来たところ。P168 日本企業は、与えられたフィルターの中で一番に選ばれるための商品を 開発することにはとても優れているのに、「今までになかった新たなフィ ルターを消費者に提示する」ことが必ずしも得意ではない、ということで す。 ビジネスの世界では、この「新たな選択基準＝新たなフィルターを提示 する」ことを、「ゲームのルールを変える」といいます。 P238①知識は思考の棚の中に整理すること ②空いている棚に入るべき、まだ手に入っていない知識を常に意識すること ③それらの知識が手に入れば言えるようになることを、事前に考えておくこと これが、ちきりんが考える「知識と思考の、理想的なカンケイ」なのです。","link":"https://masutaka.net/2011-11-18-1/","isoDate":"2011-11-18T00:00:00.000Z","dateMiliSeconds":1321574400000,"authorName":"masutaka"},{"title":"Emacs Lisp で buffer-local function を使う方法","content":"stackoverflow を見ていたら、面白いネタがあった のでメモしておきます。\n このコードは buffer-local variable のように動作します。\n通常のバッファでは &ldquo;this is a default message.&rdquo; をミニバッファに出\n力します。use-my-foo が定義されたバッファ((set ..) の行を評価する)\nでは &ldquo;this is a special message.&rdquo; を出力します。\n用途はちょっと思いつきませんが、こんなことも出来るのですね。","contentSnippet":"stackoverflow を見ていたら、面白いネタがあった のでメモしておきます。 このコードは buffer-local variable のように動作します。通常のバッファでは “this is a default message.” をミニバッファに出力します。use-my-foo が定義されたバッファ((set ..) の行を評価する)では “this is a special message.” を出力します。用途はちょっと思いつきませんが、こんなことも出来るのですね。","link":"https://masutaka.net/2011-11-05-1/","isoDate":"2011-11-05T00:00:00.000Z","dateMiliSeconds":1320451200000,"authorName":"masutaka"},{"title":"Git タグ操作のまとめ","content":"個人的なメモ その３\nその１と２は [2010-04-29-1] [2011-07-05-1] にあるよ。\n(1) タグ一覧を表示する。\n % git tag\n (2) タグ 1.0.50 を作成する。タグの種類は「注釈付きのタグ」\n % git tag -a 1.0.50\n (3) 後からタグ 1.0.50 を 9fceb02 に付ける。\n % git tag -a 1.0.50 9fceb02\n (4) タグ 1.0.50 の情報を表示する。\n % git show 1.0.50\n (5) リモートブランチ origin にタグ情報 1.0.50 を送信する。\n % git push origin 1.0.50\n (6) リモートブランチ origin にタグ情報全てを送信する。\n % git push origin &ndash;tags","contentSnippet":"個人的なメモ その３その１と２は [2010-04-29-1] [2011-07-05-1] にあるよ。(1) タグ一覧を表示する。 % git tag (2) タグ 1.0.50 を作成する。タグの種類は「注釈付きのタグ」 % git tag -a 1.0.50 (3) 後からタグ 1.0.50 を 9fceb02 に付ける。 % git tag -a 1.0.50 9fceb02 (4) タグ 1.0.50 の情報を表示する。 % git show 1.0.50 (5) リモートブランチ origin にタグ情報 1.0.50 を送信する。 % git push origin 1.0.50 (6) リモートブランチ origin にタグ情報全てを送信する。 % git push origin –tags","link":"https://masutaka.net/2011-11-02-1/","isoDate":"2011-11-02T00:00:00.000Z","dateMiliSeconds":1320192000000,"authorName":"masutaka"},{"title":"C で実装された Emacs のビルドイン関数にジャンプする","content":"Emacs ではほとんどの関数は Emacs Lisp で書かれているため、\nF1 f (describe-function) すると、定義されている *.el が一行目に\n表示されます。\n add-to-list is a compiled Lisp function in subr.el'. この例だと subr.el&rsquo; 上で Enter すると、定義元に飛べます。\n 中には高速化のために C で書かれた関数もあります。car や cdr、\nwrite-region などです。このような関数を F1 f すると、以下のように\n表示されます。\n car is a built-in function in C source code'. 同じように C source code&rsquo; 上で Enter すると、C のソースコードに飛\nべます。\n Enter 後に &ldquo;Emacs C source dir:&rdquo; というプロンプトが表示されてしまっ\nたら、ソースコードの展開先を指定してあげましょう。\nもう削除しちゃったよという人や、パッケージでインストールしてソース\nコードがない人は適当な場所に展開すると良いでしょう。\n% pwd /Users/masutaka % wget http://ftpmirror.","contentSnippet":"Emacs ではほとんどの関数は Emacs Lisp で書かれているため、F1 f (describe-function) すると、定義されている *.el が一行目に表示されます。 add-to-list is a compiled Lisp function in subr.el'. この例だと subr.el’ 上で Enter すると、定義元に飛べます。 中には高速化のために C で書かれた関数もあります。car や cdr、write-region などです。このような関数を F1 f すると、以下のように表示されます。 car is a built-in function in C source code'. 同じように C source code’ 上で Enter すると、C のソースコードに飛べます。 Enter 後に “Emacs C source dir:” というプロンプトが表示されてしまったら、ソースコードの展開先を指定してあげましょう。もう削除しちゃったよという人や、パッケージでインストールしてソースコードがない人は適当な場所に展開すると良いでしょう。% pwd /Users/masutaka % wget http://ftpmirror.","link":"https://masutaka.net/2011-11-01-1/","isoDate":"2011-11-01T00:00:00.000Z","dateMiliSeconds":1320105600000,"authorName":"masutaka"},{"title":"Emacs の recentf-mode をチューニングしたよ","content":"Emacs で最近開いたファイルのリストを自動保存する。 - 日々、とんは語る。 anything.el との組み合わせが素敵すぎますね。ずっと便利に使ってます。\nただ、ミニバッファに 30 秒ごとに &ldquo;Wrote ~/.emacs.d/.recentf&rdquo; と表示\nされるのが結構気になっていました。なので、メッセージを表示しないよ\nうに、且つ必要時以外は recentf-save-file に保存しないようにしました。\n 設定は @tomoyaton さんの記事と重複してますが、分かりづらくなるので\n私の recentf 関連の設定を全て記載しています。recentf-save-file をデ\nフォルトの ~/.recentf から ~/.emacs.d/.recentf にも変更しています。\n@cvmat さんにはいろいろというか、ほぼ全てのアドバイスを頂きました。\nいつもありがとうございます。\n追記(2011-10-30):\nコメント欄でよりシンプルな方法を教えて頂いたので、コードを差し替え\nました。","contentSnippet":"Emacs で最近開いたファイルのリストを自動保存する。 - 日々、とんは語る。 anything.el との組み合わせが素敵すぎますね。ずっと便利に使ってます。ただ、ミニバッファに 30 秒ごとに “Wrote ~/.emacs.d/.recentf” と表示されるのが結構気になっていました。なので、メッセージを表示しないように、且つ必要時以外は recentf-save-file に保存しないようにしました。 設定は @tomoyaton さんの記事と重複してますが、分かりづらくなるので私の recentf 関連の設定を全て記載しています。recentf-save-file をデフォルトの ~/.recentf から ~/.emacs.d/.recentf にも変更しています。@cvmat さんにはいろいろというか、ほぼ全てのアドバイスを頂きました。いつもありがとうございます。追記(2011-10-30):コメント欄でよりシンプルな方法を教えて頂いたので、コードを差し替えました。","link":"https://masutaka.net/2011-10-30-2/","isoDate":"2011-10-30T01:00:00.000Z","dateMiliSeconds":1319936400000,"authorName":"masutaka"},{"title":"英語文法メモ３ - 完了形","content":"英語は実に時制を厳密に扱いますね。ってことで今回は完了形です。\n現在完了形 現在完了形は過去と今の状況をつなげて、「どういういきさつを経て、今、\nどうなっているのか」を一気に表現する形である。したがって、現在完了\n形が用いられている場合、その内容は「今の状況」とかかわりをもってい\nることになる。\n※『Forest』には現在形、過去形、未来形、現在完了形などが図入りで説\n明されている。それを見ると分かりやすい。\n「宿題が終わったから、遊びに行こうよ。」\n × I finished my homework, so let&rsquo;s go out to play.\n[2011-10-25-1] にも書いたとおり、過去形は現在とは無関係の過去の事柄\nを述べるのに使われる。以下が正解。\n○ I have finished my homework, so let&rsquo;s go out to play.\n 「まだ決心していないんだ」\n × I don&rsquo;t decided.\nこれも [2011-10-25-1] に書いたとおり、動作動詞の現在形は「反復・習\n慣」を表すので、使えない。以下が正解。\n○ I have not decided yet.\n ※ 最近のアメリカ英語では、現在完了形を使うべきところで過去形を使う\nことがあるとのこと(フィリピン英語もその傾向があるかも)。『Forest』\nには続けて、「だからと言って、むやみに過去形を使うことはせず、現在\n完了形と過去形を使い分けるようにしよう」と書いてあった。\n現在完了形は、今の状況を述べるものなので、明らかに過去を表す表現と\nともに使うことは出来ない。\nyesterday, last night[week/month/year], then, just now, when I was .","contentSnippet":"英語は実に時制を厳密に扱いますね。ってことで今回は完了形です。現在完了形 現在完了形は過去と今の状況をつなげて、「どういういきさつを経て、今、どうなっているのか」を一気に表現する形である。したがって、現在完了形が用いられている場合、その内容は「今の状況」とかかわりをもっていることになる。※『Forest』には現在形、過去形、未来形、現在完了形などが図入りで説明されている。それを見ると分かりやすい。「宿題が終わったから、遊びに行こうよ。」 × I finished my homework, so let’s go out to play.[2011-10-25-1] にも書いたとおり、過去形は現在とは無関係の過去の事柄を述べるのに使われる。以下が正解。○ I have finished my homework, so let’s go out to play. 「まだ決心していないんだ」 × I don’t decided.これも [2011-10-25-1] に書いたとおり、動作動詞の現在形は「反復・習慣」を表すので、使えない。以下が正解。○ I have not decided yet. ※ 最近のアメリカ英語では、現在完了形を使うべきところで過去形を使うことがあるとのこと(フィリピン英語もその傾向があるかも)。『Forest』には続けて、「だからと言って、むやみに過去形を使うことはせず、現在完了形と過去形を使い分けるようにしよう」と書いてあった。現在完了形は、今の状況を述べるものなので、明らかに過去を表す表現とともに使うことは出来ない。yesterday, last night[week/month/year], then, just now, when I was .","link":"https://masutaka.net/2011-10-30-1/","isoDate":"2011-10-30T00:00:00.000Z","dateMiliSeconds":1319932800000,"authorName":"masutaka"},{"title":"英語文法メモ２ - 動詞と時制","content":"日本語とは時制の解釈が少し違うので注意。\n現在形と現在進行形 現在形は現在だけのことではなく、「今」を中心として、過去から未来に\nわたるある程度の期間に成り立つ行為や状態を表す。\n動詞には状態を表す「状態動詞」と動作を表す「動作動詞」がある。\n状態動詞 特に必要がない限り進行形にはしない。\n(1)心理を表す動詞\n like, love, hate, hope, want, think, believe, know, understand,\nremember, forget\n (2)知覚・感覚を表す動詞\n see, hear, feel, smell, taste\n (3)その他の状態を表す動詞\n be, remain, have, own, belong to, contain, exist, resemble\n 動作動詞 「動作動詞」の現在形は、「今」を中心として過去から未来にわたってく\nり返される動作を表す。一回きりの動作は基本的に表せない。\n I always drink coffee at breakfast.\n 過去・現在・未来を通して変化のない事実を表すことも出来る。\n The earth goes around the sun.\n 過去形と過去進行形 現在とは無関係の過去の事柄を述べるのに使われる。(この点は日本語にな\nいこだわりだと思う。)\n過去進行形では、無限にある過去のうちの「ある１点」でしている最中だっ\nたことを表しているので、「いつしていたか」を示す必要がある。\n I was watching TV around noon.","contentSnippet":"日本語とは時制の解釈が少し違うので注意。現在形と現在進行形 現在形は現在だけのことではなく、「今」を中心として、過去から未来にわたるある程度の期間に成り立つ行為や状態を表す。動詞には状態を表す「状態動詞」と動作を表す「動作動詞」がある。状態動詞 特に必要がない限り進行形にはしない。(1)心理を表す動詞 like, love, hate, hope, want, think, believe, know, understand,remember, forget (2)知覚・感覚を表す動詞 see, hear, feel, smell, taste (3)その他の状態を表す動詞 be, remain, have, own, belong to, contain, exist, resemble 動作動詞 「動作動詞」の現在形は、「今」を中心として過去から未来にわたってくり返される動作を表す。一回きりの動作は基本的に表せない。 I always drink coffee at breakfast. 過去・現在・未来を通して変化のない事実を表すことも出来る。 The earth goes around the sun. 過去形と過去進行形 現在とは無関係の過去の事柄を述べるのに使われる。(この点は日本語にないこだわりだと思う。)過去進行形では、無限にある過去のうちの「ある１点」でしている最中だったことを表しているので、「いつしていたか」を示す必要がある。 I was watching TV around noon.","link":"https://masutaka.net/2011-10-25-1/","isoDate":"2011-10-25T00:00:00.000Z","dateMiliSeconds":1319500800000,"authorName":"masutaka"},{"title":"英語文法メモ１ - 動詞と文型","content":"英語の文法を一から勉強中です。\nそういうわけで、これは個人的なメモになります。\n文型 主語は S(Subject)、(述語)動詞は V(Verb)、目的語は O(Object)、\n補語は C(Complement) で表す。\n(1) SV - S は V する。  He smiled.\n (2) SVC - S は C である(V)。 S is C が成り立つ。\n補語は、動詞の後で主語について説明する。\n The movie was funny.\n (3) SVO - S は O を V する。  We cleaned the classroom.\n (4) SVOO&rsquo; - S は O に O&rsquo; を V する。  My uncle gave me his watch.","contentSnippet":"英語の文法を一から勉強中です。そういうわけで、これは個人的なメモになります。文型 主語は S(Subject)、(述語)動詞は V(Verb)、目的語は O(Object)、補語は C(Complement) で表す。(1) SV - S は V する。  He smiled. (2) SVC - S は C である(V)。 S is C が成り立つ。補語は、動詞の後で主語について説明する。 The movie was funny. (3) SVO - S は O を V する。  We cleaned the classroom. (4) SVOO’ - S は O に O’ を V する。  My uncle gave me his watch.","link":"https://masutaka.net/2011-10-22-1/","isoDate":"2011-10-22T00:00:00.000Z","dateMiliSeconds":1319241600000,"authorName":"masutaka"},{"title":"フィッシングサイトにはこうやって引っかかるんだ。こりゃ騙されるわ〜","content":"知り合いから Twitter の Direct Message にこんなのが。\n Found a funny picture of you! http://t.co/( 省略)\n 怪しいのは間違いなくて、実際彼はパスワードを抜かれていたわけですが、\nどうやったらこうなるのか興味があったので体験してみました。\n慎重にことを進める。 Twitter はパスワードが漏れるか、OAuth 認証を許可しない限り、アカウ\nントを乗っ取られることはないはずです。でも慎重を期すために、Web ブ\nラウザはメインでは使っていない Firefox を使うことにしました。\nアカウントも普段とは別なのを使います。http://twitter.com にアクセス\nして、一旦ログアウト。以前、動作検証用に作ったサブアカウントでログ\nインしました。\n次におもむろにアドレスバーに Direct Message の URL を貼り付けて、\nReturn キーを押下。twitter.com から「安全でない外部サイトに移動する\nけど問題ないか」聞かれました。このあたりでいつもと違う雰囲気。\n移動したところ、Twitter からログアウトしてしまいました。\n？？？\nその巧妙な仕組みを理解 よく分からないなあと思い、別な作業をしていましたが、また思い直して\n再挑戦。\n！？\ntwitter.com じゃない！！\n  これほど精巧な作りだと、アカウントとパスワードを打ってしまうのも無\n理はないです。すぐにタブを閉じないと、あとで忘れて打ってしまうかも。\nまとめ フィッシングサイトのへ防衛策として「リンクを不用意に踏まない」とよ\nく言われますが、なぜ踏んだだけで危険なのか、今まで理解していません\nでした。IE じゃあるまいし、踏んだだけで危険なわけないじゃんと。\nWeb サービスで認証が切れて、ログイン画面に飛ばされるのは良くあるこ\nとです。その「良くあること」を利用した巧妙な仕組みだなと、腹の底か\nら実感しました。\nTwitter 程度なら引っかかってもたかが知れていますが、オンラインバン\nキングや PayPal とかだと厳しいですね。","contentSnippet":"知り合いから Twitter の Direct Message にこんなのが。 Found a funny picture of you! http://t.co/( 省略) 怪しいのは間違いなくて、実際彼はパスワードを抜かれていたわけですが、どうやったらこうなるのか興味があったので体験してみました。慎重にことを進める。 Twitter はパスワードが漏れるか、OAuth 認証を許可しない限り、アカウントを乗っ取られることはないはずです。でも慎重を期すために、Web ブラウザはメインでは使っていない Firefox を使うことにしました。アカウントも普段とは別なのを使います。http://twitter.com にアクセスして、一旦ログアウト。以前、動作検証用に作ったサブアカウントでログインしました。次におもむろにアドレスバーに Direct Message の URL を貼り付けて、Return キーを押下。twitter.com から「安全でない外部サイトに移動するけど問題ないか」聞かれました。このあたりでいつもと違う雰囲気。移動したところ、Twitter からログアウトしてしまいました。？？？その巧妙な仕組みを理解 よく分からないなあと思い、別な作業をしていましたが、また思い直して再挑戦。！？twitter.com じゃない！！  これほど精巧な作りだと、アカウントとパスワードを打ってしまうのも無理はないです。すぐにタブを閉じないと、あとで忘れて打ってしまうかも。まとめ フィッシングサイトのへ防衛策として「リンクを不用意に踏まない」とよく言われますが、なぜ踏んだだけで危険なのか、今まで理解していませんでした。IE じゃあるまいし、踏んだだけで危険なわけないじゃんと。Web サービスで認証が切れて、ログイン画面に飛ばされるのは良くあることです。その「良くあること」を利用した巧妙な仕組みだなと、腹の底から実感しました。Twitter 程度なら引っかかってもたかが知れていますが、オンラインバンキングや PayPal とかだと厳しいですね。","link":"https://masutaka.net/2011-10-18-2/","isoDate":"2011-10-18T01:00:00.000Z","dateMiliSeconds":1318899600000,"authorName":"masutaka"},{"title":"Emacs auto-mode-alist の \"\\'\" ってなんなの〜？","content":"昨晩の Emacs ミニミニ勉強会のネタ。\n@tomoyaton 「auto-mode-alist って、(&quot;\\.el\\&rsquo;&quot; . emacs-lisp-mode)\nとかが設定されてるけど、なんで &ldquo;$&rdquo; じゃなくて &ldquo;\\&rsquo;&rdquo; なの〜？」\n@masutaka 「言われてみれば確かにそうですね。でも Mule 時代は\n(&quot;\\.el$&quot; . emacs-lisp-mode) って設定されてた気がしますよ。」\n結論から言うと、改行にマッチさせないよう、より厳格にしているからだっ\nた。Mule 時代は &ldquo;\\&rsquo;&rdquo; がなかったのかな。\n&ldquo;$&rdquo; は文字列の終端と改行にマッチする。\n;; hoge.el には当然マッチ (string-match &#34;\\\\.el$&#34; &#34;hoge.el&#34;) =&gt; 4  ;; hoge.ell には当然マッチしない。 (string-match &#34;\\\\.el$&#34; &#34;hoge.ell&#34;) nil  ;; あれ、hoge.el の後ろが改行でもマッチするんだけど。。。 (string-match &#34;\\\\.el$&#34; &#34;hoge.el &#34;) =&gt; 4 &ldquo;\\&rsquo;&rdquo; は文字列の終端のみにマッチする。\n;; hoge.el には当然マッチ (string-match &#34;\\\\.el\\\\&#39;&#34; &#34;hoge.el&#34;) =&gt; 4  ;; hoge.ell には当然マッチしない。ここまで同じ。 (string-match &#34;\\\\.el\\\\&#39;&#34; &#34;hoge.","contentSnippet":"昨晩の Emacs ミニミニ勉強会のネタ。@tomoyaton 「auto-mode-alist って、(\"\\.el\\’\" . emacs-lisp-mode)とかが設定されてるけど、なんで “$” じゃなくて “\\’” なの〜？」@masutaka 「言われてみれば確かにそうですね。でも Mule 時代は(\"\\.el$\" . emacs-lisp-mode) って設定されてた気がしますよ。」結論から言うと、改行にマッチさせないよう、より厳格にしているからだった。Mule 時代は “\\’” がなかったのかな。“$” は文字列の終端と改行にマッチする。;; hoge.el には当然マッチ (string-match \"\\\\.el$\" \"hoge.el\") => 4  ;; hoge.ell には当然マッチしない。 (string-match \"\\\\.el$\" \"hoge.ell\") nil  ;; あれ、hoge.el の後ろが改行でもマッチするんだけど。。。 (string-match \"\\\\.el$\" \"hoge.el \") => 4 “\\’” は文字列の終端のみにマッチする。;; hoge.el には当然マッチ (string-match \"\\\\.el\\\\'\" \"hoge.el\") => 4  ;; hoge.ell には当然マッチしない。ここまで同じ。 (string-match \"\\\\.el\\\\'\" \"hoge.","link":"https://masutaka.net/2011-10-18-1/","isoDate":"2011-10-18T00:00:00.000Z","dateMiliSeconds":1318896000000,"authorName":"masutaka"},{"title":"シェアハウスに住んでそろそろ半年になるから、ちょっと自分の考えをまとめておこうか。","content":"ギークハウス神戸 - いわゆるシェアハウスに住み始めてそろそろ半年にな\nります。\nシェアハウスではその名のとおり、いろんなものをシェアできたり、家賃\nや光熱費を節約できるのが良いです。\n一人暮らしでは買うと余ってしまう食材(ニンニク、生姜、生ハム等)が買 える。個人的には、好きな時にペペロンチーノを作れるのは結構嬉しい。 一人暮らしではまず買わないものをシェア出来る。例えばここには全自動 エスプレッソマシーンがあるので、コーヒーが飲み放題。 家電をシェアできる。今回私は供給者なので、メリットはまあ、ないけど。^^; 本(技術書や漫画)をシェアできる。 知識をシェアできる。毎日がミニミニ勉強会。 反面、他人と住むことになるので、やり方や考えに戸惑ったりイラっとす\nることもままあります。\n逆に、今一緒に住んでいる人から見ると、私は細かいヤツと思われている\nと思います。まあ確かにそうで、平均以上に掃除とか片付けはやる方です。\nでも、一人暮らしの時は手を抜くことも多かったです。\n洗い物を丸１日以上放置することはザラでしたし、ガスレンジは油でぐっ\nちゃぐちゃ。掃除機は１週間に１回かけてましたが、トイレ掃除は月に１\n回、風呂掃除は年に１〜２回程度でした。\n今は食べたらすぐに食器を洗って、ガスレンジは汚れる前に掃除。掃除機\nの頻度は同じ(本当は週２回にしたい)ですが、トイレ掃除は週１回やるよ\nうに指示し、風呂掃除も月に１回くらいやってます。\nなんで一人暮らしの時よりマメなのかというと、私はシェアハウスは自分\nの家ではないと思っているからです。\nシェアハウスは自分の家ではない シェアハウスは、「プライベートな空間」と「パブリックな空間」に分け\nられますよね。\n「プライベートな空間」は自分の部屋です。完全なるプライペートスペー\nスです。火事や異臭、騒音を発生させなければどうぞご勝手に..と思って\nいます。本当は全部屋に鍵を付けたいくらい。\n「パブリックな空間」はリビングやキッチン、トイレ、風呂、玄関などの\n共用スペースです。言うまでもありませんが、ここは自分の部屋ではあり\nません。\n私はこの「パブリックな空間」が、同じ家でありながら自分の家ではない\nと思っています。\n「パブリックな空間」での私的なルール この記事を書くためにあれこれ考えていたわけですが、私は自分で &ldquo;「パ\nブリックな空間」での私的なルール&rdquo; を決めて、実行していたことに気づ\nきました。例えばこんな感じです。\n(1) 使った食器やペットボトルはすぐ洗う。\n→ 放置したら邪魔だし、もっと放置したら他の人に洗わせることになるか\nらです。\n(2) 私物は置かない。もしくは置きっぱなしにしない。\n→ 他人から見ると、放置された私の物は邪魔以外何者でもないからです。\n(3) よその家でやるべきでないことはシェアハウスでもやらない。\n→トイレのドアを開けっ放しにしないとか&hellip;。(こんなのは無意識に出来\nるように、子供時代に躾けられないのかなあ。謎。)\n(4) 食事を作ってくれる人には最大限の敬意を払う。\n→ な〜んて書きましたが、まあ料理以外のことをしなくて済むように協力\nするってだけです。食器を拭いて作業スペース確保したりだとか、テーブ\nル拭いたり箸並べたりするだとか。ルールって言うよりも、子供時代にさ\nんざん手伝わされたので、そうしないと気持ち悪いって方が強いかな。\nパブリックな空間だと意識が変わる 以上のように「パブリックな空間」は自分の家ですらないと思っているの\nで、自分の家だとサボりがちな掃除とか片付けも「面倒だけどやらないと\nなあ」と思いながらもやっています。大人にならないといけないわけです\nね。\n最初のうちは、指示しないと動いてくれなかったり(※)、指示してもなか\nなかやらないことにイライラしてました。でも今は「人に求めてはいけな","contentSnippet":"ギークハウス神戸 - いわゆるシェアハウスに住み始めてそろそろ半年になります。シェアハウスではその名のとおり、いろんなものをシェアできたり、家賃や光熱費を節約できるのが良いです。一人暮らしでは買うと余ってしまう食材(ニンニク、生姜、生ハム等)が買 える。個人的には、好きな時にペペロンチーノを作れるのは結構嬉しい。 一人暮らしではまず買わないものをシェア出来る。例えばここには全自動 エスプレッソマシーンがあるので、コーヒーが飲み放題。 家電をシェアできる。今回私は供給者なので、メリットはまあ、ないけど。^^; 本(技術書や漫画)をシェアできる。 知識をシェアできる。毎日がミニミニ勉強会。 反面、他人と住むことになるので、やり方や考えに戸惑ったりイラっとすることもままあります。逆に、今一緒に住んでいる人から見ると、私は細かいヤツと思われていると思います。まあ確かにそうで、平均以上に掃除とか片付けはやる方です。でも、一人暮らしの時は手を抜くことも多かったです。洗い物を丸１日以上放置することはザラでしたし、ガスレンジは油でぐっちゃぐちゃ。掃除機は１週間に１回かけてましたが、トイレ掃除は月に１回、風呂掃除は年に１〜２回程度でした。今は食べたらすぐに食器を洗って、ガスレンジは汚れる前に掃除。掃除機の頻度は同じ(本当は週２回にしたい)ですが、トイレ掃除は週１回やるように指示し、風呂掃除も月に１回くらいやってます。なんで一人暮らしの時よりマメなのかというと、私はシェアハウスは自分の家ではないと思っているからです。シェアハウスは自分の家ではない シェアハウスは、「プライベートな空間」と「パブリックな空間」に分けられますよね。「プライベートな空間」は自分の部屋です。完全なるプライペートスペースです。火事や異臭、騒音を発生させなければどうぞご勝手に..と思っています。本当は全部屋に鍵を付けたいくらい。「パブリックな空間」はリビングやキッチン、トイレ、風呂、玄関などの共用スペースです。言うまでもありませんが、ここは自分の部屋ではありません。私はこの「パブリックな空間」が、同じ家でありながら自分の家ではないと思っています。「パブリックな空間」での私的なルール この記事を書くためにあれこれ考えていたわけですが、私は自分で “「パブリックな空間」での私的なルール” を決めて、実行していたことに気づきました。例えばこんな感じです。(1) 使った食器やペットボトルはすぐ洗う。→ 放置したら邪魔だし、もっと放置したら他の人に洗わせることになるからです。(2) 私物は置かない。もしくは置きっぱなしにしない。→ 他人から見ると、放置された私の物は邪魔以外何者でもないからです。(3) よその家でやるべきでないことはシェアハウスでもやらない。→トイレのドアを開けっ放しにしないとか…。(こんなのは無意識に出来るように、子供時代に躾けられないのかなあ。謎。)(4) 食事を作ってくれる人には最大限の敬意を払う。→ な〜んて書きましたが、まあ料理以外のことをしなくて済むように協力するってだけです。食器を拭いて作業スペース確保したりだとか、テーブル拭いたり箸並べたりするだとか。ルールって言うよりも、子供時代にさんざん手伝わされたので、そうしないと気持ち悪いって方が強いかな。パブリックな空間だと意識が変わる 以上のように「パブリックな空間」は自分の家ですらないと思っているので、自分の家だとサボりがちな掃除とか片付けも「面倒だけどやらないとなあ」と思いながらもやっています。大人にならないといけないわけですね。最初のうちは、指示しないと動いてくれなかったり(※)、指示してもなかなかやらないことにイライラしてました。でも今は「人に求めてはいけな","link":"https://masutaka.net/2011-10-15-1/","isoDate":"2011-10-15T00:00:00.000Z","dateMiliSeconds":1318636800000,"authorName":"masutaka"},{"title":"GNU Screenの別Windowsのカレントディレクトリに移動するzshスクリプト、cddを直した","content":"cdd - screen の別WINDOWのカレントディレクトリに移動する zsh スクリプト - coﾘ・ー・ﾝ＜2nd life 結論から言うと結構便利です。GNU Screen を使っている zsh ユーザーは\n是非お試しを。\n私の環境では以下のエラーが発生するので、修正して gist にアップしま\nした。(coderepos へのコミットの仕方が分からないし、人によっては必要\nない修正なので、gist にアップしました。)\n &ldquo;unsetopt clobber&rdquo;(既存のファイルへの上書きリダイレクト防止) を設\n定していると 49 行目付近の &ldquo;echo &ldquo;\\n&rdquo; &raquo; &ldquo;$CDD_PWD_FILE&rdquo;&rdquo; がエラー\nになる。 $HOME/.zsh が存在しないとエラーになる。  あと、cdadd と cddel がそれぞれ _cdadd と _cddel でないと使えなかっ\nたので、直しました。\n 追記(2012-05-18):\n最近は使ってないというか、存在を忘れてますね〜。。\nところでこんな記事がありました。\ncdd を tmux, bash, multi session +α に対応した - カワイイはつくれる ","contentSnippet":"cdd - screen の別WINDOWのカレントディレクトリに移動する zsh スクリプト - coﾘ・ー・ﾝ＜2nd life 結論から言うと結構便利です。GNU Screen を使っている zsh ユーザーは是非お試しを。私の環境では以下のエラーが発生するので、修正して gist にアップしました。(coderepos へのコミットの仕方が分からないし、人によっては必要ない修正なので、gist にアップしました。) “unsetopt clobber”(既存のファイルへの上書きリダイレクト防止) を設定していると 49 行目付近の “echo “\\n” » “$CDD_PWD_FILE”” がエラーになる。 $HOME/.zsh が存在しないとエラーになる。  あと、cdadd と cddel がそれぞれ _cdadd と _cddel でないと使えなかったので、直しました。 追記(2012-05-18):最近は使ってないというか、存在を忘れてますね〜。。ところでこんな記事がありました。cdd を tmux, bash, multi session +α に対応した - カワイイはつくれる","link":"https://masutaka.net/2011-10-12-2/","isoDate":"2011-10-12T01:00:00.000Z","dateMiliSeconds":1318381200000,"authorName":"masutaka"},{"title":"Emacsデフォルトの機能で改行やタブ、スペースを色づけできるようになってた","content":"今回も、弊社で毎日行われている、ミニミニ Emacs 勉強会で @tomoyaton から教えてもらいました。\nEmacs23 からは M-x global-whitespace-mode すると、改行やタブ、\nスペースを色づけできるようになってます。常に表示させるには\n~/.emacs に以下を書けば OK です。\n(global-whitespace-mode 1) でも私は改行と全角スペースだけ色付けすればよいので、上記に加えて\n下記も設定することにしました。\n;; スペースの定義は全角スペースとする。 (setq whitespace-space-regexp &#34;\\x3000+&#34;)  ;; 改行の色を変更 (set-face-foreground &#39;whitespace-newline &#34;gray40&#34;)  ;; 半角スペースと改行を除外 (dolist (d &#39;((space-mark ?\\ ) (newline-mark ?\\n)))  (setq whitespace-display-mappings  (delete-if  &#39;(lambda (e) (and (eq (car d) (car e))  (eq (cadr d) (cadr e))))  whitespace-display-mappings)))  ;; 全角スペースと改行を追加 (dolist (e &#39;((space-mark ?\\x3000 [?\\□])  (newline-mark ?","contentSnippet":"今回も、弊社で毎日行われている、ミニミニ Emacs 勉強会で @tomoyaton から教えてもらいました。Emacs23 からは M-x global-whitespace-mode すると、改行やタブ、スペースを色づけできるようになってます。常に表示させるには~/.emacs に以下を書けば OK です。(global-whitespace-mode 1) でも私は改行と全角スペースだけ色付けすればよいので、上記に加えて下記も設定することにしました。;; スペースの定義は全角スペースとする。 (setq whitespace-space-regexp \"\\x3000+\")  ;; 改行の色を変更 (set-face-foreground 'whitespace-newline \"gray40\")  ;; 半角スペースと改行を除外 (dolist (d '((space-mark ?\\ ) (newline-mark ?\\n)))  (setq whitespace-display-mappings  (delete-if  '(lambda (e) (and (eq (car d) (car e))  (eq (cadr d) (cadr e))))  whitespace-display-mappings)))  ;; 全角スペースと改行を追加 (dolist (e '((space-mark ?\\x3000 [?\\□])  (newline-mark ?","link":"https://masutaka.net/2011-10-12-1/","isoDate":"2011-10-12T00:00:00.000Z","dateMiliSeconds":1318377600000,"authorName":"masutaka"},{"title":"第4回関西Emacsに参加＆発表してきました","content":"= (kansai-emacs #x04) ;=&gt; &ldquo;第四回関西Emacs勉強会&rdquo; - ぺっくブログミラー@peccul 先月の福岡Emacs [2011-09-28-1] に引き続き、関西Emacsに参加＆発表し\nてきました。今年の 4 月に行われた第 3 回に出席したこともあり、結構\nリラックスして望むことが出来ました。\n会場ははてなの京都本社です。ほとんどガラス張りで、風通しの良い会社\nの印象を受けました。\n  まずはいつもどおり、ポジションペーパーを使った自己紹介。\n 休憩をはさんで発表開始です。福岡 Emacs より、マニアックな発表者が多\nめの印象でした。みなさん Emacs が好きなんですね〜。\n@hitode909 さんや @kozo2 さんが紹介した smartchr.el は便利ですね。\nこんな設定をすると、M を 1 回打つと普通の &ldquo;M&rdquo;、2 回打つと &ldquo;増田です。&rdquo;\nに切り替わります。でも、&quot;=&quot; を &quot; = &quot; にするのは私にはちょっと合わな\nいかも。気が向いたらまた設定します。\n(define-key global-map (kbd &#34;M&#34;) (smartchr &#39;(&#34;M&#34; &#34;増田です。&#34;))) dmacro.el もその場でインストール。なんでインストールしてなかったの\nかなあ？謎。\n私も twittering-mode.el の布教活動をしてきました。半分以上の出席者がす\nでに使っていましたが、その場でインストールして試す人もいて、初回と\nしては成功だったのかなと思います。繰り返しますが、Emacs を使えるよ\nうになりたければ、よく使うサービスを Emacs で使うのが一番の近道です。\n 懇親会は会場と同じ場所で、ピザと寿司とビール。ワールドカフェの影響\nなのか、会場と同じ場所が功を奏したのか、結構盛り上がって Emacs 談義","contentSnippet":"= (kansai-emacs #x04) ;=> “第四回関西Emacs勉強会” - ぺっくブログミラー@peccul 先月の福岡Emacs [2011-09-28-1] に引き続き、関西Emacsに参加＆発表してきました。今年の 4 月に行われた第 3 回に出席したこともあり、結構リラックスして望むことが出来ました。会場ははてなの京都本社です。ほとんどガラス張りで、風通しの良い会社の印象を受けました。  まずはいつもどおり、ポジションペーパーを使った自己紹介。 休憩をはさんで発表開始です。福岡 Emacs より、マニアックな発表者が多めの印象でした。みなさん Emacs が好きなんですね〜。@hitode909 さんや @kozo2 さんが紹介した smartchr.el は便利ですね。こんな設定をすると、M を 1 回打つと普通の “M”、2 回打つと “増田です。”に切り替わります。でも、\"=\" を \" = \" にするのは私にはちょっと合わないかも。気が向いたらまた設定します。(define-key global-map (kbd \"M\") (smartchr '(\"M\" \"増田です。\"))) dmacro.el もその場でインストール。なんでインストールしてなかったのかなあ？謎。私も twittering-mode.el の布教活動をしてきました。半分以上の出席者がすでに使っていましたが、その場でインストールして試す人もいて、初回としては成功だったのかなと思います。繰り返しますが、Emacs を使えるようになりたければ、よく使うサービスを Emacs で使うのが一番の近道です。 懇親会は会場と同じ場所で、ピザと寿司とビール。ワールドカフェの影響なのか、会場と同じ場所が功を奏したのか、結構盛り上がって Emacs 談義","link":"https://masutaka.net/2011-10-11-1/","isoDate":"2011-10-11T00:00:00.000Z","dateMiliSeconds":1318291200000,"authorName":"masutaka"},{"title":"migemo の Formula を作った","content":"migemo の Formula を作りました。本来であれば、pull request 送るもの\nだと思いますが、日本語に特化したツールのリクエストを送って良いか判\n断が付かなかったので、とりあえず gist に上げました。\n /usr/local/Library/Formula 以下に上記 Formula をコピーしたら、\n&ldquo;brew install migemo&rdquo; するだけでインストールできます。\nあとは以下を設定するだけです。\n# ~/.zshenv export RUBYLIB=/usr/local/lib/ruby ;; ~/.emacs (require &#39;migemo) 追記(2011-11-26):\npull request を送りました。 気長に待ちます。\n追記(2011-11-28):\n却下されました。migemo の Formula が depends_on &rsquo;emacs&rsquo; なことと、\nruby-(bsearch|romkan) が gems に存在するためとのこと。","contentSnippet":"migemo の Formula を作りました。本来であれば、pull request 送るものだと思いますが、日本語に特化したツールのリクエストを送って良いか判断が付かなかったので、とりあえず gist に上げました。 /usr/local/Library/Formula 以下に上記 Formula をコピーしたら、“brew install migemo” するだけでインストールできます。あとは以下を設定するだけです。# ~/.zshenv export RUBYLIB=/usr/local/lib/ruby ;; ~/.emacs (require 'migemo) 追記(2011-11-26):pull request を送りました。 気長に待ちます。追記(2011-11-28):却下されました。migemo の Formula が depends_on ’emacs’ なことと、ruby-(bsearch|romkan) が gems に存在するためとのこと。","link":"https://masutaka.net/2011-10-10-1/","isoDate":"2011-10-10T00:00:00.000Z","dateMiliSeconds":1318204800000,"authorName":"masutaka"},{"title":"Emacs で 5 秒間何もしないと、カレント行をハイライトさせる","content":"@tomoyaton からの耳より情報。\nちょっと席を立って戻ってきた時に、カーソル位置がすぐに分かります。\n常にハイライトじゃないので、邪魔にならないのがよいです♪\nカーソルを見失いがちな twittering-mode.el との組み合わせが良い感じです。\n(require &#39;hl-line+) (toggle-hl-line-when-idle) hl-line+.el は auto-install.el とかでインストールすると良いでしょう。\n5 秒を 3 秒に変えたい場合は、この設定で OK\n(setq hl-line-idle-interval 3) 色を変えたい場合は、こんな感じ。色の種類は M-x list-colors-display\nで確認できます。\n(set-face-background &#39;hl-line &#34;Yellow&#34;) 他にも色々 hl-line+.el に書いてあります。","contentSnippet":"@tomoyaton からの耳より情報。ちょっと席を立って戻ってきた時に、カーソル位置がすぐに分かります。常にハイライトじゃないので、邪魔にならないのがよいです♪カーソルを見失いがちな twittering-mode.el との組み合わせが良い感じです。(require 'hl-line+) (toggle-hl-line-when-idle) hl-line+.el は auto-install.el とかでインストールすると良いでしょう。5 秒を 3 秒に変えたい場合は、この設定で OK(setq hl-line-idle-interval 3) 色を変えたい場合は、こんな感じ。色の種類は M-x list-colors-displayで確認できます。(set-face-background 'hl-line \"Yellow\") 他にも色々 hl-line+.el に書いてあります。","link":"https://masutaka.net/2011-10-06-1/","isoDate":"2011-10-06T00:00:00.000Z","dateMiliSeconds":1317859200000,"authorName":"masutaka"},{"title":"『あしたのジョー』を観た","content":"原作は見たことないんだけど、香川さんの段平を見たくて観た。\n時系列がかなり崩されていた気がするけど、どうなんだろう？\n伊勢谷さんの軽量シーンはぜったい CG だろと思ったらガチだった。すげ〜\n山下君の体の作り込みもハンパないっす。\nでも一番の見せ場は段平がサンドバック叩くシーンで決まり(笑)。堂に入っ\nています。","contentSnippet":"原作は見たことないんだけど、香川さんの段平を見たくて観た。時系列がかなり崩されていた気がするけど、どうなんだろう？伊勢谷さんの軽量シーンはぜったい CG だろと思ったらガチだった。すげ〜山下君の体の作り込みもハンパないっす。でも一番の見せ場は段平がサンドバック叩くシーンで決まり(笑)。堂に入っています。","link":"https://masutaka.net/2011-09-30-2/","isoDate":"2011-09-30T01:00:00.000Z","dateMiliSeconds":1317344400000,"authorName":"masutaka"},{"title":"Redmine-1.2.1 にインストールしたプラグインやテーマ達","content":"自分用のメモです。ruby-enterprise-1.8.7-2011.03 をインストールした\nCentOS-5.6 上で Redmine-1.2.1 を動かしてます。\n→Redmine 1.2をCentOS5.6にインストールする手順 ｜ Redmine.JP Blog インストールしたプラグイン action_mailer_optional_tls  Ruby-1.8 では TLS を使ったメール送信をサポートされていないので、\nGmail から SMTP 送信したい場合は必須。インストールして動作確認まで\nしたが、今は使ってない。\nics export  Google カレンダーに Redmine のチケットを表示できるプラグイン。イン\nストールすると、チケット、ガントチャート、カレンダーに iCalendar の\nURL が表示される。便利。\niCalendar のフォーマットは管理→プラグインから変更できる。\n私は Issue rendering as を full time event にした。\n例によって Google カレンダーは fetch が遅いので、可能ならカレンダー\nアプリに直接 iCalendar の URL を登録した方がよい。iPhone にはなぜか\n登録できなかった。なぜだ！？\nCode Review  push された commit に対して、コードレビューできるプラグイン。\n# (cd vendor/plugins &amp;&amp; unzip redmine_code_review-0.","contentSnippet":"自分用のメモです。ruby-enterprise-1.8.7-2011.03 をインストールしたCentOS-5.6 上で Redmine-1.2.1 を動かしてます。→Redmine 1.2をCentOS5.6にインストールする手順 ｜ Redmine.JP Blog インストールしたプラグイン action_mailer_optional_tls  Ruby-1.8 では TLS を使ったメール送信をサポートされていないので、Gmail から SMTP 送信したい場合は必須。インストールして動作確認までしたが、今は使ってない。ics export  Google カレンダーに Redmine のチケットを表示できるプラグイン。インストールすると、チケット、ガントチャート、カレンダーに iCalendar のURL が表示される。便利。iCalendar のフォーマットは管理→プラグインから変更できる。私は Issue rendering as を full time event にした。例によって Google カレンダーは fetch が遅いので、可能ならカレンダーアプリに直接 iCalendar の URL を登録した方がよい。iPhone にはなぜか登録できなかった。なぜだ！？Code Review  push された commit に対して、コードレビューできるプラグイン。# (cd vendor/plugins && unzip redmine_code_review-0.","link":"https://masutaka.net/2011-09-30-1/","isoDate":"2011-09-30T00:00:00.000Z","dateMiliSeconds":1317340800000,"authorName":"masutaka"},{"title":"ターミナルの zsh と Emacs を風のように駆け抜ける！","content":"福岡Emacs 行ってきました！\nMew 関係者がお二人(@nom4476 @moepanda )もいらっしゃったり、Vim 使い\nが 1/3 くらい占めていて案外新鮮だったり、ワールドカフェ という対話手\n法に感心したり(残念ながら時間切れで途中で退席しましたが)で、とって\nも楽しかったです！\n嬉しかったことは @moepanda さんにお会いできたことと、@nom4476 さん\nが「このブログ読んでますよ」と仰ってくれたこと。うれしはずかし&hellip;(^^)\n私も「Langrich社でのEmacs活用、langrich.el 」というお題でデビューを\n飾ることが出来ました。8888\nそれぞれの発表も面白かったのですが、一番気になったのが発表の中でど\nなたかが、ターミナルの現在のディレクトリを dired で開いたり、Emacs\nの現在のバッファに対応するディレクトリをターミナルで開いたりしてい\nたことでした。\nどなたか忘れてしまったのですが、試しにツイートしてみたら @nom4476 さんが gist に置いてくださいました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Gist のコードはこちら。\n かる〜く解説。\n  dired()\nターミナル上の zsh で dired とタイプすると、現在のディレクトリを\ndired で開いてくれます。\n  cde()\n同じく cde とタイプすると、Emacs の現在のバッファに対応するディレク","contentSnippet":"福岡Emacs 行ってきました！Mew 関係者がお二人(@nom4476 @moepanda )もいらっしゃったり、Vim 使いが 1/3 くらい占めていて案外新鮮だったり、ワールドカフェ という対話手法に感心したり(残念ながら時間切れで途中で退席しましたが)で、とっても楽しかったです！嬉しかったことは @moepanda さんにお会いできたことと、@nom4476 さんが「このブログ読んでますよ」と仰ってくれたこと。うれしはずかし…(^^)私も「Langrich社でのEmacs活用、langrich.el 」というお題でデビューを飾ることが出来ました。8888それぞれの発表も面白かったのですが、一番気になったのが発表の中でどなたかが、ターミナルの現在のディレクトリを dired で開いたり、Emacsの現在のバッファに対応するディレクトリをターミナルで開いたりしていたことでした。どなたか忘れてしまったのですが、試しにツイートしてみたら @nom4476 さんが gist に置いてくださいました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Gist のコードはこちら。 かる〜く解説。  dired()ターミナル上の zsh で dired とタイプすると、現在のディレクトリをdired で開いてくれます。  cde()同じく cde とタイプすると、Emacs の現在のバッファに対応するディレク","link":"https://masutaka.net/2011-09-28-1/","isoDate":"2011-09-28T00:00:00.000Z","dateMiliSeconds":1317168000000,"authorName":"masutaka"},{"title":"『荒木飛呂彦の奇妙なホラー映画論』を読んだ","content":"こんな本が出てたとは。。。\n荒木先生が影響を受けた約 100 本のホラー映画を、先生御自ら解説してい\nる。荒木飛呂彦ファンまたはホラー映画ファンなら読むべし。\n私はホラー映画ファンではないけれども、ジョジョのあのシーンはこの映\n画を参考にしたのかな？などと想像しながら読めたので楽しかった。バオー\n来訪者の話もちょろっと出てたよ。\nそして最後の締めがまた素晴らしかった。ブラボー！ おお…ブラボー！！","contentSnippet":"こんな本が出てたとは。。。荒木先生が影響を受けた約 100 本のホラー映画を、先生御自ら解説している。荒木飛呂彦ファンまたはホラー映画ファンなら読むべし。私はホラー映画ファンではないけれども、ジョジョのあのシーンはこの映画を参考にしたのかな？などと想像しながら読めたので楽しかった。バオー来訪者の話もちょろっと出てたよ。そして最後の締めがまた素晴らしかった。ブラボー！ おお…ブラボー！！","link":"https://masutaka.net/2011-09-14-1/","isoDate":"2011-09-14T00:00:00.000Z","dateMiliSeconds":1315958400000,"authorName":"masutaka"},{"title":"Twitter で公式 RT の数が 100 を超えたツイートの、ユーザ一覧を取得する方法","content":"追記(2012-06-17):\n今はユーザ数は普通に表示される ようになりました。ユーザ一覧は API 使わないと取得できません。\n 公式 RT の数が 100 を超えると、http://twitter.com/ ではユーザ一覧は\nおろか、数も分からなくなります。\nhttp://favstar.fm/ では一見取得できていそうですが、漏れがあることが\nありますし、テキストのユーザ一覧を取得するのは面倒そうです。\nいろいろ調べた結果、以下の方法が良さそうです。(もっと良い方法があれ\nば教えて下さい。)\n1. TweetID を確認 http://twitter.com/curiousir/status/105930346717126656 loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  この場合は 105930346717126656 です。\n2. ユーザ一覧を取得 Twitter でログインした状態で、以下の URL にアクセスすると\n公式 RT した、100 名までのアカウント情報を取得できます。\nhttp://api.twitter.com/1/statuses/105930346717126656/retweeted_by.xml?count=100&page=1 page を増やしていけば、101 名以上も取得できます。\nhttp://api.twitter.com/1/statuses/105930346717126656/retweeted_by.xml?count=100&page=2 上の例では公式 RT の数が 175 なので、page=3 はありません。\nまた、count の Max 値は 100 です。それ以上は指定できません。","contentSnippet":"追記(2012-06-17):今はユーザ数は普通に表示される ようになりました。ユーザ一覧は API 使わないと取得できません。 公式 RT の数が 100 を超えると、http://twitter.com/ ではユーザ一覧はおろか、数も分からなくなります。http://favstar.fm/ では一見取得できていそうですが、漏れがあることがありますし、テキストのユーザ一覧を取得するのは面倒そうです。いろいろ調べた結果、以下の方法が良さそうです。(もっと良い方法があれば教えて下さい。)1. TweetID を確認 http://twitter.com/curiousir/status/105930346717126656 loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  この場合は 105930346717126656 です。2. ユーザ一覧を取得 Twitter でログインした状態で、以下の URL にアクセスすると公式 RT した、100 名までのアカウント情報を取得できます。http://api.twitter.com/1/statuses/105930346717126656/retweeted_by.xml?count=100&page=1 page を増やしていけば、101 名以上も取得できます。http://api.twitter.com/1/statuses/105930346717126656/retweeted_by.xml?count=100&page=2 上の例では公式 RT の数が 175 なので、page=3 はありません。また、count の Max 値は 100 です。それ以上は指定できません。","link":"https://masutaka.net/2011-09-06-1/","isoDate":"2011-09-06T00:00:00.000Z","dateMiliSeconds":1315267200000,"authorName":"masutaka"},{"title":"Emacs For Mac OS X に ElScreen と APEL をインストールする方法","content":"インターン生に無理矢理が Emacs を使い始めました。\nタブ機能を使いたいとのことだったので、ElScreen をインストールしても\nらおうとしたら、APEL が必要でした。インストール方法を一言で説明する\nのは難しいので、彼向けのブログ記事を書くことにしました。\nEmacs は GNU Emacs For Mac OS X からダウンロードしたものを使ってい\nます。\n1. APEL のダウンロード http://kanji.zinbun.kyoto-u.ac.jp/~tomo/elisp/APEL/ から APEL-10.8\nをダウンロードします。\n2. APEL の展開とインストール 以下のとおりにコマンドを打てば、インストール出来ると思います。\n% tar xvzf apel-10.8.tar.gz % cd apel-10.8 % make PREFIX=$HOME/.emacs.d EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs LISPDIR=$HOME/.emacs.d/elisp VERSION_SPECIFIC_LISPDIR=$HOME/.emacs.d/elisp23 % make PREFIX=$HOME/.emacs.d EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs LISPDIR=$HOME/.emacs.d/elisp VERSION_SPECIFIC_LISPDIR=$HOME/.emacs.d/elisp23 install % (cd $HOME/.emacs.d/elisp &amp;&amp; mv apel .apel-10.8 &amp;&amp; ln -s .apel-10.8 apel) % (cd $HOME/.emacs.d/elisp23 &amp;&amp; mv emu .apel-10.8 &amp;&amp; ln -s .","contentSnippet":"インターン生に無理矢理が Emacs を使い始めました。タブ機能を使いたいとのことだったので、ElScreen をインストールしてもらおうとしたら、APEL が必要でした。インストール方法を一言で説明するのは難しいので、彼向けのブログ記事を書くことにしました。Emacs は GNU Emacs For Mac OS X からダウンロードしたものを使っています。1. APEL のダウンロード http://kanji.zinbun.kyoto-u.ac.jp/~tomo/elisp/APEL/ から APEL-10.8をダウンロードします。2. APEL の展開とインストール 以下のとおりにコマンドを打てば、インストール出来ると思います。% tar xvzf apel-10.8.tar.gz % cd apel-10.8 % make PREFIX=$HOME/.emacs.d EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs LISPDIR=$HOME/.emacs.d/elisp VERSION_SPECIFIC_LISPDIR=$HOME/.emacs.d/elisp23 % make PREFIX=$HOME/.emacs.d EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs LISPDIR=$HOME/.emacs.d/elisp VERSION_SPECIFIC_LISPDIR=$HOME/.emacs.d/elisp23 install % (cd $HOME/.emacs.d/elisp && mv apel .apel-10.8 && ln -s .apel-10.8 apel) % (cd $HOME/.emacs.d/elisp23 && mv emu .apel-10.8 && ln -s .","link":"https://masutaka.net/2011-09-04-2/","isoDate":"2011-09-04T01:00:00.000Z","dateMiliSeconds":1315098000000,"authorName":"masutaka"},{"title":"『もののけ姫』と『塔の上のラプンツェル』を観た","content":" ちょっと前に観たので、感想を忘れてしまった。。。\nみんな頑丈だなあという印象が残ったくらい。。。\n むかーし、グリム童話か何かで読んだことがあり、懐かしさのあまり観る\nことにした。話題にもなってたしね。で、感想。\n 髪の毛活躍しすぎ。 CG リアリティありすぎ。  ミュージカル要素も入っているから、日本語化大変だったんだろうな。\nラプンツェルの声はしょこたん がやってた。なるほど〜\n自然で悪くなかった。\n原作はもっとグロいストーリーだったよなあと調べてみたら、案の定そう\nだった。結構キツイ。\nラプンツェル - wikipedia ","contentSnippet":"ちょっと前に観たので、感想を忘れてしまった。。。みんな頑丈だなあという印象が残ったくらい。。。 むかーし、グリム童話か何かで読んだことがあり、懐かしさのあまり観ることにした。話題にもなってたしね。で、感想。 髪の毛活躍しすぎ。 CG リアリティありすぎ。  ミュージカル要素も入っているから、日本語化大変だったんだろうな。ラプンツェルの声はしょこたん がやってた。なるほど〜自然で悪くなかった。原作はもっとグロいストーリーだったよなあと調べてみたら、案の定そうだった。結構キツイ。ラプンツェル - wikipedia","link":"https://masutaka.net/2011-09-04-1/","isoDate":"2011-09-04T00:00:00.000Z","dateMiliSeconds":1315094400000,"authorName":"masutaka"},{"title":"ワインメモ「シャトー・レ・モーラン」","content":"シャトー･レ･モーラン\n原産国: フランス\nフィリピンに持って行って、@maru_yohei とおいしく飲んだ。\n今回は辛口。このくらい辛いのも好き。安い割においしかった。\nてか、牛タンを丸ごと買って、@maru_yohei が捌いてくれたことの方が\n強烈に印象に残っているw","contentSnippet":"シャトー･レ･モーラン原産国: フランスフィリピンに持って行って、@maru_yohei とおいしく飲んだ。今回は辛口。このくらい辛いのも好き。安い割においしかった。てか、牛タンを丸ごと買って、@maru_yohei が捌いてくれたことの方が強烈に印象に残っているw","link":"https://masutaka.net/2011-09-01-1/","isoDate":"2011-09-01T00:00:00.000Z","dateMiliSeconds":1314835200000,"authorName":"masutaka"},{"title":"『フィリピン「超」格安英語留学』を読んだ","content":" いやあ、面白い本でした。うちの CEO からフィリピンに持って来てと頼ま\nれて買って読んだのがきっかけです。この本の存在は知ってましたが、最\n近出たばかりだったのですね。著者も 1985 年生まれと若い！\n先日フィリピン留学スクールを始めた会社に在籍している私ですら、フィ\nリピン留学に行きたいとさえ思いました。(マジで行くかもw)\nセブ・ラングリッチカレッジ 特に転職を考えている人は、次の会社に入る前にフィリピン留学を検討し\nた方が良いでしょう。社会人になってからまとまった自由な時間を取れる\n時は、そうありません。\n考えていない人でも、今は格安のオンライン英会話スクールがありますか\nら、ちょっと勇気を出して始めてみるのはいかがでしょうか。一歩踏み出\nすと、違った世界が広がるかもしれませんよ。\nラングリッチ - オンライン英会話 さて本の中では、一般的なフィリピン留学のデメリットも取り上げられて\nいます。\n スクールの食事が美味しくない。 宿泊先が汚い。 留学前に聞いていたのと話が違う。  贔屓目に見ることを差し引いても、セブ・ラングリッチカレッジは全てを\nクリアしていると思われます。\n 食事は 3 食、日本食。 宿泊先はまあまあきれいなコンドミニアム。しかも 24 時間ガードマン常駐。 留学エージェントを介さないので、リアルタイムの情報を得られる。  講師を指名することもできるのは、オンライン英会話ラングリッチの生徒\nさんにとって、うれしいことですね。私は元々ラングリッチの生徒で今は\n運営側の人間ですが、セブに見学に来た時に先生と対面でレッスンを受け\nられた時は激しく感動しました。\n本の中であまり触れられていないのが不思議なのですが、留学前にオンラ\nイン英会話で少しは英語に慣れておくことを強くオススメします。そんな\n状態でフィリピンまで一人で行くのは、とっても不安に感じると思います\nから。。。(行き先がセブの場合、LCC (格安航空会社)のセブ・パシフィッ\nク航空を使うと、マニラでの乗り換えが必要です。)\nその他関連リンク:\nラングリッチ公式ブログ-オンライン英会話｜オンラインで学べる最高の英会話スクール ラングリッチのフィリピン留学スクール出来ました。 - 日々、とんは語る。 ","contentSnippet":"いやあ、面白い本でした。うちの CEO からフィリピンに持って来てと頼まれて買って読んだのがきっかけです。この本の存在は知ってましたが、最近出たばかりだったのですね。著者も 1985 年生まれと若い！先日フィリピン留学スクールを始めた会社に在籍している私ですら、フィリピン留学に行きたいとさえ思いました。(マジで行くかもw)セブ・ラングリッチカレッジ 特に転職を考えている人は、次の会社に入る前にフィリピン留学を検討した方が良いでしょう。社会人になってからまとまった自由な時間を取れる時は、そうありません。考えていない人でも、今は格安のオンライン英会話スクールがありますから、ちょっと勇気を出して始めてみるのはいかがでしょうか。一歩踏み出すと、違った世界が広がるかもしれませんよ。ラングリッチ - オンライン英会話 さて本の中では、一般的なフィリピン留学のデメリットも取り上げられています。 スクールの食事が美味しくない。 宿泊先が汚い。 留学前に聞いていたのと話が違う。  贔屓目に見ることを差し引いても、セブ・ラングリッチカレッジは全てをクリアしていると思われます。 食事は 3 食、日本食。 宿泊先はまあまあきれいなコンドミニアム。しかも 24 時間ガードマン常駐。 留学エージェントを介さないので、リアルタイムの情報を得られる。  講師を指名することもできるのは、オンライン英会話ラングリッチの生徒さんにとって、うれしいことですね。私は元々ラングリッチの生徒で今は運営側の人間ですが、セブに見学に来た時に先生と対面でレッスンを受けられた時は激しく感動しました。本の中であまり触れられていないのが不思議なのですが、留学前にオンライン英会話で少しは英語に慣れておくことを強くオススメします。そんな状態でフィリピンまで一人で行くのは、とっても不安に感じると思いますから。。。(行き先がセブの場合、LCC (格安航空会社)のセブ・パシフィック航空を使うと、マニラでの乗り換えが必要です。)その他関連リンク:ラングリッチ公式ブログ-オンライン英会話｜オンラインで学べる最高の英会話スクール ラングリッチのフィリピン留学スクール出来ました。 - 日々、とんは語る。","link":"https://masutaka.net/2011-08-20-2/","isoDate":"2011-08-20T01:00:00.000Z","dateMiliSeconds":1313802000000,"authorName":"masutaka"},{"title":"『島田紳助100の言葉』を読んだ","content":"帰省した時に親が絶賛してたので、試しに読んでみました。さらっと読め\nて良かったです。成功者が語る言葉には、共通するものがありますね。","contentSnippet":"帰省した時に親が絶賛してたので、試しに読んでみました。さらっと読めて良かったです。成功者が語る言葉には、共通するものがありますね。","link":"https://masutaka.net/2011-08-20-1/","isoDate":"2011-08-20T00:00:00.000Z","dateMiliSeconds":1313798400000,"authorName":"masutaka"},{"title":"Emacs で対応している画像タイプを確認する方法","content":"個人的なメモです。\n(mapcar (lambda (type) (cons type (image-type-available-p type))) image-types) =&gt; ((png . t) (gif . t) (tiff . t) (jpeg . t) (xpm . t) (xbm . t) (pbm . t)) Togetter - 「twittering-mode でアイコンが出なかった件」 ","contentSnippet":"個人的なメモです。(mapcar (lambda (type) (cons type (image-type-available-p type))) image-types) => ((png . t) (gif . t) (tiff . t) (jpeg . t) (xpm . t) (xbm . t) (pbm . t)) Togetter - 「twittering-mode でアイコンが出なかった件」","link":"https://masutaka.net/2011-08-12-1/","isoDate":"2011-08-12T00:00:00.000Z","dateMiliSeconds":1313107200000,"authorName":"masutaka"},{"title":"Lion で Emacs-23.3 をソースからビルド出来ない件を解決できた","content":"Lion にバージョンアップしたら [2011-03-10-1] の方法でビルド出来なく\nなってしまいました。\nMacports とか Homebrew の情報はあったのですが、「ソースからビルド」\nの情報は見つけられなかったので、ここにまとめます。\nパッチは 3 つ必要でした。\n patch-no-pie.diff  patch-src_unexmacosx.c.diff  patch-fix-title-bar.diff   1 と 2 がビルドを通すために必要です。パッチを当てないとこんなエラー\nログを吐いてビルドに失敗します。\nDumping under the name emacs unexec: unrecognized section name in __DATA segment --- List of All Regions --- address size prot maxp --- List of Regions to be Dumped --- address size prot maxp --- Header Information --- Magic = 0xfeedfacf CPUType = 16777223 CPUSubType = -2147483645 FileType = 0x2 NCmds = 20 SizeOfCmds = 3464 Flags = 0x00200085 Highest address of load commands in input file: 0x5f4000 Lowest offset of all sections in __TEXT segment: 0x14b0 --- List of Load Commands in Input File --- # cmd cmdsize name address size 0 LC_SEGMENT_64 72 __PAGEZERO 0 0x100000000 1 LC_SEGMENT_64 712 __TEXT 0x100000000 0x1d3000 __text 0x1000014b0 0x18e9aa __stubs 0x10018fe5a 0x61e __stub_helper 0x100190478 0xa44 __const 0x100190ec0 0x9b4 __cstring 0x100191878 0x17266 __gcc_except_tab 0x1001a8ae0 0x40 __unwind_info 0x1001a8b20 0x1d98 __eh_frame 0x1001aa8b8 0x28740 2 LC_SEGMENT_64 1512 __DATA 0x1001d3000 0x367000 __program_vars 0x1001d3000 0x28 __nl_symbol_ptr 0x1001d3028 0x10 __got 0x1001d3038 0x1a0 __la_symbol_ptr 0x1001d31d8 0x828 __objc_classlist 0x1001d3a00 0x70 __objc_protolist 0x1001d3a70 0x10 __objc_imageinfo 0x1001d3a80 0x8 __objc_const 0x1001d3a88 0x21d0 __objc_selrefs 0x1001d5c58 0xe38 __objc_msgrefs 0x1001d6a90 0xf0 __objc_classrefs 0x1001d6b80 0x1f0 __objc_superrefs 0x1001d6d70 0x60 __objc_data 0x1001d6dd0 0x460 __data 0x1001d7240 0x2f5f18 __const 0x1004cd160 0x2020 __cfstring 0x1004cf180 0x640 __bss 0x1004cf7c0 0x59518 __common 0x100528ce0 0x10959 3 LC_SEGMENT_64 72 __LINKEDIT 0x10053a000 0xba000 4 LC_DYLD_INFO_ONLY 48 5 LC_SYMTAB 24 6 LC_DYSYMTAB 80 7 LC_LOAD_DYLINKER 32 8 LC_UUID 24 9 unknown 16 10 LC_UNIXTHREAD 184 11 LC_LOAD_DYLIB 88 12 LC_LOAD_DYLIB 56 13 LC_LOAD_DYLIB 56 14 LC_LOAD_DYLIB 56 15 LC_LOAD_DYLIB 104 16 LC_LOAD_DYLIB 104 17 LC_LOAD_DYLIB 112 18 LC_LOAD_DYLIB 96 19 unknown 16 0x7fa2024fc080 (sz: 0x3f2d/ 0x3f30) 0x7fa202400000 (sz: 0xfc07f/ 0xfc080) 0x7fa2026fc080 (sz: 0x3f2c/ 0x3f30) 0x7fa202600000 (sz: 0xfc07f/ 0xfc080) 0x7fa2038fc080 (sz: 0x3f2d/ 0x3f30) 0x7fa203800000 (sz: 0xfc060/ 0xfc080) 0x7fa2025fc080 (sz: 0x3f2c/ 0x3f30) 0x7fa202500000 (sz: 0xfc07e/ 0xfc080) 0x7fa203cfc080 (sz: 0x3f2c/ 0x3f30) 0x7fa203c00000 (sz: 0x639f/ 0xfc080) 0x7fa204ff8000 (sz: 0x138/ 0x7fa8) 0x7fa204800000 (sz: 0x10dbe/0x7f8000) 0x7fa2037f8000 (sz: 0x728a/ 0x7fa8) 0x7fa203000000 (sz: 0x725fff/0x7f8000) 0x1093f1000 (sz: 0/ 0x1000) --- Load Commands written to Output File --- Writing segment __PAGEZERO @ 0 ( 0/0x100000000 @ 0) Writing segment __TEXT @ 0 (0x1d3000/0x1d3000 @ 0x100000000) Writing segment __DATA @ 0x1d3000 (0x367000/0x367000 @ 0x1001d3000) section __program_vars at 0x1d3000 - 0x1d3028 (sz: 0x28) section __nl_symbol_ptr at 0x1d3028 - 0x1d3038 (sz: 0x10) make[1]: *** [bootstrap-emacs] Error 1 make: *** [src] Error 2 3 を当てなくてもビルドは通りますが、下の図のようにタイトルバーが消","contentSnippet":"Lion にバージョンアップしたら [2011-03-10-1] の方法でビルド出来なくなってしまいました。Macports とか Homebrew の情報はあったのですが、「ソースからビルド」の情報は見つけられなかったので、ここにまとめます。パッチは 3 つ必要でした。 patch-no-pie.diff  patch-src_unexmacosx.c.diff  patch-fix-title-bar.diff   1 と 2 がビルドを通すために必要です。パッチを当てないとこんなエラーログを吐いてビルドに失敗します。Dumping under the name emacs unexec: unrecognized section name in __DATA segment --- List of All Regions --- address size prot maxp --- List of Regions to be Dumped --- address size prot maxp --- Header Information --- Magic = 0xfeedfacf CPUType = 16777223 CPUSubType = -2147483645 FileType = 0x2 NCmds = 20 SizeOfCmds = 3464 Flags = 0x00200085 Highest address of load commands in input file: 0x5f4000 Lowest offset of all sections in __TEXT segment: 0x14b0 --- List of Load Commands in Input File --- # cmd cmdsize name address size 0 LC_SEGMENT_64 72 __PAGEZERO 0 0x100000000 1 LC_SEGMENT_64 712 __TEXT 0x100000000 0x1d3000 __text 0x1000014b0 0x18e9aa __stubs 0x10018fe5a 0x61e __stub_helper 0x100190478 0xa44 __const 0x100190ec0 0x9b4 __cstring 0x100191878 0x17266 __gcc_except_tab 0x1001a8ae0 0x40 __unwind_info 0x1001a8b20 0x1d98 __eh_frame 0x1001aa8b8 0x28740 2 LC_SEGMENT_64 1512 __DATA 0x1001d3000 0x367000 __program_vars 0x1001d3000 0x28 __nl_symbol_ptr 0x1001d3028 0x10 __got 0x1001d3038 0x1a0 __la_symbol_ptr 0x1001d31d8 0x828 __objc_classlist 0x1001d3a00 0x70 __objc_protolist 0x1001d3a70 0x10 __objc_imageinfo 0x1001d3a80 0x8 __objc_const 0x1001d3a88 0x21d0 __objc_selrefs 0x1001d5c58 0xe38 __objc_msgrefs 0x1001d6a90 0xf0 __objc_classrefs 0x1001d6b80 0x1f0 __objc_superrefs 0x1001d6d70 0x60 __objc_data 0x1001d6dd0 0x460 __data 0x1001d7240 0x2f5f18 __const 0x1004cd160 0x2020 __cfstring 0x1004cf180 0x640 __bss 0x1004cf7c0 0x59518 __common 0x100528ce0 0x10959 3 LC_SEGMENT_64 72 __LINKEDIT 0x10053a000 0xba000 4 LC_DYLD_INFO_ONLY 48 5 LC_SYMTAB 24 6 LC_DYSYMTAB 80 7 LC_LOAD_DYLINKER 32 8 LC_UUID 24 9 unknown 16 10 LC_UNIXTHREAD 184 11 LC_LOAD_DYLIB 88 12 LC_LOAD_DYLIB 56 13 LC_LOAD_DYLIB 56 14 LC_LOAD_DYLIB 56 15 LC_LOAD_DYLIB 104 16 LC_LOAD_DYLIB 104 17 LC_LOAD_DYLIB 112 18 LC_LOAD_DYLIB 96 19 unknown 16 0x7fa2024fc080 (sz: 0x3f2d/ 0x3f30) 0x7fa202400000 (sz: 0xfc07f/ 0xfc080) 0x7fa2026fc080 (sz: 0x3f2c/ 0x3f30) 0x7fa202600000 (sz: 0xfc07f/ 0xfc080) 0x7fa2038fc080 (sz: 0x3f2d/ 0x3f30) 0x7fa203800000 (sz: 0xfc060/ 0xfc080) 0x7fa2025fc080 (sz: 0x3f2c/ 0x3f30) 0x7fa202500000 (sz: 0xfc07e/ 0xfc080) 0x7fa203cfc080 (sz: 0x3f2c/ 0x3f30) 0x7fa203c00000 (sz: 0x639f/ 0xfc080) 0x7fa204ff8000 (sz: 0x138/ 0x7fa8) 0x7fa204800000 (sz: 0x10dbe/0x7f8000) 0x7fa2037f8000 (sz: 0x728a/ 0x7fa8) 0x7fa203000000 (sz: 0x725fff/0x7f8000) 0x1093f1000 (sz: 0/ 0x1000) --- Load Commands written to Output File --- Writing segment __PAGEZERO @ 0 ( 0/0x100000000 @ 0) Writing segment __TEXT @ 0 (0x1d3000/0x1d3000 @ 0x100000000) Writing segment __DATA @ 0x1d3000 (0x367000/0x367000 @ 0x1001d3000) section __program_vars at 0x1d3000 - 0x1d3028 (sz: 0x28) section __nl_symbol_ptr at 0x1d3028 - 0x1d3038 (sz: 0x10) make[1]: *** [bootstrap-emacs] Error 1 make: *** [src] Error 2 3 を当てなくてもビルドは通りますが、下の図のようにタイトルバーが消","link":"https://masutaka.net/2011-07-31-2/","isoDate":"2011-07-31T01:00:00.000Z","dateMiliSeconds":1312074000000,"authorName":"masutaka"},{"title":"ワインメモ「カルムネール・レセルバ」","content":"ワインって、なかなか名前覚えられないよね。\nってことでメモメモ。\n  カルムネール レセルバ\n原産国: チリ\nコクがあり、ほどよい甘さのワインで美味しかった。\n次は辛口のワインが飲みたいな。","contentSnippet":"ワインって、なかなか名前覚えられないよね。ってことでメモメモ。  カルムネール レセルバ原産国: チリコクがあり、ほどよい甘さのワインで美味しかった。次は辛口のワインが飲みたいな。","link":"https://masutaka.net/2011-07-31-1/","isoDate":"2011-07-31T00:00:00.000Z","dateMiliSeconds":1312070400000,"authorName":"masutaka"},{"title":"Macports から Homebrew への移行と、Homebrew の使い方まとめ","content":"Macports [2011-01-27-1] は便利と言えば便利なのですが、パッケージに\n依存関係があると、既に /usr/bin とかにインストール済みのコマンドで\nも構わずインストールしてしまいます。\n同じコマンドが複数存在することになり気持ち悪いですし、何よりインス\nトールに時間がかかるので、評判のよい Homebrew に移行することにしま\nした。\nHomebrew のインストール方法は Installation - GitHub をご覧下さい。\nHomebrew は /usr/local 以下にインストールされます。そのため、root\n権限がなくても staff group に所属してさえいれば、各種 Formula(=パッ\nケージ) をインストールできます。\n私がよく使いそうなコマンドはこんな感じです。詳細は &ldquo;man brew&rdquo; してね。\n Homebrew 自身のアップデート\n|% brew update インストール済みの Formula で最新でないものを確認。\n|% brew outdated インストール済みの Formula の一括アップデート\n|% brew upgrade Formula を検索する\n|% brew search  Formula の情報を得る\n|% brew info  Formula をインストールする\n|% brew install  Formula をアンインストールする","contentSnippet":"Macports [2011-01-27-1] は便利と言えば便利なのですが、パッケージに依存関係があると、既に /usr/bin とかにインストール済みのコマンドでも構わずインストールしてしまいます。同じコマンドが複数存在することになり気持ち悪いですし、何よりインストールに時間がかかるので、評判のよい Homebrew に移行することにしました。Homebrew のインストール方法は Installation - GitHub をご覧下さい。Homebrew は /usr/local 以下にインストールされます。そのため、root権限がなくても staff group に所属してさえいれば、各種 Formula(=パッケージ) をインストールできます。私がよく使いそうなコマンドはこんな感じです。詳細は “man brew” してね。 Homebrew 自身のアップデート|% brew update インストール済みの Formula で最新でないものを確認。|% brew outdated インストール済みの Formula の一括アップデート|% brew upgrade Formula を検索する|% brew search  Formula の情報を得る|% brew info  Formula をインストールする|% brew install  Formula をアンインストールする","link":"https://masutaka.net/2011-07-26-1/","isoDate":"2011-07-26T00:00:00.000Z","dateMiliSeconds":1311638400000,"authorName":"masutaka"},{"title":"キラキラ号で安眠するための５つのポイント","content":"キラキラ号に乗って RubyKaigi から帰ってきました。\n[2011-05-03-1] の続きになります。\n「体をできるだけ水平にする」ことがポイントです。\nそれではいってみましょうか。\n1. ヘッドレストを外す。 みんな付けたままなのですが、顎は苦しくないのでしょうか。。。\n2. リクライミングは最大にする。 後ろの人に一声かけるとかして、なんとしてでも最大にして下さい。トイ\nレ休憩の時は元に戻します。\nで、そのトイレ休憩なんですが、必ず外に出た方が良いでしょう。ストレッ\nチとかすると、またよく眠れます。エコノミークラス症候群 対策にもなり\nますね。飲み物がなくなっていたら、しっかり補給しましょう。\n3. 靴と靴下は脱ぐ。 寝ている時に足の裏から不快な熱が逃げるらしいです。実際その通りです。\n4. フットレストは使わない。 足下の空間が狭くなり、足を伸ばせなくなるためです。レッグレストは使\nいます。足を固定化できます。足を宙に浮かせるとベターです。\nでも背が高い人はどうやっても足を伸ばせませんよね。ご愁傷様です。。。\n夜行バスに関しては、背が高いことは何のメリットもありません。\n5. 腰を浮かせない。 腰が浮いたままだと、寝ていてとっても疲れます。\n取り外したヘッドレストを使うと良いかもしれません。\nP.S.\nプラモデルが出てました。。 ","contentSnippet":"キラキラ号に乗って RubyKaigi から帰ってきました。[2011-05-03-1] の続きになります。「体をできるだけ水平にする」ことがポイントです。それではいってみましょうか。1. ヘッドレストを外す。 みんな付けたままなのですが、顎は苦しくないのでしょうか。。。2. リクライミングは最大にする。 後ろの人に一声かけるとかして、なんとしてでも最大にして下さい。トイレ休憩の時は元に戻します。で、そのトイレ休憩なんですが、必ず外に出た方が良いでしょう。ストレッチとかすると、またよく眠れます。エコノミークラス症候群 対策にもなりますね。飲み物がなくなっていたら、しっかり補給しましょう。3. 靴と靴下は脱ぐ。 寝ている時に足の裏から不快な熱が逃げるらしいです。実際その通りです。4. フットレストは使わない。 足下の空間が狭くなり、足を伸ばせなくなるためです。レッグレストは使います。足を固定化できます。足を宙に浮かせるとベターです。でも背が高い人はどうやっても足を伸ばせませんよね。ご愁傷様です。。。夜行バスに関しては、背が高いことは何のメリットもありません。5. 腰を浮かせない。 腰が浮いたままだと、寝ていてとっても疲れます。取り外したヘッドレストを使うと良いかもしれません。P.S.プラモデルが出てました。。","link":"https://masutaka.net/2011-07-21-3/","isoDate":"2011-07-21T02:00:00.000Z","dateMiliSeconds":1311213600000,"authorName":"masutaka"},{"title":"『成金』を読んだ","content":"RubyKaigi の行きの新幹線の中で読みました。そんなにうまくいくものか\nなあというのが正直な感想です。「拝金」[2010-07-04-2] の方がスピード\n感があって好きですね。","contentSnippet":"RubyKaigi の行きの新幹線の中で読みました。そんなにうまくいくものかなあというのが正直な感想です。「拝金」[2010-07-04-2] の方がスピード感があって好きですね。","link":"https://masutaka.net/2011-07-21-2/","isoDate":"2011-07-21T01:00:00.000Z","dateMiliSeconds":1311210000000,"authorName":"masutaka"},{"title":"RubyKaigi2011 に参加してきた","content":"ここ 3 ヶ月で書いた Ruby コードはわずか 40 行ではありますが、最初で\n最後の RubyKaigi に参加して来ました。印象に残ったセッションを書き留\nめておきます。\n(1) 組込みシステムのための動的コンポーネント機構とVMの最適化 オリジナルの Ruby をなるべく手を加えずにに移植する、つまりハッキン\nグですね。私はこういうの好きですねえ〜。オリジナルに手を加える量が\n少なければ少ないほど興奮しますw\nそういう意味では elisp の advice や eval-after-load、hook なんかも\n好きです。\n(2) 軽量Ruby こちらは Matz さん本人が関わっている組み込み Ruby 。(1) と違って、\nRuby にバリバリと手が加えられています。\n軽量化するために、Ruby を極限まで削り取ったり、高速化可能であればハー\nド化(Ruby チップ)したりするそうです。\nVM を介して使うため中間コードに変換する必要があるそうです。いっその\nこと、Ruby のコードを実行可能なコード(ELFとか)に変換すればいいんじゃ\nないかと思ったのですが、そういう訳にはいかないのでしょうか。\nいずれにせよ、組み込みの分野で Ruby が使える日もそう遠くないのかも\nしれません(?)\n(3) その他もろもろ 「Ruby遺産とレガシーコード修理技術」は tDiary の話だと思っていなかっ\nたので、予想外でうれしかったです。本当に tDiary が好きなんだなあ。。\n懇親会では、ただただしさんとも少しお話し出来ました。\nMatz さんのプレゼンももちろん面白かったです。内容は要約すると\n「Ruby 最高！」でしたw\n隠れた収穫としては、Ruby 界隈ではテスト駆動開発が当たり前になってい\nることを知れたこと。実際にやっているところを初めて見ました。自分の\n仕事でも真似しないと。。。\n全体的にプレゼンがうまい人が多かったのも印象に残りました。良くある、\nテキストで埋め尽くされたプレゼンは少数派で、画像や動画、グラフ、テ","contentSnippet":"ここ 3 ヶ月で書いた Ruby コードはわずか 40 行ではありますが、最初で最後の RubyKaigi に参加して来ました。印象に残ったセッションを書き留めておきます。(1) 組込みシステムのための動的コンポーネント機構とVMの最適化 オリジナルの Ruby をなるべく手を加えずにに移植する、つまりハッキングですね。私はこういうの好きですねえ〜。オリジナルに手を加える量が少なければ少ないほど興奮しますwそういう意味では elisp の advice や eval-after-load、hook なんかも好きです。(2) 軽量Ruby こちらは Matz さん本人が関わっている組み込み Ruby 。(1) と違って、Ruby にバリバリと手が加えられています。軽量化するために、Ruby を極限まで削り取ったり、高速化可能であればハード化(Ruby チップ)したりするそうです。VM を介して使うため中間コードに変換する必要があるそうです。いっそのこと、Ruby のコードを実行可能なコード(ELFとか)に変換すればいいんじゃないかと思ったのですが、そういう訳にはいかないのでしょうか。いずれにせよ、組み込みの分野で Ruby が使える日もそう遠くないのかもしれません(?)(3) その他もろもろ 「Ruby遺産とレガシーコード修理技術」は tDiary の話だと思っていなかったので、予想外でうれしかったです。本当に tDiary が好きなんだなあ。。懇親会では、ただただしさんとも少しお話し出来ました。Matz さんのプレゼンももちろん面白かったです。内容は要約すると「Ruby 最高！」でしたw隠れた収穫としては、Ruby 界隈ではテスト駆動開発が当たり前になっていることを知れたこと。実際にやっているところを初めて見ました。自分の仕事でも真似しないと。。。全体的にプレゼンがうまい人が多かったのも印象に残りました。良くある、テキストで埋め尽くされたプレゼンは少数派で、画像や動画、グラフ、テ","link":"https://masutaka.net/2011-07-21-1/","isoDate":"2011-07-21T00:00:00.000Z","dateMiliSeconds":1311206400000,"authorName":"masutaka"},{"title":"Dropbox ライクなストレージ、SpiderOak を登録してみた","content":"Dropboxライクなストレージ、SpiderOakの無料プランが上限50GBになっていた 無料プランの上限が最大 50GB になったそうなので、登録してみました。\nDropbox は ~/Dropbox を Sync,Share できるのに対して、\nSpiderOak は任意のフォルダを Sync,Share,Backup できる点が異なります。\nバックアップできるのが良いですね〜\nDropbox をバックアップ用途に使うためには、~/Dropbox にシンボリック\nリンクを張る必要があり、なんだかモヤモヤしていましたが、SpiderOak\nなら任意のフォルダをバックアップできるので、そんなことありません。\nメジャーにならないのは日本語化されてないのと、トップページがゴチャ\nゴチャしているからじゃないですかね。SpiderOak ってどう読んだら分か\nらないのも、マイナスポイントです。\nまあでも魅力的なサービスであることは確かです。まだ試していない方は\nhttps://spideroak.com/signup/ から登録してみて下さい。\nもちろん Dropbox とも併用できるので、こちらもまだ登録されていない方\nは是非是非(こちらは恥じらいもなく紹介用のリンクです)。\nDropbox へのご招待です。 - 生活をシンプルに 追記(2011-12-09):\nみなさまのおかげで容量が無料プラン MAX の 50GB に達しました。ありが\nとうございます。紹介リンクを削除しました。","contentSnippet":"Dropboxライクなストレージ、SpiderOakの無料プランが上限50GBになっていた 無料プランの上限が最大 50GB になったそうなので、登録してみました。Dropbox は ~/Dropbox を Sync,Share できるのに対して、SpiderOak は任意のフォルダを Sync,Share,Backup できる点が異なります。バックアップできるのが良いですね〜Dropbox をバックアップ用途に使うためには、~/Dropbox にシンボリックリンクを張る必要があり、なんだかモヤモヤしていましたが、SpiderOakなら任意のフォルダをバックアップできるので、そんなことありません。メジャーにならないのは日本語化されてないのと、トップページがゴチャゴチャしているからじゃないですかね。SpiderOak ってどう読んだら分からないのも、マイナスポイントです。まあでも魅力的なサービスであることは確かです。まだ試していない方はhttps://spideroak.com/signup/ から登録してみて下さい。もちろん Dropbox とも併用できるので、こちらもまだ登録されていない方は是非是非(こちらは恥じらいもなく紹介用のリンクです)。Dropbox へのご招待です。 - 生活をシンプルに 追記(2011-12-09):みなさまのおかげで容量が無料プラン MAX の 50GB に達しました。ありがとうございます。紹介リンクを削除しました。","link":"https://masutaka.net/2011-07-07-1/","isoDate":"2011-07-07T00:00:00.000Z","dateMiliSeconds":1309996800000,"authorName":"masutaka"},{"title":"Git ブランチ操作のまとめ","content":"個人的なメモ その２\nその１は [2010-04-29-1] にあるよ。\nGit では、たった一日の作業でもブランチを作ることが良くある。基本ブ\nランチは修正が終わったら master に merge して削除、つまり使い捨て。\n別な作業が入ったら、master から新たにブランチを作る。\ncvs とか svn だと、作業単位毎にディレクトリを掘って cvs checkout と\nかしていたけど、Git はこれをブランチ操作のみでできる点が超便利。\nただ、他に違わず、ブランチ操作も複雑なのでメモメモ。\n(1) ローカルブランチの確認\n% git branch (2) リモートブランチの確認\n% git branch -r (1) + (2)\n% git branch -a (3) ローカルブランチ bar の作成\n% git branch bar (4) ローカルブランチ bar への切り替え\n% git checkout bar (3) と (4) を同時にやる。\n% git checkout -b bar (5) 任意のタグやリビジョンを起点に、ブランチ bar を作る。","contentSnippet":"個人的なメモ その２その１は [2010-04-29-1] にあるよ。Git では、たった一日の作業でもブランチを作ることが良くある。基本ブランチは修正が終わったら master に merge して削除、つまり使い捨て。別な作業が入ったら、master から新たにブランチを作る。cvs とか svn だと、作業単位毎にディレクトリを掘って cvs checkout とかしていたけど、Git はこれをブランチ操作のみでできる点が超便利。ただ、他に違わず、ブランチ操作も複雑なのでメモメモ。(1) ローカルブランチの確認% git branch (2) リモートブランチの確認% git branch -r (1) + (2)% git branch -a (3) ローカルブランチ bar の作成% git branch bar (4) ローカルブランチ bar への切り替え% git checkout bar (3) と (4) を同時にやる。% git checkout -b bar (5) 任意のタグやリビジョンを起点に、ブランチ bar を作る。","link":"https://masutaka.net/2011-07-05-1/","isoDate":"2011-07-05T00:00:00.000Z","dateMiliSeconds":1309824000000,"authorName":"masutaka"},{"title":"『パターン、Wiki、XP 〜時を超えた創造の原則』を読んだ","content":" ソフトウェアの開発は建築の手法が元になった、と聞いたことがあったけ\nど、まさにこの本に書いてあった。建築のパターンランゲージを参考に考\nえ出されたデザインパターン、今のアジャイルに通じる話、Wiki の発明者\nカニンバル等々、なかなか面白い本だった。\nP.S.\nこちらの記事がこの本を知ったきっかけです。\nパターン、Wiki、XP ~時を超えた創造の原則を読んだ。 - 日々、とんは語る。 ","contentSnippet":"ソフトウェアの開発は建築の手法が元になった、と聞いたことがあったけど、まさにこの本に書いてあった。建築のパターンランゲージを参考に考え出されたデザインパターン、今のアジャイルに通じる話、Wiki の発明者カニンバル等々、なかなか面白い本だった。P.S.こちらの記事がこの本を知ったきっかけです。パターン、Wiki、XP ~時を超えた創造の原則を読んだ。 - 日々、とんは語る。","link":"https://masutaka.net/2011-07-01-1/","isoDate":"2011-07-01T00:00:00.000Z","dateMiliSeconds":1309478400000,"authorName":"masutaka"},{"title":"Emacs の M-x align-regexp は超便利","content":"こんなソースコードを\nこのように整形してくれます。\n手順はとっても簡単。\nCtrl-space でリージョンを作って、\nM-x align-regexp [Return] = [Return] するだけ。","contentSnippet":"こんなソースコードをこのように整形してくれます。手順はとっても簡単。Ctrl-space でリージョンを作って、M-x align-regexp [Return] = [Return] するだけ。","link":"https://masutaka.net/2011-06-29-1/","isoDate":"2011-06-29T00:00:00.000Z","dateMiliSeconds":1309305600000,"authorName":"masutaka"},{"title":"iPhone で複数のカレンダーを表示させるのが大変だった","content":"発端はこの記事。\n[を] iPhone のカレンダーを「ハチカレンダー2」にしました 普段使っている「CCal」は全体的に動きがモッサリしているのですよね。\nそんなわけで「ハチカレンダー2 Lite」の方を試しに使ってみようとした\nのですが、予想以上に大変だったのでここにメモしておきます。\n「ハチカレンダー2 Lite」自体は標準のカレンダーの設定どおりに表示す\nるだけのアプリなので、設定するのは標準のカレンダー関連になります。\n  Google Sync から、表示したい他のカレンダーにチェックを入れる。\nGoogleカレンダーの複数のカレンダーを［カレンダー］と同期したい - できるネット＋（できるネットプラス）   iPhone のメール/連絡先/カレンダーの設定から、MS Exchange のアカ\nウントを追加する。\n［カレンダー］とGoogleカレンダーを同期させる設定方法は？ - できるネット＋（できるネットプラス）   あとは「ハチカレンダー2 Lite」を起動するだけです。\nMS Exchange のアカウントを作るのがポイントなんですね〜。意味が分か\nらなくて、何度もアカウントを作ったり消したりを繰り返しました。\nそういえば [2011-06-18-1] でも、MS Exchange のアカウントを作りまし\nたね。Google Sync を初めて知ったのはこの時。。\nまあそれはともかく、「ハチカレンダー2 Lite」は動きが軽くて良いですね。\nしばらく使ってみます。\n ハチカレンダー2 Lite  CCal   追記(2011-06-23):\n有料版の「ハチカレンダー2 」を買いました。Lite より機能アップしてます。\n個人的には List 表示できるのが嬉しいです。\n追記(2011-08-01):\nもっと簡単な方法がありました。。。\n【最新版】iPhoneの標準カレンダーとGoogleカレンダー（複数アカウントもOK）を同期する方法 追記(2011-11-22):\nもっともっと簡単な方法がありました。。。\n[を] iPhone と Google カレンダーの連携が昔の方法だったため共有カレンダーが見られなくなってた ","contentSnippet":"発端はこの記事。[を] iPhone のカレンダーを「ハチカレンダー2」にしました 普段使っている「CCal」は全体的に動きがモッサリしているのですよね。そんなわけで「ハチカレンダー2 Lite」の方を試しに使ってみようとしたのですが、予想以上に大変だったのでここにメモしておきます。「ハチカレンダー2 Lite」自体は標準のカレンダーの設定どおりに表示するだけのアプリなので、設定するのは標準のカレンダー関連になります。  Google Sync から、表示したい他のカレンダーにチェックを入れる。Googleカレンダーの複数のカレンダーを［カレンダー］と同期したい - できるネット＋（できるネットプラス）   iPhone のメール/連絡先/カレンダーの設定から、MS Exchange のアカウントを追加する。［カレンダー］とGoogleカレンダーを同期させる設定方法は？ - できるネット＋（できるネットプラス）   あとは「ハチカレンダー2 Lite」を起動するだけです。MS Exchange のアカウントを作るのがポイントなんですね〜。意味が分からなくて、何度もアカウントを作ったり消したりを繰り返しました。そういえば [2011-06-18-1] でも、MS Exchange のアカウントを作りましたね。Google Sync を初めて知ったのはこの時。。まあそれはともかく、「ハチカレンダー2 Lite」は動きが軽くて良いですね。しばらく使ってみます。 ハチカレンダー2 Lite  CCal   追記(2011-06-23):有料版の「ハチカレンダー2 」を買いました。Lite より機能アップしてます。個人的には List 表示できるのが嬉しいです。追記(2011-08-01):もっと簡単な方法がありました。。。【最新版】iPhoneの標準カレンダーとGoogleカレンダー（複数アカウントもOK）を同期する方法 追記(2011-11-22):もっともっと簡単な方法がありました。。。[を] iPhone と Google カレンダーの連携が昔の方法だったため共有カレンダーが見られなくなってた","link":"https://masutaka.net/2011-06-21-1/","isoDate":"2011-06-21T00:00:00.000Z","dateMiliSeconds":1308614400000,"authorName":"masutaka"},{"title":"「Gmail の連絡先」を Mew のアドレス帳にコピーする","content":"Gmailのアドレス帳をbbdbにインポート を見て触発されたので、Mew でも出\n来るようにしてみました。\n  ~/Mail/Addrbook が「Gmail の連絡先」で完全に上書きされるので、十分\n注意して使ってくださいね。\n「Gmail の連絡先」と「iPhone の連絡先」も同期できました。\nGoogle SyncがiPhoneに対応 – カレンダーやアドレス帳の同期が可能に ｜ iPhone 研究室（iPadもね） P.S.\nau 携帯のアドレス帳が悩ましい。。。","contentSnippet":"Gmailのアドレス帳をbbdbにインポート を見て触発されたので、Mew でも出来るようにしてみました。  ~/Mail/Addrbook が「Gmail の連絡先」で完全に上書きされるので、十分注意して使ってくださいね。「Gmail の連絡先」と「iPhone の連絡先」も同期できました。Google SyncがiPhoneに対応 – カレンダーやアドレス帳の同期が可能に ｜ iPhone 研究室（iPadもね） P.S.au 携帯のアドレス帳が悩ましい。。。","link":"https://masutaka.net/2011-06-18-1/","isoDate":"2011-06-18T00:00:00.000Z","dateMiliSeconds":1308355200000,"authorName":"masutaka"},{"title":"RCS は Dropbox に出会って甦った！","content":"RCS 使ってますか？\n私は初めて使ったバージョン管理システムが RCS ということもあり、これ\nからは Git だ、Mercurial だと叫ばれる中、ちょくちょく使っていました。\nリポジトリを作らなくても良いから、サーバの設定ファイルとか、ちょっ\nとしたファイルにお手軽に使えるのですよね。\n使い方は Google 先生が良くご存知です。&ldquo;ci (-sInstall)&rdquo;,\n&ldquo;co (-l,-u)&rdquo;, &ldquo;rcsdiff&rdquo;, &ldquo;rlog&rdquo; あたりを良く使うことになるかと思い\nます。\nRCS はお手軽に使える反面、RCS ディレクトリが各ディレクトリに散らば\nり管理しづらいという問題がありました。これはバックアップしづらいと\nいう問題にも繋がります。\nなので、こうしてみました。\nこの例では aliases と main.cf を RCS で管理しています。あれ、RCS ディ\nレクトリは Dropbox へのシンボリックリンクになっていますね。ちょっと\n見てみましょうか。\nなるほど〜 各 RCS ディレクトリをこうやって一カ所に集めたのですね。\nしかも Dropbox 配下に置いたから、バックアップもやってくれると。\n個人の Mac とかだったら、これで十分かと思います。ci や co はデフォ\nルトでインストールされていますし。これで /etc の下とかの *.bak や\n*.orig ファイルからおさらばです。\nってことで、Dropbox をお持ちでない方はこちらのリンク からアカウント\nを作って頂けると、(私が)喜びます。o","contentSnippet":"RCS 使ってますか？私は初めて使ったバージョン管理システムが RCS ということもあり、これからは Git だ、Mercurial だと叫ばれる中、ちょくちょく使っていました。リポジトリを作らなくても良いから、サーバの設定ファイルとか、ちょっとしたファイルにお手軽に使えるのですよね。使い方は Google 先生が良くご存知です。“ci (-sInstall)”,“co (-l,-u)”, “rcsdiff”, “rlog” あたりを良く使うことになるかと思います。RCS はお手軽に使える反面、RCS ディレクトリが各ディレクトリに散らばり管理しづらいという問題がありました。これはバックアップしづらいという問題にも繋がります。なので、こうしてみました。この例では aliases と main.cf を RCS で管理しています。あれ、RCS ディレクトリは Dropbox へのシンボリックリンクになっていますね。ちょっと見てみましょうか。なるほど〜 各 RCS ディレクトリをこうやって一カ所に集めたのですね。しかも Dropbox 配下に置いたから、バックアップもやってくれると。個人の Mac とかだったら、これで十分かと思います。ci や co はデフォルトでインストールされていますし。これで /etc の下とかの *.bak や*.orig ファイルからおさらばです。ってことで、Dropbox をお持ちでない方はこちらのリンク からアカウントを作って頂けると、(私が)喜びます。o","link":"https://masutaka.net/2011-06-06-1/","isoDate":"2011-06-06T00:00:00.000Z","dateMiliSeconds":1307318400000,"authorName":"masutaka"},{"title":"Firefox から Chrome に乗り換えたよ","content":"Netscape 時代も含めるとかれこれ 15 年くらい愛用している Mozilla 系ブラウザから、この度 Google Chrome に乗り換えることにしましたので、報告致します。\n最近の私の Firefox4 on Mac OS X は時々、メニューバーの反応がなくなるのですよね。。あと、Keysnail を導入していることが逆に仇となって、他のアプリで Command-w してあ&quot;ーしちゃうし。。。\nってのが乗り換えの理由です。\n移行自体は簡単で、Chrome さんがブックマークやパスワード、履歴等をインポートしてくれます。\n問題はアドオン。試行錯誤して調べました。\nFirebug  Chrome には標準で実装されています。Firebug の方がデキが良いとの話も。\ngpum - Google mail Popup Unread Manager  これも Chrome には標準で実装されています。Google Web サービスとの親和性はさすがです。\nGreasemonkey  あんまり使ってなかったので、調べてません。\nHatena Bookmark  Chrome にも、アプリ と拡張 がありました。\nKeysnail  (1) Firefox を Emacs 風のキーバインドにしたり、(2) 現在の URL をツイートしたり、(3) Hit-a-Hint が使える、スゲーアドオンです。\n(1) は捨てました。Mac は OS 標準のキーバインドが洗練されているので。\n(2) は良いのがないですねえ。TwitterBar は Enter でかな漢字変換を確定するとツイートしちゃうし。。","contentSnippet":"Netscape 時代も含めるとかれこれ 15 年くらい愛用している Mozilla 系ブラウザから、この度 Google Chrome に乗り換えることにしましたので、報告致します。最近の私の Firefox4 on Mac OS X は時々、メニューバーの反応がなくなるのですよね。。あと、Keysnail を導入していることが逆に仇となって、他のアプリで Command-w してあ\"ーしちゃうし。。。ってのが乗り換えの理由です。移行自体は簡単で、Chrome さんがブックマークやパスワード、履歴等をインポートしてくれます。問題はアドオン。試行錯誤して調べました。Firebug  Chrome には標準で実装されています。Firebug の方がデキが良いとの話も。gpum - Google mail Popup Unread Manager  これも Chrome には標準で実装されています。Google Web サービスとの親和性はさすがです。Greasemonkey  あんまり使ってなかったので、調べてません。Hatena Bookmark  Chrome にも、アプリ と拡張 がありました。Keysnail  (1) Firefox を Emacs 風のキーバインドにしたり、(2) 現在の URL をツイートしたり、(3) Hit-a-Hint が使える、スゲーアドオンです。(1) は捨てました。Mac は OS 標準のキーバインドが洗練されているので。(2) は良いのがないですねえ。TwitterBar は Enter でかな漢字変換を確定するとツイートしちゃうし。。","link":"https://masutaka.net/2011-06-03-1/","isoDate":"2011-06-03T00:00:00.000Z","dateMiliSeconds":1307059200000,"authorName":"masutaka"},{"title":"Emacs で縦分割と横分割のトグル","content":"横分割と縦分割を切り替える - Meadow/Emacs memo: ウィンドウ/フレーム関連 ― 分割・サイズ変更 個人的に必要になったのですが、縦分割-&gt;横分割すると 3 分割されてしま\nうのでちょっと直しました。\n(defun window-toggle-division ()  &#34;ウィンドウ 2 分割時に、縦分割&lt;-&gt;横分割&#34;  (interactive)  (unless (= (count-windows 1) 2)  (error &#34;ウィンドウが 2 分割されていません。&#34;))  (let ((before-height)  (other-buf (window-buffer (next-window))))  (setq before-height (window-height))  (delete-other-windows)  (if (= (window-height) before-height)  (split-window-vertically)  (split-window-horizontally))  (other-window 1)  (switch-to-buffer other-buf)  (other-window -1))) ","contentSnippet":"横分割と縦分割を切り替える - Meadow/Emacs memo: ウィンドウ/フレーム関連 ― 分割・サイズ変更 個人的に必要になったのですが、縦分割->横分割すると 3 分割されてしまうのでちょっと直しました。(defun window-toggle-division ()  \"ウィンドウ 2 分割時に、縦分割<->横分割\"  (interactive)  (unless (= (count-windows 1) 2)  (error \"ウィンドウが 2 分割されていません。\"))  (let ((before-height)  (other-buf (window-buffer (next-window))))  (setq before-height (window-height))  (delete-other-windows)  (if (= (window-height) before-height)  (split-window-vertically)  (split-window-horizontally))  (other-window 1)  (switch-to-buffer other-buf)  (other-window -1)))","link":"https://masutaka.net/2011-05-19-1/","isoDate":"2011-05-19T00:00:00.000Z","dateMiliSeconds":1305763200000,"authorName":"masutaka"},{"title":"Emacs で Mac の辞書を sdic っぽく使う","content":"Mac の Emacs でツールチップ辞書 パート2。 - 日々、とんは語る。 しばらくこれで生活してましたが、自分にはツールチップは合わない気が\nしてきたので、sdic っぽく改良してみました。\n M-x my-dictionary すると、カーソル下の単語を Dictionary.app 使って\n調べます。C-u M-x my-dictionary すると、sdic 使って調べます。\n似たような関数を作りたくなかったので、sdic の major-mode を流用して\nます。\n追記(2011-06-11):\n`q&rsquo; で sdic バッファが消えないという問題があったので、\ndictionary-app() を少し修正しました。","contentSnippet":"Mac の Emacs でツールチップ辞書 パート2。 - 日々、とんは語る。 しばらくこれで生活してましたが、自分にはツールチップは合わない気がしてきたので、sdic っぽく改良してみました。 M-x my-dictionary すると、カーソル下の単語を Dictionary.app 使って調べます。C-u M-x my-dictionary すると、sdic 使って調べます。似たような関数を作りたくなかったので、sdic の major-mode を流用してます。追記(2011-06-11):`q’ で sdic バッファが消えないという問題があったので、dictionary-app() を少し修正しました。","link":"https://masutaka.net/2011-05-18-1/","isoDate":"2011-05-18T00:00:00.000Z","dateMiliSeconds":1305676800000,"authorName":"masutaka"},{"title":"久しぶりに夜行バスに乗った","content":"ここ最近夜行バスに乗ることが増えました。今後もちょいちょい機会が\nありそうなので、今までの感想を書き留めておきます。\nヤングリゾート  4/9 24:20 出発、横浜→京都、￥4,200\n7〜8 年ぶりの夜行バスはほとんど眠れませんでした。カーテンは遮光でな\nいので眩しいし、レッグリフトがないので(足乗せ台はある)足の疲れが取\nれません。要は普通の 4 列シートのバスでした。\n夜行バスってこんなものなのかと思っていたら..(続く)\nWILLER TRAVEL  4/11 23:45 出発、京都→横浜、￥5,500\nやあ、このバスは素晴らしい！前回とはうって変わって、遮光カーテンも\nレッグリフトもあります。振動がやや気になりましたが、席は 3 列シート\nで広々だったので、そこそこ眠ることが出来ました。これならプラス\n￥1,300 の価値ありです。休憩後の点呼を、乗務員二人で念入りにしてい\nたのも好感が持てました。\nホットドック(キラキラ号)  4/27 24:40 出発、横浜→明石、￥5,500\n激安だったのでツライ旅を予想し憂鬱になっていましたが、予想に反して\n一番良い夜行バスでした。よく眠れましたというか、10 時間ほとんど寝て\nましたw\n遮光カーテンもレッグリフト(WILLER より劣る)もありましたが、このバス\nの真の価値はサスペンションです(断言します)。なぜか振動が心地よく、\n安心して眠ることが出来ました。\n運転手は 2 時間交代のようで、良い職場環境だなと思いました。(他の会\n社はチェック忘れました。。)\n後日談:\n明石で、お隣さん(どこかの会社の寮になっている)に引っ越しのご挨拶に\n行ったら、出てきた人はな〜んか見覚えのある顔。話を聞いたら、あの日\nのキラキラ号の運転手さんでした。こんなことってあるんですね〜(驚愕)\nHow to 安眠:\n遮光カーテンでない場合はアイマスクなどを付ける。靴は絶対脱ぐ。でき\nれば靴下も(寝ている時は足の裏から不快な熱が逃げるらしい)。足は伸ば\nす。できれば腰と水平に。\n次回への宿題:\nどうやったらもっと腰を休ませられるか？体勢を倒しすぎると腰がシート\nに密着せず、だんだん痛くなってくる。体勢を垂直に近づけると痛みはな\nくなるが、疲れが取れづらい。ブランケットがもっと厚手ならいいんだけ\nど。腰当て持って行くのも面倒だな〜\n追記(2013-12-17):\nそういえばこんな記事[2011-07-21-3] も書いたのでした。","contentSnippet":"ここ最近夜行バスに乗ることが増えました。今後もちょいちょい機会がありそうなので、今までの感想を書き留めておきます。ヤングリゾート  4/9 24:20 出発、横浜→京都、￥4,2007〜8 年ぶりの夜行バスはほとんど眠れませんでした。カーテンは遮光でないので眩しいし、レッグリフトがないので(足乗せ台はある)足の疲れが取れません。要は普通の 4 列シートのバスでした。夜行バスってこんなものなのかと思っていたら..(続く)WILLER TRAVEL  4/11 23:45 出発、京都→横浜、￥5,500やあ、このバスは素晴らしい！前回とはうって変わって、遮光カーテンもレッグリフトもあります。振動がやや気になりましたが、席は 3 列シートで広々だったので、そこそこ眠ることが出来ました。これならプラス￥1,300 の価値ありです。休憩後の点呼を、乗務員二人で念入りにしていたのも好感が持てました。ホットドック(キラキラ号)  4/27 24:40 出発、横浜→明石、￥5,500激安だったのでツライ旅を予想し憂鬱になっていましたが、予想に反して一番良い夜行バスでした。よく眠れましたというか、10 時間ほとんど寝てましたw遮光カーテンもレッグリフト(WILLER より劣る)もありましたが、このバスの真の価値はサスペンションです(断言します)。なぜか振動が心地よく、安心して眠ることが出来ました。運転手は 2 時間交代のようで、良い職場環境だなと思いました。(他の会社はチェック忘れました。。)後日談:明石で、お隣さん(どこかの会社の寮になっている)に引っ越しのご挨拶に行ったら、出てきた人はな〜んか見覚えのある顔。話を聞いたら、あの日のキラキラ号の運転手さんでした。こんなことってあるんですね〜(驚愕)How to 安眠:遮光カーテンでない場合はアイマスクなどを付ける。靴は絶対脱ぐ。できれば靴下も(寝ている時は足の裏から不快な熱が逃げるらしい)。足は伸ばす。できれば腰と水平に。次回への宿題:どうやったらもっと腰を休ませられるか？体勢を倒しすぎると腰がシートに密着せず、だんだん痛くなってくる。体勢を垂直に近づけると痛みはなくなるが、疲れが取れづらい。ブランケットがもっと厚手ならいいんだけど。腰当て持って行くのも面倒だな〜追記(2013-12-17):そういえばこんな記事[2011-07-21-3] も書いたのでした。","link":"https://masutaka.net/2011-05-03-1/","isoDate":"2011-05-03T00:00:00.000Z","dateMiliSeconds":1304380800000,"authorName":"masutaka"},{"title":"『儲けたいなら科学なんじゃないの？』を読んだ","content":"ホリエモンと、元日本マイクロソフト社長の成毛さんの対談本。\n科学の対談本は初めて読んだので、へぇ〜と頷くところが多くあった。\nブログやツイッターでは氷山の一角しか出ていないので、興味がある方は\n読んでみると良いと思う。","contentSnippet":"ホリエモンと、元日本マイクロソフト社長の成毛さんの対談本。科学の対談本は初めて読んだので、へぇ〜と頷くところが多くあった。ブログやツイッターでは氷山の一角しか出ていないので、興味がある方は読んでみると良いと思う。","link":"https://masutaka.net/2011-04-30-1/","isoDate":"2011-04-30T00:00:00.000Z","dateMiliSeconds":1304121600000,"authorName":"masutaka"},{"title":"『仕事は5年でやめなさい。』を読んだ","content":"熱い本だった。\n限りある人生、閃光のように生きよと言うことか。\n特に飲食関係で独立したいと思っている人は、ぜひ読むべきかと。","contentSnippet":"熱い本だった。限りある人生、閃光のように生きよと言うことか。特に飲食関係で独立したいと思っている人は、ぜひ読むべきかと。","link":"https://masutaka.net/2011-04-22-2/","isoDate":"2011-04-22T01:00:00.000Z","dateMiliSeconds":1303434000000,"authorName":"masutaka"},{"title":"退職しました","content":"昨日 4/21 付けで、11 年間お世話になった某 M 社を退職しました。\nM 社にはプログラミングのプの字から教えてもらい、大変感謝しています。\n組み込み、インフラ、テスト等々、いろんな経験をさせてもらって、本当\nにこの会社に入って良かったと思っています。\nでも目を閉じると、辛かった事ばかり覚えているものですねw インフラの\n方は、Cisco のルーター設定できた！とか、Becky! から LDAP のアドレス\n帳参照できた！とか結構すぐ思い出すのですけど。\nさて、実はここ 1〜2 年、もっと他の仕事をやってみたい、違う世界を知\nりたいという欲求が徐々に高まっていました。\nその中でも Twitter の影響は一番大きかったです。これで会社を辞めたよ\nうなものです(笑)。こんなに手軽かつ身近に、違う世界を感じられるツー\nルを私は知りません。\n去年の夏、某オンライン英会話スクールの開始を知ったのも Twitter でし\nた。そのすぐ後からそこの生徒になりましたが、これがなかなか面白い。\n9 月なんてレッスンを受けなかったのは、飲み会があった 2 日間だけでした。\n中の人も楽しそうに仕事をやっているようで、それはずっと気になってい\nました。そこで忘れもしない今年の初め、中の人にアポを取ってみたとこ\nろ、じゃあ試しにフィリピン見に来ますかと言うことになりました。\nただしその時点では、退職と英会話スクールの仕事は分けて考えて、自分\nを追い詰めないようにはしていました。\nそこからの私の行動は速かったと思います。3 月頭から有休消化に入るこ\nとにし、そのタイミングでフィリピンに行くことにしました(実際に行った\nのは 3/15 でした)。\n行ってみないと分からないもので、予想していたよりも泥臭く、それなり\nに、いやかなりビックリしましたし、ビビリました。そして分からないこ\nとだらけです。フィリピンの生活、彼らの仕事、そして英語w\n最初は相当気が張っていました。最後はだいぶ慣れて、帰りたくない気持\nちでいっぱいでしたが。\nあ、滞在中は、生徒として Web からレッスンを予約して、オンラインなら\nぬオフライン英会話を受けておりました。Skype の向こう側の先生方に生\nで会えたのは感動でしたねえ。発音レッスンなんかは、やっぱり Skype よ\nり生の方が分かりやすいです(オイ\n何はともあれ、もう走り出してしまいました。しばらくは何も考えず、突っ\n走っていこうと思います。\n最後に。なんだかんだで転職は体力を使います。転職の前に体力を付ける\nことを強くお勧めします。気持ちも勝手に上向きます。クイックシェイプ\nいいですよw [2011-03-05-1] おまけ: フィリピンへの入国の様子(・ω・)?\n  ","contentSnippet":"昨日 4/21 付けで、11 年間お世話になった某 M 社を退職しました。M 社にはプログラミングのプの字から教えてもらい、大変感謝しています。組み込み、インフラ、テスト等々、いろんな経験をさせてもらって、本当にこの会社に入って良かったと思っています。でも目を閉じると、辛かった事ばかり覚えているものですねw インフラの方は、Cisco のルーター設定できた！とか、Becky! から LDAP のアドレス帳参照できた！とか結構すぐ思い出すのですけど。さて、実はここ 1〜2 年、もっと他の仕事をやってみたい、違う世界を知りたいという欲求が徐々に高まっていました。その中でも Twitter の影響は一番大きかったです。これで会社を辞めたようなものです(笑)。こんなに手軽かつ身近に、違う世界を感じられるツールを私は知りません。去年の夏、某オンライン英会話スクールの開始を知ったのも Twitter でした。そのすぐ後からそこの生徒になりましたが、これがなかなか面白い。9 月なんてレッスンを受けなかったのは、飲み会があった 2 日間だけでした。中の人も楽しそうに仕事をやっているようで、それはずっと気になっていました。そこで忘れもしない今年の初め、中の人にアポを取ってみたところ、じゃあ試しにフィリピン見に来ますかと言うことになりました。ただしその時点では、退職と英会話スクールの仕事は分けて考えて、自分を追い詰めないようにはしていました。そこからの私の行動は速かったと思います。3 月頭から有休消化に入ることにし、そのタイミングでフィリピンに行くことにしました(実際に行ったのは 3/15 でした)。行ってみないと分からないもので、予想していたよりも泥臭く、それなりに、いやかなりビックリしましたし、ビビリました。そして分からないことだらけです。フィリピンの生活、彼らの仕事、そして英語w最初は相当気が張っていました。最後はだいぶ慣れて、帰りたくない気持ちでいっぱいでしたが。あ、滞在中は、生徒として Web からレッスンを予約して、オンラインならぬオフライン英会話を受けておりました。Skype の向こう側の先生方に生で会えたのは感動でしたねえ。発音レッスンなんかは、やっぱり Skype より生の方が分かりやすいです(オイ何はともあれ、もう走り出してしまいました。しばらくは何も考えず、突っ走っていこうと思います。最後に。なんだかんだで転職は体力を使います。転職の前に体力を付けることを強くお勧めします。気持ちも勝手に上向きます。クイックシェイプいいですよw [2011-03-05-1] おまけ: フィリピンへの入国の様子(・ω・)?","link":"https://masutaka.net/2011-04-22-1/","isoDate":"2011-04-22T00:00:00.000Z","dateMiliSeconds":1303430400000,"authorName":"masutaka"},{"title":"Mac で手動インストールした apps","content":"自分用のメモ。随時更新。\nCurrencyConverter155.zip\t# DashBoard\nESET Cyber Security\nKindle For Mac\nSoraMoyo1.5.3.zip\t# DashBoard\nこれ以外は[2014-01-25-1] のbrew-cask、もしくはApp Storeでインストー\nルしている。Boxenを使っていたこともあったけど[2013-11-23-1] 、今は\nbrew-caskに移行した。","contentSnippet":"自分用のメモ。随時更新。CurrencyConverter155.zip\t# DashBoardESET Cyber SecurityKindle For MacSoraMoyo1.5.3.zip\t# DashBoardこれ以外は[2014-01-25-1] のbrew-cask、もしくはApp Storeでインストールしている。Boxenを使っていたこともあったけど[2013-11-23-1] 、今はbrew-caskに移行した。","link":"https://masutaka.net/2011-04-21-1/","isoDate":"2011-04-21T00:00:00.000Z","dateMiliSeconds":1303344000000,"authorName":"masutaka"},{"title":"CakePHP-1.2 系の構築方法","content":"自分用のメモ。\nMacports の Apache を使っている。\n一回だけ edit httpd.conf\n% sudo cp /opt/local/etc/php5/php.ini-development /opt/local/etc/php5/php.ini [src] edit php.ini [src] % sudo -u mysql mysql_install_db5 CakePHP を作るたびに .htaccess に以下を追加。\nRewriteBase /~masutaka/cake/ app/.htaccess に以下を追加。\nRewriteBase /~masutaka/cake/app/ app/webroot/.htaccess に以下を追加。\nRewriteBase /~masutaka/cake/app/webroot/ Apache が読み書きできるように。\n% mkdir -p app/tmp/cache % chmod -R o+rw app/tmp edit app/config/core.php\n//date_default_timezone_set(&#39;UTC&#39;); ↓ date_default_timezone_set(&#39;Asia/Tokyo&#39;); edit app/config/core.php\nConfigure::write(&#39;Security.salt&#39;, &#39;DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi&#39;); ↓ Configure::write(&#39;Security.salt&#39;, &#39;DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mimasutaka&#39;); edit app/config/core.php\nConfigure::write(&#39;Security.cipherSeed&#39;, &#39;76859309657453542496749683645&#39;); ↓ Configure::write(&#39;Security.cipherSeed&#39;, &#39;768593096574535424967496836450123&#39;); % mysql5 -u root &gt;create database cake character set utf8; 参考情報:","contentSnippet":"自分用のメモ。Macports の Apache を使っている。一回だけ edit httpd.conf% sudo cp /opt/local/etc/php5/php.ini-development /opt/local/etc/php5/php.ini [src] edit php.ini [src] % sudo -u mysql mysql_install_db5 CakePHP を作るたびに .htaccess に以下を追加。RewriteBase /~masutaka/cake/ app/.htaccess に以下を追加。RewriteBase /~masutaka/cake/app/ app/webroot/.htaccess に以下を追加。RewriteBase /~masutaka/cake/app/webroot/ Apache が読み書きできるように。% mkdir -p app/tmp/cache % chmod -R o+rw app/tmp edit app/config/core.php//date_default_timezone_set('UTC'); ↓ date_default_timezone_set('Asia/Tokyo'); edit app/config/core.phpConfigure::write('Security.salt', 'DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi'); ↓ Configure::write('Security.salt', 'DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mimasutaka'); edit app/config/core.phpConfigure::write('Security.cipherSeed', '76859309657453542496749683645'); ↓ Configure::write('Security.cipherSeed', '768593096574535424967496836450123'); % mysql5 -u root >create database cake character set utf8; 参考情報:","link":"https://masutaka.net/2011-03-11-1/","isoDate":"2011-03-11T00:00:00.000Z","dateMiliSeconds":1299801600000,"authorName":"masutaka"},{"title":"初めて Mac で Emacs をビルドした！","content":"loading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Emacs-23.3 がリリースされたとのことなので、@tomoyaton さんのビルド\nをリアルタイムで眺めながら 、初めて Mac でビルドしてみました。\n% wget http://ftp.gnu.org/pub/gnu/emacs/emacs-23.3.tar.bz2 % tar xjf emacs-23.3.tar.bz2 % mkdir work; cd work % ../emacs-23.3/configure --with-ns --without-x 2&gt;&amp;1 | tee ../emacs-23.3_configure.log % cp config.log ../emacs-23.3_config.log % make 2&gt;&amp;1 | tee ../emacs-23.3_make.log % make GZIP_PROG=&#34;&#34; install 2&gt;&amp;1 | tee ../emacs-23.3_make-install.log % cp -r nextstep/Emacs.app /Applications ログを神経質に残しているのは、インフラ担当時代の癖です。。","contentSnippet":"loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  Emacs-23.3 がリリースされたとのことなので、@tomoyaton さんのビルドをリアルタイムで眺めながら 、初めて Mac でビルドしてみました。% wget http://ftp.gnu.org/pub/gnu/emacs/emacs-23.3.tar.bz2 % tar xjf emacs-23.3.tar.bz2 % mkdir work; cd work % ../emacs-23.3/configure --with-ns --without-x 2>&1 | tee ../emacs-23.3_configure.log % cp config.log ../emacs-23.3_config.log % make 2>&1 | tee ../emacs-23.3_make.log % make GZIP_PROG=\"\" install 2>&1 | tee ../emacs-23.3_make-install.log % cp -r nextstep/Emacs.app /Applications ログを神経質に残しているのは、インフラ担当時代の癖です。。","link":"https://masutaka.net/2011-03-10-1/","isoDate":"2011-03-10T00:00:00.000Z","dateMiliSeconds":1299715200000,"authorName":"masutaka"},{"title":"svn で空のディレクトリが競合して困ったら","content":"% svn status -q C share &gt; local delete, incoming edit upon update % svn resolve --accept=working share &#39;share&#39; の競合状態を解消しました 参考ツイート\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ","contentSnippet":"% svn status -q C share > local delete, incoming edit upon update % svn resolve --accept=working share 'share' の競合状態を解消しました 参考ツイートloading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i","link":"https://masutaka.net/2011-03-06-1/","isoDate":"2011-03-06T00:00:00.000Z","dateMiliSeconds":1299369600000,"authorName":"masutaka"},{"title":"クイックシェイプを始めてまもなく6ヶ月(その３結果編)","content":"クイックシェイプ の話その３です。\nその１導入編はこちら [2011-03-05-1] 、その２紹介編はこちら [2011-03-05-2] スロトレで挫折した私ですが、このジムならイケル！！と感じました。逆\nにこの方法でもダメだったら、もうダイエットに成功することはないだろ\nうとも思いました。ある意味背水の陣です。\nということで、始めた頃は水金以外は毎日通っていました。\n水曜日は付き合いのジョギング、金曜日はジムが休みなので、基本行ける\n日は毎日通っていたことになります。クレイジーですね。\nこれはスロトレの時に思い知った苦い経験からです。例えばトレーニング\nの日を月水土にしようと決めると、飲み会とかで出来ない日がきっかけに\nなり、だんだんとやらなくなります。そう私は弱い人間なんです。\nなので最初は何も考えずに毎日行く、飲み会の次の日でも頑張って行く、\nこのように良い意味で思考停止することで習慣化に成功しました。今は週\n3〜4 回に減らしましたが、習慣化したおかげで今後は怠け要因で行かなく\nなる可能性は低そうです。\nここまでやれば少なくとも半年後には体重が 3〜4kg 落ちて、腹筋も割れ\nた快適ライフを送れるよね・・・\nそんなふうに考えていた時期が俺にもありました\n6 ヶ月経った今、数値はあまり減っていません。＼(^o^)／\n(体重は 1kg くらい、体脂肪率も 2〜3% くらいしか減らず。)\nやはりサーキットトレーニングだけだと筋肉量を増やせても、有酸素運動\nは足りないので、ある意味予想通りなのかもしれません。\nジム内にあるウォーキングマシンを使うとか、ジム以外でもウォーキング\nをすれば数値は減りそうです。面倒でそこまではやりませんでした。。。\nただし、体は締まりました。今までピチピチだった服がある程度スムーズ\nに着られるになりました。ウエストや脚も細くなったようで、無理せずパ\nンツを履けるようになりました。洗顔の時に自分の顔に触れると、前より\n小顔になったなあと思います。\n体も軽くなり疲れづらくなりました。腹がよく減るようになり、トイレも\n近くwなりました(前は就業時間中１回だけも普通でした)。基礎代謝が上がっ\nたのでしょう。\nイマイチなアピールになってしまいましたが、隙間時間を使って体を動か\nしたり、ダイエットしたい人にオススメなジムであることは確かです。\nまずはやってみましょう！","contentSnippet":"クイックシェイプ の話その３です。その１導入編はこちら [2011-03-05-1] 、その２紹介編はこちら [2011-03-05-2] スロトレで挫折した私ですが、このジムならイケル！！と感じました。逆にこの方法でもダメだったら、もうダイエットに成功することはないだろうとも思いました。ある意味背水の陣です。ということで、始めた頃は水金以外は毎日通っていました。水曜日は付き合いのジョギング、金曜日はジムが休みなので、基本行ける日は毎日通っていたことになります。クレイジーですね。これはスロトレの時に思い知った苦い経験からです。例えばトレーニングの日を月水土にしようと決めると、飲み会とかで出来ない日がきっかけになり、だんだんとやらなくなります。そう私は弱い人間なんです。なので最初は何も考えずに毎日行く、飲み会の次の日でも頑張って行く、このように良い意味で思考停止することで習慣化に成功しました。今は週3〜4 回に減らしましたが、習慣化したおかげで今後は怠け要因で行かなくなる可能性は低そうです。ここまでやれば少なくとも半年後には体重が 3〜4kg 落ちて、腹筋も割れた快適ライフを送れるよね・・・そんなふうに考えていた時期が俺にもありました6 ヶ月経った今、数値はあまり減っていません。＼(^o^)／(体重は 1kg くらい、体脂肪率も 2〜3% くらいしか減らず。)やはりサーキットトレーニングだけだと筋肉量を増やせても、有酸素運動は足りないので、ある意味予想通りなのかもしれません。ジム内にあるウォーキングマシンを使うとか、ジム以外でもウォーキングをすれば数値は減りそうです。面倒でそこまではやりませんでした。。。ただし、体は締まりました。今までピチピチだった服がある程度スムーズに着られるになりました。ウエストや脚も細くなったようで、無理せずパンツを履けるようになりました。洗顔の時に自分の顔に触れると、前より小顔になったなあと思います。体も軽くなり疲れづらくなりました。腹がよく減るようになり、トイレも近くwなりました(前は就業時間中１回だけも普通でした)。基礎代謝が上がったのでしょう。イマイチなアピールになってしまいましたが、隙間時間を使って体を動かしたり、ダイエットしたい人にオススメなジムであることは確かです。まずはやってみましょう！","link":"https://masutaka.net/2011-03-05-3/","isoDate":"2011-03-05T02:00:00.000Z","dateMiliSeconds":1299290400000,"authorName":"masutaka"},{"title":"クイックシェイプを始めてまもなく6ヶ月(その２紹介編)","content":"クイックシェイプ の話その２です。\nその１導入編はこちら [2011-03-05-1] このジムはサーキットトレーニングを取り入れていて、エアボードや各種\nトレーニングマシンを 1 分間隔で回っていきます。1 周がだいたい 15 分\nで、2〜3 周します。\nエアボードでは DVD に合わせて体を動かします。これが思うようにならな\nいし、結構きつい。9 月でまだ暑かったこともありますが、あっという間\nに汗だくです。\nこのジムが他と変わっているのが「シャワーがない」ことです。一見ダメっ\nぽいですが、シャワーは家で入った方が持って行く荷物が少ないし、時間\n短縮にもなります。合理的だと思いました。\nもっともこれは欠点にもなり得て、もし最寄り駅にこのジムがなかったら\n行こうとは思わないでしょう。\nあとは、デイタイムとかナイトタイムとか変な時間制限がないことも良い\nです。(平日 13:00-14:30、土日祝日 13:00-14:00 の昼休みはシフトとか\nうまく使って、なくして欲しいけど。。)\n料金が安いことも魅力的です。半年会員だと月々 5000 円程度です。\nその３結果編 [2011-03-05-3] に続きます。","contentSnippet":"クイックシェイプ の話その２です。その１導入編はこちら [2011-03-05-1] このジムはサーキットトレーニングを取り入れていて、エアボードや各種トレーニングマシンを 1 分間隔で回っていきます。1 周がだいたい 15 分で、2〜3 周します。エアボードでは DVD に合わせて体を動かします。これが思うようにならないし、結構きつい。9 月でまだ暑かったこともありますが、あっという間に汗だくです。このジムが他と変わっているのが「シャワーがない」ことです。一見ダメっぽいですが、シャワーは家で入った方が持って行く荷物が少ないし、時間短縮にもなります。合理的だと思いました。もっともこれは欠点にもなり得て、もし最寄り駅にこのジムがなかったら行こうとは思わないでしょう。あとは、デイタイムとかナイトタイムとか変な時間制限がないことも良いです。(平日 13:00-14:30、土日祝日 13:00-14:00 の昼休みはシフトとかうまく使って、なくして欲しいけど。。)料金が安いことも魅力的です。半年会員だと月々 5000 円程度です。その３結果編 [2011-03-05-3] に続きます。","link":"https://masutaka.net/2011-03-05-2/","isoDate":"2011-03-05T01:00:00.000Z","dateMiliSeconds":1299286800000,"authorName":"masutaka"},{"title":"クイックシェイプを始めてまもなく6ヶ月(その１導入編)","content":"去年の 9 月からクイックシェイプ ってジムに通っています。\n6 ヶ月近く続けたためか、体が締まって疲れづらくなりました。最寄り駅\nにスタジオがある方は、是非体験してみて下さい！\n私はこんな人です。\n 35 歳、男、中肉低身長 付き合いで、秋の河口湖マラソン(27km)に向けてジョギングすることは\nあるが、走るのは好きではない。むしろ嫌い。 出来ることなら体を動かしたくないと思っている。というか、実際体は\n動かしてなくて引きこもりに近かった。会社には普通に行っていたけどね。 今まで買ったもの\nボディブレード →後輩にあげた\nツイスト＆シェイプ →まだ持っている\n「ツイスト＆シェイプ」が欲しい方はご一報を。。 今まで試したダイエット\nヘルシア緑茶を毎日飲む→3ヶ月で効果なしと判断\nスロトレ→3ヶ月で飽きた\n他忘れた。  始めた理由は１つだけ。そう「ダイエット」です。\n大学の頃から年々贅肉が蓄積され、ピチピチな服が多くなり年々危機感を\n募らせていました。\nスロトレは一応 3 ヶ月続きましたが、最大の欠点は「楽しくない」ことに\n尽きます。あれを続けられる人はよっぽど心が強いはずです。\nなので楽しく続けられる方法はないかと考えていたところ、近くにクイッ\nクシェイプがあることを思い出しました。ちょっと調べたところ、今の自\n分に合っていそうです。\n思い立ったら即体験です(※)。さっそく次の日に行ってきました。\n※ この頃から、まずは何も考えずに行動して、その後に考えることを心が\nけ始めました。兎にも角にも行動すれば、何かしら変わります。逆に、考\nえすぎて行動しないと、結局何も変わりません。\nその２紹介編 [2011-03-05-2] に続きます。","contentSnippet":"去年の 9 月からクイックシェイプ ってジムに通っています。6 ヶ月近く続けたためか、体が締まって疲れづらくなりました。最寄り駅にスタジオがある方は、是非体験してみて下さい！私はこんな人です。 35 歳、男、中肉低身長 付き合いで、秋の河口湖マラソン(27km)に向けてジョギングすることはあるが、走るのは好きではない。むしろ嫌い。 出来ることなら体を動かしたくないと思っている。というか、実際体は動かしてなくて引きこもりに近かった。会社には普通に行っていたけどね。 今まで買ったものボディブレード →後輩にあげたツイスト＆シェイプ →まだ持っている「ツイスト＆シェイプ」が欲しい方はご一報を。。 今まで試したダイエットヘルシア緑茶を毎日飲む→3ヶ月で効果なしと判断スロトレ→3ヶ月で飽きた他忘れた。  始めた理由は１つだけ。そう「ダイエット」です。大学の頃から年々贅肉が蓄積され、ピチピチな服が多くなり年々危機感を募らせていました。スロトレは一応 3 ヶ月続きましたが、最大の欠点は「楽しくない」ことに尽きます。あれを続けられる人はよっぽど心が強いはずです。なので楽しく続けられる方法はないかと考えていたところ、近くにクイックシェイプがあることを思い出しました。ちょっと調べたところ、今の自分に合っていそうです。思い立ったら即体験です(※)。さっそく次の日に行ってきました。※ この頃から、まずは何も考えずに行動して、その後に考えることを心がけ始めました。兎にも角にも行動すれば、何かしら変わります。逆に、考えすぎて行動しないと、結局何も変わりません。その２紹介編 [2011-03-05-2] に続きます。","link":"https://masutaka.net/2011-03-05-1/","isoDate":"2011-03-05T00:00:00.000Z","dateMiliSeconds":1299283200000,"authorName":"masutaka"},{"title":"Amazon へのリンクに楽天へのリンクも追加しました","content":"Amazon へのリンクに楽天へのリンクも追加しました。\n[を] ASIN から楽天ブックスのページへ飛ばす CGI またもや、たつをさんのコピーです。\n楽天のアフィリエイト ID とデベロッパー ID は\nhttp://webservice.rakuten.co.jp/ から確認できます。\n楽天 API って、こうやって使うのですね。へえ〜\nって、今まで存在を知らなかったけど。。。\n 楽天ブックス書籍検索 API\nhttp://webservice.rakuten.co.jp/api/booksbooksearch/   TODO:\nNOT FOUND! だったら、search.rakuten.co.jp を使いたいです。\n追伸:\nMacOSX で LWP::Simple がなかったら、p5-libwww-perl をインストールす\nれば良いです。&ldquo;sudo port install p5-libwww-perl&rdquo;","contentSnippet":"Amazon へのリンクに楽天へのリンクも追加しました。[を] ASIN から楽天ブックスのページへ飛ばす CGI またもや、たつをさんのコピーです。楽天のアフィリエイト ID とデベロッパー ID はhttp://webservice.rakuten.co.jp/ から確認できます。楽天 API って、こうやって使うのですね。へえ〜って、今まで存在を知らなかったけど。。。 楽天ブックス書籍検索 APIhttp://webservice.rakuten.co.jp/api/booksbooksearch/   TODO:NOT FOUND! だったら、search.rakuten.co.jp を使いたいです。追伸:MacOSX で LWP::Simple がなかったら、p5-libwww-perl をインストールすれば良いです。“sudo port install p5-libwww-perl”","link":"https://masutaka.net/2011-03-04-2/","isoDate":"2011-03-04T01:00:00.000Z","dateMiliSeconds":1299200400000,"authorName":"masutaka"},{"title":"このブログのコメントシステムも zenback にしました","content":"http://zenback.jp/ [を] zenback を設置した この記事を見たときははてブしただけでしたが、\n[を] zenback の素晴らしいのは設置する人以外はアカウント取得の必要がないところ この記事を見て勢いで移行してしまいました。\n設置はすごく簡単で、zenback に新規登録すると提示されるコードを、ア\nイテム毎のページのテンプレートにコピペするだけです。便利なサービス\nは外注するに限りますね。\nDISQUS を使い始めたのは [2010-05-03-1] です。一年も経たずに移行とな\nりました。hatana_bookmark_anywhere.js [2009-11-22-1] ももちろん移行\nです。\n追記(2011-03-05):\nやっぱり DISQUS は復活させました。リアクションは zenbak にお任せな\nので、もちろん OFF です。DISQUS の管理画面から変更できます。","contentSnippet":"http://zenback.jp/ [を] zenback を設置した この記事を見たときははてブしただけでしたが、[を] zenback の素晴らしいのは設置する人以外はアカウント取得の必要がないところ この記事を見て勢いで移行してしまいました。設置はすごく簡単で、zenback に新規登録すると提示されるコードを、アイテム毎のページのテンプレートにコピペするだけです。便利なサービスは外注するに限りますね。DISQUS を使い始めたのは [2010-05-03-1] です。一年も経たずに移行となりました。hatana_bookmark_anywhere.js [2009-11-22-1] ももちろん移行です。追記(2011-03-05):やっぱり DISQUS は復活させました。リアクションは zenbak にお任せなので、もちろん OFF です。DISQUS の管理画面から変更できます。","link":"https://masutaka.net/2011-03-04-1/","isoDate":"2011-03-04T00:00:00.000Z","dateMiliSeconds":1299196800000,"authorName":"masutaka"},{"title":"『“本物のお金持ち”と結婚するルール—ホリエモンの恋愛講座』を読んだ","content":"面白かった。\n要約すると、お金持ちと結婚するのはオススメしないけど、それでもした\nいのなら私が教えましょうって本。ただその選択は修羅道への始まりなりw\nまあ、本当にホリエモンが言いたいことは最後に書いてあるから、ここで\nは書かないことにする。","contentSnippet":"面白かった。要約すると、お金持ちと結婚するのはオススメしないけど、それでもしたいのなら私が教えましょうって本。ただその選択は修羅道への始まりなりwまあ、本当にホリエモンが言いたいことは最後に書いてあるから、ここでは書かないことにする。","link":"https://masutaka.net/2011-02-27-2/","isoDate":"2011-02-27T01:00:00.000Z","dateMiliSeconds":1298768400000,"authorName":"masutaka"},{"title":"『実践的プログラムテスト入門—ソフトウェアのブラックボックステスト』を読んだ","content":"全然分からなくて、30 分で投げてしまった。＼(^o^)／\n「実践的」と題しているが、私にはどれが現場で使えるのかさっぱり分か\nらなかった。Amazon のレビューを見ると、3 人とも絶賛しているが。。。\n追伸: この本も一年以上 @simon6867 氏に借りたままでした。\nごめんなさい。","contentSnippet":"全然分からなくて、30 分で投げてしまった。＼(^o^)／「実践的」と題しているが、私にはどれが現場で使えるのかさっぱり分からなかった。Amazon のレビューを見ると、3 人とも絶賛しているが。。。追伸: この本も一年以上 @simon6867 氏に借りたままでした。ごめんなさい。","link":"https://masutaka.net/2011-02-27-1/","isoDate":"2011-02-27T00:00:00.000Z","dateMiliSeconds":1298764800000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(GB+DS編)","content":"[2011-02-11-1] 目次\n魔界塔士Sa・Ga  レベル上げずにラスボスの前でセーブして挫折しかけた。ほんっとに偶然\nチェーンソー持ってて、試しに使ってみたら&hellip;。\nサ・ガ2 秘宝伝説  音楽とストーリーが良いイメージ。\nサ・ガ3 時空の覇者  忘れた。。。\nドラゴンクエストIX 星空の守り人  やっぱり旅芸人でしょう！！昼休みに職場のみんなとやった時を思い出す\nなあ。竜王に一撃で倒される低さのレベルで、吐息返しが面白いように決\nまり、見事勝利！！ MBP 取った！！\n[2011-02-11-1] 目次","contentSnippet":"[2011-02-11-1] 目次魔界塔士Sa・Ga  レベル上げずにラスボスの前でセーブして挫折しかけた。ほんっとに偶然チェーンソー持ってて、試しに使ってみたら…。サ・ガ2 秘宝伝説  音楽とストーリーが良いイメージ。サ・ガ3 時空の覇者  忘れた。。。ドラゴンクエストIX 星空の守り人  やっぱり旅芸人でしょう！！昼休みに職場のみんなとやった時を思い出すなあ。竜王に一撃で倒される低さのレベルで、吐息返しが面白いように決まり、見事勝利！！ MBP 取った！！[2011-02-11-1] 目次","link":"https://masutaka.net/2011-02-11-7/","isoDate":"2011-02-11T06:00:00.000Z","dateMiliSeconds":1297404000000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(PS3編)","content":"[2011-02-11-1] 目次\nDEVIL MAY CRY 4  ネロは下手クソでも扱いやすくて好き。チャージショット強ぇええ。\nでもダンテは無理だよ..。DMD のダンテステージ開始で止まった。\nBAYONETTA  回避がうまくなると、自分が達人のように思えてくる。世界観も好き。\nファイナルファンタジーXIII  面白いゲームだったなあ。全く新しい戦闘システム。\n時間が無限にあれば、もっと亀狩りやったんだけど。。\n[2011-02-11-1] 目次","contentSnippet":"[2011-02-11-1] 目次DEVIL MAY CRY 4  ネロは下手クソでも扱いやすくて好き。チャージショット強ぇええ。でもダンテは無理だよ..。DMD のダンテステージ開始で止まった。BAYONETTA  回避がうまくなると、自分が達人のように思えてくる。世界観も好き。ファイナルファンタジーXIII  面白いゲームだったなあ。全く新しい戦闘システム。時間が無限にあれば、もっと亀狩りやったんだけど。。[2011-02-11-1] 目次","link":"https://masutaka.net/2011-02-11-6/","isoDate":"2011-02-11T05:00:00.000Z","dateMiliSeconds":1297400400000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(PS2編)","content":"[2011-02-11-1] 目次\nドラゴンクエストVIII 空と海と大地と呪われし姫君  世界観、ゲームバランス等含めて好き。ミニゲームないし。寝オチしなが\nらメタルキング狩りしてた。練金に洗濯ばさみはかかせないよねっ！！\n鬼武者  もちろん「鬼武者」の称号は取りましたとも！！\n幻魔・鬼武者やりたかったなあ。\n鬼武者2  孫一の一閃が好き。銃なのにwww\nストーリーを全コンプしたのに、あの特典って。。(；´д⊂)\n鬼組おもしろいね！！\n鬼武者3  ポリゴンになってキャラが小さくなったイメージ。２〜３周したかなあ。\n新 鬼武者 DAWN OF DREAMS  武器多すぎ。ラスボスを倒すのに非常に苦労した。\n鬼武者 無頼伝  クソゲー\nDEVIL MAY CRY  スタイリッシュにはなれなかった。他の人の動画で我慢。。。\nDEVIL MAY CRY 2  ちょっとやって売っちゃった。バグが多いらしい。\nDEVIL MAY CRY 3 Special Edition  兄貴最高！！\nShinobi  一番ハマったゲームかも。\nハードヒルコ様に 8 時間くらい挑戦し続けたなあ。。\nKunoichi -忍-  こちらはイマイチ。ボスの倒し方が分かりづらかった。Shinobi みたいに\n一撃じゃないとねえ。。\nストリートファイターEX3  メテオを見て楽しんだよ。\nヴァンパイア ダークストーカーズ コレクション  指動かない。。。格ゲーは人の動画を見るに限る(違\nキン肉マン ジェネレーションズ  うーん、クソゲーの部類かなあ。","contentSnippet":"[2011-02-11-1] 目次ドラゴンクエストVIII 空と海と大地と呪われし姫君  世界観、ゲームバランス等含めて好き。ミニゲームないし。寝オチしながらメタルキング狩りしてた。練金に洗濯ばさみはかかせないよねっ！！鬼武者  もちろん「鬼武者」の称号は取りましたとも！！幻魔・鬼武者やりたかったなあ。鬼武者2  孫一の一閃が好き。銃なのにwwwストーリーを全コンプしたのに、あの特典って。。(；´д⊂)鬼組おもしろいね！！鬼武者3  ポリゴンになってキャラが小さくなったイメージ。２〜３周したかなあ。新 鬼武者 DAWN OF DREAMS  武器多すぎ。ラスボスを倒すのに非常に苦労した。鬼武者 無頼伝  クソゲーDEVIL MAY CRY  スタイリッシュにはなれなかった。他の人の動画で我慢。。。DEVIL MAY CRY 2  ちょっとやって売っちゃった。バグが多いらしい。DEVIL MAY CRY 3 Special Edition  兄貴最高！！Shinobi  一番ハマったゲームかも。ハードヒルコ様に 8 時間くらい挑戦し続けたなあ。。Kunoichi -忍-  こちらはイマイチ。ボスの倒し方が分かりづらかった。Shinobi みたいに一撃じゃないとねえ。。ストリートファイターEX3  メテオを見て楽しんだよ。ヴァンパイア ダークストーカーズ コレクション  指動かない。。。格ゲーは人の動画を見るに限る(違キン肉マン ジェネレーションズ  うーん、クソゲーの部類かなあ。","link":"https://masutaka.net/2011-02-11-5/","isoDate":"2011-02-11T04:00:00.000Z","dateMiliSeconds":1297396800000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(PS編)","content":"[2011-02-11-1] 目次\nドラゴンクエストIV 導かれし者たち  ラスボスの直前で５年くらい放置していたのだけれど、やっとクリアー。\nLv45 でなんとか倒せた。\nファイナルファンタジーI・II プレミアムパッケージ  I はダイの大冒険のキャラの名前をつけて、戦士、モンク、赤、黒でクリアー。\nII は回避率の重要さを知り、HP や MP を上げずにクリアー。盾重要。\nファイナルファンタジーVII インターナショナル  とりあえずクリアーしただけだったな。ミニゲームが多すぎて心が折れた。\nファイナルファンタジーVIII  ちょっとしかやらずに売ってしまった。\n[2011-02-11-1] 目次","contentSnippet":"[2011-02-11-1] 目次ドラゴンクエストIV 導かれし者たち  ラスボスの直前で５年くらい放置していたのだけれど、やっとクリアー。Lv45 でなんとか倒せた。ファイナルファンタジーI・II プレミアムパッケージ  I はダイの大冒険のキャラの名前をつけて、戦士、モンク、赤、黒でクリアー。II は回避率の重要さを知り、HP や MP を上げずにクリアー。盾重要。ファイナルファンタジーVII インターナショナル  とりあえずクリアーしただけだったな。ミニゲームが多すぎて心が折れた。ファイナルファンタジーVIII  ちょっとしかやらずに売ってしまった。[2011-02-11-1] 目次","link":"https://masutaka.net/2011-02-11-4/","isoDate":"2011-02-11T03:00:00.000Z","dateMiliSeconds":1297393200000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(SFC編)","content":"[2011-02-11-1] 目次\nドラゴンクエストIII そして伝説へ  リメイク成功！クリアー後が楽しいよね。\nドラゴンクエストV 天空の花嫁  モンスターを全員仲間にして、人間含めて全員レベル MAX にしたなあ。\nさすがに 2 匹目以降のモンスターは仲間にしなかったけどw\nドラゴンクエストVI 幻の大地  ストーリーは一番好きかな。洗濯ばさみと連射コントローラー使って、人\n間全員勇者＆レベル MAX にした。でもこれやると、みんな無個性になっちゃ\nうんだよね。。ランプの魔王が強いらしいけど、モンスターは全然仲間に\nしなかったなあ。\nファイナルファンタジーIV  2 人プレイが熱かったなあ。友達は飽きてたけどww イージータイプが出た\nくらいだから、FF にしては難易度高めだった。月の宝箱を開ける時が一番\nドキドキしたかなあ。\nファイナルファンタジーV  全ジョブマスターにした！薬師のドラゴンパワー最強！！\nファイナルファンタジーVI  全員レベル 99 にして、魔法とかアビリティを全部覚えさせた！！\nと言いたいところだけど、ガウで一匹だけ覚えさせられなかった。。。\nMOTHER2 ギーグの逆襲  とりあえずクリアーはした。4 人目の武具は全部とれなかったなあ。。\n聖剣伝説2  最強の武器を取るのがめちゃめちゃ大変で挫折した。クリアーはしたけどね。\n聖剣伝説3  ラスボスが 3 通りあるから、全パターン試した。面白かったなあ。\nソウルブレイダー  独特の世界観が好き。\nガイア幻想紀  最後の赤い宝石の場所が分からなくて、数年後に見つけた攻略本見てよう\nやく完全クリアー。オチはまあまあ良かった。\nルドラの秘宝  難易度高めだったかなあ。この世界は属性に支配されてたね。\n[2011-02-11-1] 目次","contentSnippet":"[2011-02-11-1] 目次ドラゴンクエストIII そして伝説へ  リメイク成功！クリアー後が楽しいよね。ドラゴンクエストV 天空の花嫁  モンスターを全員仲間にして、人間含めて全員レベル MAX にしたなあ。さすがに 2 匹目以降のモンスターは仲間にしなかったけどwドラゴンクエストVI 幻の大地  ストーリーは一番好きかな。洗濯ばさみと連射コントローラー使って、人間全員勇者＆レベル MAX にした。でもこれやると、みんな無個性になっちゃうんだよね。。ランプの魔王が強いらしいけど、モンスターは全然仲間にしなかったなあ。ファイナルファンタジーIV  2 人プレイが熱かったなあ。友達は飽きてたけどww イージータイプが出たくらいだから、FF にしては難易度高めだった。月の宝箱を開ける時が一番ドキドキしたかなあ。ファイナルファンタジーV  全ジョブマスターにした！薬師のドラゴンパワー最強！！ファイナルファンタジーVI  全員レベル 99 にして、魔法とかアビリティを全部覚えさせた！！と言いたいところだけど、ガウで一匹だけ覚えさせられなかった。。。MOTHER2 ギーグの逆襲  とりあえずクリアーはした。4 人目の武具は全部とれなかったなあ。。聖剣伝説2  最強の武器を取るのがめちゃめちゃ大変で挫折した。クリアーはしたけどね。聖剣伝説3  ラスボスが 3 通りあるから、全パターン試した。面白かったなあ。ソウルブレイダー  独特の世界観が好き。ガイア幻想紀  最後の赤い宝石の場所が分からなくて、数年後に見つけた攻略本見てようやく完全クリアー。オチはまあまあ良かった。ルドラの秘宝  難易度高めだったかなあ。この世界は属性に支配されてたね。[2011-02-11-1] 目次","link":"https://masutaka.net/2011-02-11-3/","isoDate":"2011-02-11T02:00:00.000Z","dateMiliSeconds":1297389600000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(FC編)","content":"[2011-02-11-1] 目次\nバトルシティー 当時はファミコンが品薄で「ジョイスティック-7 」と「S.D.ステーション 」\nそれと下の「ロードファイター」の抱き合わせで買わされた。\nでも面白かったなあ。かなりハマった。\nロードファイター トレーラーが出現するとワクワクwwした。たしか 5 面をクリアすると\n1 面に戻ったよね。よくある無限ループタイプのゲームだった。\nスーパーマリオブラザーズ  今もまだクリアー出来るんじゃないかなあ。\nトランスフォーマー  2面さえ抜ければ、あとは大したことない。コンテニュー使い放題だし。\nドラゴンスレイヤーIV  これは難しかった。何年もかけてやっとクリアーした。\nYouTube 検索すると、、、すごいなああ。\nドンキーコング3 なぜか親がカロリーメイト(チーズ味)を箱買いして毎日食べてたから、ド\nンキーコング3を見るとカロリーメイト(チーズ味)を思い出す。逆もまた然り。\nエレベーターアクション 最初のビルしか攻略できなかった。。\n超時空要塞 マクロス  これも難しかったなあ。\nドラゴンクエスト  真面目にやったらレベル 10 くらいで挫折した。レベル 30 のパスワード\n使ってクリアーしたよ。。今はパスワード生成アプリあるよね。\nドラゴンクエストII 悪霊の神々  ロンダルキアの音楽は今聴いてもワクワクするね！\nドラゴンクエストIII そして伝説へ  最初にゾーマ様を倒したシーンは今も覚えている。勇者、武闘家、賢者が\n倒され、最後に残った瀕死の戦士(元魔法使い)が魔神の斧で会心の一\n撃！！熱かった。\nドラゴンクエストIV 導かれし者たち  ２周くらいしたかなあ。\nファイナルファンタジー  戦士、モンク、白、黒でやったなあ。シーフを選択する人が多くて爆死し\nてたw 実は赤が強いと知ったのは後のお話。\nファイナルファンタジーII  当時はバカだったから、HP と MP を上げまくってた。\nファイナルファンタジーIII  高校受験が終わった日にダッシュで買いに行った。禁ゲーしてたので。関","contentSnippet":"[2011-02-11-1] 目次バトルシティー 当時はファミコンが品薄で「ジョイスティック-7 」と「S.D.ステーション 」それと下の「ロードファイター」の抱き合わせで買わされた。でも面白かったなあ。かなりハマった。ロードファイター トレーラーが出現するとワクワクwwした。たしか 5 面をクリアすると1 面に戻ったよね。よくある無限ループタイプのゲームだった。スーパーマリオブラザーズ  今もまだクリアー出来るんじゃないかなあ。トランスフォーマー  2面さえ抜ければ、あとは大したことない。コンテニュー使い放題だし。ドラゴンスレイヤーIV  これは難しかった。何年もかけてやっとクリアーした。YouTube 検索すると、、、すごいなああ。ドンキーコング3 なぜか親がカロリーメイト(チーズ味)を箱買いして毎日食べてたから、ドンキーコング3を見るとカロリーメイト(チーズ味)を思い出す。逆もまた然り。エレベーターアクション 最初のビルしか攻略できなかった。。超時空要塞 マクロス  これも難しかったなあ。ドラゴンクエスト  真面目にやったらレベル 10 くらいで挫折した。レベル 30 のパスワード使ってクリアーしたよ。。今はパスワード生成アプリあるよね。ドラゴンクエストII 悪霊の神々  ロンダルキアの音楽は今聴いてもワクワクするね！ドラゴンクエストIII そして伝説へ  最初にゾーマ様を倒したシーンは今も覚えている。勇者、武闘家、賢者が倒され、最後に残った瀕死の戦士(元魔法使い)が魔神の斧で会心の一撃！！熱かった。ドラゴンクエストIV 導かれし者たち  ２周くらいしたかなあ。ファイナルファンタジー  戦士、モンク、白、黒でやったなあ。シーフを選択する人が多くて爆死してたw 実は赤が強いと知ったのは後のお話。ファイナルファンタジーII  当時はバカだったから、HP と MP を上げまくってた。ファイナルファンタジーIII  高校受験が終わった日にダッシュで買いに行った。禁ゲーしてたので。関","link":"https://masutaka.net/2011-02-11-2/","isoDate":"2011-02-11T01:00:00.000Z","dateMiliSeconds":1297386000000,"authorName":"masutaka"},{"title":"今までやったゲームまとめ(目次)","content":"ゲームメーター に今までやったゲームをメモっていたけど、「情報１ポケッ\nト原則」に忠実に従うことにしたので、この ChangeLog メモに引っ越した。\nコメントは当時を思い出しながら大幅に加筆。\n[2011-02-11-2] FC編\n[2011-02-11-3] SFC編\n[2011-02-11-4] PS編\n[2011-02-11-5] PS2編\n[2011-02-11-6] PS3編\n[2011-02-11-7] GB+DS編\n※ [2011-01-04-1] のとおり、今は全部売った。ゲームをやることは当分\nないだろうなあ。","contentSnippet":"ゲームメーター に今までやったゲームをメモっていたけど、「情報１ポケット原則」に忠実に従うことにしたので、この ChangeLog メモに引っ越した。コメントは当時を思い出しながら大幅に加筆。[2011-02-11-2] FC編[2011-02-11-3] SFC編[2011-02-11-4] PS編[2011-02-11-5] PS2編[2011-02-11-6] PS3編[2011-02-11-7] GB+DS編※ [2011-01-04-1] のとおり、今は全部売った。ゲームをやることは当分ないだろうなあ。","link":"https://masutaka.net/2011-02-11-1/","isoDate":"2011-02-11T00:00:00.000Z","dateMiliSeconds":1297382400000,"authorName":"masutaka"},{"title":"『プログラマが知るべき97のこと』を読んだ","content":"良書。私も含め、普段何十人もの達人と関わる機会のないプログラマは\nぜひ読むべき。\n個人的には、日本人プログラマーに Mew のかずさんを加えてほしかった。\nMew のコードって、洗練されていてとても美しいのだよね。言語は違うけ\nれども(いや違ったからこそか)、私のプログラミングの表現の幅を広げて\nくれた。\nちなみに Amazon のカスタマレビュー では、tdiary で有名なただただしさ\nんがレビューしている。こちらも必見。","contentSnippet":"良書。私も含め、普段何十人もの達人と関わる機会のないプログラマはぜひ読むべき。個人的には、日本人プログラマーに Mew のかずさんを加えてほしかった。Mew のコードって、洗練されていてとても美しいのだよね。言語は違うけれども(いや違ったからこそか)、私のプログラミングの表現の幅を広げてくれた。ちなみに Amazon のカスタマレビュー では、tdiary で有名なただただしさんがレビューしている。こちらも必見。","link":"https://masutaka.net/2011-02-09-1/","isoDate":"2011-02-09T00:00:00.000Z","dateMiliSeconds":1297209600000,"authorName":"masutaka"},{"title":"『KAGEROU』を読んだ","content":"非常に読みやすい小説だった。余計な説明がないせいなんだろうな。２時\n間ほどで読めるので、小説好きの方もミーハーな方にもオススメ。\n最後がよく分からなくて確信が持てない。Amazon の書評でも読んで補完し\nようかな。","contentSnippet":"非常に読みやすい小説だった。余計な説明がないせいなんだろうな。２時間ほどで読めるので、小説好きの方もミーハーな方にもオススメ。最後がよく分からなくて確信が持てない。Amazon の書評でも読んで補完しようかな。","link":"https://masutaka.net/2011-02-07-1/","isoDate":"2011-02-07T00:00:00.000Z","dateMiliSeconds":1297036800000,"authorName":"masutaka"},{"title":"『ゆるく考えよう 人生を１００倍ラクにする思考法』を読んだ","content":"面白い。自分の人生を違った視点で見られる。\n「所有という時代遅れ」は [2011-01-04-1] と同じだし、35 年ローンとか\n組んじゃダメってのも同意。(後者はただ面倒で先延ばしにしていただけで\nすが。。)\nただ「アドバイスの正しいもらい方」は？？だった。「他に何か聞いてお\nくべきことなどありますか？今までお聞きしたことと全く違うことでもい\nいのですが」うーん、ありえん。\nまあでも、そういう考え方もあるよね〜","contentSnippet":"面白い。自分の人生を違った視点で見られる。「所有という時代遅れ」は [2011-01-04-1] と同じだし、35 年ローンとか組んじゃダメってのも同意。(後者はただ面倒で先延ばしにしていただけですが。。)ただ「アドバイスの正しいもらい方」は？？だった。「他に何か聞いておくべきことなどありますか？今までお聞きしたことと全く違うことでもいいのですが」うーん、ありえん。まあでも、そういう考え方もあるよね〜","link":"https://masutaka.net/2011-02-05-1/","isoDate":"2011-02-05T00:00:00.000Z","dateMiliSeconds":1296864000000,"authorName":"masutaka"},{"title":"TeraTerm Menu の ssh 自動ログイン設定例","content":"@wadakei さん向けの情報。\nうちはこんな設定でした。\n会社の PC だと自動ログインできないのは何故なんだろう？？?","contentSnippet":"@wadakei さん向けの情報。うちはこんな設定でした。会社の PC だと自動ログインできないのは何故なんだろう？？?","link":"https://masutaka.net/2011-01-27-2/","isoDate":"2011-01-27T01:00:00.000Z","dateMiliSeconds":1296090000000,"authorName":"masutaka"},{"title":"MacPorts の使い方まとめ","content":"# MacPorts 自身のアップデート % sudo port selfupdate # アップデートが必要なパッケージがあるかの確認 % port outdated # パッケージを指定してアップデート % sudo port upgrade &lt;package name1&gt; &lt;package name2&gt; # 一括アップデート % sudo port upgrade outdated # パッケージを検索する % port search &lt;package name&gt; # パッケージの依存関係を調べる % port deps &lt;package name&gt; # パッケージの variants を調べる % port variants &lt;package name&gt; # パッケージの情報を得る % port info &lt;package name&gt; # パッケージをインストールする。port に -y オプションを付けるとインストール前の確認ができる % sudo port install &lt;package name&gt; # パッケージをアンインストールする % sudo port uninstall &lt;package name&gt; # 古いバージョンのパッケージをアンインストールする % sudo port uninstall inactive # 全てのパッケージをアンインストールする。 % sudo port -f uninstall installed # インストールしてあるパッケージをすべて表示 % port installed # そのファイルがどのパッケージに属するか調べる。 % port provides &lt;file name&gt; # パッケージに含まれているファイルを確認 % port contents &lt;package name&gt; 参考情報:","contentSnippet":"# MacPorts 自身のアップデート % sudo port selfupdate # アップデートが必要なパッケージがあるかの確認 % port outdated # パッケージを指定してアップデート % sudo port upgrade <package name1> <package name2> # 一括アップデート % sudo port upgrade outdated # パッケージを検索する % port search <package name> # パッケージの依存関係を調べる % port deps <package name> # パッケージの variants を調べる % port variants <package name> # パッケージの情報を得る % port info <package name> # パッケージをインストールする。port に -y オプションを付けるとインストール前の確認ができる % sudo port install <package name> # パッケージをアンインストールする % sudo port uninstall <package name> # 古いバージョンのパッケージをアンインストールする % sudo port uninstall inactive # 全てのパッケージをアンインストールする。 % sudo port -f uninstall installed # インストールしてあるパッケージをすべて表示 % port installed # そのファイルがどのパッケージに属するか調べる。 % port provides <file name> # パッケージに含まれているファイルを確認 % port contents <package name> 参考情報:","link":"https://masutaka.net/2011-01-27-1/","isoDate":"2011-01-27T00:00:00.000Z","dateMiliSeconds":1296086400000,"authorName":"masutaka"},{"title":"『600万人の女性に支持されるクックパッドというビジネス』を読んだ","content":"発売から１年半以上経って [2009-05-17-3] ようやく購入。予想以上に面\n白かった。クックパッドは「料理を楽しくする」ことだけを考え、実行し\n続けてきたことがよく分かった。常にユーザ視点。Web 関係者は読んだ方\nが良さそう。","contentSnippet":"発売から１年半以上経って [2009-05-17-3] ようやく購入。予想以上に面白かった。クックパッドは「料理を楽しくする」ことだけを考え、実行し続けてきたことがよく分かった。常にユーザ視点。Web 関係者は読んだ方が良さそう。","link":"https://masutaka.net/2011-01-23-1/","isoDate":"2011-01-23T00:00:00.000Z","dateMiliSeconds":1295740800000,"authorName":"masutaka"},{"title":"『アジャイルな見積りと計画づくり ~価値あるソフトウェアを育てる概念と技法~』を読んだ","content":"マネージャー向け。メンバーは『アジャイルプラクティス』\n[2010-05-05-2] がちょうど良い。\n私には説明が冗長かつ分かり辛く感じられたので、各章のまとめを中心に\n流し読みした。最後のケーススタディは実際のプロジェクトに使う時の参\n考になりそう。\n追伸: 去年の 6/3 に @simon6867 氏に借りて、今の今まで積んでました。\nごめんなさい。","contentSnippet":"マネージャー向け。メンバーは『アジャイルプラクティス』[2010-05-05-2] がちょうど良い。私には説明が冗長かつ分かり辛く感じられたので、各章のまとめを中心に流し読みした。最後のケーススタディは実際のプロジェクトに使う時の参考になりそう。追伸: 去年の 6/3 に @simon6867 氏に借りて、今の今まで積んでました。ごめんなさい。","link":"https://masutaka.net/2011-01-22-2/","isoDate":"2011-01-22T01:00:00.000Z","dateMiliSeconds":1295658000000,"authorName":"masutaka"},{"title":"StatusNet Desktop から StatusNet を使おう","content":"StatusNet Desktop 純正のクライアントソフトがあるとは知りませんでした。orz\n@crontab33 さん、ありがとうございます。\n  上のスクリーンショットは Windows 版です。他に [OSX 10.5 Intel]\n[Linux Intel 32-bit] [Linux Intel 64-bit] があるようです。\nWeb 版より良いところ  勝手に自動リロードしてくれる。 間違って Enter してもツイートしない。  Web 版より悪いところ  一画面に表示されるツイート数が少ない。 過去のツイートを辿れない。 削除されたツイートがいつまでも表示される。再起動してもダメ。\nローカルでキャッシュを持っているみたい。 動きがもっさりしている。  すごく良いクライアントではありませんが、選択肢が増えるのは良いことです。\nあ、試していませんが、iPhone 版もありました。\n追記(2011-01-24):\nクリーンルームだと以下のエラーが発生し、インストール出来ませんでした。。","contentSnippet":"StatusNet Desktop 純正のクライアントソフトがあるとは知りませんでした。orz@crontab33 さん、ありがとうございます。  上のスクリーンショットは Windows 版です。他に [OSX 10.5 Intel][Linux Intel 32-bit] [Linux Intel 64-bit] があるようです。Web 版より良いところ  勝手に自動リロードしてくれる。 間違って Enter してもツイートしない。  Web 版より悪いところ  一画面に表示されるツイート数が少ない。 過去のツイートを辿れない。 削除されたツイートがいつまでも表示される。再起動してもダメ。ローカルでキャッシュを持っているみたい。 動きがもっさりしている。  すごく良いクライアントではありませんが、選択肢が増えるのは良いことです。あ、試していませんが、iPhone 版もありました。追記(2011-01-24):クリーンルームだと以下のエラーが発生し、インストール出来ませんでした。。","link":"https://masutaka.net/2011-01-22-1/","isoDate":"2011-01-22T00:00:00.000Z","dateMiliSeconds":1295654400000,"authorName":"masutaka"},{"title":"『古事記・日本書紀を歩く—神話と伝説の世界を訪ねて』を読んだ","content":"[2009-05-16-2] に買ってから 1 年半以上経ってしまった。鈴木三重吉氏\nの『新版 古事記物語』は読みづらくて挫折したが、こちらは写真が多く使\nわれていてやや読みやすい。どちらにしろ神様の名前って覚え辛いよね。","contentSnippet":"[2009-05-16-2] に買ってから 1 年半以上経ってしまった。鈴木三重吉氏の『新版 古事記物語』は読みづらくて挫折したが、こちらは写真が多く使われていてやや読みやすい。どちらにしろ神様の名前って覚え辛いよね。","link":"https://masutaka.net/2011-01-16-2/","isoDate":"2011-01-16T01:00:00.000Z","dateMiliSeconds":1295139600000,"authorName":"masutaka"},{"title":"『iPhone情報整理術 ~あなたを情報’’強者’’に変える57の活用法!』を読んだ","content":"dankogai の書評 を盲信して買った。iPhone を使い倒して情報を整理する\nための 57 の方法が紹介されている。内容は悪くない。使えそうな方法を\n取り入れるつもり。まずは RSS 整理法かな。","contentSnippet":"dankogai の書評 を盲信して買った。iPhone を使い倒して情報を整理するための 57 の方法が紹介されている。内容は悪くない。使えそうな方法を取り入れるつもり。まずは RSS 整理法かな。","link":"https://masutaka.net/2011-01-16-1/","isoDate":"2011-01-16T00:00:00.000Z","dateMiliSeconds":1295136000000,"authorName":"masutaka"},{"title":"所有しない生活","content":"最近はクラウドサービスやら、カーシェアリングやら、便利なサービスが発達してきて、自分で全部所有しなくても良い時代になりつつあります。\n年末に(自分の脳内に)イベントが降ってきたので、いろいろ所有しないことにしました。\nメール→クラウドに移行 iPhone4 を使い始めてから、nifty の POP から Gmail の IMAP に移行しました。それまでのメールはまだ PC の中に入っていたので、全部 Gmail にインポートしました。\nこれでメールのバックアップを考える必要がなくなりました。\nIMAP なので普通にメーラからアップすれば良いのですが、タイムスタンプが変わってしまうのが嫌だったので、以下のようにしました。\nメールソフト(Mew) ー(IMAP)→ masutaka.net(さくらのレンタルサーバ) ー(Mail Fetcher)→ Gmail\nGMailにメールを完全移行する を参考にしました。でも、今は goo メールアドバンスで IMAP は使えないようです。\nあ、試すと分かりますが、Gmail の Mail Fetcher はすごく時間がかかります。1 万通だと、3〜4 日くらいでしょうか。。。\nCD→全部売却 物理的に場所を取るので、上の写真にある 130 枚全てを AAC に変換して iPhone4 に突っ込みました。\n最初は mp3 にする予定でしたが、聞き比べたら AAC のほうが音質が良かったので、AAC を選択しました。ちなみに AAC は Apple とは関係ありません。\n最近の CD/DVD ドライブは 1 枚 3 分ほどで抽出出来るので、そんなに苦ではありませんでした。iTunes の曲名推測が賢く、ほぼ全て合っていたのも大いに助かりました。\n抽出し終わった CD は全てブックオフに売りました。すっきり。\nゲーム→全部売却 ゲームは時間を取られますから、思い切って同じくブックオフに売りました。どうしてもやりたくなったら、また買えばいいですから。※ PS3+Torne は売ってません。","contentSnippet":"最近はクラウドサービスやら、カーシェアリングやら、便利なサービスが発達してきて、自分で全部所有しなくても良い時代になりつつあります。年末に(自分の脳内に)イベントが降ってきたので、いろいろ所有しないことにしました。メール→クラウドに移行 iPhone4 を使い始めてから、nifty の POP から Gmail の IMAP に移行しました。それまでのメールはまだ PC の中に入っていたので、全部 Gmail にインポートしました。これでメールのバックアップを考える必要がなくなりました。IMAP なので普通にメーラからアップすれば良いのですが、タイムスタンプが変わってしまうのが嫌だったので、以下のようにしました。メールソフト(Mew) ー(IMAP)→ masutaka.net(さくらのレンタルサーバ) ー(Mail Fetcher)→ GmailGMailにメールを完全移行する を参考にしました。でも、今は goo メールアドバンスで IMAP は使えないようです。あ、試すと分かりますが、Gmail の Mail Fetcher はすごく時間がかかります。1 万通だと、3〜4 日くらいでしょうか。。。CD→全部売却 物理的に場所を取るので、上の写真にある 130 枚全てを AAC に変換して iPhone4 に突っ込みました。最初は mp3 にする予定でしたが、聞き比べたら AAC のほうが音質が良かったので、AAC を選択しました。ちなみに AAC は Apple とは関係ありません。最近の CD/DVD ドライブは 1 枚 3 分ほどで抽出出来るので、そんなに苦ではありませんでした。iTunes の曲名推測が賢く、ほぼ全て合っていたのも大いに助かりました。抽出し終わった CD は全てブックオフに売りました。すっきり。ゲーム→全部売却 ゲームは時間を取られますから、思い切って同じくブックオフに売りました。どうしてもやりたくなったら、また買えばいいですから。※ PS3+Torne は売ってません。","link":"https://masutaka.net/2011-01-04-1/","isoDate":"2011-01-04T00:00:00.000Z","dateMiliSeconds":1294099200000,"authorName":"masutaka"},{"title":"Firefox アドオン Operator を利用してラングリッチの授業予約を簡単に Google Calendar に登録する。","content":"実は８月の終わりから、ラングリッチ というオンライン英会話スクールに\n通ってます。通ってますといっても Skype のビデオチャットなので、学校\nは自宅の PC の前です。基本毎日フィリピンの先生とお話ししてます。\nさて、先日こんなツイートをしました。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  このなにげないツイートに、なんとラングリッチのスーパーエンジニア\n@tomoyaton が応えてくれました！\nMicroformats を利用してラングリッチの授業予約を簡単に Google\nCalendar に登録する。 - 日々、とんは語る。 どうやら、ラングリッチのマイページには hCalendar という、イベントや\nカレンダーを扱える microformat の技術が使われているそうです。Web ブ\nラウザがこれを扱えれば、Google Calendar に登録できるとのこと。\n@tomoyaton さんのページでは Google Chrome の例が示されていましたが、\n私は Firefox 使いなのでちょっと調べてみました。\n  Forefox アドオン Operator をインストールし、Firefox を再起動する\nと Operator のツールバーが出現する。\n  ラングリッチのマイページに行くと、Operator のツールバーの「イベ","contentSnippet":"実は８月の終わりから、ラングリッチ というオンライン英会話スクールに通ってます。通ってますといっても Skype のビデオチャットなので、学校は自宅の PC の前です。基本毎日フィリピンの先生とお話ししてます。さて、先日こんなツイートをしました。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  このなにげないツイートに、なんとラングリッチのスーパーエンジニア@tomoyaton が応えてくれました！Microformats を利用してラングリッチの授業予約を簡単に GoogleCalendar に登録する。 - 日々、とんは語る。 どうやら、ラングリッチのマイページには hCalendar という、イベントやカレンダーを扱える microformat の技術が使われているそうです。Web ブラウザがこれを扱えれば、Google Calendar に登録できるとのこと。@tomoyaton さんのページでは Google Chrome の例が示されていましたが、私は Firefox 使いなのでちょっと調べてみました。  Forefox アドオン Operator をインストールし、Firefox を再起動すると Operator のツールバーが出現する。  ラングリッチのマイページに行くと、Operator のツールバーの「イベ","link":"https://masutaka.net/2010-12-19-1/","isoDate":"2010-12-19T00:00:00.000Z","dateMiliSeconds":1292716800000,"authorName":"masutaka"},{"title":"『君がオヤジになる前に』を読んだ","content":"面白かった。@takapon_jp が普段から言っていることが凝縮されている。\nこれまでの本と違うのは、ネガティブな自分をさらけ出していること。今\n分からないことも正直に書いている。","contentSnippet":"面白かった。@takapon_jp が普段から言っていることが凝縮されている。これまでの本と違うのは、ネガティブな自分をさらけ出していること。今分からないことも正直に書いている。","link":"https://masutaka.net/2010-12-04-1/","isoDate":"2010-12-04T00:00:00.000Z","dateMiliSeconds":1291420800000,"authorName":"masutaka"},{"title":"最近買ったデジタルガジェット","content":"リュウド アールボードフォーケイタイRBK-2100BTJ Ver.2.1(Bluetooth HID、JIS配列) RBK-2100BTJ  iPhone4 用の Bluetooth キーボードとして買いました。ちょっと長めのメー\nルを書いたり、ツイートしたり、会議のメモを書くのに重宝しています。\nスタンドが内蔵されていて、ジャキジャキジャキーンと外に出せます。\nちょっとカッコイイかもです。(全体の作りはややチープですが&hellip;。)\n最初のペアリングは簡単です。それ以降も何かキーを押せばすぐに繋がり\nます。キーストロークも意外にあり、悪くないです。\nと、このように非常に便利ではありますが JIS 配列を買ったのは失敗でし\nた。iPhone4 が対応していないようで、付属のシールを貼って結局 US 配\n列にすることになります。キーの配置もやや特殊で、未だに慣れません。\niPhone4 で使う人は素直に Mac 用 US 配列を買いましょう。\nリュウド アールボードフォーケイタイRBK-2200BTi (Bluetooth HID、Mac用US配列) RBK-2200BTi 日本語と英語の切り替えは cmd+space で出来ます。cmd+c、cmd+x、cmd+v、\ncmd+a でコピー、切り取り、貼り付け、全選択ができます。Shift+カーソ\nルキーで任意の文字列の選択です。\nEXOGEAR iPhone4用バッテリージャケット ｅｘｏlife ブラック E125  つい勢いで買ってしまいました。。。\nバッテリー持ちを良くしたい人にはお勧めです。\nまず良い点。\n バッテリー持ちが２倍になります。 普通のケースと同様、受信干渉問題が解消されます。 手でスピーカーを塞ぐことがなくなります。 iPhone4 のデザインを損ないません。 単純に合体がカッコイイです。\n   次に悪い点。\n デカくて重いです。リュウドのスタンドが辛そうです。 外部端子が小さくなるので(マイクロ USB 端子になるので)、充電しづら\nくなります。  Creative T12 Wireless デスクトップ ステレオワイヤレス スピーカーシステム Bluetooth SP-T12W  結論から言えば買いです。良い音とかよく分かりませんが、","contentSnippet":"リュウド アールボードフォーケイタイRBK-2100BTJ Ver.2.1(Bluetooth HID、JIS配列) RBK-2100BTJ  iPhone4 用の Bluetooth キーボードとして買いました。ちょっと長めのメールを書いたり、ツイートしたり、会議のメモを書くのに重宝しています。スタンドが内蔵されていて、ジャキジャキジャキーンと外に出せます。ちょっとカッコイイかもです。(全体の作りはややチープですが…。)最初のペアリングは簡単です。それ以降も何かキーを押せばすぐに繋がります。キーストロークも意外にあり、悪くないです。と、このように非常に便利ではありますが JIS 配列を買ったのは失敗でした。iPhone4 が対応していないようで、付属のシールを貼って結局 US 配列にすることになります。キーの配置もやや特殊で、未だに慣れません。iPhone4 で使う人は素直に Mac 用 US 配列を買いましょう。リュウド アールボードフォーケイタイRBK-2200BTi (Bluetooth HID、Mac用US配列) RBK-2200BTi 日本語と英語の切り替えは cmd+space で出来ます。cmd+c、cmd+x、cmd+v、cmd+a でコピー、切り取り、貼り付け、全選択ができます。Shift+カーソルキーで任意の文字列の選択です。EXOGEAR iPhone4用バッテリージャケット ｅｘｏlife ブラック E125  つい勢いで買ってしまいました。。。バッテリー持ちを良くしたい人にはお勧めです。まず良い点。 バッテリー持ちが２倍になります。 普通のケースと同様、受信干渉問題が解消されます。 手でスピーカーを塞ぐことがなくなります。 iPhone4 のデザインを損ないません。 単純に合体がカッコイイです。   次に悪い点。 デカくて重いです。リュウドのスタンドが辛そうです。 外部端子が小さくなるので(マイクロ USB 端子になるので)、充電しづらくなります。  Creative T12 Wireless デスクトップ ステレオワイヤレス スピーカーシステム Bluetooth SP-T12W  結論から言えば買いです。良い音とかよく分かりませんが、","link":"https://masutaka.net/2010-11-15-1/","isoDate":"2010-11-15T00:00:00.000Z","dateMiliSeconds":1289779200000,"authorName":"masutaka"},{"title":"『小泉八雲全集〈第1-17巻〉』の「耳無芳一」を読んだ","content":"この中の『耳無芳一』を iPhone の青空文庫アプリ「i文庫」 で読んだ。平\n氏鎮魂の話ですね。なぜだか分からないけど読んでいると、自分も目が見\nえないような不思議な感覚になった。","contentSnippet":"この中の『耳無芳一』を iPhone の青空文庫アプリ「i文庫」 で読んだ。平氏鎮魂の話ですね。なぜだか分からないけど読んでいると、自分も目が見えないような不思議な感覚になった。","link":"https://masutaka.net/2010-11-13-2/","isoDate":"2010-11-13T01:00:00.000Z","dateMiliSeconds":1289610000000,"authorName":"masutaka"},{"title":"『新美南吉童話集』の「ごん狐」と「手袋を買いに」を読んだ","content":"iPhone の青空文庫アプリ「i文庫」 で『ごん狐』と『手袋を買いに』を読\nんだ。小学校の教科書か何かで読んだ以来で内容を忘れていたけど、どち\nらも良かった。昔を思い出す。","contentSnippet":"iPhone の青空文庫アプリ「i文庫」 で『ごん狐』と『手袋を買いに』を読んだ。小学校の教科書か何かで読んだ以来で内容を忘れていたけど、どちらも良かった。昔を思い出す。","link":"https://masutaka.net/2010-11-13-1/","isoDate":"2010-11-13T00:00:00.000Z","dateMiliSeconds":1289606400000,"authorName":"masutaka"},{"title":"『そこまで言うか！』を読んだ","content":"iPhone の電子書籍版を買った。82 ページで ￥1,000(書籍版だと 416 ペー\nジ、￥1,575) は割高感があったが、電子書籍用に再構成されており(コメ\nントが全部顔写真付き＆色分け)読みやすかったので、まあ OK か。\n内容がくだけているのでサクサク読めるし、3 人の考えがよく分かった。\nただ、ページの途中や全体が真っ黒になることがあるのは頂けなかった\n(iPhone のホームまで戻ったり、いろいろやると直った)。","contentSnippet":"iPhone の電子書籍版を買った。82 ページで ￥1,000(書籍版だと 416 ページ、￥1,575) は割高感があったが、電子書籍用に再構成されており(コメントが全部顔写真付き＆色分け)読みやすかったので、まあ OK か。内容がくだけているのでサクサク読めるし、3 人の考えがよく分かった。ただ、ページの途中や全体が真っ黒になることがあるのは頂けなかった(iPhone のホームまで戻ったり、いろいろやると直った)。","link":"https://masutaka.net/2010-11-03-1/","isoDate":"2010-11-03T00:00:00.000Z","dateMiliSeconds":1288742400000,"authorName":"masutaka"},{"title":"『夢をかなえる「打ち出の小槌」』を読んだ","content":"この本自体がショートカットの塊で、@takapon_jp の考えが簡潔にまとめ\nられている。筆者の本は数冊しか読んだことはないが、一番面白く刺激に\nなった。","contentSnippet":"この本自体がショートカットの塊で、@takapon_jp の考えが簡潔にまとめられている。筆者の本は数冊しか読んだことはないが、一番面白く刺激になった。","link":"https://masutaka.net/2010-10-11-1/","isoDate":"2010-10-11T00:00:00.000Z","dateMiliSeconds":1286755200000,"authorName":"masutaka"},{"title":"『悪人(下)』を読んだ","content":"どの登場人物も袋小路に迷い込んでいるような、そんな気がした。最後は\nスッキリしないけど、映画よりもエピローグ多めなのは良かった。","contentSnippet":"どの登場人物も袋小路に迷い込んでいるような、そんな気がした。最後はスッキリしないけど、映画よりもエピローグ多めなのは良かった。","link":"https://masutaka.net/2010-10-10-2/","isoDate":"2010-10-10T01:00:00.000Z","dateMiliSeconds":1286672400000,"authorName":"masutaka"},{"title":"『悪人(上)』を読んだ","content":"映画より話が細かく展開していて、面白かった。","contentSnippet":"映画より話が細かく展開していて、面白かった。","link":"https://masutaka.net/2010-10-10-1/","isoDate":"2010-10-10T00:00:00.000Z","dateMiliSeconds":1286668800000,"authorName":"masutaka"},{"title":"twittering-mode.el 本家に StatusNet 対応が commit された","content":"本家に取り込んで頂けた ので、[2010-07-18-2] の記事を全体的に書き換え\nました。","contentSnippet":"本家に取り込んで頂けた ので、[2010-07-18-2] の記事を全体的に書き換えました。","link":"https://masutaka.net/2010-08-22-1/","isoDate":"2010-08-22T00:00:00.000Z","dateMiliSeconds":1282435200000,"authorName":"masutaka"},{"title":"StatusNet-0.9.4 がリリースされてた","content":"0.9.4 がリリースされてました。 今回も私は関係ない修正ばかりかな？\nアップデートしましたが、よく分かりませんでした。アップデート手順は\n今まで [2010-05-05-1] [2010-07-01-1] と同じです。\nあ、twittering-mode.el [2010-07-18-2] からツイートできることも確認\nしました。","contentSnippet":"0.9.4 がリリースされてました。 今回も私は関係ない修正ばかりかな？アップデートしましたが、よく分かりませんでした。アップデート手順は今まで [2010-05-05-1] [2010-07-01-1] と同じです。あ、twittering-mode.el [2010-07-18-2] からツイートできることも確認しました。","link":"https://masutaka.net/2010-08-17-1/","isoDate":"2010-08-17T00:00:00.000Z","dateMiliSeconds":1282003200000,"authorName":"masutaka"},{"title":"『Debug Hacks -デバッグを極めるテクニック&ツール』を読んだ","content":"@yasukichi7 氏から借りた本。\nKAHO を使った、プログラムを変更せずに任意の関数を置き換える方法は存\n在すら知らなかったので、これだけでも読んだ価値があった。キャッシュ\nミスの削減方法も少々参考になった。","contentSnippet":"@yasukichi7 氏から借りた本。KAHO を使った、プログラムを変更せずに任意の関数を置き換える方法は存在すら知らなかったので、これだけでも読んだ価値があった。キャッシュミスの削減方法も少々参考になった。","link":"https://masutaka.net/2010-08-10-1/","isoDate":"2010-08-10T00:00:00.000Z","dateMiliSeconds":1281398400000,"authorName":"masutaka"},{"title":"Mew の g=>C-s のフォルダ名検索に migemo を使う","content":"iPhone4 を買ったので、メール環境を mbox から Gmail の IMAP に移行し\nました。\nいつでもどこでもメールを見られるのは便利ですねえ。これでネットから\n隔離された実家に帰っても大丈夫そうです。\n頻度が減ったとはいえ、Mew からも Gmail を読むことがあります。ただ、\nGmail ではデフォルトのメールフォルダ名が日本語です。\n%[Gmail]/\n%[Gmail]/すべてのメール\n%[Gmail]/ゴミ箱\n%[Gmail]/スター付き\n%[Gmail]/下書き\n%[Gmail]/迷惑メール\n%[Gmail]/送信済みメール\ng' =&gt; C-s&rsquo; での移動が面倒です。正直やってられません。\n`g&rsquo; =&gt; [TAB] なんてもってのほかです。\n以下の設定をして、g' =&gt; C-s&rsquo; から migemo を使えるようにしました。\n(defadvice mew-input-folder-search-forward-1  (around  mew-input-folder-search-forward-1-with-migemo  activate)  &#34;migemo を使ってフォルダ名を検索する。&#34;  (let ((migemo-do-isearch t))  ad-do-it)) ","contentSnippet":"iPhone4 を買ったので、メール環境を mbox から Gmail の IMAP に移行しました。いつでもどこでもメールを見られるのは便利ですねえ。これでネットから隔離された実家に帰っても大丈夫そうです。頻度が減ったとはいえ、Mew からも Gmail を読むことがあります。ただ、Gmail ではデフォルトのメールフォルダ名が日本語です。%[Gmail]/%[Gmail]/すべてのメール%[Gmail]/ゴミ箱%[Gmail]/スター付き%[Gmail]/下書き%[Gmail]/迷惑メール%[Gmail]/送信済みメールg' => C-s’ での移動が面倒です。正直やってられません。`g’ => [TAB] なんてもってのほかです。以下の設定をして、g' => C-s’ から migemo を使えるようにしました。(defadvice mew-input-folder-search-forward-1  (around  mew-input-folder-search-forward-1-with-migemo  activate)  \"migemo を使ってフォルダ名を検索する。\"  (let ((migemo-do-isearch t))  ad-do-it))","link":"https://masutaka.net/2010-08-04-1/","isoDate":"2010-08-04T00:00:00.000Z","dateMiliSeconds":1280880000000,"authorName":"masutaka"},{"title":"Web サイトを再帰的に取得してみた","content":"最近のサイトは昔より複雑になっているので、意外に大変ですねえ。。\nここは静的なページで構成されているので、サクッと取得出来ました。\n% wget -r -l 1 -k -p http://jibun.atmarkit.co.jp/lskill01/rensai/tool10/05/01.html -r は再帰的に取得、-l num は取得する階層の深さです。-k はリンクをロー\nカルコピー間の相対リンクに変換し、-p は画像やそのほかの補助ファイル\nもダウンロードしてページを完全構築します。\n次に http://gihyo.jp/dev/serial/01/testlink を試しましたが、ちょっ\nと無理ですねえ。やり方あるんでしょうか。GetHTMLW でも出来ませんでした。\nそういえば、ダイヤルアップ時代には波乗野郎 をよく使ってました。懐か\nしいなあ。\n参考情報: ITmedia Biz.ID：Wgetでオンライン保管資料をローカルコピー 追記(2010-07-22):\nFirefox アドオン ScrapBook を教えてもらいました。GetHTMLW よりは良\nい感じです。","contentSnippet":"最近のサイトは昔より複雑になっているので、意外に大変ですねえ。。ここは静的なページで構成されているので、サクッと取得出来ました。% wget -r -l 1 -k -p http://jibun.atmarkit.co.jp/lskill01/rensai/tool10/05/01.html -r は再帰的に取得、-l num は取得する階層の深さです。-k はリンクをローカルコピー間の相対リンクに変換し、-p は画像やそのほかの補助ファイルもダウンロードしてページを完全構築します。次に http://gihyo.jp/dev/serial/01/testlink を試しましたが、ちょっと無理ですねえ。やり方あるんでしょうか。GetHTMLW でも出来ませんでした。そういえば、ダイヤルアップ時代には波乗野郎 をよく使ってました。懐かしいなあ。参考情報: ITmedia Biz.ID：Wgetでオンライン保管資料をローカルコピー 追記(2010-07-22):Firefox アドオン ScrapBook を教えてもらいました。GetHTMLW よりは良い感じです。","link":"https://masutaka.net/2010-07-21-1/","isoDate":"2010-07-21T00:00:00.000Z","dateMiliSeconds":1279670400000,"authorName":"masutaka"},{"title":"twittering-mode.el から StatusNet を使おう","content":"twittering-mode.el は、Emacs で動作する Twitter クライアントです。\n詳細はオフィシャルサイト をご覧下さい。\n最新リリース版 v1.0.0 は対応していませんが、2010.8.22 から Git 最新\n版で StatusNet を使えるようになりました！\nTwitter で出来ることはほとんど StatusNet で出来ます。ただし、\nStatusNet がサポートしていない機能は使えません。例えば、V' からの :retweeted_by_me, :retweeted_to_me, :retweets_of_me や L&rsquo; からのリ\nストです。\nインストールの手引き GitHub からソースコード一式をダウンロードします。\nhttp://github.com/hayamiz/twittering-mode/archives/master EmacsWiki の「インストールの手引き」に従ってインストールします。\nhttp://www.emacswiki.org/emacs-ja/TwitteringMode-ja StatusNet 固有の設定をします。以下は StatusNet を\nhttp://example.com/statusnet/ に構築し、[2010-04-18-3] の Fancy\nURLs の設定を行った場合の設定になります。\n(setq twittering-service-method &#39;statusnet) (setq twittering-auth-method &#39;basic) (setq twittering-username &#34;StatusNetのアカウント&#34;) (setq twittering-api-host &#34;example.com&#34;) (setq twittering-api-search-host &#34;example.com&#34;) (setq twittering-web-host &#34;example.com&#34;) (setq twittering-api-prefix &#34;statusnet/api/&#34;) (setq twittering-search-api-method &#34;statusnet/api/search&#34;) (setq twittering-web-path-prefix &#34;statusnet&#34;) SSL を使っていなければ、こちらも設定してください。","contentSnippet":"twittering-mode.el は、Emacs で動作する Twitter クライアントです。詳細はオフィシャルサイト をご覧下さい。最新リリース版 v1.0.0 は対応していませんが、2010.8.22 から Git 最新版で StatusNet を使えるようになりました！Twitter で出来ることはほとんど StatusNet で出来ます。ただし、StatusNet がサポートしていない機能は使えません。例えば、V' からの :retweeted_by_me, :retweeted_to_me, :retweets_of_me や L’ からのリストです。インストールの手引き GitHub からソースコード一式をダウンロードします。http://github.com/hayamiz/twittering-mode/archives/master EmacsWiki の「インストールの手引き」に従ってインストールします。http://www.emacswiki.org/emacs-ja/TwitteringMode-ja StatusNet 固有の設定をします。以下は StatusNet をhttp://example.com/statusnet/ に構築し、[2010-04-18-3] の FancyURLs の設定を行った場合の設定になります。(setq twittering-service-method 'statusnet) (setq twittering-auth-method 'basic) (setq twittering-username \"StatusNetのアカウント\") (setq twittering-api-host \"example.com\") (setq twittering-api-search-host \"example.com\") (setq twittering-web-host \"example.com\") (setq twittering-api-prefix \"statusnet/api/\") (setq twittering-search-api-method \"statusnet/api/search\") (setq twittering-web-path-prefix \"statusnet\") SSL を使っていなければ、こちらも設定してください。","link":"https://masutaka.net/2010-07-18-2/","isoDate":"2010-07-18T01:00:00.000Z","dateMiliSeconds":1279414800000,"authorName":"masutaka"},{"title":"先週と今週の買い物","content":"アジュバン RE:エミサリーシャンプー 300ml \nこのシャンプーに変えたら頭皮の痒みがなくなりました。リンスを使わな\nくても良いのが楽ですね。シャンプーだけでシットリします。\nアジュバン Re:エミサリーローション 125g \n良いそうなので勢いで買ってしまいました。すーっとします。\nシャープ EC-BP3 掃除機サイクロンクリーナー用フィルター \nフィルターを掃除するのが面倒になったので、新しいのを買いました。買っ\nてから知ったのですが、これ水洗いできるのですね&hellip;。ま、いいか。","contentSnippet":"アジュバン RE:エミサリーシャンプー 300ml このシャンプーに変えたら頭皮の痒みがなくなりました。リンスを使わなくても良いのが楽ですね。シャンプーだけでシットリします。アジュバン Re:エミサリーローション 125g 良いそうなので勢いで買ってしまいました。すーっとします。シャープ EC-BP3 掃除機サイクロンクリーナー用フィルター フィルターを掃除するのが面倒になったので、新しいのを買いました。買ってから知ったのですが、これ水洗いできるのですね…。ま、いいか。","link":"https://masutaka.net/2010-07-18-1/","isoDate":"2010-07-18T00:00:00.000Z","dateMiliSeconds":1279411200000,"authorName":"masutaka"},{"title":"『稼げる 超ソーシャルフィルタリング』を読んだ","content":"@wadakei さんから借りた。\n内容は目新しいものがなかったが、著者の意見が簡潔かつ明確に書かれて\nいて読みやすかった。１時間で読めた。\nメーリングリストを使っていない会社ってまだあるんだ&hellip;。","contentSnippet":"@wadakei さんから借りた。内容は目新しいものがなかったが、著者の意見が簡潔かつ明確に書かれていて読みやすかった。１時間で読めた。メーリングリストを使っていない会社ってまだあるんだ…。","link":"https://masutaka.net/2010-07-10-1/","isoDate":"2010-07-10T00:00:00.000Z","dateMiliSeconds":1278720000000,"authorName":"masutaka"},{"title":"『IT批評 創刊号<vol.0>』を読んだ","content":"2010.7.3 購入。タイトルから往年のパソコン批評を思い出して買ったが、\n内容が固く地味で面白くなかった。","contentSnippet":"2010.7.3 購入。タイトルから往年のパソコン批評を思い出して買ったが、内容が固く地味で面白くなかった。","link":"https://masutaka.net/2010-07-08-1/","isoDate":"2010-07-08T00:00:00.000Z","dateMiliSeconds":1278547200000,"authorName":"masutaka"},{"title":"『拝金』を読んだ","content":"2010.7.3 購入。３時間くらいで読めた。欲にまみれて欲を突き抜ける、\nこれは仏陀に通じるものがある(キリッ","contentSnippet":"2010.7.3 購入。３時間くらいで読めた。欲にまみれて欲を突き抜ける、これは仏陀に通じるものがある(キリッ","link":"https://masutaka.net/2010-07-04-2/","isoDate":"2010-07-04T01:00:00.000Z","dateMiliSeconds":1278205200000,"authorName":"masutaka"},{"title":"Mew の Draft-mode で次や前の草稿にジャンプする","content":"Summary-mode での C-c C-o (今開いている任意の草稿にジャンプする) は\n便利なのでよく使いますが、Draft-mode でも同じことをやりたかったので、\n適当な関数を作りました。\n(defun mew-draft-jump-to-next-buffer (&amp;optional previous)  &#34;Jump to next draft buffer if exists.&#34;  (interactive &#34;P&#34;)  (let* ((draft-dir (file-name-as-directory mew-draft-folder))  (regex (mew-folder-regex draft-dir))  (bufs (sort (mew-buffer-list regex) &#39;string&lt;))  next-list next-buf)  (if previous (setq bufs (reverse bufs)))  (setq next-list (cdr (member (buffer-name) bufs)))  (setq next-buf (if next-list (nth 0 next-list)  (nth 0 bufs)))  (if (and (get-buffer next-buf)  (not (equal next-buf (buffer-name))))  (switch-to-buffer next-buf)  (message &#34;No such other draft buffer!","contentSnippet":"Summary-mode での C-c C-o (今開いている任意の草稿にジャンプする) は便利なのでよく使いますが、Draft-mode でも同じことをやりたかったので、適当な関数を作りました。(defun mew-draft-jump-to-next-buffer (&optional previous)  \"Jump to next draft buffer if exists.\"  (interactive \"P\")  (let* ((draft-dir (file-name-as-directory mew-draft-folder))  (regex (mew-folder-regex draft-dir))  (bufs (sort (mew-buffer-list regex) 'string<))  next-list next-buf)  (if previous (setq bufs (reverse bufs)))  (setq next-list (cdr (member (buffer-name) bufs)))  (setq next-buf (if next-list (nth 0 next-list)  (nth 0 bufs)))  (if (and (get-buffer next-buf)  (not (equal next-buf (buffer-name))))  (switch-to-buffer next-buf)  (message \"No such other draft buffer!","link":"https://masutaka.net/2010-07-04-1/","isoDate":"2010-07-04T00:00:00.000Z","dateMiliSeconds":1278201600000,"authorName":"masutaka"},{"title":"StatusNet-0.9.3 がリリースされてた","content":"0.9.3 がリリースされてました。 今回もマイナーバージョンアップのようです。\nAdmin -&gt; Design から css を変更出来るようになりました。\nプロファイルに Daily average が表示されるようになりました。\n他は私にはあまり関係ないかな。\n前回 [2010-05-05-1] と同じ手順でアップデート出来ました。\n日本語パッチ [2010-04-18-2] は今回も必要でした。\n会社の StatusNet はまだアップデートしてませんが、[2010-04-18-5] [2010-04-29-2] [2010-04-18-6] のパッチは必要そうです。\n追記(2010-07-07):\n会社でもバージョンアップしました。どのパッチも問題なく充てることが\n出来ました。","contentSnippet":"0.9.3 がリリースされてました。 今回もマイナーバージョンアップのようです。Admin -> Design から css を変更出来るようになりました。プロファイルに Daily average が表示されるようになりました。他は私にはあまり関係ないかな。前回 [2010-05-05-1] と同じ手順でアップデート出来ました。日本語パッチ [2010-04-18-2] は今回も必要でした。会社の StatusNet はまだアップデートしてませんが、[2010-04-18-5] [2010-04-29-2] [2010-04-18-6] のパッチは必要そうです。追記(2010-07-07):会社でもバージョンアップしました。どのパッチも問題なく充てることが出来ました。","link":"https://masutaka.net/2010-07-01-1/","isoDate":"2010-07-01T00:00:00.000Z","dateMiliSeconds":1277942400000,"authorName":"masutaka"},{"title":"『メールの超プロが教えるGmail仕事術』を読んだ","content":"どちらかというと Gmail 初心者向けの本。大量のメールの仕分け方や、ス\nパム対策などがサラリと書いてあって読みやすい。個人的にはスパムフィ\nルターオフの方法が参考になった。","contentSnippet":"どちらかというと Gmail 初心者向けの本。大量のメールの仕分け方や、スパム対策などがサラリと書いてあって読みやすい。個人的にはスパムフィルターオフの方法が参考になった。","link":"https://masutaka.net/2010-06-24-1/","isoDate":"2010-06-24T00:00:00.000Z","dateMiliSeconds":1277337600000,"authorName":"masutaka"},{"title":"今週の買い物","content":"ウェーブチェア 5G \nPC のモニターをテレビにしたら [2010-05-30-1] 腰が痛くなってきたので、\n座椅子を買いました。ソファーを買うまでもないけど、普通の座椅子は安っ\nぽくて嫌、という方にお勧めです。\n作りがしっかりしていますし、頭、腰、脚部がそれぞれ、5,14,14 段階リ\nクライニングするので、一番楽な姿勢になれます。ただ、腰の部分に隙間\nができるので、クッション等あてないと疲れるかもしれません。\n似た商品のウェーブチェア FG は、「床面がフローリングや畳で使用する\n場合、ジュータンやカーペット等の敷物をしいてください。」とのことな\nので、注意した方が良いです。ウェーブチェア 5G は「床へのキズ防止も\nバッチリ！」なので、問題ありません。\nウエーブチェア座椅子用カバー(ベージュ) \n「ウェーブチェア 5G」の表面の生地は取り外しができないので、汚れ対策\nのためカバーも購入しました。麻っぽい質感で肌触りがよいです。\n問題は、付けるとダサくなることでしょうか&hellip;。元の座椅子はそこそこお\nしゃれなデザインなので、少し残念です。\nSanDisk 2GB microSD カード SD アダプタ付 バルク品  W51CA 用に買いました。メーカー保証のないバルク品ですが、大した用途\nには使わないので安さ重視にしました。SD アダプタ付きで ￥600 は安い！\nロジクール ワイヤレスマウス M505 ライトシルバー M505LS  [2010-05-30-1] のマウスが使いやすいので、会社用にもう一台買いました。\n色まで同じです。ヨドバシより Amazon の方が ￥1,000 くらい安かったです。","contentSnippet":"ウェーブチェア 5G PC のモニターをテレビにしたら [2010-05-30-1] 腰が痛くなってきたので、座椅子を買いました。ソファーを買うまでもないけど、普通の座椅子は安っぽくて嫌、という方にお勧めです。作りがしっかりしていますし、頭、腰、脚部がそれぞれ、5,14,14 段階リクライニングするので、一番楽な姿勢になれます。ただ、腰の部分に隙間ができるので、クッション等あてないと疲れるかもしれません。似た商品のウェーブチェア FG は、「床面がフローリングや畳で使用する場合、ジュータンやカーペット等の敷物をしいてください。」とのことなので、注意した方が良いです。ウェーブチェア 5G は「床へのキズ防止もバッチリ！」なので、問題ありません。ウエーブチェア座椅子用カバー(ベージュ) 「ウェーブチェア 5G」の表面の生地は取り外しができないので、汚れ対策のためカバーも購入しました。麻っぽい質感で肌触りがよいです。問題は、付けるとダサくなることでしょうか…。元の座椅子はそこそこおしゃれなデザインなので、少し残念です。SanDisk 2GB microSD カード SD アダプタ付 バルク品  W51CA 用に買いました。メーカー保証のないバルク品ですが、大した用途には使わないので安さ重視にしました。SD アダプタ付きで ￥600 は安い！ロジクール ワイヤレスマウス M505 ライトシルバー M505LS  [2010-05-30-1] のマウスが使いやすいので、会社用にもう一台買いました。色まで同じです。ヨドバシより Amazon の方が ￥1,000 くらい安かったです。","link":"https://masutaka.net/2010-06-20-3/","isoDate":"2010-06-20T02:00:00.000Z","dateMiliSeconds":1276999200000,"authorName":"masutaka"},{"title":"「Anthy の変換精度を上げる方法」を試した","content":"適当に… » Blog Archive » Anthyの変換精度を上げる方法 Anthy がバカユニークな変換をするのは、物忘れをしやすいからみたいで\nす。早速設定しました。しばらく様子を見ることにします。\n# su - # chattr +a ~masutaka/.anthy/last-record2_default.utf8 &ldquo;man chattr&rdquo; によると、chattr は「Linux 第 2 拡張ファイルシステム\n(ext2fs) 上にある ファイルの属性 (attribute) を変更する」コマンドだ\nそうです。ファイルに圧縮属性を付けたり、root でも消せないファイルを\n作れたり、面白そうなコマンドです。\n属性の確認は lsattr で行います。ユーザ権限でも実行できます。\n% lsattr -----a------------- ./last-record2_default.utf8 ------------------- ./lock-file_default ------------------- ./private_words_default ------------------- ./last-record1_default.utf8 ~/.anthy 以下のファイルの説明は Anthy wiki - FAQ にあります。\n元になったツイートです。ありがとうございます。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ","contentSnippet":"適当に… » Blog Archive » Anthyの変換精度を上げる方法 Anthy がバカユニークな変換をするのは、物忘れをしやすいからみたいです。早速設定しました。しばらく様子を見ることにします。# su - # chattr +a ~masutaka/.anthy/last-record2_default.utf8 “man chattr” によると、chattr は「Linux 第 2 拡張ファイルシステム(ext2fs) 上にある ファイルの属性 (attribute) を変更する」コマンドだそうです。ファイルに圧縮属性を付けたり、root でも消せないファイルを作れたり、面白そうなコマンドです。属性の確認は lsattr で行います。ユーザ権限でも実行できます。% lsattr -----a------------- ./last-record2_default.utf8 ------------------- ./lock-file_default ------------------- ./private_words_default ------------------- ./last-record1_default.utf8 ~/.anthy 以下のファイルの説明は Anthy wiki - FAQ にあります。元になったツイートです。ありがとうございます。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i","link":"https://masutaka.net/2010-06-20-2/","isoDate":"2010-06-20T01:00:00.000Z","dateMiliSeconds":1276995600000,"authorName":"masutaka"},{"title":"Debian squeeze で Windows キーを GNOME メインメニュー表示に割り当てる","content":"$HOME を掃除したら、Windows キーを「GNOME メインメニュー」の表示に\n割り当てられなくなりました。どうやら squeeze から変更されたようです。\nたまたま某サイト で方法が分かったので、メモします。\n  「GNOME メインメニュー」→「システムツール」→\n「設定エディタ(gconf-editor)」を起動する。\n  /apps/metacity/global_keybindings/panel_main_menu を右クリックし\nて「キーの編集」を選び「値」欄に Super_L と入力する。\n  設定エディタは Windows のレジストリエディタと似たようなものだそうで\nす。そのため、できるだけ GNOME アプリケーションが用意する設定インター\nフェースを使用すべきです。\n今回の場合だと GNOME が用意する設定インターフェースは「GNOME メイン\nメニュー」→「システム」→「設定」→「キーボード・ショートカット」\nになります。\n過去の記事を検索したら [2005-11-07-1] や [2007-03-11-3] を見つけま\nした。「Windows キー」→「C-p」でメニューを辿れるのは良いですね。\n早速設定しました。","contentSnippet":"$HOME を掃除したら、Windows キーを「GNOME メインメニュー」の表示に割り当てられなくなりました。どうやら squeeze から変更されたようです。たまたま某サイト で方法が分かったので、メモします。  「GNOME メインメニュー」→「システムツール」→「設定エディタ(gconf-editor)」を起動する。  /apps/metacity/global_keybindings/panel_main_menu を右クリックして「キーの編集」を選び「値」欄に Super_L と入力する。  設定エディタは Windows のレジストリエディタと似たようなものだそうです。そのため、できるだけ GNOME アプリケーションが用意する設定インターフェースを使用すべきです。今回の場合だと GNOME が用意する設定インターフェースは「GNOME メインメニュー」→「システム」→「設定」→「キーボード・ショートカット」になります。過去の記事を検索したら [2005-11-07-1] や [2007-03-11-3] を見つけました。「Windows キー」→「C-p」でメニューを辿れるのは良いですね。早速設定しました。","link":"https://masutaka.net/2010-06-20-1/","isoDate":"2010-06-20T00:00:00.000Z","dateMiliSeconds":1276992000000,"authorName":"masutaka"},{"title":"「Emacs23.2が更に1ビット稼いだ秘密」の自分用メモ","content":"「Emacs23.2が更に1ビット稼いだ秘密 — ありえるえりあ 」の理解に時間\nがかかったので、自分用にメモしておく。\nEmacs23.1 の enum Lisp_Type は以下のように定義されていた。\n         000 Lisp_Int   001 空き   010 Lisp_Symbol   011 Lisp_Misc   100 Lisp_String   101 Lisp_Vectorlike   110 Lisp_Cons   111 Lisp_Float    enum Lisp_Type は オブジェクト変数(でいいのかな？) 32bit のうち、\n下位 3bit に対応する。\nLisp_Int(= 下位 3bit 全てがゼロ)の時は、整数オブジェクトと判断する。\nこの場合、残り 29bit を符号と整数長として使える。\nprintf(&#34;Emacs23.1(%0.0fMB)\\n&#34;, ((double)(0xffffffff &gt;&gt; (3 + 1)) / 1024 / 1024)); =&gt; Emacs23.","contentSnippet":"「Emacs23.2が更に1ビット稼いだ秘密 — ありえるえりあ 」の理解に時間がかかったので、自分用にメモしておく。Emacs23.1 の enum Lisp_Type は以下のように定義されていた。         000 Lisp_Int   001 空き   010 Lisp_Symbol   011 Lisp_Misc   100 Lisp_String   101 Lisp_Vectorlike   110 Lisp_Cons   111 Lisp_Float    enum Lisp_Type は オブジェクト変数(でいいのかな？) 32bit のうち、下位 3bit に対応する。Lisp_Int(= 下位 3bit 全てがゼロ)の時は、整数オブジェクトと判断する。この場合、残り 29bit を符号と整数長として使える。printf(\"Emacs23.1(%0.0fMB)\\n\", ((double)(0xffffffff >> (3 + 1)) / 1024 / 1024)); => Emacs23.","link":"https://masutaka.net/2010-06-19-2/","isoDate":"2010-06-19T01:00:00.000Z","dateMiliSeconds":1276909200000,"authorName":"masutaka"},{"title":"StatusNet API のパスを Twitter と同じにする方法","content":"[2010-05-16-1] の補完です。\n今回の記事は元々、twittering-mode で StatusNet を使うために書きまし\nた。しかし、twittering-mode 側の修正で対応することにしたので、私は\n今現在設定していません。ニッチな層向けに残しておくことにします。\nIdentifox, twittering-mode, TweetDeck 以外に使えるクライアントがあ\nれば、教えて下さい！\nさて、説明に入ります。\nstatusnet は http://example.com/statusnet/ に構築し、\n[2010-04-18-3] の Fancy URLs の設定を行ったものとします。\nStatusNet の API は Twitter-compatible です。 ただし、[2010-05-16-1] で書きましたが、API の URL は少し異なります。\n何らかの事情で Twitter クライアントを修正できない場合でも、Twitter\nとパスを同じにすれば使えるかもしれません。Apache の mod_rewriteで置\n換してみましょう。\n※ /var/www は Debian における、Apache の DocumentRoot です。\n/var/www/.htaccess 以下を設定します。\n&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteRule ^1/(.*)$ statusnet/api/$1 RewriteRule ^search(.*)$ statusnet/api/search$1 &lt;/IfModule&gt; 1 つ目の RewriteRule で http://example.com/1/ * へのアクセスを、","contentSnippet":"[2010-05-16-1] の補完です。今回の記事は元々、twittering-mode で StatusNet を使うために書きました。しかし、twittering-mode 側の修正で対応することにしたので、私は今現在設定していません。ニッチな層向けに残しておくことにします。Identifox, twittering-mode, TweetDeck 以外に使えるクライアントがあれば、教えて下さい！さて、説明に入ります。statusnet は http://example.com/statusnet/ に構築し、[2010-04-18-3] の Fancy URLs の設定を行ったものとします。StatusNet の API は Twitter-compatible です。 ただし、[2010-05-16-1] で書きましたが、API の URL は少し異なります。何らかの事情で Twitter クライアントを修正できない場合でも、Twitterとパスを同じにすれば使えるかもしれません。Apache の mod_rewriteで置換してみましょう。※ /var/www は Debian における、Apache の DocumentRoot です。/var/www/.htaccess 以下を設定します。<IfModule mod_rewrite.c> RewriteEngine On RewriteBase / RewriteRule ^1/(.*)$ statusnet/api/$1 RewriteRule ^search(.*)$ statusnet/api/search$1 </IfModule> 1 つ目の RewriteRule で http://example.com/1/ * へのアクセスを、","link":"https://masutaka.net/2010-06-19-1/","isoDate":"2010-06-19T00:00:00.000Z","dateMiliSeconds":1276905600000,"authorName":"masutaka"},{"title":"『武士道』を読んだ","content":"2010.4.17 購入。武士道が大衆にも広まった経緯のあたりは興味深かった。\n明治の本だけど外国人向けに書かれた本なので、それほど読みづらくない。\n訳も良いのかな。","contentSnippet":"2010.4.17 購入。武士道が大衆にも広まった経緯のあたりは興味深かった。明治の本だけど外国人向けに書かれた本なので、それほど読みづらくない。訳も良いのかな。","link":"https://masutaka.net/2010-06-11-1/","isoDate":"2010-06-11T00:00:00.000Z","dateMiliSeconds":1276214400000,"authorName":"masutaka"},{"title":"『ちょいデキ!』を読んだ","content":"http://chalow.net/2009-05-17-3.html で知って、2010.4.17 に購入した。\nこれも読みやすかった。二日で読めた。凡人のためのちょっとした仕事術\nが Q&amp;A 形式でまとまっている。","contentSnippet":"http://chalow.net/2009-05-17-3.html で知って、2010.4.17 に購入した。これも読みやすかった。二日で読めた。凡人のためのちょっとした仕事術が Q&A 形式でまとまっている。","link":"https://masutaka.net/2010-06-06-1/","isoDate":"2010-06-06T00:00:00.000Z","dateMiliSeconds":1275782400000,"authorName":"masutaka"},{"title":"『はじめての課長の教科書』を読んだ","content":"http://blog.livedoor.jp/dankogai/archives/50995105.html で知って、\n2010.4.17 に購入した。読みやすかった。中間管理職向けの本って他にな\nいと思う。","contentSnippet":"http://blog.livedoor.jp/dankogai/archives/50995105.html で知って、2010.4.17 に購入した。読みやすかった。中間管理職向けの本って他にないと思う。","link":"https://masutaka.net/2010-06-03-1/","isoDate":"2010-06-03T00:00:00.000Z","dateMiliSeconds":1275523200000,"authorName":"masutaka"},{"title":"テレビとワイヤレスデバイスの組み合わせは最高","content":"2 週間ほど前から [2009-11-03-1] に買った AQUOS 32 型テレビを PC の\nモニタとして使っていますが、予想以上に使いやすいことが分かりました。\nええ、すごく良いです。\nさっそく外観です。\n  向かって左下のシルバーの筐体がメインマシンの DELL Inspiron\n530s(Debian GNU/Linux Squeeze) です。AQUOS の「入力 2」に繋げていま\nす。Debian からの音声は、別途 Audio ケーブルを通じて AQUOS から出ます。\nAQUOS の前にある VAIO W(WindowsXP) は D-sub ケーブルで「入力 7」に\n繋げています。\n「入力 2」と「入力 7」の音声入力は共通なので、「入力 7」の VAIO W\nに切り替えても、DELL 側の音楽を聴き続けることができます。ただし、音\n声は一瞬途絶えます。\n手前にあるキーボードとマウスはワイヤレスです。DELL と繋がっています。\nSynergy を使っているので[2009-07-20-3] 、VAIO W を操作することも出来\nます。\nテレビ台に収まっているのは PS3 です。HDMI ケーブルで「入力 1」に繋\nげています。\n左斜め前から撮ってみました。\n  DELL がよく見えます。\n右斜め前からも撮ってみました。\n  右下の白い箱は DVD/CD ドライブです。VAIO W と繋がっています。","contentSnippet":"2 週間ほど前から [2009-11-03-1] に買った AQUOS 32 型テレビを PC のモニタとして使っていますが、予想以上に使いやすいことが分かりました。ええ、すごく良いです。さっそく外観です。  向かって左下のシルバーの筐体がメインマシンの DELL Inspiron530s(Debian GNU/Linux Squeeze) です。AQUOS の「入力 2」に繋げています。Debian からの音声は、別途 Audio ケーブルを通じて AQUOS から出ます。AQUOS の前にある VAIO W(WindowsXP) は D-sub ケーブルで「入力 7」に繋げています。「入力 2」と「入力 7」の音声入力は共通なので、「入力 7」の VAIO Wに切り替えても、DELL 側の音楽を聴き続けることができます。ただし、音声は一瞬途絶えます。手前にあるキーボードとマウスはワイヤレスです。DELL と繋がっています。Synergy を使っているので[2009-07-20-3] 、VAIO W を操作することも出来ます。テレビ台に収まっているのは PS3 です。HDMI ケーブルで「入力 1」に繋げています。左斜め前から撮ってみました。  DELL がよく見えます。右斜め前からも撮ってみました。  右下の白い箱は DVD/CD ドライブです。VAIO W と繋がっています。","link":"https://masutaka.net/2010-05-30-1/","isoDate":"2010-05-30T00:00:00.000Z","dateMiliSeconds":1275177600000,"authorName":"masutaka"},{"title":"『「法令遵守」が日本を滅ぼす』を読んだ","content":"http://ameblo.jp/takapon-jp/entry-10262279171.html で知って、\n2010.4.17 に購入した。\n元東京地検特捜部の著者の言葉には説得力があった。日本では単純に「法\n令遵守」をしても、その場凌ぎの対応にならざるを得ない。法令の背後に\nある社会的要請に応えることこそコンプライアンスであり、その観点から\n組織のあり方を考え直すことが重要である。","contentSnippet":"http://ameblo.jp/takapon-jp/entry-10262279171.html で知って、2010.4.17 に購入した。元東京地検特捜部の著者の言葉には説得力があった。日本では単純に「法令遵守」をしても、その場凌ぎの対応にならざるを得ない。法令の背後にある社会的要請に応えることこそコンプライアンスであり、その観点から組織のあり方を考え直すことが重要である。","link":"https://masutaka.net/2010-05-25-1/","isoDate":"2010-05-25T00:00:00.000Z","dateMiliSeconds":1274745600000,"authorName":"masutaka"},{"title":"使用可能なフォントリスト","content":"http://pc12.2ch.net/test/read.cgi/unix/1265413075/83 以下の S 式を評価すると、現在のフレームで使用可能なフォントリストを\n返す。\n(font-family-list) ","contentSnippet":"http://pc12.2ch.net/test/read.cgi/unix/1265413075/83 以下の S 式を評価すると、現在のフレームで使用可能なフォントリストを返す。(font-family-list)","link":"https://masutaka.net/2010-05-22-2/","isoDate":"2010-05-22T01:00:00.000Z","dateMiliSeconds":1274490000000,"authorName":"masutaka"},{"title":"TweetDeck から StatusNet を使おう","content":"TweetDeck から StatusNet を使えるようになりました！！ TweetDeck は、Mac, Windows, Linux, iPhone, iPod touch, iPad 等で動\n作する Twitter クライアントです。今回は Windows 版で試しました。\nインストールと StatusNet 向けの設定は前述の URL を参考にしてくださ\nい。TweetDeck for Desktop は 0.34.1 以上である必要があります。\nデフォルトの設定では日本語を表示できません。\nSetting アイコンをクリック→\nColor/Font のタブをクリック→\nInternationalFont/TwitterKey にチェックを入れれば表示できます。\nWeb 版で悩まされてきた、Enter でのツイートは抑制出来ます。\nSetting アイコンをクリック→\nGeneral のタブをクリック→\nPress Enter to Send an Update のチェックを外せば OK です。\nなぜか、パブリックタイムラインを表示出来ませんでした。\nそのうち対応されるのかな？ 参考情報:\nTweetdeck　日本語の設定 追記(2010-05-24):\nクリーンルームでは使えませんでした。初回起動時に必ず\nTwitter/Facebook/MySpace のいずれかの認証を受ける必要があるためです。\n非常に残念です。\n追記(2010-06-07):\nある方経由で、開発元に問い合わせてもらっています。\n追記(2010-06-09):\nダメでした。まだ対応する気はないとのことです。\n気長に待ちましょう。。。","contentSnippet":"TweetDeck から StatusNet を使えるようになりました！！ TweetDeck は、Mac, Windows, Linux, iPhone, iPod touch, iPad 等で動作する Twitter クライアントです。今回は Windows 版で試しました。インストールと StatusNet 向けの設定は前述の URL を参考にしてください。TweetDeck for Desktop は 0.34.1 以上である必要があります。デフォルトの設定では日本語を表示できません。Setting アイコンをクリック→Color/Font のタブをクリック→InternationalFont/TwitterKey にチェックを入れれば表示できます。Web 版で悩まされてきた、Enter でのツイートは抑制出来ます。Setting アイコンをクリック→General のタブをクリック→Press Enter to Send an Update のチェックを外せば OK です。なぜか、パブリックタイムラインを表示出来ませんでした。そのうち対応されるのかな？ 参考情報:Tweetdeck　日本語の設定 追記(2010-05-24):クリーンルームでは使えませんでした。初回起動時に必ずTwitter/Facebook/MySpace のいずれかの認証を受ける必要があるためです。非常に残念です。追記(2010-06-07):ある方経由で、開発元に問い合わせてもらっています。追記(2010-06-09):ダメでした。まだ対応する気はないとのことです。気長に待ちましょう。。。","link":"https://masutaka.net/2010-05-22-1/","isoDate":"2010-05-22T00:00:00.000Z","dateMiliSeconds":1274486400000,"authorName":"masutaka"},{"title":"『会社をぶっ壊して、チームを創ろう!』を読んだ","content":"まあまあかな。「かき混ぜ隊」はツイッターで一部代替できるかもと思っ\nた。社員が会社を良くしようという基盤がない状態で、多くの会社が根本\n的な変革をしようとしているが、それは全く無意味ということが書いてあっ\nたけど、それは全くその通り。","contentSnippet":"まあまあかな。「かき混ぜ隊」はツイッターで一部代替できるかもと思った。社員が会社を良くしようという基盤がない状態で、多くの会社が根本的な変革をしようとしているが、それは全く無意味ということが書いてあったけど、それは全くその通り。","link":"https://masutaka.net/2010-05-19-1/","isoDate":"2010-05-19T00:00:00.000Z","dateMiliSeconds":1274227200000,"authorName":"masutaka"},{"title":"Twitter と StatusNet の URL の違い","content":"statusnet は http://example.com/statusnet/ に構築し、\n[2010-04-18-3] の Fancy URLs の設定を行ったものとします。\n基本 API\n    ホスト名 パス     Twitter http://api.twitter.com  /1/statuses/*.xml   StatusNet http://example.com  /statusnet/api/statuses/*.xml    検索 API\n    ホスト名 パス     Twitter http://search.twitter.com  /search*   StatusNet http://example.com  /statusnet/api/search*    &ldquo;20 minutes ago&rdquo; や &ldquo;in reply to hoge&rdquo; のリンク先\n    ホスト名 パス     Twitter http://twitter.","contentSnippet":"statusnet は http://example.com/statusnet/ に構築し、[2010-04-18-3] の Fancy URLs の設定を行ったものとします。基本 API    ホスト名 パス     Twitter http://api.twitter.com  /1/statuses/*.xml   StatusNet http://example.com  /statusnet/api/statuses/*.xml    検索 API    ホスト名 パス     Twitter http://search.twitter.com  /search*   StatusNet http://example.com  /statusnet/api/search*    “20 minutes ago” や “in reply to hoge” のリンク先    ホスト名 パス     Twitter http://twitter.","link":"https://masutaka.net/2010-05-16-1/","isoDate":"2010-05-16T00:00:00.000Z","dateMiliSeconds":1273968000000,"authorName":"masutaka"},{"title":"elisp でマクロを含んだ関数のデバッグに便利な方法","content":"マクロを含んだ関数のデバッグをするために、ステップ実行しようとする\nと一瞬で終わってしまうことがあります。これについて、ツイッターでア\nドバイスをもらったので、調べてみました。\n例えば以下のコードで、hoge() をステップ実行しようとすると\nhoge-only の式に入れず、ミニバッファに Result: &ldquo;ccc&rdquo; と表示され\n一瞬で終わってしまいます。\n(defun hoge-p () t)  (defmacro hoge-only (&amp;rest body)  `(cond  ((not (hoge-p))  (message &#34;This command can be used in hoge only&#34;))  (t ,@body)))  (defun hoge ()  (hoge-only  (message &#34;aaa&#34;)  (message &#34;bbb&#34;)  (message &#34;ccc&#34;))) 対策は簡単で、以下の S 式を評価するだけです。\n(def-edebug-spec hoge-only t) どこかで見たことあるなあと思ったら、mew-edebug.el でこれが使われて\nいました。なぜ気づかない。。。\n元になったつぶやきです。ありがとうございます。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"","contentSnippet":"マクロを含んだ関数のデバッグをするために、ステップ実行しようとすると一瞬で終わってしまうことがあります。これについて、ツイッターでアドバイスをもらったので、調べてみました。例えば以下のコードで、hoge() をステップ実行しようとするとhoge-only の式に入れず、ミニバッファに Result: “ccc” と表示され一瞬で終わってしまいます。(defun hoge-p () t)  (defmacro hoge-only (&rest body)  `(cond  ((not (hoge-p))  (message \"This command can be used in hoge only\"))  (t ,@body)))  (defun hoge ()  (hoge-only  (message \"aaa\")  (message \"bbb\")  (message \"ccc\"))) 対策は簡単で、以下の S 式を評価するだけです。(def-edebug-spec hoge-only t) どこかで見たことあるなあと思ったら、mew-edebug.el でこれが使われていました。なぜ気づかない。。。元になったつぶやきです。ありがとうございます。loading...   if (localStorage.getItem(\"pref-theme\") === \"","link":"https://masutaka.net/2010-05-15-1/","isoDate":"2010-05-15T00:00:00.000Z","dateMiliSeconds":1273881600000,"authorName":"masutaka"},{"title":"『アジャイルプラクティス 達人プログラマに学ぶ現場開発者の習慣』を読んだ","content":"2010.4.9 購入。アジャイルを理解するにはとても良い本。45 のプラクティ\nスが簡潔に面白くまとめられている。","contentSnippet":"2010.4.9 購入。アジャイルを理解するにはとても良い本。45 のプラクティスが簡潔に面白くまとめられている。","link":"https://masutaka.net/2010-05-05-2/","isoDate":"2010-05-05T01:00:00.000Z","dateMiliSeconds":1273021200000,"authorName":"masutaka"},{"title":"StatusNet のバージョンアップ","content":"0.9.2 がリリースされた ので、バージョンアップしました。\nインストール [2010-04-18-1] をお手軽にした感じでした。\nアップデート手順 ※ &ldquo;#&rdquo; は root での作業、&quot;%&quot; は一般ユーザでの作業です。\n1. Apache は終了させておきます。  /etc/init.d/apache2 stop  2. http://status.net/ から tar ball を落とし、/var/www に展開します。  cd /var/www tar xzf statusnet-0.9.2.tar.gz  3. 以前のバージョンと置き換えます。  mv statusnet statusnet.bak mv statusnet-0.9.2 statusnet  4. 必要なファイルをコピーします。  cd statusnet cp ../statusnet.bak/.htaccess . cp ../statusnet.bak/config.php . cp ../statusnet.bak/avatar/* avatar cp ../statusnet.bak/background/* background cp ../statusnet.bak/file/* file  5. アクセス権を適切に設定します。  chown -R root:root .","contentSnippet":"0.9.2 がリリースされた ので、バージョンアップしました。インストール [2010-04-18-1] をお手軽にした感じでした。アップデート手順 ※ “#” は root での作業、\"%\" は一般ユーザでの作業です。1. Apache は終了させておきます。  /etc/init.d/apache2 stop  2. http://status.net/ から tar ball を落とし、/var/www に展開します。  cd /var/www tar xzf statusnet-0.9.2.tar.gz  3. 以前のバージョンと置き換えます。  mv statusnet statusnet.bak mv statusnet-0.9.2 statusnet  4. 必要なファイルをコピーします。  cd statusnet cp ../statusnet.bak/.htaccess . cp ../statusnet.bak/config.php . cp ../statusnet.bak/avatar/* avatar cp ../statusnet.bak/background/* background cp ../statusnet.bak/file/* file  5. アクセス権を適切に設定します。  chown -R root:root .","link":"https://masutaka.net/2010-05-05-1/","isoDate":"2010-05-05T00:00:00.000Z","dateMiliSeconds":1273017600000,"authorName":"masutaka"},{"title":"DISQUS API を使って、過去のコメントをインポートする方法","content":"DISQUS は標準で IntenseDebate, JS-Kit, Movable Type, WordPress のコ\nメントをインポートすることが出来ます。「くっつき BBS 」のインポート\nは当然サポートされていません。\n幸い、WWW-Disqus という DISQUS API を叩く Perl モジュールがあったの\nで、これでインポートすることにしました。ありがたいことです。\nこれを使えば「くっつき BBS」に限らず、どのコメントシステムからも移\n行は可能だと思います。\nWWW-Disqus は若干古くなって動かなかったので、以下の修正が必要でした。\nIndex: lib/WWW/Disqus.pm =================================================================== --- lib/WWW/Disqus.pm\t(リビジョン 695) +++ lib/WWW/Disqus.pm\t(作業コピー) @@ -57,8 +57,7 @@ my $obj = shift; return 1 if $obj-&gt;{succeeded} - &amp;&amp; $obj-&gt;{succeeded}-&gt;{value} - &amp;&amp; $obj-&gt;{succeeded}-&gt;{value} eq &#39;true&#39;; + &amp;&amp; $obj-&gt;{succeeded} eq &#39;true&#39;; confess $obj-&gt;{message}; } @@ -81,7 +80,7 @@ disqus_api_url( &#34;get_forum_list&#34;, user_api_key =&gt; $user_api_key ) ); confess &#39;Failed to access DISQUS API: &#39; .","contentSnippet":"DISQUS は標準で IntenseDebate, JS-Kit, Movable Type, WordPress のコメントをインポートすることが出来ます。「くっつき BBS 」のインポートは当然サポートされていません。幸い、WWW-Disqus という DISQUS API を叩く Perl モジュールがあったので、これでインポートすることにしました。ありがたいことです。これを使えば「くっつき BBS」に限らず、どのコメントシステムからも移行は可能だと思います。WWW-Disqus は若干古くなって動かなかったので、以下の修正が必要でした。Index: lib/WWW/Disqus.pm =================================================================== --- lib/WWW/Disqus.pm\t(リビジョン 695) +++ lib/WWW/Disqus.pm\t(作業コピー) @@ -57,8 +57,7 @@ my $obj = shift; return 1 if $obj->{succeeded} - && $obj->{succeeded}->{value} - && $obj->{succeeded}->{value} eq 'true'; + && $obj->{succeeded} eq 'true'; confess $obj->{message}; } @@ -81,7 +80,7 @@ disqus_api_url( \"get_forum_list\", user_api_key => $user_api_key ) ); confess 'Failed to access DISQUS API: ' .","link":"https://masutaka.net/2010-05-03-2/","isoDate":"2010-05-03T01:00:00.000Z","dateMiliSeconds":1272848400000,"authorName":"masutaka"},{"title":"このブログのコメントシステムを DISQUS にしました","content":"[2008-09-29-1] のバージョンアップ。\n今まで「くっつき BBS 」を自サイト内に構築し使っていましたが、スパム\n対策が面倒になってきた、コメントを書いた人が自分のコメントを修正で\nきない等の理由から、DISQUS という外部コメントサービスを使うことにし\nました。\n同様にトラックバックも「くっつきトラックバック」を使っていましたが、\nこちらは廃止しました。実はトラックバックはあまり好きではないのです。\n(DISQUS の管理オプションを ON にすれば一応使えます。)\n良くなった点 DISQUS のアカウントを作ると、自分のコメントの一覧表示や編集、アバター\n機能やコミュニティ機能が使えるようになりました。(アカウントを作らな\nくても投稿はできます。)\nDISQUS アカウント以外にも Facebook, Twitter, OpenID でもログインで\nきます。(ただ、Facebook は何かうまくいきません&hellip;。)\nコメントを投稿するついでに Twitter や Facebook にも送信出来るように\nなりました。(コメントが活発になることを期待。)\nTwitter や FriendFeed でリアクションがあれば、コメントの下に表示さ\nれるようになりました。\n各コメントに返信すると、スレッド化するようになりました。\n管理者はスパムのことを気にしなくてよくなりました。\n管理者は全記事のコメントを一覧表示出来るようになりました。\n悪くなった点 最近頂いたコメントは左側にあるウイジェットの RECENT で表示出来ます。\nしかし、タイトルに日本語を含む記事にコメントすると、文字化けます。\n文字化けるのは &ldquo;2010-03-06-1 at chalow&rdquo; の部分です。(この例では\nDISQUS API を使ったため文字化けは発生していません。)\n過去のコメントは既に移行済みです。これが一番大変でした。次の記事\n[2010-05-03-2] で説明します。\n参考情報:\nOgawa::Buzz: このブログのコメントシステムにDISQUSを使い始めました ","contentSnippet":"[2008-09-29-1] のバージョンアップ。今まで「くっつき BBS 」を自サイト内に構築し使っていましたが、スパム対策が面倒になってきた、コメントを書いた人が自分のコメントを修正できない等の理由から、DISQUS という外部コメントサービスを使うことにしました。同様にトラックバックも「くっつきトラックバック」を使っていましたが、こちらは廃止しました。実はトラックバックはあまり好きではないのです。(DISQUS の管理オプションを ON にすれば一応使えます。)良くなった点 DISQUS のアカウントを作ると、自分のコメントの一覧表示や編集、アバター機能やコミュニティ機能が使えるようになりました。(アカウントを作らなくても投稿はできます。)DISQUS アカウント以外にも Facebook, Twitter, OpenID でもログインできます。(ただ、Facebook は何かうまくいきません…。)コメントを投稿するついでに Twitter や Facebook にも送信出来るようになりました。(コメントが活発になることを期待。)Twitter や FriendFeed でリアクションがあれば、コメントの下に表示されるようになりました。各コメントに返信すると、スレッド化するようになりました。管理者はスパムのことを気にしなくてよくなりました。管理者は全記事のコメントを一覧表示出来るようになりました。悪くなった点 最近頂いたコメントは左側にあるウイジェットの RECENT で表示出来ます。しかし、タイトルに日本語を含む記事にコメントすると、文字化けます。文字化けるのは “2010-03-06-1 at chalow” の部分です。(この例ではDISQUS API を使ったため文字化けは発生していません。)過去のコメントは既に移行済みです。これが一番大変でした。次の記事[2010-05-03-2] で説明します。参考情報:Ogawa::Buzz: このブログのコメントシステムにDISQUSを使い始めました","link":"https://masutaka.net/2010-05-03-1/","isoDate":"2010-05-03T00:00:00.000Z","dateMiliSeconds":1272844800000,"authorName":"masutaka"},{"title":"キー操作のみでウェブサイトのタイトルや URL をコピーする方法","content":"今までページのソースや、&ldquo;C-c T&rdquo; からコピーしていましたが、さすがに\nバカバカしくなったので KeySnail の関数を作りました。\nそれぞれ、&ldquo;t&rdquo; でタイトルコピー、&ldquo;T&rdquo; でタイトルと URL コピー、\n&ldquo;u&rdquo; で URL コピーが出来るようになります。\nkey.setViewKey(&#39;t&#39;, function () { var w = window._content; var d = w.document; var txt = d.title; const CLIPBOARD = Components.classes[&#39;@mozilla.org/widget/clipboardhelper;1&#39;].getService(Components.interfaces.nsIClipboardHelper); CLIPBOARD.copyString(txt); }, &#39;タイトルコピー&#39;); key.setViewKey(&#39;T&#39;, function () { var w = window._content; var d = w.document; var txt = &#34;\\&#34;&#34; + d.title + &#34;\\&#34; - &#34; + d.location.href; const CLIPBOARD = Components.classes[&#39;@mozilla.org/widget/clipboardhelper;1&#39;].getService(Components.interfaces.nsIClipboardHelper); CLIPBOARD.copyString(txt); }, &#39;タイトルとURLコピー&#39;); key.setViewKey(&#39;u&#39;, function () { var w = window.","contentSnippet":"今までページのソースや、“C-c T” からコピーしていましたが、さすがにバカバカしくなったので KeySnail の関数を作りました。それぞれ、“t” でタイトルコピー、“T” でタイトルと URL コピー、“u” で URL コピーが出来るようになります。key.setViewKey('t', function () { var w = window._content; var d = w.document; var txt = d.title; const CLIPBOARD = Components.classes['@mozilla.org/widget/clipboardhelper;1'].getService(Components.interfaces.nsIClipboardHelper); CLIPBOARD.copyString(txt); }, 'タイトルコピー'); key.setViewKey('T', function () { var w = window._content; var d = w.document; var txt = \"\\\"\" + d.title + \"\\\" - \" + d.location.href; const CLIPBOARD = Components.classes['@mozilla.org/widget/clipboardhelper;1'].getService(Components.interfaces.nsIClipboardHelper); CLIPBOARD.copyString(txt); }, 'タイトルとURLコピー'); key.setViewKey('u', function () { var w = window.","link":"https://masutaka.net/2010-05-01-1/","isoDate":"2010-05-01T00:00:00.000Z","dateMiliSeconds":1272672000000,"authorName":"masutaka"},{"title":"StatusNet のセッションが異常に短い","content":"Debian squeeze は問題ないのですが、Debian lenny ではすぐログアウト\nする問題に悩まされていました。セッションが短いと、こうなるそうです。\n/etc/cron.d/php5 を以下のように修正して解決しました。\n修正前\n 09,39 * * * * root [ -x /usr/lib/php5/maxlifetime ] &amp;&amp; [ -d /var/lib/php5 ] &amp;&amp; find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -n 200 -r -0 rm\n修正後\n00 6 10,20,30 * * root [ -x /usr/lib/php5/maxlifetime ] &amp;&amp; [ -d /var/lib/php5 ] &amp;&amp; find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -n 200 -r -0 rm","contentSnippet":"Debian squeeze は問題ないのですが、Debian lenny ではすぐログアウトする問題に悩まされていました。セッションが短いと、こうなるそうです。/etc/cron.d/php5 を以下のように修正して解決しました。修正前 09,39 * * * * root [ -x /usr/lib/php5/maxlifetime ] && [ -d /var/lib/php5 ] && find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -n 200 -r -0 rm修正後00 6 10,20,30 * * root [ -x /usr/lib/php5/maxlifetime ] && [ -d /var/lib/php5 ] && find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -n 200 -r -0 rm","link":"https://masutaka.net/2010-04-29-4/","isoDate":"2010-04-29T03:00:00.000Z","dateMiliSeconds":1272510000000,"authorName":"masutaka"},{"title":"StatusNet インストーラのバグ","content":"[2010-04-18-1] の補完。\n後日ネットを彷徨っていたら、こんなページ を見つけました。(良く知った\n方もいらっしゃいます。)\nどうやら statusnet-0.9.1 のインストーラにはバグがあるようです。ただ\nし PHP のバージョンによっては発生しないそうです。実際 5.3.2-1 で発\n生しましたが、5.2.6-1+lenny では発生しませんでした。\nインストールが途中で止まった 5.3.2-1 はその後も\n/var/log/apache2/error.log にこんなログが吐かれ続けていました。\n [Sun Apr 25 14:42:15 2010] [error] [client 192.168.1.11] PHP Warning: Parameter 1 to RSSCloudPlugin::onRouterInitialized() expected to be a reference, value given in /var/www/statusnet/lib/event.php on line 105\n 気持ち悪いので、前述のページからリンクされていた以下のパッチを当て\nました。\n--- orig/statusnet-0.9.1/plugins/RSSCloud/RSSCloudPlugin.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/plugins/RSSCloud/RSSCloudPlugin.php\t2010-04-25 16:48:46.000000000 +0900 @@ -105,7 +105,7 @@ * @return boolean hook return */ - function onRouterInitialized(&amp;$m) + function onRouterInitialized($m) { $m-&gt;connect(&#39;/main/rsscloud/request_notify&#39;, array(&#39;action&#39; =&gt; &#39;RSSCloudRequestNotify&#39;)); 追記(2010-05-08):","contentSnippet":"[2010-04-18-1] の補完。後日ネットを彷徨っていたら、こんなページ を見つけました。(良く知った方もいらっしゃいます。)どうやら statusnet-0.9.1 のインストーラにはバグがあるようです。ただし PHP のバージョンによっては発生しないそうです。実際 5.3.2-1 で発生しましたが、5.2.6-1+lenny では発生しませんでした。インストールが途中で止まった 5.3.2-1 はその後も/var/log/apache2/error.log にこんなログが吐かれ続けていました。 [Sun Apr 25 14:42:15 2010] [error] [client 192.168.1.11] PHP Warning: Parameter 1 to RSSCloudPlugin::onRouterInitialized() expected to be a reference, value given in /var/www/statusnet/lib/event.php on line 105 気持ち悪いので、前述のページからリンクされていた以下のパッチを当てました。--- orig/statusnet-0.9.1/plugins/RSSCloud/RSSCloudPlugin.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/plugins/RSSCloud/RSSCloudPlugin.php\t2010-04-25 16:48:46.000000000 +0900 @@ -105,7 +105,7 @@ * @return boolean hook return */ - function onRouterInitialized(&$m) + function onRouterInitialized($m) { $m->connect('/main/rsscloud/request_notify', array('action' => 'RSSCloudRequestNotify')); 追記(2010-05-08):","link":"https://masutaka.net/2010-04-29-3/","isoDate":"2010-04-29T02:00:00.000Z","dateMiliSeconds":1272506400000,"authorName":"masutaka"},{"title":"StatusNet のおかしな日本語","content":"例えば誰かにフォローされるとこんな件名のメールが飛んできます。\n 誰かさん は StatusNet であなたのつぶやきを聞いています。\n ちょっと気持ち悪いです&hellip;。\nlocale/ja/LC_MESSAGES/statusnet.po にはこのように書いてありました。\n翻訳ソフトか何かを使ったのでしょうか。\n msgid &ldquo;%1$s is now listening to your notices on %2$s.&rdquo;\nmsgstr &ldquo;%1$s は %2$s であなたのつぶやきを聞いています。&rdquo;\n 以下に変更し、\n msgstr &ldquo;%1$s は %2$s であなたをフォローしました。&rdquo;\nmsgfmt コマンドで .mo ファイルに変換しました。\n% msgfmt -o statusnet.mo statusnet.po\n ※ Debian Lenny では msgfmt は gettext パッケージに含まれています。","contentSnippet":"例えば誰かにフォローされるとこんな件名のメールが飛んできます。 誰かさん は StatusNet であなたのつぶやきを聞いています。 ちょっと気持ち悪いです…。locale/ja/LC_MESSAGES/statusnet.po にはこのように書いてありました。翻訳ソフトか何かを使ったのでしょうか。 msgid “%1$s is now listening to your notices on %2$s.”msgstr “%1$s は %2$s であなたのつぶやきを聞いています。” 以下に変更し、 msgstr “%1$s は %2$s であなたをフォローしました。”msgfmt コマンドで .mo ファイルに変換しました。% msgfmt -o statusnet.mo statusnet.po ※ Debian Lenny では msgfmt は gettext パッケージに含まれています。","link":"https://masutaka.net/2010-04-29-2/","isoDate":"2010-04-29T01:00:00.000Z","dateMiliSeconds":1272502800000,"authorName":"masutaka"},{"title":"Git コマンドまとめ","content":"個人的なメモ。ページ番号は「入門 Git」より。\nP21\n# グローバル変数の確認 % git config --global --list # グローバル変数に自分の名前とメールアドレスを追加 % git config --global user.name &#34;Takashi Masuda&#34; % git config --global user.email &#34;masutaka.net@gmail.com&#34; # 大半の出力に色づけ % git config --global color.ui true # グローバル変数とローカル変数の確認 % git config --list P42\n# コミットのための対話的なステージング % git add -i % git pull % git pull git://github.com/hayamiz/twittering-mode.git master git pull と同じ意味\n% git fetch % git merge origin/master % git push --dry-run git@github.com:masutaka/twittering-mode.git % git push git@github.","contentSnippet":"個人的なメモ。ページ番号は「入門 Git」より。P21# グローバル変数の確認 % git config --global --list # グローバル変数に自分の名前とメールアドレスを追加 % git config --global user.name \"Takashi Masuda\" % git config --global user.email \"masutaka.net@gmail.com\" # 大半の出力に色づけ % git config --global color.ui true # グローバル変数とローカル変数の確認 % git config --list P42# コミットのための対話的なステージング % git add -i % git pull % git pull git://github.com/hayamiz/twittering-mode.git master git pull と同じ意味% git fetch % git merge origin/master % git push --dry-run git@github.com:masutaka/twittering-mode.git % git push git@github.","link":"https://masutaka.net/2010-04-29-1/","isoDate":"2010-04-29T00:00:00.000Z","dateMiliSeconds":1272499200000,"authorName":"masutaka"},{"title":"Firefox アドオン KeySnail から StatusNet を使おう","content":"[2010-04-18-7] の補完です。\nstatusnet は http://example.com/statusnet/ に構築し、\n[2010-04-18-3] の Fancy URLs の設定を行ったものとします。\nKeySnail でツイートすることも出来ます。以下を .keysnail.js にコピペ\nすれば、&ldquo;C-c t&rdquo; または &ldquo;C-c C-t&rdquo; でツイートできます。\nkey.setGlobalKey([[&#39;C-c&#39;, &#39;t&#39;], [&#39;C-c&#39;, &#39;C-t&#39;]], function (aEvent) { prompt.read(&#34;tweet:&#34;, function (aTweet) { var username = &#34;アカウント&#34;; var password = &#34;パスワード&#34;; var xhr = new XMLHttpRequest; xhr.open(&#34;POST&#34;, &#34;http://example.com/statusnet/api/statuses/update.json&#34;, false, username, password); xhr.setRequestHeader(&#34;Content-Type&#34;, &#34;application/x-www-form-urlencoded&#34;); xhr.setRequestHeader(&#34;X-Twitter-Client&#34;, &#34;KeySnail&#34;); xhr.setRequestHeader(&#34;X-Twitter-Client-Version&#34;, &#34;0.1&#34;); xhr.send(&#34;status=&#34; + aTweet); }); }, &#39;Twitter投稿&#39;); いろんな意味で本家の &ldquo;C-c t&rdquo; に遠く及ばないです。とりあえずツイート\n出来るよといったレベルです。&ldquo;C-c T&rdquo; の「このページのタイトルと URL","contentSnippet":"[2010-04-18-7] の補完です。statusnet は http://example.com/statusnet/ に構築し、[2010-04-18-3] の Fancy URLs の設定を行ったものとします。KeySnail でツイートすることも出来ます。以下を .keysnail.js にコピペすれば、“C-c t” または “C-c C-t” でツイートできます。key.setGlobalKey([['C-c', 't'], ['C-c', 'C-t']], function (aEvent) { prompt.read(\"tweet:\", function (aTweet) { var username = \"アカウント\"; var password = \"パスワード\"; var xhr = new XMLHttpRequest; xhr.open(\"POST\", \"http://example.com/statusnet/api/statuses/update.json\", false, username, password); xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"); xhr.setRequestHeader(\"X-Twitter-Client\", \"KeySnail\"); xhr.setRequestHeader(\"X-Twitter-Client-Version\", \"0.1\"); xhr.send(\"status=\" + aTweet); }); }, 'Twitter投稿'); いろんな意味で本家の “C-c t” に遠く及ばないです。とりあえずツイート出来るよといったレベルです。“C-c T” の「このページのタイトルと URL","link":"https://masutaka.net/2010-04-23-1/","isoDate":"2010-04-23T00:00:00.000Z","dateMiliSeconds":1271980800000,"authorName":"masutaka"},{"title":"Firefox アドオン Identifox から StatusNet を使おう","content":"StatusNet のデモサイト https://identi.ca/ 用のクライアント\nIdentifox を少し修正すると、イントラネットに構築した StatusNet でも\n使えます。\nstatusnet は http://example.com/statusnet/ に構築し、\n[2010-04-18-3] の Fancy URLs の設定を行ったものとします。\nIdentifox  Firefox 用アドオンです。ある時点の Ecofon を StatusNet 用にポーティ\nングしたようです。\nhttps://identi.ca/api/ がハードコーディングされているので、\nidentifox-0.9-fx.xpi を zip 伸長し、以下のような修正を加え、\nまた zip 圧縮します。\n--- orig/identifox-0.9-fx/components/nsIdenticaNotifier.js\t2009-03-09 03:15:06.000000000 +0900 +++ identifox-0.9-fx/components/nsIdenticaNotifier.js\t2010-04-18 17:18:38.000000000 +0900 @@ -17,7 +17,7 @@ var insert_status_stmt = null; var find_status_stmt = null; -const IDENTICA_API_URL = &#34;https://identi.ca/api/&#34;; +const IDENTICA_API_URL = &#34;http://example.com/statusnet/api/&#34;; const NETWORK_TIMEOUT_TIME = 120; const APP_NAME = &#34;IdentiFox&#34;; 他にも KeySnail や twittering-mode が使えそうですが、まだ調査中です。","contentSnippet":"StatusNet のデモサイト https://identi.ca/ 用のクライアントIdentifox を少し修正すると、イントラネットに構築した StatusNet でも使えます。statusnet は http://example.com/statusnet/ に構築し、[2010-04-18-3] の Fancy URLs の設定を行ったものとします。Identifox  Firefox 用アドオンです。ある時点の Ecofon を StatusNet 用にポーティングしたようです。https://identi.ca/api/ がハードコーディングされているので、identifox-0.9-fx.xpi を zip 伸長し、以下のような修正を加え、また zip 圧縮します。--- orig/identifox-0.9-fx/components/nsIdenticaNotifier.js\t2009-03-09 03:15:06.000000000 +0900 +++ identifox-0.9-fx/components/nsIdenticaNotifier.js\t2010-04-18 17:18:38.000000000 +0900 @@ -17,7 +17,7 @@ var insert_status_stmt = null; var find_status_stmt = null; -const IDENTICA_API_URL = \"https://identi.ca/api/\"; +const IDENTICA_API_URL = \"http://example.com/statusnet/api/\"; const NETWORK_TIMEOUT_TIME = 120; const APP_NAME = \"IdentiFox\"; 他にも KeySnail や twittering-mode が使えそうですが、まだ調査中です。","link":"https://masutaka.net/2010-04-18-7/","isoDate":"2010-04-18T06:00:00.000Z","dateMiliSeconds":1271570400000,"authorName":"masutaka"},{"title":"StatusNet クリーンルーム特有の問題","content":"StatusNet は一部、インターネットサービスにアクセスする箇所があるの\nで、私がクリーンルームに設置した時はいくつかエラーが発生しました。\n参考までに、情報と対策をまとめておきます。\nインストール時に以下のエラーが発生。 Install StatusNet ・Starting installation... ・Checking database... ・Changing to database... ・Running database script... ・Adding SMS carrier data to database... ・Adding notice source data to database... ・Adding foreign service data to database... ・Writing config file... Fatal error: Call to undefined method Ostatus_profile::ensureprofile() in /var/www/statusnet/install.php on line 907 http://update.status.net/ へのアクセスを試みるためのようです。イン\nストールの最後のフェーズなので対策は不要ですが、気になる人は以下の\nパッチを当ててからインストールすると良いと思います。\n--- orig/statusnet-0.9.1/install.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/install.php\t2010-04-14 13:00:19.000000000 +0900 @@ -898,19 +898,6 @@ $user-&gt;grantRole(&#39;owner&#39;); $user-&gt;grantRole(&#39;moderator&#39;); $user-&gt;grantRole(&#39;administrator&#39;); - - // Attempt to do a remote subscribe to update@status.","contentSnippet":"StatusNet は一部、インターネットサービスにアクセスする箇所があるので、私がクリーンルームに設置した時はいくつかエラーが発生しました。参考までに、情報と対策をまとめておきます。インストール時に以下のエラーが発生。 Install StatusNet ・Starting installation... ・Checking database... ・Changing to database... ・Running database script... ・Adding SMS carrier data to database... ・Adding notice source data to database... ・Adding foreign service data to database... ・Writing config file... Fatal error: Call to undefined method Ostatus_profile::ensureprofile() in /var/www/statusnet/install.php on line 907 http://update.status.net/ へのアクセスを試みるためのようです。インストールの最後のフェーズなので対策は不要ですが、気になる人は以下のパッチを当ててからインストールすると良いと思います。--- orig/statusnet-0.9.1/install.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/install.php\t2010-04-14 13:00:19.000000000 +0900 @@ -898,19 +898,6 @@ $user->grantRole('owner'); $user->grantRole('moderator'); $user->grantRole('administrator'); - - // Attempt to do a remote subscribe to update@status.","link":"https://masutaka.net/2010-04-18-6/","isoDate":"2010-04-18T05:00:00.000Z","dateMiliSeconds":1271566800000,"authorName":"masutaka"},{"title":"StatusNet SMTP の設定","content":"フォローされた時や、お気に入りに追加された時に、ユーザにメール通知\nされるようになるので、SMTP の設定をすると良いでしょう。パスワードを\n忘れた時にユーザが再発行手続きを行えるので、メンテナンスコストも下\nがります。\n以下は認証なしの SMTP サーバの場合です。config.php に追記します。\n// Email info, used for all outbound email $config[&#39;mail&#39;][&#39;notifyfrom&#39;] = &#39;noreply@example.com&#39;; // Domain for generating no-reply and incoming email addresses, if enabled. // Defaults to site server name. $config[&#39;mail&#39;][&#39;domain&#39;] = &#39;example.com&#39;; // See http://pear.php.net/manual/en/package.mail.mail.factory.php for options $config[&#39;mail&#39;][&#39;backend&#39;] = &#39;smtp&#39;; $config[&#39;mail&#39;][&#39;params&#39;] = array( &#39;host&#39; =&gt; &#39;SmtpServerName&#39;, &#39;port&#39; =&gt; 25, ); $config[&lsquo;mail&rsquo;][&rsquo;notifyfrom&rsquo;] は StatusNet が送るメールの From: に\nなります。適当に設定してください。\n私が設置したクリーンルームでは、メールヘッダが常に文字化けしてしま\nいました。メールサーバが怪しげな変換をしているようなんですが、そも\nそも StatusNet がメールヘッダの MIME ENCODE をしていないことが原因","contentSnippet":"フォローされた時や、お気に入りに追加された時に、ユーザにメール通知されるようになるので、SMTP の設定をすると良いでしょう。パスワードを忘れた時にユーザが再発行手続きを行えるので、メンテナンスコストも下がります。以下は認証なしの SMTP サーバの場合です。config.php に追記します。// Email info, used for all outbound email $config['mail']['notifyfrom'] = 'noreply@example.com'; // Domain for generating no-reply and incoming email addresses, if enabled. // Defaults to site server name. $config['mail']['domain'] = 'example.com'; // See http://pear.php.net/manual/en/package.mail.mail.factory.php for options $config['mail']['backend'] = 'smtp'; $config['mail']['params'] = array( 'host' => 'SmtpServerName', 'port' => 25, ); $config[‘mail’][’notifyfrom’] は StatusNet が送るメールの From: になります。適当に設定してください。私が設置したクリーンルームでは、メールヘッダが常に文字化けしてしまいました。メールサーバが怪しげな変換をしているようなんですが、そもそも StatusNet がメールヘッダの MIME ENCODE をしていないことが原因","link":"https://masutaka.net/2010-04-18-5/","isoDate":"2010-04-18T04:00:00.000Z","dateMiliSeconds":1271563200000,"authorName":"masutaka"},{"title":"StatusNet のカスタマイズ","content":"設定はある程度 Web から出来ますが、出来ない設定も多いです。\nそんな場合は config.php を修正しましょう。\n私は以下の設定をしました。\n $config[&lsquo;attachments&rsquo;][&lsquo;uploads&rsquo;] = false;\n→必要になったら ON にすれば良いと思うので、添付ファイルは OFF にし\nました。\n  $config[&rsquo;location&rsquo;][&lsquo;share&rsquo;] = &rsquo;never&rsquo;;\n→ツイートしたときに、常に「狛江市, 東京都, 日本」と挿入されるので\nOFF にしました。今回設置したのはクリーンルームだったので、そもそも\n位置情報が不要です。\n その他の設定は config.php.sample が参考になると思います。ただ、ここ\nにも載っていない設定があるので、*.php を common_config 等で grep す\nる必要があるかもしれません。","contentSnippet":"設定はある程度 Web から出来ますが、出来ない設定も多いです。そんな場合は config.php を修正しましょう。私は以下の設定をしました。 $config[‘attachments’][‘uploads’] = false;→必要になったら ON にすれば良いと思うので、添付ファイルは OFF にしました。  $config[’location’][‘share’] = ’never’;→ツイートしたときに、常に「狛江市, 東京都, 日本」と挿入されるのでOFF にしました。今回設置したのはクリーンルームだったので、そもそも位置情報が不要です。 その他の設定は config.php.sample が参考になると思います。ただ、ここにも載っていない設定があるので、*.php を common_config 等で grep する必要があるかもしれません。","link":"https://masutaka.net/2010-04-18-4/","isoDate":"2010-04-18T03:00:00.000Z","dateMiliSeconds":1271559600000,"authorName":"masutaka"},{"title":"StatusNet Fancy URLs の設定","content":"Fancy URLs を設定すると、URL から index.php がなくなります。\nクールな URL を実現するためにも、是非設定しましょう。\n設定は比較的簡単です。\n1. .htaccess を作成します。\nstatusnet 直下の htaccess.sample を .htaccess という名前で保存し、\n修正します。以下は http://example.com/statusnet/ というサイトの場合です。\n--- /var/www/statusnet/htaccess.sample\t2010-03-29 00:39:56.000000000 +0900 +++ /var/www/statusnet/.htaccess\t2010-04-13 01:36:37.000000000 +0900 @@ -7,7 +7,7 @@ # http://example.com/ =&gt; / # http://example.com/mublog/ =&gt; /mublog/ # - RewriteBase /mublog/ + RewriteBase /statusnet/ ## Uncomment these if having trouble with API authentication ## when PHP is running in CGI or FastCGI mode. http://example.","contentSnippet":"Fancy URLs を設定すると、URL から index.php がなくなります。クールな URL を実現するためにも、是非設定しましょう。設定は比較的簡単です。1. .htaccess を作成します。statusnet 直下の htaccess.sample を .htaccess という名前で保存し、修正します。以下は http://example.com/statusnet/ というサイトの場合です。--- /var/www/statusnet/htaccess.sample\t2010-03-29 00:39:56.000000000 +0900 +++ /var/www/statusnet/.htaccess\t2010-04-13 01:36:37.000000000 +0900 @@ -7,7 +7,7 @@ # http://example.com/ => / # http://example.com/mublog/ => /mublog/ # - RewriteBase /mublog/ + RewriteBase /statusnet/ ## Uncomment these if having trouble with API authentication ## when PHP is running in CGI or FastCGI mode. http://example.","link":"https://masutaka.net/2010-04-18-3/","isoDate":"2010-04-18T02:00:00.000Z","dateMiliSeconds":1271556000000,"authorName":"masutaka"},{"title":"StatusNet のログイン画面を日本語にする","content":"Admin → Site の Default language を日本語にするだけではログイン画\n面は日本語になりませんでした。ブラウザ側の言語設定によるそうですが、\n少なくとも Firefox-3.5.8 は日本語になりませんでした。\nlanguage.php を修正します。すぐにログイン画面が日本語になります。\n--- orig/statusnet-0.9.1/lib/language.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/lib/language.php\t2010-04-12 13:20:56.000000000 +0900 @@ -307,6 +307,7 @@ &#39;ia&#39; =&gt; array(&#39;q&#39; =&gt; 0.8, &#39;lang&#39; =&gt; &#39;ia&#39;, &#39;name&#39; =&gt; &#39;Interlingua&#39;, &#39;direction&#39; =&gt; &#39;ltr&#39;), &#39;is&#39; =&gt; array(&#39;q&#39; =&gt; 0.1, &#39;lang&#39; =&gt; &#39;is&#39;, &#39;name&#39; =&gt; &#39;Icelandic&#39;, &#39;direction&#39; =&gt; &#39;ltr&#39;), &#39;it&#39; =&gt; array(&#39;q&#39; =&gt; 1, &#39;lang&#39; =&gt; &#39;it&#39;, &#39;name&#39; =&gt; &#39;Italian&#39;, &#39;direction&#39; =&gt; &#39;ltr&#39;), + &#39;ja&#39; =&gt; array(&#39;q&#39; =&gt; 0.","contentSnippet":"Admin → Site の Default language を日本語にするだけではログイン画面は日本語になりませんでした。ブラウザ側の言語設定によるそうですが、少なくとも Firefox-3.5.8 は日本語になりませんでした。language.php を修正します。すぐにログイン画面が日本語になります。--- orig/statusnet-0.9.1/lib/language.php\t2010-03-29 00:39:56.000000000 +0900 +++ statusnet-0.9.1/lib/language.php\t2010-04-12 13:20:56.000000000 +0900 @@ -307,6 +307,7 @@ 'ia' => array('q' => 0.8, 'lang' => 'ia', 'name' => 'Interlingua', 'direction' => 'ltr'), 'is' => array('q' => 0.1, 'lang' => 'is', 'name' => 'Icelandic', 'direction' => 'ltr'), 'it' => array('q' => 1, 'lang' => 'it', 'name' => 'Italian', 'direction' => 'ltr'), + 'ja' => array('q' => 0.","link":"https://masutaka.net/2010-04-18-2/","isoDate":"2010-04-18T01:00:00.000Z","dateMiliSeconds":1271552400000,"authorName":"masutaka"},{"title":"StatusNet の構築","content":"[2010-04-11-1] の補完。\nDebian squeeze でのイントラネット版 Twitter「StatusNet」の構築方法\nをまとめます。\n構築の前に StatusNet は PHP で書かれているので、以下のような基本的な PHP スク\nリプトが Web サーバ上で動くことを確認しておきます。\n&lt;?php phpinfo(); ?&gt; 構築手順 ※ &ldquo;#&rdquo; は root での作業、&quot;%&quot; は一般ユーザでの作業です。\n1. http://status.net/ から tar ball を落とし、/var/www に展開します。 # cd /var/www # tar xzf statusnet-0.9.1.tar.gz 2. リネームします。 # mv statusnet-0.9.1 statusnet 3. アクセス権を適切に設定します。 # cd statusnet # chown -R root:root . # chown www-data:www-data . avatar background file 4. MySQL の DB を作成します。 % mysql -u root -p Enter password: Welcome to the MySQL monitor.","contentSnippet":"[2010-04-11-1] の補完。Debian squeeze でのイントラネット版 Twitter「StatusNet」の構築方法をまとめます。構築の前に StatusNet は PHP で書かれているので、以下のような基本的な PHP スクリプトが Web サーバ上で動くことを確認しておきます。<?php phpinfo(); ?> 構築手順 ※ “#” は root での作業、\"%\" は一般ユーザでの作業です。1. http://status.net/ から tar ball を落とし、/var/www に展開します。 # cd /var/www # tar xzf statusnet-0.9.1.tar.gz 2. リネームします。 # mv statusnet-0.9.1 statusnet 3. アクセス権を適切に設定します。 # cd statusnet # chown -R root:root . # chown www-data:www-data . avatar background file 4. MySQL の DB を作成します。 % mysql -u root -p Enter password: Welcome to the MySQL monitor.","link":"https://masutaka.net/2010-04-18-1/","isoDate":"2010-04-18T00:00:00.000Z","dateMiliSeconds":1271548800000,"authorName":"masutaka"},{"title":"Debian squeeze での mod_rewrite 有効方法","content":"http://localhost/hoge/ で .htaccess から mod_rewrite を使う方法。\nroot になって a2enmod で有効にする。\n# a2enmod rewrite これだけで使えない場合は、.htaccess の読み込みが許可されていない場\n合が多い。というか私がそうだった。\n/etc/apache2/sites-available/default を以下のように修正。\n修正前\n&lt;Directory /var/www/&gt; Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny allow from all &lt;/Directory&gt; 修正後\n&lt;Directory /var/www/&gt; Options Indexes FollowSymLinks MultiViews AllowOverride FileInfo Options Order allow,deny allow from all &lt;/Directory&gt; .htaccess が読み込まれているか否かは、必ずエラーが発生する内容にし\nて試せば良いと思う。\nmod_rewrite とは関係なくなってしまうが、.htaccess の以下のような\nOrder を許可するには AllowOverride の行に Limit を続けて書けば良い。\n&lt;FilesMatch &#34;\\.(ini)&#34;&gt; Order allow,deny &lt;/FilesMatch&gt; 参考情報: AllowOverride ディレクティブ - Apache コア機能 ","contentSnippet":"http://localhost/hoge/ で .htaccess から mod_rewrite を使う方法。root になって a2enmod で有効にする。# a2enmod rewrite これだけで使えない場合は、.htaccess の読み込みが許可されていない場合が多い。というか私がそうだった。/etc/apache2/sites-available/default を以下のように修正。修正前<Directory /var/www/> Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny allow from all </Directory> 修正後<Directory /var/www/> Options Indexes FollowSymLinks MultiViews AllowOverride FileInfo Options Order allow,deny allow from all </Directory> .htaccess が読み込まれているか否かは、必ずエラーが発生する内容にして試せば良いと思う。mod_rewrite とは関係なくなってしまうが、.htaccess の以下のようなOrder を許可するには AllowOverride の行に Limit を続けて書けば良い。<FilesMatch \"\\.(ini)\"> Order allow,deny </FilesMatch> 参考情報: AllowOverride ディレクティブ - Apache コア機能","link":"https://masutaka.net/2010-04-13-1/","isoDate":"2010-04-13T00:00:00.000Z","dateMiliSeconds":1271116800000,"authorName":"masutaka"},{"title":"「しゃべる」と「StatusNet」を比較した","content":"某所で「社内マイクロブログ しゃべる 」をテスト稼働していますが、不満\nな点があるので @fortunan オススメの「StatusNet 」を試してみました。\nどちらもいわゆるイントラネット版 Twitter です。\nまずは両者の比較です。\n    しゃべる StatusNet     言語 Java PHP   データベース しゃべる付属の MySQL MySQL or pgsql   インストール パッケージ(msi,rpm,deb)から tar ball を展開し、Web サーバ上で動作させる   ユーザ登録 管理者権限で作成 ユーザ権限でも作成可(※1)   まとめてユーザ登録 csv からインポート可能 ユーザが自由に作れるので、実質必要なし   言語対応 日本語のみサポート 多言語サポート   検索 出来ない(※2) 出来るが、日本語検索がやや怪しい   ReTweet 非サポート 公式 RT が出来る   ハッシュタグ 非サポート サポート   開発状況 2009.","contentSnippet":"某所で「社内マイクロブログ しゃべる 」をテスト稼働していますが、不満な点があるので @fortunan オススメの「StatusNet 」を試してみました。どちらもいわゆるイントラネット版 Twitter です。まずは両者の比較です。    しゃべる StatusNet     言語 Java PHP   データベース しゃべる付属の MySQL MySQL or pgsql   インストール パッケージ(msi,rpm,deb)から tar ball を展開し、Web サーバ上で動作させる   ユーザ登録 管理者権限で作成 ユーザ権限でも作成可(※1)   まとめてユーザ登録 csv からインポート可能 ユーザが自由に作れるので、実質必要なし   言語対応 日本語のみサポート 多言語サポート   検索 出来ない(※2) 出来るが、日本語検索がやや怪しい   ReTweet 非サポート 公式 RT が出来る   ハッシュタグ 非サポート サポート   開発状況 2009.","link":"https://masutaka.net/2010-04-11-1/","isoDate":"2010-04-11T00:00:00.000Z","dateMiliSeconds":1270944000000,"authorName":"masutaka"},{"title":"C でクロージャ","content":"gcc 拡張を使うと、関数の中に関数を定義することができる。これを利用する\nと C でもクロージャが使えることを少し前に知ったが、\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ようやく理解できた&hellip;気がする。\nクロージャとは C 言語のコールバック関数に近いが、引数以外の変数を自身が定義された静的\nスコープで解決することが最大の特徴。\n&hellip;だと理解しています。^^;\nコーディング例 #include &lt;stdio.h&gt; /* 任意の関数 func を n 回実行するだけのライブラリ関数 */ void dolist(void (*func)(void), int n) { int i; for(i = 0; i &lt; n; i++) { func(); } return; } int main(void) { int level = 0; void lambda(void) { level++; } printf(&#34;%d\\n&#34;, level); dolist(lambda, 1); printf(&#34;%d\\n&#34;, level); dolist(lambda, 2); printf(&#34;%d\\n&#34;, level); dolist(lambda, 3); printf(&#34;%d\\n&#34;, level); return 0; } 結果  0","contentSnippet":"gcc 拡張を使うと、関数の中に関数を定義することができる。これを利用すると C でもクロージャが使えることを少し前に知ったが、loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ようやく理解できた…気がする。クロージャとは C 言語のコールバック関数に近いが、引数以外の変数を自身が定義された静的スコープで解決することが最大の特徴。…だと理解しています。^^;コーディング例 #include <stdio.h> /* 任意の関数 func を n 回実行するだけのライブラリ関数 */ void dolist(void (*func)(void), int n) { int i; for(i = 0; i < n; i++) { func(); } return; } int main(void) { int level = 0; void lambda(void) { level++; } printf(\"%d\\n\", level); dolist(lambda, 1); printf(\"%d\\n\", level); dolist(lambda, 2); printf(\"%d\\n\", level); dolist(lambda, 3); printf(\"%d\\n\", level); return 0; } 結果  0","link":"https://masutaka.net/2010-03-30-1/","isoDate":"2010-03-30T00:00:00.000Z","dateMiliSeconds":1269907200000,"authorName":"masutaka"},{"title":"『池袋ウエストゲートパーク』を読んだ","content":"@kanatinxx から借りた。\n最初のドーベルマンのエピソードで引いた。。こういうアングラな話は、\n読んでてお腹いっぱいになるなあ。","contentSnippet":"@kanatinxx から借りた。最初のドーベルマンのエピソードで引いた。。こういうアングラな話は、読んでてお腹いっぱいになるなあ。","link":"https://masutaka.net/2010-03-22-1/","isoDate":"2010-03-22T00:00:00.000Z","dateMiliSeconds":1269216000000,"authorName":"masutaka"},{"title":"『東京奇譚集』を読んだ","content":"『回転木馬のデッド・ヒート』の次に読んだのは正解だった。こちらはよ\nり小説に近くなっている。「偶然の旅人」「ハナレイ・ベイ」のもの悲し\nさが好き。「どこであれそれが見つかりそうな場所で」これは氏の他の小\n説と比べて意外な展開で楽しめた。","contentSnippet":"『回転木馬のデッド・ヒート』の次に読んだのは正解だった。こちらはより小説に近くなっている。「偶然の旅人」「ハナレイ・ベイ」のもの悲しさが好き。「どこであれそれが見つかりそうな場所で」これは氏の他の小説と比べて意外な展開で楽しめた。","link":"https://masutaka.net/2010-03-17-2/","isoDate":"2010-03-17T01:00:00.000Z","dateMiliSeconds":1268787600000,"authorName":"masutaka"},{"title":"『回転木馬のデッド・ヒート』を読んだ","content":"登場人物をリセットしながら読むのが苦手なので短編はあまり読まないけ\nど、これは読みやすかった。インタビューに近い構成を取っているためだ\nと思う。ただ、聞いたそのままを文章にしているわけではない。「昼飯に\nハムとキュウリのサンドイッチを作って食べ、ビールを一缶飲んだ。」こ\nのあたりは間違いなく村上アレンジ。","contentSnippet":"登場人物をリセットしながら読むのが苦手なので短編はあまり読まないけど、これは読みやすかった。インタビューに近い構成を取っているためだと思う。ただ、聞いたそのままを文章にしているわけではない。「昼飯にハムとキュウリのサンドイッチを作って食べ、ビールを一缶飲んだ。」このあたりは間違いなく村上アレンジ。","link":"https://masutaka.net/2010-03-17-1/","isoDate":"2010-03-17T00:00:00.000Z","dateMiliSeconds":1268784000000,"authorName":"masutaka"},{"title":"Emacs で現在の日時付きの名前でバックアップしてからセーブする","content":"例えば「昨日まで書いてあったんだけど、もうあの内容は消しちゃったな\nあ」ということは良くあると思います。\nずいぶん前から「現在の日時付きの名前で ~/.trash にバックアップして\nから、セーブする関数」を使っています。結構便利です。ファイルは無限\nに増えるので、cron 等で削除して下さい。\n(defvar renban-copy-directory &#34;~/.trash&#34; &#34;The directory for renban-copy.&#34;) (defvar renban-copy-upper-limit-size (* 512 1024) &#34;The upper limit of the file size for renban-copy.&#34;)  (defun renban-copy ()  &#34;現在のバッファに対応するファイルを filename.year-date-time という 書式で `renban-copy-directory&#39; にコピーします。 `renban-copy-upper-limit-size&#39; より大きなサイズのファイルはコピー しません。&#34;  (unless renban-copy-directory  (error &#34;%s is nil.&#34; (symbol-name &#39;renban-copy-directory)))  (let ((srcname buffer-file-name) \t(dir (expand-file-name renban-copy-directory)) \t(dir-mode #o2700) \tdstname)  (when (and srcname \t(file-exists-p srcname) \t(buffer-modified-p) \t(&lt;= (nth 7 (file-attributes srcname)) \trenban-copy-upper-limit-size))  (unless (file-exists-p dir) \t(make-directory dir t))  (unless (eq dir-mode (file-modes dir)) \t(set-file-modes dir dir-mode))  (setq dstname \t(expand-file-name \t(concat \t(file-name-nondirectory srcname) \t&#34;.","contentSnippet":"例えば「昨日まで書いてあったんだけど、もうあの内容は消しちゃったなあ」ということは良くあると思います。ずいぶん前から「現在の日時付きの名前で ~/.trash にバックアップしてから、セーブする関数」を使っています。結構便利です。ファイルは無限に増えるので、cron 等で削除して下さい。(defvar renban-copy-directory \"~/.trash\" \"The directory for renban-copy.\") (defvar renban-copy-upper-limit-size (* 512 1024) \"The upper limit of the file size for renban-copy.\")  (defun renban-copy ()  \"現在のバッファに対応するファイルを filename.year-date-time という 書式で `renban-copy-directory' にコピーします。 `renban-copy-upper-limit-size' より大きなサイズのファイルはコピー しません。\"  (unless renban-copy-directory  (error \"%s is nil.\" (symbol-name 'renban-copy-directory)))  (let ((srcname buffer-file-name) \t(dir (expand-file-name renban-copy-directory)) \t(dir-mode #o2700) \tdstname)  (when (and srcname \t(file-exists-p srcname) \t(buffer-modified-p) \t(<= (nth 7 (file-attributes srcname)) \trenban-copy-upper-limit-size))  (unless (file-exists-p dir) \t(make-directory dir t))  (unless (eq dir-mode (file-modes dir)) \t(set-file-modes dir dir-mode))  (setq dstname \t(expand-file-name \t(concat \t(file-name-nondirectory srcname) \t\".","link":"https://masutaka.net/2010-03-13-2/","isoDate":"2010-03-13T01:00:00.000Z","dateMiliSeconds":1268442000000,"authorName":"masutaka"},{"title":"ver22 までの Emacs で、物理行単位にカーソル移動する方法","content":"[2009-01-20-1] の補完。\nver22 までの Emacs のカーソル移動は論理行単位なので、こんなのを使っ\nてます。時々移動がミスりますが、そこはご愛嬌ということで。\n(defvar vz-goal-column 0 &#34;Vz風ゴールカラム&#34;)  (defvar vz-enable-p t &#34;*Enable the physical moving.&#34;)  (defun toggle-variable (var)  &#34;Toggle &#39;(symbol-value var)&#39;.&#34;  (set var (not (symbol-value var)))  (message &#34;&#39;%s&#39; is now &#39;%s&#39;&#34; \t(symbol-name var) (symbol-value var)))  (defun vz-toggle-vz-enable-p ()  &#34;Toggle &#39;vz-enable-p&#39;.&#34;  (interactive)  (toggle-variable &#39;vz-enable-p))  (defun vz-next-line (num)  &#34;Vz:↓&#34;  (interactive &#34;p&#34;)  (if (or (not vz-enable-p) truncate-lines)  (next-line num)  (or (eq last-command &#39;vz-next-line) \t(setq vz-goal-column (% (current-column) (1- (window-width)))))  (if (eolp) \t(progn \t(forward-char 1) \t(move-to-column vz-goal-column))  (vertical-motion num)  (move-to-column (+ vz-goal-column (current-column))))))  (defun vz-previous-line (num)  &#34;Vz:↑&#34;  (interactive &#34;p&#34;)  (if (not vz-enable-p)  (previous-line num)  (if truncate-lines \t(previous-line num)  (or (eq last-command &#39;vz-next-line) \t(setq vz-goal-column (% (current-column) (1- (window-width)))))  (let ((ncol (- vz-goal-column (window-width) -1))) \t(vertical-motion (- num)) \t(if (&lt;= 0 ncol) \t(move-to-column ncol) \t(move-to-column (+ vz-goal-column (current-column))))))  (setq this-command &#39;vz-next-line))) ;fake 情報源:","contentSnippet":"[2009-01-20-1] の補完。ver22 までの Emacs のカーソル移動は論理行単位なので、こんなのを使ってます。時々移動がミスりますが、そこはご愛嬌ということで。(defvar vz-goal-column 0 \"Vz風ゴールカラム\")  (defvar vz-enable-p t \"*Enable the physical moving.\")  (defun toggle-variable (var)  \"Toggle '(symbol-value var)'.\"  (set var (not (symbol-value var)))  (message \"'%s' is now '%s'\" \t(symbol-name var) (symbol-value var)))  (defun vz-toggle-vz-enable-p ()  \"Toggle 'vz-enable-p'.\"  (interactive)  (toggle-variable 'vz-enable-p))  (defun vz-next-line (num)  \"Vz:↓\"  (interactive \"p\")  (if (or (not vz-enable-p) truncate-lines)  (next-line num)  (or (eq last-command 'vz-next-line) \t(setq vz-goal-column (% (current-column) (1- (window-width)))))  (if (eolp) \t(progn \t(forward-char 1) \t(move-to-column vz-goal-column))  (vertical-motion num)  (move-to-column (+ vz-goal-column (current-column))))))  (defun vz-previous-line (num)  \"Vz:↑\"  (interactive \"p\")  (if (not vz-enable-p)  (previous-line num)  (if truncate-lines \t(previous-line num)  (or (eq last-command 'vz-next-line) \t(setq vz-goal-column (% (current-column) (1- (window-width)))))  (let ((ncol (- vz-goal-column (window-width) -1))) \t(vertical-motion (- num)) \t(if (<= 0 ncol) \t(move-to-column ncol) \t(move-to-column (+ vz-goal-column (current-column))))))  (setq this-command 'vz-next-line))) ;fake 情報源:","link":"https://masutaka.net/2010-03-13-1/","isoDate":"2010-03-13T00:00:00.000Z","dateMiliSeconds":1268438400000,"authorName":"masutaka"},{"title":"『幽霊人命救助隊』を読んだ","content":"[2009-09-19-1] 購入。職場の上司が勧めてくれた本。鬱や自殺について考\nえるには良い本。ユーモアもある。ただ、前半のテンポは私には悪く感じ\nた。普段長編ばかり読むので、このオムニバス風の話に慣れていないのも\nあると思うが。４人のメガホンは読者に向けられていたんだと、最後の方\nになって気づいた。作者はとにかく死ぬな死ぬなと、読者にメッセージを\n出しつづけている。「未来が定まっていない以上、すべての絶望は勘違い\nである」これは確かに名言。","contentSnippet":"[2009-09-19-1] 購入。職場の上司が勧めてくれた本。鬱や自殺について考えるには良い本。ユーモアもある。ただ、前半のテンポは私には悪く感じた。普段長編ばかり読むので、このオムニバス風の話に慣れていないのもあると思うが。４人のメガホンは読者に向けられていたんだと、最後の方になって気づいた。作者はとにかく死ぬな死ぬなと、読者にメッセージを出しつづけている。「未来が定まっていない以上、すべての絶望は勘違いである」これは確かに名言。","link":"https://masutaka.net/2010-03-07-1/","isoDate":"2010-03-07T00:00:00.000Z","dateMiliSeconds":1267920000000,"authorName":"masutaka"},{"title":"IP 電話への移行を検討しました","content":"今ある固定電話は大学に入ったときに契約したのですが、ほとんど使うこ\nとはありません。にも関わらず毎月￥1,800も払うのは無駄だと思ったので、\nIP 電話への以降を検討しました。\n加入することになるサービス 私は @nifty ひかり One T シリーズ に加入していました。(今見たら、\n2011 年 9 月でサービス終了って書いてある&hellip;。)\nひかり One T シリーズの場合、@niftyフォン-C に加入することになるら\nしいです。\nお得な料金 月額料金は @niftyフォン-C の方が安いです。\n    月額料金 機器レンタル料金     NTT 1740円 0円   @niftyフォン-C 0円 525円    川崎〜浜松間の通話料金も、@niftyフォン-C の方が安いです。IP 電話に\nすると、かける側もかけられる側も安くなるのですね。\n    平日 19:00〜23:00 の浜松への通話 平日 19:00〜23:00 の浜松からの通話     NTT 73.5円 &lt;26秒&gt; 73.5円 &lt;26秒&gt;   @niftyフォン-C 8.","contentSnippet":"今ある固定電話は大学に入ったときに契約したのですが、ほとんど使うことはありません。にも関わらず毎月￥1,800も払うのは無駄だと思ったので、IP 電話への以降を検討しました。加入することになるサービス 私は @nifty ひかり One T シリーズ に加入していました。(今見たら、2011 年 9 月でサービス終了って書いてある…。)ひかり One T シリーズの場合、@niftyフォン-C に加入することになるらしいです。お得な料金 月額料金は @niftyフォン-C の方が安いです。    月額料金 機器レンタル料金     NTT 1740円 0円   @niftyフォン-C 0円 525円    川崎〜浜松間の通話料金も、@niftyフォン-C の方が安いです。IP 電話にすると、かける側もかけられる側も安くなるのですね。    平日 19:00〜23:00 の浜松への通話 平日 19:00〜23:00 の浜松からの通話     NTT 73.5円 <26秒> 73.5円 <26秒>   @niftyフォン-C 8.","link":"https://masutaka.net/2010-03-06-1/","isoDate":"2010-03-06T00:00:00.000Z","dateMiliSeconds":1267833600000,"authorName":"masutaka"},{"title":"加湿空気清浄機を買いました","content":"[2009-11-03-1] で発生したエコポイントを JCB ギフトカードと交換した\nので、空気清浄機を買うことにしました。\n今回もあまり下調べはしませんでした。\nたつをさんの記事を鵜呑みにして、SHARP の加湿空気清浄機を買いました。\n[を] シャープの加湿空気清浄機を導入しました SHARP KIREION 加湿空気清浄機 高濃度7000プラズマクラスター技術\t加湿13畳/空清21畳 ホワイト系 KC-Y45-W  他のメーカーと比べて、SHARP はデザインが良いですね。\n今まで加湿したい時は洗濯物を干していましたが、これからはお手軽に加\n湿出来そうです。\n元々空気が汚い部屋ではなかったようで、空気清浄の効果は良く分かりま\nせん。しかし、買った翌日から朝の目覚めが良くなりました。深く眠れる\nようになったのかもしれません。","contentSnippet":"[2009-11-03-1] で発生したエコポイントを JCB ギフトカードと交換したので、空気清浄機を買うことにしました。今回もあまり下調べはしませんでした。たつをさんの記事を鵜呑みにして、SHARP の加湿空気清浄機を買いました。[を] シャープの加湿空気清浄機を導入しました SHARP KIREION 加湿空気清浄機 高濃度7000プラズマクラスター技術\t加湿13畳/空清21畳 ホワイト系 KC-Y45-W  他のメーカーと比べて、SHARP はデザインが良いですね。今まで加湿したい時は洗濯物を干していましたが、これからはお手軽に加湿出来そうです。元々空気が汚い部屋ではなかったようで、空気清浄の効果は良く分かりません。しかし、買った翌日から朝の目覚めが良くなりました。深く眠れるようになったのかもしれません。","link":"https://masutaka.net/2010-03-03-1/","isoDate":"2010-03-03T00:00:00.000Z","dateMiliSeconds":1267574400000,"authorName":"masutaka"},{"title":"ATOK スペシャルサンクスの表示方法","content":"以下の操作で、ATOK のベータテストに協力した人リストが見られます。\n先日発売された ATOK2010 で表示できました。\n ATOKパレットを右クリックします。\n2)［ヘルプ(H)−バージョン情報(A)］をクリックします。バージョン情報\nダイアログボックスが表示されます。 画面左上のATOKアイコンを［Ctrl］キーを押しながら、ダブルクリック\nします。\n→ATOK スペシャルサンクス画面が表示されます。  ","contentSnippet":"以下の操作で、ATOK のベータテストに協力した人リストが見られます。先日発売された ATOK2010 で表示できました。 ATOKパレットを右クリックします。2)［ヘルプ(H)−バージョン情報(A)］をクリックします。バージョン情報ダイアログボックスが表示されます。 画面左上のATOKアイコンを［Ctrl］キーを押しながら、ダブルクリックします。→ATOK スペシャルサンクス画面が表示されます。","link":"https://masutaka.net/2010-02-06-1/","isoDate":"2010-02-06T00:00:00.000Z","dateMiliSeconds":1265414400000,"authorName":"masutaka"},{"title":"gpg で暗号化されたファイルを Emacs で開いてもパスフレーズを聞かれない方法","content":"Mew スレで紹介されていた ので、メモメモ。\nいつからなのか分かりませんが、少なくとも Emacs23 では gpg で暗号化\nされたファイルを開くとパスフレーズを聞かれ、gpg コマンドを打たずし\nてファイルを開くことが出来ます。ファイル保存時には、パスフレーズを\nまた聞かれます。また入力します。\nそう、ファイルを保存する時にも聞かれてしまうんです。\n一方、外部パッケージに、alpaca.el というものがあります。これは保存\n時にはパスフレーズを聞かない優れものです。\nしかし、Emacs23 で alpaca.el を使うと、gpg なファイルを開く時に\n2 回パスフレーズを聞かれてしまいます。そういうわけで alpaca.el は\nしばらく使っていませんでした。\nこの度、やっと Emacs 標準の機能の OFF のやり方が分かりました。.emacs\nに以下を書くだけです。\n(epa-file-disable) interactive な関数なので、M-x で呼ぶことも出来ます。\n当然というかなんというか、epa-file-enable() もありました。\n先行者がいらっしゃいました&hellip;。\nepa(EasyPG Assistant)を無効にする方法 - koie blog ","contentSnippet":"Mew スレで紹介されていた ので、メモメモ。いつからなのか分かりませんが、少なくとも Emacs23 では gpg で暗号化されたファイルを開くとパスフレーズを聞かれ、gpg コマンドを打たずしてファイルを開くことが出来ます。ファイル保存時には、パスフレーズをまた聞かれます。また入力します。そう、ファイルを保存する時にも聞かれてしまうんです。一方、外部パッケージに、alpaca.el というものがあります。これは保存時にはパスフレーズを聞かない優れものです。しかし、Emacs23 で alpaca.el を使うと、gpg なファイルを開く時に2 回パスフレーズを聞かれてしまいます。そういうわけで alpaca.el はしばらく使っていませんでした。この度、やっと Emacs 標準の機能の OFF のやり方が分かりました。.emacsに以下を書くだけです。(epa-file-disable) interactive な関数なので、M-x で呼ぶことも出来ます。当然というかなんというか、epa-file-enable() もありました。先行者がいらっしゃいました…。epa(EasyPG Assistant)を無効にする方法 - koie blog","link":"https://masutaka.net/2010-02-04-1/","isoDate":"2010-02-04T00:00:00.000Z","dateMiliSeconds":1265241600000,"authorName":"masutaka"},{"title":"『ファイナルファンタジーXIII アルティマニア』を読んだ","content":"Amazon でつい、ポチッとしてしまいました。。。","contentSnippet":"Amazon でつい、ポチッとしてしまいました。。。","link":"https://masutaka.net/2010-01-31-1/","isoDate":"2010-01-31T00:00:00.000Z","dateMiliSeconds":1264896000000,"authorName":"masutaka"},{"title":"Emacs のソースコードを Bazaar から取得してみた","content":"[2009-09-27-1] の補完。\nEmacs リポジトリが Git に移行したと思っていましたが、Git でも 取\n得できるようになっていただけなのですね。年末に CVS から Bazaar に移\n行したらしい ので、手元のリポジトリも移行しました。Bazaar は Git と\n同じ分散型バージョン管理システムだそうです。\nDebian では bzr をインストールすると、Bazaar が使えるようになります。\n 最初にユーザ登録する必要があるそうです。  % bzr whoami &#34;Takashi Masuda &lt;masutaka.net@gmail.com&gt;&#34; Bazaar チェックアウト用のディレクトリ emacs を作成します。  % bzr init-repo --2a emacs チェックアウトします。私の環境では 30 分くらいかかりました。  % cd emacs % bzr checkout http://bzr.savannah.gnu.org/r/emacs/trunk trunk Bazaar については全然調べていないのでアレですが、とりあえず\n&ldquo;bzr update&rdquo; すればリポジトリ先端のソースを取得できるようです。\n参考 URL\nEmacs のリポジトリが Bazaar に移行したので Bazaar をインストールする。 - 日々、とんは語る。 EmacsWiki: Bzr For Emacs Devs ","contentSnippet":"[2009-09-27-1] の補完。Emacs リポジトリが Git に移行したと思っていましたが、Git でも 取得できるようになっていただけなのですね。年末に CVS から Bazaar に移行したらしい ので、手元のリポジトリも移行しました。Bazaar は Git と同じ分散型バージョン管理システムだそうです。Debian では bzr をインストールすると、Bazaar が使えるようになります。 最初にユーザ登録する必要があるそうです。  % bzr whoami \"Takashi Masuda <masutaka.net@gmail.com>\" Bazaar チェックアウト用のディレクトリ emacs を作成します。  % bzr init-repo --2a emacs チェックアウトします。私の環境では 30 分くらいかかりました。  % cd emacs % bzr checkout http://bzr.savannah.gnu.org/r/emacs/trunk trunk Bazaar については全然調べていないのでアレですが、とりあえず“bzr update” すればリポジトリ先端のソースを取得できるようです。参考 URLEmacs のリポジトリが Bazaar に移行したので Bazaar をインストールする。 - 日々、とんは語る。 EmacsWiki: Bzr For Emacs Devs","link":"https://masutaka.net/2010-01-17-1/","isoDate":"2010-01-17T00:00:00.000Z","dateMiliSeconds":1263686400000,"authorName":"masutaka"},{"title":"KeySnail で IME を ON/OFF する方法","content":"私は Windows でのキーバインドを Emacs 風にするために XKeymacs を使っ\nています。IME の ON/OFF は Alt-l(エル) という変則的なものにしています。\nFirefox で KeySnail を使おうとすると、XKeymacs を OFF にする必要が\nありますが、KeySnail にはデフォルトで IME を ON/OFF するコマンドは\n用意されていません。\nそういう理由から、Windows 版の Firefox では KeySnail を使っていなかっ\nたのですが、Twitter でつぶやいたら作者さんから以下のコードを教えて\nもらいました。\nkey.setEditKey(&#34;M-l&#34;, function (ev, arg) { let elem = ev.originalTarget; elem.style.imeMode = { active : &#34;inactive&#34;, inactive : &#34;active&#34; }[elem.style.imeMode] || &#34;active&#34;; elem.blur(); elem.focus(); }, &#34;Toggle IME&#34;, true); .keysnail.js に記載し、再読み込みしたら Alt-l で IME の ON/OFF が出来","contentSnippet":"私は Windows でのキーバインドを Emacs 風にするために XKeymacs を使っています。IME の ON/OFF は Alt-l(エル) という変則的なものにしています。Firefox で KeySnail を使おうとすると、XKeymacs を OFF にする必要がありますが、KeySnail にはデフォルトで IME を ON/OFF するコマンドは用意されていません。そういう理由から、Windows 版の Firefox では KeySnail を使っていなかったのですが、Twitter でつぶやいたら作者さんから以下のコードを教えてもらいました。key.setEditKey(\"M-l\", function (ev, arg) { let elem = ev.originalTarget; elem.style.imeMode = { active : \"inactive\", inactive : \"active\" }[elem.style.imeMode] || \"active\"; elem.blur(); elem.focus(); }, \"Toggle IME\", true); .keysnail.js に記載し、再読み込みしたら Alt-l で IME の ON/OFF が出来","link":"https://masutaka.net/2010-01-11-1/","isoDate":"2010-01-11T00:00:00.000Z","dateMiliSeconds":1263168000000,"authorName":"masutaka"},{"title":"『白夜行』を読んだ","content":"@kanatinxx から借りた。\nおもしろかった。ただ最後はちょっと雑だったかな。","contentSnippet":"@kanatinxx から借りた。おもしろかった。ただ最後はちょっと雑だったかな。","link":"https://masutaka.net/2010-01-02-1/","isoDate":"2010-01-02T00:00:00.000Z","dateMiliSeconds":1262390400000,"authorName":"masutaka"},{"title":"flv から音声を抜き出す方法","content":"Flash Video から音声を抽出して、mp3 にする方法です。\nffmpeg がインストールされていなかったら、Synaptic パッケージマネー\nジャや、aptitude でインストールします。\nあとは以下のコマンドを実行するだけです。hoge.flv の音声が hoge.mp3\nとして抽出されます。\n% ffmpeg -i hoge.flv -acodec copy hoge.mp3 ↓これを抽出したかったんです。(^^)\n 【作業用BGM】FFⅠ～Ⅵノンストップバトルアレンジメドレー 参考 URL: Linuxでflvからmp3へ変換する方法 - よしみ視点 関連記事: swf から音声を抜き出す方法 [2009-07-10-2] ","contentSnippet":"Flash Video から音声を抽出して、mp3 にする方法です。ffmpeg がインストールされていなかったら、Synaptic パッケージマネージャや、aptitude でインストールします。あとは以下のコマンドを実行するだけです。hoge.flv の音声が hoge.mp3として抽出されます。% ffmpeg -i hoge.flv -acodec copy hoge.mp3 ↓これを抽出したかったんです。(^^) 【作業用BGM】FFⅠ～Ⅵノンストップバトルアレンジメドレー 参考 URL: Linuxでflvからmp3へ変換する方法 - よしみ視点 関連記事: swf から音声を抜き出す方法 [2009-07-10-2]","link":"https://masutaka.net/2009-12-20-1/","isoDate":"2009-12-20T00:00:00.000Z","dateMiliSeconds":1261267200000,"authorName":"masutaka"},{"title":"タイムスタンプを変えずに文字コードを変換する方法","content":"必要になって調べたので、メモメモ。\n以下の例では、hoge.txt のタイムスタンプを変えずに UTF-8 に変換している。\n#!/bin/sh FILE=hoge.txt TIMESTAMP=`ls -d -l --time-style=full-iso $FILE | awk &#39;{print $6 &#34; &#34; $7 }&#39;` echo $FILE mv $FILE ${FILE}.bak nkf -w ${FILE}.bak &gt; $FILE rm ${FILE}.bak touch -d &#34;$TIMESTAMP&#34; $FILE ","contentSnippet":"必要になって調べたので、メモメモ。以下の例では、hoge.txt のタイムスタンプを変えずに UTF-8 に変換している。#!/bin/sh FILE=hoge.txt TIMESTAMP=`ls -d -l --time-style=full-iso $FILE | awk '{print $6 \" \" $7 }'` echo $FILE mv $FILE ${FILE}.bak nkf -w ${FILE}.bak > $FILE rm ${FILE}.bak touch -d \"$TIMESTAMP\" $FILE","link":"https://masutaka.net/2009-12-17-1/","isoDate":"2009-12-17T00:00:00.000Z","dateMiliSeconds":1261008000000,"authorName":"masutaka"},{"title":"Subject も本文も存在しないメールはスパムフォルダに振り分け","content":"最近 1 日に 10 通程度、毎回違う From で Subject も本文も存在しない\nスパムが来るのですが、bsfilter で捕捉できません。仕方がないので、そ\nのようなメールは問答無用でスパムフォルダに振り分けることにしました。\n以下が ~/.procmailrc のレシピです。touch しているのは、Mew でスパム\nフォルダを訪問した時に自動でスキャンを走らせるためです。\nPATH=${HOME}/bin:${PATH} MAILDIR=${HOME}/Mail :0 * !^Subject: { :0 HB: * ? mail-body-empty * ? touch ${MAILDIR}/spam/.mew-mtime ${MAILDIR}/spam/. } mail-body-empty は自作の Ruby スクリプトです。~/bin に置きました。\n以下にコピペします。\n#!/usr/bin/ruby  # 標準入力から渡されたメールの本文が空だったら 0、空でなかったら 0 以外を返す。 # メール本文が空行のみ、または空行の連続を「空」と定義する。  mode = :header  STDIN.each do |line|   case mode  when :header  if /^$/ =~ line  mode = :body  end  when :body  unless /^$/ =~ line  exit 1  end  end  end  exit 0  ### End of file 最初は &ldquo;* ?","contentSnippet":"最近 1 日に 10 通程度、毎回違う From で Subject も本文も存在しないスパムが来るのですが、bsfilter で捕捉できません。仕方がないので、そのようなメールは問答無用でスパムフォルダに振り分けることにしました。以下が ~/.procmailrc のレシピです。touch しているのは、Mew でスパムフォルダを訪問した時に自動でスキャンを走らせるためです。PATH=${HOME}/bin:${PATH} MAILDIR=${HOME}/Mail :0 * !^Subject: { :0 HB: * ? mail-body-empty * ? touch ${MAILDIR}/spam/.mew-mtime ${MAILDIR}/spam/. } mail-body-empty は自作の Ruby スクリプトです。~/bin に置きました。以下にコピペします。#!/usr/bin/ruby  # 標準入力から渡されたメールの本文が空だったら 0、空でなかったら 0 以外を返す。 # メール本文が空行のみ、または空行の連続を「空」と定義する。  mode = :header  STDIN.each do |line|   case mode  when :header  if /^$/ =~ line  mode = :body  end  when :body  unless /^$/ =~ line  exit 1  end  end  end  exit 0  ### End of file 最初は “* ?","link":"https://masutaka.net/2009-12-13-1/","isoDate":"2009-12-13T00:00:00.000Z","dateMiliSeconds":1260662400000,"authorName":"masutaka"},{"title":"本を売却","content":"起きていることはすべて正しい—運を戦略的につかむ勝間式4つの技術 断る力 会社に人生を預けるな リスク・リテラシーを磨く 孫子の兵法—ライバルに勝つ知恵と戦略 大人のための「北斗の拳」人物伝 2ちゃんねる宣言—挑発するメディア 以上をブックオフで売ってきました。これで 320 円です。\n前回ブックオフで売ったのは [2009-03-29-1] でした。\nこうして見るとごったまぜですね。\n私の場合、小説以外は躊躇なく売る傾向にあるようです。","contentSnippet":"起きていることはすべて正しい—運を戦略的につかむ勝間式4つの技術 断る力 会社に人生を預けるな リスク・リテラシーを磨く 孫子の兵法—ライバルに勝つ知恵と戦略 大人のための「北斗の拳」人物伝 2ちゃんねる宣言—挑発するメディア 以上をブックオフで売ってきました。これで 320 円です。前回ブックオフで売ったのは [2009-03-29-1] でした。こうして見るとごったまぜですね。私の場合、小説以外は躊躇なく売る傾向にあるようです。","link":"https://masutaka.net/2009-12-06-1/","isoDate":"2009-12-06T00:00:00.000Z","dateMiliSeconds":1260057600000,"authorName":"masutaka"},{"title":"Emacs で登録されている timer の一覧を表示","content":"Emacs スレ で紹介されていたコードを、ここにコピペ。\n(defun describe-timer ()  (interactive)  (let ((tl timer-list)  timer)  (pop-to-buffer (get-buffer-create &#34;*timer*&#34;))  (erase-buffer)  (insert  &#34;TIME FUNCTION\\n&#34;  &#34;-------------- --------------------------\\n&#34;)  (while tl  (setq timer (car tl))  (insert  (concat  (format-time-string &#34;%m/%d %T&#34;  (list (aref timer 1)(aref timer 2)(aref timer 3)))  &#34; &#34;  (symbol-name (aref timer 5))  &#34;\\n&#34;))  (setq tl (cdr tl))))) こんな出力が得られる。\nTIME FUNCTION -------------- -------------------------- 12/05 16:05:00 display-time-event-handler 12/05 16:06:32 mew-passwd-timer 12/05 16:07:43 twittering-timer-action ","contentSnippet":"Emacs スレ で紹介されていたコードを、ここにコピペ。(defun describe-timer ()  (interactive)  (let ((tl timer-list)  timer)  (pop-to-buffer (get-buffer-create \"*timer*\"))  (erase-buffer)  (insert  \"TIME FUNCTION\\n\"  \"-------------- --------------------------\\n\")  (while tl  (setq timer (car tl))  (insert  (concat  (format-time-string \"%m/%d %T\"  (list (aref timer 1)(aref timer 2)(aref timer 3)))  \" \"  (symbol-name (aref timer 5))  \"\\n\"))  (setq tl (cdr tl))))) こんな出力が得られる。TIME FUNCTION -------------- -------------------------- 12/05 16:05:00 display-time-event-handler 12/05 16:06:32 mew-passwd-timer 12/05 16:07:43 twittering-timer-action","link":"https://masutaka.net/2009-12-05-1/","isoDate":"2009-12-05T00:00:00.000Z","dateMiliSeconds":1259971200000,"authorName":"masutaka"},{"title":"『奥州藤原氏物語―黄金文化を創った清衡・基衡・秀衡・泰衡四代がくりひろげる壮大な歴史絵巻』を読んだ","content":"読書メーター で自分が一番乗りだった。ニッチすぎるwww\nDVD と小説、そしてこの本が揃った。うちは奥州に思いを馳せるには申し\n分ない環境だ。","contentSnippet":"読書メーター で自分が一番乗りだった。ニッチすぎるwwwDVD と小説、そしてこの本が揃った。うちは奥州に思いを馳せるには申し分ない環境だ。","link":"https://masutaka.net/2009-11-30-1/","isoDate":"2009-11-30T00:00:00.000Z","dateMiliSeconds":1259539200000,"authorName":"masutaka"},{"title":"Windows の画面がディスプレイからはみ出る件が直った","content":"VAIO W [2009-09-06-1] は画面が狭いので、三菱の 22 インチワイド液晶\n[2009-07-11-1] に繋げて使っています。\nこの液晶は最大 1680x1050 ピクセルなんですが、時々解像度が粗くなって\nWindows が画面に収まりきらなくなることがあります。\n仕方がないので 1280x768 ピクセルまで落として、画面に収まるようにし\nています。ただしこの状態でも、各ピクセルが大きく、例えばフォントは\nかなり粗い状態です。\nLinux (1680x1050) から VNC 越しに見ると 1280x768 の小さな画面がキレ\nイに見えるので、ディスプレイドライバと液晶がきちんとお話しできてい\nないように見えます。\nところが、先ほど\n 画面のリフレッシュレートを 60 ヘルツから 75 ヘルツに上げて、 解像度を 1280x768 から 1680x1050 に上げたら、\n1680x1050 のキレイな画面が現れました。  まったく謎です。。。\n追記(2009-12-02):\nまたおかしくなりました。今度は同じ方法で復旧させようとしても、直り\nません。ビデオドライバとモニタのどっちのバグなんだろう？ OS のバグ\nの可能性もあるのかなあ？\n追記(2010-01-10):\n試しに [2009-11-03-1] に買った液晶テレビに繋げてみたら、1920x1080\nまで表示出来たものの、液晶から Windows の画面がはみ出してしまいまし\nた。ビデオドライバ原因の可能性が高くなって来ました。VAIO のサポート\nに聞いてみようかなあ？","contentSnippet":"VAIO W [2009-09-06-1] は画面が狭いので、三菱の 22 インチワイド液晶[2009-07-11-1] に繋げて使っています。この液晶は最大 1680x1050 ピクセルなんですが、時々解像度が粗くなってWindows が画面に収まりきらなくなることがあります。仕方がないので 1280x768 ピクセルまで落として、画面に収まるようにしています。ただしこの状態でも、各ピクセルが大きく、例えばフォントはかなり粗い状態です。Linux (1680x1050) から VNC 越しに見ると 1280x768 の小さな画面がキレイに見えるので、ディスプレイドライバと液晶がきちんとお話しできていないように見えます。ところが、先ほど 画面のリフレッシュレートを 60 ヘルツから 75 ヘルツに上げて、 解像度を 1280x768 から 1680x1050 に上げたら、1680x1050 のキレイな画面が現れました。  まったく謎です。。。追記(2009-12-02):またおかしくなりました。今度は同じ方法で復旧させようとしても、直りません。ビデオドライバとモニタのどっちのバグなんだろう？ OS のバグの可能性もあるのかなあ？追記(2010-01-10):試しに [2009-11-03-1] に買った液晶テレビに繋げてみたら、1920x1080まで表示出来たものの、液晶から Windows の画面がはみ出してしまいました。ビデオドライバ原因の可能性が高くなって来ました。VAIO のサポートに聞いてみようかなあ？","link":"https://masutaka.net/2009-11-24-1/","isoDate":"2009-11-24T00:00:00.000Z","dateMiliSeconds":1259020800000,"authorName":"masutaka"},{"title":"はてなブックマークのコメントを、アイテム毎のページに表示させた","content":"このブログにはコメント欄があるので、時々コメントを残してもらえるの\nですが、はてなブックマーク(以下、はてブ)にも良いコメントがあります。\nそこで、アイテム毎のページにはてブのコメントを表示させました。今の\nところ、一番多いのは [2009-10-04-1] の 509 です。この時は一日で\n10,000 アクセスもありました。(普段は 100 アクセス程度です。)\n以下、設置手順です。\n1. 「ブログにはてブのコメントを表示するhatana_bookmark_anywhere.js 」\nから、hatena_bookmark_anywhere.js をダウンロードし、\nhttp://masutaka.net/chalow/ に置きました。\n2. アイテムページのテンプレート $item_page_template に、以下を追加\nしました。\n&lt;!-- hatena_bookmark_anywhere.js --&gt; &lt;script type= &#34;text/javascript&#34;&gt;/*&lt;![CDATA[*/ var hatena_bookmark_anywhere_style = false; // trueでデフォルトスタイル falseを設定するとCSSでスタイルの指定が可能 // var hatena_bookmark_anywhere_limit = 10; // 表示する件数 // var hatena_bookmark_anywhere_collapse; // trueにすると、コメントの書いてないブクマを表示しない。指定しない場合は、表示件数を超えた場合のみコメントを表示しない // var hatena_bookmark_anywhere_url; // 表示するURL 未指定の場合、現在のページ /*]]&gt;*/&lt;/script&gt; &lt;script src=&#34;hatena-bookmark-anywhere.js&#34; type=&#34;text/javascript&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt; &lt;div id=&#34;hatena_bookmark_anywhere&#34;&gt;&lt;/div&gt; &lt;!--/ hatena_bookmark_anywhere.js --&gt; 3. 「hatana_bookmark_anywhere.jsの設置方法とカスタマイズ 」を参考に\nしながら、現在使っている kaeru.","contentSnippet":"このブログにはコメント欄があるので、時々コメントを残してもらえるのですが、はてなブックマーク(以下、はてブ)にも良いコメントがあります。そこで、アイテム毎のページにはてブのコメントを表示させました。今のところ、一番多いのは [2009-10-04-1] の 509 です。この時は一日で10,000 アクセスもありました。(普段は 100 アクセス程度です。)以下、設置手順です。1. 「ブログにはてブのコメントを表示するhatana_bookmark_anywhere.js 」から、hatena_bookmark_anywhere.js をダウンロードし、http://masutaka.net/chalow/ に置きました。2. アイテムページのテンプレート $item_page_template に、以下を追加しました。<!-- hatena_bookmark_anywhere.js --> <script type= \"text/javascript\">/*<![CDATA[*/ var hatena_bookmark_anywhere_style = false; // trueでデフォルトスタイル falseを設定するとCSSでスタイルの指定が可能 // var hatena_bookmark_anywhere_limit = 10; // 表示する件数 // var hatena_bookmark_anywhere_collapse; // trueにすると、コメントの書いてないブクマを表示しない。指定しない場合は、表示件数を超えた場合のみコメントを表示しない // var hatena_bookmark_anywhere_url; // 表示するURL 未指定の場合、現在のページ /*]]>*/</script> <script src=\"hatena-bookmark-anywhere.js\" type=\"text/javascript\" charset=\"utf-8\"></script> <div id=\"hatena_bookmark_anywhere\"></div> <!--/ hatena_bookmark_anywhere.js --> 3. 「hatana_bookmark_anywhere.jsの設置方法とカスタマイズ 」を参考にしながら、現在使っている kaeru.","link":"https://masutaka.net/2009-11-22-1/","isoDate":"2009-11-22T00:00:00.000Z","dateMiliSeconds":1258848000000,"authorName":"masutaka"},{"title":"UNIX 時間","content":"業務で C 言語と、シェルコマンド date での UNIX 時間(1970 年 1 月 1\n日 0:00 からの秒数)の取得方法を調べたのだけれど、我らが Emacs Lisp\nを調べていませんでした。\nEmacs Lisp (time-to-seconds (current-time)) で良いようです。\n真夜中ごろ - ポロポロ 業務で調べた UNIX 時間は以下。\nシェルコマンド  % date +%s\n=&gt; 1257925989\n ※ Solaris9 の場合、SUN 謹製の date (/usr/bin/date) ではなく、\nGNU の date (/usr/local/bin/date) を使う必要がある。\nC言語 #include &lt;stdio.h&gt; #include &lt;sys/time.h&gt; /* gettimeofday() */ int main(void) { struct timeval tv; double unix_time; gettimeofday(&amp;tv, NULL); unix_time = tv.tv_sec + (tv.","contentSnippet":"業務で C 言語と、シェルコマンド date での UNIX 時間(1970 年 1 月 1日 0:00 からの秒数)の取得方法を調べたのだけれど、我らが Emacs Lispを調べていませんでした。Emacs Lisp (time-to-seconds (current-time)) で良いようです。真夜中ごろ - ポロポロ 業務で調べた UNIX 時間は以下。シェルコマンド  % date +%s=> 1257925989 ※ Solaris9 の場合、SUN 謹製の date (/usr/bin/date) ではなく、GNU の date (/usr/local/bin/date) を使う必要がある。C言語 #include <stdio.h> #include <sys/time.h> /* gettimeofday() */ int main(void) { struct timeval tv; double unix_time; gettimeofday(&tv, NULL); unix_time = tv.tv_sec + (tv.","link":"https://masutaka.net/2009-11-21-1/","isoDate":"2009-11-21T00:00:00.000Z","dateMiliSeconds":1258761600000,"authorName":"masutaka"},{"title":"昨日の買い物","content":"SHARP 32 型 AQUOS 地上デジタルハイビジョン液晶テレビ  アナログテレビとともにアナログマの最後を看取る予定でしたが、PS3 の\nゲーム中の文字が滲んでよく見えないという理由だけで、あっさり買いか\nえてしまいました。\n昨日の 18:00 に会社を出て、19:30 に購入して、今日の 9:00 過ぎにうち\nに届きました。なんというハイスピード。\n今まで 21 インチのアナログテレビでしたが、32 インチにしたのは正解で\nした。37 インチを買わなくてよかった&hellip;。\n今回購入したヨドバシでの価格は ￥137,800 でした。Amazon の値段を見\nると最安値が ￥99,800 で、ちょwww って感じですが、\n|本体(￥137,800) - ヨドバシポイント(￥24,846) - エコポイント(￥15,000) = ￥97,954\nなので、実は妥当だと思いたいです&hellip;。\nさっそく地デジの設定をしましたが、簡単でした。薄々気づいていました\nが、壁のテレビ端子がそのまま使えるのですね。←何も調べずに買った人\nこの互換性はすごいのでは..。\n肝心の PS3 は、特に文字がはっきり見えるようになりました。コンポーネ\nントケーブルを HDMI ケーブルに変えれば、もっと綺麗になるのでしょう。\n→ 綺麗になりました！！\nキーボード  DELL キーボードの接続が時々切れるようになってしまいました。(注: 有\n線キーボードです。)\n再現性はバラバラですが、OS 起動時にキーボードを認識しないことがあっ\nたり、BIOS に入ることも出来ないことがあったので、キーボード原因だろ\nうということで、日本語フルキーボードかつ、なるべくコンパクトなもの\nを買ってきました。\n打ち心地はそれほどよくありません。^^;\nSun Blade2500 に付属しているキーボードは秀逸だと思うのですが、見た\n目は普通の日本語キーボード、打ち心地は Sun のそれ、ってやつないのかな？","contentSnippet":"SHARP 32 型 AQUOS 地上デジタルハイビジョン液晶テレビ  アナログテレビとともにアナログマの最後を看取る予定でしたが、PS3 のゲーム中の文字が滲んでよく見えないという理由だけで、あっさり買いかえてしまいました。昨日の 18:00 に会社を出て、19:30 に購入して、今日の 9:00 過ぎにうちに届きました。なんというハイスピード。今まで 21 インチのアナログテレビでしたが、32 インチにしたのは正解でした。37 インチを買わなくてよかった…。今回購入したヨドバシでの価格は ￥137,800 でした。Amazon の値段を見ると最安値が ￥99,800 で、ちょwww って感じですが、|本体(￥137,800) - ヨドバシポイント(￥24,846) - エコポイント(￥15,000) = ￥97,954なので、実は妥当だと思いたいです…。さっそく地デジの設定をしましたが、簡単でした。薄々気づいていましたが、壁のテレビ端子がそのまま使えるのですね。←何も調べずに買った人この互換性はすごいのでは..。肝心の PS3 は、特に文字がはっきり見えるようになりました。コンポーネントケーブルを HDMI ケーブルに変えれば、もっと綺麗になるのでしょう。→ 綺麗になりました！！キーボード  DELL キーボードの接続が時々切れるようになってしまいました。(注: 有線キーボードです。)再現性はバラバラですが、OS 起動時にキーボードを認識しないことがあったり、BIOS に入ることも出来ないことがあったので、キーボード原因だろうということで、日本語フルキーボードかつ、なるべくコンパクトなものを買ってきました。打ち心地はそれほどよくありません。^^;Sun Blade2500 に付属しているキーボードは秀逸だと思うのですが、見た目は普通の日本語キーボード、打ち心地は Sun のそれ、ってやつないのかな？","link":"https://masutaka.net/2009-11-03-1/","isoDate":"2009-11-03T00:00:00.000Z","dateMiliSeconds":1257206400000,"authorName":"masutaka"},{"title":"Emacs23 から行番号を表示できるようになっていた","content":"今まで外部パッケージを入れないと、Emacs は行番号を表示できませんで\nしたが、Emacs23 では最初から行番号表示できるようになっていました。\nM-x linum-mode すると、カレントバッファで行番号が表示されます。\nM-x global-linum-mode すると、全てのバッファで行番号が表示されます。\n常に行番号を表示させたい方は ~/.emacs に以下を書いておくとよいでしょう。\n(global-linum-mode t) ","contentSnippet":"今まで外部パッケージを入れないと、Emacs は行番号を表示できませんでしたが、Emacs23 では最初から行番号表示できるようになっていました。M-x linum-mode すると、カレントバッファで行番号が表示されます。M-x global-linum-mode すると、全てのバッファで行番号が表示されます。常に行番号を表示させたい方は ~/.emacs に以下を書いておくとよいでしょう。(global-linum-mode t)","link":"https://masutaka.net/2009-10-25-1/","isoDate":"2009-10-25T00:00:00.000Z","dateMiliSeconds":1256428800000,"authorName":"masutaka"},{"title":"Debian squeeze でスクロールするとカクカクするようになった","content":"最近、testing(=squeeze) の不具合調査が多いなあ。^^;\nxserver 関連のアップデートをしてから、Iceweasel(=Firefox) や\nEmacs のスクロールがやけにカクカクするようになりました。\n以前 [2008-08-24-1] で似たような現象が起きた時は、理由が分からない\nまま解決できたため、この現象に気づいたときは正直げんなりしました。\n(この時予想したソフトレンダリングは、勘違いということが今回判明。)\n今回は過程を重視したいため、結論は後に書きます。\nまず、X の VIDEO まわりの設定を調べました。私の PC の VIDEO カード\nは ATI の Radeon HD 2400 PRO です。ただ、/etc/X11/xorg.conf には以\n下のような情報しか書かれていませんでした。\nSection &#34;Device&#34; Identifier\t&#34;Configured Video Device&#34; EndSection 気を取り直して、ググってみたところ debian-users:51900 が引っかかっ\nたので、\n dpkg-reconfigure -plow xserver-xorg  等やってみたが変わらず。/etc/X11/xorg.conf は touch された形跡さえ\nありませんでした。\nどうやら最近の X は /etc/X11/xorg.conf ではなく、hal で設定されてい\nるようです。lshal コマンドで設定内容を確認できるようです。\n % lshal\n lshal の出力にはめぼしいものはありませんでしたが、このスレッドの以\n下のコマンドに解決のヒントが隠されていました。\n % grep EE /var/log/Xorg.","contentSnippet":"最近、testing(=squeeze) の不具合調査が多いなあ。^^;xserver 関連のアップデートをしてから、Iceweasel(=Firefox) やEmacs のスクロールがやけにカクカクするようになりました。以前 [2008-08-24-1] で似たような現象が起きた時は、理由が分からないまま解決できたため、この現象に気づいたときは正直げんなりしました。(この時予想したソフトレンダリングは、勘違いということが今回判明。)今回は過程を重視したいため、結論は後に書きます。まず、X の VIDEO まわりの設定を調べました。私の PC の VIDEO カードは ATI の Radeon HD 2400 PRO です。ただ、/etc/X11/xorg.conf には以下のような情報しか書かれていませんでした。Section \"Device\" Identifier\t\"Configured Video Device\" EndSection 気を取り直して、ググってみたところ debian-users:51900 が引っかかったので、 dpkg-reconfigure -plow xserver-xorg  等やってみたが変わらず。/etc/X11/xorg.conf は touch された形跡さえありませんでした。どうやら最近の X は /etc/X11/xorg.conf ではなく、hal で設定されているようです。lshal コマンドで設定内容を確認できるようです。 % lshal lshal の出力にはめぼしいものはありませんでしたが、このスレッドの以下のコマンドに解決のヒントが隠されていました。 % grep EE /var/log/Xorg.","link":"https://masutaka.net/2009-10-18-1/","isoDate":"2009-10-18T00:00:00.000Z","dateMiliSeconds":1255824000000,"authorName":"masutaka"},{"title":"VAIO W を買って、１ヶ月が過ぎた","content":"[2009-09-06-1] のその後です。\n１ヶ月使いましたが、それほど不満はないです。むしろ Let&rsquo;s Note W2\nCF-W2AW1AXR と違和感がなさ過ぎて、置き換えたことを時々忘れるくらいです。\n私のようにメインマシンが Linux で、サブマシンに Windows を探してい\nるという人には良い選択肢だと思います。5 万で買えますし。(Let&rsquo;s\nNote は 20 万したなあ。。。)\nLet&rsquo;s NOTE と比べて、良くなったと感じる点です。\n 若干パフォーマンスが上がりました。 Bluetooth が使えるようになりました。時々 [2009-08-29-1] のワイヤ\nレスヘッドホンで遊んでいます。  Let&rsquo;s NOTE と比べて、悪くなったと感じる点です。\n ファンの音が多少気になります。 解像度は高くなりましたが、画面は小さい(10.1 型ワイド)ので、目が疲\nれそうです(※1)。 キーボードが小さいので、打ち辛そうです(※2)。 足元に置いているのでそれほどでもありませんが、外付けマルチドライ\nブが少し邪魔です。  ※1 いつも外部モニタに出力させているので、画面になにか表示させるこ\nとはほとんどありません。\n※2 synergy を使っているので、キーボードに触ることはほとんどありま\nせん。[2009-07-20-3] ","contentSnippet":"[2009-09-06-1] のその後です。１ヶ月使いましたが、それほど不満はないです。むしろ Let’s Note W2CF-W2AW1AXR と違和感がなさ過ぎて、置き換えたことを時々忘れるくらいです。私のようにメインマシンが Linux で、サブマシンに Windows を探しているという人には良い選択肢だと思います。5 万で買えますし。(Let’sNote は 20 万したなあ。。。)Let’s NOTE と比べて、良くなったと感じる点です。 若干パフォーマンスが上がりました。 Bluetooth が使えるようになりました。時々 [2009-08-29-1] のワイヤレスヘッドホンで遊んでいます。  Let’s NOTE と比べて、悪くなったと感じる点です。 ファンの音が多少気になります。 解像度は高くなりましたが、画面は小さい(10.1 型ワイド)ので、目が疲れそうです(※1)。 キーボードが小さいので、打ち辛そうです(※2)。 足元に置いているのでそれほどでもありませんが、外付けマルチドライブが少し邪魔です。  ※1 いつも外部モニタに出力させているので、画面になにか表示させることはほとんどありません。※2 synergy を使っているので、キーボードに触ることはほとんどありません。[2009-07-20-3]","link":"https://masutaka.net/2009-10-11-2/","isoDate":"2009-10-11T01:00:00.000Z","dateMiliSeconds":1255222800000,"authorName":"masutaka"},{"title":"Emacs23 から初期化時間や動作時間を確認できるようになった","content":";; Emacs 起動時の初期化時間を返す。 (emacs-init-time) =&gt; &#34;26.6 seconds&#34;  ;; Emacs の動作時間を返す。 (emacs-uptime) =&gt; &#34;1 day, 15 hours, 2 minutes, 17 seconds&#34; 参考にした Web サイト:\nEmacs23における変更点(一部) - とりあえず暇だったし何となく始めたブログ ","contentSnippet":";; Emacs 起動時の初期化時間を返す。 (emacs-init-time) => \"26.6 seconds\"  ;; Emacs の動作時間を返す。 (emacs-uptime) => \"1 day, 15 hours, 2 minutes, 17 seconds\" 参考にした Web サイト:Emacs23における変更点(一部) - とりあえず暇だったし何となく始めたブログ","link":"https://masutaka.net/2009-10-11-1/","isoDate":"2009-10-11T00:00:00.000Z","dateMiliSeconds":1255219200000,"authorName":"masutaka"},{"title":"MySQL の主要なコマンド","content":"# 接続(&#34;mysql&gt;&#34; プロンプトに移行する。) % mysql -u root -p # データベースの一覧 mysql&gt; show databases; # 文字コードの確認 mysql&gt; show create database データベース名; # データベースの作成 mysql&gt; create database データベース名; # 文字コードに utf-8 を指定したデータベースの作成 mysql&gt; create database データベース名 character set utf8; # ユーザの追加 mysql&gt; grant all privileges on データベース名.* to ユーザ名@localhost identified by &#39;パスワード&#39;; # データベースの削除 mysql&gt; drop database データベース名; # サーバのステータス情報確認。&#34;mysqladmin -u root -p status&#34; はこれの簡易版。 mysql&gt; status; # サーバの詳細なステータス情報確認。&#34;mysqladmin -u root -p extended-status&#34; と同様。 mysql&gt; show status; # 終了 mysql&gt; exit; # 変数の確認 % mysqladmin -u root -p variable # 存在するデータを全てバックアップ % mysqldump -u root -p -x --all-databases &gt; alldump.","contentSnippet":"# 接続(\"mysql>\" プロンプトに移行する。) % mysql -u root -p # データベースの一覧 mysql> show databases; # 文字コードの確認 mysql> show create database データベース名; # データベースの作成 mysql> create database データベース名; # 文字コードに utf-8 を指定したデータベースの作成 mysql> create database データベース名 character set utf8; # ユーザの追加 mysql> grant all privileges on データベース名.* to ユーザ名@localhost identified by 'パスワード'; # データベースの削除 mysql> drop database データベース名; # サーバのステータス情報確認。\"mysqladmin -u root -p status\" はこれの簡易版。 mysql> status; # サーバの詳細なステータス情報確認。\"mysqladmin -u root -p extended-status\" と同様。 mysql> show status; # 終了 mysql> exit; # 変数の確認 % mysqladmin -u root -p variable # 存在するデータを全てバックアップ % mysqldump -u root -p -x --all-databases > alldump.","link":"https://masutaka.net/2009-10-10-2/","isoDate":"2009-10-10T01:00:00.000Z","dateMiliSeconds":1255136400000,"authorName":"masutaka"},{"title":"Debian squeeze で Redmine を構築してみた (MySQL 版)","content":"[2009-10-08-1] はデータベースに sqlite3 を使用する方法ですが、書き\n込みが行われている時はデータベース全体がロックされるなどパフォーマ\nンスに問題があるそうです。そこで、MySQL を使う方法も試してみました。\n前回に補足する形で説明していきます。\n基本的な構築手順 1. に加え、mysql-server もインストールしてください。 さらに、MySQL のデータベースも作成します。\n % mysql -u root -p\n文字コードに utf8 を指定したデータベース redmine を作成 mysql&gt; create database redmine character set utf8;\nデータベース redmine のユーザ redmine を作成し、パスワードに XXXXXXXX を設定。 mysql&gt; grant all privileges on redmine.* to redmine@localhost identified by &lsquo;XXXXXXXX&rsquo;;\nmysql&gt; exit;\n 3-1. の database.yml は以下の修正に置き換えます。 --- config/database.yml.example\t2009-09-13 21:10:16.000000000 +0900 +++ config/database.yml\t2009-10-10 23:14:31.000000000 +0900 @@ -10,9 +10,10 @@ adapter: mysql database: redmine host: localhost - username: root - password: + username: redmine + password: XXXXXXXX encoding: utf8 + socket: /var/run/mysqld/mysqld.","contentSnippet":"[2009-10-08-1] はデータベースに sqlite3 を使用する方法ですが、書き込みが行われている時はデータベース全体がロックされるなどパフォーマンスに問題があるそうです。そこで、MySQL を使う方法も試してみました。前回に補足する形で説明していきます。基本的な構築手順 1. に加え、mysql-server もインストールしてください。 さらに、MySQL のデータベースも作成します。 % mysql -u root -p文字コードに utf8 を指定したデータベース redmine を作成 mysql> create database redmine character set utf8;データベース redmine のユーザ redmine を作成し、パスワードに XXXXXXXX を設定。 mysql> grant all privileges on redmine.* to redmine@localhost identified by ‘XXXXXXXX’;mysql> exit; 3-1. の database.yml は以下の修正に置き換えます。 --- config/database.yml.example\t2009-09-13 21:10:16.000000000 +0900 +++ config/database.yml\t2009-10-10 23:14:31.000000000 +0900 @@ -10,9 +10,10 @@ adapter: mysql database: redmine host: localhost - username: root - password: + username: redmine + password: XXXXXXXX encoding: utf8 + socket: /var/run/mysqld/mysqld.","link":"https://masutaka.net/2009-10-10-1/","isoDate":"2009-10-10T00:00:00.000Z","dateMiliSeconds":1255132800000,"authorName":"masutaka"},{"title":"Debian squeeze で Redmine を構築してみた","content":"Redmine とは、プロジェクト管理ツールです。\n仕事で必要になったので、手始めに自宅で構築してみました。\nlenny から Ruby on Rails がパッケージに含まれるようになったそうで、\n比較的簡単に構築することが出来ました。\n基本的な構築手順 1. Synaptic パッケージマネージャから rails をインストールします。 構築したマシンに既に apache2 や libsqlite3-ruby1.8 をインストールし\nていたので、今回は rails のみのインストールで済みました。\n2. Redmine の公式サイト から、redmine-0.8.5.tar.gz をダウンロードし、~/public_html に展開します。  % cd ~/public_html\n% tar xzf redmine-0.8.5.tar.gz\n 3. 公式サイトの手順 を参考にして、Redmine の設定をします。 展開したディレクトリに移動します。\n % cd redmine-0.8.5\n 3-1. database.yml の設定 サンプルを元に設定を開始します。\n % cp config/database.yml.example config/database.yml\n 修正内容は以下のとおり、公式と同じにします。\n--- config/database.yml.example\t2009-09-13 21:10:16.000000000 +0900 +++ config/database.yml\t2009-10-08 21:27:03.000000000 +0900 @@ -7,12 +7,9 @@ # http://dev.","contentSnippet":"Redmine とは、プロジェクト管理ツールです。仕事で必要になったので、手始めに自宅で構築してみました。lenny から Ruby on Rails がパッケージに含まれるようになったそうで、比較的簡単に構築することが出来ました。基本的な構築手順 1. Synaptic パッケージマネージャから rails をインストールします。 構築したマシンに既に apache2 や libsqlite3-ruby1.8 をインストールしていたので、今回は rails のみのインストールで済みました。2. Redmine の公式サイト から、redmine-0.8.5.tar.gz をダウンロードし、~/public_html に展開します。  % cd ~/public_html% tar xzf redmine-0.8.5.tar.gz 3. 公式サイトの手順 を参考にして、Redmine の設定をします。 展開したディレクトリに移動します。 % cd redmine-0.8.5 3-1. database.yml の設定 サンプルを元に設定を開始します。 % cp config/database.yml.example config/database.yml 修正内容は以下のとおり、公式と同じにします。--- config/database.yml.example\t2009-09-13 21:10:16.000000000 +0900 +++ config/database.yml\t2009-10-08 21:27:03.000000000 +0900 @@ -7,12 +7,9 @@ # http://dev.","link":"https://masutaka.net/2009-10-08-1/","isoDate":"2009-10-08T00:00:00.000Z","dateMiliSeconds":1254960000000,"authorName":"masutaka"},{"title":"Web ブラウザに表示されている画面を直接編集する方法","content":"これはすごい。Web ブラウザのアドレスバーに以下を入力し Enter すると、\n今表示されている内容を直接編集できる。Firefox 3.0.14 と IE8 で出来\nることを確認した。\njavascript:document.body.contentEditable=&#39;true&#39;; document.designMode=&#39;on&#39;; void 0 WEBブラウザーに表示されている画面を直接編集する方法 - sanonosa　システム管理コラム集 追記(2009-10-04):\n戻す方法はないものかなあ。&lsquo;false&rsquo; と &lsquo;off&rsquo; では出来なかった。\n追記(2009-10-17):\n「戻す方法」というのは、「編集モードから閲覧モードに戻す方法」のこ\nとです。端折った書き方ですみませんでした。もう少し楽な方法が見つかっ\nたので、以下に追記します。\nIE では、以下を入力し Enter すると編集状態を保ったまま閲覧モードに\n戻せますが、Firefox ではそれができません。\njavascript:document.body.contentEditable=&#39;false&#39;; document.designMode=&#39;off&#39;; void 0 はてなブックマークからの情報 によると、Firefox の Page Hacker アドオ\nン を使えば閲覧モードに戻せることが分かりました。編集モードへの移行\nもこのアドオンで出来ます。","contentSnippet":"これはすごい。Web ブラウザのアドレスバーに以下を入力し Enter すると、今表示されている内容を直接編集できる。Firefox 3.0.14 と IE8 で出来ることを確認した。javascript:document.body.contentEditable='true'; document.designMode='on'; void 0 WEBブラウザーに表示されている画面を直接編集する方法 - sanonosa　システム管理コラム集 追記(2009-10-04):戻す方法はないものかなあ。‘false’ と ‘off’ では出来なかった。追記(2009-10-17):「戻す方法」というのは、「編集モードから閲覧モードに戻す方法」のことです。端折った書き方ですみませんでした。もう少し楽な方法が見つかったので、以下に追記します。IE では、以下を入力し Enter すると編集状態を保ったまま閲覧モードに戻せますが、Firefox ではそれができません。javascript:document.body.contentEditable='false'; document.designMode='off'; void 0 はてなブックマークからの情報 によると、Firefox の Page Hacker アドオン を使えば閲覧モードに戻せることが分かりました。編集モードへの移行もこのアドオンで出来ます。","link":"https://masutaka.net/2009-10-04-1/","isoDate":"2009-10-04T00:00:00.000Z","dateMiliSeconds":1254614400000,"authorName":"masutaka"},{"title":"最近の 200 件より前のつぶやきを、はてなにアップした","content":"[2009-08-23-1] の続きです。\ntwtr2src の仕様で、200 件より前のつぶやきは HTML, Hatena, Plane\nText のいずれのフォーマットでも取得することが出来ません。\n私が Twitter を始めたのは 2009/6/2 です。twtr2src を使って、はてな\nにつぶやきをアップ出来たのが 2009/7/16 までです。つまり、2009/6/2〜\n2009/7/15 までのつぶやきが、はてなにアップ出来ていないことになりま\nす。これは対策を講じる必要があるでしょうｗ\nいきなりですが、twilog を利用すると、この問題を解決できます。\n本来は、そういう目的の Web サービスではありませんけどね。\ntwilog にユーザ登録(無料)をすると、右上の「各種設定」から「過去のつ\nぶやきの取得」ができるようになります。ただし Twitter 自身の仕様で、\n取得出来るのは 3200 件までだそうです。私はまだ、815 回しかつぶやい\nていないので、セーフでした。\n取得し終わったら、はてな記法のソースを取得します。と言っても用意さ\nれているわけではないので、自分ではてな記法に設定します。\n1. 各日付の「ソース取得」の &ldquo;div・p&rdquo; や &ldquo;ul・li&rdquo; をクリックすると、\nこちらの Greasemonkey というリンクがあります。これをクリックします。\n2. &ldquo;Install&rdquo; というボタンの下に、&ldquo;How do I use this?&rdquo; というリンク\nがあります。これをクリックします。この時点では &ldquo;Install&rdquo; をクリック\nしても、57746.user.js がそのまま表示されるだけです。\n3. なにやら英語で書いてありますが、&ldquo;Install&rdquo; ボタンをクリックする前\nに Greasemonkey という Firefox アドオン をインストールする必要がある","contentSnippet":"[2009-08-23-1] の続きです。twtr2src の仕様で、200 件より前のつぶやきは HTML, Hatena, PlaneText のいずれのフォーマットでも取得することが出来ません。私が Twitter を始めたのは 2009/6/2 です。twtr2src を使って、はてなにつぶやきをアップ出来たのが 2009/7/16 までです。つまり、2009/6/2〜2009/7/15 までのつぶやきが、はてなにアップ出来ていないことになります。これは対策を講じる必要があるでしょうｗいきなりですが、twilog を利用すると、この問題を解決できます。本来は、そういう目的の Web サービスではありませんけどね。twilog にユーザ登録(無料)をすると、右上の「各種設定」から「過去のつぶやきの取得」ができるようになります。ただし Twitter 自身の仕様で、取得出来るのは 3200 件までだそうです。私はまだ、815 回しかつぶやいていないので、セーフでした。取得し終わったら、はてな記法のソースを取得します。と言っても用意されているわけではないので、自分ではてな記法に設定します。1. 各日付の「ソース取得」の “div・p” や “ul・li” をクリックすると、こちらの Greasemonkey というリンクがあります。これをクリックします。2. “Install” というボタンの下に、“How do I use this?” というリンクがあります。これをクリックします。この時点では “Install” をクリックしても、57746.user.js がそのまま表示されるだけです。3. なにやら英語で書いてありますが、“Install” ボタンをクリックする前に Greasemonkey という Firefox アドオン をインストールする必要がある","link":"https://masutaka.net/2009-09-28-1/","isoDate":"2009-09-28T00:00:00.000Z","dateMiliSeconds":1254096000000,"authorName":"masutaka"},{"title":"Emacs のソースコードを Git から取得してみた","content":"emacs - Git Repositories Emacs のソースコードは Git(ぎっと) でも公開されているので、\nGit Repository から取得してみました。\nまず、Git というのは分散型バージョン管理システムです。CVS や\nSubversion は集中型バージョン管理システムなので、操作や考え方が少し\n違います。\n分散型バージョン管理については、以下のページにわかりやすくまとめら\nれています。\nGit/分散レポジトリって何が嬉しいの - かWiki 作業者が個別にリポジトリを持てるので、commit 権がないプロジェクトの\n修正を管理できる点が良さそうですね。\n以下のページも面白いです。アリスの遅れている作業を、ボブが手伝って\nいます。\nアリスとボブのコラボレーション、gitをちゃんと理解したい！ - ザリガニが見ていた&hellip;。 これで、Git の概要が分かりました。コマンド操作は後で述べるとして、\n先に Emacs のソースコードを取得することにします。\nDebian では git-core をインストールすると、Git が使えるようになります。\n以下のコマンドで Emacs のソースコードを取得できます。カレントディレ\nクトリに emacs というディレクトリが作られます。\n % git clone git://git.savannah.gnu.org/emacs.git\n Emacs のソースコードを取得できました。\ncvs update や svn update に相当するコマンドは以下になります。\n % git pull\n CVS や Subversion を使ったことがある人なら、以下のページが参考にな\nりそうです。","contentSnippet":"emacs - Git Repositories Emacs のソースコードは Git(ぎっと) でも公開されているので、Git Repository から取得してみました。まず、Git というのは分散型バージョン管理システムです。CVS やSubversion は集中型バージョン管理システムなので、操作や考え方が少し違います。分散型バージョン管理については、以下のページにわかりやすくまとめられています。Git/分散レポジトリって何が嬉しいの - かWiki 作業者が個別にリポジトリを持てるので、commit 権がないプロジェクトの修正を管理できる点が良さそうですね。以下のページも面白いです。アリスの遅れている作業を、ボブが手伝っています。アリスとボブのコラボレーション、gitをちゃんと理解したい！ - ザリガニが見ていた…。 これで、Git の概要が分かりました。コマンド操作は後で述べるとして、先に Emacs のソースコードを取得することにします。Debian では git-core をインストールすると、Git が使えるようになります。以下のコマンドで Emacs のソースコードを取得できます。カレントディレクトリに emacs というディレクトリが作られます。 % git clone git://git.savannah.gnu.org/emacs.git Emacs のソースコードを取得できました。cvs update や svn update に相当するコマンドは以下になります。 % git pull CVS や Subversion を使ったことがある人なら、以下のページが参考になりそうです。","link":"https://masutaka.net/2009-09-27-1/","isoDate":"2009-09-27T00:00:00.000Z","dateMiliSeconds":1254009600000,"authorName":"masutaka"},{"title":"Debian squeeze で migemo が使えなくなった","content":"10 日くらい前から Debian squeeze で migemo が使えなくなってしまいま\nした。\n正常に実行できる Meadow と &quot; migemo&quot; バッファを比べてみると、\nDebian の方は文字化けしています。migemo_0.40-8 の /usr/bin/migemo\nへの以下の修正が影響しているようです。\n# 修正前 puts regex_str # 修正後 puts ENV[&#39;LANG&#39;].include?(&#34;UTF-8&#34;) ? NKF.nkf(&#39;-Ew&#39;, regex_str) : regex_str /usr/share/emacs/site-lisp/migemo/migemo.el も修正する必要があった\nようで、#546920 で対応されました。migemo_0.40-10 では直るようです。\nしかしまだ squeeze には降りてきていないので、当面は ~/.emacs に以下\nを設定し生活することにします。\n (setq migemo-coding-system &lsquo;utf-8-unix)\n 追記(2009-09-29):\nmigemo_0.40-10 が squeeze に降りてきたので、migemo-coding-system の\n設定を削除しました。","contentSnippet":"10 日くらい前から Debian squeeze で migemo が使えなくなってしまいました。正常に実行できる Meadow と \" migemo\" バッファを比べてみると、Debian の方は文字化けしています。migemo_0.40-8 の /usr/bin/migemoへの以下の修正が影響しているようです。# 修正前 puts regex_str # 修正後 puts ENV['LANG'].include?(\"UTF-8\") ? NKF.nkf('-Ew', regex_str) : regex_str /usr/share/emacs/site-lisp/migemo/migemo.el も修正する必要があったようで、#546920 で対応されました。migemo_0.40-10 では直るようです。しかしまだ squeeze には降りてきていないので、当面は ~/.emacs に以下を設定し生活することにします。 (setq migemo-coding-system ‘utf-8-unix) 追記(2009-09-29):migemo_0.40-10 が squeeze に降りてきたので、migemo-coding-system の設定を削除しました。","link":"https://masutaka.net/2009-09-22-1/","isoDate":"2009-09-22T00:00:00.000Z","dateMiliSeconds":1253577600000,"authorName":"masutaka"},{"title":"本を購入","content":"近所の文教堂に行ってきました。\n幽霊人命救助隊  今月の部会で上司がおすすめしていて、たまたま見つけたので買ってきま\nした。サラっと読めると聞いたのですが、予想外の分厚さにうろたえましたｗ\nシグルイ 13  新巻が出ていたので、買ってきました。大手を振って「読んでます」って\n言えない漫画です。^^;","contentSnippet":"近所の文教堂に行ってきました。幽霊人命救助隊  今月の部会で上司がおすすめしていて、たまたま見つけたので買ってきました。サラっと読めると聞いたのですが、予想外の分厚さにうろたえましたｗシグルイ 13  新巻が出ていたので、買ってきました。大手を振って「読んでます」って言えない漫画です。^^;","link":"https://masutaka.net/2009-09-19-1/","isoDate":"2009-09-19T00:00:00.000Z","dateMiliSeconds":1253318400000,"authorName":"masutaka"},{"title":"文字列の整列","content":"M-x align-regexp がなかなか便利。\nまずは Help のサンプルより。\nFred (123) 456-7890 Alice (123) 456-7890 Mary-Anne (123) 456-7890 Joe (123) 456-7890 上記をリージョンで括って、\nM-x align-regexp [Enter] ( [Enter] すると、、、\nFred (123) 456-7890 Alice (123) 456-7890 Mary-Anne (123) 456-7890 Joe (123) 456-7890 C ソースだともっと便利さが伝わるかもしれない。\n実行前\nprintf(&#34;aaa\\n&#34;);/* aaa */ printf(&#34;bbbbbb\\n&#34;);/* bbb */ printf(&#34;ccccccccc\\n&#34;);/* ccc */ M-x align-regexp [Enter] /* [Enter] 実行\nprintf(&#34;aaa\\n&#34;); /* aaa */ printf(&#34;bbbbbb\\n&#34;); /* bbb */ printf(&#34;ccccccccc\\n&#34;); /* ccc */ おっと、M-x align というのもあると教えてもらった。これは現在のメ","contentSnippet":"M-x align-regexp がなかなか便利。まずは Help のサンプルより。Fred (123) 456-7890 Alice (123) 456-7890 Mary-Anne (123) 456-7890 Joe (123) 456-7890 上記をリージョンで括って、M-x align-regexp [Enter] ( [Enter] すると、、、Fred (123) 456-7890 Alice (123) 456-7890 Mary-Anne (123) 456-7890 Joe (123) 456-7890 C ソースだともっと便利さが伝わるかもしれない。実行前printf(\"aaa\\n\");/* aaa */ printf(\"bbbbbb\\n\");/* bbb */ printf(\"ccccccccc\\n\");/* ccc */ M-x align-regexp [Enter] /* [Enter] 実行printf(\"aaa\\n\"); /* aaa */ printf(\"bbbbbb\\n\"); /* bbb */ printf(\"ccccccccc\\n\"); /* ccc */ おっと、M-x align というのもあると教えてもらった。これは現在のメ","link":"https://masutaka.net/2009-09-15-1/","isoDate":"2009-09-15T00:00:00.000Z","dateMiliSeconds":1252972800000,"authorName":"masutaka"},{"title":"synergy その後","content":"[2009-07-20-3] のその後\n新しい PC でも、良い感じで使っています。\nただ、左端や右端から少しでもはみ出ると、隣の PC からカーソルがひょっ\nこりと顔を出してしまうので、上 10% と下 10% は無視させるようにしま\nした。\nサーバ側の ~/.synergy.conf を置き換えます。\n# vergil -&gt; SERVER PC (Linux) # nero -&gt; CLIENT PC (Windows) section: screens vergil: nero: end section: links vergil: left(10,90) = nero(10,90) nero: right(10,90) = vergil(10,90) end 参考情報:\nSynergy Configuration Guide ","contentSnippet":"[2009-07-20-3] のその後新しい PC でも、良い感じで使っています。ただ、左端や右端から少しでもはみ出ると、隣の PC からカーソルがひょっこりと顔を出してしまうので、上 10% と下 10% は無視させるようにしました。サーバ側の ~/.synergy.conf を置き換えます。# vergil -> SERVER PC (Linux) # nero -> CLIENT PC (Windows) section: screens vergil: nero: end section: links vergil: left(10,90) = nero(10,90) nero: right(10,90) = vergil(10,90) end 参考情報:Synergy Configuration Guide","link":"https://masutaka.net/2009-09-10-1/","isoDate":"2009-09-10T00:00:00.000Z","dateMiliSeconds":1252540800000,"authorName":"masutaka"},{"title":"今日の買い物","content":"VAIO W シリーズ VPCW119XJ/W  Let&rsquo;s NOTE W2 CF-W2AW1AXR の HDD がクラッシュしたので、代わりに買っ\nてきました。いや、もう少し正確に書きましょう。\n ２年ほど前から、Let&rsquo;s Note の液晶の半分の領域に縦線が出現し、かな\nり見えづらい状態だった。 そのため、普段は画面を隣のデスクトップの液晶に出力して使っていた。 先週の日曜日に、私の目の前で HDD がクラッシュした。 HDD の換装を試みたが、ネジをバカにしてしまい、諦めた。 今日、情報収集するためにノート PC を見に行った。 気がついたら買っていた。  いわゆるネットブックというやつです。ほとんどの作業は Linux PC で行\nうので、私の場合、Windows PC はネットブックで十分だと思います。(関\n係ないけど、ネットブックという呼称はなんか好きになれないなあ。)\nSony の PC は初めてなので、ちょっとドキドキしています。\nVAIO W のスペック表はこちらです。 見た目のよさと、IEEE 802.11n と\nBluetooth が対応されていることに惹かれて、購入しました。CPU やメモ\nリ、HDD にはこだわりませんでした。液晶は私の嫌いな光沢タイプ :-P で\nすが、外部出力する予定なので今回は問題ありません。\n値段は ￥50,025 でした。内訳は以下になります。\n|本体(￥51,700) + ヨドバシ延長保証サービス(￥2,585) - 金券(￥100) - ヨドバシポイント(￥4,160)\nヨドバシ延長保証サービスは、故障した時に正規の値段よりも安く修理が\nできるサービスのようです。安いのでまあいいかと思い、申し込んでしま\nいました。ヨドバシ延長保証サービスの詳細はこちらです。 金券は、古い PC の下取り価格です。念のため古い PC を持っていったの","contentSnippet":"VAIO W シリーズ VPCW119XJ/W  Let’s NOTE W2 CF-W2AW1AXR の HDD がクラッシュしたので、代わりに買ってきました。いや、もう少し正確に書きましょう。 ２年ほど前から、Let’s Note の液晶の半分の領域に縦線が出現し、かなり見えづらい状態だった。 そのため、普段は画面を隣のデスクトップの液晶に出力して使っていた。 先週の日曜日に、私の目の前で HDD がクラッシュした。 HDD の換装を試みたが、ネジをバカにしてしまい、諦めた。 今日、情報収集するためにノート PC を見に行った。 気がついたら買っていた。  いわゆるネットブックというやつです。ほとんどの作業は Linux PC で行うので、私の場合、Windows PC はネットブックで十分だと思います。(関係ないけど、ネットブックという呼称はなんか好きになれないなあ。)Sony の PC は初めてなので、ちょっとドキドキしています。VAIO W のスペック表はこちらです。 見た目のよさと、IEEE 802.11n とBluetooth が対応されていることに惹かれて、購入しました。CPU やメモリ、HDD にはこだわりませんでした。液晶は私の嫌いな光沢タイプ :-P ですが、外部出力する予定なので今回は問題ありません。値段は ￥50,025 でした。内訳は以下になります。|本体(￥51,700) + ヨドバシ延長保証サービス(￥2,585) - 金券(￥100) - ヨドバシポイント(￥4,160)ヨドバシ延長保証サービスは、故障した時に正規の値段よりも安く修理ができるサービスのようです。安いのでまあいいかと思い、申し込んでしまいました。ヨドバシ延長保証サービスの詳細はこちらです。 金券は、古い PC の下取り価格です。念のため古い PC を持っていったの","link":"https://masutaka.net/2009-09-06-1/","isoDate":"2009-09-06T00:00:00.000Z","dateMiliSeconds":1252195200000,"authorName":"masutaka"},{"title":"このサイトに Google AdSense を設置しました","content":"アイテム毎のページ(例: [2009-09-03-1] )に Google Adsense を表示する\nようにしました。\nGoogle Adsense は、広告配信サービスの一つです。サイトに合った広告を\n配信するのが特徴のようです。\nGoogle_AdSense 現在のアクセス数で収益が出るとは思っていませんが、それなりに適切な\n広告が配信されていて興味深いです。\nところで、GIGAZINE にこんな記事がありました。\nGoogle AdSenseの始め方 その1「審査を突破する」 - GIGAZINE でも、私の場合はあっさり突破できてしまいました。個人向けだからでしょ\nうか。それとも、たまたま連絡先メールフォームを設置していた からでしょうか。\n配色は、たつをさんのページに触発されました。\n[を] コンテンツ連動型広告はどこに設置するのが良いか なるべく目立たないように設置したつもりです。\nついでに [2009-03-22-1] に設置したシムエントリも周囲に溶け込ませる\n配色にしました。","contentSnippet":"アイテム毎のページ(例: [2009-09-03-1] )に Google Adsense を表示するようにしました。Google Adsense は、広告配信サービスの一つです。サイトに合った広告を配信するのが特徴のようです。Google_AdSense 現在のアクセス数で収益が出るとは思っていませんが、それなりに適切な広告が配信されていて興味深いです。ところで、GIGAZINE にこんな記事がありました。Google AdSenseの始め方 その1「審査を突破する」 - GIGAZINE でも、私の場合はあっさり突破できてしまいました。個人向けだからでしょうか。それとも、たまたま連絡先メールフォームを設置していた からでしょうか。配色は、たつをさんのページに触発されました。[を] コンテンツ連動型広告はどこに設置するのが良いか なるべく目立たないように設置したつもりです。ついでに [2009-03-22-1] に設置したシムエントリも周囲に溶け込ませる配色にしました。","link":"https://masutaka.net/2009-09-03-1/","isoDate":"2009-09-03T00:00:00.000Z","dateMiliSeconds":1251936000000,"authorName":"masutaka"},{"title":"今週の買い物","content":"Bluetooth 送信機(トランスミッタ)  iPod 用にはコードレスで本体に直接接続できるトランスミッタが発売され\nていますが、DS 用のものはないようなので、不本意ながらコード付きのこ\nれにしました。ゲームには音が必須だと思いますが、需要はないのでしょ\nうか&hellip;。\n結論としては DS でワイヤレスイヤホンを使うのは時期尚早だと思います。\n素直に DS が Bluetooth 対応するのを待つか、直接接続＆給電できるタイ\nプのトランスミッタが出るのを待ちましょう。\nワイヤレスヘッドホン  耳かけタイプのヘッドホンです。イヤホンタイプのものを探したのですが、\n高い(￥4.5万!! )か、片側だけのものしかありませんでした。\n本当は、有線のイヤホンをそのまま無線にしたものが良いのですが。\nさて、右側のヘッドホンには以下の機能が集まっています。\n Power ボタン 音量調節ボタン 音楽再生、停止、スキップボタン 携帯用マルチファンクションボタン ペアリングボタン マイク  左側のヘッドホンは充電用の端子だけです。\n左右のヘッドホンは紐で繋がれていますが、邪魔だからと言って切っては\nいけません。良く考えれば分かりますが、左側のヘッドホンから給電して\nいるため、即使えなくなります。危なかった。。。\n今回買ったトランスミッタとヘッドホンは、どちらもワイヤが残っていま\nす。値段もそうですし、Bluetooth ヘッドホンはまだ過渡期なんだなあと\n思いました。\nところで、付けているとなぜか左耳だけ痛くなります。合わないのかな&hellip;？\n排水口付きトレー   ブレッザ　ドレイナートレー　S\nこの上に、洗った食器を入れるザルを置いて使います。こうすることで、\n溜まった水が速やかに排出されるので清潔です。排出される様子を見てい\nるのも、面白いです。^^;\n爪切り用品   家にある爪切りにヤスリが付いていなかったので、買ってきました。が、\n良く見たら、家にあるものと同じものを買っていました&hellip;。(なんだか雰\n囲気が違って見えたので&hellip;。←言い訳) ただ、良く見るとヤスリは付いて\nいたことが分かったので、良しとします。\nもう一つのは、爪の垢をかき出すものらしいです。これにもヤスリは付い\nています。\nメモ帳  愛用しているメモ帳がなくなったので、まとめて４冊買いました。\nその他買ったもの 箸、茶碗、弁当箱\n追記(2009-09-17):\n意識していませんでしたが、[2009-09-06-1] に買った VAIO とワイヤレス","contentSnippet":"Bluetooth 送信機(トランスミッタ)  iPod 用にはコードレスで本体に直接接続できるトランスミッタが発売されていますが、DS 用のものはないようなので、不本意ながらコード付きのこれにしました。ゲームには音が必須だと思いますが、需要はないのでしょうか…。結論としては DS でワイヤレスイヤホンを使うのは時期尚早だと思います。素直に DS が Bluetooth 対応するのを待つか、直接接続＆給電できるタイプのトランスミッタが出るのを待ちましょう。ワイヤレスヘッドホン  耳かけタイプのヘッドホンです。イヤホンタイプのものを探したのですが、高い(￥4.5万!! )か、片側だけのものしかありませんでした。本当は、有線のイヤホンをそのまま無線にしたものが良いのですが。さて、右側のヘッドホンには以下の機能が集まっています。 Power ボタン 音量調節ボタン 音楽再生、停止、スキップボタン 携帯用マルチファンクションボタン ペアリングボタン マイク  左側のヘッドホンは充電用の端子だけです。左右のヘッドホンは紐で繋がれていますが、邪魔だからと言って切ってはいけません。良く考えれば分かりますが、左側のヘッドホンから給電しているため、即使えなくなります。危なかった。。。今回買ったトランスミッタとヘッドホンは、どちらもワイヤが残っています。値段もそうですし、Bluetooth ヘッドホンはまだ過渡期なんだなあと思いました。ところで、付けているとなぜか左耳だけ痛くなります。合わないのかな…？排水口付きトレー   ブレッザ　ドレイナートレー　Sこの上に、洗った食器を入れるザルを置いて使います。こうすることで、溜まった水が速やかに排出されるので清潔です。排出される様子を見ているのも、面白いです。^^;爪切り用品   家にある爪切りにヤスリが付いていなかったので、買ってきました。が、良く見たら、家にあるものと同じものを買っていました…。(なんだか雰囲気が違って見えたので…。←言い訳) ただ、良く見るとヤスリは付いていたことが分かったので、良しとします。もう一つのは、爪の垢をかき出すものらしいです。これにもヤスリは付いています。メモ帳  愛用しているメモ帳がなくなったので、まとめて４冊買いました。その他買ったもの 箸、茶碗、弁当箱追記(2009-09-17):意識していませんでしたが、[2009-09-06-1] に買った VAIO とワイヤレス","link":"https://masutaka.net/2009-08-29-1/","isoDate":"2009-08-29T00:00:00.000Z","dateMiliSeconds":1251504000000,"authorName":"masutaka"},{"title":"Twitter のつぶやきを一日単位で自動でアップする","content":"[を] はてなダイアリーに一日単位で自分のツイッターのつぶやきをアップする方法 おもしろそうだったので、私もはてなダイアリーにアップすることにしま\nした。一日単位での Twitter のつぶやきが、はてなダイアリーの記事とし\nて毎日 0:00 に投稿されます。\nマスタカ (masutaka) on Twitter (はてな版) 記事のタイトルや、つぶやきを昇順にするか降順にするかは twtr2src の\nSetting → Format から設定できます。\n私は Sorting order of timeline を「Morning to night」に、\nTitle format を「%Y-%m-%d (%a) の Twitter でのつぶやき」にしました。","contentSnippet":"[を] はてなダイアリーに一日単位で自分のツイッターのつぶやきをアップする方法 おもしろそうだったので、私もはてなダイアリーにアップすることにしました。一日単位での Twitter のつぶやきが、はてなダイアリーの記事として毎日 0:00 に投稿されます。マスタカ (masutaka) on Twitter (はてな版) 記事のタイトルや、つぶやきを昇順にするか降順にするかは twtr2src のSetting → Format から設定できます。私は Sorting order of timeline を「Morning to night」に、Title format を「%Y-%m-%d (%a) の Twitter でのつぶやき」にしました。","link":"https://masutaka.net/2009-08-23-1/","isoDate":"2009-08-23T00:00:00.000Z","dateMiliSeconds":1250985600000,"authorName":"masutaka"},{"title":"screen で window 毎に encoding を変える方法","content":"普段は LANG=EUC-JP な環境で、時々 LANG=UTF8 の環境に ssh する時などに便利です。\n変えたい window 上で以下のコマンドを実行してください。&lt;escape key&gt; のデフォルトは Ctrl-a です。Ctrl-z にしている人が多いかもしれないです。\n&lt;escape key&gt;:encoding [enc] [enc] は、utf8, eucjp, sjis, jis などが使えます。詳細は man screen をご覧下さい。\n参考情報:\nunknownplace.org - 2005/10/19 - :encoding P.S.\n今気づいたのですが、~/.screenrc の内容は &lt;escape key&gt;: で実行できるのですね。","contentSnippet":"普段は LANG=EUC-JP な環境で、時々 LANG=UTF8 の環境に ssh する時などに便利です。変えたい window 上で以下のコマンドを実行してください。<escape key> のデフォルトは Ctrl-a です。Ctrl-z にしている人が多いかもしれないです。<escape key>:encoding [enc] [enc] は、utf8, eucjp, sjis, jis などが使えます。詳細は man screen をご覧下さい。参考情報:unknownplace.org - 2005/10/19 - :encoding P.S.今気づいたのですが、~/.screenrc の内容は <escape key>: で実行できるのですね。","link":"https://masutaka.net/2009-08-22-3/","isoDate":"2009-08-22T02:00:00.000Z","dateMiliSeconds":1250906400000,"authorName":"masutaka"},{"title":"screen で 最終行にウィンドウ一覧を表示する方法","content":"以下を ~/.screenrc に書くと、\nhardstatus alwayslastline &#34;[%02c] %`%-w%{=b bw}%n %t%{-}%+w&#34; こんな風に表示できます。\nタブ表示みたいで良いですね。ウィンドウをいくつ開いているかよく忘れるので ^^; 、便利です。\n参考情報:\nGNU screen いろいろまとめ。 - naoyaのはてなダイアリー 追記(2009-08-23):\nzsh ユーザの方は、以下を ~/.zshrc に書いておくと &ldquo;zsh&rdquo; という文字列の代わりに「コマンド実行中はコマンド名を、未実行ならカレントディレクトリを表示」してくれます。情報ありがとうございます。＞ kitokitoki さん\ncase &#34;$TERM&#34; in screen) preexec() { echo -ne &#34;\\ek#${1%% *}\\e\\\\&#34; } precmd() { echo -ne &#34;\\ek$(basename $(pwd))\\e\\\\&#34; } esac 参考情報:\nscreenのキャプションにディレクトリ名 or コマンド名を表示 - メモの日々(2008-03-31) ","contentSnippet":"以下を ~/.screenrc に書くと、hardstatus alwayslastline \"[%02c] %`%-w%{=b bw}%n %t%{-}%+w\" こんな風に表示できます。タブ表示みたいで良いですね。ウィンドウをいくつ開いているかよく忘れるので ^^; 、便利です。参考情報:GNU screen いろいろまとめ。 - naoyaのはてなダイアリー 追記(2009-08-23):zsh ユーザの方は、以下を ~/.zshrc に書いておくと “zsh” という文字列の代わりに「コマンド実行中はコマンド名を、未実行ならカレントディレクトリを表示」してくれます。情報ありがとうございます。＞ kitokitoki さんcase \"$TERM\" in screen) preexec() { echo -ne \"\\ek#${1%% *}\\e\\\\\" } precmd() { echo -ne \"\\ek$(basename $(pwd))\\e\\\\\" } esac 参考情報:screenのキャプションにディレクトリ名 or コマンド名を表示 - メモの日々(2008-03-31)","link":"https://masutaka.net/2009-08-22-2/","isoDate":"2009-08-22T01:00:00.000Z","dateMiliSeconds":1250902800000,"authorName":"masutaka"},{"title":"Twitter でつぶやいた日々の食事を Google カレンダーで表示する","content":"食べったー @tabetter という Twitter Bot があります。\ntabetter にフォローすると、フォローし返してくれます。その状態で、自\n分のアカウントに決まった書式のつぶやきをすると、\nhttp://tabetter.bug-fix.net/ical/ .ics\nにひたすら記録してくれるというサービスです。\n詳細は、食べったーの Web site をご覧下さい。\nhttp://tabetter.bug-fix.net/index_/index.html さて、.ics は、iCalendar 形式のファイルです。これは\nGoogle カレンダーから「表示のみが可能なカレンダー」として読み込ませ\nることができます。\nこうすることで、Twitter でつぶやいた日々の食事を Google カレンダー\nで表示することが可能です。\n左側のメニューにある「他のカレンダー」から、「追加」→「URLで追加」\nをクリックし、前述の URL を追加します。\n食事の記録が表示されました！！\n参考情報:\nvCalendar、iCalendar - コニファマメ知識 Twitterでの発言をGoogleカレンダー上に表示させることができる『twistory』 P.S.\nFirefox の Twitter アドオンは、TwitterFox がなかなか良いです。\nRT は右クリックでできます。← できないと思っていた人&hellip;。\n追記(2009-12-06):\nこんな感じ に任意の Web サイトに Google カレンダーを表示させることも\nできます。","contentSnippet":"食べったー @tabetter という Twitter Bot があります。tabetter にフォローすると、フォローし返してくれます。その状態で、自分のアカウントに決まった書式のつぶやきをすると、http://tabetter.bug-fix.net/ical/ .icsにひたすら記録してくれるというサービスです。詳細は、食べったーの Web site をご覧下さい。http://tabetter.bug-fix.net/index_/index.html さて、.ics は、iCalendar 形式のファイルです。これはGoogle カレンダーから「表示のみが可能なカレンダー」として読み込ませることができます。こうすることで、Twitter でつぶやいた日々の食事を Google カレンダーで表示することが可能です。左側のメニューにある「他のカレンダー」から、「追加」→「URLで追加」をクリックし、前述の URL を追加します。食事の記録が表示されました！！参考情報:vCalendar、iCalendar - コニファマメ知識 Twitterでの発言をGoogleカレンダー上に表示させることができる『twistory』 P.S.Firefox の Twitter アドオンは、TwitterFox がなかなか良いです。RT は右クリックでできます。← できないと思っていた人…。追記(2009-12-06):こんな感じ に任意の Web サイトに Google カレンダーを表示させることもできます。","link":"https://masutaka.net/2009-08-22-1/","isoDate":"2009-08-22T00:00:00.000Z","dateMiliSeconds":1250899200000,"authorName":"masutaka"},{"title":"ソーシャルブックマーク用のボタンを付けました。","content":"[2009-08-16-2] のバージョンアップ。\n「twitter でつぶやく」ボタンに加え、「はてなブックマーク」と\n「livedoor クリップ」ボタンも付けました。\n「はてなブックマーク」はそろそろ使おうかなと思っていましたが、\nlivedoor のアカウントは以前破棄したので、このためだけにアカウントを\n再取得しました。\n今回も chalow 本体の修正です。chalow ユーザ向けに、オリジナ\nル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチを貼り付けてお\nきますね。[2009-08-16-2] のパッチよりも、こちらのパッチのほうが拡張\n性あるのでオススメです。\n--- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-08-19 21:18:09.000000000 +0900 @@ -315,7 +315,7 @@ $item_template = &lt;&lt; &#34;EACHITEM&#34; &lt;!-- start:&lt;TMPL_VAR name=ymdi&gt; --&gt; &lt;div class=&#34;section&#34;&gt; -&lt;h3 class=&#34;subtitle&#34;&gt;&lt;TMPL_VAR name=header&gt; &lt;TMPL_VAR name=cat&gt;&lt;/h3&gt; +&lt;h3 class=&#34;subtitle&#34;&gt;&lt;TMPL_VAR name=header&gt; &lt;TMPL_VAR name=cat&gt; &lt;TMPL_VAR name=sbm&gt;&lt;/h3&gt; &lt;p&gt;&lt;TMPL_VAR name=content&gt;&lt;/p&gt; &lt;TMPL_IF name=readmore&gt; &lt;p&gt;《&lt;a href=&#34;&lt;TMPL_VAR name=url&gt;&#34;&gt;続きを読む&lt;/a&gt;》&lt;/p&gt; --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-08-19 22:10:37.","contentSnippet":"[2009-08-16-2] のバージョンアップ。「twitter でつぶやく」ボタンに加え、「はてなブックマーク」と「livedoor クリップ」ボタンも付けました。「はてなブックマーク」はそろそろ使おうかなと思っていましたが、livedoor のアカウントは以前破棄したので、このためだけにアカウントを再取得しました。今回も chalow 本体の修正です。chalow ユーザ向けに、オリジナル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチを貼り付けておきますね。[2009-08-16-2] のパッチよりも、こちらのパッチのほうが拡張性あるのでオススメです。--- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-08-19 21:18:09.000000000 +0900 @@ -315,7 +315,7 @@ $item_template = << \"EACHITEM\" <!-- start:<TMPL_VAR name=ymdi> --> <div class=\"section\"> -<h3 class=\"subtitle\"><TMPL_VAR name=header> <TMPL_VAR name=cat></h3> +<h3 class=\"subtitle\"><TMPL_VAR name=header> <TMPL_VAR name=cat> <TMPL_VAR name=sbm></h3> <p><TMPL_VAR name=content></p> <TMPL_IF name=readmore> <p>《<a href=\"<TMPL_VAR name=url>\">続きを読む</a>》</p> --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-08-19 22:10:37.","link":"https://masutaka.net/2009-08-19-1/","isoDate":"2009-08-19T00:00:00.000Z","dateMiliSeconds":1250640000000,"authorName":"masutaka"},{"title":"「twitter でつぶやく」ボタンを付けました。","content":"このブログの各記事にボタンを付けました。Twitter ユーザは、簡\n単にこのブログに関するつぶやきを投稿することが出来ます。どうぞご利\n用下さい。\n今回も chalow 本体を修正しました。chalow ユーザ向けに、オリジナ\nル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチを貼り付けてお\nきますね。\n--- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-08-16 15:26:20.000000000 +0900 @@ -315,7 +315,7 @@ $item_template = &lt;&lt; &#34;EACHITEM&#34; &lt;!-- start:&lt;TMPL_VAR name=ymdi&gt; --&gt; &lt;div class=&#34;section&#34;&gt; -&lt;h3 class=&#34;subtitle&#34;&gt;&lt;TMPL_VAR name=header&gt; &lt;TMPL_VAR name=cat&gt;&lt;/h3&gt; +&lt;h3 class=&#34;subtitle&#34;&gt;&lt;TMPL_VAR name=header&gt; &lt;TMPL_VAR name=cat&gt; &lt;TMPL_VAR name=retweet&gt;&lt;/h3&gt; &lt;p&gt;&lt;TMPL_VAR name=content&gt;&lt;/p&gt; &lt;TMPL_IF name=readmore&gt; &lt;p&gt;《&lt;a href=&#34;&lt;TMPL_VAR name=url&gt;&#34;&gt;続きを読む&lt;/a&gt;》&lt;/p&gt; --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-08-16 15:29:44.000000000 +0900 @@ -573,6 +573,9 @@ my $item_ymdi = $ymd.","contentSnippet":"このブログの各記事にボタンを付けました。Twitter ユーザは、簡単にこのブログに関するつぶやきを投稿することが出来ます。どうぞご利用下さい。今回も chalow 本体を修正しました。chalow ユーザ向けに、オリジナル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチを貼り付けておきますね。--- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-08-16 15:26:20.000000000 +0900 @@ -315,7 +315,7 @@ $item_template = << \"EACHITEM\" <!-- start:<TMPL_VAR name=ymdi> --> <div class=\"section\"> -<h3 class=\"subtitle\"><TMPL_VAR name=header> <TMPL_VAR name=cat></h3> +<h3 class=\"subtitle\"><TMPL_VAR name=header> <TMPL_VAR name=cat> <TMPL_VAR name=retweet></h3> <p><TMPL_VAR name=content></p> <TMPL_IF name=readmore> <p>《<a href=\"<TMPL_VAR name=url>\">続きを読む</a>》</p> --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-08-16 15:29:44.000000000 +0900 @@ -573,6 +573,9 @@ my $item_ymdi = $ymd.","link":"https://masutaka.net/2009-08-16-2/","isoDate":"2009-08-16T01:00:00.000Z","dateMiliSeconds":1250384400000,"authorName":"masutaka"},{"title":"VL ゴシックで行間が広い件と、↑↓←→が半角幅な件","content":"squeeze になってしばらくして、行間が広くなったことと、↑↓←→が半\n角幅になったことがとても気になっていたので、ちょっと調べてみました。\n結論から言うと、VL ゴシックが原因でした。20090422 のリリースまでは\n上の２つの問題は起きていませんでしたが、20090612 のリリースから変わっ\nたようです。\n調べたこと Windows で動くフォントビューア Shampolyon を使って調べました。\nDebian の下記フォントを C:\\Windows\\Fonts にコピーすれば、\nShampolyon で確認できます。\n /usr/share/fonts/truetype/vlgothic/VL-Gothic-Regular.ttf\n/usr/share/fonts/truetype/vlgothic/VL-PGothic-Regular.ttf\n 確かに半角幅しかありませんね。\n20090422 にリリースされたフォントでは全角幅分あります。20090612 の\nリリースから変わったようです。\n対策したこと ttf-vlgothic パッケージを 20090422 に戻せば良いのですが、squeeze に\nは存在しません。lenny にはあります。\n面倒なので /usr/share/fonts/truetype/vlgothic/*.ttf をリネームし、\n20090422 の *.ttf をコピーするという暴挙を行いました。\nしばらく暮らしてみましたが、広い行間に慣れてしまったようでｗ、どう\nもしっくりきません。結局元に戻しました&hellip;。\nただ、↑↓←→が半角幅というのは困りますので、なんらかの手段で作者\nに要望する予定です。\n関連情報 VLゴシックフォントファミリ [2009-07-12-1] 追記(2009-08-27):\n20090710-1 のパッケージが 20090811-1 に更新されたら、この問題が解消\nされました。よかったよかった。20090806 の以下の修正が該当するのでしょう。\n  VL-Gothic の文字幅を調整\no 互換性を高めるために Unicode で文字幅が Ambigious なものの一部を全角幅に変更。\nhttp://sourceforge.jp/projects/vlgothic/releases/43072/changelog    ","contentSnippet":"squeeze になってしばらくして、行間が広くなったことと、↑↓←→が半角幅になったことがとても気になっていたので、ちょっと調べてみました。結論から言うと、VL ゴシックが原因でした。20090422 のリリースまでは上の２つの問題は起きていませんでしたが、20090612 のリリースから変わったようです。調べたこと Windows で動くフォントビューア Shampolyon を使って調べました。Debian の下記フォントを C:\\Windows\\Fonts にコピーすれば、Shampolyon で確認できます。 /usr/share/fonts/truetype/vlgothic/VL-Gothic-Regular.ttf/usr/share/fonts/truetype/vlgothic/VL-PGothic-Regular.ttf 確かに半角幅しかありませんね。20090422 にリリースされたフォントでは全角幅分あります。20090612 のリリースから変わったようです。対策したこと ttf-vlgothic パッケージを 20090422 に戻せば良いのですが、squeeze には存在しません。lenny にはあります。面倒なので /usr/share/fonts/truetype/vlgothic/*.ttf をリネームし、20090422 の *.ttf をコピーするという暴挙を行いました。しばらく暮らしてみましたが、広い行間に慣れてしまったようでｗ、どうもしっくりきません。結局元に戻しました…。ただ、↑↓←→が半角幅というのは困りますので、なんらかの手段で作者に要望する予定です。関連情報 VLゴシックフォントファミリ [2009-07-12-1] 追記(2009-08-27):20090710-1 のパッケージが 20090811-1 に更新されたら、この問題が解消されました。よかったよかった。20090806 の以下の修正が該当するのでしょう。  VL-Gothic の文字幅を調整o 互換性を高めるために Unicode で文字幅が Ambigious なものの一部を全角幅に変更。http://sourceforge.jp/projects/vlgothic/releases/43072/changelog","link":"https://masutaka.net/2009-08-16-1/","isoDate":"2009-08-16T00:00:00.000Z","dateMiliSeconds":1250380800000,"authorName":"masutaka"},{"title":"twittering-mode.el のハック","content":"2010.4.21 に取り込んで頂きました ので、以下の修正はもう不要です。\n大したハックではありませんが、以下の修正をしました。\n修正内容 `t&rsquo; でオフラインとオンラインをトグル出来るようにしました。デフォル\nトの twittering-toggle-proxy() へのキーバインドを変更しています。接\n続状態はミニバッファに表示されたアイコンで分かるようになっています。\n`q&rsquo; で twittering-mode を終了できるようにしました。\nEmacs23 以降で twittering-update-lambda() と\ntwittering-jojo-mode() を実行すると、文字化けする件を修正しました。\n[2009-08-01-1] の件です。\n反映方法 twittering-mode.el を置いたディレクトリに icons というディレクトリ\nを作り、plugged.xpm と unplugged.xpm を置いてください。これらの画像\nは Navi2ch に付属するものです。\n修正した twittering-mode.el へのパッチは以下になります。アイコンを\n表示させるコードは Navi2ch から、ほぼそのまま流用させて頂きました。\nIndex: twittering-mode.el =================================================================== --- twittering-mode.el\t(revision 138) +++ twittering-mode.el\t(working copy) @@ -296,8 +296,9 @@  (define-key km &#34;H&#34; &#39;beginning-of-buffer)  (define-key km &#34;i&#34; &#39;twittering-icon-mode)  (define-key km &#34;s&#34; &#39;twittering-scroll-mode) - (define-key km &#34;t&#34; &#39;twittering-toggle-proxy) + (define-key km &#34;t&#34; &#39;twittering-toggle-offline)  (define-key km &#34;\\C-c\\C-p&#34; &#39;twittering-toggle-proxy) + (define-key km &#34;q&#34; &#39;twittering-mode-exit)  nil))   (defvar twittering-mode-syntax-table nil &#34;&#34;) @@ -363,8 +364,102 @@  (set-syntax-table twittering-mode-syntax-table)  (run-hooks &#39;twittering-mode-hook)  (font-lock-mode -1) - (twittering-start)) + (twittering-start) + (twittering-offline-init-icons) + (twittering-set-mode-line-identification))  +(defvar twittering-mode-line-identification nil) + +(defmacro twittering-display-image-p () + &#39;(and (display-images-p) +\t(image-type-available-p &#39;xpm))) + +(defvar twittering-online-image nil) +(defvar twittering-offline-image nil) + +(defvar twittering-online-indicator &#34;[ON] &#34;) +(defvar twittering-offline-indicator &#34;[--] &#34;) +(defvar twittering-modeline-online twittering-online-indicator) +(defvar twittering-modeline-offline twittering-offline-indicator) +(put &#39;twittering-modeline-online &#39;risky-local-variable t) +(put &#39;twittering-modeline-offline &#39;risky-local-variable t) + +(defvar twittering-icon-directory + (expand-file-name &#34;icons/&#34; +\t(file-name-directory +\t(locate-library &#34;twittering-mode&#34;))) + &#34;* アイコンファイルが置かれたディレクトリ。nil ならアイコンを使わない。&#34;) + +;; folder icons.","contentSnippet":"2010.4.21 に取り込んで頂きました ので、以下の修正はもう不要です。大したハックではありませんが、以下の修正をしました。修正内容 `t’ でオフラインとオンラインをトグル出来るようにしました。デフォルトの twittering-toggle-proxy() へのキーバインドを変更しています。接続状態はミニバッファに表示されたアイコンで分かるようになっています。`q’ で twittering-mode を終了できるようにしました。Emacs23 以降で twittering-update-lambda() とtwittering-jojo-mode() を実行すると、文字化けする件を修正しました。[2009-08-01-1] の件です。反映方法 twittering-mode.el を置いたディレクトリに icons というディレクトリを作り、plugged.xpm と unplugged.xpm を置いてください。これらの画像は Navi2ch に付属するものです。修正した twittering-mode.el へのパッチは以下になります。アイコンを表示させるコードは Navi2ch から、ほぼそのまま流用させて頂きました。Index: twittering-mode.el =================================================================== --- twittering-mode.el\t(revision 138) +++ twittering-mode.el\t(working copy) @@ -296,8 +296,9 @@  (define-key km \"H\" 'beginning-of-buffer)  (define-key km \"i\" 'twittering-icon-mode)  (define-key km \"s\" 'twittering-scroll-mode) - (define-key km \"t\" 'twittering-toggle-proxy) + (define-key km \"t\" 'twittering-toggle-offline)  (define-key km \"\\C-c\\C-p\" 'twittering-toggle-proxy) + (define-key km \"q\" 'twittering-mode-exit)  nil))   (defvar twittering-mode-syntax-table nil \"\") @@ -363,8 +364,102 @@  (set-syntax-table twittering-mode-syntax-table)  (run-hooks 'twittering-mode-hook)  (font-lock-mode -1) - (twittering-start)) + (twittering-start) + (twittering-offline-init-icons) + (twittering-set-mode-line-identification))  +(defvar twittering-mode-line-identification nil) + +(defmacro twittering-display-image-p () + '(and (display-images-p) +\t(image-type-available-p 'xpm))) + +(defvar twittering-online-image nil) +(defvar twittering-offline-image nil) + +(defvar twittering-online-indicator \"[ON] \") +(defvar twittering-offline-indicator \"[--] \") +(defvar twittering-modeline-online twittering-online-indicator) +(defvar twittering-modeline-offline twittering-offline-indicator) +(put 'twittering-modeline-online 'risky-local-variable t) +(put 'twittering-modeline-offline 'risky-local-variable t) + +(defvar twittering-icon-directory + (expand-file-name \"icons/\" +\t(file-name-directory +\t(locate-library \"twittering-mode\"))) + \"* アイコンファイルが置かれたディレクトリ。nil ならアイコンを使わない。\") + +;; folder icons.","link":"https://masutaka.net/2009-08-08-2/","isoDate":"2009-08-08T01:00:00.000Z","dateMiliSeconds":1249693200000,"authorName":"masutaka"},{"title":"UIM のツールバーを消し、GNOME のパネルに UIM を表示させる方法","content":"UIM は GNOME のパネルに表示するようにしていて、UIM のツールバーは表\n示させないようにしたんだけど、会社で Lenny をインストールした時に設\n定方法を忘れて、いろいろ調べたのでメモメモ。\nGNOME パネルに UIM を表示させる GNOME パネルに UIM を表示させるには、uim-applet-gnome パッケージが\n必要。「パネルを右クリック→パネルへ追加→入力メソッド表示器を追加」\nすると、GNOME パネルに UIM を表示出来る。\nUIM のツールバーを消す im-switch を使うと、UIM のツールバーを消すことが出来る。\n 現在の設定確認 % im-switch -l\n設定変更 % im-switch -c\n Lenny では、&ldquo;uim-toolbar&rdquo; を &ldquo;uim&rdquo; に変更することでツールバーを消す\nことができた。\n自宅の Squeeze は &ldquo;default&rdquo; と &ldquo;default-xim&rdquo; の 2 種類が存在する。\n現在の設定は &ldquo;default&rdquo; でツールバーは表示されていない。\n~/.xprofile で以下の設定をする必要がある。設定しないとかな漢字変換\nが出来ない。\nGTK_IM_MODULE=uim export GTK_IM_MODULE UIM のボタンを極力減らす 表示される UIM のボタンを、「あ」だけにすることも出来る。\n 設定→ツールバー→ボタン の選択をすべて外す。 設定→Anthy→ツールバー→有効にするボタン から、「かな入力方式」","contentSnippet":"UIM は GNOME のパネルに表示するようにしていて、UIM のツールバーは表示させないようにしたんだけど、会社で Lenny をインストールした時に設定方法を忘れて、いろいろ調べたのでメモメモ。GNOME パネルに UIM を表示させる GNOME パネルに UIM を表示させるには、uim-applet-gnome パッケージが必要。「パネルを右クリック→パネルへ追加→入力メソッド表示器を追加」すると、GNOME パネルに UIM を表示出来る。UIM のツールバーを消す im-switch を使うと、UIM のツールバーを消すことが出来る。 現在の設定確認 % im-switch -l設定変更 % im-switch -c Lenny では、“uim-toolbar” を “uim” に変更することでツールバーを消すことができた。自宅の Squeeze は “default” と “default-xim” の 2 種類が存在する。現在の設定は “default” でツールバーは表示されていない。~/.xprofile で以下の設定をする必要がある。設定しないとかな漢字変換が出来ない。GTK_IM_MODULE=uim export GTK_IM_MODULE UIM のボタンを極力減らす 表示される UIM のボタンを、「あ」だけにすることも出来る。 設定→ツールバー→ボタン の選択をすべて外す。 設定→Anthy→ツールバー→有効にするボタン から、「かな入力方式」","link":"https://masutaka.net/2009-08-08-1/","isoDate":"2009-08-08T00:00:00.000Z","dateMiliSeconds":1249689600000,"authorName":"masutaka"},{"title":"本日の買い物","content":"今日は川崎のヨドバシでいろいろ買ってきました。\nSATA II ケーブル SATAIIケーブル ストッパー付 片側Lコネクタ PSD30BK SATAIIケーブル ストッパー付 片側Lコネクタ PSD30BL オウルテック シリアルATA2ケーブル30cmブラック OWL-CBSATA-SLU30(BK) まずは SATA II ケーブル 3 本。これらは仕事で使います。先月、Samba\nサーバ用に買った 2 台の内蔵 1TB HDD を接続するケーブルです。同じも\nのが 3 つなかったので、色や種類が違う 3 本を買いました。1 本は予備\nです。\n↓先月買った内蔵 1TB HDD\n 扇風機  ずいぶん前に壊れたきり夏はエアコンだけで過ごしていました。扇風機と\nエアコンのコンボはかなり涼しいので、ずっと買おうと思っていたのです。\n一番シンプルで一番安いものを選びました。ヨドバシのポイントを使った\nら、お代は￥0でした。:^)\nニンテンドーDSi + 液晶保護フィルム + ドラゴンクエストIX    ？？？ おかしいなあ。買うつもりじゃなかったのにｗ\n実家に帰った時に、暇をつぶせそうです。","contentSnippet":"今日は川崎のヨドバシでいろいろ買ってきました。SATA II ケーブル SATAIIケーブル ストッパー付 片側Lコネクタ PSD30BK SATAIIケーブル ストッパー付 片側Lコネクタ PSD30BL オウルテック シリアルATA2ケーブル30cmブラック OWL-CBSATA-SLU30(BK) まずは SATA II ケーブル 3 本。これらは仕事で使います。先月、Sambaサーバ用に買った 2 台の内蔵 1TB HDD を接続するケーブルです。同じものが 3 つなかったので、色や種類が違う 3 本を買いました。1 本は予備です。↓先月買った内蔵 1TB HDD 扇風機  ずいぶん前に壊れたきり夏はエアコンだけで過ごしていました。扇風機とエアコンのコンボはかなり涼しいので、ずっと買おうと思っていたのです。一番シンプルで一番安いものを選びました。ヨドバシのポイントを使ったら、お代は￥0でした。:^)ニンテンドーDSi + 液晶保護フィルム + ドラゴンクエストIX    ？？？ おかしいなあ。買うつもりじゃなかったのにｗ実家に帰った時に、暇をつぶせそうです。","link":"https://masutaka.net/2009-08-01-2/","isoDate":"2009-08-01T01:00:00.000Z","dateMiliSeconds":1249088400000,"authorName":"masutaka"},{"title":"twittering-mode で「λかわいいよλ」が文字化けする件を調べた","content":"twittering-mode には、C-c C-l で「λかわいいよλ」と投稿できる、\nよく分からない機能がある。たいてい間違って投稿されるのだと思う。ｗ\nまあ、OFF にすればいいんだけどね。\nよく分からない機能ではあるけど、実際に使ってみるとハングルのような\n文字が投稿されてしまう。前から気づいていたんだけど、急に思い立って\n調べてみることにした。\n調査内容 まず、Emacs23 で再現し、Emacs22 では再現しないことが分かった。\ntwittering-update-lambda() の\n&ldquo;\\xd34b\\xd22b\\xd26f\\xd224\\xd224\\xd268\\xd34b&rdquo; を評価すると、以下のよ\nうに結果が異なる。\nEmacs22\nEmacs23\n&ldquo;λ&rdquo; の上にカーソルを置いて、&ldquo;C-u C-x =&rdquo; で文字コードを調べたところ、\nEmacs22 は #xd34b で、Emacs23 は #x3bb だった。\nmule-ja-2009:09607 で聞いてみたところ、Emacs23 では内部文字コードは\nUNICODE になったとのこと。じゃあ Emacs22 はなんだろうと思ってググっ\nてみたら、以下の変換式らしいと分かった。\n 0xc000 + JIS上位バイト*128 + JIS下位バイト\nhttp://www.dennougedougakkai-ndd.org/~delmonta/emacs/27.html  &ldquo;λ&rdquo; は JIS コードでは 0x264b、UNICODE(UTF-16) では 0x03bb 。\nこのことから、Emacs23 の内部文字コードが UNICODE である裏付けが取れた。\nでは &ldquo;λ&rdquo; の JIS コード 0x264b を、Emacs22 の変換式に当てはめてみようか。\n 0xc000 + (0x26 * 0x80) + 0x4b = 0xd34b","contentSnippet":"twittering-mode には、C-c C-l で「λかわいいよλ」と投稿できる、よく分からない機能がある。たいてい間違って投稿されるのだと思う。ｗまあ、OFF にすればいいんだけどね。よく分からない機能ではあるけど、実際に使ってみるとハングルのような文字が投稿されてしまう。前から気づいていたんだけど、急に思い立って調べてみることにした。調査内容 まず、Emacs23 で再現し、Emacs22 では再現しないことが分かった。twittering-update-lambda() の“\\xd34b\\xd22b\\xd26f\\xd224\\xd224\\xd268\\xd34b” を評価すると、以下のように結果が異なる。Emacs22Emacs23“λ” の上にカーソルを置いて、“C-u C-x =” で文字コードを調べたところ、Emacs22 は #xd34b で、Emacs23 は #x3bb だった。mule-ja-2009:09607 で聞いてみたところ、Emacs23 では内部文字コードはUNICODE になったとのこと。じゃあ Emacs22 はなんだろうと思ってググってみたら、以下の変換式らしいと分かった。 0xc000 + JIS上位バイト*128 + JIS下位バイトhttp://www.dennougedougakkai-ndd.org/~delmonta/emacs/27.html  “λ” は JIS コードでは 0x264b、UNICODE(UTF-16) では 0x03bb 。このことから、Emacs23 の内部文字コードが UNICODE である裏付けが取れた。では “λ” の JIS コード 0x264b を、Emacs22 の変換式に当てはめてみようか。 0xc000 + (0x26 * 0x80) + 0x4b = 0xd34b","link":"https://masutaka.net/2009-08-01-1/","isoDate":"2009-08-01T00:00:00.000Z","dateMiliSeconds":1249084800000,"authorName":"masutaka"},{"title":"Emacs-23.1 のビルドとインストール","content":"Emacs 23.1 released\nhttp://lists.gnu.org/archive/html/emacs-devel/2009-07/msg01526.html もう飽きるほどやっている Emacs のビルドとインストールだが、23.1 リ\nリース記念に記録を残すことにした。\n tar ball の展開。展開されて出来た emacs-23.1/INSTALL も確認すること。   % tar xjf emacs-23.1.tar.bz2\n ビルド用ワークディレクトリの作成と、チェンジディレクトリ。   % mkdir work; cd work\n configure 実行。xim は使わないので、OFF にした。\ntee 使っているのはログを残すため。私はソースからのビルドする時には、\nこのように必ずログを残すようにしている。   % ../emacs-23.1/configure &ndash;without-xim 2&gt;&amp;1 | tee ../emacs-23.1_configure.log\n% cp config.log ../emacs-23.1_config.log\nこのようなログが出力されれば成功。\n Where should the build process find the source code? /home/masutaka/share/src/emacs/emacs-23.1 What operating system and machine description files should Emacs use?","contentSnippet":"Emacs 23.1 releasedhttp://lists.gnu.org/archive/html/emacs-devel/2009-07/msg01526.html もう飽きるほどやっている Emacs のビルドとインストールだが、23.1 リリース記念に記録を残すことにした。 tar ball の展開。展開されて出来た emacs-23.1/INSTALL も確認すること。   % tar xjf emacs-23.1.tar.bz2 ビルド用ワークディレクトリの作成と、チェンジディレクトリ。   % mkdir work; cd work configure 実行。xim は使わないので、OFF にした。tee 使っているのはログを残すため。私はソースからのビルドする時には、このように必ずログを残すようにしている。   % ../emacs-23.1/configure –without-xim 2>&1 | tee ../emacs-23.1_configure.log% cp config.log ../emacs-23.1_config.logこのようなログが出力されれば成功。 Where should the build process find the source code? /home/masutaka/share/src/emacs/emacs-23.1 What operating system and machine description files should Emacs use?","link":"https://masutaka.net/2009-07-31-2/","isoDate":"2009-07-31T01:00:00.000Z","dateMiliSeconds":1249002000000,"authorName":"masutaka"},{"title":"ソースの検証","content":"Emacs-23.1 がリリースされた。せっかくなのでソースが改竄されていないか、検証をしっかりやってみた。\nEmacs 23.1 released\nhttp://lists.gnu.org/archive/html/emacs-devel/2009-07/msg01526.html 上記によると、MD5 check-sums は以下のとおり。\n17f7f0ba68a0432d58fa69d05a2225be emacs-23.1.tar.bz2 ふむ。合ってる。改竄はされていないだろう。\n% md5sum emacs-23.1.tar.bz2 17f7f0ba68a0432d58fa69d05a2225be emacs-23.1.tar.bz2 しかし、MD5 が 100% 信用できるわけではないので、emacs-23.1.tar.bz2 と同じ場所にある emacs-23.1.tar.bz2.sig を使って、さらに確かめる。\n% gpg --verify emacs-23.1.tar.bz2.sig emacs-23.1.tar.bz2 gpg: 2009年07月30日 10時18分53秒 JSTにDSA鍵ID BC40251Cで施された署名 gpg: 署名を検査できません: 公開鍵が見つかりません まあ、ID BC40251C の公開鍵は持ってないよね。公開鍵を取得しようか。\n% gpg --keyserver pgp.nic.ad.jp --recv-keys BC40251C gpg: 鍵BC40251Cをhkpからサーバーpgp.nic.ad.jpに要求 gpg: 鍵BC40251C: 公開鍵“Chong Yidong &lt;cyd@stupidchicken.com&gt;”を読み込みました gpg: 絶対的に信用する鍵が見つかりません gpg: 処理数の合計: 1 gpg: 読込み: 1 再度検証。警告はされたが、正しい署名であることは確認できた。終了。\n% gpg --verify emacs-23.1.tar.bz2.sig emacs-23.1.tar.bz2 gpg: 2009年07月30日 10時18分53秒 JSTにDSA鍵ID BC40251Cで施された署名 gpg: “Chong Yidong &lt;cyd@stupidchicken.","contentSnippet":"Emacs-23.1 がリリースされた。せっかくなのでソースが改竄されていないか、検証をしっかりやってみた。Emacs 23.1 releasedhttp://lists.gnu.org/archive/html/emacs-devel/2009-07/msg01526.html 上記によると、MD5 check-sums は以下のとおり。17f7f0ba68a0432d58fa69d05a2225be emacs-23.1.tar.bz2 ふむ。合ってる。改竄はされていないだろう。% md5sum emacs-23.1.tar.bz2 17f7f0ba68a0432d58fa69d05a2225be emacs-23.1.tar.bz2 しかし、MD5 が 100% 信用できるわけではないので、emacs-23.1.tar.bz2 と同じ場所にある emacs-23.1.tar.bz2.sig を使って、さらに確かめる。% gpg --verify emacs-23.1.tar.bz2.sig emacs-23.1.tar.bz2 gpg: 2009年07月30日 10時18分53秒 JSTにDSA鍵ID BC40251Cで施された署名 gpg: 署名を検査できません: 公開鍵が見つかりません まあ、ID BC40251C の公開鍵は持ってないよね。公開鍵を取得しようか。% gpg --keyserver pgp.nic.ad.jp --recv-keys BC40251C gpg: 鍵BC40251Cをhkpからサーバーpgp.nic.ad.jpに要求 gpg: 鍵BC40251C: 公開鍵“Chong Yidong <cyd@stupidchicken.com>”を読み込みました gpg: 絶対的に信用する鍵が見つかりません gpg: 処理数の合計: 1 gpg: 読込み: 1 再度検証。警告はされたが、正しい署名であることは確認できた。終了。% gpg --verify emacs-23.1.tar.bz2.sig emacs-23.1.tar.bz2 gpg: 2009年07月30日 10時18分53秒 JSTにDSA鍵ID BC40251Cで施された署名 gpg: “Chong Yidong <cyd@stupidchicken.","link":"https://masutaka.net/2009-07-31-1/","isoDate":"2009-07-31T00:00:00.000Z","dateMiliSeconds":1248998400000,"authorName":"masutaka"},{"title":"lsof","content":"Lsof オープン中のファイルと、そのファイルをオープンしているプロセスの\nリストを出力するコマンド。\n似たツールに netstat がある。\nnetstat このコマンドは、全てのアクティブな TCP コネクションと、そのマシンが\nlisten している TCP ポートおよび UDP ポートを表示する。\n&ldquo;netstat -an&rdquo; と使うことが多い。netstat は Windows でも使える。","contentSnippet":"Lsof オープン中のファイルと、そのファイルをオープンしているプロセスのリストを出力するコマンド。似たツールに netstat がある。netstat このコマンドは、全てのアクティブな TCP コネクションと、そのマシンがlisten している TCP ポートおよび UDP ポートを表示する。“netstat -an” と使うことが多い。netstat は Windows でも使える。","link":"https://masutaka.net/2009-07-27-2/","isoDate":"2009-07-27T01:00:00.000Z","dateMiliSeconds":1248656400000,"authorName":"masutaka"},{"title":"パターンにマッチした行を削除","content":"何をいまさらという感じもするけど。^^;\n空行を削除\n % sed -e &lsquo;/^$/d&rsquo; hoge.txt\n hoge とだけ書かれた行を削除\n % sed -e &lsquo;/^hoge$/d&rsquo; hoge.txt\n ","contentSnippet":"何をいまさらという感じもするけど。^^;空行を削除 % sed -e ‘/^$/d’ hoge.txt hoge とだけ書かれた行を削除 % sed -e ‘/^hoge$/d’ hoge.txt","link":"https://masutaka.net/2009-07-27-1/","isoDate":"2009-07-27T00:00:00.000Z","dateMiliSeconds":1248652800000,"authorName":"masutaka"},{"title":"OpenOffice.org を使ってみた","content":"OpenOffice.org 日本語プロジェクト OpenOffice.org に含まれる、プレゼンテーション用のアプリ Impress を\nちょろっと使ってみた。なかなか使いやすい。もう自宅用に MS-Office を\n買うことはないと思う。\nただ、デフォルトでテンプレートが 2 つしか含まれていないのは面倒だった。\nオープンオフィス 3 始める人のページ から辿ったページからダウンロードした。\nOpenOffice.org(おーぷんおふぃす・おるぐ)とは？  オープンソースのオフィススウィート。 Windows、UNIX 系 OS、Mac OS X で動作する。 MS-Office と互換性がある。 PDF 形式で保存することも出来る。 世界的なシェアは増加傾向だそう。最近では会津若松市が有名。  会津若松市がOpenOffice.orgを全庁的に導入へ - スラッシュドット・ジャパン OpenOffice.org導入の会津若松市が、ノウハウをまとめCCで公開 - スラッシュドット・ジャパン MS-Office との関連付け    機能名 オープンオフィスでの名前 マイクロソフトオフィスの対応ソフト     ワープロ ライター (Writer) ワード (Word)   表計算 カルク (Calc) エクセル (Excel)   プレゼンテーション インプレス (Impress) パワーポイント (PowerPoint)   データベース ベース (Base) アクセス (Access)   図形描画 ドロー (Draw) -    ","contentSnippet":"OpenOffice.org 日本語プロジェクト OpenOffice.org に含まれる、プレゼンテーション用のアプリ Impress をちょろっと使ってみた。なかなか使いやすい。もう自宅用に MS-Office を買うことはないと思う。ただ、デフォルトでテンプレートが 2 つしか含まれていないのは面倒だった。オープンオフィス 3 始める人のページ から辿ったページからダウンロードした。OpenOffice.org(おーぷんおふぃす・おるぐ)とは？  オープンソースのオフィススウィート。 Windows、UNIX 系 OS、Mac OS X で動作する。 MS-Office と互換性がある。 PDF 形式で保存することも出来る。 世界的なシェアは増加傾向だそう。最近では会津若松市が有名。  会津若松市がOpenOffice.orgを全庁的に導入へ - スラッシュドット・ジャパン OpenOffice.org導入の会津若松市が、ノウハウをまとめCCで公開 - スラッシュドット・ジャパン MS-Office との関連付け    機能名 オープンオフィスでの名前 マイクロソフトオフィスの対応ソフト     ワープロ ライター (Writer) ワード (Word)   表計算 カルク (Calc) エクセル (Excel)   プレゼンテーション インプレス (Impress) パワーポイント (PowerPoint)   データベース ベース (Base) アクセス (Access)   図形描画 ドロー (Draw) -","link":"https://masutaka.net/2009-07-21-1/","isoDate":"2009-07-21T00:00:00.000Z","dateMiliSeconds":1248134400000,"authorName":"masutaka"},{"title":"２台のマシンでキーボードとマウスを共有する","content":"私は PC を 2 台持っていて、それぞれ以下の用途に使っている。\n   用途 OS 形態     Windows マシン WindowsXP ノート PC   Linux マシン Debian GNU/Linux squeeze デスクトップ PC    ノート PC の液晶はずいぶん前から壊れていて、画面の半分位を縦線が占\nめるようになってしまった。そのため、ノート PC とデスクトップ PC は\n同じ液晶モニタに接続し、前面のボタンで画面を切り替えて使っている。\nキーボードとマウスはそれぞれの PC に繋がっているものを使っている。\nキーボードとマウスを共有させてみるか synergy を使えばノート PC に繋げているマウスが必要なくなって、机の\n上を少し広く使えるかも？と、ふと思ったので早速試してみた。\nsynergy とはネットワーク上の複数のマシンのキーボードとマウスを共有\nできるアプリ。Linux、Windows、Mac OS X に対応している。\n設置ポリシー Linux マシンをサーバ、Windows マシンをクライアントとする。\nサーバの設定   Synaptic パッケージマネージャから、synergy をインストールした。\n(Synaptic からインストールすると履歴が残るので、私は最近 aptitude\nではなく Synaptic を使うようにしている。)","contentSnippet":"私は PC を 2 台持っていて、それぞれ以下の用途に使っている。   用途 OS 形態     Windows マシン WindowsXP ノート PC   Linux マシン Debian GNU/Linux squeeze デスクトップ PC    ノート PC の液晶はずいぶん前から壊れていて、画面の半分位を縦線が占めるようになってしまった。そのため、ノート PC とデスクトップ PC は同じ液晶モニタに接続し、前面のボタンで画面を切り替えて使っている。キーボードとマウスはそれぞれの PC に繋がっているものを使っている。キーボードとマウスを共有させてみるか synergy を使えばノート PC に繋げているマウスが必要なくなって、机の上を少し広く使えるかも？と、ふと思ったので早速試してみた。synergy とはネットワーク上の複数のマシンのキーボードとマウスを共有できるアプリ。Linux、Windows、Mac OS X に対応している。設置ポリシー Linux マシンをサーバ、Windows マシンをクライアントとする。サーバの設定   Synaptic パッケージマネージャから、synergy をインストールした。(Synaptic からインストールすると履歴が残るので、私は最近 aptitudeではなく Synaptic を使うようにしている。)","link":"https://masutaka.net/2009-07-20-3/","isoDate":"2009-07-20T02:00:00.000Z","dateMiliSeconds":1248055200000,"authorName":"masutaka"},{"title":"テレビのリモコン","content":"いろんな使い道があるんだなあ。(違)\n   元ネタ:\nテレビ埼玉のCMがマジでキチガイじみてる件 - アルファルファモザイク ","contentSnippet":"いろんな使い道があるんだなあ。(違)   元ネタ:テレビ埼玉のCMがマジでキチガイじみてる件 - アルファルファモザイク","link":"https://masutaka.net/2009-07-20-2/","isoDate":"2009-07-20T01:00:00.000Z","dateMiliSeconds":1248051600000,"authorName":"masutaka"},{"title":"キーロガー","content":" F1 l (M-x view-lossage)\nそれまでに打鍵した最後の 300 個のコマンド文字を表示します。\n ","contentSnippet":"F1 l (M-x view-lossage)それまでに打鍵した最後の 300 個のコマンド文字を表示します。","link":"https://masutaka.net/2009-07-20-1/","isoDate":"2009-07-20T00:00:00.000Z","dateMiliSeconds":1248048000000,"authorName":"masutaka"},{"title":"@nifty の DNS サーバ ","content":"@nifty の DNS サーバがおかしくなったときに、代わりに使った DNS サーバ。\n 202.248.37.74\n202.248.20.133\n ちなみに、今日の WAN 側の設定は以下であった。\n         IPアドレス 211.2.102.77   PPPサーバIP 218.231.1.55   DNS1(プライマリ) 218.231.0.3 (自動取得)   DNS2(セカンダリ) 218.231.0.35 (自動取得)   MTU値 1454    追記(2011-10-01):\n今だったら、Google Public DNS を使えば良いね。\n8.8.8.8 and 8.8.4.4","contentSnippet":"@nifty の DNS サーバがおかしくなったときに、代わりに使った DNS サーバ。 202.248.37.74202.248.20.133 ちなみに、今日の WAN 側の設定は以下であった。         IPアドレス 211.2.102.77   PPPサーバIP 218.231.1.55   DNS1(プライマリ) 218.231.0.3 (自動取得)   DNS2(セカンダリ) 218.231.0.35 (自動取得)   MTU値 1454    追記(2011-10-01):今だったら、Google Public DNS を使えば良いね。8.8.8.8 and 8.8.4.4","link":"https://masutaka.net/2009-07-18-3/","isoDate":"2009-07-18T02:00:00.000Z","dateMiliSeconds":1247882400000,"authorName":"masutaka"},{"title":"minibuf-isearch","content":"バージョンが古かったので最新にしようと思ったら、subversion リポジト\nリが公開されていたことに気がついた。そこで、メンテナンスの手間を省\nくために、site-lisp ディレクトリからシンボリックリンクを張ることにした。\n まず、以下のコマンドで適当なディレクトリに checkout した。  % svn checkout http://svn.coderepos.org/share/lang/elisp/minibuf-isearch /usr/local/share/emacs/site-lisp から、checkout した\nminibuf-isearch ディレクトリにシンボリックリンクを張った。  minibuf-isearch とは？ Emacs のデフォルトの動作では、C-x C-f でファイル名を入力する時など\nに、M-p を打つと１つ前の履歴を取り出すことが出来る。\nminibuf-isearch を使うと、M-p の代わりに C-r することで履歴をインク\nリメンタルに検索することが出来る。bash や zsh のそれと同じ。\n設定例 参考までに私の設定は以下のとおり。\n(require &#39;minibuf-isearch)  ;; メッセージがミニバッファの右端に表示される。 (setq minibuf-isearch-message-on-right t) 関連サイト minibuf-isearch オフィシャルサイト 横着プログラミング 第3回: 履歴マニア 追記(2011-11-27):\nEmacs23 では minibuf-isearch 相当の機能が入っているので、\nこの elisp は不要になりました。","contentSnippet":"バージョンが古かったので最新にしようと思ったら、subversion リポジトリが公開されていたことに気がついた。そこで、メンテナンスの手間を省くために、site-lisp ディレクトリからシンボリックリンクを張ることにした。 まず、以下のコマンドで適当なディレクトリに checkout した。  % svn checkout http://svn.coderepos.org/share/lang/elisp/minibuf-isearch /usr/local/share/emacs/site-lisp から、checkout したminibuf-isearch ディレクトリにシンボリックリンクを張った。  minibuf-isearch とは？ Emacs のデフォルトの動作では、C-x C-f でファイル名を入力する時などに、M-p を打つと１つ前の履歴を取り出すことが出来る。minibuf-isearch を使うと、M-p の代わりに C-r することで履歴をインクリメンタルに検索することが出来る。bash や zsh のそれと同じ。設定例 参考までに私の設定は以下のとおり。(require 'minibuf-isearch)  ;; メッセージがミニバッファの右端に表示される。 (setq minibuf-isearch-message-on-right t) 関連サイト minibuf-isearch オフィシャルサイト 横着プログラミング 第3回: 履歴マニア 追記(2011-11-27):Emacs23 では minibuf-isearch 相当の機能が入っているので、この elisp は不要になりました。","link":"https://masutaka.net/2009-07-18-2/","isoDate":"2009-07-18T01:00:00.000Z","dateMiliSeconds":1247878800000,"authorName":"masutaka"},{"title":"QuickRestart","content":"QuickRestart - Firefox Addons 「ファイル」メニューに「Firefoxを再起動する」を追加するだけのアドオン。\nシンプルで素晴らしい。再起動時にタブの状態は保持される。","contentSnippet":"QuickRestart - Firefox Addons 「ファイル」メニューに「Firefoxを再起動する」を追加するだけのアドオン。シンプルで素晴らしい。再起動時にタブの状態は保持される。","link":"https://masutaka.net/2009-07-18-1/","isoDate":"2009-07-18T00:00:00.000Z","dateMiliSeconds":1247875200000,"authorName":"masutaka"},{"title":"Emacs講座 -第9回- C コーディングスタイル","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回\ncc-mode Emacs では cc-mode というパッケージが C 系言語のコーディングスタイ\nルを統括しています。cc-mode はパッケージ名で、個々のメジャーモード\n名は c-mode や c++-mode です。\ncc-mode がサポートする言語を cc-mode.el から抜粋しておきます。\n CC Mode supports K&amp;R and ANSI C, ANSI C++, Objective-C, Java,\nCORBA&rsquo;s IDL, Pike and AWK with a consistent indentation model\nacross all modes.\n 設定例 前述の言語の中で私が使うのは C 言語だけで、以下の設定をしていました。\n(add-hook &#39;c-mode-common-hook  (lambda ()  (c-set-style &#34;bsd&#34;) ;;; (a)  (setq c-basic-offset 4) ;;; (b)  ;; 演算式が複数行にまたがるときのオフセット  (c-set-offset &#39;statement-cont &#39;c-lineup-math) ;;; (c)  ;; 行末のスペースやタブに色づけして警告する。  (setq show-trailing-whitespace t))) ;;; (d) c-mode-common-hook は C と C++ 両方に影響する hook です。C だけに設","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回cc-mode Emacs では cc-mode というパッケージが C 系言語のコーディングスタイルを統括しています。cc-mode はパッケージ名で、個々のメジャーモード名は c-mode や c++-mode です。cc-mode がサポートする言語を cc-mode.el から抜粋しておきます。 CC Mode supports K&R and ANSI C, ANSI C++, Objective-C, Java,CORBA’s IDL, Pike and AWK with a consistent indentation modelacross all modes. 設定例 前述の言語の中で私が使うのは C 言語だけで、以下の設定をしていました。(add-hook 'c-mode-common-hook  (lambda ()  (c-set-style \"bsd\") ;;; (a)  (setq c-basic-offset 4) ;;; (b)  ;; 演算式が複数行にまたがるときのオフセット  (c-set-offset 'statement-cont 'c-lineup-math) ;;; (c)  ;; 行末のスペースやタブに色づけして警告する。  (setq show-trailing-whitespace t))) ;;; (d) c-mode-common-hook は C と C++ 両方に影響する hook です。C だけに設","link":"https://masutaka.net/2009-07-16-1/","isoDate":"2009-07-16T00:00:00.000Z","dateMiliSeconds":1247702400000,"authorName":"masutaka"},{"title":"dwww","content":"dwww パッケージをインストールすると\n[GNOME メニュー]→[アクセサリ]→[Debian Documentation Browser]\nまたは\nSynaptic メニューの [パッケージ]→[ドキュメントを参照]\nからインストール済みの全オンライン文書を、ローカルの HTTP サーバで\n参照することが出来る。(文書は英語。)\n※ Synaptic は [GNOME メニュー]→[システム]→[システム管理]→\n[Synaptic パッケージマネージャ] から起動できる。","contentSnippet":"dwww パッケージをインストールすると[GNOME メニュー]→[アクセサリ]→[Debian Documentation Browser]またはSynaptic メニューの [パッケージ]→[ドキュメントを参照]からインストール済みの全オンライン文書を、ローカルの HTTP サーバで参照することが出来る。(文書は英語。)※ Synaptic は [GNOME メニュー]→[システム]→[システム管理]→[Synaptic パッケージマネージャ] から起動できる。","link":"https://masutaka.net/2009-07-12-5/","isoDate":"2009-07-12T04:00:00.000Z","dateMiliSeconds":1247371200000,"authorName":"masutaka"},{"title":"Software Sources","content":"[GNOME メニュー]→[システム]→[システム管理]→[Software Sources]\nインストールまたはアップデートできる APT パッケージの場所についての\n情報は /etc/apt/sources.list に書かれている。\n今までは場所の追加や削除をするときはテキストエディタで修正していた\nが、&ldquo;Software Sources&rdquo; という GUI ツールがあるのを今日知った。今後\nはこちらを使うことにしようかな。","contentSnippet":"[GNOME メニュー]→[システム]→[システム管理]→[Software Sources]インストールまたはアップデートできる APT パッケージの場所についての情報は /etc/apt/sources.list に書かれている。今までは場所の追加や削除をするときはテキストエディタで修正していたが、“Software Sources” という GUI ツールがあるのを今日知った。今後はこちらを使うことにしようかな。","link":"https://masutaka.net/2009-07-12-4/","isoDate":"2009-07-12T03:00:00.000Z","dateMiliSeconds":1247367600000,"authorName":"masutaka"},{"title":"xpdf-japanese","content":"文字化けする pdf ファイルがあったんだけど、xpdf-japanese をインストー\nルしたら文字化けが直った。\n# aptitude install xpdf-japanese xpdf-japanese の他に、cmap-adobe-japan1 ttf-kochi-gothic\nttf-kochi-mincho が自動的にインストールされた。","contentSnippet":"文字化けする pdf ファイルがあったんだけど、xpdf-japanese をインストールしたら文字化けが直った。# aptitude install xpdf-japanese xpdf-japanese の他に、cmap-adobe-japan1 ttf-kochi-gothicttf-kochi-mincho が自動的にインストールされた。","link":"https://masutaka.net/2009-07-12-3/","isoDate":"2009-07-12T02:00:00.000Z","dateMiliSeconds":1247364000000,"authorName":"masutaka"},{"title":"ディレクトリ→ファイルの順に並べる","content":"Dired の表示を Windows のように「ディレクトリ→ファイル」の順にする方法。\n(add-hook &#39;dired-load-hook  (lambda ()  (require &#39;ls-lisp)  (setq ls-lisp-use-insert-directory-program nil)  (setq ls-lisp-dirs-first t))) ls コマンドの代わりに elisp でディレクトリを表示することになるので、\n表示は遅いかもしれない。まあ参考程度で。","contentSnippet":"Dired の表示を Windows のように「ディレクトリ→ファイル」の順にする方法。(add-hook 'dired-load-hook  (lambda ()  (require 'ls-lisp)  (setq ls-lisp-use-insert-directory-program nil)  (setq ls-lisp-dirs-first t))) ls コマンドの代わりに elisp でディレクトリを表示することになるので、表示は遅いかもしれない。まあ参考程度で。","link":"https://masutaka.net/2009-07-12-2/","isoDate":"2009-07-12T01:00:00.000Z","dateMiliSeconds":1247360400000,"authorName":"masutaka"},{"title":"行間を広くする","content":"VL ゴシックの行間が広いので狭くする方法を調べていたら、広くする方法\nが見つかった。ｗ\n(setq line-spacing 0.1) 小数値を設定すると行の高さに対して相対値で設定され、整数値を設定す\nるとピクセル数で設定されるらしい。\n設定すると即座にカレントバッファに反映されるので、Emacs を 2 つ起動\nしてちょうど良い値を設定すると良いと思う。\nVL ゴシックの行間を狭める方法は継続して調査中。フォントを変更する以\n外ない気がしているので、他のフォントに変えることも検討している。\n参考にしたページ:\nEmacsのとりあえず最低限の環境を整える - ubulog ","contentSnippet":"VL ゴシックの行間が広いので狭くする方法を調べていたら、広くする方法が見つかった。ｗ(setq line-spacing 0.1) 小数値を設定すると行の高さに対して相対値で設定され、整数値を設定するとピクセル数で設定されるらしい。設定すると即座にカレントバッファに反映されるので、Emacs を 2 つ起動してちょうど良い値を設定すると良いと思う。VL ゴシックの行間を狭める方法は継続して調査中。フォントを変更する以外ない気がしているので、他のフォントに変えることも検討している。参考にしたページ:Emacsのとりあえず最低限の環境を整える - ubulog","link":"https://masutaka.net/2009-07-12-1/","isoDate":"2009-07-12T00:00:00.000Z","dateMiliSeconds":1247356800000,"authorName":"masutaka"},{"title":"テカテカでない液晶モニタを買いました","content":"去年の８月に DELL Inspiron 530s と一緒に買った光沢液晶 (SP2208WFP )\nを使い始めてから、目がやけに疲れるようになりました。視力も落ちたと\n思います。\n最近特に耐えられなくなってきたので、今日ヨドバシで三菱のノングレア\n液晶モニタを買いました。店頭価格は ￥31,070 でしたが、溜まっていた\nポイントを使ったら ￥25,199 になりました。\n 購入する時にこだわったこと、こだわらなかったことです。\n 絶対にグレア液晶は買いません。 サイズは今と同じ 22 インチワイドです。 色味にこだわりはありません。テキストが見やすいものを買います。 スピーカーが付属したものを買います。ただし音にこだわりはありません。 入力デバイスの切り替えがスムーズにできるものを買います。  やっぱり、ノングレア液晶はいいですねえ。良い買い物をしました。\n以下は購入してから分かったことです。\n 高さは、３個付属するプラスチックのブロックを付けたり外したりして調\n節します。微妙な調節はできませんが、特に不満はありませんでした。 画面の角度は、ある程度自由に変えられます。 安定感は少しなくなりますが、底のスタンドの後部を外すと、作業スペー\nスを広く保てます。 一体型スピーカーは ≫ ボタンで音量調整できます。スピーカーの音は、\nやはりショボかったです。 メニューから、スタンダード、テキスト、ムービー等の映像モードを選べ\nます。もちろん、自分で微調整もできます。メニューに入らずに ≪ ボタ\nンからのショートカットも用意されています。 INPUT/EXIT ボタンを 1 回押すだけで、次の入力デバイスに変更出来ます。  SP2208WFP に比べ、良くなったこと、悪くなったことです。\n良くなったこと\n 照明器具や太陽の光が映り込まなくなりました。 自分の姿が映り込まなくなりました。 テキストが見やすくなりました。 画面を暗くしても、テキストが見づらくならなくなりました。 入力デバイスを変更するために押すボタンの回数が減りました。今までは\n4 回くらい押す必要がありましたが、今は 1 回で済みます。INPUT/EXIT\nボタンを押した時に、使っていない入力デバイスをスキップ出来る点は気\nが利いています。  悪くなったこと\n 結構簡単に本体が揺れます。底のスタンド後部を外したため？ 音がショボくなりました。 スピーカーの音量調節がやりづらくなりました。(前はダイヤル式で簡単で","contentSnippet":"去年の８月に DELL Inspiron 530s と一緒に買った光沢液晶 (SP2208WFP )を使い始めてから、目がやけに疲れるようになりました。視力も落ちたと思います。最近特に耐えられなくなってきたので、今日ヨドバシで三菱のノングレア液晶モニタを買いました。店頭価格は ￥31,070 でしたが、溜まっていたポイントを使ったら ￥25,199 になりました。 購入する時にこだわったこと、こだわらなかったことです。 絶対にグレア液晶は買いません。 サイズは今と同じ 22 インチワイドです。 色味にこだわりはありません。テキストが見やすいものを買います。 スピーカーが付属したものを買います。ただし音にこだわりはありません。 入力デバイスの切り替えがスムーズにできるものを買います。  やっぱり、ノングレア液晶はいいですねえ。良い買い物をしました。以下は購入してから分かったことです。 高さは、３個付属するプラスチックのブロックを付けたり外したりして調節します。微妙な調節はできませんが、特に不満はありませんでした。 画面の角度は、ある程度自由に変えられます。 安定感は少しなくなりますが、底のスタンドの後部を外すと、作業スペースを広く保てます。 一体型スピーカーは ≫ ボタンで音量調整できます。スピーカーの音は、やはりショボかったです。 メニューから、スタンダード、テキスト、ムービー等の映像モードを選べます。もちろん、自分で微調整もできます。メニューに入らずに ≪ ボタンからのショートカットも用意されています。 INPUT/EXIT ボタンを 1 回押すだけで、次の入力デバイスに変更出来ます。  SP2208WFP に比べ、良くなったこと、悪くなったことです。良くなったこと 照明器具や太陽の光が映り込まなくなりました。 自分の姿が映り込まなくなりました。 テキストが見やすくなりました。 画面を暗くしても、テキストが見づらくならなくなりました。 入力デバイスを変更するために押すボタンの回数が減りました。今までは4 回くらい押す必要がありましたが、今は 1 回で済みます。INPUT/EXITボタンを押した時に、使っていない入力デバイスをスキップ出来る点は気が利いています。  悪くなったこと 結構簡単に本体が揺れます。底のスタンド後部を外したため？ 音がショボくなりました。 スピーカーの音量調節がやりづらくなりました。(前はダイヤル式で簡単で","link":"https://masutaka.net/2009-07-11-1/","isoDate":"2009-07-11T00:00:00.000Z","dateMiliSeconds":1247270400000,"authorName":"masutaka"},{"title":"Emacs講座 -第8回- タブ幅","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 ３つの変数 Emacs のタブ幅には、３つの変数が関係しています。\ntab-width タブコードを半角スペースいくつ分で表示するかを制御する変数です。\n各バッファ毎に設定できます。デフォルトは 8 です。\ndefault-tab-width tab-width のデフォルト値です。全てのバッファに影響する変数です。\nデフォルトは 8 です。\ntab-stop-list TAB キーを押した時に、カーソルが移動するカラムの位置です。デフォル\nトは (8 16 24 32 40 48 56 64 72 80 88 96 104 112 120) です。\n例えばタブ幅を 4 に変更したい場合は以下のようなコードを ~/.emacs に\n記述します。\n(setq-default tab-width 4) (setq default-tab-width 4) (setq tab-stop-list &#39;(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60  64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)) 関数化してみよう tab-stop-list の設定が少し煩雑ですよね。以前は手計算で","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 ３つの変数 Emacs のタブ幅には、３つの変数が関係しています。tab-width タブコードを半角スペースいくつ分で表示するかを制御する変数です。各バッファ毎に設定できます。デフォルトは 8 です。default-tab-width tab-width のデフォルト値です。全てのバッファに影響する変数です。デフォルトは 8 です。tab-stop-list TAB キーを押した時に、カーソルが移動するカラムの位置です。デフォルトは (8 16 24 32 40 48 56 64 72 80 88 96 104 112 120) です。例えばタブ幅を 4 に変更したい場合は以下のようなコードを ~/.emacs に記述します。(setq-default tab-width 4) (setq default-tab-width 4) (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60  64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)) 関数化してみよう tab-stop-list の設定が少し煩雑ですよね。以前は手計算で","link":"https://masutaka.net/2009-07-10-4/","isoDate":"2009-07-10T03:00:00.000Z","dateMiliSeconds":1247194800000,"authorName":"masutaka"},{"title":"スロトレ","content":"[2008-12-12-2] に買った「一生太らない体のつくり方 」。\n付録のスロトレの動画を見つけた。これは参考になるわ。\nメタボ侍「スロトレ」に挑戦！石井直方教授に聞く\n1/5 ウォームアップ -- YouTube 2/5 ニートゥチェスト -- YouTube 3/5 スクワット -- YouTube 4/5 プッシュアップ -- YouTube 5/5 アームレッグクロスレイズ -- YouTube 付録のプッシュアップは台の上に手をついてやっていたんだけど、この動\n画では台は使っていない。必要ってわけじゃないのか。ちょうどよい台が\nなかったから助かる。\n追記(2009-07-13):\nこの動画だとストレッチをやっていないけれど、ストレッチは非常に大事\nらしいので、実際はストレッチを間にはさんでください。本当にやるんだっ\nたら、本を買った方が良いと思いますけど。","contentSnippet":"[2008-12-12-2] に買った「一生太らない体のつくり方 」。付録のスロトレの動画を見つけた。これは参考になるわ。メタボ侍「スロトレ」に挑戦！石井直方教授に聞く1/5 ウォームアップ -- YouTube 2/5 ニートゥチェスト -- YouTube 3/5 スクワット -- YouTube 4/5 プッシュアップ -- YouTube 5/5 アームレッグクロスレイズ -- YouTube 付録のプッシュアップは台の上に手をついてやっていたんだけど、この動画では台は使っていない。必要ってわけじゃないのか。ちょうどよい台がなかったから助かる。追記(2009-07-13):この動画だとストレッチをやっていないけれど、ストレッチは非常に大事らしいので、実際はストレッチを間にはさんでください。本当にやるんだったら、本を買った方が良いと思いますけど。","link":"https://masutaka.net/2009-07-10-3/","isoDate":"2009-07-10T02:00:00.000Z","dateMiliSeconds":1247191200000,"authorName":"masutaka"},{"title":"swf から音声を抜き出す方法","content":"swftools をインストールする。\n# aptitude install swftools swfextract コマンドに -m を付けると、音声を output.mp3 に出力する。\n% swfextract -m hoge.swf -o を付けると、ファイル名を指定できる。\n% swfextract -mo hoge.mp3 hoge.swf [linux]swfから音声を抜き出す方法 - (rubikitch loves (Emacs Ruby CUI)) ","contentSnippet":"swftools をインストールする。# aptitude install swftools swfextract コマンドに -m を付けると、音声を output.mp3 に出力する。% swfextract -m hoge.swf -o を付けると、ファイル名を指定できる。% swfextract -mo hoge.mp3 hoge.swf [linux]swfから音声を抜き出す方法 - (rubikitch loves (Emacs Ruby CUI))","link":"https://masutaka.net/2009-07-10-2/","isoDate":"2009-07-10T01:00:00.000Z","dateMiliSeconds":1247187600000,"authorName":"masutaka"},{"title":"水平スクロール","content":"間違って実行することがあって地味に困るので、メモしておく。\n&ldquo;C-x &lt;&rdquo; or &ldquo;M-x scroll-left&rdquo;\nカレントウィンドウのテキストを左にスクロールする。\n&ldquo;C-x &gt;&rdquo; or &ldquo;M-x scroll-right&rdquo;\n右にスクロールする。\n以下の設定をしておくと、ポイントがウィンドウの右端からはみ出した時\nに自動で横方向にスクロールする。\n(setq truncate-lines t) ","contentSnippet":"間違って実行することがあって地味に困るので、メモしておく。“C-x <” or “M-x scroll-left”カレントウィンドウのテキストを左にスクロールする。“C-x >” or “M-x scroll-right”右にスクロールする。以下の設定をしておくと、ポイントがウィンドウの右端からはみ出した時に自動で横方向にスクロールする。(setq truncate-lines t)","link":"https://masutaka.net/2009-07-10-1/","isoDate":"2009-07-10T00:00:00.000Z","dateMiliSeconds":1247184000000,"authorName":"masutaka"},{"title":"Emacs講座 -第7回- 文字コード","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 さあ、文字コードです。\n文字コードの設定 いきなり矛盾しますが、最近の Emacs(例:23.3) では文字コードの設定は\n不要です。\nEmacs はデフォルトの状態でも、文字コードを自動判別してファイルを開\nくことが出来ます。新規作成ファイルの文字コードも locale の設定によっ\nて自動決定されます。\nもしあなたの ~/.emacs に下の設定が書いてあったら削除しましょう。\nもはや廃れた設定です。参考情報: mule-ja-2009:09813 (set-language-environment &#34;Japanese&#34;) (prefer-coding-system &#39;utf-8) (set-default-coding-systems &#39;utf-8) (set-terminal-coding-system &#39;utf-8) (set-keyboard-coding-system &#39;utf-8) (setq-default buffer-file-coding-system &#39;utf-8) Mac OS X における文字コードの設定 Mac ではファイルシステムに HFS+ を使っているため、濁点や半濁点の扱\nいが Windows と Linux と異なるそうです。これを回避するため、以下の\n設定が必要とのこと。Emacs-23.2 以上で設定可能です。\n(require &#39;ucs-normalize) (set-file-name-coding-system &#39;utf-8-hfs) (setq locale-coding-system &#39;utf-8-hfs) 紹介マニアどらふと版: Mac OS X におけるファイル名に関するメモ(NFC, NFD等) 文字コード関連の便利機能 Ctrl-x Ctrl-m c &lt;文字コード&gt; [Enter] Ctrl-x Ctrl-v [Enter] 文字コードを指定し直して、現在開いているファイルを開き直す方法です。","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 さあ、文字コードです。文字コードの設定 いきなり矛盾しますが、最近の Emacs(例:23.3) では文字コードの設定は不要です。Emacs はデフォルトの状態でも、文字コードを自動判別してファイルを開くことが出来ます。新規作成ファイルの文字コードも locale の設定によって自動決定されます。もしあなたの ~/.emacs に下の設定が書いてあったら削除しましょう。もはや廃れた設定です。参考情報: mule-ja-2009:09813 (set-language-environment \"Japanese\") (prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) (setq-default buffer-file-coding-system 'utf-8) Mac OS X における文字コードの設定 Mac ではファイルシステムに HFS+ を使っているため、濁点や半濁点の扱いが Windows と Linux と異なるそうです。これを回避するため、以下の設定が必要とのこと。Emacs-23.2 以上で設定可能です。(require 'ucs-normalize) (set-file-name-coding-system 'utf-8-hfs) (setq locale-coding-system 'utf-8-hfs) 紹介マニアどらふと版: Mac OS X におけるファイル名に関するメモ(NFC, NFD等) 文字コード関連の便利機能 Ctrl-x Ctrl-m c <文字コード> [Enter] Ctrl-x Ctrl-v [Enter] 文字コードを指定し直して、現在開いているファイルを開き直す方法です。","link":"https://masutaka.net/2009-07-09-1/","isoDate":"2009-07-09T00:00:00.000Z","dateMiliSeconds":1247097600000,"authorName":"masutaka"},{"title":"Emacs講座 -第6回- load-path","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 本項は、ネット上から *.el をダウンロードして、いろいろ試したくなってきたあたりで読むと良いと思います。load-path の仕組みを理解しましょう。\nload-path とは何か？ UNIX や Windows 等に存在する「環境変数 PATH」の Emacs 版です。\n例えば ls を実行すると、「環境変数 PATH」に登録された最初のディレクトリから ls が検索され、最初にヒットした ls が使われますよね？\nまた、どのディレクトリにも ls が存在しなければ、\n command not found: ls\n などといったエラーが発生します。\nEmacs では例えば ~/.emacs に以下のようなコードを書くと load-path が参照されます。\n(require &#39;hoge) load-path は Emacs Lisp の変数です。どんな値が入っているのかは第3回 の方法で調べられます。\nload-path には複数のディレクトリが登録されているはずです。\nまず先頭のディレクトリについて、以下の順で検査が行われます。第2回 の .emacs と同じですね。\n hoge.elc が存在するか？ hoge.el が存在するか？ hoge が存在するか？  1, 2, 3 のどれにも当てはまらなければ、次のディレクトリが検査されます。","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 本項は、ネット上から *.el をダウンロードして、いろいろ試したくなってきたあたりで読むと良いと思います。load-path の仕組みを理解しましょう。load-path とは何か？ UNIX や Windows 等に存在する「環境変数 PATH」の Emacs 版です。例えば ls を実行すると、「環境変数 PATH」に登録された最初のディレクトリから ls が検索され、最初にヒットした ls が使われますよね？また、どのディレクトリにも ls が存在しなければ、 command not found: ls などといったエラーが発生します。Emacs では例えば ~/.emacs に以下のようなコードを書くと load-path が参照されます。(require 'hoge) load-path は Emacs Lisp の変数です。どんな値が入っているのかは第3回 の方法で調べられます。load-path には複数のディレクトリが登録されているはずです。まず先頭のディレクトリについて、以下の順で検査が行われます。第2回 の .emacs と同じですね。 hoge.elc が存在するか？ hoge.el が存在するか？ hoge が存在するか？  1, 2, 3 のどれにも当てはまらなければ、次のディレクトリが検査されます。","link":"https://masutaka.net/2009-07-05-3/","isoDate":"2009-07-05T02:00:00.000Z","dateMiliSeconds":1246759200000,"authorName":"masutaka"},{"title":"Twitter の便利情報","content":"私のTwitterスタイル - 304 Not Modified ◎buzztter 今 Twitter のタイムラインで頻出しているキーワードを教えてくれるサービス。\n◎ふぁぼったー Twitter にあるお気に入りの可視化サービス。自分の発言が誰にどのくら\nいふぁぼられているのかが分かる。→ マスタカのふぁぼられ Twitter には、まだまだ私の知らない使い道がありそう。","contentSnippet":"私のTwitterスタイル - 304 Not Modified ◎buzztter 今 Twitter のタイムラインで頻出しているキーワードを教えてくれるサービス。◎ふぁぼったー Twitter にあるお気に入りの可視化サービス。自分の発言が誰にどのくらいふぁぼられているのかが分かる。→ マスタカのふぁぼられ Twitter には、まだまだ私の知らない使い道がありそう。","link":"https://masutaka.net/2009-07-05-2/","isoDate":"2009-07-05T01:00:00.000Z","dateMiliSeconds":1246755600000,"authorName":"masutaka"},{"title":"move-file-to-trash","content":"Emacs23 から使えるようになった関数。Dired からも使えるようにすると\n便利かもしれない。\n実行すると以下のプロンプトが現われ、ファイル名かディレクトリ名の\n入力を促される。\n Move file to trash: ~/\n 指定したファイルやディレクトリは trash-directory に移動される。\ntrash-directory の初期値は &ldquo;~/.Trash&rdquo;。\n既に trash-directory に同名のファイルがあると、以下のようにリネーム\nされるようだ。\n hoge.txt\nhoge.txt.~1~\n ","contentSnippet":"Emacs23 から使えるようになった関数。Dired からも使えるようにすると便利かもしれない。実行すると以下のプロンプトが現われ、ファイル名かディレクトリ名の入力を促される。 Move file to trash: ~/ 指定したファイルやディレクトリは trash-directory に移動される。trash-directory の初期値は “~/.Trash”。既に trash-directory に同名のファイルがあると、以下のようにリネームされるようだ。 hoge.txthoge.txt.~1~","link":"https://masutaka.net/2009-07-05-1/","isoDate":"2009-07-05T00:00:00.000Z","dateMiliSeconds":1246752000000,"authorName":"masutaka"},{"title":"Emacs講座 -第5回- キーバインドの変更","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 Emacs では数多くの関数がキーに割り当てられています。その中には押しやすいものもあれば、押しづらいものもあります。また、全ての関数がキーに割り当てられているわけではないため、頻繁に使う関数なのに\n M-x hogehoge [Enter]\n などと実行しなければならない場合もあります。\nという状況ではありますが、Emacs のキーバインドはフルカスタマイズ可能です。カスタマイズするしかないでしょう。:-)\nポリシー 私は以下のことを念頭に置いて、キーバインドを変更しています。\n デフォルトのキーバインドは、極力変更しない。 連打することがあるコマンドは１ストローク(例: Ctrl-t)。 連打する必要が少ない、もしくはやや危険なコマンドは２ストローク(例: Ctrl-q Ctrl-h)。 ２ストロークにする時は、全て Ctrl-q Ctrl-h のような Ctrl を介したものにする。例えば Ctrl-q h だと、Ctrl キーを一旦ニュートラルにする必要があるので、Ctrl-q Ctrl-h より確実に遅い。 カーソルキーやファンクションキーは遠いので、極力使わない。  知っておくべきこと 例えば、Ctrl-n というキーを押すと next-line という関数が呼ばれます。Ctrl-f は forward-char です。ただの a というキーにも self-insert-command という関数が割り当てられています。\nこのように、全てのキーに関数が割り当てられています。\nでは、どうやって調べたらよいでしょうか？これを調べるヘルプコマンドが、以下になります。ミニバッファに関数名が表示されます。\n F1 c 調べたいキー操作\n &ldquo;F1 c&rdquo; 自体も、もちろん関数呼び出しとなっています。上の方法で調べると、describe-key-briefly という関数だと分かります。\n逆に、ある関数がどのキーに割り当てられているのかは、&ldquo;F1 w&rdquo; で分かります。","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 Emacs では数多くの関数がキーに割り当てられています。その中には押しやすいものもあれば、押しづらいものもあります。また、全ての関数がキーに割り当てられているわけではないため、頻繁に使う関数なのに M-x hogehoge [Enter] などと実行しなければならない場合もあります。という状況ではありますが、Emacs のキーバインドはフルカスタマイズ可能です。カスタマイズするしかないでしょう。:-)ポリシー 私は以下のことを念頭に置いて、キーバインドを変更しています。 デフォルトのキーバインドは、極力変更しない。 連打することがあるコマンドは１ストローク(例: Ctrl-t)。 連打する必要が少ない、もしくはやや危険なコマンドは２ストローク(例: Ctrl-q Ctrl-h)。 ２ストロークにする時は、全て Ctrl-q Ctrl-h のような Ctrl を介したものにする。例えば Ctrl-q h だと、Ctrl キーを一旦ニュートラルにする必要があるので、Ctrl-q Ctrl-h より確実に遅い。 カーソルキーやファンクションキーは遠いので、極力使わない。  知っておくべきこと 例えば、Ctrl-n というキーを押すと next-line という関数が呼ばれます。Ctrl-f は forward-char です。ただの a というキーにも self-insert-command という関数が割り当てられています。このように、全てのキーに関数が割り当てられています。では、どうやって調べたらよいでしょうか？これを調べるヘルプコマンドが、以下になります。ミニバッファに関数名が表示されます。 F1 c 調べたいキー操作 “F1 c” 自体も、もちろん関数呼び出しとなっています。上の方法で調べると、describe-key-briefly という関数だと分かります。逆に、ある関数がどのキーに割り当てられているのかは、“F1 w” で分かります。","link":"https://masutaka.net/2009-07-02-2/","isoDate":"2009-07-02T01:00:00.000Z","dateMiliSeconds":1246496400000,"authorName":"masutaka"},{"title":"セキュアコーディング","content":"セキュアコーディング - JPCERT コーディネーションセンター ここに無料セミナーの案内が掲示されています。\n 「C/C++ セキュアコーディング　ハーフデイキャンプのご案内 」\n Part 1. 7月16日(木) 13:00-18:00 「文字列、整数」 Part 2. 8月 7日(金) 13:00-18:00 「ファイル入出力」 Part 3. 9月10日(木) 13:00-18:00 「動的メモリ管理、書式指定文字列」   昨年度の資料をダウンロードできます。\nhttp://www.jpcert.or.jp/research/materials.html セキュアコーディングのドキュメントもダウンロードできます。\nhttp://www.jpcert.or.jp/sc-rules/ まだ読んでないけど、無料とはすごい！！","contentSnippet":"セキュアコーディング - JPCERT コーディネーションセンター ここに無料セミナーの案内が掲示されています。 「C/C++ セキュアコーディング　ハーフデイキャンプのご案内 」 Part 1. 7月16日(木) 13:00-18:00 「文字列、整数」 Part 2. 8月 7日(金) 13:00-18:00 「ファイル入出力」 Part 3. 9月10日(木) 13:00-18:00 「動的メモリ管理、書式指定文字列」   昨年度の資料をダウンロードできます。http://www.jpcert.or.jp/research/materials.html セキュアコーディングのドキュメントもダウンロードできます。http://www.jpcert.or.jp/sc-rules/ まだ読んでないけど、無料とはすごい！！","link":"https://masutaka.net/2009-07-02-1/","isoDate":"2009-07-02T00:00:00.000Z","dateMiliSeconds":1246492800000,"authorName":"masutaka"},{"title":"Firefox3.5リリース！！","content":"Firefox3.5 がリリースされたようですね。\nツイッターでやけに話題が多いなあと思ったら、そういうことだったか。\n私はサイドメニューに付けた Discover Shiretoko で知りました。^^; [2009-06-24-1] ただし、もう少し様子見します。少なくとも Tab Mix Plus は\nまだ対応していないようなので。\nMozilla Japan - 次世代ブラウザ Firefox とメールソフト Thunderbird の公式サイト ","contentSnippet":"Firefox3.5 がリリースされたようですね。ツイッターでやけに話題が多いなあと思ったら、そういうことだったか。私はサイドメニューに付けた Discover Shiretoko で知りました。^^; [2009-06-24-1] ただし、もう少し様子見します。少なくとも Tab Mix Plus はまだ対応していないようなので。Mozilla Japan - 次世代ブラウザ Firefox とメールソフト Thunderbird の公式サイト","link":"https://masutaka.net/2009-07-01-1/","isoDate":"2009-07-01T00:00:00.000Z","dateMiliSeconds":1246406400000,"authorName":"masutaka"},{"title":"Emacs講座 -第4回- カーソル移動","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 高速なカーソル移動は、エディタを使う上で重要なポイントになります。\n上下左右以外の移動手段を無意識に使えるようになることが、高速化のコ\nツだと思います。\n※「emacs 雑記」の motion に触発されて書いてみましたが、かなりパク\nリになってしまいました。\n上下左右  それぞれ、Ctrl-p, Ctrl-n, Ctrl-b, Ctrl-f に割り当てられています。 十字キーでも移動できますが、こちらの方がホームポジションからの距\n離が短いので効率が良いはずです。 前置き引数を付けると、「何文字だけ移動」とか「何行だけ移動」とか\n出来ます。           Ctrl-u Ctrl-f 4 文字右に移動   Ctrl-u Ctrl-u Ctrl-n 16 行下に移動   Ctrl-u 7 Ctrl-b 7 文字左に移動    前の単語、次の単語  それぞれ、Meta-b, Meta-f に割り当てられています。 英文だと正確に単語単位で移動しますが、日本語だと単語の区切りがお\nおざっぱです。ただ、通常の左右移動の高速版と考えると、かなり使えます。 私はそれぞれ、Ctrl-, と Ctrl-.","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 高速なカーソル移動は、エディタを使う上で重要なポイントになります。上下左右以外の移動手段を無意識に使えるようになることが、高速化のコツだと思います。※「emacs 雑記」の motion に触発されて書いてみましたが、かなりパクリになってしまいました。上下左右  それぞれ、Ctrl-p, Ctrl-n, Ctrl-b, Ctrl-f に割り当てられています。 十字キーでも移動できますが、こちらの方がホームポジションからの距離が短いので効率が良いはずです。 前置き引数を付けると、「何文字だけ移動」とか「何行だけ移動」とか出来ます。           Ctrl-u Ctrl-f 4 文字右に移動   Ctrl-u Ctrl-u Ctrl-n 16 行下に移動   Ctrl-u 7 Ctrl-b 7 文字左に移動    前の単語、次の単語  それぞれ、Meta-b, Meta-f に割り当てられています。 英文だと正確に単語単位で移動しますが、日本語だと単語の区切りがおおざっぱです。ただ、通常の左右移動の高速版と考えると、かなり使えます。 私はそれぞれ、Ctrl-, と Ctrl-.","link":"https://masutaka.net/2009-06-30-2/","isoDate":"2009-06-30T01:00:00.000Z","dateMiliSeconds":1246323600000,"authorName":"masutaka"},{"title":"「Linux 標準教科書」と「Linux サーバー構築標準教科書」","content":"Linux標準教科書Wiki  Linuxサーバー構築標準教科書 Wiki   アンケートに答えると、それぞれ pdf ファイルを無料でダウンロードできる。\nかなりボリュームがあるが、体系的な知識の習得に良さそう。","contentSnippet":"Linux標準教科書Wiki  Linuxサーバー構築標準教科書 Wiki   アンケートに答えると、それぞれ pdf ファイルを無料でダウンロードできる。かなりボリュームがあるが、体系的な知識の習得に良さそう。","link":"https://masutaka.net/2009-06-30-1/","isoDate":"2009-06-30T00:00:00.000Z","dateMiliSeconds":1246320000000,"authorName":"masutaka"},{"title":"Meadow の背景色を半透明にする","content":"世界を股にかける某氏から質問されたので、調べてみた。\nMeadow は default-frame-alist に alpha の設定をするだけで、フレーム\nを簡単に半透明に出来るようだ。試した Meadow のバージョンは 3.00-dev (菊)。\n(setq default-frame-alist  &#39;((alpha . (nil 70 50 30)) \t... \t)) この例の (nil 70 50 30) は、前から順番に\n 通常のフレーム アクティブでないフレーム 移動中のフレーム サイズ変更中のフレーム\nの透明度を示すとのこと。\nnil は通常の状態。0 がより透明に近く、100 がより通常に近い。  参考情報: 26.1.7 背景色を半透明にする - Meadow/Emacs memo ","contentSnippet":"世界を股にかける某氏から質問されたので、調べてみた。Meadow は default-frame-alist に alpha の設定をするだけで、フレームを簡単に半透明に出来るようだ。試した Meadow のバージョンは 3.00-dev (菊)。(setq default-frame-alist  '((alpha . (nil 70 50 30)) \t... \t)) この例の (nil 70 50 30) は、前から順番に 通常のフレーム アクティブでないフレーム 移動中のフレーム サイズ変更中のフレームの透明度を示すとのこと。nil は通常の状態。0 がより透明に近く、100 がより通常に近い。  参考情報: 26.1.7 背景色を半透明にする - Meadow/Emacs memo","link":"https://masutaka.net/2009-06-29-2/","isoDate":"2009-06-29T01:00:00.000Z","dateMiliSeconds":1246237200000,"authorName":"masutaka"},{"title":"Emacs が開ける最大ファイルサイズ","content":"以下のように scratch バッファなどで調べることができるようだ。\nEmacs22 は 256MB だった。\n(let ((i 1024))  (while (&gt; i 0)  (setq i (* i 2)))  (1- i)) 268435455  (1+ 268435455) -268435456  (/ 268435456.0 1024 1024) 256.0 Emacs21 は 128MB だった。昔なつかしい nemacs は 8MB だった。\n参考情報:\nEmacsFileSizeLimit - emacswiki [2010-06-19-2] 追記(2010-03-13):\nEmacs23 は 512MB に上がっていました。","contentSnippet":"以下のように scratch バッファなどで調べることができるようだ。Emacs22 は 256MB だった。(let ((i 1024))  (while (> i 0)  (setq i (* i 2)))  (1- i)) 268435455  (1+ 268435455) -268435456  (/ 268435456.0 1024 1024) 256.0 Emacs21 は 128MB だった。昔なつかしい nemacs は 8MB だった。参考情報:EmacsFileSizeLimit - emacswiki [2010-06-19-2] 追記(2010-03-13):Emacs23 は 512MB に上がっていました。","link":"https://masutaka.net/2009-06-29-1/","isoDate":"2009-06-29T00:00:00.000Z","dateMiliSeconds":1246233600000,"authorName":"masutaka"},{"title":"Emacs講座 -第3回- *scratch* バッファ","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 本項は、いろいろな設定を .emacs にコピペし始めたあたりで読むと良い\nと思います。コピペ房から脱却しましょう。\n.emacs で多い設定の一つに\n(setq message-log-max 256) などといった setq 文があると思います。上記例では、message-log-max\nという変数に 256 という値を代入しています。(message-log-max\nは、Messages バッファに保存される最大行数を格納する変数です。)\nでは設定しないと、message-log-max にはどのような値が入っているので\nしょう？ scratch バッファを使うと簡単に調べられます。\nmessage-log-max を scratch バッファにコピペし、message-log-max の\n後ろで Ctrl-j してみてください。前述の設定をしないと 100 が、設定を\nすると 256 が出力されると思います。\nmessage-log-max =&gt;100 ※ 変数のヘルプからも、現在の値を確認できます。\n F1 v message-log-max [Enter]\n 実は上の方法は単に変数の値を調べているのではなく、変数を評価してい\nます。\nもっと正確に言うと、message-log-max というシンボルを評価しています。\n評価の結果(戻り値)が 100 というわけです。シンボルは S 式の最小単位\nです。S 式が分からなければ、単に「式」と読み替えていただいて構いま\nせん。\nさて、もっとも典型的な S 式は前述のような (setq message-log-max 256)","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 本項は、いろいろな設定を .emacs にコピペし始めたあたりで読むと良いと思います。コピペ房から脱却しましょう。.emacs で多い設定の一つに(setq message-log-max 256) などといった setq 文があると思います。上記例では、message-log-maxという変数に 256 という値を代入しています。(message-log-maxは、Messages バッファに保存される最大行数を格納する変数です。)では設定しないと、message-log-max にはどのような値が入っているのでしょう？ scratch バッファを使うと簡単に調べられます。message-log-max を scratch バッファにコピペし、message-log-max の後ろで Ctrl-j してみてください。前述の設定をしないと 100 が、設定をすると 256 が出力されると思います。message-log-max =>100 ※ 変数のヘルプからも、現在の値を確認できます。 F1 v message-log-max [Enter] 実は上の方法は単に変数の値を調べているのではなく、変数を評価しています。もっと正確に言うと、message-log-max というシンボルを評価しています。評価の結果(戻り値)が 100 というわけです。シンボルは S 式の最小単位です。S 式が分からなければ、単に「式」と読み替えていただいて構いません。さて、もっとも典型的な S 式は前述のような (setq message-log-max 256)","link":"https://masutaka.net/2009-06-28-1/","isoDate":"2009-06-28T00:00:00.000Z","dateMiliSeconds":1246147200000,"authorName":"masutaka"},{"title":"セゾンカード年会費無料の秘密","content":"wikipedia によると、セゾンカードが年会費無料なのは大きく 2 つの理由\nかららしい。\nその１ ポイントが永久不滅\nこれによりカードの稼働率が上がるそうで、損失を防ぐ効果があるらしい。\nその２ 他社と違って盗難保険の契約をしていない\nカードが不正利用されたときは、セゾン自社の損害になるらしい。\nこれは少し心配だな。","contentSnippet":"wikipedia によると、セゾンカードが年会費無料なのは大きく 2 つの理由かららしい。その１ ポイントが永久不滅これによりカードの稼働率が上がるそうで、損失を防ぐ効果があるらしい。その２ 他社と違って盗難保険の契約をしていないカードが不正利用されたときは、セゾン自社の損害になるらしい。これは少し心配だな。","link":"https://masutaka.net/2009-06-27-3/","isoDate":"2009-06-27T02:00:00.000Z","dateMiliSeconds":1246068000000,"authorName":"masutaka"},{"title":"ibuffer を試してみた","content":"[2009-06-07-4] からの浮気。\nbuffer-menu に慣れていたせいか、別ウィンドウに表示される bs-show に\nどうも馴染めない。ibuffer に浮気してしまおう。\n(define-key ctl-x-map (kbd &#34;C-b&#34;) &#39;ibuffer) ibuffer の良いところは、現在開いている全てのバッファに対して置換を\nかけられるところ。\nm' で置換したいバッファにマークし、Q&rsquo; で問い合わせ置換、`U&rsquo; で問\nい合わせなし置換を実行。\nu' するとカーソル下のバッファのマークを消せる。* *&rsquo; で全てのマー\nクを消せる。\n,' すると条件を切り替えながらソートしてくれる。その中の一つに major-mode で並び替える s m&rsquo; があるが、これで並び替えると良さげ。\n`?&rsquo; でヘルプが表示される。","contentSnippet":"[2009-06-07-4] からの浮気。buffer-menu に慣れていたせいか、別ウィンドウに表示される bs-show にどうも馴染めない。ibuffer に浮気してしまおう。(define-key ctl-x-map (kbd \"C-b\") 'ibuffer) ibuffer の良いところは、現在開いている全てのバッファに対して置換をかけられるところ。m' で置換したいバッファにマークし、Q’ で問い合わせ置換、`U’ で問い合わせなし置換を実行。u' するとカーソル下のバッファのマークを消せる。* *’ で全てのマークを消せる。,' すると条件を切り替えながらソートしてくれる。その中の一つに major-mode で並び替える s m’ があるが、これで並び替えると良さげ。`?’ でヘルプが表示される。","link":"https://masutaka.net/2009-06-27-2/","isoDate":"2009-06-27T01:00:00.000Z","dateMiliSeconds":1246064400000,"authorName":"masutaka"},{"title":"Emacs講座 -第2回- .emacs (どっと いーまっくす)","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 何はなくとも .emacs (どっと いーまっくす) です。\nEmacs は起動すると次の順番にユーザ設定ファイルを検索し、最初にヒッ\nトしたものを読み込みます。これがいわゆる .emacs (どっと いーまっく\nす) です。(最近の Emacs は ~/.emacs.d/init.el も使えます。)\n  ~/.emacs.elc ~/.emacs.el ~/.emacs   .emacs.elc は、.emacs.el や .emacs を以下のようにバイトコンパイルし\nたものです(他の方法もあります)。\n % emacs -Q -batch -f batch-byte-compile ~/.emacs\n バイトコンパイルすると、起動時間や実行時間が少し短くなります。\nただ、.emacs を修正した後にバイトコンパイルし忘れると、前述の読み込\nみ順番のため、古い設定のまま Emacs が起動するという弊害もあります。\n.emacs.el と .emacs は名前が違うだけです。\n.emacs の他に site-start.el と default.el もあります。あまり意識す\nることはないかもしれませんが、管理者が全ユーザに設定させたい内容を\n記載して使います。[2008-05-15-1] もご覧下さい。\n-q オプションはよく使います。こうすると ~/.","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 何はなくとも .emacs (どっと いーまっくす) です。Emacs は起動すると次の順番にユーザ設定ファイルを検索し、最初にヒットしたものを読み込みます。これがいわゆる .emacs (どっと いーまっくす) です。(最近の Emacs は ~/.emacs.d/init.el も使えます。)  ~/.emacs.elc ~/.emacs.el ~/.emacs   .emacs.elc は、.emacs.el や .emacs を以下のようにバイトコンパイルしたものです(他の方法もあります)。 % emacs -Q -batch -f batch-byte-compile ~/.emacs バイトコンパイルすると、起動時間や実行時間が少し短くなります。ただ、.emacs を修正した後にバイトコンパイルし忘れると、前述の読み込み順番のため、古い設定のまま Emacs が起動するという弊害もあります。.emacs.el と .emacs は名前が違うだけです。.emacs の他に site-start.el と default.el もあります。あまり意識することはないかもしれませんが、管理者が全ユーザに設定させたい内容を記載して使います。[2008-05-15-1] もご覧下さい。-q オプションはよく使います。こうすると ~/.","link":"https://masutaka.net/2009-06-27-1/","isoDate":"2009-06-27T00:00:00.000Z","dateMiliSeconds":1246060800000,"authorName":"masutaka"},{"title":"Emacs講座 -第1回- Emacs と私","content":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 GNU Emacs に初めて出会ったのは、入社した時に使った Nemacs でした。\nSolaris2.6 にインストールされていました。2000 年入社なので、使い始\nめてもう 10 年です。\nちょうど良い区切りなので、初心者から脱却したい人向けに、まとまった\n文章を書くことにしました。今回はそのイントロです。GNU Emacs は\nEmacs と略します。XEmacs の話はしない予定です。\nさて、入社当時の話に戻ります。\n最初は訳が分からなかったため、Nemacs はすぐに使わなくなりました。\nWindows に C ソースをコピーして秀丸で編集したり、rmail を使わずに\nBecky! を使ったりしていました。しかし、Windows がない環境で仕事をす\nることになったため、腹を決めて Emacs と付き合っていくことにしました。\nその環境には運良く Mule がインストールされていました。私は C ソース\nを Mule で編集し、mh-e でメールを読み書きすることになりました。\nそういえば、今も覚えていることがあります。当時はファイルを開くたび\nに Mule を起動していましたが、職場の上司は Dired でディレクトリを開\nいて、そこからファイルをいくつも開いていました。shell-mode も使って\nいたかもしれません。ああ、こういう使い方をするエディタなんだと思っ\nたことを覚えています。\n当時はいろんな人の ~/.emacs を読み漁りました。職場の人のものや、ネッ\nト上に転がっているものです。\nネット上で特に参考になったのは、GANAWARE に置いてある .emacs です。","contentSnippet":"目次 / 第1回 第2回 第3回 第4回 第5回 第6回 第7回 第8回 第9回 GNU Emacs に初めて出会ったのは、入社した時に使った Nemacs でした。Solaris2.6 にインストールされていました。2000 年入社なので、使い始めてもう 10 年です。ちょうど良い区切りなので、初心者から脱却したい人向けに、まとまった文章を書くことにしました。今回はそのイントロです。GNU Emacs はEmacs と略します。XEmacs の話はしない予定です。さて、入社当時の話に戻ります。最初は訳が分からなかったため、Nemacs はすぐに使わなくなりました。Windows に C ソースをコピーして秀丸で編集したり、rmail を使わずにBecky! を使ったりしていました。しかし、Windows がない環境で仕事をすることになったため、腹を決めて Emacs と付き合っていくことにしました。その環境には運良く Mule がインストールされていました。私は C ソースを Mule で編集し、mh-e でメールを読み書きすることになりました。そういえば、今も覚えていることがあります。当時はファイルを開くたびに Mule を起動していましたが、職場の上司は Dired でディレクトリを開いて、そこからファイルをいくつも開いていました。shell-mode も使っていたかもしれません。ああ、こういう使い方をするエディタなんだと思ったことを覚えています。当時はいろんな人の ~/.emacs を読み漁りました。職場の人のものや、ネット上に転がっているものです。ネット上で特に参考になったのは、GANAWARE に置いてある .emacs です。","link":"https://masutaka.net/2009-06-26-2/","isoDate":"2009-06-26T01:00:00.000Z","dateMiliSeconds":1245978000000,"authorName":"masutaka"},{"title":"Emacs講座 -目次-","content":"-第1回- Emacs と私 -第2回- .emacs (どっと いーまっくす) -第3回- *scratch* バッファ -第4回- カーソル移動 -第5回- キーバインドの変更 -第6回- load-path -第7回- 文字コード -第8回- タブ幅 -第9回- C コーディングスタイル Emacs のバージョンは 23.3 を想定しています。22 以下は考慮しないこと\nにします。\nEmacs の全てを説明することは出来ないので、私の書きたい内容を書きた\nい順番で書いています。\n以下は今後の予定。\n-第10回- 私の .emacs (どっと いーまっくす)\n-第11回- edebugger\n-第12回- 次の関数、前の関数","contentSnippet":"-第1回- Emacs と私 -第2回- .emacs (どっと いーまっくす) -第3回- *scratch* バッファ -第4回- カーソル移動 -第5回- キーバインドの変更 -第6回- load-path -第7回- 文字コード -第8回- タブ幅 -第9回- C コーディングスタイル Emacs のバージョンは 23.3 を想定しています。22 以下は考慮しないことにします。Emacs の全てを説明することは出来ないので、私の書きたい内容を書きたい順番で書いています。以下は今後の予定。-第10回- 私の .emacs (どっと いーまっくす)-第11回- edebugger-第12回- 次の関数、前の関数","link":"https://masutaka.net/2009-06-26-1/","isoDate":"2009-06-26T00:00:00.000Z","dateMiliSeconds":1245974400000,"authorName":"masutaka"},{"title":"みずほから他銀行への振込手数料が無料になっていた！！","content":"今日ネットバンキングで家賃を振り込んだら、なぜか手数料がかからなかった。\nみずほマイレージクラブ &gt; うれしい特典 &gt; 振込手数料割引・無料 どうやら 6/1 から、みずほマイレージクラブにこのうれしい特典が加わっ\nたようだ。\n他銀行への振り込みが月 3 回まで無料になった。私の場合では年間\n￥315*12=￥3,780 の手数料が必要なくなった。大した額ではないが、普通\nにうれしい。\nみずほマイレージクラブの他の特典として、みずほ ATM やコンビニ ATM\nの時間外手数料無料というのがある。今までなんでかからないのかな〜と\n思っていたんだけど、そういうことだったのね。^^;\nこれらの特典を受けるためには、3 つの条件のうち 1 つを満たしていれば\n良い。ただ以下のとおり、そのうちの 1 つは条件が緩いので、満たすのは\n難しくないと思う。\nみずほマイレージクラブ &gt; うれしい特典 &gt; お取引条件  お取引条件1\n各種預金［円預金（普通〔無利息型を除く〕・貯蓄・定期）、外貨預金\n（普通・定期）（注1）］、投資信託（注1）、金融債［財形金融債を除\nく］、公共債（注1）などの月末合計残高が10万円以上\n 年会費は必要ない。詳細は以下をどうぞ。\nみずほマイレージクラブ ","contentSnippet":"今日ネットバンキングで家賃を振り込んだら、なぜか手数料がかからなかった。みずほマイレージクラブ > うれしい特典 > 振込手数料割引・無料 どうやら 6/1 から、みずほマイレージクラブにこのうれしい特典が加わったようだ。他銀行への振り込みが月 3 回まで無料になった。私の場合では年間￥315*12=￥3,780 の手数料が必要なくなった。大した額ではないが、普通にうれしい。みずほマイレージクラブの他の特典として、みずほ ATM やコンビニ ATMの時間外手数料無料というのがある。今までなんでかからないのかな〜と思っていたんだけど、そういうことだったのね。^^;これらの特典を受けるためには、3 つの条件のうち 1 つを満たしていれば良い。ただ以下のとおり、そのうちの 1 つは条件が緩いので、満たすのは難しくないと思う。みずほマイレージクラブ > うれしい特典 > お取引条件  お取引条件1各種預金［円預金（普通〔無利息型を除く〕・貯蓄・定期）、外貨預金（普通・定期）（注1）］、投資信託（注1）、金融債［財形金融債を除く］、公共債（注1）などの月末合計残高が10万円以上 年会費は必要ない。詳細は以下をどうぞ。みずほマイレージクラブ","link":"https://masutaka.net/2009-06-25-2/","isoDate":"2009-06-25T01:00:00.000Z","dateMiliSeconds":1245891600000,"authorName":"masutaka"},{"title":"ドラクエ風ステータスジェネレータ","content":"ドラクエ風ステータスジェネレータをいくつか - たつをの ChangeLog さっそくやってみた。\nドラクエ3 風 ステータス ジェネレーター  なぜ女！？良い点は「武器」「うんのよさ」くらいか。\n無駄に高いレベルがもの悲しいです。\nカタカナにしただけで、正統的な勇者になりました。(・∀・)\n良い防具を持たせれば、すぐにでもゾーマを倒せるでしょう。\nドラクエ風ステータス  釣りは好きではないのだけれど。(´・ω・`)\n経験値がゼロで、レベルが35なのはすごい！！\nノートよりも、メモ帳が欲しかった。\nまた釣りバカかよ。。゜(゜´∀｀゜)゜。。\n今度はまるで取り柄がありません。オニオンシリーズだけが救いです。","contentSnippet":"ドラクエ風ステータスジェネレータをいくつか - たつをの ChangeLog さっそくやってみた。ドラクエ3 風 ステータス ジェネレーター  なぜ女！？良い点は「武器」「うんのよさ」くらいか。無駄に高いレベルがもの悲しいです。カタカナにしただけで、正統的な勇者になりました。(・∀・)良い防具を持たせれば、すぐにでもゾーマを倒せるでしょう。ドラクエ風ステータス  釣りは好きではないのだけれど。(´・ω・`)経験値がゼロで、レベルが35なのはすごい！！ノートよりも、メモ帳が欲しかった。また釣りバカかよ。。゜(゜´∀｀゜)゜。。今度はまるで取り柄がありません。オニオンシリーズだけが救いです。","link":"https://masutaka.net/2009-06-25-1/","isoDate":"2009-06-25T00:00:00.000Z","dateMiliSeconds":1245888000000,"authorName":"masutaka"},{"title":"Discover Shiretoko","content":"Firefoxと知床がコラボしたキャンペーン「Discover Shiretoko」 - スラッシュドットジャパン そろそろ、Firefox3.5 が出るらしい。開発ネームが「Shiretoko」とのこ\nとで、「Discovert Shiretoko 」というキャンペーンを実施しているようだ。\n自分のサイトにバナーを貼って、上記キャンペーンサイトへの誘導を行う\nと、Web 上の自分の樹が成長するらしい。8 月 31 日までの期間限定のよ\nうなので、さっそく左側のメニューバーに追加してみた。\n知床と Firefox というミスマッチもさることながら、上のサイトで使われ\nている Web 技術も興味深い。HTML5 で追加されることになる Canvas とい\nうグラフィック技術らしく、「JavaScriptを使って平面や立体図をブラウ\nザ上に描画でき、様々な画像効果や動画再生といったことをプラグインな\nしで実現できること」とのこと。Firefox は v1.5 からサポートしている\nようだ。\n日本語チュートリアル も用意されていた。早い。moveTo とか lineTo とか\nどこかで聞いたような名前が。。。\nフォクすけ萌えのあなたに。→ フォクすけの Firefox 情報局 追記(2009-06-26):\nようやく 660 番に自分の樹を見つけた。本みたいなものはページ中央をダ\nブルクリックもしくはドラッグすると、次のページに行ける。ずーっと、\n折り返しになっている部分をいじっていたんだけど出来なくて、数字を直\n接入れて自分の樹を探していた。orz\n追記(2009-10-03):\n2009 年 9 月 18 日にキャンペーンが終了し「樹の成長」もストップした\nそうなので、バナーを削除しました。\nhttp://www.interforest.org/signup/ ","contentSnippet":"Firefoxと知床がコラボしたキャンペーン「Discover Shiretoko」 - スラッシュドットジャパン そろそろ、Firefox3.5 が出るらしい。開発ネームが「Shiretoko」とのことで、「Discovert Shiretoko 」というキャンペーンを実施しているようだ。自分のサイトにバナーを貼って、上記キャンペーンサイトへの誘導を行うと、Web 上の自分の樹が成長するらしい。8 月 31 日までの期間限定のようなので、さっそく左側のメニューバーに追加してみた。知床と Firefox というミスマッチもさることながら、上のサイトで使われている Web 技術も興味深い。HTML5 で追加されることになる Canvas というグラフィック技術らしく、「JavaScriptを使って平面や立体図をブラウザ上に描画でき、様々な画像効果や動画再生といったことをプラグインなしで実現できること」とのこと。Firefox は v1.5 からサポートしているようだ。日本語チュートリアル も用意されていた。早い。moveTo とか lineTo とかどこかで聞いたような名前が。。。フォクすけ萌えのあなたに。→ フォクすけの Firefox 情報局 追記(2009-06-26):ようやく 660 番に自分の樹を見つけた。本みたいなものはページ中央をダブルクリックもしくはドラッグすると、次のページに行ける。ずーっと、折り返しになっている部分をいじっていたんだけど出来なくて、数字を直接入れて自分の樹を探していた。orz追記(2009-10-03):2009 年 9 月 18 日にキャンペーンが終了し「樹の成長」もストップしたそうなので、バナーを削除しました。http://www.interforest.org/signup/","link":"https://masutaka.net/2009-06-24-1/","isoDate":"2009-06-24T00:00:00.000Z","dateMiliSeconds":1245801600000,"authorName":"masutaka"},{"title":"間違った解像度にしたら何も映らなくなった","content":"リフレッシュレートは高い方が目に優しいよなー、なんて思いながら解像\n度をいじったら画面が真っ黒。Windows なら 30 秒後に復帰するから、\nGNOME も同じだろうと思っていたら、ずっと真っ黒のまま。(ToT)\n試行錯誤の末、以下のようにすれば復旧出来ることが分かった。\n1. なんとかして root 権限で X にログインする。 一番安全なのは、「masutakaのログアウト」→「ユーザの切り替え」から\nGDM の画面に戻り、root でログインする方法。ただ、私の環境では作業終\n了後、masutaka に戻れない上、また真っ黒になってしまった。\n次に安全なのは、「masutakaのログアウト」→「ログアウト」から GDM の\n画面に戻り、root でログインする方法。\n画面が真っ黒なので、いずれもキーボード操作だけでログアウトする必要\nがある。私の場合は「Windows キー」で GNOME メインメニューを起動する\nようにしていたので、「Windows キー」→「↑キー×２」→「Alt-l(エル)」\nでログアウト出来た。デフォルトの設定でも、Ctrl-Alt-Delete でログア\nウト出来るかもしれない。\nこれらでも出来なければ ssh でログインして、root で reboot コマンド\nを実行&hellip;するしかないかなあ。\n2. masutaka 権限で画面の解像度を設定する。 GNOME の場合、画面の解像度はユーザ毎に設定されているっぽい。そのた\nめ root でログインしたら、masutaka に su して画面の解像度を変更すれ\nば良い。\n# xhost + # su - masutaka % export DISPLAY=:0.0 % gnome-display-properties 3. masutaka でログインすれば、無事復旧しているはず！！ ","contentSnippet":"リフレッシュレートは高い方が目に優しいよなー、なんて思いながら解像度をいじったら画面が真っ黒。Windows なら 30 秒後に復帰するから、GNOME も同じだろうと思っていたら、ずっと真っ黒のまま。(ToT)試行錯誤の末、以下のようにすれば復旧出来ることが分かった。1. なんとかして root 権限で X にログインする。 一番安全なのは、「masutakaのログアウト」→「ユーザの切り替え」からGDM の画面に戻り、root でログインする方法。ただ、私の環境では作業終了後、masutaka に戻れない上、また真っ黒になってしまった。次に安全なのは、「masutakaのログアウト」→「ログアウト」から GDM の画面に戻り、root でログインする方法。画面が真っ黒なので、いずれもキーボード操作だけでログアウトする必要がある。私の場合は「Windows キー」で GNOME メインメニューを起動するようにしていたので、「Windows キー」→「↑キー×２」→「Alt-l(エル)」でログアウト出来た。デフォルトの設定でも、Ctrl-Alt-Delete でログアウト出来るかもしれない。これらでも出来なければ ssh でログインして、root で reboot コマンドを実行…するしかないかなあ。2. masutaka 権限で画面の解像度を設定する。 GNOME の場合、画面の解像度はユーザ毎に設定されているっぽい。そのため root でログインしたら、masutaka に su して画面の解像度を変更すれば良い。# xhost + # su - masutaka % export DISPLAY=:0.0 % gnome-display-properties 3. masutaka でログインすれば、無事復旧しているはず！！","link":"https://masutaka.net/2009-06-15-2/","isoDate":"2009-06-15T01:00:00.000Z","dateMiliSeconds":1245027600000,"authorName":"masutaka"},{"title":"Debian squeeze の subversion で http リポジトリにアクセスできなくなった","content":"一ヶ月くらい前から、Debian squeeze で svn が使えなくなってしまいま\nした。\n svn diff の実行は出来る。 file リポジトリへのアクセスも出来る。 http リポジトリへのアクセスは、内部外部問わず出来ない。  という状況で地味に困っていましたが、~/.subversion/servers に以下を\n追加することで解決できました。\n http-library = serf\n 今回お世話になったサイトです。\nsvn(subversion)が突然使えなくなった at 半歩先 犯人は Neon モジュールでした。WebDav へのアクセスモジュールを serf\nに変えることで回避できました。\n世の中にはスゴイ人もいるものですね。私なんか、strace コマンドのログ\nから locale や gcov まわりのエラーなのかと思って調べていました&hellip;。\nsubversion はソースからインストールしたことがあるので、WebDav アク\nセスに Neon が使われていたことは知っていましたが、気づくことができ\nませんでした。他に serf があることと、~/.subversion/servers で変更\nが出来ることはもちろん知りませんでした。\n% svn --version (snip) ＊ ra_neon : Neon を利用して WebDAV (DeltaV) プロトコルでリポジトリにアクセスするモジュール。 - &#39;http&#39; スキームを操作します - &#39;https&#39; スキームを操作します (snip) ＊ ra_serf : serf を利用して WebDAV (DeltaV) プロトコルでリポジトリにアクセスするモジュール。 - &#39;http&#39; スキームを操作します - &#39;https&#39; スキームを操作します 追記(2009-07-21):","contentSnippet":"一ヶ月くらい前から、Debian squeeze で svn が使えなくなってしまいました。 svn diff の実行は出来る。 file リポジトリへのアクセスも出来る。 http リポジトリへのアクセスは、内部外部問わず出来ない。  という状況で地味に困っていましたが、~/.subversion/servers に以下を追加することで解決できました。 http-library = serf 今回お世話になったサイトです。svn(subversion)が突然使えなくなった at 半歩先 犯人は Neon モジュールでした。WebDav へのアクセスモジュールを serfに変えることで回避できました。世の中にはスゴイ人もいるものですね。私なんか、strace コマンドのログから locale や gcov まわりのエラーなのかと思って調べていました…。subversion はソースからインストールしたことがあるので、WebDav アクセスに Neon が使われていたことは知っていましたが、気づくことができませんでした。他に serf があることと、~/.subversion/servers で変更が出来ることはもちろん知りませんでした。% svn --version (snip) ＊ ra_neon : Neon を利用して WebDAV (DeltaV) プロトコルでリポジトリにアクセスするモジュール。 - 'http' スキームを操作します - 'https' スキームを操作します (snip) ＊ ra_serf : serf を利用して WebDAV (DeltaV) プロトコルでリポジトリにアクセスするモジュール。 - 'http' スキームを操作します - 'https' スキームを操作します 追記(2009-07-21):","link":"https://masutaka.net/2009-06-15-1/","isoDate":"2009-06-15T00:00:00.000Z","dateMiliSeconds":1245024000000,"authorName":"masutaka"},{"title":"ElScreen のタブにニックネームを設定する","content":"[2009-06-14-2] の補完。\n通常、ElScreen のタブにはバッファ名が表示されますが、自分でニックネー\nムを付けることも出来ます。ニックネームを付けると、タブがすっきりキ\nレイになります。\n下記は、順番に navi2ch, skype.el 用の設定です。(require &rsquo;elscreen)\nの後に書いて下さい。\n(defcustom elscreen-navi2ch-mode-to-nickname-alist  &#39;((&#34;^navi2ch-&#34; . &#34;Navi2ch&#34;))  &#34;*Alist composed of the pair of mode-name and corresponding screen-name.&#34;  :type &#39;(alist :key-type string :value-type (choice string function))  :tag &#34;Navi2ch major-mode to screen nickname alist&#34;  :set (lambda (symbol value)  (custom-set-default symbol value)  (elscreen-rebuild-mode-to-nickname-alist))  :group &#39;navi2ch) (elscreen-set-mode-to-nickname-alist &#39;elscreen-navi2ch-mode-to-nickname-alist)  (defcustom elscreen-skype-mode-to-nickname-alist  &#39;((&#34;^skype-&#34; . &#34;Skype&#34;))  &#34;*Alist composed of the pair of mode-name and corresponding screen-name.","contentSnippet":"[2009-06-14-2] の補完。通常、ElScreen のタブにはバッファ名が表示されますが、自分でニックネームを付けることも出来ます。ニックネームを付けると、タブがすっきりキレイになります。下記は、順番に navi2ch, skype.el 用の設定です。(require ’elscreen)の後に書いて下さい。(defcustom elscreen-navi2ch-mode-to-nickname-alist  '((\"^navi2ch-\" . \"Navi2ch\"))  \"*Alist composed of the pair of mode-name and corresponding screen-name.\"  :type '(alist :key-type string :value-type (choice string function))  :tag \"Navi2ch major-mode to screen nickname alist\"  :set (lambda (symbol value)  (custom-set-default symbol value)  (elscreen-rebuild-mode-to-nickname-alist))  :group 'navi2ch) (elscreen-set-mode-to-nickname-alist 'elscreen-navi2ch-mode-to-nickname-alist)  (defcustom elscreen-skype-mode-to-nickname-alist  '((\"^skype-\" . \"Skype\"))  \"*Alist composed of the pair of mode-name and corresponding screen-name.","link":"https://masutaka.net/2009-06-14-4/","isoDate":"2009-06-14T03:00:00.000Z","dateMiliSeconds":1244948400000,"authorName":"masutaka"},{"title":"C-c C-c で mkchalow","content":"ChangeLog メモの chalow への変換とアップロードは、毎日 0:00 から\n3 時間毎に行うように、自宅 PC の cron に登録しています。\n登録しているのは mkchalow という自作のシェルスクリプトです。\n手動でアップしたい時は、このコマンドをコマンドラインから実行します。\n手動での実行が面倒になってきたので、mkchalow を実行する elisp の関\n数を作りました。非同期で実行されるので、実行中も他の作業が出来ます。\n(defun mkchalow (force)  (interactive &#34;P&#34;)  (let (pro  (pnm &#34;mkchalow&#34;)  (buf &#34; *mkchalow*&#34;)  (cnm &#34;mkchalow&#34;)  (opts (if force &#39;(&#34;-f&#34;))))  (message (format &#34;%sBuilding chalow for masutaka.net...&#34;  (if force &#34;Force &#34; &#34;&#34;)))  (setq pro (apply &#39;start-process pnm buf cnm opts))  (set-process-sentinel  pro  `(lambda (process string)  (message ,(format &#34;%sBuilding chalow for masutaka.","contentSnippet":"ChangeLog メモの chalow への変換とアップロードは、毎日 0:00 から3 時間毎に行うように、自宅 PC の cron に登録しています。登録しているのは mkchalow という自作のシェルスクリプトです。手動でアップしたい時は、このコマンドをコマンドラインから実行します。手動での実行が面倒になってきたので、mkchalow を実行する elisp の関数を作りました。非同期で実行されるので、実行中も他の作業が出来ます。(defun mkchalow (force)  (interactive \"P\")  (let (pro  (pnm \"mkchalow\")  (buf \" *mkchalow*\")  (cnm \"mkchalow\")  (opts (if force '(\"-f\"))))  (message (format \"%sBuilding chalow for masutaka.net...\"  (if force \"Force \" \"\")))  (setq pro (apply 'start-process pnm buf cnm opts))  (set-process-sentinel  pro  `(lambda (process string)  (message ,(format \"%sBuilding chalow for masutaka.","link":"https://masutaka.net/2009-06-14-3/","isoDate":"2009-06-14T02:00:00.000Z","dateMiliSeconds":1244944800000,"authorName":"masutaka"},{"title":"ElScreen のススメ","content":"私は ElScreen-Mew の作者なのに、このブログで ElScreen について一度\nも言及していないことに気づきました。^^;\nElScreen は Emacs で多くの作業をする人にお薦めです！\n私の場合は、ざっとこれだけありました。\n Mew でメール送受信する。 navi2ch で２ちゃんねるを見る。 mpg123.el で音楽を聴く。 twittering-mode.el で Twitter する。 skype.el でチャットする。 ChangeLog メモ を書く(→chalow でこのブログに変換)。 他、さまざまなテキストファイルを編集する。  もちろん、Emacs は個々の作業ごとに起動しません。全て１つの Emacs 上\nで行います。\nでも、さすがにこれだけいろんなことをやっていると、バッファを切り替\nえるのが面倒です。一時期はフレームを立ち上げて(C-x 5 2)いましたが、\nこれも複数あると邪魔です。\nここで、Web ブラウザのウィンドウとタブを思い出して下さい。Emacs で\n前者はフレームに相当します。しかし、後者はありません。Emacs でもタ\nブが使えたら便利だと思いませんか？\nそこで登場するのが ElScreen です！！\nElScreen は Emacs にタブ機能を提供します。メニューバーからの\nElScreen-&gt;Create Screen または、&ldquo;C-z C-c&rdquo; で新しいタブを作れます。\nもちろん、マウスでタブを選択することも出来ます。\nキーバインドは GNU Screen ライクなので、GNU Screen ユーザはすんなり\n使えると思います。ダウンロードやインストール方法等の詳細は\nElScreen の Web site をご覧下さい。","contentSnippet":"私は ElScreen-Mew の作者なのに、このブログで ElScreen について一度も言及していないことに気づきました。^^;ElScreen は Emacs で多くの作業をする人にお薦めです！私の場合は、ざっとこれだけありました。 Mew でメール送受信する。 navi2ch で２ちゃんねるを見る。 mpg123.el で音楽を聴く。 twittering-mode.el で Twitter する。 skype.el でチャットする。 ChangeLog メモ を書く(→chalow でこのブログに変換)。 他、さまざまなテキストファイルを編集する。  もちろん、Emacs は個々の作業ごとに起動しません。全て１つの Emacs 上で行います。でも、さすがにこれだけいろんなことをやっていると、バッファを切り替えるのが面倒です。一時期はフレームを立ち上げて(C-x 5 2)いましたが、これも複数あると邪魔です。ここで、Web ブラウザのウィンドウとタブを思い出して下さい。Emacs で前者はフレームに相当します。しかし、後者はありません。Emacs でもタブが使えたら便利だと思いませんか？そこで登場するのが ElScreen です！！ElScreen は Emacs にタブ機能を提供します。メニューバーからのElScreen->Create Screen または、“C-z C-c” で新しいタブを作れます。もちろん、マウスでタブを選択することも出来ます。キーバインドは GNU Screen ライクなので、GNU Screen ユーザはすんなり使えると思います。ダウンロードやインストール方法等の詳細はElScreen の Web site をご覧下さい。","link":"https://masutaka.net/2009-06-14-2/","isoDate":"2009-06-14T01:00:00.000Z","dateMiliSeconds":1244941200000,"authorName":"masutaka"},{"title":"skype.el を試してみた","content":"ひょんな(?)ことから、Skype の ID を取得してしまいました。\n最初に Linux 版の Skype を使ってみましたが、日本語入力が出来ないた\nめ(※対策は後述)他のアプリからコピペする必要があり、非常に面倒でした。\nやっぱり、Emacs で Skype できちゃったりするのかなあと思って、調べて\nみたら skype.el というのがありました。(相変わらず、Emacs で何でもで\nきちゃうのね。^^;) うまく動いたので方法をまとめておきます。\n今回の環境 Debian GNU/Linux squeeze (testing)\nEmacs 23.0.94 (← Emacs23 以上じゃないとダメっぽい)\n技術的な仕組み skype.el は Skype の Emacs フロントエンド。Skype を起動したあとに、\nskype.el を起動して使う。両者のやりとりは、D-Bus を介して行われると\nのこと。D-Bus というのは、プロセス間通信の実装の一つらしい。\n→ D-Bus 設置手順 1. Linux 用の Skype をインストールした。 公式サイト から deb パッケージをダウンロードしてもよいが、\n/etc/apt/sources.list に apt-line を追加する方がスマートなので、\nこちらをお勧めする。\n deb http://download.skype.com/linux/repos/debian/ stable non-free\n追加したら、いつものように aptitude でインストールする。\n # aptitude update # aptitude install skype インストールできたら、Skype 単体でチャットや通話が出来ることを確認すべし。","contentSnippet":"ひょんな(?)ことから、Skype の ID を取得してしまいました。最初に Linux 版の Skype を使ってみましたが、日本語入力が出来ないため(※対策は後述)他のアプリからコピペする必要があり、非常に面倒でした。やっぱり、Emacs で Skype できちゃったりするのかなあと思って、調べてみたら skype.el というのがありました。(相変わらず、Emacs で何でもできちゃうのね。^^;) うまく動いたので方法をまとめておきます。今回の環境 Debian GNU/Linux squeeze (testing)Emacs 23.0.94 (← Emacs23 以上じゃないとダメっぽい)技術的な仕組み skype.el は Skype の Emacs フロントエンド。Skype を起動したあとに、skype.el を起動して使う。両者のやりとりは、D-Bus を介して行われるとのこと。D-Bus というのは、プロセス間通信の実装の一つらしい。→ D-Bus 設置手順 1. Linux 用の Skype をインストールした。 公式サイト から deb パッケージをダウンロードしてもよいが、/etc/apt/sources.list に apt-line を追加する方がスマートなので、こちらをお勧めする。 deb http://download.skype.com/linux/repos/debian/ stable non-free追加したら、いつものように aptitude でインストールする。 # aptitude update # aptitude install skype インストールできたら、Skype 単体でチャットや通話が出来ることを確認すべし。","link":"https://masutaka.net/2009-06-14-1/","isoDate":"2009-06-14T00:00:00.000Z","dateMiliSeconds":1244937600000,"authorName":"masutaka"},{"title":"tdiary のテーマを最新にした","content":"今まで安定版のテーマを使っていましたが、開発版で良いことに今更気が\nつきました。開発版の方がテーマの数が増えています。\n以下、今回やったことです。\n修正したテーマは tar で固めて、ここ に置きました。\n1. http://www.tdiary.org/ から、tdiary-theme-2.3.2.tar.gz をダウンロードした。 2. 以下を行うシェルスクリプトを作成し、実行した。  全ての *.css の先頭に以下の 1 行を追加。参考情報→[2009-05-24-1]   @import &#34;/prettify/prettify.css&#34;;  古いディレクトリの clfix.css を新しいディレクトリにコピーし、\nコピーしたディレクトリにある「テーマ名.css」に以下の 1 行を追加。参考情報→[2009-02-21-1]   @import &#34;clfix.css&#34;;  chmod -R go-w .  3. いくつかの clfix.css には、オリジナルの「テーマ名.css」を修正したことをメモしてある。その通りに修正した。 作成したシェルスクリプトは以下になります。\n#!/bin/sh OLD_THEMEDIR=$HOME/tmp/theme.old NEW_THEMEDIR=$HOME/tmp/tdiary-theme-2.3.2 if [ ! -d &#34;$OLD_THEMEDIR&#34; ]; then echo &#34;$OLD_THEMEDIR isnot exist.&#34; exit 1 fi if [ ! -d &#34;$NEW_THEMEDIR&#34; ]; then echo &#34;$NEW_THEMEDIR isnot exist.","contentSnippet":"今まで安定版のテーマを使っていましたが、開発版で良いことに今更気がつきました。開発版の方がテーマの数が増えています。以下、今回やったことです。修正したテーマは tar で固めて、ここ に置きました。1. http://www.tdiary.org/ から、tdiary-theme-2.3.2.tar.gz をダウンロードした。 2. 以下を行うシェルスクリプトを作成し、実行した。  全ての *.css の先頭に以下の 1 行を追加。参考情報→[2009-05-24-1]   @import \"/prettify/prettify.css\";  古いディレクトリの clfix.css を新しいディレクトリにコピーし、コピーしたディレクトリにある「テーマ名.css」に以下の 1 行を追加。参考情報→[2009-02-21-1]   @import \"clfix.css\";  chmod -R go-w .  3. いくつかの clfix.css には、オリジナルの「テーマ名.css」を修正したことをメモしてある。その通りに修正した。 作成したシェルスクリプトは以下になります。#!/bin/sh OLD_THEMEDIR=$HOME/tmp/theme.old NEW_THEMEDIR=$HOME/tmp/tdiary-theme-2.3.2 if [ ! -d \"$OLD_THEMEDIR\" ]; then echo \"$OLD_THEMEDIR isnot exist.\" exit 1 fi if [ ! -d \"$NEW_THEMEDIR\" ]; then echo \"$NEW_THEMEDIR isnot exist.","link":"https://masutaka.net/2009-06-13-1/","isoDate":"2009-06-13T00:00:00.000Z","dateMiliSeconds":1244851200000,"authorName":"masutaka"},{"title":"キーバインド","content":"kbd() を使って、~/.emacs を書き換えました。kbd() は anything.el で\n使われていたのですが、こちらの方が今までの書き方より統一感が出るの\nで、採用させていただきました。\n修正前はこんな感じ。\n(define-key esc-map &#34;b&#34; &#39;backward-sexp) (define-key global-map &#34;\\C-t&#34; &#39;call-last-kbd-macro) (define-key global-map [(control \\,)] &#39;backward-word) (define-key global-map [(control \\.)] &#39;forward-word) (define-key ctl-q-map [?\\C-\\ ] &#39;comint-dynamic-complete-filename) kbd() を使ったら統一感がでました。\n(define-key esc-map (kbd &#34;b&#34;) &#39;backward-sexp) (define-key global-map (kbd &#34;C-t&#34;) &#39;call-last-kbd-macro) (define-key global-map (kbd &#34;C-,&#34;) &#39;backward-word) (define-key global-map (kbd &#34;C-.&#34;) &#39;forward-word) (define-key ctl-q-map (kbd &#34;C-SPC&#34;) &#39;comint-dynamic-complete-filename) ※ ctl-q-map は自作のキーマップなので、デフォルトでは存在しません。\n(kbd &ldquo;ほげ&rdquo;) の ほげ の部分は、&ldquo;F1 c&rdquo; した後、調べたいキーを押すと\n分かります。以下は Ctrl-f を調べた場合です。(kbd &ldquo;C-f&rdquo;) と書けば良","contentSnippet":"kbd() を使って、~/.emacs を書き換えました。kbd() は anything.el で使われていたのですが、こちらの方が今までの書き方より統一感が出るので、採用させていただきました。修正前はこんな感じ。(define-key esc-map \"b\" 'backward-sexp) (define-key global-map \"\\C-t\" 'call-last-kbd-macro) (define-key global-map [(control \\,)] 'backward-word) (define-key global-map [(control \\.)] 'forward-word) (define-key ctl-q-map [?\\C-\\ ] 'comint-dynamic-complete-filename) kbd() を使ったら統一感がでました。(define-key esc-map (kbd \"b\") 'backward-sexp) (define-key global-map (kbd \"C-t\") 'call-last-kbd-macro) (define-key global-map (kbd \"C-,\") 'backward-word) (define-key global-map (kbd \"C-.\") 'forward-word) (define-key ctl-q-map (kbd \"C-SPC\") 'comint-dynamic-complete-filename) ※ ctl-q-map は自作のキーマップなので、デフォルトでは存在しません。(kbd “ほげ”) の ほげ の部分は、“F1 c” した後、調べたいキーを押すと分かります。以下は Ctrl-f を調べた場合です。(kbd “C-f”) と書けば良","link":"https://masutaka.net/2009-06-11-2/","isoDate":"2009-06-11T01:00:00.000Z","dateMiliSeconds":1244682000000,"authorName":"masutaka"},{"title":"C-u bs-show <-> bs-show","content":"[2009-06-07-4] のその後。\nデフォルト C-u 付きの動作にしたかったので、以下の設定をした。\n自分はこっちの方が合うかも。\n;; M-x bs-show と C-u M-x bs-show の動作を交換する。 (setq bs-default-configuration &#34;all&#34;) (setq bs-alternative-configuration &#34;files&#34;) ","contentSnippet":"[2009-06-07-4] のその後。デフォルト C-u 付きの動作にしたかったので、以下の設定をした。自分はこっちの方が合うかも。;; M-x bs-show と C-u M-x bs-show の動作を交換する。 (setq bs-default-configuration \"all\") (setq bs-alternative-configuration \"files\")","link":"https://masutaka.net/2009-06-11-1/","isoDate":"2009-06-11T00:00:00.000Z","dateMiliSeconds":1244678400000,"authorName":"masutaka"},{"title":"au のサポートサイトにログインできない","content":"4 月くらいから Linux からログインできなくなって放置していたのだけど、\nさっき思い立って何度も試した。まだログインできなかった。でも、試し\nに Windows の IE7 や Firefox3 から試してみたらログインできた。orz\n以下、Firefox3 on Linux での、au サポートサイトの不具合まとめ。\n https://cs.kddi.com/ を開くと、Flash が Loading のまま固まる。\nHTML(シンプル)版から中に入った。  ※ 後から確認したら、サポートしているのは、Windows の Flash Player\n9.0.28.0 以上とのこと。うちのは 10.0 r22。OS を選ぶのか&hellip;？\nWindows では使えた ID とパスワードでログインすると、以下のエラー。\n一度も間違えてないのだけど…   サポートIDやパスワードを連続して複数回間違えられた可能性があるため、ログイン制限がかかりました。\n ログイン制限は以下の手順で解除できるそうなので、トップページ の\n「サポートID・パスワードを忘れた方」をクリック。   ログイン制限は、下記のお手続きで解除が可能です。\nパソコンから：\nauお客さまサポートトップページのログインフォーム下部の「サポートID・パスワードを忘れた方」\n(システムの反映には約5分程度時間がかかります。)\n[S0007]\n  「わからなくなってしまったのは？」に「サポートIDとサポートパスワー\nド」を選択し、「次へ」をクリック。\n  「サービス」に「auケータイ」を選択し、「au携帯番号」「暗証番号」\n「お客様コード」を入力。ちなみに、「お客様コード」は、毎月メールで\n来る「auご利用料金更新のお知らせ」の「ご請求コード」のことらしく、\n非常に分かりづらかった。\n  照会まで進むと自分の「サポートID」が明らかになる。(Windows で使\nえたものと同じだったけど。。。)\n  上記「サポートID」と、その後メールで送られてくる「サポートパスワー","contentSnippet":"4 月くらいから Linux からログインできなくなって放置していたのだけど、さっき思い立って何度も試した。まだログインできなかった。でも、試しに Windows の IE7 や Firefox3 から試してみたらログインできた。orz以下、Firefox3 on Linux での、au サポートサイトの不具合まとめ。 https://cs.kddi.com/ を開くと、Flash が Loading のまま固まる。HTML(シンプル)版から中に入った。  ※ 後から確認したら、サポートしているのは、Windows の Flash Player9.0.28.0 以上とのこと。うちのは 10.0 r22。OS を選ぶのか…？Windows では使えた ID とパスワードでログインすると、以下のエラー。一度も間違えてないのだけど…   サポートIDやパスワードを連続して複数回間違えられた可能性があるため、ログイン制限がかかりました。 ログイン制限は以下の手順で解除できるそうなので、トップページ の「サポートID・パスワードを忘れた方」をクリック。   ログイン制限は、下記のお手続きで解除が可能です。パソコンから：auお客さまサポートトップページのログインフォーム下部の「サポートID・パスワードを忘れた方」(システムの反映には約5分程度時間がかかります。)[S0007]  「わからなくなってしまったのは？」に「サポートIDとサポートパスワード」を選択し、「次へ」をクリック。  「サービス」に「auケータイ」を選択し、「au携帯番号」「暗証番号」「お客様コード」を入力。ちなみに、「お客様コード」は、毎月メールで来る「auご利用料金更新のお知らせ」の「ご請求コード」のことらしく、非常に分かりづらかった。  照会まで進むと自分の「サポートID」が明らかになる。(Windows で使えたものと同じだったけど。。。)  上記「サポートID」と、その後メールで送られてくる「サポートパスワー","link":"https://masutaka.net/2009-06-09-1/","isoDate":"2009-06-09T00:00:00.000Z","dateMiliSeconds":1244505600000,"authorName":"masutaka"},{"title":"ケーキいろいろ ","content":"個人的なメモ。\n写真デコレーションなんてものがあるんだ。\nhttp://www.b-shop.co.jp/hanabishi/ 同じ店だけど、ケーキはアレゲ。\nhttp://news.ameba.jp/gizmodo/2009/05/38928.html 他のケーキ屋(この例では五反田)と比べると、若干高めだな。\nhttp://le-fromage.jp/ ケーキ好き(？)の私としては、下記の質問も気になる。\nhttp://okwave.jp/qa5001183.html ","contentSnippet":"個人的なメモ。写真デコレーションなんてものがあるんだ。http://www.b-shop.co.jp/hanabishi/ 同じ店だけど、ケーキはアレゲ。http://news.ameba.jp/gizmodo/2009/05/38928.html 他のケーキ屋(この例では五反田)と比べると、若干高めだな。http://le-fromage.jp/ ケーキ好き(？)の私としては、下記の質問も気になる。http://okwave.jp/qa5001183.html","link":"https://masutaka.net/2009-06-08-1/","isoDate":"2009-06-08T00:00:00.000Z","dateMiliSeconds":1244419200000,"authorName":"masutaka"},{"title":"三国志 英雄占い","content":"占いはやらないのだけれど、三国志となれば話は別。\nDORON特集「三国志 英雄占い」 私は「周瑜」タイプでした。\n 美を理解する者は、生きざまも美しいもの。\n(´∀｀)\n  細やかなやりとりの積み重ねで大局を思うように動かしていくといった\n知将ならではの技も身につけています。\n(￣ー￣)\n  あわててしでかした失敗がいつまでも脳裏に残り、ふたたび失敗する材料\nとなってしまうのです。\n(;´Д｀)ハァハァ\n ","contentSnippet":"占いはやらないのだけれど、三国志となれば話は別。DORON特集「三国志 英雄占い」 私は「周瑜」タイプでした。 美を理解する者は、生きざまも美しいもの。(´∀｀)  細やかなやりとりの積み重ねで大局を思うように動かしていくといった知将ならではの技も身につけています。(￣ー￣)  あわててしでかした失敗がいつまでも脳裏に残り、ふたたび失敗する材料となってしまうのです。(;´Д｀)ハァハァ","link":"https://masutaka.net/2009-06-07-6/","isoDate":"2009-06-07T05:00:00.000Z","dateMiliSeconds":1244350800000,"authorName":"masutaka"},{"title":"twittering-mode.el を試してみた","content":"2010.6.12 Emacs Wiki にインストールガイドと全てのキーバインドを記載\nしました。 この記事はもう古いです。\nやはりというかなんというか、探してみたらありました。\nEmacs 上で Twitter できる、twittering-mode.el が。\nM-x twit で、Twitter 開始です。&ldquo;u&rdquo; または &ldquo;C-c C-s&rdquo; でつぶやけます。\nデフォルトでは 90 秒ごとにリロードされますが、&ldquo;g&rdquo; で手動リロードす\nることも出来ます。\nスクリーンショット   後述の twittering-icon-mode を有効にしているので、なかなかの見栄え\nです。:-)\nインストール方法 1. twittering-mode の公式サイト から、tar ball を取得します。\nもしくは、GitHub から開発版を取得します。\n% git clone git://github.com/hayamiz/twittering-mode.git 2. 展開した twittering-mode を load-path に追加します。\n(add-to-list &#39;load-path &#34;/path/to/installed/dir&#34;) 必要最小限の設定 (autoload &#39;twit &#34;twittering-mode&#34; nil t) (setq twittering-username &#34;Twitterアカウント&#34;) 私が追加で設定した内容 (setq twittering-icon-mode t) (setq twittering-jojo-mode t) (defun twittering-mode-hook-func ()  (set-face-bold-p &#39;twittering-username-face t)  (set-face-foreground &#39;twittering-username-face &#34;DeepSkyBlue3&#34;)  (set-face-foreground &#39;twittering-uri-face &#34;gray35&#34;)  (define-key twittering-mode-map (kbd &#34;&lt;&#34;) &#39;my-beginning-of-buffer)  (define-key twittering-mode-map (kbd &#34;&gt;&#34;) &#39;my-end-of-buffer)  (define-key twittering-mode-map (kbd &#34;F&#34;) &#39;twittering-favorite))  (add-hook &#39;twittering-mode-hook &#39;twittering-mode-hook-func)   twittering-icon-mode を有効にしました。","contentSnippet":"2010.6.12 Emacs Wiki にインストールガイドと全てのキーバインドを記載しました。 この記事はもう古いです。やはりというかなんというか、探してみたらありました。Emacs 上で Twitter できる、twittering-mode.el が。M-x twit で、Twitter 開始です。“u” または “C-c C-s” でつぶやけます。デフォルトでは 90 秒ごとにリロードされますが、“g” で手動リロードすることも出来ます。スクリーンショット   後述の twittering-icon-mode を有効にしているので、なかなかの見栄えです。:-)インストール方法 1. twittering-mode の公式サイト から、tar ball を取得します。もしくは、GitHub から開発版を取得します。% git clone git://github.com/hayamiz/twittering-mode.git 2. 展開した twittering-mode を load-path に追加します。(add-to-list 'load-path \"/path/to/installed/dir\") 必要最小限の設定 (autoload 'twit \"twittering-mode\" nil t) (setq twittering-username \"Twitterアカウント\") 私が追加で設定した内容 (setq twittering-icon-mode t) (setq twittering-jojo-mode t) (defun twittering-mode-hook-func ()  (set-face-bold-p 'twittering-username-face t)  (set-face-foreground 'twittering-username-face \"DeepSkyBlue3\")  (set-face-foreground 'twittering-uri-face \"gray35\")  (define-key twittering-mode-map (kbd \"<\") 'my-beginning-of-buffer)  (define-key twittering-mode-map (kbd \">\") 'my-end-of-buffer)  (define-key twittering-mode-map (kbd \"F\") 'twittering-favorite))  (add-hook 'twittering-mode-hook 'twittering-mode-hook-func)   twittering-icon-mode を有効にしました。","link":"https://masutaka.net/2009-06-07-5/","isoDate":"2009-06-07T04:00:00.000Z","dateMiliSeconds":1244347200000,"authorName":"masutaka"},{"title":"bs-show を試してみた","content":"今まで &ldquo;C-x C-b&rdquo; には buffer-menu を割り当てていたんだけど、代わり\nに bs-show を割り当てることにした。\n(define-key ctl-x-map (kbd &#34;C-b&#34;) &#39;bs-show) 実行すると、buffer-selection バッファに「ファイルだけが」候補とし\nて現れる。他のバッファも表示させたい場合は、&ldquo;C-u C-x C-b&rdquo; すれば OK!!\n情報源:\nbs-show - MOEPANDA diary (2009-05-17) ","contentSnippet":"今まで “C-x C-b” には buffer-menu を割り当てていたんだけど、代わりに bs-show を割り当てることにした。(define-key ctl-x-map (kbd \"C-b\") 'bs-show) 実行すると、buffer-selection バッファに「ファイルだけが」候補として現れる。他のバッファも表示させたい場合は、“C-u C-x C-b” すれば OK!!情報源:bs-show - MOEPANDA diary (2009-05-17)","link":"https://masutaka.net/2009-06-07-4/","isoDate":"2009-06-07T03:00:00.000Z","dateMiliSeconds":1244343600000,"authorName":"masutaka"},{"title":"anything.el を試してみた","content":"この記事は obsolete です。\nhttp://d.hatena.ne.jp/rubikitch/20100718/anything をご覧下さい。\nずいぶん前からアレゲな方々の間で話題になっていた anything.el を\nようやく試すことができた。\nEmacs は様々な局面で「補完」することができるが、anything.el を使う\nと、この補完 IF をある程度統一出来る。\n機能の概要 anything を実行すると、以下の候補一覧が anything バッファに作成さ\nれる。\n「現在開いているバッファ」\n「今まで開いたファイルの履歴」\n「カレントディレクトリのファイル」\n「今まで実行したコマンド」\n何か文字を打つと、そのパターンにマッチした候補に絞り込まれる。候補\nを C-n, C-p, C-v, M-v で選択したり、C-s や C-r で候補自体を検索する\nことも可能。\nインストール方法 以下のファイルをダウンロードして、load-path の通ったところにコピー\nする。\nhttp://www.emacswiki.org/cgi-bin/wiki/download/anything.el http://www.emacswiki.org/cgi-bin/wiki/download/anything-config.el 私が設定したこと ~/.emacs に以下の設定をした。&ldquo;C-x b&rdquo; の switch-to-buffer を\nanything で上書きし、次と前の機能一覧に、それぞれ C-M-n と C-M-p で\n移動できるようにした。\n(require &#39;anything-config) (define-key ctl-x-map (kbd &#34;b&#34;) &#39;anything) (define-key anything-map (kbd &#34;C-M-n&#34;) &#39;anything-next-source) (define-key anything-map (kbd &#34;C-M-p&#34;) &#39;anything-previous-source) 以上の設定を行うと、&ldquo;C-x b&rdquo; で anything を使える。","contentSnippet":"この記事は obsolete です。http://d.hatena.ne.jp/rubikitch/20100718/anything をご覧下さい。ずいぶん前からアレゲな方々の間で話題になっていた anything.el をようやく試すことができた。Emacs は様々な局面で「補完」することができるが、anything.el を使うと、この補完 IF をある程度統一出来る。機能の概要 anything を実行すると、以下の候補一覧が anything バッファに作成される。「現在開いているバッファ」「今まで開いたファイルの履歴」「カレントディレクトリのファイル」「今まで実行したコマンド」何か文字を打つと、そのパターンにマッチした候補に絞り込まれる。候補を C-n, C-p, C-v, M-v で選択したり、C-s や C-r で候補自体を検索することも可能。インストール方法 以下のファイルをダウンロードして、load-path の通ったところにコピーする。http://www.emacswiki.org/cgi-bin/wiki/download/anything.el http://www.emacswiki.org/cgi-bin/wiki/download/anything-config.el 私が設定したこと ~/.emacs に以下の設定をした。“C-x b” の switch-to-buffer をanything で上書きし、次と前の機能一覧に、それぞれ C-M-n と C-M-p で移動できるようにした。(require 'anything-config) (define-key ctl-x-map (kbd \"b\") 'anything) (define-key anything-map (kbd \"C-M-n\") 'anything-next-source) (define-key anything-map (kbd \"C-M-p\") 'anything-previous-source) 以上の設定を行うと、“C-x b” で anything を使える。","link":"https://masutaka.net/2009-06-07-3/","isoDate":"2009-06-07T02:00:00.000Z","dateMiliSeconds":1244340000000,"authorName":"masutaka"},{"title":"わらびもち","content":"これはひどい。ｗ\n 【ぷるぷる】わらびもちに命をかける業者【ぷる〜ん】 ","contentSnippet":"これはひどい。ｗ 【ぷるぷる】わらびもちに命をかける業者【ぷる〜ん】","link":"https://masutaka.net/2009-06-07-2/","isoDate":"2009-06-07T01:00:00.000Z","dateMiliSeconds":1244336400000,"authorName":"masutaka"},{"title":"ウィンドウの幅や高さを、キー操作で変更する","content":"&ldquo;C-x 2&rdquo; で上下に分割した場合 &ldquo;C-x ^&rdquo; or &ldquo;M-x enlarge-window&rdquo; 現在のウィンドウの縦幅を大きくする。\n&ldquo;M-x shrink-window&rdquo; 現在のウィンドウの縦幅を小さくする。\n&ldquo;C-x 3&rdquo; で左右に分割した場合 &ldquo;C-x }&rdquo; or &ldquo;M-x enlarge-window-horizontally&rdquo; 現在のウィンドウの横幅を大きくする。\n&ldquo;C-x {&rdquo; or &ldquo;M-x shrink-window-horizontally&rdquo; 現在のウィンドウの横幅を小さくする。\n&ldquo;C-x +&rdquo; or &ldquo;M-x balance-windows&rdquo; 各ウィンドウの大きさを揃えることが出来る。\n参考にしたページ eyesrobe &raquo; ブログアーカイブ &raquo; 基本編 Emacsウィンドウの枠を拡げたり縮めたり ","contentSnippet":"“C-x 2” で上下に分割した場合 “C-x ^” or “M-x enlarge-window” 現在のウィンドウの縦幅を大きくする。“M-x shrink-window” 現在のウィンドウの縦幅を小さくする。“C-x 3” で左右に分割した場合 “C-x }” or “M-x enlarge-window-horizontally” 現在のウィンドウの横幅を大きくする。“C-x {” or “M-x shrink-window-horizontally” 現在のウィンドウの横幅を小さくする。“C-x +” or “M-x balance-windows” 各ウィンドウの大きさを揃えることが出来る。参考にしたページ eyesrobe » ブログアーカイブ » 基本編 Emacsウィンドウの枠を拡げたり縮めたり","link":"https://masutaka.net/2009-06-07-1/","isoDate":"2009-06-07T00:00:00.000Z","dateMiliSeconds":1244332800000,"authorName":"masutaka"},{"title":"Twitter を始めてみた","content":"Twitter(ついったー)とは、アカウントを作ると自分のつぶやきを投稿でき\nるサービスだそう。他の人のつぶやきに対して、フォローという名の返信\nをすることもできるとのこと。\nTwitter Twitter 公式サイト Twitter をはじめよう！ - GreenSpace 寂しがり屋向けのサービスなのだろうか。。。\n上のサイトを見る限り、他の可能性もあるようだけど。\nでも、まあとにかく始めてみた。このブログの左側にも表示させてみた。\n追記(2009-06-07):\nなんだか重いので、左側に表示させるのは止めました。","contentSnippet":"Twitter(ついったー)とは、アカウントを作ると自分のつぶやきを投稿できるサービスだそう。他の人のつぶやきに対して、フォローという名の返信をすることもできるとのこと。Twitter Twitter 公式サイト Twitter をはじめよう！ - GreenSpace 寂しがり屋向けのサービスなのだろうか。。。上のサイトを見る限り、他の可能性もあるようだけど。でも、まあとにかく始めてみた。このブログの左側にも表示させてみた。追記(2009-06-07):なんだか重いので、左側に表示させるのは止めました。","link":"https://masutaka.net/2009-06-02-2/","isoDate":"2009-06-02T01:00:00.000Z","dateMiliSeconds":1243904400000,"authorName":"masutaka"},{"title":"TopHatenar を付けてみた","content":"今度はサイドメニューの下の方に、TopHatenar というのを付けました。\nブログのランキングを表示してくれます。ランキングは、RSS フィード購\n読者数やソーシャルブックマーク獲得数から決定しているようです。\nランキングは現在最下位でございます。\nついでに、ここ 3 ヶ月のアクセス分析をしました。\n3,465 名の方が、6,278 回アクセスして下さいました。1 日に換算すると、\n約 40 名の方の、約 70 アクセスになります。\n   Page View Visit     6,278 3,465    上記カウント数のうち、検索エンジン経由で来た方のランキングです。\n   No 検索エンジン 検索フレーズ 割合 カウント     1 Google SP27213.exe 1.5% 35   2 Google printf 自作 1.3% 31   3 Google svn: URL に対し ra_local セッションを開始できません 0.9% 22   4 Google svn ra_local セッションを開始できません 0.","contentSnippet":"今度はサイドメニューの下の方に、TopHatenar というのを付けました。ブログのランキングを表示してくれます。ランキングは、RSS フィード購読者数やソーシャルブックマーク獲得数から決定しているようです。ランキングは現在最下位でございます。ついでに、ここ 3 ヶ月のアクセス分析をしました。3,465 名の方が、6,278 回アクセスして下さいました。1 日に換算すると、約 40 名の方の、約 70 アクセスになります。   Page View Visit     6,278 3,465    上記カウント数のうち、検索エンジン経由で来た方のランキングです。   No 検索エンジン 検索フレーズ 割合 カウント     1 Google SP27213.exe 1.5% 35   2 Google printf 自作 1.3% 31   3 Google svn: URL に対し ra_local セッションを開始できません 0.9% 22   4 Google svn ra_local セッションを開始できません 0.","link":"https://masutaka.net/2009-06-02-1/","isoDate":"2009-06-02T00:00:00.000Z","dateMiliSeconds":1243900800000,"authorName":"masutaka"},{"title":"このブログをケータイで見た時のリダイレクト","content":"このブログがケータイからアクセスされたら、内部でケータイ向けのペー\nジにリダイレクトするように設定してみた。\nリダイレクトとしては以下の動作になる。アクセスした人はリダイレクト\nされたことに気づかないはず。\nYYYY-MM-DD-I.html へのアクセス例:\nhttp://masutaka.net/chalow/2009-05-29-1.html ↓ http://masutaka.net/chalow/clkeitai.cgi?date=2009-05-29-1 YYYY-MM-DD.html へのアクセス例:\nhttp://masutaka.net/chalow/2009-05-29.html ↓ http://masutaka.net/chalow/clkeitai.cgi?date=2009-05-29 それ以外の *.html へのアクセス例:\nhttp://masutaka.net/chalow/index.html ↓ http://masutaka.net/chalow/clkeitai.cgi .htaccess への記載内容は以下のとおり。\nRewriteEngine on RewriteBase / RewriteCond %{HTTP_USER_AGENT} (J-PHONE|SoftBank|Vodafone|DoCoMo|KDDI) RewriteRule ^chalow/([0-9]+-[0-9]+-[0-9]+(-[0-9]+)?)\\.html$ chalow/clkeitai.cgi?date=$1 [L] RewriteCond %{HTTP_USER_AGENT} (J-PHONE|SoftBank|Vodafone|DoCoMo|KDDI) RewriteRule ^chalow/(.*\\.html)?$ chalow/clkeitai.cgi [L] clkeitai.cgi はデフォルトのままなので、トップと日ペー\nジ(YYYY-MM-DD.html)、それにアイテムページ(YYYY-MM-DD-I.html)しか表\n示できない。だから、それ以外のページが指定されたらトップを表示する\nようにしている。\n表示後にブログ内のリンクをクリックすると、URL に clkeitai.cgi が出\nてしまうのもイマイチか。\n参考にしたページ:\n「を」このブログをケータイで見たときのリダイレクトと「はてブ」リンクの修正 ついでにサイドメニューに、QR コードを張り付けてみた。\nQR コードは http://qrcode.jp/ で作れるよ。","contentSnippet":"このブログがケータイからアクセスされたら、内部でケータイ向けのページにリダイレクトするように設定してみた。リダイレクトとしては以下の動作になる。アクセスした人はリダイレクトされたことに気づかないはず。YYYY-MM-DD-I.html へのアクセス例:http://masutaka.net/chalow/2009-05-29-1.html ↓ http://masutaka.net/chalow/clkeitai.cgi?date=2009-05-29-1 YYYY-MM-DD.html へのアクセス例:http://masutaka.net/chalow/2009-05-29.html ↓ http://masutaka.net/chalow/clkeitai.cgi?date=2009-05-29 それ以外の *.html へのアクセス例:http://masutaka.net/chalow/index.html ↓ http://masutaka.net/chalow/clkeitai.cgi .htaccess への記載内容は以下のとおり。RewriteEngine on RewriteBase / RewriteCond %{HTTP_USER_AGENT} (J-PHONE|SoftBank|Vodafone|DoCoMo|KDDI) RewriteRule ^chalow/([0-9]+-[0-9]+-[0-9]+(-[0-9]+)?)\\.html$ chalow/clkeitai.cgi?date=$1 [L] RewriteCond %{HTTP_USER_AGENT} (J-PHONE|SoftBank|Vodafone|DoCoMo|KDDI) RewriteRule ^chalow/(.*\\.html)?$ chalow/clkeitai.cgi [L] clkeitai.cgi はデフォルトのままなので、トップと日ページ(YYYY-MM-DD.html)、それにアイテムページ(YYYY-MM-DD-I.html)しか表示できない。だから、それ以外のページが指定されたらトップを表示するようにしている。表示後にブログ内のリンクをクリックすると、URL に clkeitai.cgi が出てしまうのもイマイチか。参考にしたページ:「を」このブログをケータイで見たときのリダイレクトと「はてブ」リンクの修正 ついでにサイドメニューに、QR コードを張り付けてみた。QR コードは http://qrcode.jp/ で作れるよ。","link":"https://masutaka.net/2009-05-29-2/","isoDate":"2009-05-29T01:00:00.000Z","dateMiliSeconds":1243558800000,"authorName":"masutaka"},{"title":"ペペロンチーノ","content":"パスタ第３弾です。今回は見た目よくできました。\nレシピ    材料(1人分)\nパスタ・・・・・・・・・・・110g(いつもより多め)\nオリーブオイル・・・・・・・適当(いつもより多め)\nベーコン・・・・・・・・・・2枚\n乾燥ニンニク・・・・・・・・適当\n鷹の爪・・・・・・・・・・・1本\n塩・・・・・・・・・・・・・多め\nこしょう・・・・・・・・・・少々\n味の素・・・・・・・・・・・少々\n   鍋に塩を入れ、湯を沸かし始める。塩は多めで。\n  ベーコンの油が気になる人は、電子レンジで油抜きをする。キッチンペー\nパー 2 枚、ベーコン、キッチンペーパー 1 枚の順に敷いて、電子レンジ\nで 1 分ほど加熱すれば OK 。ベーコンが冷めるのを待って 1cm 幅に切る。\n  乾燥ニンニクを水で戻しておく。鷹の爪は種を除いておく。\n  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセット\nする。\n  オリーブオイル、ベーコン、水を切ったニンニクをフライパンに入れて\n弱中火で熱する。音がしてきたら弱火にする。ベーコンが跳ねるので注意。\n  ニンニクにこんがり焼き色が付いたら火を止め、鷹の爪を入れる。\n  パスタが茹で上がる前に、おたまに軽く一杯の茹で汁をフライパンに入\nれる。\n  パスタが茹で上がったら、湯切りしたパスタをフライパンに入れ、塩、\nこしょう、味の素で味を整える。茹で汁に塩気が含まれていることに注意\nする。\n  いつもどおり乳化([2009-04-12-1] )を意識して、強火でよくかき混ぜれ\nば出来上がり。\n  まとめ 今回は、茹で汁を上の分量より多く豪快に入れてしまいました。少し水っ\nぽくなってしまいましたが、オイルソースらしいといえばそうだったか\nもしれません。まあ、悪くない出来でした。\nオイルソースなのでオリーブオイルはいつもより多めです。具が少ないの\nで、パスタもいつもより多めです。茹で汁で塩気を付けるので、湯に入れ\nる塩もいつもより多めです。","contentSnippet":"パスタ第３弾です。今回は見た目よくできました。レシピ    材料(1人分)パスタ・・・・・・・・・・・110g(いつもより多め)オリーブオイル・・・・・・・適当(いつもより多め)ベーコン・・・・・・・・・・2枚乾燥ニンニク・・・・・・・・適当鷹の爪・・・・・・・・・・・1本塩・・・・・・・・・・・・・多めこしょう・・・・・・・・・・少々味の素・・・・・・・・・・・少々   鍋に塩を入れ、湯を沸かし始める。塩は多めで。  ベーコンの油が気になる人は、電子レンジで油抜きをする。キッチンペーパー 2 枚、ベーコン、キッチンペーパー 1 枚の順に敷いて、電子レンジで 1 分ほど加熱すれば OK 。ベーコンが冷めるのを待って 1cm 幅に切る。  乾燥ニンニクを水で戻しておく。鷹の爪は種を除いておく。  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセットする。  オリーブオイル、ベーコン、水を切ったニンニクをフライパンに入れて弱中火で熱する。音がしてきたら弱火にする。ベーコンが跳ねるので注意。  ニンニクにこんがり焼き色が付いたら火を止め、鷹の爪を入れる。  パスタが茹で上がる前に、おたまに軽く一杯の茹で汁をフライパンに入れる。  パスタが茹で上がったら、湯切りしたパスタをフライパンに入れ、塩、こしょう、味の素で味を整える。茹で汁に塩気が含まれていることに注意する。  いつもどおり乳化([2009-04-12-1] )を意識して、強火でよくかき混ぜれば出来上がり。  まとめ 今回は、茹で汁を上の分量より多く豪快に入れてしまいました。少し水っぽくなってしまいましたが、オイルソースらしいといえばそうだったかもしれません。まあ、悪くない出来でした。オイルソースなのでオリーブオイルはいつもより多めです。具が少ないので、パスタもいつもより多めです。茹で汁で塩気を付けるので、湯に入れる塩もいつもより多めです。","link":"https://masutaka.net/2009-05-29-1/","isoDate":"2009-05-29T00:00:00.000Z","dateMiliSeconds":1243555200000,"authorName":"masutaka"},{"title":"XHTML へのステップアップ","content":"[2009-05-28-1] のつづき。\nwikipedia によると XHTML というのは、SGML で書かれていた HTML を\nXML の文法で定義し直したマークアップ言語とのこと。参考情報→[2008-06-29-1] HTML とは文法はさほど変わらないので、「マスタカのホーム」と「マスタ\nカ宛メッセージ送信」を XHTML で書いてみた。ただ、HTML との違いは知\nらないので、The W3C Markup Validation Service でエラーを潰しながら\n対応した。以下、XHTML の説明。\nXHTML は HTML 4.01 をベースに作られた。最新の 1.0 仕様書は以下から\n参照できる。\n XHTML 1.0 仕様書   「3.1.1. Strictly Conforming Documents 」に書かれているとおり、\n以下の 3 種類の DTD(Document Type Definition、文書型定義) を規定し\nている。\n|XHTML 1.0 Strict DTD (厳密型)\n| |\n|XHTML 1.0 Transitional DTD (移行型)\n| |\n|XHTML 1.0 Frameset DTD (フレーム設定型)","contentSnippet":"[2009-05-28-1] のつづき。wikipedia によると XHTML というのは、SGML で書かれていた HTML をXML の文法で定義し直したマークアップ言語とのこと。参考情報→[2008-06-29-1] HTML とは文法はさほど変わらないので、「マスタカのホーム」と「マスタカ宛メッセージ送信」を XHTML で書いてみた。ただ、HTML との違いは知らないので、The W3C Markup Validation Service でエラーを潰しながら対応した。以下、XHTML の説明。XHTML は HTML 4.01 をベースに作られた。最新の 1.0 仕様書は以下から参照できる。 XHTML 1.0 仕様書   「3.1.1. Strictly Conforming Documents 」に書かれているとおり、以下の 3 種類の DTD(Document Type Definition、文書型定義) を規定している。|XHTML 1.0 Strict DTD (厳密型)| ||XHTML 1.0 Transitional DTD (移行型)| ||XHTML 1.0 Frameset DTD (フレーム設定型)","link":"https://masutaka.net/2009-05-28-2/","isoDate":"2009-05-28T01:00:00.000Z","dateMiliSeconds":1243472400000,"authorName":"masutaka"},{"title":"HTML の妥当性を診断する","content":"The W3C Markup Validation Service で、任意のサイトの HTML の文法\nチェックができる。そこで手始めに「マスタカのホーム」をチェックして\nみた。エラーの嵐だった&hellip;。\nエラーがあっても、Web ブラウザはうまく解釈して表示してくれる。ただ、\n後述の HTML の仕様にはなるべく沿うようにしたいし、Firefox では OK\nだが、IE だとレイアウトが崩れるなんてことはなるべく避けたいので、頑\n張ってゼロにしてみた。以下、HTML の説明。\nまず知っておかなくてはいけないことは、HTML にはバージョンがあるとい\nうこと。最新の 4.01 の仕様書は以下から参照できる。\n HTML 4.01 仕様書  HTML 4.01 仕様書(日本語訳)   「7.2 HTMLバージョン情報 」に書かれているとおり、HTML 4.01 仕様では、\n3 つの DTD(Document Type Definition、文書型定義) を規定しており、\n各 HTML ファイルには次のいずれかの文書型宣言を含める必要があるようだ。\nHTML 4.01 Strict DTD (厳密型)\n&lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.01//EN&#34; &#34;http://www.w3.org/TR/html4/strict.dtd&#34;&gt; HTML 4.01 Transitional DTD (移行型)\n&lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.","contentSnippet":"The W3C Markup Validation Service で、任意のサイトの HTML の文法チェックができる。そこで手始めに「マスタカのホーム」をチェックしてみた。エラーの嵐だった…。エラーがあっても、Web ブラウザはうまく解釈して表示してくれる。ただ、後述の HTML の仕様にはなるべく沿うようにしたいし、Firefox では OKだが、IE だとレイアウトが崩れるなんてことはなるべく避けたいので、頑張ってゼロにしてみた。以下、HTML の説明。まず知っておかなくてはいけないことは、HTML にはバージョンがあるということ。最新の 4.01 の仕様書は以下から参照できる。 HTML 4.01 仕様書  HTML 4.01 仕様書(日本語訳)   「7.2 HTMLバージョン情報 」に書かれているとおり、HTML 4.01 仕様では、3 つの DTD(Document Type Definition、文書型定義) を規定しており、各 HTML ファイルには次のいずれかの文書型宣言を含める必要があるようだ。HTML 4.01 Strict DTD (厳密型)<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> HTML 4.01 Transitional DTD (移行型)<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.","link":"https://masutaka.net/2009-05-28-1/","isoDate":"2009-05-28T00:00:00.000Z","dateMiliSeconds":1243468800000,"authorName":"masutaka"},{"title":"FoxMeter を付けてみた","content":"サイドメニューの下の方に、FoxMeter を付けました。\n公式サイトによると、以下の機能だそうです。うーむ。\n サイト訪問者の Firefox3 移行率を、簡単にチェック！ 最大の特徴は、Firefox3 への移行状況に応じて、「フォクすけ」の表情\nが変わっていく、という点です。  フォクすけ","contentSnippet":"サイドメニューの下の方に、FoxMeter を付けました。公式サイトによると、以下の機能だそうです。うーむ。 サイト訪問者の Firefox3 移行率を、簡単にチェック！ 最大の特徴は、Firefox3 への移行状況に応じて、「フォクすけ」の表情が変わっていく、という点です。  フォクすけ","link":"https://masutaka.net/2009-05-25-1/","isoDate":"2009-05-25T00:00:00.000Z","dateMiliSeconds":1243209600000,"authorName":"masutaka"},{"title":"サイドメニューの「カテゴリ」を大文字小文字無視でソート","content":"今回も「戯術者の日記」を参考にさせて頂きました。\n--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-24 23:57:16.000000000 +0900 @@ -1174,7 +1174,7 @@ # return if ($output_cat_pages == 0); my @lines = (); - foreach my $cat (sort keys %{$cl-&gt;{CAT}}) { + foreach my $cat (sort { lc $a cmp lc $b } keys %{$cl-&gt;{CAT}}) { my $n = $cl-&gt;{CAT}-&gt;{$cat}; my $url; if ($output_cat_pages) { 参考にしたページ:\n戯術者の日記:カテゴリ一覧を大文字小文字無視でソート 追記(2011-07-06):\nカスタマイズできるようにして、GitHub に push しました。 ","contentSnippet":"今回も「戯術者の日記」を参考にさせて頂きました。--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-24 23:57:16.000000000 +0900 @@ -1174,7 +1174,7 @@ # return if ($output_cat_pages == 0); my @lines = (); - foreach my $cat (sort keys %{$cl->{CAT}}) { + foreach my $cat (sort { lc $a cmp lc $b } keys %{$cl->{CAT}}) { my $n = $cl->{CAT}->{$cat}; my $url; if ($output_cat_pages) { 参考にしたページ:戯術者の日記:カテゴリ一覧を大文字小文字無視でソート 追記(2011-07-06):カスタマイズできるようにして、GitHub に push しました。","link":"https://masutaka.net/2009-05-24-6/","isoDate":"2009-05-24T05:00:00.000Z","dateMiliSeconds":1243141200000,"authorName":"masutaka"},{"title":"cl.rdf にもカテゴリ表示","content":"※ RSS リーダー を使うと、自分の見たい Web サイトの更新を自動で確認\nしてくれます。未読管理が出来るものも多いです。ぜひ使ってみてくださ\nい。数ある RSS リーダーの中でも、私は Google リーダー をお薦めします。\nちなみに、このブログの登録フィードはこちら です。\nRSS リーダーでは各記事のタイトルにカテゴリ名が付かないので、付ける\nようにしてみました。cl.rdf の出力が変わります。\n--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-24 17:54:55.000000000 +0900 @@ -1089,7 +1089,7 @@ push @items, { permlink =&gt; $permlink, -\titemheader =&gt; html2xmlstr($e-&gt;{$i}{h}), +\titemheader =&gt; html2xmlstr(&#34;[&#34;.join(&#34;][&#34;, @{$cl-&gt;{all}-&gt;{$ymd}-&gt;{$i}-&gt;{cat}}).&#34;] &#34;.$e-&gt;{$i}{h}), itemauthor =&gt; $e-&gt;{$i}{a}, itemcontent =&gt; $cont, itemcontentencoded =&gt; $coen, 参考にしたページ:\n戯術者の日記:rdfファイルにもカテゴリ表示 戯術者の日記:続きを読…めない 追記(2009-08-31):\ntwitterfeed の出力が不格好になるので、元に戻しました(カテゴリ名を付\nけないようにしました)。","contentSnippet":"※ RSS リーダー を使うと、自分の見たい Web サイトの更新を自動で確認してくれます。未読管理が出来るものも多いです。ぜひ使ってみてください。数ある RSS リーダーの中でも、私は Google リーダー をお薦めします。ちなみに、このブログの登録フィードはこちら です。RSS リーダーでは各記事のタイトルにカテゴリ名が付かないので、付けるようにしてみました。cl.rdf の出力が変わります。--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-24 17:54:55.000000000 +0900 @@ -1089,7 +1089,7 @@ push @items, { permlink => $permlink, -\titemheader => html2xmlstr($e->{$i}{h}), +\titemheader => html2xmlstr(\"[\".join(\"][\", @{$cl->{all}->{$ymd}->{$i}->{cat}}).\"] \".$e->{$i}{h}), itemauthor => $e->{$i}{a}, itemcontent => $cont, itemcontentencoded => $coen, 参考にしたページ:戯術者の日記:rdfファイルにもカテゴリ表示 戯術者の日記:続きを読…めない 追記(2009-08-31):twitterfeed の出力が不格好になるので、元に戻しました(カテゴリ名を付けないようにしました)。","link":"https://masutaka.net/2009-05-24-5/","isoDate":"2009-05-24T04:00:00.000Z","dateMiliSeconds":1243137600000,"authorName":"masutaka"},{"title":"private item と normal item","content":"各日付の中で private item (p:) と normal item をどういう順番で置く\nかは、自分で決めておかないとマズイね。\n例えばある日付の中で、両者が交互に出現すると [YYYY-MM-DD-I] を使っ\nた参照がややこしくなる。private item の方が数が少ないと思うから、\nnormal item が下、private item を上に置くようにすると良さそう。\nあと、[YYYY-MM-DD-I] で参照されているアイテムを移動すると、リンクが\n切れてしまう。アイテムを移動するときは、そのアイテムの参照元も修正\nする必要がある。","contentSnippet":"各日付の中で private item (p:) と normal item をどういう順番で置くかは、自分で決めておかないとマズイね。例えばある日付の中で、両者が交互に出現すると [YYYY-MM-DD-I] を使った参照がややこしくなる。private item の方が数が少ないと思うから、normal item が下、private item を上に置くようにすると良さそう。あと、[YYYY-MM-DD-I] で参照されているアイテムを移動すると、リンクが切れてしまう。アイテムを移動するときは、そのアイテムの参照元も修正する必要がある。","link":"https://masutaka.net/2009-05-24-4/","isoDate":"2009-05-24T03:00:00.000Z","dateMiliSeconds":1243134000000,"authorName":"masutaka"},{"title":"main() の第 3 引数","content":"処理系に依存してしまうが、main() の第 3 引数には環境変数リストが入っ\nているとのこと。うちの Debian GNU/Linux squeeze では参照できた。\n#include &lt;stdio.h&gt; int main(int argc, char **argv, char **envp){ int i; for (i = 0; envp[i] != NULL; i++){ printf(&#34;%s\\n&#34;, envp[i]); } return 0; } (URL: 404 Blog Not Found:CGIの神話と現実 )\n(URL: ｉｎｔ　void　(main)の意味/// -OKWave )","contentSnippet":"処理系に依存してしまうが、main() の第 3 引数には環境変数リストが入っているとのこと。うちの Debian GNU/Linux squeeze では参照できた。#include <stdio.h> int main(int argc, char **argv, char **envp){ int i; for (i = 0; envp[i] != NULL; i++){ printf(\"%s\\n\", envp[i]); } return 0; } (URL: 404 Blog Not Found:CGIの神話と現実 )(URL: ｉｎｔ　void　(main)の意味/// -OKWave )","link":"https://masutaka.net/2009-05-24-3/","isoDate":"2009-05-24T02:00:00.000Z","dateMiliSeconds":1243130400000,"authorName":"masutaka"},{"title":"Lisp 系のソースコードにも色を付ける","content":"[2009-05-24-1] の続きです。\nリリース元の解説 にも書いてありますが、Lisp 系のソースは拡張サポート\nのようで、自動判別してくれません。変な色になってしまいます。\nlang-lisp.js も別途読み込ませる必要があるようです。\n以下、Emacs Lisp を例に説明します。他の Lisp 系言語で色付けする参考\nにもなるかと思います。lang-lisp.js もご覧下さい。\n[2009-05-24-1] とは、cl.conf と chalow の修正が変わります。4 と 5\nの手順を以下に置き換えてください。あと、[src]〜[/src] の代わり\nに [src_el]〜[/src_el] を使って下さい。\n4&rsquo;. cl.conf を修正します。全ての  の直前に、以下を挿入すれば\nよいでしょう。\n&lt;script type=&#34;text/javascript&#34; src=&#34;http://masutaka.net/prettify/prettify.js&#34;&gt;&lt;/script&gt; &lt;script type=&#34;text/javascript&#34; src=&#34;http://masutaka.net/prettify/lang-lisp.js&#34;&gt;&lt;/script&gt; &lt;script&gt;prettyPrint();&lt;/script&gt; ※ 私は $side_menu を全てのページで表示するようにしているので、その\n先頭に 1 つだけ追加しています。\n5&rsquo;. chalow を修正します。以下はオリジナル(chalow-1.0.tar.gz)の\nchalow へのパッチです。\n--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-23 23:39:10.000000000 +0900 @@ -1275,6 +1275,8 @@ my %escaped_src; my $num_of_escaped_plugin; my %escaped_plugin; +my $num_of_escaped_src_el; +my %escaped_src_el; sub escape_string { my ($strp) = @_; @@ -1304,16 +1306,27 @@ $$strp =~ s!","contentSnippet":"[2009-05-24-1] の続きです。リリース元の解説 にも書いてありますが、Lisp 系のソースは拡張サポートのようで、自動判別してくれません。変な色になってしまいます。lang-lisp.js も別途読み込ませる必要があるようです。以下、Emacs Lisp を例に説明します。他の Lisp 系言語で色付けする参考にもなるかと思います。lang-lisp.js もご覧下さい。[2009-05-24-1] とは、cl.conf と chalow の修正が変わります。4 と 5の手順を以下に置き換えてください。あと、[src]〜[/src] の代わりに [src_el]〜[/src_el] を使って下さい。4’. cl.conf を修正します。全ての  の直前に、以下を挿入すればよいでしょう。<script type=\"text/javascript\" src=\"http://masutaka.net/prettify/prettify.js\"></script> <script type=\"text/javascript\" src=\"http://masutaka.net/prettify/lang-lisp.js\"></script> <script>prettyPrint();</script> ※ 私は $side_menu を全てのページで表示するようにしているので、その先頭に 1 つだけ追加しています。5’. chalow を修正します。以下はオリジナル(chalow-1.0.tar.gz)のchalow へのパッチです。--- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.000000000 +0900 +++ chalow-1.0/chalow\t2009-05-23 23:39:10.000000000 +0900 @@ -1275,6 +1275,8 @@ my %escaped_src; my $num_of_escaped_plugin; my %escaped_plugin; +my $num_of_escaped_src_el; +my %escaped_src_el; sub escape_string { my ($strp) = @_; @@ -1304,16 +1306,27 @@ $$strp =~ s!","link":"https://masutaka.net/2009-05-24-2/","isoDate":"2009-05-24T01:00:00.000Z","dateMiliSeconds":1243126800000,"authorName":"masutaka"},{"title":"ソースコードに色を付ける","content":"[2009-05-23-1] のように、時々ソースコードを貼り付けることがあります\nが、色が付かなくて寂しかったので google-code-prettify で色を付ける\nようにしてみました。chalow 以外のブログにも使えると思います。\n[src]〜[/src] で囲まれたソースの言語を自動判別して、適切\nに色付けしてくれます。\n  http://code.google.com/p/google-code-prettify/ から、\n&ldquo;prettify-small-日付.zip&rdquo; をダウンロードします。(&ldquo;prettify-日付.zip&rdquo;\nは *.js が圧縮されていません。こだわりがなければ small の方をダウン\nロードすればよいでしょう。)\n  解凍してできる *.css と *.js をご自分の Web スペースにアップしま\nす。今回は http://masutaka.net/prettify/ にアップしました。以下、こ\nの状態を前提に話を進めます。\n  お使いの CSS に、以下を追加します。\n@import url(http://masutaka.net/prettify/prettify.css);\n  cl.conf を修正します。全ての  の直前に、以下を挿入すれば\nよいでしょう。\n  &lt;script type=&#34;text/javascript&#34; src=&#34;http://masutaka.net/prettify/prettify.js&#34;&gt;&lt;/script&gt; &lt;script&gt;prettyPrint();&lt;/script&gt; ※ 私は $side_menu を全てのページで表示するようにしているので、その\n先頭に 1 つだけ追加しました。\nchalow を修正します。以下はオリジナル(chalow-1.0.tar.gz)の\nchalow へのパッチです。  --- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.","contentSnippet":"[2009-05-23-1] のように、時々ソースコードを貼り付けることがありますが、色が付かなくて寂しかったので google-code-prettify で色を付けるようにしてみました。chalow 以外のブログにも使えると思います。[src]〜[/src] で囲まれたソースの言語を自動判別して、適切に色付けしてくれます。  http://code.google.com/p/google-code-prettify/ から、“prettify-small-日付.zip” をダウンロードします。(“prettify-日付.zip”は *.js が圧縮されていません。こだわりがなければ small の方をダウンロードすればよいでしょう。)  解凍してできる *.css と *.js をご自分の Web スペースにアップします。今回は http://masutaka.net/prettify/ にアップしました。以下、この状態を前提に話を進めます。  お使いの CSS に、以下を追加します。@import url(http://masutaka.net/prettify/prettify.css);  cl.conf を修正します。全ての  の直前に、以下を挿入すればよいでしょう。  <script type=\"text/javascript\" src=\"http://masutaka.net/prettify/prettify.js\"></script> <script>prettyPrint();</script> ※ 私は $side_menu を全てのページで表示するようにしているので、その先頭に 1 つだけ追加しました。chalow を修正します。以下はオリジナル(chalow-1.0.tar.gz)のchalow へのパッチです。  --- orig/chalow-1.0/chalow\t2007-10-19 23:15:01.","link":"https://masutaka.net/2009-05-24-1/","isoDate":"2009-05-24T00:00:00.000Z","dateMiliSeconds":1243123200000,"authorName":"masutaka"},{"title":"合体ロボ","content":"タイムボカンメドレー　(1/2) -- YouTube タイムボカンメドレー　(2/2) -- YouTube タイムボカンシリーズ の中ではヤッターマン が一番人気があるみたいです\nが、やはり合体ロボが出てないとダメでしょう。ｗ\nシリーズの中では、ヤットデタマン と逆転イッパツマン で合体ロボが出て\nきます。ヤットデタマンは大巨神(大馬神)、イッパツマンは逆転王と三冠\n王です。大巨神は子供の頃持っていました。大天馬を持ってなかったので、\n合体できませんでしたが。。(; ;)\n※ 関係ないけど、イッパツマンのキャラクターデザインは天野喜孝 だった\nんですね。知らなかった。\nそんなイケてる合体ロボ達を CG で作ってしまった人がいました。合体の\n流れも分かるようになっています。スゲー。\n懐かしロボCGギャラリー 合体のアニメの動画はほとんど見つけられませんでした。逆転王は上の\n「タイムボカンメドレー　(2/2)」の 4 分 40 秒くらいから、三冠王は下\nの動画の 2 分 30 秒くらいから始まります。\n タイムボカンじゃないけど、こんなのもありました。なつかしいなあ。\nでも、今見るとかなり痛い。^^;\n たしか、土曜日の 17:30 からダイオージャ 、18:00 からは戦隊物を見てま\nした。(調べたら戦隊物はサンバルカン で、幼稚園の年長から小学一年にか\nけて見てたらしい。)","contentSnippet":"タイムボカンメドレー　(1/2) -- YouTube タイムボカンメドレー　(2/2) -- YouTube タイムボカンシリーズ の中ではヤッターマン が一番人気があるみたいですが、やはり合体ロボが出てないとダメでしょう。ｗシリーズの中では、ヤットデタマン と逆転イッパツマン で合体ロボが出てきます。ヤットデタマンは大巨神(大馬神)、イッパツマンは逆転王と三冠王です。大巨神は子供の頃持っていました。大天馬を持ってなかったので、合体できませんでしたが。。(; ;)※ 関係ないけど、イッパツマンのキャラクターデザインは天野喜孝 だったんですね。知らなかった。そんなイケてる合体ロボ達を CG で作ってしまった人がいました。合体の流れも分かるようになっています。スゲー。懐かしロボCGギャラリー 合体のアニメの動画はほとんど見つけられませんでした。逆転王は上の「タイムボカンメドレー　(2/2)」の 4 分 40 秒くらいから、三冠王は下の動画の 2 分 30 秒くらいから始まります。 タイムボカンじゃないけど、こんなのもありました。なつかしいなあ。でも、今見るとかなり痛い。^^; たしか、土曜日の 17:30 からダイオージャ 、18:00 からは戦隊物を見てました。(調べたら戦隊物はサンバルカン で、幼稚園の年長から小学一年にかけて見てたらしい。)","link":"https://masutaka.net/2009-05-23-2/","isoDate":"2009-05-23T01:00:00.000Z","dateMiliSeconds":1243040400000,"authorName":"masutaka"},{"title":"コメントが投稿されたら私宛にメール送信","content":"@pages の時は、自宅の Linux の cron にベタベタなシェルスクリプトを\n仕掛けていました。\n→1 時間に 1 回、lftp でコメントのログファイルを取りに行く。前回と\ndiff があり、スパムでないコメントが含まれていたら、ローカルのメール\nサーバから私宛にメール送信。\nさくらインターネットになって、CGI からメールを送れるようになったの\nで、コメントが投稿されたら私宛にメール送信するようにしました。\n送信に使ったのは、Perl の MIME::Lite モジュールです。MIME::Lite は、\n送信方法を sendmail と SMTP から選べたり、ファイル添付もできる便利\nなモジュールです。今回は sendmail を使いました。\n今回もオリジナル(kuttukibbs-1.0rc3.tar.gz)の kuttukibbs.conf と\nkuttukibbs.cgi へのパッチを貼り付けておきますね。\n--- orig/kuttukibbs-1.0rc3/kuttukibbs.conf\t2004-04-08 22:27:02.000000000 +0900 +++ kuttukibbs-1.0rc3/kuttukibbs.conf\t2009-05-23 14:19:29.000000000 +0900 @@ -33,6 +33,14 @@ $charset = &#34;EUC-JP&#34;; # -------------------------------------------------------------------- +# CGI の場所を http で記載。 +$CommentUrl = &#39;http://example.com/kuttukibbs/kuttukibbs.cgi&#39;; + +# -------------------------------------------------------------------- +# 記事が投稿されたら、このアドレスにメールする。 +$NotifyEmail = &#39;youremailaddress@example.","contentSnippet":"@pages の時は、自宅の Linux の cron にベタベタなシェルスクリプトを仕掛けていました。→1 時間に 1 回、lftp でコメントのログファイルを取りに行く。前回とdiff があり、スパムでないコメントが含まれていたら、ローカルのメールサーバから私宛にメール送信。さくらインターネットになって、CGI からメールを送れるようになったので、コメントが投稿されたら私宛にメール送信するようにしました。送信に使ったのは、Perl の MIME::Lite モジュールです。MIME::Lite は、送信方法を sendmail と SMTP から選べたり、ファイル添付もできる便利なモジュールです。今回は sendmail を使いました。今回もオリジナル(kuttukibbs-1.0rc3.tar.gz)の kuttukibbs.conf とkuttukibbs.cgi へのパッチを貼り付けておきますね。--- orig/kuttukibbs-1.0rc3/kuttukibbs.conf\t2004-04-08 22:27:02.000000000 +0900 +++ kuttukibbs-1.0rc3/kuttukibbs.conf\t2009-05-23 14:19:29.000000000 +0900 @@ -33,6 +33,14 @@ $charset = \"EUC-JP\"; # -------------------------------------------------------------------- +# CGI の場所を http で記載。 +$CommentUrl = 'http://example.com/kuttukibbs/kuttukibbs.cgi'; + +# -------------------------------------------------------------------- +# 記事が投稿されたら、このアドレスにメールする。 +$NotifyEmail = 'youremailaddress@example.","link":"https://masutaka.net/2009-05-23-1/","isoDate":"2009-05-23T00:00:00.000Z","dateMiliSeconds":1243036800000,"authorName":"masutaka"},{"title":"masutaka.net のファイルを直接編集","content":"Emacs には、リモートホストにあるファイルをあたかもローカルにあるよ\nうに扱える Tramp という機構がある。例えば remotehost の $HOME を開\nきたい場合は、以下のように find-file する。\n C-x C-f /remotehost:\n パスワードを聞かれない設定は [2007-01-27-1] にまとめてある。\n接続方式は、tramp-default-method の値が使われる。私の環境では初期値\nとして、&ldquo;scp&rdquo; が設定されていた。\nただ、masutaka.net に接続しようとすると、ミニバッファに以下のメッセー\nジが出て接続できなかった。\n Tramp: Waiting for prompts from remote shell\n ググってみたら、そのものズバリのページがあった。\nTRAMPとZsh - ゴミ箱の中の雑記帳 私の場合も Emacs の TRAMP のバッファでは接続できているように見え、\nプロンプトの前に ^M が 2 つ付いている。リモートホストのログインシェ\nルが zsh だと、プロンプトの前の ^M が悪さをするようだ。\nTRAMP の接続方法を scp から scpx に変更すると、標準のログインシェル\nではなく /bin/sh が使われるとのこと。で、以下の設定をしたら接続でき\nた。やった！\n (setq tramp-default-method &ldquo;scpx&rdquo;)\n ちなみに、ftp でしかアクセスできないリモートホストは以下のように","contentSnippet":"Emacs には、リモートホストにあるファイルをあたかもローカルにあるように扱える Tramp という機構がある。例えば remotehost の $HOME を開きたい場合は、以下のように find-file する。 C-x C-f /remotehost: パスワードを聞かれない設定は [2007-01-27-1] にまとめてある。接続方式は、tramp-default-method の値が使われる。私の環境では初期値として、“scp” が設定されていた。ただ、masutaka.net に接続しようとすると、ミニバッファに以下のメッセージが出て接続できなかった。 Tramp: Waiting for prompts from remote shell ググってみたら、そのものズバリのページがあった。TRAMPとZsh - ゴミ箱の中の雑記帳 私の場合も Emacs の TRAMP のバッファでは接続できているように見え、プロンプトの前に ^M が 2 つ付いている。リモートホストのログインシェルが zsh だと、プロンプトの前の ^M が悪さをするようだ。TRAMP の接続方法を scp から scpx に変更すると、標準のログインシェルではなく /bin/sh が使われるとのこと。で、以下の設定をしたら接続できた。やった！ (setq tramp-default-method “scpx”) ちなみに、ftp でしかアクセスできないリモートホストは以下のように","link":"https://masutaka.net/2009-05-19-1/","isoDate":"2009-05-19T00:00:00.000Z","dateMiliSeconds":1242691200000,"authorName":"masutaka"},{"title":"リンク切れチェック","content":"Website Explorer  Windows アプリ。masutaka.net のリンク切れチェックに使った。サイト全\n体のリンク切れをチェックできたり、階層構造やファイル構成、画像一覧\nなどを一望できたりする。&ldquo;301: Moved Permanently([2009-05-17-1] )&rdquo; の\n時は、転送先も表示してくれる。なかなか使いやすいよ。\nBookmarks Link Checker Minus  FireFox のアドオン。ブックマークのリンク切れチェックに使える。\nシンプルでよろし。","contentSnippet":"Website Explorer  Windows アプリ。masutaka.net のリンク切れチェックに使った。サイト全体のリンク切れをチェックできたり、階層構造やファイル構成、画像一覧などを一望できたりする。“301: Moved Permanently([2009-05-17-1] )” の時は、転送先も表示してくれる。なかなか使いやすいよ。Bookmarks Link Checker Minus  FireFox のアドオン。ブックマークのリンク切れチェックに使える。シンプルでよろし。","link":"https://masutaka.net/2009-05-18-1/","isoDate":"2009-05-18T00:00:00.000Z","dateMiliSeconds":1242604800000,"authorName":"masutaka"},{"title":"カルボナーラ v2.0","content":"[2009-05-10-1] の How to make a real CARBONARA -- YouTube を実際に試してみま\nした。このレシピでは生クリームを使いません。\nレシピ    材料(1人分)\nパスタ・・・・・・・・・・・100g\nオリーブオイル・・・・・・・適当\nベーコン・・・・・・・・・・2枚\n卵・・・・・・・・・・・・・1個\nパルメザンチーズ・・・・・・これでもか！というくらい\n黒こしょう(粗挽き)・・・・・ティースプーン1杯\n塩・・・・・・・・・・・・・多め\n   鍋に塩を入れ、湯を沸かし始める。塩は多めで。\n  ベーコンを 1cm 幅に切る。卵はパルメザンチーズをたっぷりかけて、\nよく溶いておく。\n  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセット\nする。\n  オリーブオイルを引いてフライパンを中火で熱し、ベーコンを炒める。\nこんがり焼き色が付いたら、火を止め黒こしょうを入れる。\n  パスタが茹で上がる前に、茹で汁をおたまに軽く一杯、フライパンに入\nれる。\n  パスタが茹で上がったら湯を切り、フライパンに入れる。茹で汁は少し\n残しておく。\n  溶いた卵を投入し、よくかき混ぜる。かき混ざったら、茹で汁をもう軽\nく一杯加え、さらにかき混ぜる。\n  まとめ かき混ぜるときに火を付けてしまったたため、卵がダマになり見た目も悪\nくなってしまいました。でも、生クリームを入れなかったためか、それほ\nど気になりませんでした。なんだ、生クリームいらないじゃん。(・∀・)\nチーズはやはり、良いものを使った方が良いと思います。\nベーコンはブロックを使うと、卵やチーズのボリュームに負けません。\n塩分は茹で汁とチーズから出るので、特に入れる必要はないと思います。\nまあ、悪くない出来だったかな。^^;","contentSnippet":"[2009-05-10-1] の How to make a real CARBONARA -- YouTube を実際に試してみました。このレシピでは生クリームを使いません。レシピ    材料(1人分)パスタ・・・・・・・・・・・100gオリーブオイル・・・・・・・適当ベーコン・・・・・・・・・・2枚卵・・・・・・・・・・・・・1個パルメザンチーズ・・・・・・これでもか！というくらい黒こしょう(粗挽き)・・・・・ティースプーン1杯塩・・・・・・・・・・・・・多め   鍋に塩を入れ、湯を沸かし始める。塩は多めで。  ベーコンを 1cm 幅に切る。卵はパルメザンチーズをたっぷりかけて、よく溶いておく。  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセットする。  オリーブオイルを引いてフライパンを中火で熱し、ベーコンを炒める。こんがり焼き色が付いたら、火を止め黒こしょうを入れる。  パスタが茹で上がる前に、茹で汁をおたまに軽く一杯、フライパンに入れる。  パスタが茹で上がったら湯を切り、フライパンに入れる。茹で汁は少し残しておく。  溶いた卵を投入し、よくかき混ぜる。かき混ざったら、茹で汁をもう軽く一杯加え、さらにかき混ぜる。  まとめ かき混ぜるときに火を付けてしまったたため、卵がダマになり見た目も悪くなってしまいました。でも、生クリームを入れなかったためか、それほど気になりませんでした。なんだ、生クリームいらないじゃん。(・∀・)チーズはやはり、良いものを使った方が良いと思います。ベーコンはブロックを使うと、卵やチーズのボリュームに負けません。塩分は茹で汁とチーズから出るので、特に入れる必要はないと思います。まあ、悪くない出来だったかな。^^;","link":"https://masutaka.net/2009-05-17-5/","isoDate":"2009-05-17T04:00:00.000Z","dateMiliSeconds":1242532800000,"authorName":"masutaka"},{"title":"masutaka.net に引っ越しました!!","content":"masutaka.net を取得し、コンテンツも移動しました。\n[2009-05-17-1] のリダイレクトの設定をしたので、ブラウザの URL も\nhttp://masutaka.net/chalow/ になっていると思います。\n▼今までのアクセス\n読者 -&gt; http://www8.atpages.jp/hotsuma/* ▼これからのアクセス\n読者 -&gt; http://masutaka.net/* -内部-&gt; http://masutaka.sakura.ne.jp/* 読者 -&gt; http://www8.atpages.jp/hotsuma/* -自動転送-&gt; http://masutaka.net/* レンタルサーバは @pages から、さくらインターネット に変更しました。\n私が注目した違いはこんな感じです。(ディープな使い方はしていないので、\n悪しからず。。。)\n    @pages さくらインターネット(スタンダードプラン)     料金 ￥0 ￥1,000(初期費用)+￥5,000(年間)   アップロード方法 FTP SSH,FTP   cron × ○   CGIからのメール送信 × ○   転送量制限 1MB以上の転送は5KB/sに制限される 10GB(日)    DISK容量 1GB 3GB    ※ masutaka.","contentSnippet":"masutaka.net を取得し、コンテンツも移動しました。[2009-05-17-1] のリダイレクトの設定をしたので、ブラウザの URL もhttp://masutaka.net/chalow/ になっていると思います。▼今までのアクセス読者 -> http://www8.atpages.jp/hotsuma/* ▼これからのアクセス読者 -> http://masutaka.net/* -内部-> http://masutaka.sakura.ne.jp/* 読者 -> http://www8.atpages.jp/hotsuma/* -自動転送-> http://masutaka.net/* レンタルサーバは @pages から、さくらインターネット に変更しました。私が注目した違いはこんな感じです。(ディープな使い方はしていないので、悪しからず。。。)    @pages さくらインターネット(スタンダードプラン)     料金 ￥0 ￥1,000(初期費用)+￥5,000(年間)   アップロード方法 FTP SSH,FTP   cron × ○   CGIからのメール送信 × ○   転送量制限 1MB以上の転送は5KB/sに制限される 10GB(日)    DISK容量 1GB 3GB    ※ masutaka.","link":"https://masutaka.net/2009-05-17-4/","isoDate":"2009-05-17T03:00:00.000Z","dateMiliSeconds":1242529200000,"authorName":"masutaka"},{"title":"クックパッド本","content":"中の人によると「おもしろいよ」とのこと。\nまだ買っていませんが、宣伝しておきますね。","contentSnippet":"中の人によると「おもしろいよ」とのこと。まだ買っていませんが、宣伝しておきますね。","link":"https://masutaka.net/2009-05-17-3/","isoDate":"2009-05-17T02:00:00.000Z","dateMiliSeconds":1242525600000,"authorName":"masutaka"},{"title":"301 や 302 リダイレクトを返したときの検索エンジンの挙動","content":"Google    種類 説明     301リダイレクト 永久的なリダイレクト   302リダイレクト 記載なし   303リダイレクト 記載なし   307リダイレクト 記載なし   メタリフレッシュ 詳細不明。Google では 301 リダイレクトをお勧めしている。    「サイトの移転 - ウェブマスター/サイト所有者 ヘルプ 」\n「メタ タグ - ウェブマスター/サイト所有者 ヘルプ 」より\nYahoo! JAPAN    種類 説明     301リダイレクト 永久的なリダイレクト   302リダイレクト 一時的なリダイレクト   303リダイレクト 記載なし   307リダイレクト 記載なし   メタリフレッシュ &lt;meta http-equiv=&quot;refresh&quot; content=.","contentSnippet":"Google    種類 説明     301リダイレクト 永久的なリダイレクト   302リダイレクト 記載なし   303リダイレクト 記載なし   307リダイレクト 記載なし   メタリフレッシュ 詳細不明。Google では 301 リダイレクトをお勧めしている。    「サイトの移転 - ウェブマスター/サイト所有者 ヘルプ 」「メタ タグ - ウェブマスター/サイト所有者 ヘルプ 」よりYahoo! JAPAN    種類 説明     301リダイレクト 永久的なリダイレクト   302リダイレクト 一時的なリダイレクト   303リダイレクト 記載なし   307リダイレクト 記載なし   メタリフレッシュ <meta http-equiv=\"refresh\" content=.","link":"https://masutaka.net/2009-05-17-2/","isoDate":"2009-05-17T01:00:00.000Z","dateMiliSeconds":1242522000000,"authorName":"masutaka"},{"title":"Web サイトを移転するときの便利なテクニック","content":"[2009-05-16-3] は、今回の布石でした。決して、Web サーバと直接お話し\nしたいわけではありません。ｗ\n移転を読者にお知らせする、一番簡単な方法が [2006-05-28-1] にも書い\nたメタリフレッシュです。ただ、全ての *.html や CGI に仕込む必要があ\nりますし、検索エンジンに伝わるかどうかは検索エンジンの実装に依存し\nてしまいます(※[2009-05-17-2] )。以降で述べる .htaccess の使用が許可\nされていない時を除き、使うべきではないでしょう。\n実は、HTTP ステータスコードには移転関係のコードもあります。\n 301: Moved Permanently\n302: Found\n303: See Other\n307: Temporary Redirect\n 説明は「HTTPステータスコード 」に譲りますが、Web サー\nバが 301 を返すようにすると、検索エンジンが適切に処理してくれます。\nでは、どうすれば Web サーバが 301 を返すようになるのでしょう？\n例えば、http://src.example.jp/~masutaka/ から\nhttp://dst.example.com/~masutaka/ に構成を変えずにそのまま移転した\nい場合は、.htaccess に以下のように記載します。.htaccess は、\nhttp://src.example.jp/~masutaka/.htaccess に相当する場所に置きます。\n&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteRule (.*) http://dst.example.com/~masutaka/$1 [R=301,L] &lt;/IfModule&gt; 今回は試しに http://www8.atpages.jp/hotsuma/test.html を\nhttp://homepage2.nifty.com/chronicle/test.html に飛ばす設定を仕込ん\nでみました。","contentSnippet":"[2009-05-16-3] は、今回の布石でした。決して、Web サーバと直接お話ししたいわけではありません。ｗ移転を読者にお知らせする、一番簡単な方法が [2006-05-28-1] にも書いたメタリフレッシュです。ただ、全ての *.html や CGI に仕込む必要がありますし、検索エンジンに伝わるかどうかは検索エンジンの実装に依存してしまいます(※[2009-05-17-2] )。以降で述べる .htaccess の使用が許可されていない時を除き、使うべきではないでしょう。実は、HTTP ステータスコードには移転関係のコードもあります。 301: Moved Permanently302: Found303: See Other307: Temporary Redirect 説明は「HTTPステータスコード 」に譲りますが、Web サーバが 301 を返すようにすると、検索エンジンが適切に処理してくれます。では、どうすれば Web サーバが 301 を返すようになるのでしょう？例えば、http://src.example.jp/~masutaka/ からhttp://dst.example.com/~masutaka/ に構成を変えずにそのまま移転したい場合は、.htaccess に以下のように記載します。.htaccess は、http://src.example.jp/~masutaka/.htaccess に相当する場所に置きます。<IfModule mod_rewrite.c> RewriteEngine On RewriteBase / RewriteRule (.*) http://dst.example.com/~masutaka/$1 [R=301,L] </IfModule> 今回は試しに http://www8.atpages.jp/hotsuma/test.html をhttp://homepage2.nifty.com/chronicle/test.html に飛ばす設定を仕込んでみました。","link":"https://masutaka.net/2009-05-17-1/","isoDate":"2009-05-17T00:00:00.000Z","dateMiliSeconds":1242518400000,"authorName":"masutaka"},{"title":"telnet で直接 web サーバとお話しする。","content":"[2004-02-09-1] の HTTP 版です。\nWeb ブラウザは HTTP リクエストを送信し、返ってきたステータスコード\nや、生の HTML 等を解析するのが仕事です。\nHTTP リクエストは簡単なので、人間が telnet で接続しサーバとお話しす\nることもできます。\n存在するページを指定すると、200 ステータスコードとともに、生の HTML コードが出力されます。 % telnet www.example.com 80 Trying 208.77.188.166... Connected to example.com. Escape character is &#39;^]&#39;. GET /index.html HTTP/1.0 #&lt;= 入力後、Enter×2回 HTTP/1.1 200 OK #&lt;= ステータスコード 200 が返ってきた。 (以下省略) 存在しないページを指定すると、404 ステータスコードが出力されます。 % telnet www.example.com 80 Trying 208.77.188.166... Connected to www.example.com. Escape character is &#39;^]&#39;. GET /hoge.html HTTP/1.0 #&lt;= 存在しないページを入力後、Enter×2回 HTTP/1.1 404 Not Found #&lt;= ステータスコード 404 が返ってきた。 (以下省略) オプション(HTTP ヘッダ)を指定すると、環境変数として CGI に渡ります。 この例だと分かりませんが、簡単な CGI のプログラムで確認出来ます。","contentSnippet":"[2004-02-09-1] の HTTP 版です。Web ブラウザは HTTP リクエストを送信し、返ってきたステータスコードや、生の HTML 等を解析するのが仕事です。HTTP リクエストは簡単なので、人間が telnet で接続しサーバとお話しすることもできます。存在するページを指定すると、200 ステータスコードとともに、生の HTML コードが出力されます。 % telnet www.example.com 80 Trying 208.77.188.166... Connected to example.com. Escape character is '^]'. GET /index.html HTTP/1.0 #<= 入力後、Enter×2回 HTTP/1.1 200 OK #<= ステータスコード 200 が返ってきた。 (以下省略) 存在しないページを指定すると、404 ステータスコードが出力されます。 % telnet www.example.com 80 Trying 208.77.188.166... Connected to www.example.com. Escape character is '^]'. GET /hoge.html HTTP/1.0 #<= 存在しないページを入力後、Enter×2回 HTTP/1.1 404 Not Found #<= ステータスコード 404 が返ってきた。 (以下省略) オプション(HTTP ヘッダ)を指定すると、環境変数として CGI に渡ります。 この例だと分かりませんが、簡単な CGI のプログラムで確認出来ます。","link":"https://masutaka.net/2009-05-16-3/","isoDate":"2009-05-16T02:00:00.000Z","dateMiliSeconds":1242439200000,"authorName":"masutaka"},{"title":"本を購入","content":"近所の文教堂にぶらっと寄ったら、4 冊も買ってしましました。\n新版 古事記物語  最近、日本神話がややマイブームです。まとめて読んだことがなかったの\nで、買ってみました。文字が大きく文章も平易なので、子供でも読めそうです。\n古事記・日本書紀を歩く—神話と伝説の世界を訪ねて  写真付きで、古事記・日本書紀の地に案内してくれます。これから読むの\nが楽しみです。\n大人のための「北斗の拳」人物伝  脈絡ねぇ〜ｗ\nイラスト付きの各キャラクターの解説本です。なぜか最後はボルゲでした。\nでも、これ一応 PHP 文庫なんですよ。PHP 文庫は他と違う本を出すので、\n本屋に行ったときは必ずチェックしています。\nこゝろ  『謎とき村上春樹 』という本で、『ノルウェイの森 』と似た構造を持って\nいると触れられていたので、ずっと気になっていました。\nそういえば『ノルウェイの森』は映画化されるみたいですね。個人的に\nは『ねじまき鳥クロニクル 』の方をして欲しかったです。でも映画化する\nには難しすぎるかな？\n『謎とき村上春樹』の著者は『『こころ』大人になれなかった先生 』とい\nう解説本も書いていました。しょうがない、読み終わったら買ってみるか。笑","contentSnippet":"近所の文教堂にぶらっと寄ったら、4 冊も買ってしましました。新版 古事記物語  最近、日本神話がややマイブームです。まとめて読んだことがなかったので、買ってみました。文字が大きく文章も平易なので、子供でも読めそうです。古事記・日本書紀を歩く—神話と伝説の世界を訪ねて  写真付きで、古事記・日本書紀の地に案内してくれます。これから読むのが楽しみです。大人のための「北斗の拳」人物伝  脈絡ねぇ〜ｗイラスト付きの各キャラクターの解説本です。なぜか最後はボルゲでした。でも、これ一応 PHP 文庫なんですよ。PHP 文庫は他と違う本を出すので、本屋に行ったときは必ずチェックしています。こゝろ  『謎とき村上春樹 』という本で、『ノルウェイの森 』と似た構造を持っていると触れられていたので、ずっと気になっていました。そういえば『ノルウェイの森』は映画化されるみたいですね。個人的には『ねじまき鳥クロニクル 』の方をして欲しかったです。でも映画化するには難しすぎるかな？『謎とき村上春樹』の著者は『『こころ』大人になれなかった先生 』という解説本も書いていました。しょうがない、読み終わったら買ってみるか。笑","link":"https://masutaka.net/2009-05-16-2/","isoDate":"2009-05-16T01:00:00.000Z","dateMiliSeconds":1242435600000,"authorName":"masutaka"},{"title":"find メモ","content":"(URL: 404 Blog Not Found:findを極めたかったら、statを押さえよ )","contentSnippet":"(URL: 404 Blog Not Found:findを極めたかったら、statを押さえよ )","link":"https://masutaka.net/2009-05-16-1/","isoDate":"2009-05-16T00:00:00.000Z","dateMiliSeconds":1242432000000,"authorName":"masutaka"},{"title":"Navi2ch メモ","content":"List モードで `U&rsquo;(navi2ch-list-show-url)\n板の URL をコピー or ブラウザで表示 or タイトルをコピー or URL とタイトルをコピー\nBoard 系モード で `U&rsquo;(navi2ch-board-show-url)\n板・スレの URL をコピー or ブラウザで表示 or タイトルをコピー\nArticle モード で `U&rsquo;(navi2ch-article-show-url)\n板・スレ・特定のレスの URL をコピー or ブラウザで表示 or タイトルをコピー\nArticle モードで `W&rsquo;(navi2ch-article-write-sage-message)\nレスを &ldquo;sage&rdquo; 状態で新規作成。\nArticle モードで `a&rsquo;(navi2ch-article-add-important-message)\n現在のレスにマークを付ける。navi2ch を終了するとマークは消える。\nArticle モードで $'(navi2ch-article-toggle-important) a&rsquo; でマークしたレスと、レス全てをトグルする。\nArticle モードで ?'(navi2ch-article-search) 現在のスレからレスを検索する。名前(name)、メール(mail)、日付(date)、 ID(id)、ホスト名(hostname)、本文 (body)、参照(reference) から検索条 件を選ぶことができる。最近「参照」が実装された。表示しているレスが 対象なので r&rsquo;(navi2ch-article-redraw-range) -&gt; `0&rsquo; 等で、全レスを\n表示してから実行すると良い。\nArticle-mode で `M-d&rsquo;(navi2ch-article-decode-message)\n現在のレスをデコードする。\nMessage-mode で `C-c C-b&rsquo;(navi2ch-base64-insert-file)","contentSnippet":"List モードで `U’(navi2ch-list-show-url)板の URL をコピー or ブラウザで表示 or タイトルをコピー or URL とタイトルをコピーBoard 系モード で `U’(navi2ch-board-show-url)板・スレの URL をコピー or ブラウザで表示 or タイトルをコピーArticle モード で `U’(navi2ch-article-show-url)板・スレ・特定のレスの URL をコピー or ブラウザで表示 or タイトルをコピーArticle モードで `W’(navi2ch-article-write-sage-message)レスを “sage” 状態で新規作成。Article モードで `a’(navi2ch-article-add-important-message)現在のレスにマークを付ける。navi2ch を終了するとマークは消える。Article モードで $'(navi2ch-article-toggle-important) a’ でマークしたレスと、レス全てをトグルする。Article モードで ?'(navi2ch-article-search) 現在のスレからレスを検索する。名前(name)、メール(mail)、日付(date)、 ID(id)、ホスト名(hostname)、本文 (body)、参照(reference) から検索条 件を選ぶことができる。最近「参照」が実装された。表示しているレスが 対象なので r’(navi2ch-article-redraw-range) -> `0’ 等で、全レスを表示してから実行すると良い。Article-mode で `M-d’(navi2ch-article-decode-message)現在のレスをデコードする。Message-mode で `C-c C-b’(navi2ch-base64-insert-file)","link":"https://masutaka.net/2009-05-14-1/","isoDate":"2009-05-14T00:00:00.000Z","dateMiliSeconds":1242259200000,"authorName":"masutaka"},{"title":"アナログマ","content":"[2007-07-03-1] にサンプルとして使った AA(アスキーアート) が今話題に\nなっているらしい。\n うちのクマもまだまだ元気です。最後も看取ります。ｗ\n(URL: アナログマ公式サイト )","contentSnippet":"[2007-07-03-1] にサンプルとして使った AA(アスキーアート) が今話題になっているらしい。 うちのクマもまだまだ元気です。最後も看取ります。ｗ(URL: アナログマ公式サイト )","link":"https://masutaka.net/2009-05-10-3/","isoDate":"2009-05-10T02:00:00.000Z","dateMiliSeconds":1241920800000,"authorName":"masutaka"},{"title":"『国家の罠』を読んだ","content":"[2009-04-19-1] に買って今日読み終えた。期待以上におもしろかった。\n外交の現場や、拘置所暮らしに興味のある方ｗにおすすめ。\n序盤は自分を美化しすぎている感じで、正直言ってくじけそうになった。\nSAPIO の連載を読んでいるので、それほど目新しいこともなかったし。\nしかし、中盤からがらりと様相が変わり、舞台は拘置所に移る。西村検事\nとのやりとりは、ここまで書いていいの？くらい書いてあるし、拘置所内\nの生活もかなり細かく書いてある。拘置所暮らしも悪くないのかなと思わ\nせてしまうから恐ろしい。笑\n最後に気になった箇所を抜粋。\nP. 495\n しかし、一旦報道された内容は後で訂正されません。大多数の国民には、\n自己増殖した報道による私や鈴木氏に関する『巨悪のイメージ』と、そ\nの『巨悪』を捜査当局が十分に摘発しなかったことに対する憤りだけが残\nります。\n 鈴木宗男事件の事実がどうなのかは置いといて、痛いところを付いている\nと思う。報道機関(特にテレビ)は点でしか物事を伝えないから、事実と反\nすることを報道してしまったら、それを訂正するのは難しい。\n逆に(テレビ局が)まとめサイト的なものを作ると、信頼度がグンと増すと\n思う。例えば、全てのニュースに番号が振ってあって、後日テレビ局のサ\nイトを見ると、ことの顛末が分かるとか。\n「訴状が届いていないので、コメントは差し控えたい。」なんてバカな\nニュースは減るのではないかな。","contentSnippet":"[2009-04-19-1] に買って今日読み終えた。期待以上におもしろかった。外交の現場や、拘置所暮らしに興味のある方ｗにおすすめ。序盤は自分を美化しすぎている感じで、正直言ってくじけそうになった。SAPIO の連載を読んでいるので、それほど目新しいこともなかったし。しかし、中盤からがらりと様相が変わり、舞台は拘置所に移る。西村検事とのやりとりは、ここまで書いていいの？くらい書いてあるし、拘置所内の生活もかなり細かく書いてある。拘置所暮らしも悪くないのかなと思わせてしまうから恐ろしい。笑最後に気になった箇所を抜粋。P. 495 しかし、一旦報道された内容は後で訂正されません。大多数の国民には、自己増殖した報道による私や鈴木氏に関する『巨悪のイメージ』と、その『巨悪』を捜査当局が十分に摘発しなかったことに対する憤りだけが残ります。 鈴木宗男事件の事実がどうなのかは置いといて、痛いところを付いていると思う。報道機関(特にテレビ)は点でしか物事を伝えないから、事実と反することを報道してしまったら、それを訂正するのは難しい。逆に(テレビ局が)まとめサイト的なものを作ると、信頼度がグンと増すと思う。例えば、全てのニュースに番号が振ってあって、後日テレビ局のサイトを見ると、ことの顛末が分かるとか。「訴状が届いていないので、コメントは差し控えたい。」なんてバカなニュースは減るのではないかな。","link":"https://masutaka.net/2009-05-10-2/","isoDate":"2009-05-10T01:00:00.000Z","dateMiliSeconds":1241917200000,"authorName":"masutaka"},{"title":"カルボナーラ","content":"「masutinのお料理公開ブログ」第２弾です。\n数年ぶりにカルボナーラを作ってみました。隣に写っているのは、きゅう\nりとツナをマヨネーズで和えたものです。簡単なので、レシピは省きます。\nレシピ    材料(1人分)\nパスタ・・・・・・・・・・・100g\nオリーブオイル・・・・・・・適当\nベーコン・・・・・・・・・・2枚\nホイップクリーム(植物性)・・200ml\n卵・・・・・・・・・・・・・1個\nパルメザンチーズ・・・・・・かなり多め\n黒こしょう(粗挽き)・・・・・かなり多め\n塩・・・・・・・・・・・・・少々\n   鍋に塩を入れ、湯を沸かし始める。塩は多めで。\n  ベーコンを 1cm 幅に切る。ホイップと卵は室温に戻しておく。\n  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセット\nする。\n  オリーブオイルを引いてフライパンを中火で熱し、ベーコンを炒める。\nこんがり焼き色が付いたら、火を止める。キッチンペーパーで余分な油を\n吸い取っておく。\n  フライパンの温度が少し下がったらホイップを投入し、パルメザンチー\nズ、黒こしょう、塩を入れる。パルメザンチーズと黒こしょうはかなり多\nめ。この 2 つをケチると味が付かない。\n  パスタが茹で上がったら湯を切り、フライパンに入れる。すかさず卵を\n割り入れ、強火でよくかき混ぜる。火を付けたのはソースを温めるため。\n10〜20 秒程度で火は消して良い。乳化([2009-04-12-1] )を意識して、よく\nかき混ぜる。\n  まとめ 味がやや薄く、少しぬるいものが出来てしまいました。敗因は、、\n  ホイップを余らせたくなかったので、1 パック使いきったこと。かなり\n多かった。^^; おかげでチーズや塩の分量が分からなくなった。100ml +\nパスタの茹で汁少々で良いと思う。\n  卵にかなり多く血がまじっていたので、取り除くのに手間取った。普段\nは気にしないのだが、あり得ないくらい多かった&hellip;。\n  卵をダマにしないことを意識しすぎて、火にかける時間が少なすぎた。\n  パルメザンチーズは、仕上がりにもかけると良いと思います。あと、でき","contentSnippet":"「masutinのお料理公開ブログ」第２弾です。数年ぶりにカルボナーラを作ってみました。隣に写っているのは、きゅうりとツナをマヨネーズで和えたものです。簡単なので、レシピは省きます。レシピ    材料(1人分)パスタ・・・・・・・・・・・100gオリーブオイル・・・・・・・適当ベーコン・・・・・・・・・・2枚ホイップクリーム(植物性)・・200ml卵・・・・・・・・・・・・・1個パルメザンチーズ・・・・・・かなり多め黒こしょう(粗挽き)・・・・・かなり多め塩・・・・・・・・・・・・・少々   鍋に塩を入れ、湯を沸かし始める。塩は多めで。  ベーコンを 1cm 幅に切る。ホイップと卵は室温に戻しておく。  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセットする。  オリーブオイルを引いてフライパンを中火で熱し、ベーコンを炒める。こんがり焼き色が付いたら、火を止める。キッチンペーパーで余分な油を吸い取っておく。  フライパンの温度が少し下がったらホイップを投入し、パルメザンチーズ、黒こしょう、塩を入れる。パルメザンチーズと黒こしょうはかなり多め。この 2 つをケチると味が付かない。  パスタが茹で上がったら湯を切り、フライパンに入れる。すかさず卵を割り入れ、強火でよくかき混ぜる。火を付けたのはソースを温めるため。10〜20 秒程度で火は消して良い。乳化([2009-04-12-1] )を意識して、よくかき混ぜる。  まとめ 味がやや薄く、少しぬるいものが出来てしまいました。敗因は、、  ホイップを余らせたくなかったので、1 パック使いきったこと。かなり多かった。^^; おかげでチーズや塩の分量が分からなくなった。100ml +パスタの茹で汁少々で良いと思う。  卵にかなり多く血がまじっていたので、取り除くのに手間取った。普段は気にしないのだが、あり得ないくらい多かった…。  卵をダマにしないことを意識しすぎて、火にかける時間が少なすぎた。  パルメザンチーズは、仕上がりにもかけると良いと思います。あと、でき","link":"https://masutaka.net/2009-05-10-1/","isoDate":"2009-05-10T00:00:00.000Z","dateMiliSeconds":1241913600000,"authorName":"masutaka"},{"title":"大魔導士ポップに学ぶ新卒の重要性","content":"なんだか捨てるのがもったいないので、ここに置いておきますね。\n  ","contentSnippet":"なんだか捨てるのがもったいないので、ここに置いておきますね。","link":"https://masutaka.net/2009-05-09-1/","isoDate":"2009-05-09T00:00:00.000Z","dateMiliSeconds":1241827200000,"authorName":"masutaka"},{"title":"『クラインの壷』を読んだ","content":" [2009-04-19-1] に買って今日読み終えた。結論からいうと、オススメ。\n一気に読んでしまった。ちょっと悲しい話を読みたい人向けかな。\n内容としては、バーチャルな世界を体験するうちに現実と非現実の境があ\nいまいになるという、よくあるストーリー。ただ 20 年も前の小説だから、\n「よくある」という表現は不適切かもしれない。内容は良く練り上げられ\nており、特に中盤から後半にかけて引きずり込まれるように読んだ。\nプログラミング経験があって、小説の舞台のすぐ近くに住んでいると、さらに\nリアリティが増すはず。まあ、私のことなんですがね。ｗ\nところで、小説のなかで笹森貴美子というイプシロン・プロジェクトの社\n長が登場する。彼女は、部下であるケネス・バトラーに結構厳しい注文を\nする。(オーノー、今日も徹夜デスヨなんてセリフが 2〜3 回でてくる。)\n読みながら、現実的な日程を組み直した方が良いのでは？(社長だけど)\nPM としてどうなの？などとバカなことを考えてしまった。ｗ\n1996 年にテレビドラマ化もされたそうで、画像とあらすじが見つかりまし\nた。ヲタゲーマー役の須藤君がいい味を出しています。\nURL: http://www1.odn.ne.jp/~aal28310/sudou-23.html ちなみに「クラインの壷」とは、「メビウスの輪」の高次元版だそう。\n以下に四次元化したイメージがありますが、私は分かりませんでした&hellip;。\nURL: http://www.yk.rim.or.jp/~ans/SUBI/sya.html ","contentSnippet":"[2009-04-19-1] に買って今日読み終えた。結論からいうと、オススメ。一気に読んでしまった。ちょっと悲しい話を読みたい人向けかな。内容としては、バーチャルな世界を体験するうちに現実と非現実の境があいまいになるという、よくあるストーリー。ただ 20 年も前の小説だから、「よくある」という表現は不適切かもしれない。内容は良く練り上げられており、特に中盤から後半にかけて引きずり込まれるように読んだ。プログラミング経験があって、小説の舞台のすぐ近くに住んでいると、さらにリアリティが増すはず。まあ、私のことなんですがね。ｗところで、小説のなかで笹森貴美子というイプシロン・プロジェクトの社長が登場する。彼女は、部下であるケネス・バトラーに結構厳しい注文をする。(オーノー、今日も徹夜デスヨなんてセリフが 2〜3 回でてくる。)読みながら、現実的な日程を組み直した方が良いのでは？(社長だけど)PM としてどうなの？などとバカなことを考えてしまった。ｗ1996 年にテレビドラマ化もされたそうで、画像とあらすじが見つかりました。ヲタゲーマー役の須藤君がいい味を出しています。URL: http://www1.odn.ne.jp/~aal28310/sudou-23.html ちなみに「クラインの壷」とは、「メビウスの輪」の高次元版だそう。以下に四次元化したイメージがありますが、私は分かりませんでした…。URL: http://www.yk.rim.or.jp/~ans/SUBI/sya.html","link":"https://masutaka.net/2009-05-04-1/","isoDate":"2009-05-04T00:00:00.000Z","dateMiliSeconds":1241395200000,"authorName":"masutaka"},{"title":"Web ベースの Emacs「9ne」","content":"世界を股にかける某氏から 9ne を教えてもらいました。ただ、よく分かり\nませんでした。^^; そのうち分かるだろうということで、メモしておきます。\nhttp://robrohan.com/projects/9ne/9ne.php?file=texts/intro.txt 追伸:\nFiremacs で十分な気がしてきた…。","contentSnippet":"世界を股にかける某氏から 9ne を教えてもらいました。ただ、よく分かりませんでした。^^; そのうち分かるだろうということで、メモしておきます。http://robrohan.com/projects/9ne/9ne.php?file=texts/intro.txt 追伸:Firemacs で十分な気がしてきた…。","link":"https://masutaka.net/2009-04-30-3/","isoDate":"2009-04-30T02:00:00.000Z","dateMiliSeconds":1241056800000,"authorName":"masutaka"},{"title":"漢の zsh","content":"zsh との付き合いは 7 年くらいになりますが、やはり補完が便利です。\ntar のオプションを補完。\n % tar ←ここで tab キー\nA &ndash; append to an archive\nc &ndash; create a new archive\nf &ndash; specify archive file or device\nt &ndash; list archive contents\nu &ndash; update archive\nv &ndash; verbose output\nx &ndash; extract files from an archive\n make のルールを補完。\n % make ←ここで tab キー\nall check-syntax clean hoge.o hugahuga.o main.o\n cd した履歴を補完。\n % pwd","contentSnippet":"zsh との付き合いは 7 年くらいになりますが、やはり補完が便利です。tar のオプションを補完。 % tar ←ここで tab キーA – append to an archivec – create a new archivef – specify archive file or devicet – list archive contentsu – update archivev – verbose outputx – extract files from an archive make のルールを補完。 % make ←ここで tab キーall check-syntax clean hoge.o hugahuga.o main.o cd した履歴を補完。 % pwd","link":"https://masutaka.net/2009-04-30-2/","isoDate":"2009-04-30T01:00:00.000Z","dateMiliSeconds":1241053200000,"authorName":"masutaka"},{"title":"本を購入","content":"今日は少し早く帰ったので、最寄り駅の隣駅で買ってきました。\nBinary Hacks  objdump や objcopy などの基本的な話から、「main() の前に関数を呼ぶ」\nや「LD_PRELOAD で既存の関数をラップする」などコアな話まで色々揃って\nいて面白そうです。GW は忙しくなりそう。(違","contentSnippet":"今日は少し早く帰ったので、最寄り駅の隣駅で買ってきました。Binary Hacks  objdump や objcopy などの基本的な話から、「main() の前に関数を呼ぶ」や「LD_PRELOAD で既存の関数をラップする」などコアな話まで色々揃っていて面白そうです。GW は忙しくなりそう。(違","link":"https://masutaka.net/2009-04-30-1/","isoDate":"2009-04-30T00:00:00.000Z","dateMiliSeconds":1241049600000,"authorName":"masutaka"},{"title":"GDM のテーマを追加する","content":"lenny の頃にはあった BlueSwirl テーマが squeeze ではなくなってしまっ\nたので、拡張パッケージか何かになっていないか調べてみた。\nなさそうだったので、GNOME のページ から GDM-BlueSwirl.tar.bz2 をダウ\nンロードし、ログイン画面から「追加」しようとした。\nところが、&quot;.tar.gz&quot; は表示されるが &ldquo;.tar.bz2&rdquo; は表示されない&hellip;。\n仕方がないので、GDM-BlueSwirl.tar.gz に変換したら、「追加」で選択で\nきるようになった。/usr/share/gdm/themes/BlueSwirl/ として展開されて\nいることも確認済み。","contentSnippet":"lenny の頃にはあった BlueSwirl テーマが squeeze ではなくなってしまったので、拡張パッケージか何かになっていないか調べてみた。なさそうだったので、GNOME のページ から GDM-BlueSwirl.tar.bz2 をダウンロードし、ログイン画面から「追加」しようとした。ところが、\".tar.gz\" は表示されるが “.tar.bz2” は表示されない…。仕方がないので、GDM-BlueSwirl.tar.gz に変換したら、「追加」で選択できるようになった。/usr/share/gdm/themes/BlueSwirl/ として展開されていることも確認済み。","link":"https://masutaka.net/2009-04-29-2/","isoDate":"2009-04-29T01:00:00.000Z","dateMiliSeconds":1240966800000,"authorName":"masutaka"},{"title":"サイバークリーン","content":"キーボードの掃除が出来るみたい。\nhttp://www.irisplaza.co.jp/Index.asp?KB=SHOSAI&SID=H518613F 動画ウソくせーｗ セリフ棒読みだし。\nしかし、￥390 で送料無料というのには惹かれるな。\nと思って、アマゾンを見たら、\n ダ　メ　で　し　た　＼（＾ｑ＾） ／\nとさ。\n追伸:\n画像がおかしかったら、このページをリロードしてください。それでもダ\nメだったら、Shift キーを押しながらリロード(強制リロード)してください。","contentSnippet":"キーボードの掃除が出来るみたい。http://www.irisplaza.co.jp/Index.asp?KB=SHOSAI&SID=H518613F 動画ウソくせーｗ セリフ棒読みだし。しかし、￥390 で送料無料というのには惹かれるな。と思って、アマゾンを見たら、 ダ　メ　で　し　た　＼（＾ｑ＾） ／とさ。追伸:画像がおかしかったら、このページをリロードしてください。それでもダメだったら、Shift キーを押しながらリロード(強制リロード)してください。","link":"https://masutaka.net/2009-04-29-1/","isoDate":"2009-04-29T00:00:00.000Z","dateMiliSeconds":1240963200000,"authorName":"masutaka"},{"title":"選択範囲のライン数と文字数を表示","content":"M-= (count-lines-region)\n用途は少なそう。","contentSnippet":"M-= (count-lines-region)用途は少なそう。","link":"https://masutaka.net/2009-04-27-1/","isoDate":"2009-04-27T00:00:00.000Z","dateMiliSeconds":1240790400000,"authorName":"masutaka"},{"title":"文字コード推測","content":"ruby の NKF モジュールは、コマンドの nkf と比べてなぜか guess の精\n度が低いです。例えば、以下の文字列を EUC-JP として保存し評価すると\nNKF モジュールは ASCII、nkf コマンドは EUC-JP という結果になります。\nruby のバージョンは 1.8.7-p72 です。\n aaaaaaaaaaaaaaaaaaaaaaaa\nテストテスト。\n 仕方がないので、nkf コマンドがある時は nkf コマンドを、なければ\nNKF モジュールを使って文字コードを推測するサンプルコードを書きました。\n#!/usr/bin/env ruby STR = &lt;&lt;EOF aaaaaaaaaaaaaaaaaaaaaaaa テストテスト。 EOF TMPFILE = &#34;#{File.basename($0)}.tmp.#{$$}&#34; result = &#34;&#34; File.open(TMPFILE, &#34;w&#34;) do |f| f.write(STR) end if /mswin32/ =~ RUBY_PLATFORM result = `type #{TMPFILE} | nkf --guess 2&gt; nul` else result = `sh -c &#39;cat #{TMPFILE} | nkf --guess 2&gt; /dev/null&#39;` end File.","contentSnippet":"ruby の NKF モジュールは、コマンドの nkf と比べてなぜか guess の精度が低いです。例えば、以下の文字列を EUC-JP として保存し評価するとNKF モジュールは ASCII、nkf コマンドは EUC-JP という結果になります。ruby のバージョンは 1.8.7-p72 です。 aaaaaaaaaaaaaaaaaaaaaaaaテストテスト。 仕方がないので、nkf コマンドがある時は nkf コマンドを、なければNKF モジュールを使って文字コードを推測するサンプルコードを書きました。#!/usr/bin/env ruby STR = <<EOF aaaaaaaaaaaaaaaaaaaaaaaa テストテスト。 EOF TMPFILE = \"#{File.basename($0)}.tmp.#{$$}\" result = \"\" File.open(TMPFILE, \"w\") do |f| f.write(STR) end if /mswin32/ =~ RUBY_PLATFORM result = `type #{TMPFILE} | nkf --guess 2> nul` else result = `sh -c 'cat #{TMPFILE} | nkf --guess 2> /dev/null'` end File.","link":"https://masutaka.net/2009-04-26-2/","isoDate":"2009-04-26T01:00:00.000Z","dateMiliSeconds":1240707600000,"authorName":"masutaka"},{"title":"ベーコンとチキンのトマトソース","content":"10 年以上作り続けているレシピを、今ここに公開します。^^;\nレシピ    材料(1人分)\nパスタ・・・・・・・・・・・100g\n鶏ササミ・・・・・・・・・・90g\nベーコン・・・・・・・・・・2枚\nホールトマト・・・・・・・・2/3缶\n小麦粉・・・・・・・・・・・少々\nオリーブオイル・・・・・・・適当\n白ワイン・・・・・・・・・・適当\n塩・・・・・・・・・・・・・適当\nこしょう・・・・・・・・・・適当\n乾燥バジル・・・・・・・・・適当\n乾燥オレガノ(あれば)・・・・適当\nチリペッパー(お好み)・・・・適当\nとろけるチーズ(お好み)・・・1枚\n   鍋に塩を入れ、湯を沸かし始める。塩は多めで。\n  ベーコンの油が気になる人は、電子レンジで油抜きをする。キッチンペー\nパー 2 枚、ベーコン、キッチンペーパー 1 枚の順に敷いて、電子レンジ\nで 1 分ほど加熱すれば OK 。\n  ササミとベーコンを一口大に切る。ササミには小麦粉をまぶしておくと\n旨味が逃げないらしい。今回初めて試した。\n  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセット\nする。\n  オリーブオイルを引いてフライパンを強火で熱し、ササミとベーコンを\n炒める。いい感じになってきたら白ワインを加え、おいしくできるように\nお祈りをする。(-∧-)\n  ササミに軽く焦げ目がついたらホールトマト、塩、こしょう、乾燥バジ\nル、(もしあれば)乾燥オレガノを投入する。辛いのが好きな人はチリペッ\nパーも入れるとウマー。\n  ホールトマトをヘラ等で細かく潰し、そのまま強火で煮詰める。途中、\n焦げそうになったら適当に火を弱める。\n  体がチーズを欲していたら火を消さずに、ソースにとろけるチーズを載\nせる。タイミングはパスタが茹で上がる 1 分前。\n  茹で上がったパスタを皿に盛り、上からソースをかけて完成。\n  まとめ このように、トマトソースはパスタを茹でている間に出来てしまいます。","contentSnippet":"10 年以上作り続けているレシピを、今ここに公開します。^^;レシピ    材料(1人分)パスタ・・・・・・・・・・・100g鶏ササミ・・・・・・・・・・90gベーコン・・・・・・・・・・2枚ホールトマト・・・・・・・・2/3缶小麦粉・・・・・・・・・・・少々オリーブオイル・・・・・・・適当白ワイン・・・・・・・・・・適当塩・・・・・・・・・・・・・適当こしょう・・・・・・・・・・適当乾燥バジル・・・・・・・・・適当乾燥オレガノ(あれば)・・・・適当チリペッパー(お好み)・・・・適当とろけるチーズ(お好み)・・・1枚   鍋に塩を入れ、湯を沸かし始める。塩は多めで。  ベーコンの油が気になる人は、電子レンジで油抜きをする。キッチンペーパー 2 枚、ベーコン、キッチンペーパー 1 枚の順に敷いて、電子レンジで 1 分ほど加熱すれば OK 。  ササミとベーコンを一口大に切る。ササミには小麦粉をまぶしておくと旨味が逃げないらしい。今回初めて試した。  湯が沸いたら、パスタを投入する。キッチンタイマーを忘れずにセットする。  オリーブオイルを引いてフライパンを強火で熱し、ササミとベーコンを炒める。いい感じになってきたら白ワインを加え、おいしくできるようにお祈りをする。(-∧-)  ササミに軽く焦げ目がついたらホールトマト、塩、こしょう、乾燥バジル、(もしあれば)乾燥オレガノを投入する。辛いのが好きな人はチリペッパーも入れるとウマー。  ホールトマトをヘラ等で細かく潰し、そのまま強火で煮詰める。途中、焦げそうになったら適当に火を弱める。  体がチーズを欲していたら火を消さずに、ソースにとろけるチーズを載せる。タイミングはパスタが茹で上がる 1 分前。  茹で上がったパスタを皿に盛り、上からソースをかけて完成。  まとめ このように、トマトソースはパスタを茹でている間に出来てしまいます。","link":"https://masutaka.net/2009-04-26-1/","isoDate":"2009-04-26T00:00:00.000Z","dateMiliSeconds":1240704000000,"authorName":"masutaka"},{"title":"MS-Office 2010 は来年上半期だそうです。","content":"MS、「Office 2010」を2010年上半期より提供 - スラッシュドット・ジャパン またスタイリッシュな様変わりを見せてくれるのだろうか。MS のアプリは\nバージョン間の互換性が著しく損なわれているので、そろそろ別なアプリ\nを使うことも検討したほうがよいかなあ。配布するときは pdf 化すれば良\nいし。\n他にパッと思いつくのは、OpenOffice.org かな。オープンソースの統合オ\nフィスソフト。MS-Office と高い相互運用性(?)があるらしい。Windows,\nLinux, MacOSX 等で動作する。\nちなみに OpenOffice.org は会津若松市で導入実績があるとのこと。導入\nを検討する場合、参考になると思う。\n→ 会津若松市がOpenOffice.org導入の経費や職員からの声を公開 - スラッシュドット・ジャパン 日本が誇る JustSystem の Just Suite も忘れてはならない。\n「一太郎(ワープロ)」「ATOK(IME)」「三四郎(表計算)」「Agree(プレゼ\nン)」「花子(グラフィック)」「Shuriken(メーラ)」「JUST PDF(PDF作成+\n編集)」が揃ったお得なパック。でもこうやって、括弧で注釈を付けないと\n何のアプリなのか分からないよなあ。\nATOK for Windows には長年お世話になっております。大学 2 年の時に\n「一太郎 + Lotus1-2-3」モデルの PC(FMV-5100C3) を買ったときからの付\nき合い。今探したら見つかった 。懐かしい。。。\nそういえば、ATOK は 2007 年に Linux 版も出ていたのだった 。anthy は\nATOK に比べて誤変換が多すぎるから、今度試してみようかなあ。","contentSnippet":"MS、「Office 2010」を2010年上半期より提供 - スラッシュドット・ジャパン またスタイリッシュな様変わりを見せてくれるのだろうか。MS のアプリはバージョン間の互換性が著しく損なわれているので、そろそろ別なアプリを使うことも検討したほうがよいかなあ。配布するときは pdf 化すれば良いし。他にパッと思いつくのは、OpenOffice.org かな。オープンソースの統合オフィスソフト。MS-Office と高い相互運用性(?)があるらしい。Windows,Linux, MacOSX 等で動作する。ちなみに OpenOffice.org は会津若松市で導入実績があるとのこと。導入を検討する場合、参考になると思う。→ 会津若松市がOpenOffice.org導入の経費や職員からの声を公開 - スラッシュドット・ジャパン 日本が誇る JustSystem の Just Suite も忘れてはならない。「一太郎(ワープロ)」「ATOK(IME)」「三四郎(表計算)」「Agree(プレゼン)」「花子(グラフィック)」「Shuriken(メーラ)」「JUST PDF(PDF作成+編集)」が揃ったお得なパック。でもこうやって、括弧で注釈を付けないと何のアプリなのか分からないよなあ。ATOK for Windows には長年お世話になっております。大学 2 年の時に「一太郎 + Lotus1-2-3」モデルの PC(FMV-5100C3) を買ったときからの付き合い。今探したら見つかった 。懐かしい。。。そういえば、ATOK は 2007 年に Linux 版も出ていたのだった 。anthy はATOK に比べて誤変換が多すぎるから、今度試してみようかなあ。","link":"https://masutaka.net/2009-04-20-2/","isoDate":"2009-04-20T01:00:00.000Z","dateMiliSeconds":1240189200000,"authorName":"masutaka"},{"title":"YouTube で気をつけること","content":"マイアカウントから、最低でも「お気に入り」と「最近のアクティビティ」\nは削除した方が良い。\n自分のプロフィールは http://www.youtube.com/user/ &lt;アカウント名&gt; で\n誰でもアクセスできてしまうが、デフォルトの設定では「お気に入り」も\n参照できるようになっている。(一旦ログアウトして、前述の自分のプロ\nフィールのページに飛ぶと、何が公開されているのかが分かる。)\n現時点での変更方法は以下のとおり。\n 上の方にある「アカウント」をクリック 「概要」→「チャンネルの編集」をクリック 「チャンネルのデザイン」をクリック 「最近のアクティビティ ボックス」のチェックを外す。 「お気に入りボックス」のチェックを外す。  アマゾンは「ほしいもの物リスト」はデフォルト非公開で、公開状態だと\n警告を出してくれるんだけど、YouTube は「お気に入り」はデフォルト公\n開で、公開状態でも警告は出さないんだね。問題なのでは。。。","contentSnippet":"マイアカウントから、最低でも「お気に入り」と「最近のアクティビティ」は削除した方が良い。自分のプロフィールは http://www.youtube.com/user/ <アカウント名> で誰でもアクセスできてしまうが、デフォルトの設定では「お気に入り」も参照できるようになっている。(一旦ログアウトして、前述の自分のプロフィールのページに飛ぶと、何が公開されているのかが分かる。)現時点での変更方法は以下のとおり。 上の方にある「アカウント」をクリック 「概要」→「チャンネルの編集」をクリック 「チャンネルのデザイン」をクリック 「最近のアクティビティ ボックス」のチェックを外す。 「お気に入りボックス」のチェックを外す。  アマゾンは「ほしいもの物リスト」はデフォルト非公開で、公開状態だと警告を出してくれるんだけど、YouTube は「お気に入り」はデフォルト公開で、公開状態でも警告は出さないんだね。問題なのでは。。。","link":"https://masutaka.net/2009-04-20-1/","isoDate":"2009-04-20T00:00:00.000Z","dateMiliSeconds":1240185600000,"authorName":"masutaka"},{"title":"本を購入","content":"今日は合計 5 冊買ってきました。「クラインの壷」と「国家の罠」は近所の古本屋名誠書房で、「佐藤可士和の超整理術」と「豊臣秀長(上・下)」はブックオフで買ってきました。\nクラインの壷  最近の私としては珍しく小説です。[2009-03-07-1] に買った「人に好かれる話し方 」の中で、それまであまり小説を読まなかった和田さんが書店の社長に勧められた本として紹介されていたので、試しに買ってみました。P. 128 にそのエピソードが載っています。\n国家の罠  買うつもりはありませんでしたが、たまたま見つけて、そういえばこの本を買おうとして、間違えて「国家の謀略 」を買ったことがあったなあと思い出したのでリベンジしました。￥390 でした。ただ、その後に行ったブックオフでは ￥105 だったので、リベンジは失敗したような感じです。笑\n佐藤可士和の超整理術  気になる本は Amazon のほしい物リスト に追加するようにしているのですが、それによると 2007.10.7 に気になって追加したようです。Amazon は携帯からも見られるので、なかなか便利ですよ。\n豊臣秀長   「ある補佐役の生涯」というサブタイトルに惹かれて買いました。比較的マイナーな人物が好きというのもあります。うちにあるので該当するのは「織田信忠 」と「天を衝く 」の九戸政実ですかね。","contentSnippet":"今日は合計 5 冊買ってきました。「クラインの壷」と「国家の罠」は近所の古本屋名誠書房で、「佐藤可士和の超整理術」と「豊臣秀長(上・下)」はブックオフで買ってきました。クラインの壷  最近の私としては珍しく小説です。[2009-03-07-1] に買った「人に好かれる話し方 」の中で、それまであまり小説を読まなかった和田さんが書店の社長に勧められた本として紹介されていたので、試しに買ってみました。P. 128 にそのエピソードが載っています。国家の罠  買うつもりはありませんでしたが、たまたま見つけて、そういえばこの本を買おうとして、間違えて「国家の謀略 」を買ったことがあったなあと思い出したのでリベンジしました。￥390 でした。ただ、その後に行ったブックオフでは ￥105 だったので、リベンジは失敗したような感じです。笑佐藤可士和の超整理術  気になる本は Amazon のほしい物リスト に追加するようにしているのですが、それによると 2007.10.7 に気になって追加したようです。Amazon は携帯からも見られるので、なかなか便利ですよ。豊臣秀長   「ある補佐役の生涯」というサブタイトルに惹かれて買いました。比較的マイナーな人物が好きというのもあります。うちにあるので該当するのは「織田信忠 」と「天を衝く 」の九戸政実ですかね。","link":"https://masutaka.net/2009-04-19-1/","isoDate":"2009-04-19T00:00:00.000Z","dateMiliSeconds":1240099200000,"authorName":"masutaka"},{"title":"Debian を PS3 のメディアサーバにする。","content":"PS3 のメニューにあるメディアサーバってなんだろ？って前から思っていたんだけど、さっき急にイベントが降ってきたので調べてみた。\nURL: http://tf222.moe-nifty.com/blog/2007/11/debianetchdlna_5598.html PS3 では Mediatomb が動作実績があるらしい。Debian でもパッケージが用意されていて、簡単にインストールできる。\n# aptitude install mediatomb インストールしたら、/etc/mediatomb/config.xml を少し修正する必要がある。\n &lt;server&gt; セクションの &lt;protocolInfo extend=&quot;no&quot;/&gt; を &lt;protocolInfo extend=&quot;yes&quot;/&gt; に変更。 &lt;mapping&gt;&lt;extension-mimetype&gt; セクションに以下を追加。  &lt;map from=&#34;mpg&#34; to=&#34;video/mpeg&#34;/&gt; &lt;map from=&#34;mp4&#34; to=&#34;video/mp4&#34;/&gt; &lt;map from=&#34;avi&#34; to=&#34;video/divx&#34;/&gt; 修正を反映するために、mediatomb デーモンを再起動する。\n# /etc/init.d/mediatomb restart Web ブラウザからアクセスできるようになるので、適当にファイルを追加。\nhttp://(mediatomb サーバの名前または IP アドレス):49152/ ただ、この追加って作業が意外に面倒。登録したフォルダを PS3 から参照って出来ないのかなあ。\nまあそれはともかく、PS3 からは「メディアサーバー検索」をすると、見つかるはず。\nうちのテレビの低解像度が功を奏して(?)、動画によっては PC よりもきれいに見えるものがあった。あと、うちにはミニコンポというものはないので、mp3 は PS3 で再生するのが一番音がいいかも。。。\nWindows の場合は、Windows Media Player をゴニョゴニョするとサーバになるらしいが未確認。","contentSnippet":"PS3 のメニューにあるメディアサーバってなんだろ？って前から思っていたんだけど、さっき急にイベントが降ってきたので調べてみた。URL: http://tf222.moe-nifty.com/blog/2007/11/debianetchdlna_5598.html PS3 では Mediatomb が動作実績があるらしい。Debian でもパッケージが用意されていて、簡単にインストールできる。# aptitude install mediatomb インストールしたら、/etc/mediatomb/config.xml を少し修正する必要がある。 <server> セクションの <protocolInfo extend=\"no\"/> を <protocolInfo extend=\"yes\"/> に変更。 <mapping><extension-mimetype> セクションに以下を追加。  <map from=\"mpg\" to=\"video/mpeg\"/> <map from=\"mp4\" to=\"video/mp4\"/> <map from=\"avi\" to=\"video/divx\"/> 修正を反映するために、mediatomb デーモンを再起動する。# /etc/init.d/mediatomb restart Web ブラウザからアクセスできるようになるので、適当にファイルを追加。http://(mediatomb サーバの名前または IP アドレス):49152/ ただ、この追加って作業が意外に面倒。登録したフォルダを PS3 から参照って出来ないのかなあ。まあそれはともかく、PS3 からは「メディアサーバー検索」をすると、見つかるはず。うちのテレビの低解像度が功を奏して(?)、動画によっては PC よりもきれいに見えるものがあった。あと、うちにはミニコンポというものはないので、mp3 は PS3 で再生するのが一番音がいいかも。。。Windows の場合は、Windows Media Player をゴニョゴニョするとサーバになるらしいが未確認。","link":"https://masutaka.net/2009-04-12-2/","isoDate":"2009-04-12T01:00:00.000Z","dateMiliSeconds":1239498000000,"authorName":"masutaka"},{"title":"乳化","content":" パスタのゆで汁って弱いながらも乳化安定剤（タンパク質）を含んでいて、\nそれにでんぷんが少しとろみをつけるので、ただのお水よりも乳化させや\nすいんです。\n へぇ〜。全然意識してなかった。\nURL: http://www5.famille.ne.jp/~zerbina/pastafan/pastabeginers/pbeginer2_16.html ","contentSnippet":"パスタのゆで汁って弱いながらも乳化安定剤（タンパク質）を含んでいて、それにでんぷんが少しとろみをつけるので、ただのお水よりも乳化させやすいんです。 へぇ〜。全然意識してなかった。URL: http://www5.famille.ne.jp/~zerbina/pastafan/pastabeginers/pbeginer2_16.html","link":"https://masutaka.net/2009-04-12-1/","isoDate":"2009-04-12T00:00:00.000Z","dateMiliSeconds":1239494400000,"authorName":"masutaka"},{"title":"スレ立て乙","content":" ","contentSnippet":"","link":"https://masutaka.net/2009-04-09-1/","isoDate":"2009-04-09T00:00:00.000Z","dateMiliSeconds":1239235200000,"authorName":"masutaka"},{"title":"「未分類」というカテゴリを作りました。","content":"カテゴライズしていない記事を救うために(?)、「未分類 」というカテゴリ\nを作りました。今回は ChangeLogReader.pm へのパッチです。意外に簡単\nでした。\n--- ChangeLogReader.pm.org\t2005-08-10 11:31:46.000000000 +0900 +++ ChangeLogReader.pm\t2009-04-08 21:00:41.000000000 +0900 @@ -152,6 +152,8 @@ # print &#34;[[[[$ih]]]\\n&#34;; if ($ih =~ s/\\s*\\[(.+)\\]$//) { # category @cat = split(/\\s*\\]\\s*\\[\\s*/, $1); + } else { +\tpush(@cat, &#34;未分類&#34;); } # Processing item content ついでに軽い不具合も発見したので修正。カテゴリに含まれる記事の数が\n$cat_page_entry_max の倍数だと、「次ページ」を 1 つ多く作っていました。\n--- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-04-08 21:54:41.000000000 +0900 @@ -661,6 +661,10 @@ my $n = $cat_page_entry_max; my $num_of_old_pages = int(@ents / $n); +\tif (int(@ents % $n) == 0) { +\t$num_of_old_pages -= 1; +\t} + my @fnames; for (my $i = 0; $i &lt;= $num_of_old_pages; $i++) { $fnames[$i] = get_category_filename($catname); 追記(2011-07-06):","contentSnippet":"カテゴライズしていない記事を救うために(?)、「未分類 」というカテゴリを作りました。今回は ChangeLogReader.pm へのパッチです。意外に簡単でした。--- ChangeLogReader.pm.org\t2005-08-10 11:31:46.000000000 +0900 +++ ChangeLogReader.pm\t2009-04-08 21:00:41.000000000 +0900 @@ -152,6 +152,8 @@ # print \"[[[[$ih]]]\\n\"; if ($ih =~ s/\\s*\\[(.+)\\]$//) { # category @cat = split(/\\s*\\]\\s*\\[\\s*/, $1); + } else { +\tpush(@cat, \"未分類\"); } # Processing item content ついでに軽い不具合も発見したので修正。カテゴリに含まれる記事の数が$cat_page_entry_max の倍数だと、「次ページ」を 1 つ多く作っていました。--- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-04-08 21:54:41.000000000 +0900 @@ -661,6 +661,10 @@ my $n = $cat_page_entry_max; my $num_of_old_pages = int(@ents / $n); +\tif (int(@ents % $n) == 0) { +\t$num_of_old_pages -= 1; +\t} + my @fnames; for (my $i = 0; $i <= $num_of_old_pages; $i++) { $fnames[$i] = get_category_filename($catname); 追記(2011-07-06):","link":"https://masutaka.net/2009-04-08-1/","isoDate":"2009-04-08T00:00:00.000Z","dateMiliSeconds":1239148800000,"authorName":"masutaka"},{"title":"gcc の -Wextra オプション","content":"[2009-04-07-2] を調べていく過程で -Wextra オプションを知った。gcc3\nまでは -W とのこと。-Wall って、&ldquo;all&rdquo; じゃないのか。。。\n-Wextra は、-Wall よりも厳しめの警告を出すようだ。両方有効にしたい\n場合は、&quot;-Wall -Wextra&quot; と指定する。\n詳しくは gcc の info に書いてあるみたい。確認してみるか。\nURL: http://at-aka.blogspot.com/2006/11/gcc-wall-w.html URL: http://sugarpot.sakura.ne.jp/yuno/?gcc%2Fwarning ","contentSnippet":"[2009-04-07-2] を調べていく過程で -Wextra オプションを知った。gcc3までは -W とのこと。-Wall って、“all” じゃないのか。。。-Wextra は、-Wall よりも厳しめの警告を出すようだ。両方有効にしたい場合は、\"-Wall -Wextra\" と指定する。詳しくは gcc の info に書いてあるみたい。確認してみるか。URL: http://at-aka.blogspot.com/2006/11/gcc-wall-w.html URL: http://sugarpot.sakura.ne.jp/yuno/?gcc%2Fwarning","link":"https://masutaka.net/2009-04-07-3/","isoDate":"2009-04-07T02:00:00.000Z","dateMiliSeconds":1239069600000,"authorName":"masutaka"},{"title":"flymake-mode","content":"flymake-mode を使うと、ソース保存時にコンパイルエラーとなる箇所を検\n出してくれるらしい。とりあえず試してみた。\n設定方法  Makefile に check-syntax という名前のルールを追加する。$(CC) と\n$(CFLAGS) は各自でセットしてくれ。  check-syntax: $(CC) $(CFLAGS) -fsyntax-only $(CHK_SOURCES) ソースファイルを開き、M-x flymake-mode する。コンパイルエラーに\nなるような修正をして保存。→エラー箇所の背景色がピンクになった。  解説 flymake.el の flymake-get-make-cmdline() によると、例えば hoge.c の\n場合、保存時に裏で以下のコマンドが実行されるらしい。そのため、(1)\nで check-syntax ルールを追加したというわけ。\n|make -s -C . CHK_SOURCES=hoge.c SYNTAX_CHECK_MODE=1 check-syntax\nおまけ C や C++ ソースを開いたときに、自動的に flymake-mode を有効にする設\n定は以下のとおり。\n(add-hook &#39;c-mode-common-hook (lambda () (flymake-mode t))) URL: http://www.02.246.ne.jp/~torutk/cxx/emacs/flymake.html ","contentSnippet":"flymake-mode を使うと、ソース保存時にコンパイルエラーとなる箇所を検出してくれるらしい。とりあえず試してみた。設定方法  Makefile に check-syntax という名前のルールを追加する。$(CC) と$(CFLAGS) は各自でセットしてくれ。  check-syntax: $(CC) $(CFLAGS) -fsyntax-only $(CHK_SOURCES) ソースファイルを開き、M-x flymake-mode する。コンパイルエラーになるような修正をして保存。→エラー箇所の背景色がピンクになった。  解説 flymake.el の flymake-get-make-cmdline() によると、例えば hoge.c の場合、保存時に裏で以下のコマンドが実行されるらしい。そのため、(1)で check-syntax ルールを追加したというわけ。|make -s -C . CHK_SOURCES=hoge.c SYNTAX_CHECK_MODE=1 check-syntaxおまけ C や C++ ソースを開いたときに、自動的に flymake-mode を有効にする設定は以下のとおり。(add-hook 'c-mode-common-hook (lambda () (flymake-mode t))) URL: http://www.02.246.ne.jp/~torutk/cxx/emacs/flymake.html","link":"https://masutaka.net/2009-04-07-2/","isoDate":"2009-04-07T01:00:00.000Z","dateMiliSeconds":1239066000000,"authorName":"masutaka"},{"title":"『会社に人生を預けるな』を読んだ","content":"[2009-03-29-2] に買って今日読み終えた。\n実は裏で長々と書いたんだけど、どうにもまとまらない。\n個人的には「会社に人生を預けたい」。転職なんぞ考えずに、自分の選ん\nだ会社で好きな仕事をやり続けたい。\nでもそれは今の時代大きなリスクなんですよ、そして自分でリスクを管理\nするのは本来楽しいことなんですよと、本書は言っている。\nしかし、当然といえば当然だが、具体的にどうすれば良いのかは提示され\nていない。まあ、それを考えるのが楽しいのだろうね。\nとりあえず今はいろんな意味で現状分析かな。\nただ、リスク管理という意味では、仕事を考える前に保険に入るのが先な\nんだろうな。←入ってない人。。","contentSnippet":"[2009-03-29-2] に買って今日読み終えた。実は裏で長々と書いたんだけど、どうにもまとまらない。個人的には「会社に人生を預けたい」。転職なんぞ考えずに、自分の選んだ会社で好きな仕事をやり続けたい。でもそれは今の時代大きなリスクなんですよ、そして自分でリスクを管理するのは本来楽しいことなんですよと、本書は言っている。しかし、当然といえば当然だが、具体的にどうすれば良いのかは提示されていない。まあ、それを考えるのが楽しいのだろうね。とりあえず今はいろんな意味で現状分析かな。ただ、リスク管理という意味では、仕事を考える前に保険に入るのが先なんだろうな。←入ってない人。。","link":"https://masutaka.net/2009-04-07-1/","isoDate":"2009-04-07T00:00:00.000Z","dateMiliSeconds":1239062400000,"authorName":"masutaka"},{"title":"質問の方法","content":"(URL: 404 Blog Not Found:アドバイスが欲しい人に、たった一つのアドバイス )\nだいぶ前の記事だけど、的を得ているのでメモメモ。\nでも、社会人２年目までは「全然分からないので教えてください」ってい\nう質問(?)もありだと思います。(私もそこまで鬼ではない。)\nただ最後に「ありがとうございました。他になにか僕が聞いておくべきコ\nトがあるでしょうか？今までお聞きしたことと全く違うことでもいいので\nすが。」と言われたらガックリくるのは間違いない。\n追記(2009-04-07):\n「的を得ている」って間違っていたかなあと思って、調べてみました。\n 語源の『大学』・『中庸』にあるように、「正鵠（せいこく）を失う」という\n表現からきています。この場合の正鵠は「正も鵠も、弓の的のまん中の黒星\n（『角川漢和中辞典』）」のことで、射てど真ん中の黒星に当てることができ\nたかどうか、当たったら「得た」といい、はずれたら「失う」と表現していた\nのです。\n だそうです。そういうもんかなあと思ったので「的を得る」を採用させて\nいただきました。\nURL: http://www.ne.jp/asahi/wh/class/oubunsha.html ","contentSnippet":"(URL: 404 Blog Not Found:アドバイスが欲しい人に、たった一つのアドバイス )だいぶ前の記事だけど、的を得ているのでメモメモ。でも、社会人２年目までは「全然分からないので教えてください」っていう質問(?)もありだと思います。(私もそこまで鬼ではない。)ただ最後に「ありがとうございました。他になにか僕が聞いておくべきコトがあるでしょうか？今までお聞きしたことと全く違うことでもいいのですが。」と言われたらガックリくるのは間違いない。追記(2009-04-07):「的を得ている」って間違っていたかなあと思って、調べてみました。 語源の『大学』・『中庸』にあるように、「正鵠（せいこく）を失う」という表現からきています。この場合の正鵠は「正も鵠も、弓の的のまん中の黒星（『角川漢和中辞典』）」のことで、射てど真ん中の黒星に当てることができたかどうか、当たったら「得た」といい、はずれたら「失う」と表現していたのです。 だそうです。そういうもんかなあと思ったので「的を得る」を採用させていただきました。URL: http://www.ne.jp/asahi/wh/class/oubunsha.html","link":"https://masutaka.net/2009-04-05-2/","isoDate":"2009-04-05T01:00:00.000Z","dateMiliSeconds":1238893200000,"authorName":"masutaka"},{"title":"本を購入","content":"最近自由な時間が増えたせいか、本を買う頻度が高いです。\n整体の帰りにまた買ってきました。今日行ったのは西友側の文教堂。\n起きていることはすべて正しい  これも小飼弾さんのブログ で紹介されていたので、気になっていました。\n時間は有り余っているので、ゆっくり読みます。\n(URL: 404 Blog Not Found:カツマofカツマ2008 - 書評 - 起きていることはすべて正しい )\n孫子の兵法  孫子の兵法は前から確認しておきたかったのです。\n最初に知ったのは、ジョセフとエシディ(ry\nアマゾンで評判の良い、この本を買いました。\nシグルイ 12  ツッコミ禁止でｗ。良い子は読んではいけません。\n今まで漫画は買わずに漫画喫茶で読んでいましたが、良く考えたらそんな\nに読みたいものってないのですよね。これからは普通に買って、読み終わっ\nたら売ることにします。私の場合、そのほうが時間とお金の無駄にならな\nいような気がしますので。また、筆者に正当な対価(印税)が支払われるの\nで、健全なお金の流れと言えましょう。","contentSnippet":"最近自由な時間が増えたせいか、本を買う頻度が高いです。整体の帰りにまた買ってきました。今日行ったのは西友側の文教堂。起きていることはすべて正しい  これも小飼弾さんのブログ で紹介されていたので、気になっていました。時間は有り余っているので、ゆっくり読みます。(URL: 404 Blog Not Found:カツマofカツマ2008 - 書評 - 起きていることはすべて正しい )孫子の兵法  孫子の兵法は前から確認しておきたかったのです。最初に知ったのは、ジョセフとエシディ(ryアマゾンで評判の良い、この本を買いました。シグルイ 12  ツッコミ禁止でｗ。良い子は読んではいけません。今まで漫画は買わずに漫画喫茶で読んでいましたが、良く考えたらそんなに読みたいものってないのですよね。これからは普通に買って、読み終わったら売ることにします。私の場合、そのほうが時間とお金の無駄にならないような気がしますので。また、筆者に正当な対価(印税)が支払われるので、健全なお金の流れと言えましょう。","link":"https://masutaka.net/2009-04-05-1/","isoDate":"2009-04-05T00:00:00.000Z","dateMiliSeconds":1238889600000,"authorName":"masutaka"},{"title":"行処理","content":"flush-lines\n指定した正規表現にヒットした行を削除する。\nkeep-lines\nflush-lines の逆\nsort-lines\nリージョンに含まれた行をアルファベット順にソートする。\nC-u を付けて実行すると逆順にソートする。\nsort-fields\nリージョンに含まれた行をアルファベット順にソートする。\n&ldquo;C-u N&rdquo; を付けて実行すると、空白で区切られた N 番目のフィールドを\nキーにソートする。\nsort-numeric-fields\nリージョンに含まれた行を数値順にソートする。\n&ldquo;C-u N&rdquo; を付けて実行すると、空白で区切られた N 番目のフィールドを\nキーにソートする。\nreverse-region\nリージョン内の行の順番を逆にする。\njoin-line\n現在の行を前の行と連結する。\nC-u を付けて実行すると次の行と連結する。これは vi の J と同じ動作。\noccur\n指定した正規表現にヒットした行を Occur バッファに出力する。\noccur は Emacs23 から &ldquo;M-s o&rdquo; に割り当てられたみたい。bindings.el\nをよく確認すると、M-s(search-map) や M-g(goto-map) が新設されていた。\nということで、M-g に割り当てていた grep-find は C-q C-e に変更した。","contentSnippet":"flush-lines指定した正規表現にヒットした行を削除する。keep-linesflush-lines の逆sort-linesリージョンに含まれた行をアルファベット順にソートする。C-u を付けて実行すると逆順にソートする。sort-fieldsリージョンに含まれた行をアルファベット順にソートする。“C-u N” を付けて実行すると、空白で区切られた N 番目のフィールドをキーにソートする。sort-numeric-fieldsリージョンに含まれた行を数値順にソートする。“C-u N” を付けて実行すると、空白で区切られた N 番目のフィールドをキーにソートする。reverse-regionリージョン内の行の順番を逆にする。join-line現在の行を前の行と連結する。C-u を付けて実行すると次の行と連結する。これは vi の J と同じ動作。occur指定した正規表現にヒットした行を Occur バッファに出力する。occur は Emacs23 から “M-s o” に割り当てられたみたい。bindings.elをよく確認すると、M-s(search-map) や M-g(goto-map) が新設されていた。ということで、M-g に割り当てていた grep-find は C-q C-e に変更した。","link":"https://masutaka.net/2009-04-04-1/","isoDate":"2009-04-04T00:00:00.000Z","dateMiliSeconds":1238803200000,"authorName":"masutaka"},{"title":"知る楽 仕事学のすすめ","content":"今日から NHK 教育で、勝間さんが新番組を始めるということで、見てみた。\n自分に重ね合う部分もあるということは、それだけ年をとったということ\nか。まあ、ひたすら刺激になったのは確かなので、来週も見てみよう。\n(URL: NHKロケ中です。新番組紹介。「知る楽」と「ゆうどきネットワーク」 )\n(URL: 木曜日 仕事学のすすめ｜NHK知る楽 )\nこの後の時間に始まった番組がこれ。\n『視点・論点「アサーション・さわやかな自己表現」』\nなんという連携プレー。","contentSnippet":"今日から NHK 教育で、勝間さんが新番組を始めるということで、見てみた。自分に重ね合う部分もあるということは、それだけ年をとったということか。まあ、ひたすら刺激になったのは確かなので、来週も見てみよう。(URL: NHKロケ中です。新番組紹介。「知る楽」と「ゆうどきネットワーク」 )(URL: 木曜日 仕事学のすすめ｜NHK知る楽 )この後の時間に始まった番組がこれ。『視点・論点「アサーション・さわやかな自己表現」』なんという連携プレー。","link":"https://masutaka.net/2009-04-02-1/","isoDate":"2009-04-02T00:00:00.000Z","dateMiliSeconds":1238630400000,"authorName":"masutaka"},{"title":"『断る力』を読んだ","content":"[2009-03-29-2] に買って今日読み終えました。結論から言うと、久々に\n「当たり」の本でした。入社して数年経った頃に読むと効果的です。\nP. 78\n １人１人が業務への固着化のリスクを防ぎ、あるいは日常でのちょっとし\nた仕事のプロシジャー(引用者註:手順)での非効率化を防ぐために、命じら\nれた仕事、与えられた手順が本当に合目的なのか、疑い、考え、そうでな\nければ一旦は「断り」、その上で代替案を示すという習慣づけをしていく\n必要があります。\n これには大納得。こういう人と関わるとこちらとしても刺激になるし、良\nい方向に進んでいきます。でもこんな習慣がついたのは、大学に入ってか\nらかなあ。\n上司は思いつきでものを言いますが(本当です)、部下はそれに振り回され\nる必要はありません。日頃から疑い、考え、場合によっては断る訓練を積\nむことが大事です。とは言うものの、私自身が思いつきでものを言わざる\nを得ない場面が増えてきたのも事実です&hellip;。\nP. 99\n だいたい数年間かけても追いつけないレベルであれば、会社や地域で一番\nになれます。それが、数十年かけても追いつけないと、前述の方々のよう\nに、「日本で一番」になれるのです。\n これを読んで安心しました。まずは数年でいいんだと(笑)。「断る」こと\nで自分の時間を作り、ある分野においてみんなよりちょっとだけ進んだ自\n分になろう、ということだと解釈しました。\n幸い(?)、最近残業時間が減らされているので、そのための時間を捻出する\n苦労は減りそうです。ただ、以前より作業時間が少ないぶん、仕事中は今\nまで以上に「断る力」が必要になることでしょう。\nもちろんただやみくもに断ればよいのではなく、必要な作業を断らないた\nめに、不要な作業を断る必要があるということです。","contentSnippet":"[2009-03-29-2] に買って今日読み終えました。結論から言うと、久々に「当たり」の本でした。入社して数年経った頃に読むと効果的です。P. 78 １人１人が業務への固着化のリスクを防ぎ、あるいは日常でのちょっとした仕事のプロシジャー(引用者註:手順)での非効率化を防ぐために、命じられた仕事、与えられた手順が本当に合目的なのか、疑い、考え、そうでなければ一旦は「断り」、その上で代替案を示すという習慣づけをしていく必要があります。 これには大納得。こういう人と関わるとこちらとしても刺激になるし、良い方向に進んでいきます。でもこんな習慣がついたのは、大学に入ってからかなあ。上司は思いつきでものを言いますが(本当です)、部下はそれに振り回される必要はありません。日頃から疑い、考え、場合によっては断る訓練を積むことが大事です。とは言うものの、私自身が思いつきでものを言わざるを得ない場面が増えてきたのも事実です…。P. 99 だいたい数年間かけても追いつけないレベルであれば、会社や地域で一番になれます。それが、数十年かけても追いつけないと、前述の方々のように、「日本で一番」になれるのです。 これを読んで安心しました。まずは数年でいいんだと(笑)。「断る」ことで自分の時間を作り、ある分野においてみんなよりちょっとだけ進んだ自分になろう、ということだと解釈しました。幸い(?)、最近残業時間が減らされているので、そのための時間を捻出する苦労は減りそうです。ただ、以前より作業時間が少ないぶん、仕事中は今まで以上に「断る力」が必要になることでしょう。もちろんただやみくもに断ればよいのではなく、必要な作業を断らないために、不要な作業を断る必要があるということです。","link":"https://masutaka.net/2009-04-01-1/","isoDate":"2009-04-01T00:00:00.000Z","dateMiliSeconds":1238544000000,"authorName":"masutaka"},{"title":"Mozilla Sunbird","content":"いわゆるスケジューラ。今は MHC 使っているけど、今後使うことがあるか\nもしれない。Google カレンダー + Sunbird はなかなかナイスらしく、オ\nフラインでも予定チェックできるらしい。\n(URL: Mozilla Sunbird )","contentSnippet":"いわゆるスケジューラ。今は MHC 使っているけど、今後使うことがあるかもしれない。Google カレンダー + Sunbird はなかなかナイスらしく、オフラインでも予定チェックできるらしい。(URL: Mozilla Sunbird )","link":"https://masutaka.net/2009-03-31-2/","isoDate":"2009-03-31T01:00:00.000Z","dateMiliSeconds":1238461200000,"authorName":"masutaka"},{"title":"シゾフレ・メランコテスト","content":"[2009-03-29-2] の「断る力」で紹介されていたテストをやってみた。\n マスタカさんは、ややメランコ的なところがあります。\n　どちらかというとしっかりとした自分を持っている人です。まわりの意\n見を聞きながら、自分の意見を崩さないで、よりよい自分にしていくため\nには、有利なスタンスにあると言えます。\n　他人の意見に流されず、多少にしっかりしたところがありますが、まだ\nまだ自分へのこだわりも強く、ちょっとしたところでトラブルが起きるか\nもしれないので要注意。\nあなたのメランコ度、シゾフレ度は以下の通りです。\nメランコ度 68%\nシゾフレ度 14%\n (URL: 和田秀樹のココロクリニカ[シゾフレ・メランコテスト] )\n「自分へのこだわり」っていうのは気をつけないといけないな。ここ２〜\n３年、自分が思ったことを全部話さずにいられないことがあるし、人の意\n見を聞いていないこともある。どちらも気をつけているけど、なかなかコ\nントロールは難しい。","contentSnippet":"[2009-03-29-2] の「断る力」で紹介されていたテストをやってみた。 マスタカさんは、ややメランコ的なところがあります。　どちらかというとしっかりとした自分を持っている人です。まわりの意見を聞きながら、自分の意見を崩さないで、よりよい自分にしていくためには、有利なスタンスにあると言えます。　他人の意見に流されず、多少にしっかりしたところがありますが、まだまだ自分へのこだわりも強く、ちょっとしたところでトラブルが起きるかもしれないので要注意。あなたのメランコ度、シゾフレ度は以下の通りです。メランコ度 68%シゾフレ度 14% (URL: 和田秀樹のココロクリニカ[シゾフレ・メランコテスト] )「自分へのこだわり」っていうのは気をつけないといけないな。ここ２〜３年、自分が思ったことを全部話さずにいられないことがあるし、人の意見を聞いていないこともある。どちらも気をつけているけど、なかなかコントロールは難しい。","link":"https://masutaka.net/2009-03-31-1/","isoDate":"2009-03-31T00:00:00.000Z","dateMiliSeconds":1238457600000,"authorName":"masutaka"},{"title":"MHC で週番号を表示","content":"いい感じ。以下を設定したあと、Mew を再起動すれば表示される。\n(setq mhc-summary-use-cw t  mhc-use-week-separator t  mhc-start-day-of-week 1) URL: http://carz.air-nifty.com/sowhat/2008/08/emacs_d408.html ","contentSnippet":"いい感じ。以下を設定したあと、Mew を再起動すれば表示される。(setq mhc-summary-use-cw t  mhc-use-week-separator t  mhc-start-day-of-week 1) URL: http://carz.air-nifty.com/sowhat/2008/08/emacs_d408.html","link":"https://masutaka.net/2009-03-29-3/","isoDate":"2009-03-29T02:00:00.000Z","dateMiliSeconds":1238292000000,"authorName":"masutaka"},{"title":"本を購入","content":"小飼弾さんのブログ で勝間さんの本が紹介されていたので、気になってい\nたんです。今日、近所の文教堂に行ったら２冊とも置いてあったので、\nまとめて買ってきました。\n(URL: 404 Blog Not Found:assert(yourself); - 書評 - 断る力 )\n(URL: 404 Blog Not Found:Live your life - 書評 - 会社に人生を預けるな )","contentSnippet":"小飼弾さんのブログ で勝間さんの本が紹介されていたので、気になっていたんです。今日、近所の文教堂に行ったら２冊とも置いてあったので、まとめて買ってきました。(URL: 404 Blog Not Found:assert(yourself); - 書評 - 断る力 )(URL: 404 Blog Not Found:Live your life - 書評 - 会社に人生を預けるな )","link":"https://masutaka.net/2009-03-29-2/","isoDate":"2009-03-29T01:00:00.000Z","dateMiliSeconds":1238288400000,"authorName":"masutaka"},{"title":"本とゲームを売却","content":"天皇になろうとした将軍—それからの大平記 足利義満のミステリー 「言霊(コトダマ)の国」解体新書 朝日新聞の正義—対論 戦後日本を惑わしたメディアの責任 日本史漫遊 宮本武蔵 最強伝説の真実 ほんとうの環境問題 正義で地球は救えない 三国志 英雄たちの最期の瞬間! このダジャレで生きのびろ! 聖剣伝説4 以上をブックオフで売ってきました。\nこれで 510 円かあ。相変わらず売り叩くなあ。","contentSnippet":"天皇になろうとした将軍—それからの大平記 足利義満のミステリー 「言霊(コトダマ)の国」解体新書 朝日新聞の正義—対論 戦後日本を惑わしたメディアの責任 日本史漫遊 宮本武蔵 最強伝説の真実 ほんとうの環境問題 正義で地球は救えない 三国志 英雄たちの最期の瞬間! このダジャレで生きのびろ! 聖剣伝説4 以上をブックオフで売ってきました。これで 510 円かあ。相変わらず売り叩くなあ。","link":"https://masutaka.net/2009-03-29-1/","isoDate":"2009-03-29T00:00:00.000Z","dateMiliSeconds":1238284800000,"authorName":"masutaka"},{"title":"トップページ以外は、古い記事→新しい記事の順で表示するようにしました。","content":"トップページ以外(日ページ、月ページ、カテゴリページ)は、各アイテム\nを古い記事から新しい記事の順に表示するようにしました。\n例えばあるカテゴリや、ある月の記事を最初から最後まで見る場合は、古\nい記事→新しい記事の順で並んでいたほうが見やすいと考えたからです。\n(そんな人がいるのかはヽ(^_^;)）（(^,^;)ノ置いといて。)\n今回も chalow 本体を修正しました。オリジナル(chalow-1.0.tar.gz)の\ncl.conf と chalow へのパッチを貼り付けておきますね。\n追記(2011-07-06):\nGitHub に push しました。 --- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-03-28 21:21:11.000000000 +0900 @@ -60,6 +60,11 @@ $reverse_order_days = 1; # -------------------------------------------------------------------- +# 日ページ、月ページ、カテゴリページで、アイテムを降順 (新しいアイテム +# が上) で表示するか (1:yes or 0:no) +$descending_order_items = 0; + +# -------------------------------------------------------------------- # アイテムヘッダーのフォーマットをどうするか # (0:&#34;* HOGE:&#34;, 1:&#34;* HOGE&#34;, 2:&#34;HOGE:&#34;,3:&#34;HOGE&#34;) $item_header_style = 1; --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-03-28 21:21:57.","contentSnippet":"トップページ以外(日ページ、月ページ、カテゴリページ)は、各アイテムを古い記事から新しい記事の順に表示するようにしました。例えばあるカテゴリや、ある月の記事を最初から最後まで見る場合は、古い記事→新しい記事の順で並んでいたほうが見やすいと考えたからです。(そんな人がいるのかはヽ(^_^;)）（(^,^;)ノ置いといて。)今回も chalow 本体を修正しました。オリジナル(chalow-1.0.tar.gz)のcl.conf と chalow へのパッチを貼り付けておきますね。追記(2011-07-06):GitHub に push しました。 --- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-03-28 21:21:11.000000000 +0900 @@ -60,6 +60,11 @@ $reverse_order_days = 1; # -------------------------------------------------------------------- +# 日ページ、月ページ、カテゴリページで、アイテムを降順 (新しいアイテム +# が上) で表示するか (1:yes or 0:no) +$descending_order_items = 0; + +# -------------------------------------------------------------------- # アイテムヘッダーのフォーマットをどうするか # (0:\"* HOGE:\", 1:\"* HOGE\", 2:\"HOGE:\",3:\"HOGE\") $item_header_style = 1; --- chalow.org\t2007-10-19 23:15:01.000000000 +0900 +++ chalow\t2009-03-28 21:21:57.","link":"https://masutaka.net/2009-03-28-1/","isoDate":"2009-03-28T00:00:00.000Z","dateMiliSeconds":1238198400000,"authorName":"masutaka"},{"title":"「最近追記された記事」を自動更新するようにしました。","content":"[2009-03-21-1] に手動更新でお茶を濁していた「最近追記された記事」で\nすが、自動更新するようにしました。\n「追記YYYYMMDD:」といったマークをつけて追記すると、左側の「最近追加\nされた記事」に自動的に表示されます。デフォルトの設定では 5 つ表示し\nます。&ldquo;YYYYMMDD&rdquo; は例えば &ldquo;20090326&rdquo; です。chalow を更新しないと、\n(？日前) は更新されません。\n[2009-03-22-3] の ChangeLogReader.rb で実装しようかなとも考えていま\nしたが、結局 chalow 本体を修正しました。Perl 初心者なので、変なこと\nしてたら教えてください。^^;\n以下にオリジナル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチ\nを貼り付けておきます。\n追記(2009-04-05):\n例えば 2009.4.5 に [2009-03-07-1] と [2009-03-26-1] に追記を行うと、\n後者だけしか「最近追記された記事」の候補に上がらないので chalow へ\nのパッチを差し替えました。\nまた、埋め込む URL を絶対パスから相対パスに変更しました。\n追記(2011-07-06):\nGitHub に push しました。 --- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-03-26 23:40:41.000000000 +0900 @@ -109,6 +109,10 @@ $latest_titles_num = 10; # -------------------------------------------------------------------- +# 最近追記された記事(追記YYYYMMDD:)一覧 (JavaScript ファイル) で出力する日数 +$latest_tuiki_num = 5; + +# -------------------------------------------------------------------- # カテゴリページを作るか (0:NO, 1:YES) $output_cat_pages = 0; @@ -161,6 +165,14 @@ &lt;p/&gt; &lt;div class=&#34;stdbox&#34;&gt; +&lt;table&gt; +&lt;tr&gt;&lt;td&gt;最近追記された記事&lt;/td&gt;&lt;/tr&gt; +&lt;tr&gt;&lt;td&gt;&lt;TMPL_VAR name=latest_tuiki_list&gt;&lt;/td&gt;&lt;/tr&gt; +&lt;/table&gt; +&lt;/div&gt; +&lt;p/&gt; + +&lt;div class=&#34;stdbox&#34;&gt; &lt;table&gt;&lt;tr&gt;&lt;td&gt;リンク&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; - &lt;a href=&#34;http://chalow.","contentSnippet":"[2009-03-21-1] に手動更新でお茶を濁していた「最近追記された記事」ですが、自動更新するようにしました。「追記YYYYMMDD:」といったマークをつけて追記すると、左側の「最近追加された記事」に自動的に表示されます。デフォルトの設定では 5 つ表示します。“YYYYMMDD” は例えば “20090326” です。chalow を更新しないと、(？日前) は更新されません。[2009-03-22-3] の ChangeLogReader.rb で実装しようかなとも考えていましたが、結局 chalow 本体を修正しました。Perl 初心者なので、変なことしてたら教えてください。^^;以下にオリジナル(chalow-1.0.tar.gz)の cl.conf と chalow へのパッチを貼り付けておきます。追記(2009-04-05):例えば 2009.4.5 に [2009-03-07-1] と [2009-03-26-1] に追記を行うと、後者だけしか「最近追記された記事」の候補に上がらないので chalow へのパッチを差し替えました。また、埋め込む URL を絶対パスから相対パスに変更しました。追記(2011-07-06):GitHub に push しました。 --- cl.conf.org\t2007-10-19 21:38:22.000000000 +0900 +++ cl.conf\t2009-03-26 23:40:41.000000000 +0900 @@ -109,6 +109,10 @@ $latest_titles_num = 10; # -------------------------------------------------------------------- +# 最近追記された記事(追記YYYYMMDD:)一覧 (JavaScript ファイル) で出力する日数 +$latest_tuiki_num = 5; + +# -------------------------------------------------------------------- # カテゴリページを作るか (0:NO, 1:YES) $output_cat_pages = 0; @@ -161,6 +165,14 @@ <p/> <div class=\"stdbox\"> +<table> +<tr><td>最近追記された記事</td></tr> +<tr><td><TMPL_VAR name=latest_tuiki_list></td></tr> +</table> +</div> +<p/> + +<div class=\"stdbox\"> <table><tr><td>リンク</td></tr><tr><td> - <a href=\"http://chalow.","link":"https://masutaka.net/2009-03-26-1/","isoDate":"2009-03-26T00:00:00.000Z","dateMiliSeconds":1238025600000,"authorName":"masutaka"},{"title":"各記事ごとにコメントを付けられるようにしました。","content":"もはや私以外は興味ないと思いますがｗ、続けます。\n各記事ごとにコメントを付けられるようにしました。レイアウトはすっき\nりさせたつもりです。\nこういうブログサイトって、いろいろな機能がカオスのように付いてます\nよね。当人以外は何がなんだか分からないのでは&hellip;。ああはならないよう\nに、一つ増やしたら一つ減らすの精神で精進していきます。\nで、いきなり矛盾しますが、左側になかのひと を設置しました。日本地図\nの画像です。「どんな組織からアクセスがあったか」が分かります。一般\nの大手プロバイダーからのアクセスは集計しません。\n何がすごいって、アクセスがあった会社名をクリックすると、その会社の\n地図が表示されるんです。最初のインパクトは大きいです。お〜ってなり\nます(笑)。ブログを持っている人は試してみると良いかも。","contentSnippet":"もはや私以外は興味ないと思いますがｗ、続けます。各記事ごとにコメントを付けられるようにしました。レイアウトはすっきりさせたつもりです。こういうブログサイトって、いろいろな機能がカオスのように付いてますよね。当人以外は何がなんだか分からないのでは…。ああはならないように、一つ増やしたら一つ減らすの精神で精進していきます。で、いきなり矛盾しますが、左側になかのひと を設置しました。日本地図の画像です。「どんな組織からアクセスがあったか」が分かります。一般の大手プロバイダーからのアクセスは集計しません。何がすごいって、アクセスがあった会社名をクリックすると、その会社の地図が表示されるんです。最初のインパクトは大きいです。お〜ってなります(笑)。ブログを持っている人は試してみると良いかも。","link":"https://masutaka.net/2009-03-23-2/","isoDate":"2009-03-23T01:00:00.000Z","dateMiliSeconds":1237770000000,"authorName":"masutaka"},{"title":"FTP とタイムスタンプ","content":"「くっつき BBS」の各ログファイルをローカルに持ってきて、リモートに\nアップしたらタイムスタンプが更新されてしまった。どうやら FTP の仕様\nにはタイムスタンプを扱う機能はないらしい。\nURL: http://nsjnotes.blogspot.com/2008/04/ftp_11.html 左側の「最近コメントを頂いた記事」が全て「(0時間前)」になってしまっ\nた。うーん。(x_x)","contentSnippet":"「くっつき BBS」の各ログファイルをローカルに持ってきて、リモートにアップしたらタイムスタンプが更新されてしまった。どうやら FTP の仕様にはタイムスタンプを扱う機能はないらしい。URL: http://nsjnotes.blogspot.com/2008/04/ftp_11.html 左側の「最近コメントを頂いた記事」が全て「(0時間前)」になってしまった。うーん。(x_x)","link":"https://masutaka.net/2009-03-23-1/","isoDate":"2009-03-23T00:00:00.000Z","dateMiliSeconds":1237766400000,"authorName":"masutaka"},{"title":"rchalow","content":"Ruby 版の Chalow ってのがありました。\nURL: http://www.ftnk.jp/~fumi/cl/2009-02-12-1.html 移行するかどうかは置いといて、rchalow-0.0.2.tar.bz2 に同封の\nChangeLogReader.rb。これを使えば Perl が分からない私でも\n[2009-03-21-1] の tuiki.js を作れそうな気がしてきました。","contentSnippet":"Ruby 版の Chalow ってのがありました。URL: http://www.ftnk.jp/~fumi/cl/2009-02-12-1.html 移行するかどうかは置いといて、rchalow-0.0.2.tar.bz2 に同封のChangeLogReader.rb。これを使えば Perl が分からない私でも[2009-03-21-1] の tuiki.js を作れそうな気がしてきました。","link":"https://masutaka.net/2009-03-22-3/","isoDate":"2009-03-22T02:00:00.000Z","dateMiliSeconds":1237687200000,"authorName":"masutaka"},{"title":"全てのページでサイドメニューを表示するようにしました。","content":"デフォルトの cl.conf は、トップページにしか左側のサイドメニューを表\n示しない設定になっていました。良く分からないので放置していましたが、\nこの度一念発起して全てのページで表示するようにしました。レイアウト\nも統一したので、各ページがだいぶフラットになりました。\n内部的には、カウンタやアクセス解析を書く場所を統一できたため、管理\nが楽になりました。\nchalow ver2 早く出ないかな。\nURL: http://chalow.net/2008-01-26-1.html ","contentSnippet":"デフォルトの cl.conf は、トップページにしか左側のサイドメニューを表示しない設定になっていました。良く分からないので放置していましたが、この度一念発起して全てのページで表示するようにしました。レイアウトも統一したので、各ページがだいぶフラットになりました。内部的には、カウンタやアクセス解析を書く場所を統一できたため、管理が楽になりました。chalow ver2 早く出ないかな。URL: http://chalow.net/2008-01-26-1.html","link":"https://masutaka.net/2009-03-22-2/","isoDate":"2009-03-22T01:00:00.000Z","dateMiliSeconds":1237683600000,"authorName":"masutaka"},{"title":"シムエントリ","content":"「たつをの ChangeLog 」を見ていたら、各記事の最後にこんなのが付いて\nいました。\n↓面白そうなので、各記事の下に付けてみました。邪魔になったらまた考えます。\n追記(2009-03-23):\n記事ごとにコメントを付けられるようにしたら早速邪魔になったので、\n「固定リンク」の先でだけ表示するようにしました。","contentSnippet":"「たつをの ChangeLog 」を見ていたら、各記事の最後にこんなのが付いていました。↓面白そうなので、各記事の下に付けてみました。邪魔になったらまた考えます。追記(2009-03-23):記事ごとにコメントを付けられるようにしたら早速邪魔になったので、「固定リンク」の先でだけ表示するようにしました。","link":"https://masutaka.net/2009-03-22-1/","isoDate":"2009-03-22T00:00:00.000Z","dateMiliSeconds":1237680000000,"authorName":"masutaka"},{"title":"最近追記された記事","content":"過去の記事に断りなく修正することがありますが、「追記YYYYMMDD:」と断\nり(?)を入れて追記することもあるので、左側に「最近追記された記事」を\n表示するようにしました。\nURL: http://chalow.net/2005-01-31-4.html 「最近コメントを頂いた記事」や「最近トラックバックを頂いた記事」と\n同じように、JavaScript ファイル tuiki.js を作って index.html から読\nみ込ませています。ただ tuiki.js を更新するスクリプトがないため、\nまだほぼ手動で更新しています&hellip;。もちろん自動化しますが、さてどうやっ\nてやろうかな。\n記事 ID ではなく、記事タイトルを表示するのも良いかもしれません。\nURL: http://chalow.net/2008-09-21-3.html ","contentSnippet":"過去の記事に断りなく修正することがありますが、「追記YYYYMMDD:」と断り(?)を入れて追記することもあるので、左側に「最近追記された記事」を表示するようにしました。URL: http://chalow.net/2005-01-31-4.html 「最近コメントを頂いた記事」や「最近トラックバックを頂いた記事」と同じように、JavaScript ファイル tuiki.js を作って index.html から読み込ませています。ただ tuiki.js を更新するスクリプトがないため、まだほぼ手動で更新しています…。もちろん自動化しますが、さてどうやってやろうかな。記事 ID ではなく、記事タイトルを表示するのも良いかもしれません。URL: http://chalow.net/2008-09-21-3.html","link":"https://masutaka.net/2009-03-21-1/","isoDate":"2009-03-21T00:00:00.000Z","dateMiliSeconds":1237593600000,"authorName":"masutaka"},{"title":"printf() のような関数を自作した。","content":"せっかくの休みなのでｗ、printf() のような関数を自作してみた。\nstatic char my_buffer[1024 * 1024]; extern void my_printf(const char *fmt,...); 訳あって、書き出し先は my_buffer という外部変数。\nva_list も訳あって使えないので、可変長引数は自前で読み込む。\n可変長引数はどう読み込めば良いか？ C 言語の場合、内部変数はスタック\nに積まれるため、後に宣言したものの方が若いアドレスになる。でも、引\n数の場合は違っていて、「引数1」の次のアドレスに「引数2」が存在する\nことが保証されているらしい。\nURL: http://networkprogramming.blog18.fc2.com/blog-entry-7.html これを利用すれば、可変長引数を自前で読み込むのは簡単。\nfmt の中に %d や %x が見つかるたびに param32p を読み進めていけば良い。\nvoid my_printf(const char *fmt,...) { unsigned long int *param32p = (unsigned long int *)&amp;fmt + 1; ところが！！試しに最適化レベルを 3 にしたら、「引数1」の 前の ア\nドレスに「引数2」が存在していた。ガセだったか&hellip;。以下のページにも\n可変長引数を扱う時は stdarg.h 使えと書いてあった。va_list が使えな\nいというのは勘違いな気がしてきたので、後で確認してみよう。\nURL: http://docs.hp.com/ja/B2355-90858/stdarg.5.html itoa() も使えないため自作した。「符号あり/なし 10 進数」と「符号な\nし 16 進数」をサポートしたが、意外に大変だった。一番時間かかったかも。","contentSnippet":"せっかくの休みなのでｗ、printf() のような関数を自作してみた。static char my_buffer[1024 * 1024]; extern void my_printf(const char *fmt,...); 訳あって、書き出し先は my_buffer という外部変数。va_list も訳あって使えないので、可変長引数は自前で読み込む。可変長引数はどう読み込めば良いか？ C 言語の場合、内部変数はスタックに積まれるため、後に宣言したものの方が若いアドレスになる。でも、引数の場合は違っていて、「引数1」の次のアドレスに「引数2」が存在することが保証されているらしい。URL: http://networkprogramming.blog18.fc2.com/blog-entry-7.html これを利用すれば、可変長引数を自前で読み込むのは簡単。fmt の中に %d や %x が見つかるたびに param32p を読み進めていけば良い。void my_printf(const char *fmt,...) { unsigned long int *param32p = (unsigned long int *)&fmt + 1; ところが！！試しに最適化レベルを 3 にしたら、「引数1」の 前の アドレスに「引数2」が存在していた。ガセだったか…。以下のページにも可変長引数を扱う時は stdarg.h 使えと書いてあった。va_list が使えないというのは勘違いな気がしてきたので、後で確認してみよう。URL: http://docs.hp.com/ja/B2355-90858/stdarg.5.html itoa() も使えないため自作した。「符号あり/なし 10 進数」と「符号なし 16 進数」をサポートしたが、意外に大変だった。一番時間かかったかも。","link":"https://masutaka.net/2009-03-20-1/","isoDate":"2009-03-20T00:00:00.000Z","dateMiliSeconds":1237507200000,"authorName":"masutaka"},{"title":"建築マネジメントとシステム構築","content":"建築のマネジメントはシステム構築とよく似ている。似ているというよ\nり，システム構築のプロジェクト・マネジメントの原型が建築である。\nURL: http://itpro.nikkeibp.co.jp/article/COLUMN/20080520/303016/  へぇ〜 そうなのか。\nちなみにこれは「すごい現場 」というコラムの第９回です。恐ろしい。。。","contentSnippet":"建築のマネジメントはシステム構築とよく似ている。似ているというより，システム構築のプロジェクト・マネジメントの原型が建築である。URL: http://itpro.nikkeibp.co.jp/article/COLUMN/20080520/303016/  へぇ〜 そうなのか。ちなみにこれは「すごい現場 」というコラムの第９回です。恐ろしい。。。","link":"https://masutaka.net/2009-03-18-3/","isoDate":"2009-03-18T02:00:00.000Z","dateMiliSeconds":1237341600000,"authorName":"masutaka"},{"title":"Hello","content":"M-x view-hello-file すると、さままざまな字体の Hello を確認できます。\n単一バッファで複数のフォントを使えるエディタって、なかなかないのでは。\nEnglish Hello Japanese (日本語) こんにちは, コンニチハ その中にジョークらしきものを発見。\nC printf (&#34;Hello, world!\\n&#34;); Emacs emacs --no-splash -f view-hello-file ","contentSnippet":"M-x view-hello-file すると、さままざまな字体の Hello を確認できます。単一バッファで複数のフォントを使えるエディタって、なかなかないのでは。English Hello Japanese (日本語) こんにちは, コンニチハ その中にジョークらしきものを発見。C printf (\"Hello, world!\\n\"); Emacs emacs --no-splash -f view-hello-file","link":"https://masutaka.net/2009-03-18-2/","isoDate":"2009-03-18T01:00:00.000Z","dateMiliSeconds":1237338000000,"authorName":"masutaka"},{"title":"耳掃除","content":"閲覧注意！！微グロです。\n耳掃除！！！ -- ニコニコ動画 すげー耳クソｗｗｗｗ -- ニコニコ動画 ","contentSnippet":"閲覧注意！！微グロです。耳掃除！！！ -- ニコニコ動画 すげー耳クソｗｗｗｗ -- ニコニコ動画","link":"https://masutaka.net/2009-03-18-1/","isoDate":"2009-03-18T00:00:00.000Z","dateMiliSeconds":1237334400000,"authorName":"masutaka"},{"title":"ファイルの MIME タイプの確認＆設定＆削除","content":"ファイルの MIME タイプを確認\n|% svn propget svn:mime-type hoge.pdf\nファイルの MIME タイプをバイナリ(application/octet-stream)に設定\n|% svn propset svn:mime-type application/octet-stream hoge.pdf\nファイルの MIME タイプを application/pdf に設定\n|% svn propset svn:mime-type application/pdf hoge.pdf\nファイルの MIME タイプを削除\n|% svn propdel svn:mime-type hoge.pdf\n追記(2011-03-06):\n似たような操作で svn:ignore 属性を追加したり、削除したり出来ます。\nSubversionで無視パターンを指定 - てんぷらメモ 追記(2011-12-30):\nsvn commit すると反映されます。svn revert すると、propset が破棄さ\nれます。svn revert と git checkout は似ていますね。","contentSnippet":"ファイルの MIME タイプを確認|% svn propget svn:mime-type hoge.pdfファイルの MIME タイプをバイナリ(application/octet-stream)に設定|% svn propset svn:mime-type application/octet-stream hoge.pdfファイルの MIME タイプを application/pdf に設定|% svn propset svn:mime-type application/pdf hoge.pdfファイルの MIME タイプを削除|% svn propdel svn:mime-type hoge.pdf追記(2011-03-06):似たような操作で svn:ignore 属性を追加したり、削除したり出来ます。Subversionで無視パターンを指定 - てんぷらメモ 追記(2011-12-30):svn commit すると反映されます。svn revert すると、propset が破棄されます。svn revert と git checkout は似ていますね。","link":"https://masutaka.net/2009-03-14-3/","isoDate":"2009-03-14T02:00:00.000Z","dateMiliSeconds":1236996000000,"authorName":"masutaka"},{"title":"同一ネットワーク上のマシン同士でのプロセス間通信","content":"以下の Web site にサンプルソースとともに簡潔にまとめられていた。\n素晴らしい。\nURL: http://www.ueda.info.waseda.ac.jp/~toyama/network/example2.html 以下のマシンでテストした。 サーバ -&gt; Cygwin on WindowsXP\nクライアント -&gt; Debian GNU Linux squeeze (testing)\nmake 時の注意  Debian では libsocket が見つからなくてリンクエラーになった。\nLinux では不要らしいので、Makefile 中の -lsocket を削除した。 Cygwin では libsocket と libnsl が見つからなくてリンクエラーに\nなった。両方とも cygwin1.dll に含まれているらしいので、Makefile 中\nの -lsocket と -lnsl を削除した。  テスト  Cygwin で iserver.exe を実行し、クライアントからの通信待ち受け状\n態にした。 Linux で iclient を実行した。そのまま文字列を打ち込んだら、大文字\nに変換されて表示された。成功！  補足  大文字への変換は iserver.c の toupper() で行っている。iclient は\n標準入力から受け取った文字列をサーバに送り、送り返された文字列を","contentSnippet":"以下の Web site にサンプルソースとともに簡潔にまとめられていた。素晴らしい。URL: http://www.ueda.info.waseda.ac.jp/~toyama/network/example2.html 以下のマシンでテストした。 サーバ -> Cygwin on WindowsXPクライアント -> Debian GNU Linux squeeze (testing)make 時の注意  Debian では libsocket が見つからなくてリンクエラーになった。Linux では不要らしいので、Makefile 中の -lsocket を削除した。 Cygwin では libsocket と libnsl が見つからなくてリンクエラーになった。両方とも cygwin1.dll に含まれているらしいので、Makefile 中の -lsocket と -lnsl を削除した。  テスト  Cygwin で iserver.exe を実行し、クライアントからの通信待ち受け状態にした。 Linux で iclient を実行した。そのまま文字列を打ち込んだら、大文字に変換されて表示された。成功！  補足  大文字への変換は iserver.c の toupper() で行っている。iclient は標準入力から受け取った文字列をサーバに送り、送り返された文字列を","link":"https://masutaka.net/2009-03-14-2/","isoDate":"2009-03-14T01:00:00.000Z","dateMiliSeconds":1236992400000,"authorName":"masutaka"},{"title":"電子メールでの一行の制限","content":"２つの制限 SMTP プロトコルが定義された RFC 5321 によると、&ldquo;4.5.3.1.6. Text Line&rdquo; に一行は(英文字で) 1000 文字までと制限されている。\n原文\n The maximum total length of a text line including the  is 1000 octets (not counting the leading dot duplicated for transparency). This number may be increased by the use of SMTP Service Extensions.\n 日本語訳\n &lt;CRLF&gt; を含むテキスト行の最大長は 1000 オクテットです(透過性のために付けられた複製した先頭のドットはカウントしません)。この数値は SMTP サービス拡張の使用によって増加するかもしれません。\n URL: http://www.hde.co.jp/rfc/rfc5321.php 実際はユーザが意識する必要はなくて、MUA(メーラ) が適切に処理してくれる。例えば Mew は長い行があるとエンコード方法を訊いてくる。\n Lines are too long. Input encoding (base64):","contentSnippet":"２つの制限 SMTP プロトコルが定義された RFC 5321 によると、“4.5.3.1.6. Text Line” に一行は(英文字で) 1000 文字までと制限されている。原文 The maximum total length of a text line including the  is 1000 octets (not counting the leading dot duplicated for transparency). This number may be increased by the use of SMTP Service Extensions. 日本語訳 <CRLF> を含むテキスト行の最大長は 1000 オクテットです(透過性のために付けられた複製した先頭のドットはカウントしません)。この数値は SMTP サービス拡張の使用によって増加するかもしれません。 URL: http://www.hde.co.jp/rfc/rfc5321.php 実際はユーザが意識する必要はなくて、MUA(メーラ) が適切に処理してくれる。例えば Mew は長い行があるとエンコード方法を訊いてくる。 Lines are too long. Input encoding (base64):","link":"https://masutaka.net/2009-03-14-1/","isoDate":"2009-03-14T00:00:00.000Z","dateMiliSeconds":1236988800000,"authorName":"masutaka"},{"title":"view-mode","content":"変更してはいけないファイルを閲覧する時に、あらかじめ\nM-x toggle-read-only する人も多いかと思います。以下の設定をしておく\nと、ページャライクな操作も行えるようになるのでオススメです。\nview-mode の詳細は &ldquo;F1 f view-mode&rdquo; をご覧下さい。\n;; read-only の時は view-mode にする。 (setq view-read-only t) 私はさらに less コマンド の G,j,k 相等のことも行えるようにしています。\n(defun view-goto-line-last (&amp;optional line)  (interactive &#34;P&#34;)  (View-goto-line (if (integerp line) line \t(line-number-at-pos (point-max)))))  (add-hook &#39;view-mode-hook \t(lambda () \t(define-key view-mode-map (kbd &#34;G&#34;) &#39;view-goto-line-last) \t(define-key view-mode-map (kbd &#34;j&#34;) &#39;View-scroll-line-forward) \t(define-key view-mode-map (kbd &#34;k&#34;) &#39;View-scroll-line-backward))) ここのページ にモードラインの &quot; View&quot; の文字列を目立たせる設定があり","contentSnippet":"変更してはいけないファイルを閲覧する時に、あらかじめM-x toggle-read-only する人も多いかと思います。以下の設定をしておくと、ページャライクな操作も行えるようになるのでオススメです。view-mode の詳細は “F1 f view-mode” をご覧下さい。;; read-only の時は view-mode にする。 (setq view-read-only t) 私はさらに less コマンド の G,j,k 相等のことも行えるようにしています。(defun view-goto-line-last (&optional line)  (interactive \"P\")  (View-goto-line (if (integerp line) line \t(line-number-at-pos (point-max)))))  (add-hook 'view-mode-hook \t(lambda () \t(define-key view-mode-map (kbd \"G\") 'view-goto-line-last) \t(define-key view-mode-map (kbd \"j\") 'View-scroll-line-forward) \t(define-key view-mode-map (kbd \"k\") 'View-scroll-line-backward))) ここのページ にモードラインの \" View\" の文字列を目立たせる設定があり","link":"https://masutaka.net/2009-03-08-2/","isoDate":"2009-03-08T01:00:00.000Z","dateMiliSeconds":1236474000000,"authorName":"masutaka"},{"title":"xz 圧縮","content":"UNIX での圧縮には gz か、より圧縮率の高い(しかし圧縮に時間がかかる)\nbzip2 が使われることが多い。\n2009/1/29 に新しく xz という形式が公開されたとのこと。最大の特徴は、\nその高い圧縮率と高速な伸長、そして激遅なｗ圧縮。そういう性格から、\n組み込みアプリケーションに期待されているそう。\nややこしいのが、開発元の The Tukaani Project に行くと、XZ Utils と\nLZMA Utils の２つあること。今まで後者の名前で開発されていたそうだが、\n正式リリースにあたり前者の名前に変わったようだ。ただ、Latest\nrelease が xz-4.999.8beta.tar.gz なので、まだベータ版なのかな。\nGNU tar も 1.22 から xz をサポートしたとのこと。\nさてどうしようか。←何が ^^;\nURL: http://www.jmuk.org/diary/2009/03/08/0 URL: http://codezine.jp/article/detail/3658 ","contentSnippet":"UNIX での圧縮には gz か、より圧縮率の高い(しかし圧縮に時間がかかる)bzip2 が使われることが多い。2009/1/29 に新しく xz という形式が公開されたとのこと。最大の特徴は、その高い圧縮率と高速な伸長、そして激遅なｗ圧縮。そういう性格から、組み込みアプリケーションに期待されているそう。ややこしいのが、開発元の The Tukaani Project に行くと、XZ Utils とLZMA Utils の２つあること。今まで後者の名前で開発されていたそうだが、正式リリースにあたり前者の名前に変わったようだ。ただ、Latestrelease が xz-4.999.8beta.tar.gz なので、まだベータ版なのかな。GNU tar も 1.22 から xz をサポートしたとのこと。さてどうしようか。←何が ^^;URL: http://www.jmuk.org/diary/2009/03/08/0 URL: http://codezine.jp/article/detail/3658","link":"https://masutaka.net/2009-03-08-1/","isoDate":"2009-03-08T00:00:00.000Z","dateMiliSeconds":1236470400000,"authorName":"masutaka"},{"title":"CD から抽出した wav を mp3 に変換","content":"cdda2wav を使えば、CD から *.wav を抽出できる。\n% cdda2wav -D/dev/cdrom -Igeneric_scsi -x -vall -L 0 -cddbp-server=freedbtest.dyndns.org:80/~cddb/cddbeuc.cgi -B sarge の時と同じように、ソースからコンパイルした gogo (petit313.tgz) を使って、wav から mp3 に変換しようとしたが、変換できなくなっていた。\n% gogo -q 0 audio_01.wav audio_01.mp3 encode audio_01.wav to audio_01.mp3 GOGO-no-coda ver. 3.13 ( May. 20 2004 ) is a mp3 encoder based on lame 3.88, which is distributed under LGPL on http://www.mp3dev.org/mp3/ . See http://member.nifty.ne.jp/~pen/ , http://homepage1.nifty.com/herumi/gogo_e.html . zsh: floating point exception gogo -q 0 audio_01.wav audio_01.","contentSnippet":"cdda2wav を使えば、CD から *.wav を抽出できる。% cdda2wav -D/dev/cdrom -Igeneric_scsi -x -vall -L 0 -cddbp-server=freedbtest.dyndns.org:80/~cddb/cddbeuc.cgi -B sarge の時と同じように、ソースからコンパイルした gogo (petit313.tgz) を使って、wav から mp3 に変換しようとしたが、変換できなくなっていた。% gogo -q 0 audio_01.wav audio_01.mp3 encode audio_01.wav to audio_01.mp3 GOGO-no-coda ver. 3.13 ( May. 20 2004 ) is a mp3 encoder based on lame 3.88, which is distributed under LGPL on http://www.mp3dev.org/mp3/ . See http://member.nifty.ne.jp/~pen/ , http://homepage1.nifty.com/herumi/gogo_e.html . zsh: floating point exception gogo -q 0 audio_01.wav audio_01.","link":"https://masutaka.net/2009-03-07-2/","isoDate":"2009-03-07T01:00:00.000Z","dateMiliSeconds":1236387600000,"authorName":"masutaka"},{"title":"いろいろ購入","content":"最近、月に 1 回 Amazon を使っている。今回は湿度計を買うのが目的。\n川崎でかなり探し回ったんだけど、こういうときに限って見つからないものだ。\n和田裕美の人に好かれる話し方  愛されキャラになるためにｗ買った。\n￥1(代金) + ￥360(配送料) で買えたのはかなりお得だった。\n追記(2009-04-05):\nそういえば、たつをの ChangeLog で紹介されていたので買ったのでした。\nまだ読み終わってない。。。\n(URL: たつをの ChangeLog - 人に好かれる話し方 )\nスーパーEX高品質温・湿度計 EX-2727  一回落としたせいなのか、うちの湿度計 がかなり不正確だったので、\nAmazon で評判の良いこれを買った。実物は画像で見るよりも大きめだが、\n外見はかなりクール。\nデビル メイ クライ デンジャラス･ヒッツ  ２は要らなかったなあ。１の兄貴の曲が入ってないとは。。。","contentSnippet":"最近、月に 1 回 Amazon を使っている。今回は湿度計を買うのが目的。川崎でかなり探し回ったんだけど、こういうときに限って見つからないものだ。和田裕美の人に好かれる話し方  愛されキャラになるためにｗ買った。￥1(代金) + ￥360(配送料) で買えたのはかなりお得だった。追記(2009-04-05):そういえば、たつをの ChangeLog で紹介されていたので買ったのでした。まだ読み終わってない。。。(URL: たつをの ChangeLog - 人に好かれる話し方 )スーパーEX高品質温・湿度計 EX-2727  一回落としたせいなのか、うちの湿度計 がかなり不正確だったので、Amazon で評判の良いこれを買った。実物は画像で見るよりも大きめだが、外見はかなりクール。デビル メイ クライ デンジャラス･ヒッツ  ２は要らなかったなあ。１の兄貴の曲が入ってないとは。。。","link":"https://masutaka.net/2009-03-07-1/","isoDate":"2009-03-07T00:00:00.000Z","dateMiliSeconds":1236384000000,"authorName":"masutaka"},{"title":"なんか、もう。。。","content":"URL: http://alfalfa.livedoor.biz/archives/51418623.html 左側のネコを見ていたら、シャドウを思い出した。\n  シャドウっていうのはデビルメイクライ１ のモンスター。\n4 匹出てきたときは泣きそうになったよ。(；´д⊂)\nゲーム自体はだいぶ前(2001年!!)なんだけど、最近また始めた..。","contentSnippet":"URL: http://alfalfa.livedoor.biz/archives/51418623.html 左側のネコを見ていたら、シャドウを思い出した。  シャドウっていうのはデビルメイクライ１ のモンスター。4 匹出てきたときは泣きそうになったよ。(；´д⊂)ゲーム自体はだいぶ前(2001年!!)なんだけど、最近また始めた..。","link":"https://masutaka.net/2009-03-06-3/","isoDate":"2009-03-06T02:00:00.000Z","dateMiliSeconds":1236304800000,"authorName":"masutaka"},{"title":"No exchange","content":"これだと「返品できません」という意味になっちゃうそう。\n正しくは、&ldquo;We cannot break large bills&rdquo; なんだって。\nURL: http://d.hatena.ne.jp/kazu-yamamoto/20090306/1236332358 URL: http://translation.1-find.com/wasei/ ","contentSnippet":"これだと「返品できません」という意味になっちゃうそう。正しくは、“We cannot break large bills” なんだって。URL: http://d.hatena.ne.jp/kazu-yamamoto/20090306/1236332358 URL: http://translation.1-find.com/wasei/","link":"https://masutaka.net/2009-03-06-2/","isoDate":"2009-03-06T01:00:00.000Z","dateMiliSeconds":1236301200000,"authorName":"masutaka"},{"title":"man ati","content":"debian-users:52078 によると、&ldquo;man ati&rdquo; があるらしい。というかあった。\nさらにビデオドライバごとの man もある。私の PC のビデオドライバ\nRadeon HD 2400 PRO の情報も &ldquo;man radeon&rdquo; にいろいろ書いてあった。","contentSnippet":"debian-users:52078 によると、“man ati” があるらしい。というかあった。さらにビデオドライバごとの man もある。私の PC のビデオドライバRadeon HD 2400 PRO の情報も “man radeon” にいろいろ書いてあった。","link":"https://masutaka.net/2009-03-06-1/","isoDate":"2009-03-06T00:00:00.000Z","dateMiliSeconds":1236297600000,"authorName":"masutaka"},{"title":"Mew で \"utf-8 is used. OK?\" に相当する文字に色付け","content":"(setq mew-ask-charset &#39;(&#34;us-ascii&#34; &#34;iso-2022-jp&#34;)) などと設定して、これ以外の文字を含むメールを送信しようとすると、\n&ldquo;utf-8 is used. OK?&rdquo; と聞かれるが、本文のどこに該当の文字が含まれて\nいるのか経験と勘(笑)で調べるしかなかった。そこで、&ldquo;n&rdquo; でキャンセル\nした後、該当の文字の背景を紫色にするようにしてみた。\n;; 「UNICODE 文字」の face を定義 (defvar mew-unicode-char-face-list  &#39;((((class color) (type tty)) (:bold t))  (((class color) (background light)) (:background &#34;purple&#34;))  (((class color) (background dark)) (:background &#34;purple&#34;))  (t (:bold t)))) (defface mew-unicode-char-face mew-unicode-char-face-list  &#34;UNICODE 文字&#34;  :group &#39;mew-highlight) (defvar mew-unicode-char-face &#39;mew-unicode-char-face) (face-spec-set &#39;mew-unicode-char-face mew-unicode-char-face-list)  (defadvice mew-encode-undo  (after  mew-encode-undo-after-advice  activate)  &#34;「UNICODE 文字」を強調表示&#34;  (if mew-ask-charset  (let* ((beg (progn (mew-header-goto-body) (point)))  (end (or (mew-attach-begin) (point-max)))  (unicode-char-regexp (mew-cur-unicode-char-regexp beg end)))  (if (stringp unicode-char-regexp)  (save-excursion  (mew-elet  (goto-char beg)  (while (and (&lt;= (point) end) (re-search-forward unicode-char-regexp end t))  (put-text-property  (match-beginning 0) (match-end 0) &#39;face &#39;mew-unicode-char-face))))))))  (defun mew-cur-unicode-char-regexp (beg end)  (let (pos unicode-char unicode-char-list)  (save-excursion  (goto-char beg)  (while (&lt; (setq pos (point)) end)  (if (and (mew-unicode-char-p pos)  (setq unicode-char (char-to-string (char-after pos)))  (not (member unicode-char unicode-char-list)))  (setq unicode-char-list (cons unicode-char unicode-char-list)))  (forward-char 1)))  (if (consp unicode-char-list)  (concat &#34;[&#34; (mapconcat &#39;identity unicode-char-list &#34;&#34;) &#34;]+&#34;))))  (defun mew-unicode-char-p (pos)  (let* ((char (char-after pos))  (eight-bit-p (and (not enable-multibyte-characters) (&gt;= char 128)))  (charset (if eight-bit-p &#39;eight-bit  (char-charset char))))  (and (not (eq charset &#39;ascii))  (not (eq charset &#39;japanese-jisx0208))))) さらに draft-mode で C-c C-l した時も色付けさせる設定。","contentSnippet":"(setq mew-ask-charset '(\"us-ascii\" \"iso-2022-jp\")) などと設定して、これ以外の文字を含むメールを送信しようとすると、“utf-8 is used. OK?” と聞かれるが、本文のどこに該当の文字が含まれているのか経験と勘(笑)で調べるしかなかった。そこで、“n” でキャンセルした後、該当の文字の背景を紫色にするようにしてみた。;; 「UNICODE 文字」の face を定義 (defvar mew-unicode-char-face-list  '((((class color) (type tty)) (:bold t))  (((class color) (background light)) (:background \"purple\"))  (((class color) (background dark)) (:background \"purple\"))  (t (:bold t)))) (defface mew-unicode-char-face mew-unicode-char-face-list  \"UNICODE 文字\"  :group 'mew-highlight) (defvar mew-unicode-char-face 'mew-unicode-char-face) (face-spec-set 'mew-unicode-char-face mew-unicode-char-face-list)  (defadvice mew-encode-undo  (after  mew-encode-undo-after-advice  activate)  \"「UNICODE 文字」を強調表示\"  (if mew-ask-charset  (let* ((beg (progn (mew-header-goto-body) (point)))  (end (or (mew-attach-begin) (point-max)))  (unicode-char-regexp (mew-cur-unicode-char-regexp beg end)))  (if (stringp unicode-char-regexp)  (save-excursion  (mew-elet  (goto-char beg)  (while (and (<= (point) end) (re-search-forward unicode-char-regexp end t))  (put-text-property  (match-beginning 0) (match-end 0) 'face 'mew-unicode-char-face))))))))  (defun mew-cur-unicode-char-regexp (beg end)  (let (pos unicode-char unicode-char-list)  (save-excursion  (goto-char beg)  (while (< (setq pos (point)) end)  (if (and (mew-unicode-char-p pos)  (setq unicode-char (char-to-string (char-after pos)))  (not (member unicode-char unicode-char-list)))  (setq unicode-char-list (cons unicode-char unicode-char-list)))  (forward-char 1)))  (if (consp unicode-char-list)  (concat \"[\" (mapconcat 'identity unicode-char-list \"\") \"]+\"))))  (defun mew-unicode-char-p (pos)  (let* ((char (char-after pos))  (eight-bit-p (and (not enable-multibyte-characters) (>= char 128)))  (charset (if eight-bit-p 'eight-bit  (char-charset char))))  (and (not (eq charset 'ascii))  (not (eq charset 'japanese-jisx0208))))) さらに draft-mode で C-c C-l した時も色付けさせる設定。","link":"https://masutaka.net/2009-03-01-1/","isoDate":"2009-03-01T00:00:00.000Z","dateMiliSeconds":1235865600000,"authorName":"masutaka"},{"title":"モバイル Suica の年会費","content":"ITmedia - 一般カード利用のモバイルSuicaユーザーは、年会費が必要に [2008-01-19-1] からモバイル Suica を使い始めたが、入会から１年経っ\nたことで次回入金からは年会費 1000 円がかかるそう。ただ、うまくやれ\nば年会費は払う必要はないみたい。以下まとめ。\n定期券を使うためには、年会費を払うかビューカードに登録する必要があ\nる。ビューカードは年会費 500 円だが、ビューカードにもいろいろな種類\nがあるようで、うまくやれば年会費を払う必要はなさそう。\n年会費無料でモバイルSuicaを使う方法 電子マネーについては、ビューカードに登録せずに使い続けることが可能。\nNew Days などで現金チャージすれば良い。\nここまで書いたけど、現状ほとんど定期しか使っていないので、普通の\nSuica に戻すことになりそう。(´・ω・`)\n追記(2009-07-02):\n昨日、モバイル Suica を解約しました。68 円余っていたので、チロルチョ\nコを 3 つ買って余りを 8 円にしました。こうすることで、解約手数料を\n8 円にできました。\nJR東日本：モバイルSuica＞各種手続き＞退会＞払いもどし額の計算方法 ","contentSnippet":"ITmedia - 一般カード利用のモバイルSuicaユーザーは、年会費が必要に [2008-01-19-1] からモバイル Suica を使い始めたが、入会から１年経ったことで次回入金からは年会費 1000 円がかかるそう。ただ、うまくやれば年会費は払う必要はないみたい。以下まとめ。定期券を使うためには、年会費を払うかビューカードに登録する必要がある。ビューカードは年会費 500 円だが、ビューカードにもいろいろな種類があるようで、うまくやれば年会費を払う必要はなさそう。年会費無料でモバイルSuicaを使う方法 電子マネーについては、ビューカードに登録せずに使い続けることが可能。New Days などで現金チャージすれば良い。ここまで書いたけど、現状ほとんど定期しか使っていないので、普通のSuica に戻すことになりそう。(´・ω・`)追記(2009-07-02):昨日、モバイル Suica を解約しました。68 円余っていたので、チロルチョコを 3 つ買って余りを 8 円にしました。こうすることで、解約手数料を8 円にできました。JR東日本：モバイルSuica＞各種手続き＞退会＞払いもどし額の計算方法","link":"https://masutaka.net/2009-02-28-3/","isoDate":"2009-02-28T02:00:00.000Z","dateMiliSeconds":1235786400000,"authorName":"masutaka"},{"title":"lenny から squeeze へのアップグレード","content":"2/14 に lenny がリリースされた。\nhttp://www.debian.or.jp/blog/debian50r0.html http://kmuto.jp/d/index.cgi/debian/lenny-release.htm それに伴い、現在のテスト版が lenny(レニー、ゼンマイで歩く双眼鏡) から\nsqueeze(スクィーズ、三つ目のエイリアン) に変わったので、アップグレードした。\n 必要なファイルを全てバックアップ /etc/apt/sources.list の lenny の文字列を squeeze に置換。 アップグレード\n|# aptitude update\n|# aptitude install aptitude\n|# aptitude upgrade\n|# aptitude dist-upgrade  まだ 2 週間しか経っていないこともあるけど、拍子抜けするくらい\n簡単だった。いい時代になったなあ。(´∀｀)\nhttp://www.debian.org/releases/lenny/i386/release-notes/ch-upgrading.ja.html ","contentSnippet":"2/14 に lenny がリリースされた。http://www.debian.or.jp/blog/debian50r0.html http://kmuto.jp/d/index.cgi/debian/lenny-release.htm それに伴い、現在のテスト版が lenny(レニー、ゼンマイで歩く双眼鏡) からsqueeze(スクィーズ、三つ目のエイリアン) に変わったので、アップグレードした。 必要なファイルを全てバックアップ /etc/apt/sources.list の lenny の文字列を squeeze に置換。 アップグレード|# aptitude update|# aptitude install aptitude|# aptitude upgrade|# aptitude dist-upgrade  まだ 2 週間しか経っていないこともあるけど、拍子抜けするくらい簡単だった。いい時代になったなあ。(´∀｀)http://www.debian.org/releases/lenny/i386/release-notes/ch-upgrading.ja.html","link":"https://masutaka.net/2009-02-28-2/","isoDate":"2009-02-28T01:00:00.000Z","dateMiliSeconds":1235782800000,"authorName":"masutaka"},{"title":"口内炎への効果的な治療法","content":"今週の「ためしてガッテン」で、口内炎の効果的な治療法をやっていたの\nでメモメモ。\n 殺菌成分入りのうがい薬(イソジンで良いと思う)で口を良くすすぐ。\n番組では、20 秒 を 3 回やってました。 すすぎ終わったら、水でうがい薬を洗い流す。\n殺菌成分は細胞組織自体にも効いてしまうそう。速やかに回復させるた\nめ、うがい薬を洗い流します。  http://www3.nhk.or.jp/gatten/archive/2009q1/20090225.html ","contentSnippet":"今週の「ためしてガッテン」で、口内炎の効果的な治療法をやっていたのでメモメモ。 殺菌成分入りのうがい薬(イソジンで良いと思う)で口を良くすすぐ。番組では、20 秒 を 3 回やってました。 すすぎ終わったら、水でうがい薬を洗い流す。殺菌成分は細胞組織自体にも効いてしまうそう。速やかに回復させるため、うがい薬を洗い流します。  http://www3.nhk.or.jp/gatten/archive/2009q1/20090225.html","link":"https://masutaka.net/2009-02-28-1/","isoDate":"2009-02-28T00:00:00.000Z","dateMiliSeconds":1235779200000,"authorName":"masutaka"},{"title":"Tab Mix Plusでの「タブを保護」「タブをロック」「タブを凍結」の違い","content":"タブを保護 - 保護されたタブは閉じられない。タブを誤って閉じるのを防ぐ。\nタブをロック - ロックされたタブ内のリンクはすべて新しいタブに開く。\nタブを凍結 - 「タブを保護」と「タブをロック」を両方一度に行う。\n「タブを凍結」はデフォルトでは右クリックメニューに表示されない。\nTab Mix Plus のオプションから、表示させることが出来る。\nhttp://smallsteps06.blogspot.com/2006/09/tab-mix-plus.html ","contentSnippet":"タブを保護 - 保護されたタブは閉じられない。タブを誤って閉じるのを防ぐ。タブをロック - ロックされたタブ内のリンクはすべて新しいタブに開く。タブを凍結 - 「タブを保護」と「タブをロック」を両方一度に行う。「タブを凍結」はデフォルトでは右クリックメニューに表示されない。Tab Mix Plus のオプションから、表示させることが出来る。http://smallsteps06.blogspot.com/2006/09/tab-mix-plus.html","link":"https://masutaka.net/2009-02-23-1/","isoDate":"2009-02-23T00:00:00.000Z","dateMiliSeconds":1235347200000,"authorName":"masutaka"},{"title":"favicon on Apache2","content":"非公開の web server をローカルに立てて、保存した html は\nhttp://localhost/~masutaka/.. にアクセスすれば表示できるようにして\nいる。でも、favicon の指定がうまくできない。\nもちろん [2007-01-19-1] の方法を使えば出来るけど、全ての html に指\n定するのは面倒くさいよね。\n**** 試したこと その１ ****\n~masutaka/public_html に favicon.ico を置いた。\n~masutaka/public_html/.htaccess に以下を記載。\nAddType image/x-icon .ico &lt;Files favicon.ico&gt; ErrorDocument 404 favicon.icoへのフルパス &lt;/Files&gt; →ダメ。読み込まれなかった。\n~/public_html/.htaccess に hogehoge と書いたら、Apache のエラーログ\nが表示されていたので、.htaccess は読み込めているようだ。\nちなみに設定ファイルは以下のように読み込まれていた。mime.types には\n&ldquo;image/x-icon ico&rdquo; と書いてあるので、前述の設定は必要ないのかも。\n|/etc/apache2/apache2.conf\n|→ /etc/apache2/mods-enabled/mime.conf\n| → /etc/mime.types\n**** 試したこと その２ ****\n時々、Apache のエラーログに\n|File does not exist: /var/www/favicon.ico\nと出ているので /var/www に置いてみた。\n→ブックマークに favicon が反映された。うまくいかない場合は、ブラウ","contentSnippet":"非公開の web server をローカルに立てて、保存した html はhttp://localhost/~masutaka/.. にアクセスすれば表示できるようにしている。でも、favicon の指定がうまくできない。もちろん [2007-01-19-1] の方法を使えば出来るけど、全ての html に指定するのは面倒くさいよね。**** 試したこと その１ ****~masutaka/public_html に favicon.ico を置いた。~masutaka/public_html/.htaccess に以下を記載。AddType image/x-icon .ico <Files favicon.ico> ErrorDocument 404 favicon.icoへのフルパス </Files> →ダメ。読み込まれなかった。~/public_html/.htaccess に hogehoge と書いたら、Apache のエラーログが表示されていたので、.htaccess は読み込めているようだ。ちなみに設定ファイルは以下のように読み込まれていた。mime.types には“image/x-icon ico” と書いてあるので、前述の設定は必要ないのかも。|/etc/apache2/apache2.conf|→ /etc/apache2/mods-enabled/mime.conf| → /etc/mime.types**** 試したこと その２ ****時々、Apache のエラーログに|File does not exist: /var/www/favicon.icoと出ているので /var/www に置いてみた。→ブックマークに favicon が反映された。うまくいかない場合は、ブラウ","link":"https://masutaka.net/2009-02-22-2/","isoDate":"2009-02-22T01:00:00.000Z","dateMiliSeconds":1235264400000,"authorName":"masutaka"},{"title":"寿司の正しい食べ方","content":"日本人なら、知っておくべきかも。\n 寿司の正しい食べ方 参考情報: アカウントを持ってなくてもニコニコ動画を視聴できる方法 ","contentSnippet":"日本人なら、知っておくべきかも。 寿司の正しい食べ方 参考情報: アカウントを持ってなくてもニコニコ動画を視聴できる方法","link":"https://masutaka.net/2009-02-22-1/","isoDate":"2009-02-22T00:00:00.000Z","dateMiliSeconds":1235260800000,"authorName":"masutaka"},{"title":"GNU diff の地味だけど便利な機能","content":"http://0xcc.net/blog/archives/000208.html からのコピペ。\n&ndash;side-by-side は2段組で結果を表示するオプションです。変更されてい\nない行を含めて2つのファイルの内容全体と変更点が表示されるのがポイン\nトです。変更された行の前後だけでなくファイル全体をまとめて読みたい\nときに使えます。デフォルトの表示の横幅は130文です。必要に応じて\n&ndash;width オプションで変更できます。\n&ndash;strip-trailing-cr は行末の CR を無視する機能です。改行コードが\nCRLF と LF で食い違っているけど、中身はほぼ同じ、というファイルを比\n較するときに使えます。","contentSnippet":"http://0xcc.net/blog/archives/000208.html からのコピペ。–side-by-side は2段組で結果を表示するオプションです。変更されていない行を含めて2つのファイルの内容全体と変更点が表示されるのがポイントです。変更された行の前後だけでなくファイル全体をまとめて読みたいときに使えます。デフォルトの表示の横幅は130文です。必要に応じて–width オプションで変更できます。–strip-trailing-cr は行末の CR を無視する機能です。改行コードがCRLF と LF で食い違っているけど、中身はほぼ同じ、というファイルを比較するときに使えます。","link":"https://masutaka.net/2009-02-21-3/","isoDate":"2009-02-21T02:00:00.000Z","dateMiliSeconds":1235181600000,"authorName":"masutaka"},{"title":"Emacs23 のフォント","content":"tdiary のテーマをいじっていたら、darkwhite というテーマを見つけた。\nこれ自体はなんてことないテーマなのだが、「シンプルで目にやさしいテー\nマのつもりです」とのこと。試しに Emacs の背景色にしてみたら、フォン\nトの線が細すぎてかなり見えづらい。テカテカ液晶め。。。→ [2008-10-05-2] しかし、今まで使っていた「東雲ゴシック」から Debian Lenny のデフォ\nルトフォント「VL ゴシック」に変更したら、かなり見やすくなった。テカ\nテカ液晶のせいで、今まで Emacs の背景を Black にしていたんだけど、\nやっと変えられたよ。(^^)v\n東雲ゴシック\nVL ゴシック\nEmacs の設定(変更前)\n(setq default-frame-alist  &#39;((background-color . &#34;black&#34;)  (foreground-color . &#34;gray80&#34;)  (font . &#34;-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*&#34;)  以下略 Emacs の設定(変更後)\n(setq default-frame-alist  &#39;((background-color . &#34;#E2DDC3&#34;)  (foreground-color . &#34;black&#34;)  (font . &#34;-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1&#34;)  以下略 ※ default-frame-alist に setq する以外に以下の方法でも設定可能。\n(set-face-background &#39;default &#34;#E2DDC3&#34;) (set-face-foreground &#39;default &#34;black&#34;) ;; for Emacs22 (set-default-font &#34;-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1&#34; nil) ;; for Emacs23 (set-frame-font &#34;-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1&#34; nil) ","contentSnippet":"tdiary のテーマをいじっていたら、darkwhite というテーマを見つけた。これ自体はなんてことないテーマなのだが、「シンプルで目にやさしいテーマのつもりです」とのこと。試しに Emacs の背景色にしてみたら、フォントの線が細すぎてかなり見えづらい。テカテカ液晶め。。。→ [2008-10-05-2] しかし、今まで使っていた「東雲ゴシック」から Debian Lenny のデフォルトフォント「VL ゴシック」に変更したら、かなり見やすくなった。テカテカ液晶のせいで、今まで Emacs の背景を Black にしていたんだけど、やっと変えられたよ。(^^)v東雲ゴシックVL ゴシックEmacs の設定(変更前)(setq default-frame-alist  '((background-color . \"black\")  (foreground-color . \"gray80\")  (font . \"-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*\")  以下略 Emacs の設定(変更後)(setq default-frame-alist  '((background-color . \"#E2DDC3\")  (foreground-color . \"black\")  (font . \"-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1\")  以下略 ※ default-frame-alist に setq する以外に以下の方法でも設定可能。(set-face-background 'default \"#E2DDC3\") (set-face-foreground 'default \"black\") ;; for Emacs22 (set-default-font \"-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1\" nil) ;; for Emacs23 (set-frame-font \"-unknown-VL ゴシック-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1\" nil)","link":"https://masutaka.net/2009-02-21-2/","isoDate":"2009-02-21T01:00:00.000Z","dateMiliSeconds":1235178000000,"authorName":"masutaka"},{"title":"tdiary のテーマを使う","content":"[2007-09-17-4] の改良版。\n他のテーマにも応用が効くようにしてみた。以下は lightning テーマの場合。\n  lightning.css の先頭に以下を追記する。\n|@import &ldquo;clfix.css&rdquo;;\n  lightning.css と同じディレクトリに、下記 clfix.css を置く。\nfor lightning theme   他のテーマもいくつか対応したので、各 clfix.css へのリンクを張って\nおきますね。\nfor clover theme for darkwhite theme for digital_gadgets theme for orange-blue theme for orange-border theme for sleepy_kitten theme for summer_wave theme for treetop theme for winter theme tdiary のテーマギャラリーはこちら 。外観が一覧で確認できるのでオススメ。\n追記(2009-06-13):\ntar で固めて、ここ に置きました。\nソースコードに色付けする prettify.css も import するようにしていま\nす。[2009-06-13-1] をご覧下さい。","contentSnippet":"[2007-09-17-4] の改良版。他のテーマにも応用が効くようにしてみた。以下は lightning テーマの場合。  lightning.css の先頭に以下を追記する。|@import “clfix.css”;  lightning.css と同じディレクトリに、下記 clfix.css を置く。for lightning theme   他のテーマもいくつか対応したので、各 clfix.css へのリンクを張っておきますね。for clover theme for darkwhite theme for digital_gadgets theme for orange-blue theme for orange-border theme for sleepy_kitten theme for summer_wave theme for treetop theme for winter theme tdiary のテーマギャラリーはこちら 。外観が一覧で確認できるのでオススメ。追記(2009-06-13):tar で固めて、ここ に置きました。ソースコードに色付けする prettify.css も import するようにしています。[2009-06-13-1] をご覧下さい。","link":"https://masutaka.net/2009-02-21-1/","isoDate":"2009-02-21T00:00:00.000Z","dateMiliSeconds":1235174400000,"authorName":"masutaka"},{"title":"入力したパスワードを端末に表示させない方法","content":"スクリプト中でこんなプロンプトを出して、パスワードを読み取りたい場合。\n|Password:\nread コマンドを使えば可能だが、入力した文字列が見えてしまう。そこで\n&ldquo;stty -echo&rdquo; を使う。端末への表示を抑制できる。入力が終わったら\n&ldquo;stty echo&rdquo; で元に戻す。\ntrap &#39;stty echo&#39; INT stty -echo printf &#34;Password: &#34; read password echo &#34;&#34; stty echo trap INT trap を使っているのは、スクリプトが途中で終了した場合も\n&ldquo;stty echo&rdquo; させるため。\n最後の trap は sh だとエラーになってしまった。bash だと OK。どんな\n意味なんだろう？","contentSnippet":"スクリプト中でこんなプロンプトを出して、パスワードを読み取りたい場合。|Password:read コマンドを使えば可能だが、入力した文字列が見えてしまう。そこで“stty -echo” を使う。端末への表示を抑制できる。入力が終わったら“stty echo” で元に戻す。trap 'stty echo' INT stty -echo printf \"Password: \" read password echo \"\" stty echo trap INT trap を使っているのは、スクリプトが途中で終了した場合も“stty echo” させるため。最後の trap は sh だとエラーになってしまった。bash だと OK。どんな意味なんだろう？","link":"https://masutaka.net/2009-02-19-1/","isoDate":"2009-02-19T00:00:00.000Z","dateMiliSeconds":1235001600000,"authorName":"masutaka"},{"title":"Mew でメーリングリストに返信する時に宛先を構築し直す。","content":"某掲示板で話題になっていたので、昔作った関数を見直してみた。\n○機能\n 返信先のアドレスに、自分が加入している ML が含まれていると、\nそのアドレス以外のアドレスを全て宛先から除外する。 削除されたアドレスは、メール本文の先頭に以下のように挿入される。\n|!!! Deleted Value !!!\n|To: who@example.com |Cc:\n|Dcc: masutaka@example.com  自分が加入している ML は mew-subscribed-mailing-list に設定すること。  ○ソース\n(defvar mew-subscribed-mailing-list  &#39;(&#34;mew-dist@mew.org&#34;  &#34;mew-win32@mew.org&#34;)  &#34;加入している ML をリストで記述。正規表現指定不可。 nil ならどの ML にも加入していないものとする。&#34;)  (defun mew-draft-restructure-header ()  &#34;返信先のアドレスに、自分が加入している ML が含まれていると、 そのアドレス以外のアドレスを全て宛先から除外する。 自分が加入している ML は mew-subscribed-mailing-list に設定すること。 削除されたアドレスは、メール本文の先頭に挿入される。&#34;  (save-excursion  (let ((deleted-alist))  (setq deleted-alist (mew-draft-restructure-header-internal))  (when deleted-alist  (let (str deleted-list address)  (setq str &#34;### Deleted Value ###\\n&#34;)  (dolist (field (list mew-to: mew-cc: mew-dcc: mew-bcc:))  (setq deleted-list (assoc field deleted-alist))  (when deleted-list  (setq str  (concat str field &#34; &#34;  (mapconcat &#39;format (cdr deleted-list) &#34;, &#34;)  &#34;\\n&#34;))))  (setq str (concat str &#34;\\n&#34;))  (mew-header-goto-body)  (insert str))))))  (defun mew-draft-restructure-header-internal ()  &#34;To:, Cc:, Bcc:, Dcc: から不要なアドレスを削除し、 削除したフィールドの名前と値をリストで返す。 To: が空になった場合は、Cc: のアドレスを To: に置き換える。&#34;  (let (subscribed-ml-exist deleted-alist)  (catch &#39;loop  (dolist (field (list mew-to: mew-cc:))  (dolist (address (mew-header-parse-address-list (list field)))  ;; 加入している ML があった場合は即座にループから抜ける。  (if (mew-member-case-equal  address mew-subscribed-mailing-list)  (throw &#39;loop (setq subscribed-ml-exist t))))))  (when subscribed-ml-exist  ;; To と Cc から mew-subscribed-mailing-list 以外のアドレスを削除し、  ;; Bcc と Dcc は自分のアドレスを削除する。  (setq deleted-alist `(,@(mew-draft-restructure-to-cc)  ,@(mew-draft-restructure-bcc-dcc)))  ;; To が空になっていたら、Cc を To にしてしまおう。  (unless (mew-header-parse-address-list (list mew-to:))  (let ((cc (mew-header-parse-address-list (list mew-cc:))))  (mew-header-delete-lines (list mew-to: mew-cc:))  (mew-header-insert mew-to: (mapconcat &#39;format cc &#34;, &#34;)) )))  deleted-alist))  (defun mew-draft-restructure-to-cc ()  &#34;To: と Cc: から不要なアドレスを削除し、 削除したフィールドの名前と値をリストで返す。&#34;  (let (deleted-alist)  (dolist (field (list mew-to: mew-cc:) deleted-alist)  (let (enable-address-list delete-address-list)  (dolist (addr (mew-header-parse-address-list (list field)))  (if (mew-member-case-equal addr mew-subscribed-mailing-list)  (setq enable-address-list `(,@enable-address-list ,addr))  (setq delete-address-list `(,@delete-address-list ,addr))))  (setq deleted-alist (cons (cons field delete-address-list) deleted-alist))  (if enable-address-list  (mew-header-replace-value  field  (mapconcat &#39;format enable-address-list &#34;, &#34;))  (mew-header-delete-lines (list field)))))))  (defun mew-draft-restructure-bcc-dcc ()  &#34;Bcc: および Dcc: フィールドを削除し、 削除したフィールドの名前と値をリストで返す。&#34;  (let (deleted-alist)  (dolist (field (list mew-dcc: mew-bcc:) deleted-alist)  (let ((deleted-address-list))  (setq deleted-address-list  (mew-header-parse-address-list (list field)))  (when deleted-address-list  (setq deleted-alist (cons (cons field deleted-address-list) deleted-alist))  (mew-header-delete-lines (list field)))))))  (add-hook &#39;mew-draft-mode-newdraft-hook &#39;mew-draft-restructure-header) ","contentSnippet":"某掲示板で話題になっていたので、昔作った関数を見直してみた。○機能 返信先のアドレスに、自分が加入している ML が含まれていると、そのアドレス以外のアドレスを全て宛先から除外する。 削除されたアドレスは、メール本文の先頭に以下のように挿入される。|!!! Deleted Value !!!|To: who@example.com |Cc:|Dcc: masutaka@example.com  自分が加入している ML は mew-subscribed-mailing-list に設定すること。  ○ソース(defvar mew-subscribed-mailing-list  '(\"mew-dist@mew.org\"  \"mew-win32@mew.org\")  \"加入している ML をリストで記述。正規表現指定不可。 nil ならどの ML にも加入していないものとする。\")  (defun mew-draft-restructure-header ()  \"返信先のアドレスに、自分が加入している ML が含まれていると、 そのアドレス以外のアドレスを全て宛先から除外する。 自分が加入している ML は mew-subscribed-mailing-list に設定すること。 削除されたアドレスは、メール本文の先頭に挿入される。\"  (save-excursion  (let ((deleted-alist))  (setq deleted-alist (mew-draft-restructure-header-internal))  (when deleted-alist  (let (str deleted-list address)  (setq str \"### Deleted Value ###\\n\")  (dolist (field (list mew-to: mew-cc: mew-dcc: mew-bcc:))  (setq deleted-list (assoc field deleted-alist))  (when deleted-list  (setq str  (concat str field \" \"  (mapconcat 'format (cdr deleted-list) \", \")  \"\\n\"))))  (setq str (concat str \"\\n\"))  (mew-header-goto-body)  (insert str))))))  (defun mew-draft-restructure-header-internal ()  \"To:, Cc:, Bcc:, Dcc: から不要なアドレスを削除し、 削除したフィールドの名前と値をリストで返す。 To: が空になった場合は、Cc: のアドレスを To: に置き換える。\"  (let (subscribed-ml-exist deleted-alist)  (catch 'loop  (dolist (field (list mew-to: mew-cc:))  (dolist (address (mew-header-parse-address-list (list field)))  ;; 加入している ML があった場合は即座にループから抜ける。  (if (mew-member-case-equal  address mew-subscribed-mailing-list)  (throw 'loop (setq subscribed-ml-exist t))))))  (when subscribed-ml-exist  ;; To と Cc から mew-subscribed-mailing-list 以外のアドレスを削除し、  ;; Bcc と Dcc は自分のアドレスを削除する。  (setq deleted-alist `(,@(mew-draft-restructure-to-cc)  ,@(mew-draft-restructure-bcc-dcc)))  ;; To が空になっていたら、Cc を To にしてしまおう。  (unless (mew-header-parse-address-list (list mew-to:))  (let ((cc (mew-header-parse-address-list (list mew-cc:))))  (mew-header-delete-lines (list mew-to: mew-cc:))  (mew-header-insert mew-to: (mapconcat 'format cc \", \")) )))  deleted-alist))  (defun mew-draft-restructure-to-cc ()  \"To: と Cc: から不要なアドレスを削除し、 削除したフィールドの名前と値をリストで返す。\"  (let (deleted-alist)  (dolist (field (list mew-to: mew-cc:) deleted-alist)  (let (enable-address-list delete-address-list)  (dolist (addr (mew-header-parse-address-list (list field)))  (if (mew-member-case-equal addr mew-subscribed-mailing-list)  (setq enable-address-list `(,@enable-address-list ,addr))  (setq delete-address-list `(,@delete-address-list ,addr))))  (setq deleted-alist (cons (cons field delete-address-list) deleted-alist))  (if enable-address-list  (mew-header-replace-value  field  (mapconcat 'format enable-address-list \", \"))  (mew-header-delete-lines (list field)))))))  (defun mew-draft-restructure-bcc-dcc ()  \"Bcc: および Dcc: フィールドを削除し、 削除したフィールドの名前と値をリストで返す。\"  (let (deleted-alist)  (dolist (field (list mew-dcc: mew-bcc:) deleted-alist)  (let ((deleted-address-list))  (setq deleted-address-list  (mew-header-parse-address-list (list field)))  (when deleted-address-list  (setq deleted-alist (cons (cons field deleted-address-list) deleted-alist))  (mew-header-delete-lines (list field)))))))  (add-hook 'mew-draft-mode-newdraft-hook 'mew-draft-restructure-header)","link":"https://masutaka.net/2009-02-14-1/","isoDate":"2009-02-14T00:00:00.000Z","dateMiliSeconds":1234569600000,"authorName":"masutaka"},{"title":"Tab Mix Plus","content":"Firefox3 が出た当初は使えなかったが、今見たら使えるようになっていた。\nタブバーの多段表示はうれしい。\nFirefox 用アドオン - Tab Mix Plus ","contentSnippet":"Firefox3 が出た当初は使えなかったが、今見たら使えるようになっていた。タブバーの多段表示はうれしい。Firefox 用アドオン - Tab Mix Plus","link":"https://masutaka.net/2009-02-07-3/","isoDate":"2009-02-07T02:00:00.000Z","dateMiliSeconds":1233972000000,"authorName":"masutaka"},{"title":"GNU Emacs 23.0.90","content":"http://lists.gnu.org/archive/html/emacs-devel/2009-02/msg00051.html 23.1 リリースに向けて、pretest 版が出たみたい。今年中にはリリースさ\nれるのかな？\nデフォルトのツールキットが Lucid から GTK+ に変わったことと、アンチ\nエイリアスがサポートされて、フォントが綺麗になったことが大きな変更\n点みたい。\n試しに VL ゴシックを試してみたけど、行間が無駄に広いなあ。また今度\n調べてみよう。","contentSnippet":"http://lists.gnu.org/archive/html/emacs-devel/2009-02/msg00051.html 23.1 リリースに向けて、pretest 版が出たみたい。今年中にはリリースされるのかな？デフォルトのツールキットが Lucid から GTK+ に変わったことと、アンチエイリアスがサポートされて、フォントが綺麗になったことが大きな変更点みたい。試しに VL ゴシックを試してみたけど、行間が無駄に広いなあ。また今度調べてみよう。","link":"https://masutaka.net/2009-02-07-2/","isoDate":"2009-02-07T01:00:00.000Z","dateMiliSeconds":1233968400000,"authorName":"masutaka"},{"title":"本購入","content":"また Amazon で買ってしまった。\n正義で地球は救えない  [2009-01-05-3] の「ほんとうの環境問題」の続編。何となく気になって買っ\nてしまった。\nRubyレシピブック 第2版 268の技  今回はこれが目的。前から実践的な本が欲しかったんだよね。\nこのダジャレで生きのびろ!  ここ で紹介されていた本。私としてはこういうの買うのは珍しいんだけど、\nついでに買ってしまった。","contentSnippet":"また Amazon で買ってしまった。正義で地球は救えない  [2009-01-05-3] の「ほんとうの環境問題」の続編。何となく気になって買ってしまった。Rubyレシピブック 第2版 268の技  今回はこれが目的。前から実践的な本が欲しかったんだよね。このダジャレで生きのびろ!  ここ で紹介されていた本。私としてはこういうの買うのは珍しいんだけど、ついでに買ってしまった。","link":"https://masutaka.net/2009-02-07-1/","isoDate":"2009-02-07T00:00:00.000Z","dateMiliSeconds":1233964800000,"authorName":"masutaka"},{"title":"ruby で自分が定義したルールを使って sort する方法","content":"# ユーザ定義のルールをハッシュで定義 ref = {&#34;Hitoshi&#34;=&gt;0, &#34;Sizuo&#34;=&gt;1, &#34;Yoshi&#34;=&gt;2, &#34;Taka&#34;=&gt;3, &#34;Guo&#34;=&gt;4} # sort したいデータを配列で持つ data = [&#34;Guo&#34;, &#34;Guo&#34;, &#34;Sizuo&#34;, &#34;Taka&#34;, &#34;Taka&#34;, &#34;Yoshi&#34;] # ソート p data.sort{|a, b| ref[a] &lt;=&gt; ref[b] } 結果\n[&#34;Sizuo&#34;, &#34;Yoshi&#34;, &#34;Taka&#34;, &#34;Taka&#34;, &#34;Guo&#34;, &#34;Guo&#34;] ","contentSnippet":"# ユーザ定義のルールをハッシュで定義 ref = {\"Hitoshi\"=>0, \"Sizuo\"=>1, \"Yoshi\"=>2, \"Taka\"=>3, \"Guo\"=>4} # sort したいデータを配列で持つ data = [\"Guo\", \"Guo\", \"Sizuo\", \"Taka\", \"Taka\", \"Yoshi\"] # ソート p data.sort{|a, b| ref[a] <=> ref[b] } 結果[\"Sizuo\", \"Yoshi\", \"Taka\", \"Taka\", \"Guo\", \"Guo\"]","link":"https://masutaka.net/2009-02-03-1/","isoDate":"2009-02-03T00:00:00.000Z","dateMiliSeconds":1233619200000,"authorName":"masutaka"},{"title":"Iceweasel の midi 再生プラグイン","content":"Debian パッケージに mozplugger があるが、うまく動かないらしい。\nffmpeg をコンパイルすれば OK らしい。気が向いたら試してみよう。","contentSnippet":"Debian パッケージに mozplugger があるが、うまく動かないらしい。ffmpeg をコンパイルすれば OK らしい。気が向いたら試してみよう。","link":"https://masutaka.net/2009-02-01-1/","isoDate":"2009-02-01T00:00:00.000Z","dateMiliSeconds":1233446400000,"authorName":"masutaka"},{"title":"2011年に備えてPCの画面にも“アナログ”ロゴを表示する「アナログ」","content":"くだらない。ｗ\nURL: http://www.forest.impress.co.jp/article/2009/01/14/analog.html ","contentSnippet":"くだらない。ｗURL: http://www.forest.impress.co.jp/article/2009/01/14/analog.html","link":"https://masutaka.net/2009-01-23-1/","isoDate":"2009-01-23T00:00:00.000Z","dateMiliSeconds":1232668800000,"authorName":"masutaka"},{"title":"物理行単位のカーソル移動","content":"Emacs23 からは C-n や C-p での移動が物理行単位になっていた。\nline-move-visual に nil を設定すると、以前と同じ論理行単位の移動になる。","contentSnippet":"Emacs23 からは C-n や C-p での移動が物理行単位になっていた。line-move-visual に nil を設定すると、以前と同じ論理行単位の移動になる。","link":"https://masutaka.net/2009-01-20-1/","isoDate":"2009-01-20T00:00:00.000Z","dateMiliSeconds":1232409600000,"authorName":"masutaka"},{"title":"gnubiff で \"File or Folder\" を選択すると固まる件","content":"fam をインストールする必要があったらしい。fam は提案パッケージに\n過ぎないのに…。インストールして解決した。\n|# aptitude install fam","contentSnippet":"fam をインストールする必要があったらしい。fam は提案パッケージに過ぎないのに…。インストールして解決した。|# aptitude install fam","link":"https://masutaka.net/2009-01-17-2/","isoDate":"2009-01-17T01:00:00.000Z","dateMiliSeconds":1232154000000,"authorName":"masutaka"},{"title":"コマンドラインオプションを自作する方法","content":"Emacs ではなんと、コマンドラインオプションを自作できる。すげー。\n例えば以下の設定をすると &ldquo;emacs &ndash;read-only hoge.txt&rdquo; を実行する\nことによって、read-only でファイルを開くことが出来る。\n(defun command-line-find-file-read-only (switch)  (find-file-read-only (pop command-line-args-left)))  (add-to-list &#39;command-switch-alist  &#39;(&#34;--read-only&#34; . command-line-find-file-read-only)) ","contentSnippet":"Emacs ではなんと、コマンドラインオプションを自作できる。すげー。例えば以下の設定をすると “emacs –read-only hoge.txt” を実行することによって、read-only でファイルを開くことが出来る。(defun command-line-find-file-read-only (switch)  (find-file-read-only (pop command-line-args-left)))  (add-to-list 'command-switch-alist  '(\"--read-only\" . command-line-find-file-read-only))","link":"https://masutaka.net/2009-01-17-1/","isoDate":"2009-01-17T00:00:00.000Z","dateMiliSeconds":1232150400000,"authorName":"masutaka"},{"title":"方言","content":"忍者ツールに「ホウゲン」があったので、サイドバーに設置してみました。\nこのページがテンション低いので、「テンション高く」にするとちょうど\n良いかもしれない。","contentSnippet":"忍者ツールに「ホウゲン」があったので、サイドバーに設置してみました。このページがテンション低いので、「テンション高く」にするとちょうど良いかもしれない。","link":"https://masutaka.net/2009-01-10-1/","isoDate":"2009-01-10T00:00:00.000Z","dateMiliSeconds":1231545600000,"authorName":"masutaka"},{"title":"subversion の DB フォーマット変更","content":"リポジトリは [2004-05-05-1] に作ったもので、DB のフォーマットは\nBerkeleyDB。BerkeleyDB は壊れやすく、データをメモリに配置するため\n複数の CPU から書き込むのも NG らしい。そこで、最近のデフォルト\nfsfs 形式に変更した。\n|# cd /usr/local\n|# svnadmin dump SVNROOT &gt; SVNROOT.dump\n|# mv SVNROOT SVNROOT.bak\n|# svnadmin create SVNROOT\n|# svnadmin load SVNROOT &lt; SVNROOT.dump\n|# chown -R www-data:www-data SVNROOT","contentSnippet":"リポジトリは [2004-05-05-1] に作ったもので、DB のフォーマットはBerkeleyDB。BerkeleyDB は壊れやすく、データをメモリに配置するため複数の CPU から書き込むのも NG らしい。そこで、最近のデフォルトfsfs 形式に変更した。|# cd /usr/local|# svnadmin dump SVNROOT > SVNROOT.dump|# mv SVNROOT SVNROOT.bak|# svnadmin create SVNROOT|# svnadmin load SVNROOT < SVNROOT.dump|# chown -R www-data:www-data SVNROOT","link":"https://masutaka.net/2009-01-08-1/","isoDate":"2009-01-08T00:00:00.000Z","dateMiliSeconds":1231372800000,"authorName":"masutaka"},{"title":"『ほんとうの環境問題』を読んだ","content":"正月に実家に帰ったときにヒマだったので読んだ本 その２\n自分の認識を再確認できた本だった。雑談風になっているので読みやすい\nのだけれど、その分内容が軽くなってしまっている。印象に残った点を列挙。\n 環境問題とは政治問題。京都議定書を守っても二酸化炭素は減らない。 アメリカがバイオ燃料に力を注ぐのは、余剰穀物で利益を得るため。 環境問題には流行りがある。以前は「環境ホルモン」や「フロンガス」。\n前者は最近話題にも上がらない。また、オゾン層の破壊はフロンが関わっ\nているのか怪しくなってきたそう。 金にならないリサイクルは、エコではない。  結局、個人で可能ことで且つ効果のありそうなことをやるのが良さそう。\n無駄な電気やガス、水を使わない。アルミ缶、新聞雑誌等の廃品回収。\nあと、テレビで良く &ldquo;温暖化によって&rdquo; ツバルが消滅するだとか、海岸が\n何十メートルも侵食されただとかやっているけど、検証なしに放送するの\nは危険だと思う。","contentSnippet":"正月に実家に帰ったときにヒマだったので読んだ本 その２自分の認識を再確認できた本だった。雑談風になっているので読みやすいのだけれど、その分内容が軽くなってしまっている。印象に残った点を列挙。 環境問題とは政治問題。京都議定書を守っても二酸化炭素は減らない。 アメリカがバイオ燃料に力を注ぐのは、余剰穀物で利益を得るため。 環境問題には流行りがある。以前は「環境ホルモン」や「フロンガス」。前者は最近話題にも上がらない。また、オゾン層の破壊はフロンが関わっているのか怪しくなってきたそう。 金にならないリサイクルは、エコではない。  結局、個人で可能ことで且つ効果のありそうなことをやるのが良さそう。無駄な電気やガス、水を使わない。アルミ缶、新聞雑誌等の廃品回収。あと、テレビで良く “温暖化によって” ツバルが消滅するだとか、海岸が何十メートルも侵食されただとかやっているけど、検証なしに放送するのは危険だと思う。","link":"https://masutaka.net/2009-01-05-3/","isoDate":"2009-01-05T02:00:00.000Z","dateMiliSeconds":1231120800000,"authorName":"masutaka"},{"title":"『三国志 英雄たちの最期の瞬間!』を読んだ","content":"正月に実家に帰ったときにヒマだったので読んだ本 その１\n浅い。どんなに壮絶な最期なのかとワクワクして読んだが、知っているこ\nとばかりだった。登場人物全てで、諏訪原寛幸という人が描いたイラスト\nが付いているので、そういうのが好きな人は良いのかもしれない。諏訪原\n寛幸は三國無双のイラストを描いているらしい。","contentSnippet":"正月に実家に帰ったときにヒマだったので読んだ本 その１浅い。どんなに壮絶な最期なのかとワクワクして読んだが、知っていることばかりだった。登場人物全てで、諏訪原寛幸という人が描いたイラストが付いているので、そういうのが好きな人は良いのかもしれない。諏訪原寛幸は三國無双のイラストを描いているらしい。","link":"https://masutaka.net/2009-01-05-2/","isoDate":"2009-01-05T01:00:00.000Z","dateMiliSeconds":1231117200000,"authorName":"masutaka"},{"title":"バーモントカレー","content":"CM を見ると、いつも「New」になっている気がする。いっそのこと、\nv2.01 とかリビジョンを振ってもらうと視聴者は分かりやすいと思うのだが..。","contentSnippet":"CM を見ると、いつも「New」になっている気がする。いっそのこと、v2.01 とかリビジョンを振ってもらうと視聴者は分かりやすいと思うのだが..。","link":"https://masutaka.net/2009-01-05-1/","isoDate":"2009-01-05T00:00:00.000Z","dateMiliSeconds":1231113600000,"authorName":"masutaka"},{"title":"ruby-mode","content":"Emacs23 では ruby-mode が標準で入っていた。","contentSnippet":"Emacs23 では ruby-mode が標準で入っていた。","link":"https://masutaka.net/2008-12-16-1/","isoDate":"2008-12-16T00:00:00.000Z","dateMiliSeconds":1229385600000,"authorName":"masutaka"},{"title":"Amazon で買った商品をコンビニで受け取り","content":"今日初めて Amazon のコンビニ受け取りを利用したけど、これは(・∀・)イイ!!\n会社帰りにスマートにピックアップできる。\nAmazon の場合、ローソンだけで受け取ることが出来て、Loppi に「お問い\n合わせ番号」と「認証番号」を入力し、出てくる紙を店の人に渡して商品\nを受け取る。身分証明書も必要と書いてあったけど、今回は求められなかっ\nた。関係ないけど、Loppi のスーファミの書き換え(ニンテンドウパワーと\nいうらしい) は 2007 年 2 月 28 日で終わったんだね。\nで、今回買ったのは以下の 3 点。偏ってるなあ。ｗ\n   ","contentSnippet":"今日初めて Amazon のコンビニ受け取りを利用したけど、これは(・∀・)イイ!!会社帰りにスマートにピックアップできる。Amazon の場合、ローソンだけで受け取ることが出来て、Loppi に「お問い合わせ番号」と「認証番号」を入力し、出てくる紙を店の人に渡して商品を受け取る。身分証明書も必要と書いてあったけど、今回は求められなかった。関係ないけど、Loppi のスーファミの書き換え(ニンテンドウパワーというらしい) は 2007 年 2 月 28 日で終わったんだね。で、今回買ったのは以下の 3 点。偏ってるなあ。ｗ","link":"https://masutaka.net/2008-12-12-2/","isoDate":"2008-12-12T01:00:00.000Z","dateMiliSeconds":1229043600000,"authorName":"masutaka"},{"title":"Cannot open termcap database file","content":"|emacs: Cannot open termcap database file\nemacs-22.3 を -nw で起動したらこんなメッセージが出て、\n起動出来なかった。CVS 先端の emacs も同じ。\nどうやら、libncurses5-dev が必要らしい。\n|# aptitude install libncurses5-dev\nを実行したあと、リコンパイルしたら起動できるようになった。\nURL: http://www.randynetwork.com/blog/265 ","contentSnippet":"|emacs: Cannot open termcap database fileemacs-22.3 を -nw で起動したらこんなメッセージが出て、起動出来なかった。CVS 先端の emacs も同じ。どうやら、libncurses5-dev が必要らしい。|# aptitude install libncurses5-devを実行したあと、リコンパイルしたら起動できるようになった。URL: http://www.randynetwork.com/blog/265","link":"https://masutaka.net/2008-12-12-1/","isoDate":"2008-12-12T00:00:00.000Z","dateMiliSeconds":1229040000000,"authorName":"masutaka"},{"title":"このブログのスパム対策","content":"[2008-12-04-1] のその後。\nkuttukibbs.cgi をいじって、なんちゃってスパム対策をしました。\nスパムと判定したら、書き込みを無視するようにしました。\n追記(2009-03-28):\nオリジナル(kuttukibbs-1.0rc3.tar.gz)の kuttukibbs.conf と\nkuttukibbs.cgi へのパッチを貼り付けておきます。\n--- kuttukibbs.conf.org\t2004-04-08 22:27:02.000000000 +0900 +++ kuttukibbs.conf\t2009-03-28 22:41:32.000000000 +0900 @@ -33,6 +33,10 @@ $charset = &#34;EUC-JP&#34;; # -------------------------------------------------------------------- +# メッセージの中にこの数字より多く &#34;http:&#34; が含まれていたらスパム +$spam_threshold = 3; + +# -------------------------------------------------------------------- # デフォルトページ (全コメント見る・コメント投稿) のテンプレート $page_template_default = &lt;&lt; &#39;PAGE&#39; &lt;html&gt; --- kuttukibbs.cgi.org\t2004-12-15 23:09:58.000000000 +0900 +++ kuttukibbs.cgi\t2009-04-28 23:51:14.000000000 +0900 @@ -17,6 +17,7 @@ my $page_template_latest; my $page_template_edit; my $charset = &#34;EUC-JP&#34;;\t# 文字コード +my $spam_threshold = 3;\t# メッセージの中にこの数字より多く &#34;http:&#34; が含まれていたらスパム ### グローバル変数 my $latest_id = -1;\t# 最新のコメントの ID @@ -48,6 +49,9 @@ my $mail_or_url = $q-&gt;param(&#39;mail&#39;); my $body = $q-&gt;param(&#39;body&#39;); +# スパム判定 +my $spam = &amp;guess_spam; + # header if ($mode eq &#39;write&#39;) { escape_string(\\$name); @@ -132,9 +136,14 @@ $com_hash{$latest_id}{m} = $body; $com_hash{$latest_id}{d} = $what_time_is_it_now; -\twrite_to_logfile();\t# ログファイルへの書き込み -\twrite_to_jsfile($fn_pref.","contentSnippet":"[2008-12-04-1] のその後。kuttukibbs.cgi をいじって、なんちゃってスパム対策をしました。スパムと判定したら、書き込みを無視するようにしました。追記(2009-03-28):オリジナル(kuttukibbs-1.0rc3.tar.gz)の kuttukibbs.conf とkuttukibbs.cgi へのパッチを貼り付けておきます。--- kuttukibbs.conf.org\t2004-04-08 22:27:02.000000000 +0900 +++ kuttukibbs.conf\t2009-03-28 22:41:32.000000000 +0900 @@ -33,6 +33,10 @@ $charset = \"EUC-JP\"; # -------------------------------------------------------------------- +# メッセージの中にこの数字より多く \"http:\" が含まれていたらスパム +$spam_threshold = 3; + +# -------------------------------------------------------------------- # デフォルトページ (全コメント見る・コメント投稿) のテンプレート $page_template_default = << 'PAGE' <html> --- kuttukibbs.cgi.org\t2004-12-15 23:09:58.000000000 +0900 +++ kuttukibbs.cgi\t2009-04-28 23:51:14.000000000 +0900 @@ -17,6 +17,7 @@ my $page_template_latest; my $page_template_edit; my $charset = \"EUC-JP\";\t# 文字コード +my $spam_threshold = 3;\t# メッセージの中にこの数字より多く \"http:\" が含まれていたらスパム ### グローバル変数 my $latest_id = -1;\t# 最新のコメントの ID @@ -48,6 +49,9 @@ my $mail_or_url = $q->param('mail'); my $body = $q->param('body'); +# スパム判定 +my $spam = &guess_spam; + # header if ($mode eq 'write') { escape_string(\\$name); @@ -132,9 +136,14 @@ $com_hash{$latest_id}{m} = $body; $com_hash{$latest_id}{d} = $what_time_is_it_now; -\twrite_to_logfile();\t# ログファイルへの書き込み -\twrite_to_jsfile($fn_pref.","link":"https://masutaka.net/2008-12-11-1/","isoDate":"2008-12-11T00:00:00.000Z","dateMiliSeconds":1228953600000,"authorName":"masutaka"},{"title":"Wii + Wii Fit","content":"買ってしまった。。。まさに衝動買い。\n  PS3 に比べてかなり小さい。体積にして 1/3 くらいじゃないかな。起動も\n速い。当然のように無線でネットに繋げることができ、天気やニュースを\n見ることが出来る。Wii のアップデートも可。\nそれはまあいいとして、今回買ったのは Wii Fit のため。某巨大掲示板情\n報によると、私のように脂肪を落としたい人は、まず筋力トレーニングを\nやって、その後に有酸素運動をやるといいらしい。バランスゲームとヨガ\nは平行してやれば良いのかな。毎日の BMI 値と体重が記録されるし、ゲー\nム的な要素も多いから続けられる&hellip;はず。\n少なくとも、８月から細々とやっている腕立てよりは面白そう。^^;\n追記(2009-04-19):\nやらなくなってしまったのと、物を捨てたいイベントが降ってきたので、\n￥13,000 でダワさんに売りました。","contentSnippet":"買ってしまった。。。まさに衝動買い。  PS3 に比べてかなり小さい。体積にして 1/3 くらいじゃないかな。起動も速い。当然のように無線でネットに繋げることができ、天気やニュースを見ることが出来る。Wii のアップデートも可。それはまあいいとして、今回買ったのは Wii Fit のため。某巨大掲示板情報によると、私のように脂肪を落としたい人は、まず筋力トレーニングをやって、その後に有酸素運動をやるといいらしい。バランスゲームとヨガは平行してやれば良いのかな。毎日の BMI 値と体重が記録されるし、ゲーム的な要素も多いから続けられる…はず。少なくとも、８月から細々とやっている腕立てよりは面白そう。^^;追記(2009-04-19):やらなくなってしまったのと、物を捨てたいイベントが降ってきたので、￥13,000 でダワさんに売りました。","link":"https://masutaka.net/2008-12-07-2/","isoDate":"2008-12-07T01:00:00.000Z","dateMiliSeconds":1228611600000,"authorName":"masutaka"},{"title":"2時間ドラマ","content":"いやあ、懐かしい。土曜ワイド劇場はコタツで寝ながら見ていたので、\n頭が痛かったのが懐かしいです。しかし、濃いなあ。ｗ\n火曜サスペンス劇場 OP・ED\n 土曜ワイド劇場 OP\n ","contentSnippet":"いやあ、懐かしい。土曜ワイド劇場はコタツで寝ながら見ていたので、頭が痛かったのが懐かしいです。しかし、濃いなあ。ｗ火曜サスペンス劇場 OP・ED 土曜ワイド劇場 OP","link":"https://masutaka.net/2008-12-07-1/","isoDate":"2008-12-07T00:00:00.000Z","dateMiliSeconds":1228608000000,"authorName":"masutaka"},{"title":"このブログへのスパム","content":"[2008-09-29-1] のその後。\nメールのスパムは減ったけど、このブログのコメントへのスパムがついに\nやってきました。。。ここ数日手動で消しています。めんどくさい。。。\nパスワードかけなくちゃいけないなあ。どうやるんだろう。^^;","contentSnippet":"[2008-09-29-1] のその後。メールのスパムは減ったけど、このブログのコメントへのスパムがついにやってきました。。。ここ数日手動で消しています。めんどくさい。。。パスワードかけなくちゃいけないなあ。どうやるんだろう。^^;","link":"https://masutaka.net/2008-12-04-1/","isoDate":"2008-12-04T00:00:00.000Z","dateMiliSeconds":1228348800000,"authorName":"masutaka"},{"title":"アレルギーの原因","content":"NHK スペシャル - 病の起源 第６章 アレルギー 〜２億年目の免疫異常 今日の NHK スペシャルで、興味深い特集をやっていた。日本では、昭和\n30 年を境にアレルギーが急増していたそうだが、原因(の一つ)はなんと\n「家畜と触れ合わなくなったから」だそうだ。\n※ 以下、素人が記憶をたよりにまとめました。正確な情報は他を参照してね。\nアレルギーの割合の少ない農家と都市部の家のホコリを調べたところ、農\n家の方がエンドトキシンという成分が多く含まれていたとのこと。これは\n大腸菌の細胞膜を構成する成分の一つで、菌が死ぬと放出されるらしい。\n家畜の糞に多く含まれており、毒素でもある。\n一方、ヒトの免疫は「細胞性免疫」と「IgE」の２種類あるらしい。前者は\n生物が昔から獲得していた機構で、後者はヒトが進化の過程で獲得したも\nのらしい。この２つのバランスが重要とのこと。\n「細胞性免疫」はエンドトキシンにさらされると上がり、「IgE」は吸血ダ\nニ等との接触によって上がるとのこと。1 歳までにこのバランスは決まっ\nてしまうそう。最近の家は清潔になったため「IgE」＞＞「細胞性免疫」と\nいう免疫のバランスになりやすい。これはアレルギーになりやすい状態で\nある。\n清潔さを追求した現代社会の弊害と言えるが、清潔になったことで乳幼児\nの死亡率は下がっているため、一概に悪いわけでもない。ここ数十年で急\nに清潔になってしまったから、ヒトの免疫機構が追いつけなかったという\n見方も出来る。\n研究が進めば、乳幼児にワクチンを打つことでアレルギーの発症を抑えら\nれるようになるのかな。今後に期待！！","contentSnippet":"NHK スペシャル - 病の起源 第６章 アレルギー 〜２億年目の免疫異常 今日の NHK スペシャルで、興味深い特集をやっていた。日本では、昭和30 年を境にアレルギーが急増していたそうだが、原因(の一つ)はなんと「家畜と触れ合わなくなったから」だそうだ。※ 以下、素人が記憶をたよりにまとめました。正確な情報は他を参照してね。アレルギーの割合の少ない農家と都市部の家のホコリを調べたところ、農家の方がエンドトキシンという成分が多く含まれていたとのこと。これは大腸菌の細胞膜を構成する成分の一つで、菌が死ぬと放出されるらしい。家畜の糞に多く含まれており、毒素でもある。一方、ヒトの免疫は「細胞性免疫」と「IgE」の２種類あるらしい。前者は生物が昔から獲得していた機構で、後者はヒトが進化の過程で獲得したものらしい。この２つのバランスが重要とのこと。「細胞性免疫」はエンドトキシンにさらされると上がり、「IgE」は吸血ダニ等との接触によって上がるとのこと。1 歳までにこのバランスは決まってしまうそう。最近の家は清潔になったため「IgE」＞＞「細胞性免疫」という免疫のバランスになりやすい。これはアレルギーになりやすい状態である。清潔さを追求した現代社会の弊害と言えるが、清潔になったことで乳幼児の死亡率は下がっているため、一概に悪いわけでもない。ここ数十年で急に清潔になってしまったから、ヒトの免疫機構が追いつけなかったという見方も出来る。研究が進めば、乳幼児にワクチンを打つことでアレルギーの発症を抑えられるようになるのかな。今後に期待！！","link":"https://masutaka.net/2008-11-23-1/","isoDate":"2008-11-23T00:00:00.000Z","dateMiliSeconds":1227398400000,"authorName":"masutaka"},{"title":"今日の迷惑メール","content":"[2008-11-17-2] のその後。\nSpam フォルダを覗いてみたら、今日は 41 通しか来ていなかった。\n確実に減っていると思う。","contentSnippet":"[2008-11-17-2] のその後。Spam フォルダを覗いてみたら、今日は 41 通しか来ていなかった。確実に減っていると思う。","link":"https://masutaka.net/2008-11-21-1/","isoDate":"2008-11-21T00:00:00.000Z","dateMiliSeconds":1227225600000,"authorName":"masutaka"},{"title":"YouTubeで超高画質ムービー","content":"動画によっては、URL の末尾に「&amp;fmt=22」を付けると HD 画質で再生させ\nられるらしい。\nURL: http://blog.livedoor.jp/dqnplus/archives/1192512.html ","contentSnippet":"動画によっては、URL の末尾に「&fmt=22」を付けると HD 画質で再生させられるらしい。URL: http://blog.livedoor.jp/dqnplus/archives/1192512.html","link":"https://masutaka.net/2008-11-20-1/","isoDate":"2008-11-20T00:00:00.000Z","dateMiliSeconds":1227139200000,"authorName":"masutaka"},{"title":"デビルメイクライ4","content":"[2008-11-16-1] のその後。\n午前中に途中までやって、帰って続きをやってクリアできました。＼(^o^)／\n体力がある状態で最終戦に望んだんだけど、途中余裕ぶっこいていたら\n後半かなりヤバくなりました。残り体力 5mm くらいでようやくクリア。ｗ\nクドいですが、下のはうまい人の動画です。\n ","contentSnippet":"[2008-11-16-1] のその後。午前中に途中までやって、帰って続きをやってクリアできました。＼(^o^)／体力がある状態で最終戦に望んだんだけど、途中余裕ぶっこいていたら後半かなりヤバくなりました。残り体力 5mm くらいでようやくクリア。ｗクドいですが、下のはうまい人の動画です。","link":"https://masutaka.net/2008-11-18-1/","isoDate":"2008-11-18T00:00:00.000Z","dateMiliSeconds":1226966400000,"authorName":"masutaka"},{"title":"標準の補完候補を便利に","content":"Emacs補完候補の選択を便利に - あどけない話 Emacs が提供する標準の Completion List を便利にする方法。以下の方法\nを想定しているそうな。今までは 2 の後に補完候補をミニバッファにコピ\nペしていたので、これは結構良いかも。(・∀・)\n TAB や M-TAB で補完の候補を表示 C-xo で補完の候補のバッファへ移動 C-f/C-b/C-n/C-p あるいは C-s/C-r で候補を選択 RET で候補を選ぶと、元々の状態に戻り、選んだ候補が挿入される  以下が該当のコード。~/.emacs に張り付けるだけ。n/p にも割り当ててみた。\n(define-key completion-list-mode-map (kbd &#34;n&#34;) &#39;next-completion) (define-key completion-list-mode-map (kbd &#34;C-n&#34;) &#39;next-completion) (define-key completion-list-mode-map (kbd &#34;C-f&#34;) &#39;next-completion) (define-key completion-list-mode-map (kbd &#34;p&#34;) &#39;previous-completion) (define-key completion-list-mode-map (kbd &#34;C-p&#34;) &#39;previous-completion) (define-key completion-list-mode-map (kbd &#34;C-b&#34;) &#39;previous-completion) (define-key completion-list-mode-map (kbd &#34;C-m&#34;) &#39;my-choose-completion)  (defun my-choose-completion ()  &#34;Choose the completion that point is in or next to.","contentSnippet":"Emacs補完候補の選択を便利に - あどけない話 Emacs が提供する標準の Completion List を便利にする方法。以下の方法を想定しているそうな。今までは 2 の後に補完候補をミニバッファにコピペしていたので、これは結構良いかも。(・∀・) TAB や M-TAB で補完の候補を表示 C-xo で補完の候補のバッファへ移動 C-f/C-b/C-n/C-p あるいは C-s/C-r で候補を選択 RET で候補を選ぶと、元々の状態に戻り、選んだ候補が挿入される  以下が該当のコード。~/.emacs に張り付けるだけ。n/p にも割り当ててみた。(define-key completion-list-mode-map (kbd \"n\") 'next-completion) (define-key completion-list-mode-map (kbd \"C-n\") 'next-completion) (define-key completion-list-mode-map (kbd \"C-f\") 'next-completion) (define-key completion-list-mode-map (kbd \"p\") 'previous-completion) (define-key completion-list-mode-map (kbd \"C-p\") 'previous-completion) (define-key completion-list-mode-map (kbd \"C-b\") 'previous-completion) (define-key completion-list-mode-map (kbd \"C-m\") 'my-choose-completion)  (defun my-choose-completion ()  \"Choose the completion that point is in or next to.","link":"https://masutaka.net/2008-11-17-3/","isoDate":"2008-11-17T02:00:00.000Z","dateMiliSeconds":1226887200000,"authorName":"masutaka"},{"title":"世界中の迷惑メールのうち50〜70%が、一社の関与によって行われているらしい","content":"|PCオンラインの記事によると、米国サンノゼのISPが、ある迷惑メール送信\n|事業者のインターネット接続を遮断したところ、以降の迷惑メールの流通\n|量が75％も減ったそうである。\n確かに、10/1 頃は 100 通は来てた迷惑メールが、最近は 60 通前後に減っ\nている。ホントだとしたら、なんという効果的な対応。ｗ\nURL: http://slashdot.jp/it/article.pl?sid=08/11/17/0353221 ","contentSnippet":"|PCオンラインの記事によると、米国サンノゼのISPが、ある迷惑メール送信|事業者のインターネット接続を遮断したところ、以降の迷惑メールの流通|量が75％も減ったそうである。確かに、10/1 頃は 100 通は来てた迷惑メールが、最近は 60 通前後に減っている。ホントだとしたら、なんという効果的な対応。ｗURL: http://slashdot.jp/it/article.pl?sid=08/11/17/0353221","link":"https://masutaka.net/2008-11-17-2/","isoDate":"2008-11-17T01:00:00.000Z","dateMiliSeconds":1226883600000,"authorName":"masutaka"},{"title":"ワインメモ「無添加赤わいん」","content":"いつもビールばかり飲んでいるので、先週末は近所のスーパーでワインを\n買ってきた。陰ながら日本の農業を応援する私としては、もちろん国産ワ\nインをチョイス。\n  &hellip;。甘い！！\nこんな甘いワインに出会ったのは初めてだよ。。゜(゜´∀｀゜)゜。。\nえびチリに合うとか書いてあったけどホント？個人的には単体でも無理だった。","contentSnippet":"いつもビールばかり飲んでいるので、先週末は近所のスーパーでワインを買ってきた。陰ながら日本の農業を応援する私としては、もちろん国産ワインをチョイス。  …。甘い！！こんな甘いワインに出会ったのは初めてだよ。。゜(゜´∀｀゜)゜。。えびチリに合うとか書いてあったけどホント？個人的には単体でも無理だった。","link":"https://masutaka.net/2008-11-17-1/","isoDate":"2008-11-17T00:00:00.000Z","dateMiliSeconds":1226880000000,"authorName":"masutaka"},{"title":"外国人から英語が上手に思われる7つの言い回し","content":"1．probably…おそらく\n2．that&rsquo;s why…なぜなら\n3．Yap…YESかNOしかないと思われないために中間的な意見を用いるときの常套句\n4．you mean…つまり\n5．said so…誰かが何かを言った\n6．you know…特に意味はないが、日本語の「マジで？」に近いという\n7．holy Kansas!…隠語の「Holy Jesus」にあやかったもので、あえて違う語を使って物知りと感じさせる効果がある\n英語はまったくダメだが、いつか役に立つことがあるかもしれない。\nURL: http://news.ameba.jp/weblog/2008/11/20539.html ","contentSnippet":"1．probably…おそらく2．that’s why…なぜなら3．Yap…YESかNOしかないと思われないために中間的な意見を用いるときの常套句4．you mean…つまり5．said so…誰かが何かを言った6．you know…特に意味はないが、日本語の「マジで？」に近いという7．holy Kansas!…隠語の「Holy Jesus」にあやかったもので、あえて違う語を使って物知りと感じさせる効果がある英語はまったくダメだが、いつか役に立つことがあるかもしれない。URL: http://news.ameba.jp/weblog/2008/11/20539.html","link":"https://masutaka.net/2008-11-16-2/","isoDate":"2008-11-16T01:00:00.000Z","dateMiliSeconds":1226797200000,"authorName":"masutaka"},{"title":"デビルメイクライ4","content":"最近、パソコンは全然いじってなくて、またこのゲームやってます。\nうまい人にはとても敵わない下手糞ですが、意外に世界は狭いのか、今の\nところ世界ランキング 3905 位です。昨日自己記録を更新できて、BP 99\n階まで行けました。＼(^o^)／ ←いろんな意味で&hellip;。\nあっ、下のはうまい人の動画です。カメラの切り替え、DT の発動タイミン\nグ、MAX アクトの確率がかなりうまい(または高い)と思います。\n ","contentSnippet":"最近、パソコンは全然いじってなくて、またこのゲームやってます。うまい人にはとても敵わない下手糞ですが、意外に世界は狭いのか、今のところ世界ランキング 3905 位です。昨日自己記録を更新できて、BP 99階まで行けました。＼(^o^)／ ←いろんな意味で…。あっ、下のはうまい人の動画です。カメラの切り替え、DT の発動タイミング、MAX アクトの確率がかなりうまい(または高い)と思います。","link":"https://masutaka.net/2008-11-16-1/","isoDate":"2008-11-16T00:00:00.000Z","dateMiliSeconds":1226793600000,"authorName":"masutaka"},{"title":"小数の累乗 ","content":"仕事中に上司から聞かれたんだけど、すっかり忘れていたので (._.) φ メモメモ\n10 =&gt; 1000\n10 =&gt; 1/1000\n10 =&gt; 10 =&gt; 2√10 =&gt; √10\n10 =&gt; 3√10\n冪乗 - 通信用語の基礎知識 ","contentSnippet":"仕事中に上司から聞かれたんだけど、すっかり忘れていたので (._.) φ メモメモ10 => 100010 => 1/100010 => 10 => 2√10 => √1010 => 3√10冪乗 - 通信用語の基礎知識","link":"https://masutaka.net/2008-10-28-2/","isoDate":"2008-10-28T01:00:00.000Z","dateMiliSeconds":1225155600000,"authorName":"masutaka"},{"title":"踊るテキスト","content":"M-x zone すると、カレントバッファのテキストが好き勝手に踊り始める。\n本当にテキストを書き換えているのではなく、何かキーを押すと元に戻る\nのでご心配なく。M-x zone-when-idle で、アイドル時間を指定できるよ。\nM-x zone-leave-me-alone すると、以上を OFF できる。\nコマンド名を忘れて探し回ったあげく、やっと zone だと分かった。ｗ\n似たようなコマンドに animate もある。→ [2003-02-08-1] ","contentSnippet":"M-x zone すると、カレントバッファのテキストが好き勝手に踊り始める。本当にテキストを書き換えているのではなく、何かキーを押すと元に戻るのでご心配なく。M-x zone-when-idle で、アイドル時間を指定できるよ。M-x zone-leave-me-alone すると、以上を OFF できる。コマンド名を忘れて探し回ったあげく、やっと zone だと分かった。ｗ似たようなコマンドに animate もある。→ [2003-02-08-1]","link":"https://masutaka.net/2008-10-28-1/","isoDate":"2008-10-28T00:00:00.000Z","dateMiliSeconds":1225152000000,"authorName":"masutaka"},{"title":"マスタカの elisp 置き場","content":"2022-05-04 (Wed):\nchalow から Hugo に移行するにあたり、今まで https://masutaka.net/elisp.html に置いていた「マスタカの elisp 置き場」の行き場所がなくなってしまった。\nもう更新しない情報をこのような一等地の URL に置くのは違和感がある。かと言って、捨てるのももったいない。💦\nそこで、この記事をもって供養場とした。\n cdutil ログインシェルの alias を Emacs でも使ってしまおうというツールです。\n例えば ~/.zshenv で alias hoge=&quot;cd /hogehoge&quot; と設定してあると、設定したキー hoge [Enter] の操作をすると、Dired でそのディレクトリを開けます。\n補完候補を別途追加することもできます。補完候補にはファイルも指定できます。shell-mode でも使えます。\n最新版 cdutil.el.gz 変更履歴  200?-??-?? v1.2?  忘れました。    TODO cdutil.el 中の説明の意味が分からないので、修正します。\nrvsej mule-version や Meadow-version() を日本語のバージョン名にするだけのツールです。\n(require 'rvsej) するだけで使えます。\n最新版 rvsej.el.gz 変更履歴  2008-10-13 v1.3  同じく、Meadow で動かなくなっていたので直しました&hellip;   2008-10-05 v1.2  関数の中で関数を定義する手法 を使ったら、まるで動かなくなっていたので直しました&hellip;   2008-10-05 v1.","contentSnippet":"2022-05-04 (Wed):chalow から Hugo に移行するにあたり、今まで https://masutaka.net/elisp.html に置いていた「マスタカの elisp 置き場」の行き場所がなくなってしまった。もう更新しない情報をこのような一等地の URL に置くのは違和感がある。かと言って、捨てるのももったいない。💦そこで、この記事をもって供養場とした。 cdutil ログインシェルの alias を Emacs でも使ってしまおうというツールです。例えば ~/.zshenv で alias hoge=\"cd /hogehoge\" と設定してあると、設定したキー hoge [Enter] の操作をすると、Dired でそのディレクトリを開けます。補完候補を別途追加することもできます。補完候補にはファイルも指定できます。shell-mode でも使えます。最新版 cdutil.el.gz 変更履歴  200?-??-?? v1.2?  忘れました。    TODO cdutil.el 中の説明の意味が分からないので、修正します。rvsej mule-version や Meadow-version() を日本語のバージョン名にするだけのツールです。(require 'rvsej) するだけで使えます。最新版 rvsej.el.gz 変更履歴  2008-10-13 v1.3  同じく、Meadow で動かなくなっていたので直しました…   2008-10-05 v1.2  関数の中で関数を定義する手法 を使ったら、まるで動かなくなっていたので直しました…   2008-10-05 v1.","link":"https://masutaka.net/2008-10-14-1/","isoDate":"2008-10-14T00:00:00.000Z","dateMiliSeconds":1223942400000,"authorName":"masutaka"},{"title":"和漢箋　ロート防風通聖散錠","content":"近所のドラッグストアで「和漢箋 ロート防風通聖散錠 63 錠」を買ってきた。\n 「脂肪を分解・燃焼して、おなか周りの溜まった皮下脂肪を落とす」らしい。\nホントかなあ&hellip;。ま、しばらく続けてみるか。以下、ネットで調べたことをコピペ。\n 普段、漢方や生薬を服用していない方は腸内細菌が成分をうまく分解で\nきないので　2 週間は効果がないと思うほうが良いそう(63 錠だと 1 週間分)。 「実証」向けの医薬品とのこと。「実証」とは男系でどちらかというと\n火照り感で発汗の多い人。(対: 虚証)\n→「使用上の注意」に発汗傾向の著しい方は、医師または薬剤師に相談\nすることと書いてあるのが気になる&hellip;。  ※ 購入する方は、注意書きを絶対に読むこと。","contentSnippet":"近所のドラッグストアで「和漢箋 ロート防風通聖散錠 63 錠」を買ってきた。 「脂肪を分解・燃焼して、おなか周りの溜まった皮下脂肪を落とす」らしい。ホントかなあ…。ま、しばらく続けてみるか。以下、ネットで調べたことをコピペ。 普段、漢方や生薬を服用していない方は腸内細菌が成分をうまく分解できないので　2 週間は効果がないと思うほうが良いそう(63 錠だと 1 週間分)。 「実証」向けの医薬品とのこと。「実証」とは男系でどちらかというと火照り感で発汗の多い人。(対: 虚証)→「使用上の注意」に発汗傾向の著しい方は、医師または薬剤師に相談することと書いてあるのが気になる…。  ※ 購入する方は、注意書きを絶対に読むこと。","link":"https://masutaka.net/2008-10-13-1/","isoDate":"2008-10-13T00:00:00.000Z","dateMiliSeconds":1223856000000,"authorName":"masutaka"},{"title":"【怒らせ方】契約説明会","content":"契約説明会の時にこんなことを想像して笑いを堪えていた私は氏んだ方が\nよいでしょうか&hellip;。1 分 18 秒から始まる「メンチ」です。\n ","contentSnippet":"契約説明会の時にこんなことを想像して笑いを堪えていた私は氏んだ方がよいでしょうか…。1 分 18 秒から始まる「メンチ」です。","link":"https://masutaka.net/2008-10-11-2/","isoDate":"2008-10-11T01:00:00.000Z","dateMiliSeconds":1223686800000,"authorName":"masutaka"},{"title":"【ストII】作曲+作詞+編曲して、歌も付けている人がいる。","content":" ","contentSnippet":"","link":"https://masutaka.net/2008-10-11-1/","isoDate":"2008-10-11T00:00:00.000Z","dateMiliSeconds":1223683200000,"authorName":"masutaka"},{"title":"【宇都宮】 駅前の「餃子像」真っ二つに割れる…移転中の作業ミスで","content":"こりゃまた見事に。。。\n割れた餃子像\n  割れる前の餃子像\n  URL: http://blog.livedoor.jp/dqnplus/archives/1180955.html ","contentSnippet":"こりゃまた見事に。。。割れた餃子像  割れる前の餃子像  URL: http://blog.livedoor.jp/dqnplus/archives/1180955.html","link":"https://masutaka.net/2008-10-06-1/","isoDate":"2008-10-06T00:00:00.000Z","dateMiliSeconds":1223251200000,"authorName":"masutaka"},{"title":"テカテカ液晶対策 ","content":"テカテカ液晶というものを良く知らないで買ってしまったら、目が疲れる\n疲れる&hellip;。そこで「ELECOM 液晶保護フィルム(反射防止仕様) EF-FL22W」\nを買ってみた。\nまあ、気休めにはなるかな。ないよりはマシ。\nしばらく使っていたが、ただ一つの気泡が気になって直していたら、ホコ\nリがフィルムの粘着面にくっついて取り返しのつかないことに。。。\n￥3,980 は泡と消えました。涙","contentSnippet":"テカテカ液晶というものを良く知らないで買ってしまったら、目が疲れる疲れる…。そこで「ELECOM 液晶保護フィルム(反射防止仕様) EF-FL22W」を買ってみた。まあ、気休めにはなるかな。ないよりはマシ。しばらく使っていたが、ただ一つの気泡が気になって直していたら、ホコリがフィルムの粘着面にくっついて取り返しのつかないことに。。。￥3,980 は泡と消えました。涙","link":"https://masutaka.net/2008-10-05-2/","isoDate":"2008-10-05T01:00:00.000Z","dateMiliSeconds":1223168400000,"authorName":"masutaka"},{"title":"クリックしないと Flash が再生しない","content":"Debian の FireFox は Iceweasel という名前だが、再生ボタンを押さない\nと Flash が再生しない。全ての Flash でそうなので、結構ウザい..。色々\n調べて、swfdec-mozilla をアンインストールすれば良いことが分かった。\nでも、aptitude さんから gnome もアンインストールが必要と言われた。無理！！\n試しに Adobe のページから最新の Flash Player をインストールしてみた\nら、あっさり解決できた。$HOME/.mozilla 以下にインストールされるので、\nシステムに影響はない。インストールすると、ツール→アドオン→プラグ\nインの Shockwave Flash 9.0 r100 の上に Shockwave Flash 9.0 r124 が\n追加される。\nURL: http://www.adobe.com/jp/products/flashplayer/ ","contentSnippet":"Debian の FireFox は Iceweasel という名前だが、再生ボタンを押さないと Flash が再生しない。全ての Flash でそうなので、結構ウザい..。色々調べて、swfdec-mozilla をアンインストールすれば良いことが分かった。でも、aptitude さんから gnome もアンインストールが必要と言われた。無理！！試しに Adobe のページから最新の Flash Player をインストールしてみたら、あっさり解決できた。$HOME/.mozilla 以下にインストールされるので、システムに影響はない。インストールすると、ツール→アドオン→プラグインの Shockwave Flash 9.0 r100 の上に Shockwave Flash 9.0 r124 が追加される。URL: http://www.adobe.com/jp/products/flashplayer/","link":"https://masutaka.net/2008-10-05-1/","isoDate":"2008-10-05T00:00:00.000Z","dateMiliSeconds":1223164800000,"authorName":"masutaka"},{"title":"DHCP を使っている場合の IP アドレス再取得","content":" 現在の IP アドレスを開放\n|&gt;ipconfig /release IP アドレスを再取得\n|&gt;ipconfig /renew  ","contentSnippet":"現在の IP アドレスを開放|>ipconfig /release IP アドレスを再取得|>ipconfig /renew","link":"https://masutaka.net/2008-10-04-1/","isoDate":"2008-10-04T00:00:00.000Z","dateMiliSeconds":1223078400000,"authorName":"masutaka"},{"title":"コメントとトラックバックを設置しました。","content":"「くっつき BBS」と「くっつきトラックバック」を設置しました。\nURL: http://nais.to/~yto/tools/kuttukibbs/ URL: http://nais.to/~yto/doc/tech/kuttuki-trackback.html レンタルサーバは大部分がそうみたいですが、FTP しか使えないのがしん\nどいですね。Apache のエラーログも見られないし、crontab も使えないし、\nシンボリックリンクも使えない。なんだかんだいって、CGI を結構修正す\nることになりました。\nスパム対策は全くしていないので、ひどいようなら対策を考えます。\n追記(2009-05-23):\n「くっつきトラックバック」で使用する tb-standalone のリンクは分か\nりづらいので、メモしておきます。\nくっつきトラックバック →「miyagawa氏が日本語化したもの 」\n→「こちら においておきます」","contentSnippet":"「くっつき BBS」と「くっつきトラックバック」を設置しました。URL: http://nais.to/~yto/tools/kuttukibbs/ URL: http://nais.to/~yto/doc/tech/kuttuki-trackback.html レンタルサーバは大部分がそうみたいですが、FTP しか使えないのがしんどいですね。Apache のエラーログも見られないし、crontab も使えないし、シンボリックリンクも使えない。なんだかんだいって、CGI を結構修正することになりました。スパム対策は全くしていないので、ひどいようなら対策を考えます。追記(2009-05-23):「くっつきトラックバック」で使用する tb-standalone のリンクは分かりづらいので、メモしておきます。くっつきトラックバック →「miyagawa氏が日本語化したもの 」→「こちら においておきます」","link":"https://masutaka.net/2008-09-29-1/","isoDate":"2008-09-29T00:00:00.000Z","dateMiliSeconds":1222646400000,"authorName":"masutaka"},{"title":"chalow のアップロード","content":"本サイトへのアップロードは lftp を使用しています。ftp を rsync っぽ\nく使えるので、rsync が使えない環境ではとても便利です。参考までに手\n順を簡単にメモしておきますね。\nlftp -c open FTPサーバ &amp;&amp; user ユーザ名 パスワード &amp;&amp; \\ mirror --reverse --delete --exclude theme/ $HOME/upload/atpages/chalow ~~~~~~~~~~~~~~~~※ mkchalow という sh スクリプトを自作し、chalow 変換とアップロードを\n行っています。変換後のファイルは $HOME/upload/atpages/chalow に出力\nさせ、lftp のミラー機能で上記のようにアップロードしています。\n※ 時間がかかるので、tdiary のテーマは &ndash;exclude オプションで対象外\nにしています。","contentSnippet":"本サイトへのアップロードは lftp を使用しています。ftp を rsync っぽく使えるので、rsync が使えない環境ではとても便利です。参考までに手順を簡単にメモしておきますね。lftp -c open FTPサーバ && user ユーザ名 パスワード && \\ mirror --reverse --delete --exclude theme/ $HOME/upload/atpages/chalow ~~~~~~~~~~~~~~~~※ mkchalow という sh スクリプトを自作し、chalow 変換とアップロードを行っています。変換後のファイルは $HOME/upload/atpages/chalow に出力させ、lftp のミラー機能で上記のようにアップロードしています。※ 時間がかかるので、tdiary のテーマは –exclude オプションで対象外にしています。","link":"https://masutaka.net/2008-09-25-2/","isoDate":"2008-09-25T01:00:00.000Z","dateMiliSeconds":1222304400000,"authorName":"masutaka"},{"title":"chalow 公開!!","content":"本日、ひっそりと公開します。過去のネタは問題ないものから公開してい\nきます。なので、日を追うごとに過去ログが増えるというおかしなサイト\nになると思います。^^;","contentSnippet":"本日、ひっそりと公開します。過去のネタは問題ないものから公開していきます。なので、日を追うごとに過去ログが増えるというおかしなサイトになると思います。^^;","link":"https://masutaka.net/2008-09-25-1/","isoDate":"2008-09-25T00:00:00.000Z","dateMiliSeconds":1222300800000,"authorName":"masutaka"},{"title":"ブータブル USB メモリの作成方法","content":"DELL Inspiron 530s の BIOS を 1.0.13 から 1.0.15 に更新するとファン\nの音が多少静かになるらしい。この PC には Linux をインストールしてい\nるが、更新プログラムは DOS の実行ファイルなので、もう１つの\nPC(Let&rsquo;s Note) で USB 起動ディスクを作ることにした。\n FDD を搭載した Windows マシンがないので、Virtual Floppy Drive を\n使って仮想 FDD の準備をし、仮想 FD を起動ディスクとしてフォーマッ\nトする。以下、その手順。  1.1. 「ドライバ」のタブをクリック→「インストール」→「開始」で、仮\n想ドライバの準備をする。\n1.2. 「ドライブ0」のタブをクリック→「変更」→「A:」を選択すると、エ\nクスプローラ上に A ドライブが出現する。\n1.3. 「開く/新規」をクリックし、仮想フロッピーを挿入した状態にする。\n1.4. A ドライブを右クリックし、「MS-DOSの起動ディスクを作成する」に\nチェックを入れフォーマットする。起動に必要なプログラムが作成さ\nれる。\nHP USB Disk Storage Format Tool を使って、USB メモリをブート可能\nな状態でフォーマットする。以下、その手順。  2.1. 配布元のリンク は切れている。&ldquo;HP USB Disk Storage Format Tool&rdquo;","contentSnippet":"DELL Inspiron 530s の BIOS を 1.0.13 から 1.0.15 に更新するとファンの音が多少静かになるらしい。この PC には Linux をインストールしているが、更新プログラムは DOS の実行ファイルなので、もう１つのPC(Let’s Note) で USB 起動ディスクを作ることにした。 FDD を搭載した Windows マシンがないので、Virtual Floppy Drive を使って仮想 FDD の準備をし、仮想 FD を起動ディスクとしてフォーマットする。以下、その手順。  1.1. 「ドライバ」のタブをクリック→「インストール」→「開始」で、仮想ドライバの準備をする。1.2. 「ドライブ0」のタブをクリック→「変更」→「A:」を選択すると、エクスプローラ上に A ドライブが出現する。1.3. 「開く/新規」をクリックし、仮想フロッピーを挿入した状態にする。1.4. A ドライブを右クリックし、「MS-DOSの起動ディスクを作成する」にチェックを入れフォーマットする。起動に必要なプログラムが作成される。HP USB Disk Storage Format Tool を使って、USB メモリをブート可能な状態でフォーマットする。以下、その手順。  2.1. 配布元のリンク は切れている。“HP USB Disk Storage Format Tool”","link":"https://masutaka.net/2008-09-23-1/","isoDate":"2008-09-23T00:00:00.000Z","dateMiliSeconds":1222128000000,"authorName":"masutaka"},{"title":"sh スクリプトを使用した自動バックアップ","content":"コントロールパネルの &ldquo;タスク&rdquo; から任意のスクリプトを実行できるので、\nLinux で使っている自動バックアップツールを cygwin でも使えるように\n修正してみた。いくつかハマった点を書き留めておく。\n  cygwin からネットワークドライブに書き込むと、Permission Denied\nと怒られてしまう。\n環境変数 CYGWIN を以下のように変更する必要があった。\n[2002-11-16-1] に詳しい情報が載ってる。\n  &#34;binmode ntsec smbntsec tty&#34; ↓ &#34;binmode ntsec nosmbntsec tty&#34;  &ldquo;C:\\Document and Settings&rdquo; や &ldquo;C:\\Program Files&rdquo; など、Windows\nには空白を含むフォルダが多いので、意図したとおりに for 文が動か\nないことがある。\n変数 IFS を一時的に変更して、文字列の区切りを改行のみにする等、\n小技が必要。\n  IFS=&#34; &#34; ","contentSnippet":"コントロールパネルの “タスク” から任意のスクリプトを実行できるので、Linux で使っている自動バックアップツールを cygwin でも使えるように修正してみた。いくつかハマった点を書き留めておく。  cygwin からネットワークドライブに書き込むと、Permission Deniedと怒られてしまう。環境変数 CYGWIN を以下のように変更する必要があった。[2002-11-16-1] に詳しい情報が載ってる。  \"binmode ntsec smbntsec tty\" ↓ \"binmode ntsec nosmbntsec tty\"  “C:\\Document and Settings” や “C:\\Program Files” など、Windowsには空白を含むフォルダが多いので、意図したとおりに for 文が動かないことがある。変数 IFS を一時的に変更して、文字列の区切りを改行のみにする等、小技が必要。  IFS=\" \"","link":"https://masutaka.net/2008-09-22-1/","isoDate":"2008-09-22T00:00:00.000Z","dateMiliSeconds":1222041600000,"authorName":"masutaka"},{"title":"FireFox3.0.1 の Foxmarks で XML パースエラー","content":"XML パースエラー: 定義されていない実体が使用されています。 URL: chrome://foxmarks/content/foxmarks-dialog.xul 行番号: 77, 列番号: 29: &lt;label class=&#34;text-link&#34; onclick=&#39;FoxmarksForgot()&#39; value=&#34;&amp;dialog.label.forgotPassword;&#34; /&gt; ----------------------------^ ja/foxmarks.dtd に以下の記載が抜けていることが原因。\n|5 行目に追加して対応した。こうすることで、ja-JP/foxmarks.dtd と同じ\n内容になる。","contentSnippet":"XML パースエラー: 定義されていない実体が使用されています。 URL: chrome://foxmarks/content/foxmarks-dialog.xul 行番号: 77, 列番号: 29: <label class=\"text-link\" onclick='FoxmarksForgot()' value=\"&dialog.label.forgotPassword;\" /> ----------------------------^ ja/foxmarks.dtd に以下の記載が抜けていることが原因。|5 行目に追加して対応した。こうすることで、ja-JP/foxmarks.dtd と同じ内容になる。","link":"https://masutaka.net/2008-09-15-1/","isoDate":"2008-09-15T00:00:00.000Z","dateMiliSeconds":1221436800000,"authorName":"masutaka"},{"title":"グラフィカルログインの時に読み込まれるファイル","content":"ずーっと $HOME/.xsession だと思っていた。でも、/etc/gdm/Xsession を\nよく読んだら $HOME/.xprofile が存在すれば読み込んでいるみたい。(実\n際、lenny で /etc/gdm/Xsession を修正して$HOME/.xsession を無理やり\n読み込ませるとログインできなかったし。)\n$HOME/.xprofile を用意して、ログインした時にやりたい動作を書いたら\nうまくいった。やった！","contentSnippet":"ずーっと $HOME/.xsession だと思っていた。でも、/etc/gdm/Xsession をよく読んだら $HOME/.xprofile が存在すれば読み込んでいるみたい。(実際、lenny で /etc/gdm/Xsession を修正して$HOME/.xsession を無理やり読み込ませるとログインできなかったし。)$HOME/.xprofile を用意して、ログインした時にやりたい動作を書いたらうまくいった。やった！","link":"https://masutaka.net/2008-09-07-3/","isoDate":"2008-09-07T02:00:00.000Z","dateMiliSeconds":1220752800000,"authorName":"masutaka"},{"title":"GNUPG 鍵の破棄","content":"&ldquo;gpg &ndash;edit-key masutaka.net@gmail.com &rdquo; から公開鍵を revoke にして、公\n開鍵サーバに登録しても *** KEY REVOKED *** にならなかった。gnupg で\nは破棄証明書を発行し、インポートするという手順が必要らしい。\n  破棄証明書を発行する。\n|% gpg &ndash;gen-revoke [keyid]\n  出力される 3 行程度の破棄証明書を例えば revoke.txt に保存し、\nインポートする。revoke.txt は念のためどこかに保存しておくと良い。\n|% gpg &ndash;import revoke.txt\n  URL: http://hp.vector.co.jp/authors/VA019487/tips.html#Tip12 ","contentSnippet":"“gpg –edit-key masutaka.net@gmail.com ” から公開鍵を revoke にして、公開鍵サーバに登録しても *** KEY REVOKED *** にならなかった。gnupg では破棄証明書を発行し、インポートするという手順が必要らしい。  破棄証明書を発行する。|% gpg –gen-revoke [keyid]  出力される 3 行程度の破棄証明書を例えば revoke.txt に保存し、インポートする。revoke.txt は念のためどこかに保存しておくと良い。|% gpg –import revoke.txt  URL: http://hp.vector.co.jp/authors/VA019487/tips.html#Tip12","link":"https://masutaka.net/2008-09-07-2/","isoDate":"2008-09-07T01:00:00.000Z","dateMiliSeconds":1220749200000,"authorName":"masutaka"},{"title":"wanderlust 未読マークを削除","content":"`c&rsquo;(wl-summary-mark-as-read-all) で消せる。","contentSnippet":"`c’(wl-summary-mark-as-read-all) で消せる。","link":"https://masutaka.net/2008-09-07-1/","isoDate":"2008-09-07T00:00:00.000Z","dateMiliSeconds":1220745600000,"authorName":"masutaka"},{"title":"aptitude フラグの意味","content":"|piAU\twebmin\t+5837kB &lt;なし&gt;\t1.160-2\n左側の 4 文字の状態フラグからは、パッケージの状態に関する基本的な情\n報が得られます。1 文字目はパッケージの「現在の状態」です。2 文字目\nはパッケージに対して行う予定の「アクション」です。3 文字目はパッケー\nジが自動的にインストールされたかどうかを表します。4 文字目はパッケー\nジが信頼されているかどうかを表します。\n「現在の状態」フラグの値\ni - パッケージがインストール済みで、その依存関係がすべて満たされて\nいます。\nc - パッケージは削除されましたが、設定ファイルがまだ残っています。\np - パッケージとその設定ファイルがすべて削除されました。またはイン\nストールされたことがありません。\nv - パッケージが仮想パッケージです。\nB - パッケージに壊れた依存関係があります。\nu - パッケージは展開済みですが設定が行われていません。\nC - 設定未完了です。つまりパッケージの設定が中断されました。\nH - インストール未完了です。つまりパッケージのインストールが中断さ\nれました。\n「アクション」フラグの値\ni - パッケージはインストール予定です。\nu - パッケージは更新予定です。\nd - パッケージは削除予定です。削除されますが、設定ファイルはシステ\nムに残ります。\np - パッケージは完全削除予定です。パッケージとその設定ファイルは削\n除されます。\nh - パッケージは固定されています。つまり、固定が取り消されるまでは、\nたとえ新しいバージョンが利用可能になっても現在のバージョンに留\nめられます。\nF - パッケージは更新が禁止されています。\nr - パッケージは再インストール予定です。","contentSnippet":"|piAU\twebmin\t+5837kB <なし>\t1.160-2左側の 4 文字の状態フラグからは、パッケージの状態に関する基本的な情報が得られます。1 文字目はパッケージの「現在の状態」です。2 文字目はパッケージに対して行う予定の「アクション」です。3 文字目はパッケージが自動的にインストールされたかどうかを表します。4 文字目はパッケージが信頼されているかどうかを表します。「現在の状態」フラグの値i - パッケージがインストール済みで、その依存関係がすべて満たされています。c - パッケージは削除されましたが、設定ファイルがまだ残っています。p - パッケージとその設定ファイルがすべて削除されました。またはインストールされたことがありません。v - パッケージが仮想パッケージです。B - パッケージに壊れた依存関係があります。u - パッケージは展開済みですが設定が行われていません。C - 設定未完了です。つまりパッケージの設定が中断されました。H - インストール未完了です。つまりパッケージのインストールが中断されました。「アクション」フラグの値i - パッケージはインストール予定です。u - パッケージは更新予定です。d - パッケージは削除予定です。削除されますが、設定ファイルはシステムに残ります。p - パッケージは完全削除予定です。パッケージとその設定ファイルは削除されます。h - パッケージは固定されています。つまり、固定が取り消されるまでは、たとえ新しいバージョンが利用可能になっても現在のバージョンに留められます。F - パッケージは更新が禁止されています。r - パッケージは再インストール予定です。","link":"https://masutaka.net/2008-08-31-2/","isoDate":"2008-08-31T01:00:00.000Z","dateMiliSeconds":1220144400000,"authorName":"masutaka"},{"title":"UIM でのスペースは常に半角にする。","content":"~/.uim に以下のコードを書けば OK\n;; スペースは常に半角 (require &#34;japanese.scm&#34;) (define ja-direct-rule (append &#39;( (&#34; &#34; &#34; &#34;) ) ja-direct-rule)) ","contentSnippet":"~/.uim に以下のコードを書けば OK;; スペースは常に半角 (require \"japanese.scm\") (define ja-direct-rule (append '( (\" \" \" \") ) ja-direct-rule))","link":"https://masutaka.net/2008-08-31-1/","isoDate":"2008-08-31T00:00:00.000Z","dateMiliSeconds":1220140800000,"authorName":"masutaka"},{"title":"Apache2 on lenny","content":"[2006-07-22-1] と [2008-01-23-1] を参考に設定した。lenny のデフォル\nトでは ~masutaka/index.html 等へのアクセスは許可されなくなったよう\nなので、a2enmod コマンドで userdir を入力した。こうすることで\n/etc/apache2/mods-enabled/userdir.(conf|load) のリンクが作られる。","contentSnippet":"[2006-07-22-1] と [2008-01-23-1] を参考に設定した。lenny のデフォルトでは ~masutaka/index.html 等へのアクセスは許可されなくなったようなので、a2enmod コマンドで userdir を入力した。こうすることで/etc/apache2/mods-enabled/userdir.(conf|load) のリンクが作られる。","link":"https://masutaka.net/2008-08-27-1/","isoDate":"2008-08-27T00:00:00.000Z","dateMiliSeconds":1219795200000,"authorName":"masutaka"},{"title":"lenny インストール時に知ったこと","content":"インストール中は Ctl-Alt-F2 でデバッグコンソールに移動でき、\nCtl-Alt-F5 でインストーラに戻れる。\n利用したパッケージを送信する設定を選べ、http://popcon.debian.org/\nで確認ができる。後から &ldquo;dpkg-reconfigure popularity-contest&rdquo; で設定\nを変更できる。","contentSnippet":"インストール中は Ctl-Alt-F2 でデバッグコンソールに移動でき、Ctl-Alt-F5 でインストーラに戻れる。利用したパッケージを送信する設定を選べ、http://popcon.debian.org/で確認ができる。後から “dpkg-reconfigure popularity-contest” で設定を変更できる。","link":"https://masutaka.net/2008-08-24-2/","isoDate":"2008-08-24T01:00:00.000Z","dateMiliSeconds":1219539600000,"authorName":"masutaka"},{"title":"DELL Inspiron 530s で lenny のインストールが成功！！","content":"Etch(4.0r4), Etch-And-A-Half, Lenny-beta2 を試したがどれもビデオま\nわりで不具合があった。wide 画面にならない、画面の描画が遅い(ソフト\nレンダリング)等。でも、8/23 の lenny デイリービルドを使ったら、あっ\nさりインストールできた。","contentSnippet":"Etch(4.0r4), Etch-And-A-Half, Lenny-beta2 を試したがどれもビデオまわりで不具合があった。wide 画面にならない、画面の描画が遅い(ソフトレンダリング)等。でも、8/23 の lenny デイリービルドを使ったら、あっさりインストールできた。","link":"https://masutaka.net/2008-08-24-1/","isoDate":"2008-08-24T00:00:00.000Z","dateMiliSeconds":1219536000000,"authorName":"masutaka"},{"title":"エアコンの仕組み","content":"気化熱を利用しているとのこと。\n 室外機から室内機に液体のフロンが送られる。 室内機内部のアルミのフィン(蒸発器)内部でフロンが蒸発し、気化熱に\nよってアルミのフィンが冷やされる。 室内の暖かい空気がアルミのフィンを通ることで冷やされる。 気化したフロンは回収され、室外機に送られる。 送られたフロンは圧縮され、液体に戻る。この時熱が発生するため、室\n外機のファンで熱を逃す。  URL: http://www.eakon.jp/structure/decomposition/sikumi.html ","contentSnippet":"気化熱を利用しているとのこと。 室外機から室内機に液体のフロンが送られる。 室内機内部のアルミのフィン(蒸発器)内部でフロンが蒸発し、気化熱によってアルミのフィンが冷やされる。 室内の暖かい空気がアルミのフィンを通ることで冷やされる。 気化したフロンは回収され、室外機に送られる。 送られたフロンは圧縮され、液体に戻る。この時熱が発生するため、室外機のファンで熱を逃す。  URL: http://www.eakon.jp/structure/decomposition/sikumi.html","link":"https://masutaka.net/2008-08-19-1/","isoDate":"2008-08-19T00:00:00.000Z","dateMiliSeconds":1219104000000,"authorName":"masutaka"},{"title":"list-character-sets","content":"meadow-users-jp@meadowy.org の白井さんからの情報。\nM-x list-character-sets すると、Emacs で扱える character set が表示\nされる。表示された Character Set List バッファの例えば\njapanese-jisx0208 の上で Enter すると、japanese-jisx0208 で定義され\nている全文字が表示される。\n個々の文字情報は &ldquo;C-x =&rdquo; や &ldquo;C-u C-x =&rdquo; すると、詳しい情報が得られ\nる。","contentSnippet":"meadow-users-jp@meadowy.org の白井さんからの情報。M-x list-character-sets すると、Emacs で扱える character set が表示される。表示された Character Set List バッファの例えばjapanese-jisx0208 の上で Enter すると、japanese-jisx0208 で定義されている全文字が表示される。個々の文字情報は “C-x =” や “C-u C-x =” すると、詳しい情報が得られる。","link":"https://masutaka.net/2008-07-01-1/","isoDate":"2008-07-01T00:00:00.000Z","dateMiliSeconds":1214870400000,"authorName":"masutaka"},{"title":"XML を利用した技術","content":"Web サービスにおいて、システム間のデータのやり取りには、標準規格と\nして XML を使用する。XML データを実際にやり取りするためのプロトコル\nには、SOAP を使用する。SOAP は XML 文書をネットワーク経由で送受信す\nるためのメッセージ仕様を定めた標準プロトコルである。\n従来はプロトコルが統一されていなかったため、ファイアウォールを越え\nてのインターネット接続は難しいものだった。SOAP は伝送プロトコルとし\nて、HTTP, FTP, SMTP などの標準プロトコルをベースとするため、ファイ\nアウォール越しの接続も容易になった。\n 手紙の本文→XML 封筒の形式→SOAP 配達の手段→HTTP, FTP, SMTP  ","contentSnippet":"Web サービスにおいて、システム間のデータのやり取りには、標準規格として XML を使用する。XML データを実際にやり取りするためのプロトコルには、SOAP を使用する。SOAP は XML 文書をネットワーク経由で送受信するためのメッセージ仕様を定めた標準プロトコルである。従来はプロトコルが統一されていなかったため、ファイアウォールを越えてのインターネット接続は難しいものだった。SOAP は伝送プロトコルとして、HTTP, FTP, SMTP などの標準プロトコルをベースとするため、ファイアウォール越しの接続も容易になった。 手紙の本文→XML 封筒の形式→SOAP 配達の手段→HTTP, FTP, SMTP","link":"https://masutaka.net/2008-06-29-11/","isoDate":"2008-06-29T10:00:00.000Z","dateMiliSeconds":1214733600000,"authorName":"masutaka"},{"title":"データ操作するための API","content":" DOM\nDocument Objects Model の略。XML 文書を解析し、木構造でメモリに展\n開する。展開されたデータのことを DOM ツリーと呼ぶ。 SAX\nSimples API for XML の略。その都度解析するので、DOM に比べて省メ\nモリ。ただし、プログラムが複雑になってしまうことがある。  ","contentSnippet":"DOMDocument Objects Model の略。XML 文書を解析し、木構造でメモリに展開する。展開されたデータのことを DOM ツリーと呼ぶ。 SAXSimples API for XML の略。その都度解析するので、DOM に比べて省メモリ。ただし、プログラムが複雑になってしまうことがある。","link":"https://masutaka.net/2008-06-29-10/","isoDate":"2008-06-29T09:00:00.000Z","dateMiliSeconds":1214730000000,"authorName":"masutaka"},{"title":"名前空間の定義方法","content":"各要素に接頭辞となる任意の文字列を加えることにより、名前空間を定義\nできる。各要素に加える都合上、DTD とは対応していない。\n以下の例では、支店Aの金額は1ヶ月、支店Bの金額は1週間を示すため、\n名前空間を分けている。\n 構文  &lt;要素 xmlns:接頭辞=&#34;名前空間を示すURI&#34;&gt;  例  &lt;売上 xmlns:支店A=&#34;http://www.example.com/a&#34; xmlns:支店B=&#34;http://www.example.com/b&#34;&gt; &lt;支店A:金額&gt;500000&lt;/支店A:金額&gt; &lt;支店B:金額&gt;20000&lt;/支店B:金額&gt; &lt;/売上&gt; ","contentSnippet":"各要素に接頭辞となる任意の文字列を加えることにより、名前空間を定義できる。各要素に加える都合上、DTD とは対応していない。以下の例では、支店Aの金額は1ヶ月、支店Bの金額は1週間を示すため、名前空間を分けている。 構文  <要素 xmlns:接頭辞=\"名前空間を示すURI\">  例  <売上 xmlns:支店A=\"http://www.example.com/a\" xmlns:支店B=\"http://www.example.com/b\"> <支店A:金額>500000</支店A:金額> <支店B:金額>20000</支店B:金額> </売上>","link":"https://masutaka.net/2008-06-29-9/","isoDate":"2008-06-29T08:00:00.000Z","dateMiliSeconds":1214726400000,"authorName":"masutaka"},{"title":"エンティティ宣言","content":" DTD  &lt;!ENTITY xml &#34;XML(eXtensible Markup Language)&#34;&gt;  XML インスタンス  &lt;詳細&gt;&amp;xml;とは拡張可能なマークアップ言語のことです&lt;/詳細&gt;  結果  &lt;詳細&gt;XML(eXtensible Markup Language)とは拡張可能なマークアップ言語のことです&lt;/詳細&gt; ","contentSnippet":"DTD  <!ENTITY xml \"XML(eXtensible Markup Language)\">  XML インスタンス  <詳細>&xml;とは拡張可能なマークアップ言語のことです</詳細>  結果  <詳細>XML(eXtensible Markup Language)とは拡張可能なマークアップ言語のことです</詳細>","link":"https://masutaka.net/2008-06-29-8/","isoDate":"2008-06-29T07:00:00.000Z","dateMiliSeconds":1214722800000,"authorName":"masutaka"},{"title":"属性リスト宣言","content":" DTD  &lt;!ATTLIST 部門 場所 CDATA &#34;東京&#34;&gt;  XML インスタンス  &lt;部門 場所=&#34;神奈川&#34;&gt;営業部&lt;/部門&gt; ","contentSnippet":"DTD  <!ATTLIST 部門 場所 CDATA \"東京\">  XML インスタンス  <部門 場所=\"神奈川\">営業部</部門>","link":"https://masutaka.net/2008-06-29-7/","isoDate":"2008-06-29T06:00:00.000Z","dateMiliSeconds":1214719200000,"authorName":"masutaka"},{"title":"要素型宣言","content":" DTD  &lt;!ELEMENT 氏名 (姓,名)&gt;  XML インスタンス  &lt;氏名&gt; &lt;姓&gt;山田&lt;/姓&gt; &lt;名&gt;太郎&lt;/名&gt; &lt;/氏名&gt; ","contentSnippet":"DTD  <!ELEMENT 氏名 (姓,名)>  XML インスタンス  <氏名> <姓>山田</姓> <名>太郎</名> </氏名>","link":"https://masutaka.net/2008-06-29-6/","isoDate":"2008-06-29T05:00:00.000Z","dateMiliSeconds":1214715600000,"authorName":"masutaka"},{"title":"DTD","content":"XML 文書内に直接記述する方法を「内部サブセット」、別ファイルに記述\nする方法を「外部サブセット」と呼ぶ。外部 DTD は開発者が用意したもの\nも、標準の DTD も使用することができる。前者の識別子として SYSTEM、\n後者の識別子として PUBLIC が指定される。\n両方使用することもできる。XML パーサは最初に内部、次に外部サブセッ\nトを読み込む。もし同じ名前の要素が定義されていた場合は、内部が優先\nされて使用される。\nDTD では、以下の 4 つの定義を行うことができる。\n 要素型宣言(ELEMENT) 属性リスト宣言(ATTLIST) エンティティ宣言(ENTITY) 記法宣言(NOATION)  DTD のように XML 文書内にどのような要素名が含まれるのか、要素の出現\n順序や属性などを事前に定義したものを「スキーマ」という。スキーマの\n規格には「DTD」と「XML Schema」がある。","contentSnippet":"XML 文書内に直接記述する方法を「内部サブセット」、別ファイルに記述する方法を「外部サブセット」と呼ぶ。外部 DTD は開発者が用意したものも、標準の DTD も使用することができる。前者の識別子として SYSTEM、後者の識別子として PUBLIC が指定される。両方使用することもできる。XML パーサは最初に内部、次に外部サブセットを読み込む。もし同じ名前の要素が定義されていた場合は、内部が優先されて使用される。DTD では、以下の 4 つの定義を行うことができる。 要素型宣言(ELEMENT) 属性リスト宣言(ATTLIST) エンティティ宣言(ENTITY) 記法宣言(NOATION)  DTD のように XML 文書内にどのような要素名が含まれるのか、要素の出現順序や属性などを事前に定義したものを「スキーマ」という。スキーマの規格には「DTD」と「XML Schema」がある。","link":"https://masutaka.net/2008-06-29-5/","isoDate":"2008-06-29T04:00:00.000Z","dateMiliSeconds":1214712000000,"authorName":"masutaka"},{"title":"XML 文書の記述の種類","content":"  整形式 (well-formed) XML 文書\n「開始タグと終了タグの対応が正しく取られている」「要素の親子関係も正\nしく保たれている」を満たすもの。従って、全ての XML 文書は整形式 XML\n文書でなければならない。\n  検証済み (valid) XML 文書\n上記に加え、要素や属性が DTD の定義に従っているかどうかも検証した\nXML 文書のこと。検証済み XML 文書は「妥当な XML 文書」とも呼ばれる。\n  ","contentSnippet":"整形式 (well-formed) XML 文書「開始タグと終了タグの対応が正しく取られている」「要素の親子関係も正しく保たれている」を満たすもの。従って、全ての XML 文書は整形式 XML文書でなければならない。  検証済み (valid) XML 文書上記に加え、要素や属性が DTD の定義に従っているかどうかも検証したXML 文書のこと。検証済み XML 文書は「妥当な XML 文書」とも呼ばれる。","link":"https://masutaka.net/2008-06-29-4/","isoDate":"2008-06-29T03:00:00.000Z","dateMiliSeconds":1214708400000,"authorName":"masutaka"},{"title":"XML の構造","content":" XML 宣言(省略可)\nバージョンや文字エンコーディングの宣言 DTD(省略可)\n要素型、属性リスト、エンティティ、記法宣言 XML インスタンス(必須)\n実際のタグ付き文書  ","contentSnippet":"XML 宣言(省略可)バージョンや文字エンコーディングの宣言 DTD(省略可)要素型、属性リスト、エンティティ、記法宣言 XML インスタンス(必須)実際のタグ付き文書","link":"https://masutaka.net/2008-06-29-3/","isoDate":"2008-06-29T02:00:00.000Z","dateMiliSeconds":1214704800000,"authorName":"masutaka"},{"title":"XML の特徴","content":" インターネットに対応した世界標準である。 構造化データをテキスト形式で記述できる。 テキストデータなので OS やプラットフォームに依存しない。 タグの作成が自由に出来る。 デザインデータは持たずに、スタイルシートとして分離している。  ","contentSnippet":"インターネットに対応した世界標準である。 構造化データをテキスト形式で記述できる。 テキストデータなので OS やプラットフォームに依存しない。 タグの作成が自由に出来る。 デザインデータは持たずに、スタイルシートとして分離している。","link":"https://masutaka.net/2008-06-29-2/","isoDate":"2008-06-29T01:00:00.000Z","dateMiliSeconds":1214701200000,"authorName":"masutaka"},{"title":"XML の基礎","content":"XML とは eXtensible Markup Language の略。拡張可能なマークアップ言\n語である。ちなみに、XHTML とは、HTML を XML に準拠する形で再定義し\nたマークアップ言語である。\nSGML───┐ │ ↓ ↓ HTML XML──┐│ ↓↓ XHTML ↑Web用に整理・拡張 ↑インターネットに適合！ ","contentSnippet":"XML とは eXtensible Markup Language の略。拡張可能なマークアップ言語である。ちなみに、XHTML とは、HTML を XML に準拠する形で再定義したマークアップ言語である。SGML───┐ │ ↓ ↓ HTML XML──┐│ ↓↓ XHTML ↑Web用に整理・拡張 ↑インターネットに適合！","link":"https://masutaka.net/2008-06-29-1/","isoDate":"2008-06-29T00:00:00.000Z","dateMiliSeconds":1214697600000,"authorName":"masutaka"},{"title":"しりとり","content":"2ch より。\n大学のころ付き合ってた彼女と映画館で並んでたら\n女「しりとりしようよ」 俺「いいよ」\n女「しりと『り』!」俺「リール」\n女「ルビィ!」俺「イスタンブール」\n女「ルーレット!」俺「トリコロール」\n女「ルービックキューブ!」俺「ブラックホール」\n女「ル&hellip;ル&hellip;ルもうない&hellip;あっ!『ルール』!!\nやったー、ルで返してやったー!ルール!ルール!」俺「ルノワール」\n泣き出した。","contentSnippet":"2ch より。大学のころ付き合ってた彼女と映画館で並んでたら女「しりとりしようよ」 俺「いいよ」女「しりと『り』!」俺「リール」女「ルビィ!」俺「イスタンブール」女「ルーレット!」俺「トリコロール」女「ルービックキューブ!」俺「ブラックホール」女「ル…ル…ルもうない…あっ!『ルール』!!やったー、ルで返してやったー!ルール!ルール!」俺「ルノワール」泣き出した。","link":"https://masutaka.net/2008-06-22-1/","isoDate":"2008-06-22T00:00:00.000Z","dateMiliSeconds":1214092800000,"authorName":"masutaka"},{"title":"表計算","content":"[2005-08-06-1] の訂正。日本語も問題なく表示できる。おそらく、&quot;&quot; で\n括っていなかったのだと思う。以下、まとめ。\nEmacs22 から ses-mode が使える。*.ses というファイルを開くと\nses-mode になる。\n|数字orEnterキー: カレントのセルに入力\n|TAB: 次の列を挿入\n|Ctrl-o: 次の行を挿入\n計算は (+ A1 A2) などと Emacs Lisp と同じ前置記法で行う。文字列は\n&ldquo;あああ&rdquo; などと囲む必要がある。詳しくは SES の Info を参照すること。","contentSnippet":"[2005-08-06-1] の訂正。日本語も問題なく表示できる。おそらく、\"\" で括っていなかったのだと思う。以下、まとめ。Emacs22 から ses-mode が使える。*.ses というファイルを開くとses-mode になる。|数字orEnterキー: カレントのセルに入力|TAB: 次の列を挿入|Ctrl-o: 次の行を挿入計算は (+ A1 A2) などと Emacs Lisp と同じ前置記法で行う。文字列は“あああ” などと囲む必要がある。詳しくは SES の Info を参照すること。","link":"https://masutaka.net/2008-06-18-1/","isoDate":"2008-06-18T00:00:00.000Z","dateMiliSeconds":1213747200000,"authorName":"masutaka"},{"title":"コマンドラインでピザを注文するムービー","content":" 元ネタ\nhttp://gigazine.net/index.php?/news/comments/20080609_command_line_pizza/ http://slashdot.jp/articles/04/05/08/0858242.shtml オフィシャルページ\nhttp://www.beigerecords.com/cory/pizza_party/ ","contentSnippet":"元ネタhttp://gigazine.net/index.php?/news/comments/20080609_command_line_pizza/ http://slashdot.jp/articles/04/05/08/0858242.shtml オフィシャルページhttp://www.beigerecords.com/cory/pizza_party/","link":"https://masutaka.net/2008-06-11-1/","isoDate":"2008-06-11T00:00:00.000Z","dateMiliSeconds":1213142400000,"authorName":"masutaka"},{"title":"半熟卵の作り方","content":"水を沸騰させる。 7 分茹でる。(5 分だと少なかったので 7 分)\nこの時、箸でゆっくりかき混ぜると黄身が中心に寄る。量が多い場合は、\nきれいなふきんでゆっくりかき混ぜると良いそう。 茹で終わったら冷水に数分間漬けると、殻が剥きやすくなる。  ちなみに同条件下では、生卵よりゆで卵のほうが早く腐敗するそう。\n(URL: ゆで卵 )","contentSnippet":"水を沸騰させる。 7 分茹でる。(5 分だと少なかったので 7 分)この時、箸でゆっくりかき混ぜると黄身が中心に寄る。量が多い場合は、きれいなふきんでゆっくりかき混ぜると良いそう。 茹で終わったら冷水に数分間漬けると、殻が剥きやすくなる。  ちなみに同条件下では、生卵よりゆで卵のほうが早く腐敗するそう。(URL: ゆで卵 )","link":"https://masutaka.net/2008-05-24-1/","isoDate":"2008-05-24T00:00:00.000Z","dateMiliSeconds":1211587200000,"authorName":"masutaka"},{"title":"起動時に読み込まれるファイルの順番","content":"1→2→3の順番で読み込まれる。(1 と 3 の存在を知らなかった&hellip;。orz)\n|1. site-start.el in load-path\n|2. ~/.emacs\n|3. default.el in load-path\nただし、\n1 は -no-site-file オプションを付けると読み込まれない。\n2 は -q オプションを付けると読み込まれない。\n3 は -q オプションを付ける、または inhibit-default-init に Non-nil を\nセットすると読み込まれない。\n各ユーザの ~/.emacs に (load &ldquo;/usr/local/adm/etc/Emacs2x&rdquo;) のような\n共通設定ファイルをロードさせる設定を記載する運用も悪くはない。しか\nし、ユーザが誤って書き換えてしまうことも考えられるため、ユーザ向け\nの設定は site-start.el に記載すると良いかもしれない。\ndefault.el は、ユーザが ~/.emacs に設定した内容を無効化できるが、ユーザ\nの混乱を避けるため、あまり使うべきではないかもしれない。","contentSnippet":"1→2→3の順番で読み込まれる。(1 と 3 の存在を知らなかった…。orz)|1. site-start.el in load-path|2. ~/.emacs|3. default.el in load-pathただし、1 は -no-site-file オプションを付けると読み込まれない。2 は -q オプションを付けると読み込まれない。3 は -q オプションを付ける、または inhibit-default-init に Non-nil をセットすると読み込まれない。各ユーザの ~/.emacs に (load “/usr/local/adm/etc/Emacs2x”) のような共通設定ファイルをロードさせる設定を記載する運用も悪くはない。しかし、ユーザが誤って書き換えてしまうことも考えられるため、ユーザ向けの設定は site-start.el に記載すると良いかもしれない。default.el は、ユーザが ~/.emacs に設定した内容を無効化できるが、ユーザの混乱を避けるため、あまり使うべきではないかもしれない。","link":"https://masutaka.net/2008-05-15-1/","isoDate":"2008-05-15T00:00:00.000Z","dateMiliSeconds":1210809600000,"authorName":"masutaka"},{"title":"揚げない唐揚げ","content":"食べやすく適当に切り分けたもも肉をビニール袋に入れ、\n少量の麺つゆ、マヨ、砂糖、おろしニンニク、おろし生姜（チューブので十分）、\nたっぷりの胡椒を加えてよく揉み込み、３０分放置して下味を付ける。\nそこに片栗粉：上新粉＝１：２〜１：３の割合で加え、味塩胡椒を振り、\nビニールに空気を入れてよく振ってコロモを満遍なくまぶす。\nまぶしたら、出来るだけ空気を抜いて、５〜１０分ほどコロモを肉に馴染ませる。\n熱したフライパンに少量の油を引いて、肉を投入し、フタをして弱火〜中火で\n片面を焼く。７割がた火が通ったら、フタを外して肉をひっくり返して残り３割に\n火を通してできあがり。\n揚げないのにサクサクジューシーな唐揚げが出来るよ。\n上新粉を使うのがサクサクのポイント。","contentSnippet":"食べやすく適当に切り分けたもも肉をビニール袋に入れ、少量の麺つゆ、マヨ、砂糖、おろしニンニク、おろし生姜（チューブので十分）、たっぷりの胡椒を加えてよく揉み込み、３０分放置して下味を付ける。そこに片栗粉：上新粉＝１：２〜１：３の割合で加え、味塩胡椒を振り、ビニールに空気を入れてよく振ってコロモを満遍なくまぶす。まぶしたら、出来るだけ空気を抜いて、５〜１０分ほどコロモを肉に馴染ませる。熱したフライパンに少量の油を引いて、肉を投入し、フタをして弱火〜中火で片面を焼く。７割がた火が通ったら、フタを外して肉をひっくり返して残り３割に火を通してできあがり。揚げないのにサクサクジューシーな唐揚げが出来るよ。上新粉を使うのがサクサクのポイント。","link":"https://masutaka.net/2008-05-14-2/","isoDate":"2008-05-14T01:00:00.000Z","dateMiliSeconds":1210726800000,"authorName":"masutaka"},{"title":"advice の外し方","content":"M-x ad-deactivate\n実行すると、全ての advice を外したい関数を聞かれる。非インタラクティ\nブに呼び出すには、以下のような評価をする。\n(ad-deactivate &#39;関数名) M-x ad-disable-advice\n実行すると、「関数名」「advice の種類」「advice の名前」の順に聞か\nれる。ある advice を一時的に OFF にしたい時に使う。非インタラクティ\nブに呼び出すには、以下のような評価をする。\n(ad-disable-advice &#39;関数名 &#39;adviceの種類 &#39;adviceの名前) M-x ad-enable-advice\nad-disable-advice の逆。非インタラクティブに呼び出すには、以下の\nような評価をする。\n(ad-enable-advice &#39;関数名 &#39;adviceの種類 &#39;adviceの名前) M-x ad-remove-advice\n実行すると、「関数名」「advice の種類」「advice の名前」の順に聞か\nれる。ある advice を削除したい時に使う。非インタラクティブに呼び出\nすには、以下のような評価をする。\n(ad-remove-advice &#39;関数名 &#39;adviceの種類 &#39;adviceの名前) 追記(2009-06-14):\n全面的に書き換えました。","contentSnippet":"M-x ad-deactivate実行すると、全ての advice を外したい関数を聞かれる。非インタラクティブに呼び出すには、以下のような評価をする。(ad-deactivate '関数名) M-x ad-disable-advice実行すると、「関数名」「advice の種類」「advice の名前」の順に聞かれる。ある advice を一時的に OFF にしたい時に使う。非インタラクティブに呼び出すには、以下のような評価をする。(ad-disable-advice '関数名 'adviceの種類 'adviceの名前) M-x ad-enable-advicead-disable-advice の逆。非インタラクティブに呼び出すには、以下のような評価をする。(ad-enable-advice '関数名 'adviceの種類 'adviceの名前) M-x ad-remove-advice実行すると、「関数名」「advice の種類」「advice の名前」の順に聞かれる。ある advice を削除したい時に使う。非インタラクティブに呼び出すには、以下のような評価をする。(ad-remove-advice '関数名 'adviceの種類 'adviceの名前) 追記(2009-06-14):全面的に書き換えました。","link":"https://masutaka.net/2008-05-14-1/","isoDate":"2008-05-14T00:00:00.000Z","dateMiliSeconds":1210723200000,"authorName":"masutaka"},{"title":"Emacs on Xming と Windows アプリ間のクリップボード","content":"Windows の環境変数 LANG に ja_JP.SJIS を設定していたので、自然にできて\nいたみたい。これをやってないと Emacs に UTF-8 な文字列が張り付いてしま\nい、ちょっと冗長になる。","contentSnippet":"Windows の環境変数 LANG に ja_JP.SJIS を設定していたので、自然にできていたみたい。これをやってないと Emacs に UTF-8 な文字列が張り付いてしまい、ちょっと冗長になる。","link":"https://masutaka.net/2008-05-08-2/","isoDate":"2008-05-08T01:00:00.000Z","dateMiliSeconds":1210208400000,"authorName":"masutaka"},{"title":"MDIE での圧縮ファイルの取扱い","content":"解凍ソフトに *.zip を関連付けしていても、ダブルクリックすると圧縮フォル\nダとして開いてしまう。でも、以下を実行しておけば問題ナッシング。\n|regsvr32 /u zipfldr.dll\n|regsvr32 /u cabview.dll\nURL: http://tobysoft.net/diary/archives/2007/04/_mdie.html ","contentSnippet":"解凍ソフトに *.zip を関連付けしていても、ダブルクリックすると圧縮フォルダとして開いてしまう。でも、以下を実行しておけば問題ナッシング。|regsvr32 /u zipfldr.dll|regsvr32 /u cabview.dllURL: http://tobysoft.net/diary/archives/2007/04/_mdie.html","link":"https://masutaka.net/2008-05-08-1/","isoDate":"2008-05-08T00:00:00.000Z","dateMiliSeconds":1210204800000,"authorName":"masutaka"},{"title":"@data_path のデータ構造","content":"YYYY/YYYYMM.td2\n本文が記録される。 YYYY/YYYYMM.tdc\nツッコミやトラックバックが記録される。 YYYY/YYYYMMDD.tdr\n「本日のリンク元」が記録される。 YYYY/YYYYMM.tdr~\ntdiary-1.x の時は YYYYMM.tdr に「本日のリンク元」が記録されていた。そのバッ\nクアップファイル。 cache/*\nYYYY を処理しやすい形式でキャッシュしたもの。 category/*\ncategory.rb などが生成する。カテゴリをキャッシュしたもの。 tdiary.conf\nWeb 上から設定すると、このファイルに書き込まれる。 volatile.tdr\n最新の記事の日付が記録されている？  *.td2 や *.tdc をエディタから直接修正した場合は、cache ディレクトリを削\n除しないと Web 上に反映されないようです。(注: 自己責任でお願いします。)","contentSnippet":"YYYY/YYYYMM.td2本文が記録される。 YYYY/YYYYMM.tdcツッコミやトラックバックが記録される。 YYYY/YYYYMMDD.tdr「本日のリンク元」が記録される。 YYYY/YYYYMM.tdr~tdiary-1.x の時は YYYYMM.tdr に「本日のリンク元」が記録されていた。そのバックアップファイル。 cache/*YYYY を処理しやすい形式でキャッシュしたもの。 category/*category.rb などが生成する。カテゴリをキャッシュしたもの。 tdiary.confWeb 上から設定すると、このファイルに書き込まれる。 volatile.tdr最新の記事の日付が記録されている？  *.td2 や *.tdc をエディタから直接修正した場合は、cache ディレクトリを削除しないと Web 上に反映されないようです。(注: 自己責任でお願いします。)","link":"https://masutaka.net/2008-04-19-1/","isoDate":"2008-04-19T00:00:00.000Z","dateMiliSeconds":1208563200000,"authorName":"masutaka"},{"title":"cygwin の DLL に依存しないビルド方法","content":"gcc に `-mno-cygwin&rsquo; オプションを付ければ OK\ncygwin1.dll をダイナミックリンクしない実行ファイルを作成できる。","contentSnippet":"gcc に `-mno-cygwin’ オプションを付ければ OKcygwin1.dll をダイナミックリンクしない実行ファイルを作成できる。","link":"https://masutaka.net/2008-04-13-1/","isoDate":"2008-04-13T00:00:00.000Z","dateMiliSeconds":1208044800000,"authorName":"masutaka"},{"title":"cvs commit mail ができるツールの総まとめ","content":"  cvs-info 平成 13 年度未踏ソフトウェアに採択された、UNIX domain socket を使った\n本格的なもの。ただ、今は配布していないみたい。残念。論文 の内容は、後\n述の情報を得る上でかなり参考になった。\n  log, commit_prep/log_accum cvs の配布物に含まれている perl スクリプト。commit_prep/log_accum は、\n一回の変更に対して一通だけメールを送るらしい。ただ、perl はほとんど読\nめないので、ちょっとした変更が難しい。\n  aftercommit ruby スクリプト。ディレクトリにまたがった commit をしても一通にしてく\nれるが、メールの内容がちょっとバグっている。あと、loginfo の設定で\n%{sVv} を &ldquo;%{sVv}&rdquo; に変えないとメールが飛ばなかった。ruby-1.4.3 の頃\nに作ったようなので、もうスクリプトが古いのかもしれない。\n  cvsmailer 中嶋さんという方が作った ruby スクリプト。配布元は見つからなかった。\n  cvsmail cvsmailer ととても良く似た名前の python スクリプト。一回の変更に対し\nて複数のメールを送ってしまうかもしれない。python はまったく読めないの\nで、少しの変更もできない。\n  ","contentSnippet":"cvs-info 平成 13 年度未踏ソフトウェアに採択された、UNIX domain socket を使った本格的なもの。ただ、今は配布していないみたい。残念。論文 の内容は、後述の情報を得る上でかなり参考になった。  log, commit_prep/log_accum cvs の配布物に含まれている perl スクリプト。commit_prep/log_accum は、一回の変更に対して一通だけメールを送るらしい。ただ、perl はほとんど読めないので、ちょっとした変更が難しい。  aftercommit ruby スクリプト。ディレクトリにまたがった commit をしても一通にしてくれるが、メールの内容がちょっとバグっている。あと、loginfo の設定で%{sVv} を “%{sVv}” に変えないとメールが飛ばなかった。ruby-1.4.3 の頃に作ったようなので、もうスクリプトが古いのかもしれない。  cvsmailer 中嶋さんという方が作った ruby スクリプト。配布元は見つからなかった。  cvsmail cvsmailer ととても良く似た名前の python スクリプト。一回の変更に対して複数のメールを送ってしまうかもしれない。python はまったく読めないので、少しの変更もできない。","link":"https://masutaka.net/2008-04-06-1/","isoDate":"2008-04-06T00:00:00.000Z","dateMiliSeconds":1207440000000,"authorName":"masutaka"},{"title":"ruby の文法チェック","content":"&ldquo;ruby -c スクリプトファイル&rdquo; で ruby の文法チェックができる。\n実行はしないので安心。","contentSnippet":"“ruby -c スクリプトファイル” で ruby の文法チェックができる。実行はしないので安心。","link":"https://masutaka.net/2008-04-05-1/","isoDate":"2008-04-05T00:00:00.000Z","dateMiliSeconds":1207353600000,"authorName":"masutaka"},{"title":"共有フォルダのショートカットアイコンを「マイネットワーク」に追加しない方法","content":"マイネットワークに、ショートカットが徐々に溜まっていくのが嫌だったので\n調べてみた。MMC(Microsoft Management Console)を使用して「グループポリ\nシー」スナップインを追加すると、以後追加されなくなるらしい。すでにある\nショートカットは、最近使ったファイルを削除する方法で行なうとのこと。\nURL: http://www.atmarkit.co.jp/fwin2k/win2ktips/055mnetscut/mnetscut.html ","contentSnippet":"マイネットワークに、ショートカットが徐々に溜まっていくのが嫌だったので調べてみた。MMC(Microsoft Management Console)を使用して「グループポリシー」スナップインを追加すると、以後追加されなくなるらしい。すでにあるショートカットは、最近使ったファイルを削除する方法で行なうとのこと。URL: http://www.atmarkit.co.jp/fwin2k/win2ktips/055mnetscut/mnetscut.html","link":"https://masutaka.net/2008-04-02-2/","isoDate":"2008-04-02T01:00:00.000Z","dateMiliSeconds":1207098000000,"authorName":"masutaka"},{"title":"NAS のファンから異音","content":"ずいぶん前から HD-H300LAN のファンから異音がしていて耐えられなくなって\nきたので、ここ を参考に分解してファンに少量の油を差してみた。(一度でも分\n解すると、メーカーの保証が受けられなくなる可能性がある点は注意！！)以前\nは電源投入直後から異音がしていたが、かなり改善できた。しばらく様子を見\nよう。関係ないけど、バックアップ用にもう一台欲しい。\n追記(2008-04-07):\n静かな時はとても静かだけど、時々うるさくなることがある。","contentSnippet":"ずいぶん前から HD-H300LAN のファンから異音がしていて耐えられなくなってきたので、ここ を参考に分解してファンに少量の油を差してみた。(一度でも分解すると、メーカーの保証が受けられなくなる可能性がある点は注意！！)以前は電源投入直後から異音がしていたが、かなり改善できた。しばらく様子を見よう。関係ないけど、バックアップ用にもう一台欲しい。追記(2008-04-07):静かな時はとても静かだけど、時々うるさくなることがある。","link":"https://masutaka.net/2008-04-02-1/","isoDate":"2008-04-02T00:00:00.000Z","dateMiliSeconds":1207094400000,"authorName":"masutaka"},{"title":"マクロ展開","content":"Emacs Lisp のマクロ展開は以下のようにするとよい。\n[2003-01-25-1] のでもできるけど、こちらの方が整形がきれい。\nこうすると、dolist() が実際に何をしているかとても良く分かる。\n(pp (macroexpand-all &#39;  (dolist (i &#39;(1 2 3))  i))) 参考情報: http://d.hatena.ne.jp/kazu-yamamoto/20071212/1197427102 ","contentSnippet":"Emacs Lisp のマクロ展開は以下のようにするとよい。[2003-01-25-1] のでもできるけど、こちらの方が整形がきれい。こうすると、dolist() が実際に何をしているかとても良く分かる。(pp (macroexpand-all '  (dolist (i '(1 2 3))  i))) 参考情報: http://d.hatena.ne.jp/kazu-yamamoto/20071212/1197427102","link":"https://masutaka.net/2008-03-23-5/","isoDate":"2008-03-23T04:00:00.000Z","dateMiliSeconds":1206244800000,"authorName":"masutaka"},{"title":"screen の文字コード","content":"通常は端末から取得されるが、意図した設定にならない場合は ~/.screenrc に\n|defencoding eucJP\nなどと書くとよい。文字コードの種類は &ldquo;man screen&rdquo; に記載されている。\n現在の設定は info コマンド(例: C-z i)で確認できる。","contentSnippet":"通常は端末から取得されるが、意図した設定にならない場合は ~/.screenrc に|defencoding eucJPなどと書くとよい。文字コードの種類は “man screen” に記載されている。現在の設定は info コマンド(例: C-z i)で確認できる。","link":"https://masutaka.net/2008-03-23-4/","isoDate":"2008-03-23T03:00:00.000Z","dateMiliSeconds":1206241200000,"authorName":"masutaka"},{"title":"cygterm でのログインシェルを変えたい","content":"Linux だと chsh でログインシェルを変えられるけど、cygwin には chsh は存\n在しない。ちょっと気持ち悪いが、c:\\cygwin\\etc\\passwd を直接変更すればよい。","contentSnippet":"Linux だと chsh でログインシェルを変えられるけど、cygwin には chsh は存在しない。ちょっと気持ち悪いが、c:\\cygwin\\etc\\passwd を直接変更すればよい。","link":"https://masutaka.net/2008-03-23-3/","isoDate":"2008-03-23T02:00:00.000Z","dateMiliSeconds":1206237600000,"authorName":"masutaka"},{"title":"cygwin ミラーサーバへのホップ数","content":"11 ftp.jaist.ac.jp\n16 ftp.u-aizu.ac.jp\nNG ring.aist.go.jp\n13 ring.astem.or.jp\nNG ring.exp.fujixerox.co.jp\n12 ring.nict.go.jp\n..\n21 www.cygwin.com ちなみに、以下を追加すると ruby-sqlite3 をインストールできる。\nftp://sunsite.dk/projects/cygwinports 参考情報: http://d.hatena.ne.jp/cuspos/20071111/1194722490 ","contentSnippet":"11 ftp.jaist.ac.jp16 ftp.u-aizu.ac.jpNG ring.aist.go.jp13 ring.astem.or.jpNG ring.exp.fujixerox.co.jp12 ring.nict.go.jp..21 www.cygwin.com ちなみに、以下を追加すると ruby-sqlite3 をインストールできる。ftp://sunsite.dk/projects/cygwinports 参考情報: http://d.hatena.ne.jp/cuspos/20071111/1194722490","link":"https://masutaka.net/2008-03-23-2/","isoDate":"2008-03-23T01:00:00.000Z","dateMiliSeconds":1206234000000,"authorName":"masutaka"},{"title":"dyna.example.com で pop サービス","content":"dyna.example.com で pop を使えるようにした。qpopper をインストールした\nだけ。これで Windows から wpbf でメールが来ているかの確認ができる(音で\n分かる)ようになった。popauth コマンドを使えばapop も使えるようだが、工\n夫しないとパスワードの管理がバラバラになるのでやめた。\nただし、wpbf は確認時に $MAIL を一旦リネームするというかなりイマイチな\n仕様で、Linux 側の gnubiff が勘違いしてメール受信の音を出してしまう。正\n確には、FAMD が反応しているようなので、gnubiff も pop で確認するように\nした。解決！","contentSnippet":"dyna.example.com で pop を使えるようにした。qpopper をインストールしただけ。これで Windows から wpbf でメールが来ているかの確認ができる(音で分かる)ようになった。popauth コマンドを使えばapop も使えるようだが、工夫しないとパスワードの管理がバラバラになるのでやめた。ただし、wpbf は確認時に $MAIL を一旦リネームするというかなりイマイチな仕様で、Linux 側の gnubiff が勘違いしてメール受信の音を出してしまう。正確には、FAMD が反応しているようなので、gnubiff も pop で確認するようにした。解決！","link":"https://masutaka.net/2008-03-23-1/","isoDate":"2008-03-23T00:00:00.000Z","dateMiliSeconds":1206230400000,"authorName":"masutaka"},{"title":"edebug でステップイン","content":"`i&rsquo; でステップインできる。\n知らなかった。今まで関数を探してブレイクを張っていた。。。","contentSnippet":"`i’ でステップインできる。知らなかった。今まで関数を探してブレイクを張っていた。。。","link":"https://masutaka.net/2008-03-22-1/","isoDate":"2008-03-22T00:00:00.000Z","dateMiliSeconds":1206144000000,"authorName":"masutaka"},{"title":"ネットワーク長を付記した IP アドレス","content":"例えば、172.24.0.0/17 と表記された場合は、まず 1 を最上位ビットから\n17 個敷き詰めてみる。\n|11111111 11111111 10000000 00000000\nビット反転する。\n|00000000 00000000 01111111 11111111\n10 進数に戻す。\n|0 0 127 255\n172.24.0.0/17 は 172.24.0.0〜172.24.127.255 の範囲だと分かった。\n(URL: IPアドレス )","contentSnippet":"例えば、172.24.0.0/17 と表記された場合は、まず 1 を最上位ビットから17 個敷き詰めてみる。|11111111 11111111 10000000 00000000ビット反転する。|00000000 00000000 01111111 1111111110 進数に戻す。|0 0 127 255172.24.0.0/17 は 172.24.0.0〜172.24.127.255 の範囲だと分かった。(URL: IPアドレス )","link":"https://masutaka.net/2008-03-17-4/","isoDate":"2008-03-17T03:00:00.000Z","dateMiliSeconds":1205722800000,"authorName":"masutaka"},{"title":"お腹のマッサージ","content":"よしだ整体院 の先生の話によると、通常は時計回りにマッサージすると良いらしい。\n下痢ぎみの時は反時計回り。","contentSnippet":"よしだ整体院 の先生の話によると、通常は時計回りにマッサージすると良いらしい。下痢ぎみの時は反時計回り。","link":"https://masutaka.net/2008-03-17-3/","isoDate":"2008-03-17T02:00:00.000Z","dateMiliSeconds":1205719200000,"authorName":"masutaka"},{"title":"手作りしょうゆキット","content":"アド街で紹介されていた。1 年でマイしょうゆができるらしい。\nウケ狙いのプレゼントに良いかも。\nURL: http://www.marukin-chuyu.com/kodawari/shoyu/kit.html ","contentSnippet":"アド街で紹介されていた。1 年でマイしょうゆができるらしい。ウケ狙いのプレゼントに良いかも。URL: http://www.marukin-chuyu.com/kodawari/shoyu/kit.html","link":"https://masutaka.net/2008-03-17-2/","isoDate":"2008-03-17T01:00:00.000Z","dateMiliSeconds":1205715600000,"authorName":"masutaka"},{"title":"IPv6 に思う by 山本和彦氏","content":"http://itpro.nikkeibp.co.jp/free/v6start/voice_v6/20010527/1/ ","contentSnippet":"http://itpro.nikkeibp.co.jp/free/v6start/voice_v6/20010527/1/","link":"https://masutaka.net/2008-03-17-1/","isoDate":"2008-03-17T00:00:00.000Z","dateMiliSeconds":1205712000000,"authorName":"masutaka"},{"title":"コマンドラインからのバイトコンパイル方法","content":"|% emacs -Q -batch -f batch-byte-compile .emacs.el","contentSnippet":"|% emacs -Q -batch -f batch-byte-compile .emacs.el","link":"https://masutaka.net/2008-03-13-1/","isoDate":"2008-03-13T00:00:00.000Z","dateMiliSeconds":1205366400000,"authorName":"masutaka"},{"title":"必要条件と十分条件","content":"命題「A ⇒ B」が真である時 A を B である為の十分条件 sufficient\ncondition と言い、B を A であるための必要条件 necessary condition と言う。\nある命題 A が成り立つようなものの範囲を真理集合 truth set というが、\nA ⇒ B が真である場合の A, B の真理集合の関係は A ⊆ B となってい\nる(Venn 図で描くと下の図の通り)。\nつまり、B の範囲に入る為には A であれば十分であり、A の範囲に入る為には\nB であることが先ず必要だからというのが、その名の由来であるという。\nURL: http://phaos.hp.infoseek.co.jp/preparations/condition.htm ","contentSnippet":"命題「A ⇒ B」が真である時 A を B である為の十分条件 sufficientcondition と言い、B を A であるための必要条件 necessary condition と言う。ある命題 A が成り立つようなものの範囲を真理集合 truth set というが、A ⇒ B が真である場合の A, B の真理集合の関係は A ⊆ B となっている(Venn 図で描くと下の図の通り)。つまり、B の範囲に入る為には A であれば十分であり、A の範囲に入る為にはB であることが先ず必要だからというのが、その名の由来であるという。URL: http://phaos.hp.infoseek.co.jp/preparations/condition.htm","link":"https://masutaka.net/2008-03-11-1/","isoDate":"2008-03-11T00:00:00.000Z","dateMiliSeconds":1205193600000,"authorName":"masutaka"},{"title":"emacs C++ 開発環境","content":" emacs C++ 開発環境 gtag のススメ、Visual Studio のような gdb-mode など。\n元ネタは小関さんの「過負荷な日々 」  ","contentSnippet":"emacs C++ 開発環境 gtag のススメ、Visual Studio のような gdb-mode など。元ネタは小関さんの「過負荷な日々 」","link":"https://masutaka.net/2008-03-09-2/","isoDate":"2008-03-09T01:00:00.000Z","dateMiliSeconds":1205024400000,"authorName":"masutaka"},{"title":"高度信頼設計","content":" フォールトトレランス(障害許容)\nシステムの信頼性を高めること。\n障害が発生してもシステムが停止しないようにすること。\nシステムを二重化するとか、運用しながら修復するとか。 フォールトアボイダンス(障害回避)\n信頼性の高いシステムを構築すること。\n信頼性の高い部品を使用するとか、十分なテストをするとか。 リカバリー(障害回復)\nいち早くシステムを復旧できるようにすること。\nバックアップを取ること。  ","contentSnippet":"フォールトトレランス(障害許容)システムの信頼性を高めること。障害が発生してもシステムが停止しないようにすること。システムを二重化するとか、運用しながら修復するとか。 フォールトアボイダンス(障害回避)信頼性の高いシステムを構築すること。信頼性の高い部品を使用するとか、十分なテストをするとか。 リカバリー(障害回復)いち早くシステムを復旧できるようにすること。バックアップを取ること。","link":"https://masutaka.net/2008-03-09-1/","isoDate":"2008-03-09T00:00:00.000Z","dateMiliSeconds":1205020800000,"authorName":"masutaka"},{"title":"がっつりスクロールすることがある","content":"scroll-conservatively に 1 を設定して、next-line でバッファを読み進めて\nいくと、(当然だが) 1 行ずつスクロールできる。\nただ、ウィンドウの一番下にカーソルがある状態で、ウィンドウの幅より大き\nく、折り返しが発生している行に進むと、scroll-conservatively のデフォル\nト(0)と同じ動きをしてしまう。確認した Emacs は 22.1。これはバグ？\nということを mule-ja に 2/25 に報告したが、返信なし&hellip;。送るべき ML を\n間違えたか。まさか、emacs-devel に送るわけにもいかないし&hellip;。","contentSnippet":"scroll-conservatively に 1 を設定して、next-line でバッファを読み進めていくと、(当然だが) 1 行ずつスクロールできる。ただ、ウィンドウの一番下にカーソルがある状態で、ウィンドウの幅より大きく、折り返しが発生している行に進むと、scroll-conservatively のデフォルト(0)と同じ動きをしてしまう。確認した Emacs は 22.1。これはバグ？ということを mule-ja に 2/25 に報告したが、返信なし…。送るべき ML を間違えたか。まさか、emacs-devel に送るわけにもいかないし…。","link":"https://masutaka.net/2008-03-03-1/","isoDate":"2008-03-03T00:00:00.000Z","dateMiliSeconds":1204502400000,"authorName":"masutaka"},{"title":"ポケットティッシュケース","content":"2/11 に買った無印のアクリルポケットティッシュケース が中々良い。\n底面がマグネットで本体に付くようになっていて、底からティッシュを追加で\nきる。ポケットティッシュって駅とかで受け取っても、使うタイミングに困る\nのだけれどもこれなら良いね。会社で大活躍です。家用にも買おうかな？\n希望を言えば、アクリルではなくもう少し重い素材のほうが良いと思う。ティッ\nシュが少なくなってくると、ケースを押さえないと取り出せなさそう。実家に\nあったものは鉄かステンレス素材だったので、安定感があった。","contentSnippet":"2/11 に買った無印のアクリルポケットティッシュケース が中々良い。底面がマグネットで本体に付くようになっていて、底からティッシュを追加できる。ポケットティッシュって駅とかで受け取っても、使うタイミングに困るのだけれどもこれなら良いね。会社で大活躍です。家用にも買おうかな？希望を言えば、アクリルではなくもう少し重い素材のほうが良いと思う。ティッシュが少なくなってくると、ケースを押さえないと取り出せなさそう。実家にあったものは鉄かステンレス素材だったので、安定感があった。","link":"https://masutaka.net/2008-03-02-1/","isoDate":"2008-03-02T00:00:00.000Z","dateMiliSeconds":1204416000000,"authorName":"masutaka"},{"title":"PIXUS 560i","content":"プリンタなんてこのくらい小さいもので良かったんだよなあ。今のは大きすぎ。\nでも使わないから、買い直すほどでもないよなあ。大きすぎる上に詰まっ\nて使えなくなってしまったから、とっても邪魔。安く修理できたら売りたい。","contentSnippet":"プリンタなんてこのくらい小さいもので良かったんだよなあ。今のは大きすぎ。でも使わないから、買い直すほどでもないよなあ。大きすぎる上に詰まって使えなくなってしまったから、とっても邪魔。安く修理できたら売りたい。","link":"https://masutaka.net/2008-02-28-3/","isoDate":"2008-02-28T02:00:00.000Z","dateMiliSeconds":1204164000000,"authorName":"masutaka"},{"title":"メール本文に ISO-2022-JP を利用することになった背景","content":"mew-dist 355 (古い&hellip;) から一部抜粋。\n|仕様では通常、シンタックスとセマンティクスを定義します。\n|\n|RFC822 では、ヘッダのセマンティクスもボディのセマンティクスも ASCII と\n|定めています。ASCII とは、0-127 の範囲を ASCII 表にある文字として解釈\n|するというセマンティクスです。ただ、RFC822 の執筆当時 Dave が気が付い\n|ていた犯しやすいシンタックス上の問題点(単一の CR など)は明確に排除しま\n|した。\n|\n|日本で本文に ISO-2022-JP を入れたのは、シンタックス上は問題ありません\n|が、セマンティクスを破っています。ASCII 文字列中に ESC シーケンスが現\n|れても、それは単なる ESC シーケンスですから、日本語として取り扱われま\n|せん。また、ヨーロッパでは、本文に 0-255 までを許し、これを Latin-1 と\n|解釈することにしました。これはシンタックスもセマンティックスも破ってい\n|ます。しかし、所詮、日本で ISO-2022-JP を利用しようとした背景は、ヨー\n|ロッパが 8bit 領域を使っていたからにほかなりません。日本でも EUC Japan\n|を標準に選ぶ可能性はあったということです。\nシンタックスは「構文」、セマンティクスは「データの意味」のことらしい。へぇ〜。\nGartner Column：第11回 そもそも「セマンティクス」とは何だろう？ が参考になるかも。\n追記(2009-04-05):\n関連する話題があったので、貼り付けておきますね。\n(URL: 日本語のe-mail、ISO-2022-JP以外のcharsetを使うのは是か非か - スラッシュドット・ジャパン )\n個人的には ISO-2022-JP で表現できない内容なら、Unicode で送るのはまっ\nたく問題ないと思います。ただ上の記事にあるように、本文に 8bit 目を\n使うのはシンタックスを破ることになるので、base64 符号化は必須です。","contentSnippet":"mew-dist 355 (古い…) から一部抜粋。|仕様では通常、シンタックスとセマンティクスを定義します。||RFC822 では、ヘッダのセマンティクスもボディのセマンティクスも ASCII と|定めています。ASCII とは、0-127 の範囲を ASCII 表にある文字として解釈|するというセマンティクスです。ただ、RFC822 の執筆当時 Dave が気が付い|ていた犯しやすいシンタックス上の問題点(単一の CR など)は明確に排除しま|した。||日本で本文に ISO-2022-JP を入れたのは、シンタックス上は問題ありません|が、セマンティクスを破っています。ASCII 文字列中に ESC シーケンスが現|れても、それは単なる ESC シーケンスですから、日本語として取り扱われま|せん。また、ヨーロッパでは、本文に 0-255 までを許し、これを Latin-1 と|解釈することにしました。これはシンタックスもセマンティックスも破ってい|ます。しかし、所詮、日本で ISO-2022-JP を利用しようとした背景は、ヨー|ロッパが 8bit 領域を使っていたからにほかなりません。日本でも EUC Japan|を標準に選ぶ可能性はあったということです。シンタックスは「構文」、セマンティクスは「データの意味」のことらしい。へぇ〜。Gartner Column：第11回 そもそも「セマンティクス」とは何だろう？ が参考になるかも。追記(2009-04-05):関連する話題があったので、貼り付けておきますね。(URL: 日本語のe-mail、ISO-2022-JP以外のcharsetを使うのは是か非か - スラッシュドット・ジャパン )個人的には ISO-2022-JP で表現できない内容なら、Unicode で送るのはまったく問題ないと思います。ただ上の記事にあるように、本文に 8bit 目を使うのはシンタックスを破ることになるので、base64 符号化は必須です。","link":"https://masutaka.net/2008-02-28-2/","isoDate":"2008-02-28T01:00:00.000Z","dateMiliSeconds":1204160400000,"authorName":"masutaka"},{"title":"Mew + Namazu (mew-nmz.el)","content":"「To: に masutaka.net@gmail.com を含む」または「ほげほげ」が含まれたメールを検索。\n|to=masutaka.net@gmail.com or ほげほげ\n「To: に masutaka.net@gmail.com を含む」かつ「ほげほげ」が含まれたメールを検索。\n|to=masutaka.net@gmail.com and ほげほげ\ncc=masutaka.net@gmail.com を使う場合は ~/Namazu/mknmz-inc.pl の $SEARCH_FIELD を修正\nして、インデックスを作り直す必要がある。他にもパラメータを追加したほうが良いかもしれない。\nmew-dist 28132 参照のこと。\nインデックス作り直しに関連した話題をもう一つ。\nNamazu-2.0.17 以降であれば `&ndash;decode-base64&rsquo; が使える。メリットは以下の\nとおり。こちらも mew-dist 28132 参照のこと。\n|・日本語のメールなんだけど、UTF-8 + Base64(Q も可) なものも検索できる。\n|・添付された MS-Word などの中身も検索できる。","contentSnippet":"「To: に masutaka.net@gmail.com を含む」または「ほげほげ」が含まれたメールを検索。|to=masutaka.net@gmail.com or ほげほげ「To: に masutaka.net@gmail.com を含む」かつ「ほげほげ」が含まれたメールを検索。|to=masutaka.net@gmail.com and ほげほげcc=masutaka.net@gmail.com を使う場合は ~/Namazu/mknmz-inc.pl の $SEARCH_FIELD を修正して、インデックスを作り直す必要がある。他にもパラメータを追加したほうが良いかもしれない。mew-dist 28132 参照のこと。インデックス作り直しに関連した話題をもう一つ。Namazu-2.0.17 以降であれば `–decode-base64’ が使える。メリットは以下のとおり。こちらも mew-dist 28132 参照のこと。|・日本語のメールなんだけど、UTF-8 + Base64(Q も可) なものも検索できる。|・添付された MS-Word などの中身も検索できる。","link":"https://masutaka.net/2008-02-28-1/","isoDate":"2008-02-28T00:00:00.000Z","dateMiliSeconds":1204156800000,"authorName":"masutaka"},{"title":"The Kitchen Salvatore Cuomo","content":"六本木ヒルズにある、サルバトーレという人がやっているイタリア料理屋\nテレビでやっていて気になったのでメモメモ。\nhttp://www.ystable.co.jp/restaurant/thekitchen/roppongi.html ","contentSnippet":"六本木ヒルズにある、サルバトーレという人がやっているイタリア料理屋テレビでやっていて気になったのでメモメモ。http://www.ystable.co.jp/restaurant/thekitchen/roppongi.html","link":"https://masutaka.net/2008-01-30-1/","isoDate":"2008-01-30T00:00:00.000Z","dateMiliSeconds":1201651200000,"authorName":"masutaka"},{"title":"man の -w オプション","content":"最初にヒットした man ファイルを表示してくれる。(debian-users:50110)\n|% man -w ls\n|/usr/share/man/ja/man1/ls.1.gz","contentSnippet":"最初にヒットした man ファイルを表示してくれる。(debian-users:50110)|% man -w ls|/usr/share/man/ja/man1/ls.1.gz","link":"https://masutaka.net/2008-01-29-1/","isoDate":"2008-01-29T00:00:00.000Z","dateMiliSeconds":1201564800000,"authorName":"masutaka"},{"title":"スクリプト処理","content":"|#!/usr/local/bin/emacs &ndash;script\n|\n|(message &ldquo;Hello, world.&rdquo;)","contentSnippet":"|#!/usr/local/bin/emacs –script||(message “Hello, world.”)","link":"https://masutaka.net/2008-01-26-1/","isoDate":"2008-01-26T00:00:00.000Z","dateMiliSeconds":1201305600000,"authorName":"masutaka"},{"title":"svnserve を止めて、http 経由でアクセスする","content":"[2008-01-12-1] の改良版。\nhttp 経由でのアクセスのほうがカッコいい気がしたので、設定してみた。\n  mod_dav_svn をインストールした。\n|# apt-get install libapache2-svn\n  /etc/apache2/mods-available/dav_svn.conf に以下のみを記載した。\n  &lt;Location /svn&gt; DAV svn SVNPath /usr/local/SVNROOT AuthType Basic AuthName &#34;Subversion Repository&#34; AuthUserFile /usr/local/SVNROOT/conf/dav_svn.passwd &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt; Require valid-user &lt;/LimitExcept&gt; &lt;/Location&gt;  ユーザ認証ファイルを作成した。\n|# htpasswd2 -c /usr/local/SVNROOT/conf/dav_svn.passwd masutaka\n  SVNROOT のオーナーとグループを、Apache を動かしている www-data さんにした。\n|# chown -R www-data:www-data /usr/local/SVNROOT\n  Apache を再起動した。\n|# /etc/init.d/apache2 restart\n  後始末\n  6-1.","contentSnippet":"[2008-01-12-1] の改良版。http 経由でのアクセスのほうがカッコいい気がしたので、設定してみた。  mod_dav_svn をインストールした。|# apt-get install libapache2-svn  /etc/apache2/mods-available/dav_svn.conf に以下のみを記載した。  <Location /svn> DAV svn SVNPath /usr/local/SVNROOT AuthType Basic AuthName \"Subversion Repository\" AuthUserFile /usr/local/SVNROOT/conf/dav_svn.passwd <LimitExcept GET PROPFIND OPTIONS REPORT> Require valid-user </LimitExcept> </Location>  ユーザ認証ファイルを作成した。|# htpasswd2 -c /usr/local/SVNROOT/conf/dav_svn.passwd masutaka  SVNROOT のオーナーとグループを、Apache を動かしている www-data さんにした。|# chown -R www-data:www-data /usr/local/SVNROOT  Apache を再起動した。|# /etc/init.d/apache2 restart  後始末  6-1.","link":"https://masutaka.net/2008-01-23-1/","isoDate":"2008-01-23T00:00:00.000Z","dateMiliSeconds":1201046400000,"authorName":"masutaka"},{"title":"電源 OFF 時の Suica","content":"[2008-01-21-1] の続き。\nSuica は電源が入っていなくても使うことができた。ってことは、遠隔オート\nロックで電源を切る前に、手動で電源を切られてしまったら、Suica の不正使\n用を止めることはできないのね..。\n・遠隔オートロックで電源 OFF した状態で、Suica は使えるのか？\n・電池を抜いた状態で、Suica は使えるのか？\nを検証予定。","contentSnippet":"[2008-01-21-1] の続き。Suica は電源が入っていなくても使うことができた。ってことは、遠隔オートロックで電源を切る前に、手動で電源を切られてしまったら、Suica の不正使用を止めることはできないのね..。・遠隔オートロックで電源 OFF した状態で、Suica は使えるのか？・電池を抜いた状態で、Suica は使えるのか？を検証予定。","link":"https://masutaka.net/2008-01-22-1/","isoDate":"2008-01-22T00:00:00.000Z","dateMiliSeconds":1200960000000,"authorName":"masutaka"},{"title":"遠隔オートロック成功","content":"[2008-01-19-2] の続き。\n「1 分間の着信を 3 回する」のではなくて、「1 分以内に着信を 3 回する」\nでした&hellip;。au ショップのお姉さんも、オレと同じ勘違いをしてた。ｗ\n成功すると携帯の電源が切れ、次回電源を入れた時にパスワードを入力しない\nと、何も出来ない状態にしてくれる。Felica ロックもしてくれる。これは、パ\nスワードを入力しないと Felica(オサイフケータイのことね) が使用出来ない\nというもの。これでセキュリティはそこそこ大丈夫なのかな。","contentSnippet":"[2008-01-19-2] の続き。「1 分間の着信を 3 回する」のではなくて、「1 分以内に着信を 3 回する」でした…。au ショップのお姉さんも、オレと同じ勘違いをしてた。ｗ成功すると携帯の電源が切れ、次回電源を入れた時にパスワードを入力しないと、何も出来ない状態にしてくれる。Felica ロックもしてくれる。これは、パスワードを入力しないと Felica(オサイフケータイのことね) が使用出来ないというもの。これでセキュリティはそこそこ大丈夫なのかな。","link":"https://masutaka.net/2008-01-21-1/","isoDate":"2008-01-21T00:00:00.000Z","dateMiliSeconds":1200873600000,"authorName":"masutaka"},{"title":"TeraTerm での ssh の自動ログイン","content":"[2007-12-20-2] の続き。\nマクロではなく、TeraTerm Menu から設定したらすんなりできてしまった。\nついでに cygterm も TeraTerm Menu に設定。タスクバーのクイック起動もすっ\nきりしたし、Debian の telnetd もアンインストールできたので、とても良い\n感じ。\n(参考情報: teraterm(ssh2対応) + 公開鍵認証 )","contentSnippet":"[2007-12-20-2] の続き。マクロではなく、TeraTerm Menu から設定したらすんなりできてしまった。ついでに cygterm も TeraTerm Menu に設定。タスクバーのクイック起動もすっきりしたし、Debian の telnetd もアンインストールできたので、とても良い感じ。(参考情報: teraterm(ssh2対応) + 公開鍵認証 )","link":"https://masutaka.net/2008-01-20-1/","isoDate":"2008-01-20T00:00:00.000Z","dateMiliSeconds":1200787200000,"authorName":"masutaka"},{"title":"遠隔オートロック","content":"モバイル Suica を使うことにしたので、携帯のセキュリティも気をつけなくちゃ\nということで、W51CA で遠隔オートロックを設定した。でも、できねえ〜。(涙)\nもちろん、発信者着信番号通知もやってる。なぜ？\n電源 OFF したら、次回 ON したときにパスワードが必要な設定をしているから、\nまあいいか。。。Suica だから最大 10,000 円の被害で済むし&hellip;。","contentSnippet":"モバイル Suica を使うことにしたので、携帯のセキュリティも気をつけなくちゃということで、W51CA で遠隔オートロックを設定した。でも、できねえ〜。(涙)もちろん、発信者着信番号通知もやってる。なぜ？電源 OFF したら、次回 ON したときにパスワードが必要な設定をしているから、まあいいか。。。Suica だから最大 10,000 円の被害で済むし…。","link":"https://masutaka.net/2008-01-19-2/","isoDate":"2008-01-19T01:00:00.000Z","dateMiliSeconds":1200704400000,"authorName":"masutaka"},{"title":"モバイル Suica","content":"電子マネーというものをやってみたくて、W51CA で「モバイル Suica」を始め\nてみた。クレジットカードを登録することで、携帯から Suica のチャージと利\n用ができるサービス。定期券も使えるみたい。\n「EASY モバイル Suica」というものもあり、クレジットカード不要(よって\nチャージが面倒)、定期が購入できないなどの違いがある。ただし、あとからク\nレジットカード情報を登録すると、アップグレード可能。\n(URL: W51CA )\n(URL: JR東日本:モバイルSuica )\n(URL: モバイルSuica )\nカードタイプの Suica の払い戻しは、JR 東日本のみどりの窓口などで行える。\n残額が 210 円以下の場合は、手数料を取られないとのこと。\n(URL: JR東日本:Suica 払い戻し )","contentSnippet":"電子マネーというものをやってみたくて、W51CA で「モバイル Suica」を始めてみた。クレジットカードを登録することで、携帯から Suica のチャージと利用ができるサービス。定期券も使えるみたい。「EASY モバイル Suica」というものもあり、クレジットカード不要(よってチャージが面倒)、定期が購入できないなどの違いがある。ただし、あとからクレジットカード情報を登録すると、アップグレード可能。(URL: W51CA )(URL: JR東日本:モバイルSuica )(URL: モバイルSuica )カードタイプの Suica の払い戻しは、JR 東日本のみどりの窓口などで行える。残額が 210 円以下の場合は、手数料を取られないとのこと。(URL: JR東日本:Suica 払い戻し )","link":"https://masutaka.net/2008-01-19-1/","isoDate":"2008-01-19T00:00:00.000Z","dateMiliSeconds":1200700800000,"authorName":"masutaka"},{"title":"svnserve 経由でのアクセスに認証を付ける","content":"[2005-11-07-2] の改良版。\nsvnserve 経由でアクセスすると、ユーザ名が残らなくて気持ち悪いので\n簡易認証をすることにした。\n/home/masutaka/SVNROOT/conf/svnserve.conf に以下を記載。\n|[general]\n|anon-access = none\n|auth-access = write\n|password-db = passwd\n/home/masutaka/SVNROOT/conf/passwd にユーザ名とパスワードを記載。\n|[users]\n|masutaka = XXXXXXXX","contentSnippet":"[2005-11-07-2] の改良版。svnserve 経由でアクセスすると、ユーザ名が残らなくて気持ち悪いので簡易認証をすることにした。/home/masutaka/SVNROOT/conf/svnserve.conf に以下を記載。|[general]|anon-access = none|auth-access = write|password-db = passwd/home/masutaka/SVNROOT/conf/passwd にユーザ名とパスワードを記載。|[users]|masutaka = XXXXXXXX","link":"https://masutaka.net/2008-01-12-1/","isoDate":"2008-01-12T00:00:00.000Z","dateMiliSeconds":1200096000000,"authorName":"masutaka"},{"title":"オイルサーディンの調理例","content":"オイルサーディンでよく作るのは、\n缶開けてオイルを捨てて、レモン汁(市販の瓶入りで OK) を\nたっぷり注ぎ込み、粗挽き黒こしょうもたっぷり振り、\nその上をサーディンの隙間を埋めるようにマヨネーズを\n塗り込んで、缶ごとガスコンロの魚焼きグリルで、\nマヨに軽く焦げ目が付くまで焼く。\nその後、粉チーズをたっぷり乗せてから、再度加熱。\n缶ごと皿に移して、酒と一緒に。\n粉チーズに、刻みパセリとパン粉とオリーブオイルを\n混ぜておくと、さらにウマー\nURL: http://food8.2ch.net/test/read.cgi/sake/1190305928/294 ","contentSnippet":"オイルサーディンでよく作るのは、缶開けてオイルを捨てて、レモン汁(市販の瓶入りで OK) をたっぷり注ぎ込み、粗挽き黒こしょうもたっぷり振り、その上をサーディンの隙間を埋めるようにマヨネーズを塗り込んで、缶ごとガスコンロの魚焼きグリルで、マヨに軽く焦げ目が付くまで焼く。その後、粉チーズをたっぷり乗せてから、再度加熱。缶ごと皿に移して、酒と一緒に。粉チーズに、刻みパセリとパン粉とオリーブオイルを混ぜておくと、さらにウマーURL: http://food8.2ch.net/test/read.cgi/sake/1190305928/294","link":"https://masutaka.net/2007-12-24-1/","isoDate":"2007-12-24T00:00:00.000Z","dateMiliSeconds":1198454400000,"authorName":"masutaka"},{"title":"TeraTerm で ssh や cygwin を動かす","content":"最新の 4.56 が出ていたので、インストールしてみた。ssh が使えるようになっ\nていたのは知っていたけど、cygwin の端末としても使えるようになっていたのね。スゲー。\nデフォルトの MS 明朝だと、表示がよく崩れるので、Terminal に変えた方が良いかも。\nマクロを使った ssh の自動ログインの方法はまだよく分からなかったので、\nとりあえず telnet で我慢することにした。(今まで使っていた telnet の自動\nログインマクロ、login.ttl はそのまま使うことができた。)\n 以下のような Windows のショートカットを作った。\n|リンク先: &ldquo;C:\\Program Files\\teraterm\\ttermpro.exe&rdquo; /F=%HOME%.teraterm\\teraterm2.ini /M=%HOME%.teraterm\\login.ttl\n|作業フォルダ: %HOME%  cygwin のほうもなかなか良さそう。rxvt は日本語が表示できなかったので、大きな前進かも。\n  c:\\Program Files\\teraterm\\cygterm.cfg を以下の通りに変更。\n|TERM = ttermpro.exe %s %d /E /KR=SJIS /KT=SJIS /nossh\n|↓\n|TERM = ttermpro.exe %s %d /E /KR=SJIS /KT=SJIS /nossh /F=c:\\home\\masutaka.teraterm\\cygterm.ini\n  以下のような Windows のショートカットを作った。\n|リンク先: &ldquo;C:\\Program Files\\teraterm\\cygterm.exe&rdquo;\n|作業フォルダ: %HOME%","contentSnippet":"最新の 4.56 が出ていたので、インストールしてみた。ssh が使えるようになっていたのは知っていたけど、cygwin の端末としても使えるようになっていたのね。スゲー。デフォルトの MS 明朝だと、表示がよく崩れるので、Terminal に変えた方が良いかも。マクロを使った ssh の自動ログインの方法はまだよく分からなかったので、とりあえず telnet で我慢することにした。(今まで使っていた telnet の自動ログインマクロ、login.ttl はそのまま使うことができた。) 以下のような Windows のショートカットを作った。|リンク先: “C:\\Program Files\\teraterm\\ttermpro.exe” /F=%HOME%.teraterm\\teraterm2.ini /M=%HOME%.teraterm\\login.ttl|作業フォルダ: %HOME%  cygwin のほうもなかなか良さそう。rxvt は日本語が表示できなかったので、大きな前進かも。  c:\\Program Files\\teraterm\\cygterm.cfg を以下の通りに変更。|TERM = ttermpro.exe %s %d /E /KR=SJIS /KT=SJIS /nossh|↓|TERM = ttermpro.exe %s %d /E /KR=SJIS /KT=SJIS /nossh /F=c:\\home\\masutaka.teraterm\\cygterm.ini  以下のような Windows のショートカットを作った。|リンク先: “C:\\Program Files\\teraterm\\cygterm.exe”|作業フォルダ: %HOME%","link":"https://masutaka.net/2007-12-20-2/","isoDate":"2007-12-20T01:00:00.000Z","dateMiliSeconds":1198112400000,"authorName":"masutaka"},{"title":"emacsclient で Emacs を遠隔操作","content":"Debian で既に navi2ch on Emacs を起動していた場合、Windows からログイン\nしてもう一つ Emacs を立ち上げると、navi2ch が起動できないので、\nemacsclient を使って Emacs を遠隔操作することにした。\n  Debian で起動している Emacs であらかじめ M-x server-start しておく。\n  TeraTerm で以下を実行する。Emacs のフレームが Windows 側にポコッと出現する。\n最後の ~(チルダ) はダミー。引数を指定しないといけないみたい。\n|% emacsclient &ndash;display=pana-b:0.0 -n ~\n  [2002-12-12-2] でも似たようなことをやっていたんだけど、だいぶ洗練されてきた。","contentSnippet":"Debian で既に navi2ch on Emacs を起動していた場合、Windows からログインしてもう一つ Emacs を立ち上げると、navi2ch が起動できないので、emacsclient を使って Emacs を遠隔操作することにした。  Debian で起動している Emacs であらかじめ M-x server-start しておく。  TeraTerm で以下を実行する。Emacs のフレームが Windows 側にポコッと出現する。最後の ~(チルダ) はダミー。引数を指定しないといけないみたい。|% emacsclient –display=pana-b:0.0 -n ~  [2002-12-12-2] でも似たようなことをやっていたんだけど、だいぶ洗練されてきた。","link":"https://masutaka.net/2007-12-20-1/","isoDate":"2007-12-20T00:00:00.000Z","dateMiliSeconds":1198108800000,"authorName":"masutaka"},{"title":"Xming の導入","content":"以下を実行して、インストールした。SSH は無効にした。\nXming-6-9-0-31-setup.exe\nXming-fonts-7-3-0-22-setup.exe\n  *.pcf.Z フォントを Solaris9 から持ってきて、以下のように配置した。\nipamona だけは Debian から持ってきた。\n|C:\\usr\\local\\share\\fonts\\X11\\intlfonts\n|C:\\usr\\local\\share\\fonts\\X11\\ipamona\n|C:\\usr\\local\\share\\fonts\\X11\\jisx0213\n|C:\\usr\\local\\share\\fonts\\X11\\marumoji\n|C:\\usr\\local\\share\\fonts\\X11\\monafont\n|C:\\usr\\local\\share\\fonts\\X11\\shinonome\n  各ディレクトリにある *.pcf.Z を Debian の uncompress で解凍し、\n各ディレクトリで mkfontdir した。\n  C:\\Program Files\\Xming\\font-dirs に以下を記載した。\n|C:\\usr\\local\\share\\fonts\\X11\\intlfonts\n|C:\\usr\\local\\share\\fonts\\X11\\ipamona\n|C:\\usr\\local\\share\\fonts\\X11\\jisx0213\n|C:\\usr\\local\\share\\fonts\\X11\\marumoji\n|C:\\usr\\local\\share\\fonts\\X11\\monafont\n|C:\\usr\\local\\share\\fonts\\X11\\shinonome\n  C:\\Program Files\\Xming\\X0.hosts に以下を記載した。\nvergil は Linux マシン名。\n|localhost\n|vergil\n  Xming を実行した。\n  TeraTerm で Debian にログインし、以下を実行した。\nnero-b は Windows マシン名。","contentSnippet":"以下を実行して、インストールした。SSH は無効にした。Xming-6-9-0-31-setup.exeXming-fonts-7-3-0-22-setup.exe  *.pcf.Z フォントを Solaris9 から持ってきて、以下のように配置した。ipamona だけは Debian から持ってきた。|C:\\usr\\local\\share\\fonts\\X11\\intlfonts|C:\\usr\\local\\share\\fonts\\X11\\ipamona|C:\\usr\\local\\share\\fonts\\X11\\jisx0213|C:\\usr\\local\\share\\fonts\\X11\\marumoji|C:\\usr\\local\\share\\fonts\\X11\\monafont|C:\\usr\\local\\share\\fonts\\X11\\shinonome  各ディレクトリにある *.pcf.Z を Debian の uncompress で解凍し、各ディレクトリで mkfontdir した。  C:\\Program Files\\Xming\\font-dirs に以下を記載した。|C:\\usr\\local\\share\\fonts\\X11\\intlfonts|C:\\usr\\local\\share\\fonts\\X11\\ipamona|C:\\usr\\local\\share\\fonts\\X11\\jisx0213|C:\\usr\\local\\share\\fonts\\X11\\marumoji|C:\\usr\\local\\share\\fonts\\X11\\monafont|C:\\usr\\local\\share\\fonts\\X11\\shinonome  C:\\Program Files\\Xming\\X0.hosts に以下を記載した。vergil は Linux マシン名。|localhost|vergil  Xming を実行した。  TeraTerm で Debian にログインし、以下を実行した。nero-b は Windows マシン名。","link":"https://masutaka.net/2007-12-18-1/","isoDate":"2007-12-18T00:00:00.000Z","dateMiliSeconds":1197936000000,"authorName":"masutaka"},{"title":"画像が縮小表示される","content":"FireFox 2.0.11 で、画像が常に画面サイズに縮小されるようになってしまった。\nFireFox 1.0.4 では、メニューから変更できたんだけど、about:config でしか\n変更できなくなったみたい。\n|ロケーションバーに about:config と入力し、\n|browser.enable_automatic_image_resizing を true から false に変更。","contentSnippet":"FireFox 2.0.11 で、画像が常に画面サイズに縮小されるようになってしまった。FireFox 1.0.4 では、メニューから変更できたんだけど、about:config でしか変更できなくなったみたい。|ロケーションバーに about:config と入力し、|browser.enable_automatic_image_resizing を true から false に変更。","link":"https://masutaka.net/2007-12-17-1/","isoDate":"2007-12-17T00:00:00.000Z","dateMiliSeconds":1197849600000,"authorName":"masutaka"},{"title":"デビルメイクライ3","content":"スタイリッシュランク\nD...Dope! / ばか者、まぬけな C...Crazy! / 狂った、いかれた B...Blast! / ぶっ飛んだ、爆発 A...Alright! / 申し分ない、結構な S...Sweet! / 最高の、いかした SS...Show time! / ショータイムだ! SSS...Stylish! / スタイリッシュ！！ 挑発(ダンテ)\nD〜C...Com&#39;n winp. / 来な、ノロマ野郎。 B〜A...Come and get me. / 捕まえてみな。 S〜SS...You scared? / お前ら、ビビッてんのか？ SSS...Crazy?Ha!! / イカレてるって？ハッ！！ SSSレア...Sweet!!Baby!!! / 最高だぜ、ベイビー！！ 挑発(バージル)\n閻魔刀装備時..You shall die. / 死ぬぞ貴様。 フォースエッジ、ベオウルフ装備時.. ...Come on. / …来い。 Hu...What&#39;s wrong. / …どうかしたか？ Hu...I&#39;m boring. / …つまらん。 ","contentSnippet":"スタイリッシュランクD...Dope! / ばか者、まぬけな C...Crazy! / 狂った、いかれた B...Blast! / ぶっ飛んだ、爆発 A...Alright! / 申し分ない、結構な S...Sweet! / 最高の、いかした SS...Show time! / ショータイムだ! SSS...Stylish! / スタイリッシュ！！ 挑発(ダンテ)D〜C...Com'n winp. / 来な、ノロマ野郎。 B〜A...Come and get me. / 捕まえてみな。 S〜SS...You scared? / お前ら、ビビッてんのか？ SSS...Crazy?Ha!! / イカレてるって？ハッ！！ SSSレア...Sweet!!Baby!!! / 最高だぜ、ベイビー！！ 挑発(バージル)閻魔刀装備時..You shall die. / 死ぬぞ貴様。 フォースエッジ、ベオウルフ装備時.. ...Come on. / …来い。 Hu...What's wrong. / …どうかしたか？ Hu...I'm boring. / …つまらん。","link":"https://masutaka.net/2007-11-20-1/","isoDate":"2007-11-20T00:00:00.000Z","dateMiliSeconds":1195516800000,"authorName":"masutaka"},{"title":"カテゴリ整理","content":"[2007-07-01-1] に chalow を始めた時に「カテゴリ分けをするのは今日からにし\nよう」と書いたが、結局かなりの時間をかけて &ldquo;(カテゴリ)&rdquo; から &ldquo;[カテゴ\nリ]&rdquo; への変換をした。昔はカテゴリが適当だったという事情からツールを使う\nことはできなかったため、もちろん手作業で変換。ｗ 300 以上あったと思う。ｗｗ\n最後の方は意識が朦朧としていたが、時間をかけた甲斐があって、なかなか\nきれいに整理できたと思う。しかし、何やってんだオレ&hellip;。\nあとからでもカテゴリは増やせるし、検索もできるので、カテゴリは基本\n分けない ことが正解な気がしてきた。一度、整理術の本でも読んでみるか。","contentSnippet":"[2007-07-01-1] に chalow を始めた時に「カテゴリ分けをするのは今日からにしよう」と書いたが、結局かなりの時間をかけて “(カテゴリ)” から “[カテゴリ]” への変換をした。昔はカテゴリが適当だったという事情からツールを使うことはできなかったため、もちろん手作業で変換。ｗ 300 以上あったと思う。ｗｗ最後の方は意識が朦朧としていたが、時間をかけた甲斐があって、なかなかきれいに整理できたと思う。しかし、何やってんだオレ…。あとからでもカテゴリは増やせるし、検索もできるので、カテゴリは基本分けない ことが正解な気がしてきた。一度、整理術の本でも読んでみるか。","link":"https://masutaka.net/2007-11-17-2/","isoDate":"2007-11-17T01:00:00.000Z","dateMiliSeconds":1195261200000,"authorName":"masutaka"},{"title":"日本標準時","content":"Web 上から日本標準時を確認できる。自分のコンピュータとの誤差も表示してくれる。\nURL: http://www3.nict.go.jp/cgi-bin/JST.pl おそらく、[2003-01-27-1] のサイトがここに移動したのだと思う。","contentSnippet":"Web 上から日本標準時を確認できる。自分のコンピュータとの誤差も表示してくれる。URL: http://www3.nict.go.jp/cgi-bin/JST.pl おそらく、[2003-01-27-1] のサイトがここに移動したのだと思う。","link":"https://masutaka.net/2007-11-17-1/","isoDate":"2007-11-17T00:00:00.000Z","dateMiliSeconds":1195257600000,"authorName":"masutaka"},{"title":"Message-Id や Date は誰が付けるべきか？","content":"[2003-03-01-2] のメモにあった URL から抜粋、一部修正。\n|MTA としての本来の役割を考えてみると、envelope の情報に基づきホストから\n|ホストへメッセージを配送するのが仕事であり、基本的には(経路情報のヘッダー\n|を付ける以外)メッセージそのものには関与しない。MTA が Message-ID を付け\n|るということはヘッダーを解析し、Message-ID がすでにあるかどうか調べると\n|いうことであり、余計な処理が必要になるということである。つまり、MTA と\n|しての役割から見た場合、(親切な行為なのか余計なお世話なのかはともかくと\n|して)必要なこと以上のことを行っているのである。\n|\n|なお、RFC821(SMTP の仕様書)の改定案の &ldquo;6.3 Compensating for\n|Irregularities&rdquo; では受け取ったメッセージが Message-ID や Date を欠いて\n|いれば MTA でそれらを追加してよい &ldquo;MAY&rdquo; となっている。ただし、そのよう\n|なメッセージを生成した MUA を &ldquo;these weak SMTP clients&rdquo; と呼んでいるこ\n|とからも、本来は MUA で生成すべきだという考えが読み取れると思う。また、\n|将来的には欠いているヘッダは Message Submission Agent (MSA) で補完され\n|るようになるかも知れない(RFC 2476 &ldquo;Message Submission&rdquo; を参照)。\nURL: http://www.emaillab.org/essay/message-id.html#where ","contentSnippet":"[2003-03-01-2] のメモにあった URL から抜粋、一部修正。|MTA としての本来の役割を考えてみると、envelope の情報に基づきホストから|ホストへメッセージを配送するのが仕事であり、基本的には(経路情報のヘッダー|を付ける以外)メッセージそのものには関与しない。MTA が Message-ID を付け|るということはヘッダーを解析し、Message-ID がすでにあるかどうか調べると|いうことであり、余計な処理が必要になるということである。つまり、MTA と|しての役割から見た場合、(親切な行為なのか余計なお世話なのかはともかくと|して)必要なこと以上のことを行っているのである。||なお、RFC821(SMTP の仕様書)の改定案の “6.3 Compensating for|Irregularities” では受け取ったメッセージが Message-ID や Date を欠いて|いれば MTA でそれらを追加してよい “MAY” となっている。ただし、そのよう|なメッセージを生成した MUA を “these weak SMTP clients” と呼んでいるこ|とからも、本来は MUA で生成すべきだという考えが読み取れると思う。また、|将来的には欠いているヘッダは Message Submission Agent (MSA) で補完され|るようになるかも知れない(RFC 2476 “Message Submission” を参照)。URL: http://www.emaillab.org/essay/message-id.html#where","link":"https://masutaka.net/2007-11-16-2/","isoDate":"2007-11-16T01:00:00.000Z","dateMiliSeconds":1195174800000,"authorName":"masutaka"},{"title":"last-record1_default.utf8","content":"~/.anthy には last-record[12]_default.utf8 が出来るが、\nlast-record[12]_default の場合もある。ちょっと調べてみたら、後者のファ\nイルがあればそちらが使われ、なければ前者が使われるとのこと。古い anthy\nが前者を作ってしまったのだろうか。Emacs21 を使っていたのが原因だろうか。\n分からん&hellip;。とりあえず、両方とも削除してイチから学習しなおすことにするか。","contentSnippet":"~/.anthy には last-record[12]_default.utf8 が出来るが、last-record[12]_default の場合もある。ちょっと調べてみたら、後者のファイルがあればそちらが使われ、なければ前者が使われるとのこと。古い anthyが前者を作ってしまったのだろうか。Emacs21 を使っていたのが原因だろうか。分からん…。とりあえず、両方とも削除してイチから学習しなおすことにするか。","link":"https://masutaka.net/2007-11-16-1/","isoDate":"2007-11-16T00:00:00.000Z","dateMiliSeconds":1195171200000,"authorName":"masutaka"},{"title":"NAS がネットワークから見えなくなった","content":"ファームのアップデートをしたら、HD-H300LAN がネットワークから見えなくなっ\nてしまった。背面の設定初期化ボタン(データは消去されない)を押して、デフォ\nルトの IP アドレスだという 192.168.11.150 にアクセスしたら見えたので、\nWeb 上から再設定した。だが、IP 設定ユーティリティからはなぜか見えず&hellip;。","contentSnippet":"ファームのアップデートをしたら、HD-H300LAN がネットワークから見えなくなってしまった。背面の設定初期化ボタン(データは消去されない)を押して、デフォルトの IP アドレスだという 192.168.11.150 にアクセスしたら見えたので、Web 上から再設定した。だが、IP 設定ユーティリティからはなぜか見えず…。","link":"https://masutaka.net/2007-11-12-1/","isoDate":"2007-11-12T00:00:00.000Z","dateMiliSeconds":1194825600000,"authorName":"masutaka"},{"title":"SZ と RSS","content":"ps で表示される SZ と RSS について。\nSZ&hellip;スワップ込みのメモリサイズ\nRSS..スワップ含まないメモリサイズ","contentSnippet":"ps で表示される SZ と RSS について。SZ…スワップ込みのメモリサイズRSS..スワップ含まないメモリサイズ","link":"https://masutaka.net/2007-10-30-1/","isoDate":"2007-10-30T00:00:00.000Z","dateMiliSeconds":1193702400000,"authorName":"masutaka"},{"title":"davfs","content":"さらに調べてみたらｗ、@nifty ではマイキャビネットという、HTTP でファイ\nルアクセスできるサービスを提供していることが分かった。一般的にはWebDav\nというものみたい。で、これも davfs を使えばマウントできるっぽい。でもやっ\nぱり sarge だと面倒そうだな。","contentSnippet":"さらに調べてみたらｗ、@nifty ではマイキャビネットという、HTTP でファイルアクセスできるサービスを提供していることが分かった。一般的にはWebDavというものみたい。で、これも davfs を使えばマウントできるっぽい。でもやっぱり sarge だと面倒そうだな。","link":"https://masutaka.net/2007-10-27-4/","isoDate":"2007-10-27T03:00:00.000Z","dateMiliSeconds":1193454000000,"authorName":"masutaka"},{"title":"gmailfs","content":"gmailfs というのもあった。例えばファイルを１個コピーすると、その情報が\n書かれたメールが自分宛に送られるが、あたかもファイルシステムにアクセス\nしているように振る舞ってくれるとのこと。はい、ジョークソフトですね。\nURL: http://lowlife.jp/yasusii/stories/20.html ","contentSnippet":"gmailfs というのもあった。例えばファイルを１個コピーすると、その情報が書かれたメールが自分宛に送られるが、あたかもファイルシステムにアクセスしているように振る舞ってくれるとのこと。はい、ジョークソフトですね。URL: http://lowlife.jp/yasusii/stories/20.html","link":"https://masutaka.net/2007-10-27-3/","isoDate":"2007-10-27T02:00:00.000Z","dateMiliSeconds":1193450400000,"authorName":"masutaka"},{"title":"ftpfs","content":"ftpfs というのもあるらしい。ftp 先のリモートディレクトリをローカルファ\nイルシステムにマウントできるとのこと。すごすぎ。Web サイトの更新がかな\nり楽になると思う。\n主なツールは curlftpfs や lufs など。前者は sarge ではパッケージがなかっ\nたためソースからコンパイルした。が、コンパイルエラーになって面倒くさく\nなって断念。後者は lufs-utils というパッケージがあったため\n|# lufsmount ftpfs://アカウント:パスワード@ホスト名 /mnt/nifty\nを実行してみたが、\n|you don&rsquo;t have kernel lufs support (check whether the lufs module is available/loaded)\nと言われてしまった。カーネルにパッチが必要みたい。断念。早く etch に\n移行しよう..。↓ところで、同じことしている人を発見した。ｗ\nURL: http://d.hatena.ne.jp/twisted0517/20050603/1117786746 ","contentSnippet":"ftpfs というのもあるらしい。ftp 先のリモートディレクトリをローカルファイルシステムにマウントできるとのこと。すごすぎ。Web サイトの更新がかなり楽になると思う。主なツールは curlftpfs や lufs など。前者は sarge ではパッケージがなかったためソースからコンパイルした。が、コンパイルエラーになって面倒くさくなって断念。後者は lufs-utils というパッケージがあったため|# lufsmount ftpfs://アカウント:パスワード@ホスト名 /mnt/niftyを実行してみたが、|you don’t have kernel lufs support (check whether the lufs module is available/loaded)と言われてしまった。カーネルにパッチが必要みたい。断念。早く etch に移行しよう..。↓ところで、同じことしている人を発見した。ｗURL: http://d.hatena.ne.jp/twisted0517/20050603/1117786746","link":"https://masutaka.net/2007-10-27-2/","isoDate":"2007-10-27T01:00:00.000Z","dateMiliSeconds":1193446800000,"authorName":"masutaka"},{"title":"mount -> automount","content":"[2007-03-11-2] の続き。\n今まで Linux から「NAS」「Windows」「USB フラッシュメモリ」を普通にマウ\nントしてアクセスしていた。でも必要な時だけマウントすればよいし、常にこ\nれらの機器が稼働しているわけではないので、automount に変更した。\n autofs をインストール\n|# apt-get install autofs /etc/fstab のマウントの設定をコメントアウト  #//pana/masutaka /mnt/pana/masutaka smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 #//nas1/info /mnt/nas1/info smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932 0 0 #//nas1/share /mnt/nas1/share smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 #/dev/sda1 /mnt/usbfm auto user,noauto,iocharset=euc-jp,uid=1000,gid=1000 0 0 /etc/auto.master に以下を追加。  /misc\t/etc/auto.misc /etc/auto.misc に以下を追加。  nas1_info -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932 ://nas1/info nas1_share -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 ://nas1/share pana_masutaka -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 ://pana/masutaka usbfm -fstype=auto,iocharset=euc-jp,uid=1000,gid=1000 :/dev/sda1 autofs を再起動。例えば /misc/nas1_share にアクセスすると、マウントが行われる。\n|# /etc/init.d/autofs restart 今までと同じパスでアクセスしたいので、/mnt から /misc の各マウント","contentSnippet":"[2007-03-11-2] の続き。今まで Linux から「NAS」「Windows」「USB フラッシュメモリ」を普通にマウントしてアクセスしていた。でも必要な時だけマウントすればよいし、常にこれらの機器が稼働しているわけではないので、automount に変更した。 autofs をインストール|# apt-get install autofs /etc/fstab のマウントの設定をコメントアウト  #//pana/masutaka /mnt/pana/masutaka smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 #//nas1/info /mnt/nas1/info smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932 0 0 #//nas1/share /mnt/nas1/share smbfs username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 #/dev/sda1 /mnt/usbfm auto user,noauto,iocharset=euc-jp,uid=1000,gid=1000 0 0 /etc/auto.master に以下を追加。  /misc\t/etc/auto.misc /etc/auto.misc に以下を追加。  nas1_info -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932 ://nas1/info nas1_share -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 ://nas1/share pana_masutaka -fstype=smbfs,username=XXXX,password=YYYY,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 ://pana/masutaka usbfm -fstype=auto,iocharset=euc-jp,uid=1000,gid=1000 :/dev/sda1 autofs を再起動。例えば /misc/nas1_share にアクセスすると、マウントが行われる。|# /etc/init.d/autofs restart 今までと同じパスでアクセスしたいので、/mnt から /misc の各マウント","link":"https://masutaka.net/2007-10-27-1/","isoDate":"2007-10-27T00:00:00.000Z","dateMiliSeconds":1193443200000,"authorName":"masutaka"},{"title":"LDAP 編集ツール","content":" CUI から編集を行うのはしんどいので、GUI なツールを探してみた。  &ndash; LDAP Browser/Editor Java で実装されたツール。Java 1.2.2 が必要。\nなかなか良い感じ。Java なのでプラットフォームを選ばない。\n付属の applet.html を使えば、Web 上からも編集が出来るみたい。\n&ndash; LDAP Explorer\nPHP で実装されたツール。まだ試していない。\nただ配布元が分からなかったので、&ldquo;LDAPExplorer tar.gz&rdquo; でググって、\nようやく LDAPExplorer-1.18.tar.gz をゲットした。\n Java が動けば LDAP Browser/Editor、動かなかったら LDAP Explorer かな。\nWindows で LDAP Browser/Editor を動かすという話もあるが、編集する人が\nこれをインストールしなくちゃないというのは、かなりイマイチ。\nLDAP Explorer が動けば良いんだけど、メンテされていないんだろうなあ..。\nWeb 上で編集や追加や削除ができる、良いツールはないのだろうか。  ","contentSnippet":"CUI から編集を行うのはしんどいので、GUI なツールを探してみた。  – LDAP Browser/Editor Java で実装されたツール。Java 1.2.2 が必要。なかなか良い感じ。Java なのでプラットフォームを選ばない。付属の applet.html を使えば、Web 上からも編集が出来るみたい。– LDAP ExplorerPHP で実装されたツール。まだ試していない。ただ配布元が分からなかったので、“LDAPExplorer tar.gz” でググって、ようやく LDAPExplorer-1.18.tar.gz をゲットした。 Java が動けば LDAP Browser/Editor、動かなかったら LDAP Explorer かな。Windows で LDAP Browser/Editor を動かすという話もあるが、編集する人がこれをインストールしなくちゃないというのは、かなりイマイチ。LDAP Explorer が動けば良いんだけど、メンテされていないんだろうなあ..。Web 上で編集や追加や削除ができる、良いツールはないのだろうか。","link":"https://masutaka.net/2007-10-23-2/","isoDate":"2007-10-23T01:00:00.000Z","dateMiliSeconds":1193101200000,"authorName":"masutaka"},{"title":"chalow version 1.0","content":"chalow version 1.0 が公開されていたので、バージョンアップしました。\nこういう Web 系のツールはバージョンアップが面倒ですね。tdiary とか pukiwiki とか。\nURL: http://chalow.org/ URL: http://chalow.org/cl/2007-10-19.html ","contentSnippet":"chalow version 1.0 が公開されていたので、バージョンアップしました。こういう Web 系のツールはバージョンアップが面倒ですね。tdiary とか pukiwiki とか。URL: http://chalow.org/ URL: http://chalow.org/cl/2007-10-19.html","link":"https://masutaka.net/2007-10-23-1/","isoDate":"2007-10-23T00:00:00.000Z","dateMiliSeconds":1193097600000,"authorName":"masutaka"},{"title":"formailを使った重複メールの削除","content":"[2007-07-31-1] で話題にした重複メールの件。\n To: masutaka.net@gmail.com Cc: 加入しているメーリングリスト\n という宛先でメールが来ると、同じメールが 2 通来てしまう。\nprocmail 付属の formail をうまくを使えば、スマートに削除できることが分かった。\n以下は ~/.procmailrc の該当の設定。\nPATH=$PATH:/usr/local/bin MAILDIR=$HOME/Mail.local DELETEDIR=$HOME/.trash/Mail/delete :0 * ? formail -D 8192 msgid.cache * ? touch $DELETEDIR/.mew-mtime $DELETEDIR/. formail が Message-ID を msgid.cache というファイルに 8192byte 蓄え、重複メールかの判断をしている。\nそう判断されたメールは $DELETEDIR に振り分けられる。msgid.cache は $MAILDIR に作られる。どちらのディレクトリともメールサーバから見える場所を指定すること。$HOME が無難。ディレクトリはあらかじめ掘っておき、適切なパーミッション(2700等)をかけておくこと。\n.mew-mtime を touch しているのは、Mew から $DELETEDIR を見たときにスキャンが走るようにするため。","contentSnippet":"[2007-07-31-1] で話題にした重複メールの件。 To: masutaka.net@gmail.com Cc: 加入しているメーリングリスト という宛先でメールが来ると、同じメールが 2 通来てしまう。procmail 付属の formail をうまくを使えば、スマートに削除できることが分かった。以下は ~/.procmailrc の該当の設定。PATH=$PATH:/usr/local/bin MAILDIR=$HOME/Mail.local DELETEDIR=$HOME/.trash/Mail/delete :0 * ? formail -D 8192 msgid.cache * ? touch $DELETEDIR/.mew-mtime $DELETEDIR/. formail が Message-ID を msgid.cache というファイルに 8192byte 蓄え、重複メールかの判断をしている。そう判断されたメールは $DELETEDIR に振り分けられる。msgid.cache は $MAILDIR に作られる。どちらのディレクトリともメールサーバから見える場所を指定すること。$HOME が無難。ディレクトリはあらかじめ掘っておき、適切なパーミッション(2700等)をかけておくこと。.mew-mtime を touch しているのは、Mew から $DELETEDIR を見たときにスキャンが走るようにするため。","link":"https://masutaka.net/2007-10-19-1/","isoDate":"2007-10-19T00:00:00.000Z","dateMiliSeconds":1192752000000,"authorName":"masutaka"},{"title":"Emacs のメーラからの LDAP 検索","content":"Mew(mew-ldap.el) (★) [2003-05-13-1] に「使ってみたい」と言ってずいぶん経ったが、自宅で立ち上げたテストサーバから使えるようになった。\nmew-ldap.el は以下の Web サイトに置いてある。\nURL: http://www.meadowy.org/~gotoh/mew.html ~/.mew.el の設定内容は以下のとおり。\n(require &#39;mew-ldap) (setq mew-ldap-server &#34;ldap&#34;) (setq mew-ldap-search-base &#34;dc=masutaka,dc=com&#34;) (setq mew-ldap-use t) (define-key mew-draft-header-map (kbd &#34;C-i&#34;) &#39;mew-ldap-header-comp) (define-key mew-header-mode-map (kbd &#34;C-i&#34;) &#39;mew-ldap-header-comp) 意外にサクサクと動いてビックリ。説明には mew-ldap-use は default の nil で良いと書いてあったが、ソースを見た限りでは non-nil じゃないと検索してくれないようだ。\n追記(2007-10-27):\n上の情報は間違い。nil でも検索してくれる。ただし、なぜか検索してくれない時もある。その場合 C-u TAB すれば、強制的に検索してくれる。\nただ、実際に使えるレベルには達してないと思う。理由は以下のとおり。修正してパッチ送ろうかな&hellip;。\n ~/Mail/Addrbook と名前が被ると LDAP 側の検索結果が補完候補にならないことがある。 メールアドレスが複数あっても、最初にヒットしたアドレスしか補完されない。 検索(Tab)や展開(M-Tab)には、日本語の名前が使えないみたい。 認証には対応していないみたい。 Summary-mode への名前の展開にも対応していない。  ","contentSnippet":"Mew(mew-ldap.el) (★) [2003-05-13-1] に「使ってみたい」と言ってずいぶん経ったが、自宅で立ち上げたテストサーバから使えるようになった。mew-ldap.el は以下の Web サイトに置いてある。URL: http://www.meadowy.org/~gotoh/mew.html ~/.mew.el の設定内容は以下のとおり。(require 'mew-ldap) (setq mew-ldap-server \"ldap\") (setq mew-ldap-search-base \"dc=masutaka,dc=com\") (setq mew-ldap-use t) (define-key mew-draft-header-map (kbd \"C-i\") 'mew-ldap-header-comp) (define-key mew-header-mode-map (kbd \"C-i\") 'mew-ldap-header-comp) 意外にサクサクと動いてビックリ。説明には mew-ldap-use は default の nil で良いと書いてあったが、ソースを見た限りでは non-nil じゃないと検索してくれないようだ。追記(2007-10-27):上の情報は間違い。nil でも検索してくれる。ただし、なぜか検索してくれない時もある。その場合 C-u TAB すれば、強制的に検索してくれる。ただ、実際に使えるレベルには達してないと思う。理由は以下のとおり。修正してパッチ送ろうかな…。 ~/Mail/Addrbook と名前が被ると LDAP 側の検索結果が補完候補にならないことがある。 メールアドレスが複数あっても、最初にヒットしたアドレスしか補完されない。 検索(Tab)や展開(M-Tab)には、日本語の名前が使えないみたい。 認証には対応していないみたい。 Summary-mode への名前の展開にも対応していない。","link":"https://masutaka.net/2007-10-15-3/","isoDate":"2007-10-15T02:00:00.000Z","dateMiliSeconds":1192413600000,"authorName":"masutaka"},{"title":"Windows のメーラからの LDAP 検索","content":"Becky! (★★★) &ldquo;*&rdquo; で検索すると初めて表示され、アドレス帳を閉じるまで検索結果が保持される。今のところ、ニックネームを登録するやり方が分からない。需要あるのかな？\nファイル→新規アドレス帳 をして気づいたんだけど、ネットワーク先のフォルダを指定できるのね&hellip;。ローカルにコピーしなくてもいいじゃん。\nMozilla Thunderbird (★★) このためだけに初めてインストールした。検索させてもアドレス帳のフォルダを移動すると検索結果が消えてしまう。ローカルに保存して使うことを想定しているのだろうか。LDAP の意味が薄れてしまっている。\nなぜかパスワードを聞かれるし、検索できる時とできない時があり不安定だったが、サーバ側でパスワードが必要な設定に変更したら、安定して使えるようになった。\nOutlook Express (★) 使い方は Thunderbird と同じとのこと。ただ、アンインストールしたのか、見つからなかったので未確認。まあいいか..。\n追記(2007-10-20):\nThunderbird とだいたい同じだが、アドレス帳に検索用のフォルダを作れず、常に「人の検索」を行う必要があるため、さらに使い勝手が悪い。","contentSnippet":"Becky! (★★★) “*” で検索すると初めて表示され、アドレス帳を閉じるまで検索結果が保持される。今のところ、ニックネームを登録するやり方が分からない。需要あるのかな？ファイル→新規アドレス帳 をして気づいたんだけど、ネットワーク先のフォルダを指定できるのね…。ローカルにコピーしなくてもいいじゃん。Mozilla Thunderbird (★★) このためだけに初めてインストールした。検索させてもアドレス帳のフォルダを移動すると検索結果が消えてしまう。ローカルに保存して使うことを想定しているのだろうか。LDAP の意味が薄れてしまっている。なぜかパスワードを聞かれるし、検索できる時とできない時があり不安定だったが、サーバ側でパスワードが必要な設定に変更したら、安定して使えるようになった。Outlook Express (★) 使い方は Thunderbird と同じとのこと。ただ、アンインストールしたのか、見つからなかったので未確認。まあいいか..。追記(2007-10-20):Thunderbird とだいたい同じだが、アドレス帳に検索用のフォルダを作れず、常に「人の検索」を行う必要があるため、さらに使い勝手が悪い。","link":"https://masutaka.net/2007-10-15-2/","isoDate":"2007-10-15T01:00:00.000Z","dateMiliSeconds":1192410000000,"authorName":"masutaka"},{"title":"openldap コマンドメモ","content":"コマンドだけメモしておく。*.ldif の中身は省略。\nルートノードを読み込ませ、サーバを起動する。\n# slapadd -v -l /tmp/top.ldif # /etc/init.d/slapd start ldapsearch コマンドで「-h ldap」や「-b &ldquo;dc=masutaka,dc=com&rdquo;」を指定せずにすむようにする。\n/usr/local/etc/openldap/ldap.conf に以下を追加。\nHOST\tldap BASE\tdc=masutaka,dc=com 検索が出来るか確認する。\n% ldapsearch &#34;(objectClass=*)&#34; ユーザの追加\n% ldapmodify -D &#34;cn=Manager,dc=masutaka,dc=com&#34; -w secret -x -a -f /tmp/users.ldif ユーザの編集\n% ldapmodify -D &#34;cn=Manager,dc=masutaka,dc=com&#34; -w secret -x -v -f /tmp/update.ldif RDN のリネーム(Jerry Carter -&gt; Gerry Carter)\n% ldapmodrdn -D &#34;cn=Manager,dc=masutaka,dc=com&#34; -w secret -x -v &#34;cn=Jerry Carter,ou=people,dc=masutaka,dc=com&#34; &#34;cn=Gerry Carter&#34; ユーザ masutaka の削除\n% ldapdelete -D &#34;cn=Manager,dc=masutaka,dc=com&#34; -w secret -x -v &#34;uid=masutaka,ou=people,dc=masutaka,dc=com&#34; people ツリーごと削除","contentSnippet":"コマンドだけメモしておく。*.ldif の中身は省略。ルートノードを読み込ませ、サーバを起動する。# slapadd -v -l /tmp/top.ldif # /etc/init.d/slapd start ldapsearch コマンドで「-h ldap」や「-b “dc=masutaka,dc=com”」を指定せずにすむようにする。/usr/local/etc/openldap/ldap.conf に以下を追加。HOST\tldap BASE\tdc=masutaka,dc=com 検索が出来るか確認する。% ldapsearch \"(objectClass=*)\" ユーザの追加% ldapmodify -D \"cn=Manager,dc=masutaka,dc=com\" -w secret -x -a -f /tmp/users.ldif ユーザの編集% ldapmodify -D \"cn=Manager,dc=masutaka,dc=com\" -w secret -x -v -f /tmp/update.ldif RDN のリネーム(Jerry Carter -> Gerry Carter)% ldapmodrdn -D \"cn=Manager,dc=masutaka,dc=com\" -w secret -x -v \"cn=Jerry Carter,ou=people,dc=masutaka,dc=com\" \"cn=Gerry Carter\" ユーザ masutaka の削除% ldapdelete -D \"cn=Manager,dc=masutaka,dc=com\" -w secret -x -v \"uid=masutaka,ou=people,dc=masutaka,dc=com\" people ツリーごと削除","link":"https://masutaka.net/2007-10-15-1/","isoDate":"2007-10-15T00:00:00.000Z","dateMiliSeconds":1192406400000,"authorName":"masutaka"},{"title":"蔵書管理","content":"つい最近から、気になるものと気になっていたものをこの Changelog メモ\nに書いてきたが、アマゾンのウィッシュリストのほうが便利なのではと思\nい、始めてみた。そうしたら、気になる本が芋づる式に出てくる出てく\nる&hellip;。ChangeLog メモに書くのは止めました。なんか、家にある本も全部\n登録したくなってきたなあ。orz","contentSnippet":"つい最近から、気になるものと気になっていたものをこの Changelog メモに書いてきたが、アマゾンのウィッシュリストのほうが便利なのではと思い、始めてみた。そうしたら、気になる本が芋づる式に出てくる出てくる…。ChangeLog メモに書くのは止めました。なんか、家にある本も全部登録したくなってきたなあ。orz","link":"https://masutaka.net/2007-10-09-1/","isoDate":"2007-10-09T00:00:00.000Z","dateMiliSeconds":1191888000000,"authorName":"masutaka"},{"title":"愛のペアプログラミング","content":"URL: http://www.web-career.com/suc26.html ここに出てくる大場さんという方が、ImageMagick を使って Meadow で画像を\n表示できるようにしたんだって。へぇ〜。\nそれにしても、「Emacs を使わないと家庭の危機」とか「自宅でペアプログラ\nミング」とか、とてもアレゲなキーワードが散りばめられているなあ&hellip;。(^^;\nちなみに、「第２回」の歌代和正さんは、かの有名な jcode.pl を開発された方。\nMew の作者、かずさんの会社(IIJ)の先輩にあたるみたい。\nなんか、JRuby の話題がたくさん出てると思ったら、大場さんは JRuby の\n国際化対応に携わっているとのこと。つーか私、大場さんのブログ購読してました&hellip;。\n(URL: 暮らしの業 )\n追記(2014-05-12):\nhttp://web-engineer.buyuden.net/interview/oba/ に移動した模様。","contentSnippet":"URL: http://www.web-career.com/suc26.html ここに出てくる大場さんという方が、ImageMagick を使って Meadow で画像を表示できるようにしたんだって。へぇ〜。それにしても、「Emacs を使わないと家庭の危機」とか「自宅でペアプログラミング」とか、とてもアレゲなキーワードが散りばめられているなあ…。(^^;ちなみに、「第２回」の歌代和正さんは、かの有名な jcode.pl を開発された方。Mew の作者、かずさんの会社(IIJ)の先輩にあたるみたい。なんか、JRuby の話題がたくさん出てると思ったら、大場さんは JRuby の国際化対応に携わっているとのこと。つーか私、大場さんのブログ購読してました…。(URL: 暮らしの業 )追記(2014-05-12):http://web-engineer.buyuden.net/interview/oba/ に移動した模様。","link":"https://masutaka.net/2007-10-04-1/","isoDate":"2007-10-04T00:00:00.000Z","dateMiliSeconds":1191456000000,"authorName":"masutaka"},{"title":"windows.el","content":"基本的に Emacs は 1 日 1 回だけしか立ち上げないで、必要になればフレーム\nを作る(C-x 5 2)という使い方をしている。Solaris 上で直接 Emacs を起動し\nていた時は気にならなかったが、Xming を使うようになってから、フレームが\n邪魔になってきたので、windows.el を試してみることにした。\n本来はフレームごとに好みのウィンドウ分割形態を複数持ち、ショートカット\nキーでそれらを切り替えながら Emacs を使用できるというツールだが、ウィン\nドウ単位でもそれが出来るとのこと。(1 つのフレームに仮想フレームをいくつ\nも持つような感じ。screen と同じですね。)\n~/.emacs.el に以下を設定した。しばらく使ってみるか。\n;; キー操作 &#34;C-c 数字&#34; は使わない。 (setq win:quick-selection nil)  ;; プレフィックスキーは C-z (setq win:switch-prefix &#34;\\C-z&#34;)  ;; フレームは使わない。 (setq win:use-frame nil)  (require &#39;windows) (win:startup-with-window) フレームを 1 つ持つだけで済むので、デスクトップが散らからなくて良い感じ。\nターミナルは TeraTerm を使っているが、screen を起動しているので、こちら\nも 1 つ起動しておくだけで良い。うーん、素晴らしい。","contentSnippet":"基本的に Emacs は 1 日 1 回だけしか立ち上げないで、必要になればフレームを作る(C-x 5 2)という使い方をしている。Solaris 上で直接 Emacs を起動していた時は気にならなかったが、Xming を使うようになってから、フレームが邪魔になってきたので、windows.el を試してみることにした。本来はフレームごとに好みのウィンドウ分割形態を複数持ち、ショートカットキーでそれらを切り替えながら Emacs を使用できるというツールだが、ウィンドウ単位でもそれが出来るとのこと。(1 つのフレームに仮想フレームをいくつも持つような感じ。screen と同じですね。)~/.emacs.el に以下を設定した。しばらく使ってみるか。;; キー操作 \"C-c 数字\" は使わない。 (setq win:quick-selection nil)  ;; プレフィックスキーは C-z (setq win:switch-prefix \"\\C-z\")  ;; フレームは使わない。 (setq win:use-frame nil)  (require 'windows) (win:startup-with-window) フレームを 1 つ持つだけで済むので、デスクトップが散らからなくて良い感じ。ターミナルは TeraTerm を使っているが、screen を起動しているので、こちらも 1 つ起動しておくだけで良い。うーん、素晴らしい。","link":"https://masutaka.net/2007-10-03-1/","isoDate":"2007-10-03T00:00:00.000Z","dateMiliSeconds":1191369600000,"authorName":"masutaka"},{"title":"似たようなことが書かれているサイト","content":"うちと同じように chalow を使っていて、内容も被っているサイトを発見した。\nURL: http://sonic64.com/ [2007-10-01-1] の ntp についても書いてあるし、Apache や unix などアレゲな話題が多くあった。","contentSnippet":"うちと同じように chalow を使っていて、内容も被っているサイトを発見した。URL: http://sonic64.com/ [2007-10-01-1] の ntp についても書いてあるし、Apache や unix などアレゲな話題が多くあった。","link":"https://masutaka.net/2007-10-01-2/","isoDate":"2007-10-01T01:00:00.000Z","dateMiliSeconds":1191200400000,"authorName":"masutaka"},{"title":"127.127.1.0 っていう時刻サーバ","content":"127.127.t.u (t:クロックタイプを表す整数, u:クロックタイプ固有の番号) と\nいうアドレスは、参照時間アドレスと呼ばれる時間を取得するデバイスを指定\nするための NTP 独自の表現で、127.127.1.0 を指定すると内蔵クロックから\n時間を取得することになります。\nURL: http://www.dadd9.com/tech/networkadmin_03.html どのサーバとも同期できない時は、内蔵クロックを使用するようにするのが\n一般的な設定方法らしい。","contentSnippet":"127.127.t.u (t:クロックタイプを表す整数, u:クロックタイプ固有の番号) というアドレスは、参照時間アドレスと呼ばれる時間を取得するデバイスを指定するための NTP 独自の表現で、127.127.1.0 を指定すると内蔵クロックから時間を取得することになります。URL: http://www.dadd9.com/tech/networkadmin_03.html どのサーバとも同期できない時は、内蔵クロックを使用するようにするのが一般的な設定方法らしい。","link":"https://masutaka.net/2007-10-01-1/","isoDate":"2007-10-01T00:00:00.000Z","dateMiliSeconds":1191196800000,"authorName":"masutaka"},{"title":"休みの日にやろうと思って忘れてしまう","content":"ネットで、ホワイトボードに書いておくとよいという意見があった。\n今度の休みの日はホワイトボードを買いにいこう。忘れそうだけど。w\n追記(2007-10-21):\n携帯のメモ帳が意外に使えることが分かった。だいたいいつでも持ってい\nるから、いつでもメモができる。紙のメモ帳とうまく併用しよう。","contentSnippet":"ネットで、ホワイトボードに書いておくとよいという意見があった。今度の休みの日はホワイトボードを買いにいこう。忘れそうだけど。w追記(2007-10-21):携帯のメモ帳が意外に使えることが分かった。だいたいいつでも持っているから、いつでもメモができる。紙のメモ帳とうまく併用しよう。","link":"https://masutaka.net/2007-09-26-3/","isoDate":"2007-09-26T02:00:00.000Z","dateMiliSeconds":1190772000000,"authorName":"masutaka"},{"title":"画像","content":"今まで画像はアップしていませんでしたが、chalow 的には表示できます。\n↓こんな感じに書きます。\n[[テスト画像|image/2001-11-20-23-19-44.s.jpg]] ダワさんの画像をそのまま使おうとしたら、画面いっぱいに表示されて焦りました&hellip;。＞vivaさん","contentSnippet":"今まで画像はアップしていませんでしたが、chalow 的には表示できます。↓こんな感じに書きます。[[テスト画像|image/2001-11-20-23-19-44.s.jpg]] ダワさんの画像をそのまま使おうとしたら、画面いっぱいに表示されて焦りました…。＞vivaさん","link":"https://masutaka.net/2007-09-26-2/","isoDate":"2007-09-26T01:00:00.000Z","dateMiliSeconds":1190768400000,"authorName":"masutaka"},{"title":"Apacheの環境変数","content":"Apache には printenv という cgi スクリプトが同封されている。\nこれを Web 経由で実行することにより、cgi から参照できる環境変数が分かる。\n例えば、HTTP_USER_AGENT を参照すると、現在どんな Web ブラウザでアクセス\nされているのかが分かるというわけ。\nURL: http://hpcgi2.nifty.com/chronicle/printenv RIP スケジュールで、REMOTE_HOST を参照している箇所があるが、\nREMOTE_ADDR に変更した。負荷を避けるため HostnameLookups を ON にしていないが、\nこれにより常に REMOTE_HOST が空っぽなため。細かいヤツだなあ。＞オレ","contentSnippet":"Apache には printenv という cgi スクリプトが同封されている。これを Web 経由で実行することにより、cgi から参照できる環境変数が分かる。例えば、HTTP_USER_AGENT を参照すると、現在どんな Web ブラウザでアクセスされているのかが分かるというわけ。URL: http://hpcgi2.nifty.com/chronicle/printenv RIP スケジュールで、REMOTE_HOST を参照している箇所があるが、REMOTE_ADDR に変更した。負荷を避けるため HostnameLookups を ON にしていないが、これにより常に REMOTE_HOST が空っぽなため。細かいヤツだなあ。＞オレ","link":"https://masutaka.net/2007-09-26-1/","isoDate":"2007-09-26T00:00:00.000Z","dateMiliSeconds":1190764800000,"authorName":"masutaka"},{"title":"めぐりズム蒸気でホットアイマスク","content":"以前 GIGAZINE で、花王が蒸しタオルを使うと酷使した目の疲れが取れること\nを実証したということが取り上げられていたが、その花王が蒸気で目を気持ち\n良く温める新製品「めぐりズム蒸気でホットアイマスク」を発売するそう。\nここ数年、視力がどんどん悪くなっているので、気になる&hellip;。\nURL: http://gigazine.net/index.php?/news/comments/20070921_eye_mask/ 追記(2007-10-21):\n近所のカツマタで買ってきた。一回やってみたけど、結構いいかも。目の\n疲れが取れたような気がしました。(注: 蒸気は目に見えません。)","contentSnippet":"以前 GIGAZINE で、花王が蒸しタオルを使うと酷使した目の疲れが取れることを実証したということが取り上げられていたが、その花王が蒸気で目を気持ち良く温める新製品「めぐりズム蒸気でホットアイマスク」を発売するそう。ここ数年、視力がどんどん悪くなっているので、気になる…。URL: http://gigazine.net/index.php?/news/comments/20070921_eye_mask/ 追記(2007-10-21):近所のカツマタで買ってきた。一回やってみたけど、結構いいかも。目の疲れが取れたような気がしました。(注: 蒸気は目に見えません。)","link":"https://masutaka.net/2007-09-21-1/","isoDate":"2007-09-21T00:00:00.000Z","dateMiliSeconds":1190332800000,"authorName":"masutaka"},{"title":"tdiary のテーマを使う","content":"tdiary のテーマを使うと左側のサイドメニューがページの一番下に行って\nしまうので、使っていなかった。\nclover テーマについてくる clover.css の先頭に以下を追記して、\n@import &#34;../../diary.css&#34;; @import &#34;clfix.css&#34;; clover.css と同じディレクトリに clfix.css を置く。\nclover.css 以外も同じようにやればうまくいくと思う。\nh1 { border-color: #3faf43; } h2 { background-color: #fff; } h3 { color: #3faf43; font-weight: bold; } .clitemheader { color: #000; background-color: #fff; } .funcbox { border:solid 1px #cfd; background-color: #cfd; } .stdbox td { border: solid 1px #cfd; background-color: #cfd; } div.body pre { font-size: 90%; } #links { border-style: solid; background-color: #cfd; border-color: #3faf43; border-width: 1px; left:5px; width: 225px; } #linksright { position:relative; border-style: solid; background-color: #cfd; border-color: #3faf43; border-width: 1px; top:-8em; left:5px; width: 225px; } URL: http://www.","contentSnippet":"tdiary のテーマを使うと左側のサイドメニューがページの一番下に行ってしまうので、使っていなかった。clover テーマについてくる clover.css の先頭に以下を追記して、@import \"../../diary.css\"; @import \"clfix.css\"; clover.css と同じディレクトリに clfix.css を置く。clover.css 以外も同じようにやればうまくいくと思う。h1 { border-color: #3faf43; } h2 { background-color: #fff; } h3 { color: #3faf43; font-weight: bold; } .clitemheader { color: #000; background-color: #fff; } .funcbox { border:solid 1px #cfd; background-color: #cfd; } .stdbox td { border: solid 1px #cfd; background-color: #cfd; } div.body pre { font-size: 90%; } #links { border-style: solid; background-color: #cfd; border-color: #3faf43; border-width: 1px; left:5px; width: 225px; } #linksright { position:relative; border-style: solid; background-color: #cfd; border-color: #3faf43; border-width: 1px; top:-8em; left:5px; width: 225px; } URL: http://www.","link":"https://masutaka.net/2007-09-17-4/","isoDate":"2007-09-17T03:00:00.000Z","dateMiliSeconds":1189998000000,"authorName":"masutaka"},{"title":"Perl でメールを SMTP 送信する","content":"perl から ローカルの sendmail を呼んでメール送信すると、場合によっては相手のメールサーバに\n弾かれる場合があるので、今後は SMTP で送信した方が良いかもしれない。\nURL: http://tech.bayashi.net/pdmemo/sendmailbyperl.html ","contentSnippet":"perl から ローカルの sendmail を呼んでメール送信すると、場合によっては相手のメールサーバに弾かれる場合があるので、今後は SMTP で送信した方が良いかもしれない。URL: http://tech.bayashi.net/pdmemo/sendmailbyperl.html","link":"https://masutaka.net/2007-09-17-3/","isoDate":"2007-09-17T02:00:00.000Z","dateMiliSeconds":1189994400000,"authorName":"masutaka"},{"title":"Amazon プラグイン","content":"例えば\n{{amazon('4873112885', 'BINARY HACKS')}}\nと書くと、↓このような amazon へのリンクになる。\nBINARY HACKS amazon() は cl.conf に定義されている。$AID はアマゾンアソシエイトに\n登録すると発行されるので、各自変更する必要がある。","contentSnippet":"例えば{{amazon('4873112885', 'BINARY HACKS')}}と書くと、↓このような amazon へのリンクになる。BINARY HACKS amazon() は cl.conf に定義されている。$AID はアマゾンアソシエイトに登録すると発行されるので、各自変更する必要がある。","link":"https://masutaka.net/2007-09-17-2/","isoDate":"2007-09-17T01:00:00.000Z","dateMiliSeconds":1189990800000,"authorName":"masutaka"},{"title":"高林哲氏のコラム","content":"|プログラミングとバッドノウハウをテーマにした「いやなブログ」の\n|高林哲氏が、プログラミングに関する 雑多なあれこれを、徒然に\n|書き綴ります。「ブログよりはちょっとまじめなことを書く予定」です。\nだそうです。なかなか面白い。http://gihyo.jp/dev/serial/01/scene","contentSnippet":"|プログラミングとバッドノウハウをテーマにした「いやなブログ」の|高林哲氏が、プログラミングに関する 雑多なあれこれを、徒然に|書き綴ります。「ブログよりはちょっとまじめなことを書く予定」です。だそうです。なかなか面白い。http://gihyo.jp/dev/serial/01/scene","link":"https://masutaka.net/2007-09-17-1/","isoDate":"2007-09-17T00:00:00.000Z","dateMiliSeconds":1189987200000,"authorName":"masutaka"},{"title":"カーソルとマウスポインタが重なる場合、マウスポインタを消す。","content":"実際には邪魔にならないような場所にマウスポインタを飛ばすだけ。でもなかなか良いよ。\nただし -nw で起動した時はさすがに動いてくれない。以下を ~/.emacs.el に追加した。\n(if (eq window-system &#39;x)  (mouse-avoidance-mode &#39;animate)) 重なっている時に何か文字を打つと、マウスポインタがひょこひょこと逃げていく。\nanimate 以外にも banish, exile, jump などいろいろあるみたい。\n詳しくは M-x describe-function [Enter] mouse-avoidance-mode [Enter] 見るべし。\nMeadow だと、以下の設定で本当に消せる。\n(setq w32-hide-mouse-on-key t) (setq w32-hide-mouse-timeout 5000) ","contentSnippet":"実際には邪魔にならないような場所にマウスポインタを飛ばすだけ。でもなかなか良いよ。ただし -nw で起動した時はさすがに動いてくれない。以下を ~/.emacs.el に追加した。(if (eq window-system 'x)  (mouse-avoidance-mode 'animate)) 重なっている時に何か文字を打つと、マウスポインタがひょこひょこと逃げていく。animate 以外にも banish, exile, jump などいろいろあるみたい。詳しくは M-x describe-function [Enter] mouse-avoidance-mode [Enter] 見るべし。Meadow だと、以下の設定で本当に消せる。(setq w32-hide-mouse-on-key t) (setq w32-hide-mouse-timeout 5000)","link":"https://masutaka.net/2007-09-13-1/","isoDate":"2007-09-13T00:00:00.000Z","dateMiliSeconds":1189641600000,"authorName":"masutaka"},{"title":"文字列の検索","content":"今まで、ある変数にある文字列が含まれているかを検索する場合、\ngrep を使うなんてなんだか大げさだなあと感じていた件について。\n|if echo $BAR | grep &ldquo;hoge&rdquo; &gt; /dev/null; then\n|\t&hellip;\n|fi\nなどと書いていたが、正規表現を用いない検索の場合は fgrep を使うのが良い\nとのこと。内部の検索アルゴリズムが異なるので、スピードが早くなるそう。へえ〜\nまあ、case 文使うって手もあるけどね。","contentSnippet":"今まで、ある変数にある文字列が含まれているかを検索する場合、grep を使うなんてなんだか大げさだなあと感じていた件について。|if echo $BAR | grep “hoge” > /dev/null; then|\t…|fiなどと書いていたが、正規表現を用いない検索の場合は fgrep を使うのが良いとのこと。内部の検索アルゴリズムが異なるので、スピードが早くなるそう。へえ〜まあ、case 文使うって手もあるけどね。","link":"https://masutaka.net/2007-09-06-1/","isoDate":"2007-09-06T00:00:00.000Z","dateMiliSeconds":1189036800000,"authorName":"masutaka"},{"title":"Xming","content":"開発環境が PC になり、メールだけのために WS を使うのも効率が悪くなって\nきたので、Xming を使うことにしてみた。Xming とは Windows で動く X サー\nバとのこと。Tera Term で適当な WS にログインして、環境変数 DISPLAY を\nPC 側に設定し、Emacs を起動すると、Windows 側に窓がポコっと出るように\nなる。\n機種依存文字が表示できなかったが、JISX0213 フォントを使うようにしたら表\n示できるようになった。Meadow に日本語のコピペがうまくいかないのはなんと\nかしたいなあ。秀丸や FireFox を経由すれば出来るんだけどね。","contentSnippet":"開発環境が PC になり、メールだけのために WS を使うのも効率が悪くなってきたので、Xming を使うことにしてみた。Xming とは Windows で動く X サーバとのこと。Tera Term で適当な WS にログインして、環境変数 DISPLAY をPC 側に設定し、Emacs を起動すると、Windows 側に窓がポコっと出るようになる。機種依存文字が表示できなかったが、JISX0213 フォントを使うようにしたら表示できるようになった。Meadow に日本語のコピペがうまくいかないのはなんとかしたいなあ。秀丸や FireFox を経由すれば出来るんだけどね。","link":"https://masutaka.net/2007-08-06-1/","isoDate":"2007-08-06T00:00:00.000Z","dateMiliSeconds":1186358400000,"authorName":"masutaka"},{"title":"重複メール","content":"To: masutaka.net@gmail.com Cc: 加入しているメーリングリスト\nという宛先でメールが来ると、同じメールが 2 通来てしまう。\nprocmail 付属の formail を使えば Message-ID が同じメールを削除してくれる。詳細は割愛。\nでも削除は怖いから、どこかのディレクトリに待避したいなあ。Notes のメールは Message-ID が重複しているし&hellip;。\nあとは、メール本文が同じかどうかでも判断するようにしたい。MD5 でハッシュを計算すれば、負荷は少ないはず。","contentSnippet":"To: masutaka.net@gmail.com Cc: 加入しているメーリングリストという宛先でメールが来ると、同じメールが 2 通来てしまう。procmail 付属の formail を使えば Message-ID が同じメールを削除してくれる。詳細は割愛。でも削除は怖いから、どこかのディレクトリに待避したいなあ。Notes のメールは Message-ID が重複しているし…。あとは、メール本文が同じかどうかでも判断するようにしたい。MD5 でハッシュを計算すれば、負荷は少ないはず。","link":"https://masutaka.net/2007-07-31-1/","isoDate":"2007-07-31T00:00:00.000Z","dateMiliSeconds":1185840000000,"authorName":"masutaka"},{"title":"aa","content":"アスキーアートを表示するための chalow プラグインなんだって。\n{{aa(&#39;TEXT&#39;)}} と書くと、アスキーアートをこのようにプロポーショナルフォントで表示してくれる。\n∩＿＿＿∩\n| ノ　ヽ\n/　●　● |　クマ──！！\n|　( _●_)　ミ\n彡､　|∪|　､｀＼\n/　＿＿　ヽノ　/´&gt;　)\n(＿＿＿）　/　(_／\n|　/\n|　／＼　＼\n|　/　)　)\n∪　（　＼\n＼＿)\n ちなみに、このプラグインを使わないとこうなる。\n　∩＿＿＿∩\n| ノ　ヽ\n/　●　● |　クマ──！！\n|　( ●)　ミ\n彡､　|∪|　､｀＼\n/　＿＿　ヽノ　/´&gt;　)\n(＿＿＿）　/　(_／\n|　/","contentSnippet":"アスキーアートを表示するための chalow プラグインなんだって。{{aa('TEXT')}} と書くと、アスキーアートをこのようにプロポーショナルフォントで表示してくれる。∩＿＿＿∩| ノ　ヽ/　●　● |　クマ──！！|　( _●_)　ミ彡､　|∪|　､｀＼/　＿＿　ヽノ　/´>　)(＿＿＿）　/　(_／|　/|　／＼　＼|　/　)　)∪　（　＼＼＿) ちなみに、このプラグインを使わないとこうなる。　∩＿＿＿∩| ノ　ヽ/　●　● |　クマ──！！|　( ●)　ミ彡､　|∪|　､｀＼/　＿＿　ヽノ　/´>　)(＿＿＿）　/　(_／|　/","link":"https://masutaka.net/2007-07-03-1/","isoDate":"2007-07-03T00:00:00.000Z","dateMiliSeconds":1183420800000,"authorName":"masutaka"},{"title":"chalow を始めた。","content":"chalow(URL: http://chalow.org/ ) というツールを使うと、\nこの Changelogメモを Web ページに変換できることが分かった。\n  clmemo(のデフォルトの設定) では &ldquo;(&rdquo; と &ldquo;)&rdquo; で囲われたものがカテゴリと\nして扱われるが、chalow では &ldquo;[&rdquo; と &ldquo;]&rdquo; という違いがある。\n  一応、以下のスクリプトで &ldquo;(カテゴリ)&rdquo; から &ldquo;[カテゴリ]&rdquo; への変換を行\nうことは出来たが、そもそも clmemo と chalow とでは、お題やカテゴリの\n考え方がだいぶ違うみたい。変換しても意味が無いので、カテゴリ分けをす\nるのは今日からにしよう。\n  #!/usr/bin/ruby ifile = File.open(&#34;/home/masutaka/clmemo.txt&#34;, &#34;r&#34;) ofile = File.open(&#34;/home/masutaka/tmp/clmemo2.txt&#34;, &#34;w&#34;) while line = ifile.gets if /^\\t\\* .+\\(/ =~ line line_array = line.split(&#34;:&#34;) head = line_array[0] line_array.shift body = line_array.join head = head.","contentSnippet":"chalow(URL: http://chalow.org/ ) というツールを使うと、この Changelogメモを Web ページに変換できることが分かった。  clmemo(のデフォルトの設定) では “(” と “)” で囲われたものがカテゴリとして扱われるが、chalow では “[” と “]” という違いがある。  一応、以下のスクリプトで “(カテゴリ)” から “[カテゴリ]” への変換を行うことは出来たが、そもそも clmemo と chalow とでは、お題やカテゴリの考え方がだいぶ違うみたい。変換しても意味が無いので、カテゴリ分けをするのは今日からにしよう。  #!/usr/bin/ruby ifile = File.open(\"/home/masutaka/clmemo.txt\", \"r\") ofile = File.open(\"/home/masutaka/tmp/clmemo2.txt\", \"w\") while line = ifile.gets if /^\\t\\* .+\\(/ =~ line line_array = line.split(\":\") head = line_array[0] line_array.shift body = line_array.join head = head.","link":"https://masutaka.net/2007-07-01-1/","isoDate":"2007-07-01T00:00:00.000Z","dateMiliSeconds":1183248000000,"authorName":"masutaka"},{"title":"プロクシサーバ","content":"squid ってのがあるらしい。","contentSnippet":"squid ってのがあるらしい。","link":"https://masutaka.net/2007-06-23-1/","isoDate":"2007-06-23T00:00:00.000Z","dateMiliSeconds":1182556800000,"authorName":"masutaka"},{"title":"指定した *.el をロードしたファイルが分かる。","content":"(require &#39;loadhist) (file-dependents (feature-file &#39;cl)) ","contentSnippet":"(require 'loadhist) (file-dependents (feature-file 'cl))","link":"https://masutaka.net/2007-06-10-1/","isoDate":"2007-06-10T00:00:00.000Z","dateMiliSeconds":1181433600000,"authorName":"masutaka"},{"title":"replace-regexp で行頭に行番号挿入","content":"M-C-% ^ [Return] ,(+ 1 #) [Return]\n5 から始めたい場合は 1 を 5 に変えれば OK\nもちろん、replace-regexp でも OK\nURL: http://steve-yegge.blogspot.com/2006/06/shiny-and-new-emacs-22.html ","contentSnippet":"M-C-% ^ [Return] ,(+ 1 #) [Return]5 から始めたい場合は 1 を 5 に変えれば OKもちろん、replace-regexp でも OKURL: http://steve-yegge.blogspot.com/2006/06/shiny-and-new-emacs-22.html","link":"https://masutaka.net/2007-05-29-1/","isoDate":"2007-05-29T00:00:00.000Z","dateMiliSeconds":1180396800000,"authorName":"masutaka"},{"title":"izonmoji-mode.elのその後","content":"[2007-04-25-1] の改善\njisx0213 bdf フォントをインストールしたら、機種依存文字を\n14point で表示できるようになった。というわけで xfonts-kappa20 は削除。\nIPA モナーフォントは TrueType だったので、よくわからなかった。","contentSnippet":"[2007-04-25-1] の改善jisx0213 bdf フォントをインストールしたら、機種依存文字を14point で表示できるようになった。というわけで xfonts-kappa20 は削除。IPA モナーフォントは TrueType だったので、よくわからなかった。","link":"https://masutaka.net/2007-05-12-1/","isoDate":"2007-05-12T00:00:00.000Z","dateMiliSeconds":1178928000000,"authorName":"masutaka"},{"title":"Anthy のリリース時のポリシー","content":"下 2 桁が 00 なのが安定版","contentSnippet":"下 2 桁が 00 なのが安定版","link":"https://masutaka.net/2007-05-09-1/","isoDate":"2007-05-09T00:00:00.000Z","dateMiliSeconds":1178668800000,"authorName":"masutaka"},{"title":"一応取っておくURL","content":"Solaris Links\nSolaris Package Archive\nURL: http://www.ibiblio.org/pub/packages/solaris/sparc/ BLUECOARA.NET\nURL: http://solaris.bluecoara.net/ Solaris 2 Frequently Asked Questions\nURL: http://sdc.sun.co.jp/solaris/solaris2-faq/index.html Solaris8へインストールする基本フリーソフト一覧\nURL: http://www2.ocn.ne.jp/~virii/sol8/freesoft-lst.html バージョン管理システム CVS を使う\nURL: http://radiofly.to/nishi/cvs/ WELLCOME TO EARLY WARNING SYSTEM!!\nURL: http://www.oratorio-tangram.com/ ","contentSnippet":"Solaris LinksSolaris Package ArchiveURL: http://www.ibiblio.org/pub/packages/solaris/sparc/ BLUECOARA.NETURL: http://solaris.bluecoara.net/ Solaris 2 Frequently Asked QuestionsURL: http://sdc.sun.co.jp/solaris/solaris2-faq/index.html Solaris8へインストールする基本フリーソフト一覧URL: http://www2.ocn.ne.jp/~virii/sol8/freesoft-lst.html バージョン管理システム CVS を使うURL: http://radiofly.to/nishi/cvs/ WELLCOME TO EARLY WARNING SYSTEM!!URL: http://www.oratorio-tangram.com/","link":"https://masutaka.net/2007-04-29-2/","isoDate":"2007-04-29T01:00:00.000Z","dateMiliSeconds":1177808400000,"authorName":"masutaka"},{"title":"UIM を GNOME パネルに追加する方法","content":"一旦ログアウトする必要あり。\ncd /usr/lib/bonobo/servers ln -s /usr/local/lib/bonobo/servers/GNOME_UimApplet.server ","contentSnippet":"一旦ログアウトする必要あり。cd /usr/lib/bonobo/servers ln -s /usr/local/lib/bonobo/servers/GNOME_UimApplet.server","link":"https://masutaka.net/2007-04-29-1/","isoDate":"2007-04-29T00:00:00.000Z","dateMiliSeconds":1177804800000,"authorName":"masutaka"},{"title":"type","content":"which より type を使った方が良いとどこかに書いてあったような気がする。","contentSnippet":"which より type を使った方が良いとどこかに書いてあったような気がする。","link":"https://masutaka.net/2007-04-28-1/","isoDate":"2007-04-28T00:00:00.000Z","dateMiliSeconds":1177718400000,"authorName":"masutaka"},{"title":"izonmoji-mode.el","content":"xfonts-kappa20 をインストールしないと、izonmoji-mode で表示できなかった。\nmona-font に手動で切替えてしまえば表示できるのに。。。\nそれにしても、20+bold はデカイ。。。","contentSnippet":"xfonts-kappa20 をインストールしないと、izonmoji-mode で表示できなかった。mona-font に手動で切替えてしまえば表示できるのに。。。それにしても、20+bold はデカイ。。。","link":"https://masutaka.net/2007-04-25-1/","isoDate":"2007-04-25T00:00:00.000Z","dateMiliSeconds":1177459200000,"authorName":"masutaka"},{"title":"openldap のインストール方法","content":"apt-get install slapd ldap-utils libsasl2-modules ","contentSnippet":"apt-get install slapd ldap-utils libsasl2-modules","link":"https://masutaka.net/2007-04-15-1/","isoDate":"2007-04-15T00:00:00.000Z","dateMiliSeconds":1176595200000,"authorName":"masutaka"},{"title":"ランレベルまとめ","content":"ランレベルは処理系によってかなり違いがある。\n|(Solaris)\n|0\tPROM モニタモードへ移行(ここで power-off を実行すると電源が落ちる)\n|1orS\tシングルユーザモード(1 の場合はシステム管理者のみ LOGON 可能)\n|2\tマルチユーザーモード(クライアントとして動作ができる)\n|3\tマルチユーザーモード(サーバーとして動作できる：標準値)\n|4\t使われていない\n|5\t電源 OFF\n|6\t再起動\n|\n|(Debian GNU/Linux)\n|0\t停止\n|1\tシングルユーザーモード（rootのみ）\n|2\tマルチユーザーモード\n|3\t2 と同じ\n|4\t2 と同じ\n|5\t2 と同じ\n|6\t再起動\n|\n|(RedHat 系 Linux)\n|0\t停止\n|1\tシングルユーザーモード（rootのみ）\n|2\tネットワークなしのマルチユーザーモード\n|3\tテキストログインによるマルチユーザーモード\n|4\t使われていない\n|5\tグラフィカルログインによるマルチユーザーモード\n|6\t再起動\n|\n|現在のランレベルを確認するにはコマンド /sbin/runlevel で確認可能。\n|起動時のrunlevelを変更したい場合には /etc/inittab の\n|id:3:initdefault:\n|の部分を","contentSnippet":"ランレベルは処理系によってかなり違いがある。|(Solaris)|0\tPROM モニタモードへ移行(ここで power-off を実行すると電源が落ちる)|1orS\tシングルユーザモード(1 の場合はシステム管理者のみ LOGON 可能)|2\tマルチユーザーモード(クライアントとして動作ができる)|3\tマルチユーザーモード(サーバーとして動作できる：標準値)|4\t使われていない|5\t電源 OFF|6\t再起動||(Debian GNU/Linux)|0\t停止|1\tシングルユーザーモード（rootのみ）|2\tマルチユーザーモード|3\t2 と同じ|4\t2 と同じ|5\t2 と同じ|6\t再起動||(RedHat 系 Linux)|0\t停止|1\tシングルユーザーモード（rootのみ）|2\tネットワークなしのマルチユーザーモード|3\tテキストログインによるマルチユーザーモード|4\t使われていない|5\tグラフィカルログインによるマルチユーザーモード|6\t再起動||現在のランレベルを確認するにはコマンド /sbin/runlevel で確認可能。|起動時のrunlevelを変更したい場合には /etc/inittab の|id:3:initdefault:|の部分を","link":"https://masutaka.net/2007-04-05-1/","isoDate":"2007-04-05T00:00:00.000Z","dateMiliSeconds":1175731200000,"authorName":"masutaka"},{"title":"vim のキーバインド","content":"設定ファイルは ~/.exrc になる。\nvi にはないキーバインドがいくつかあると思う。\n         k 上へ移動   j 下へ移動   h 左へ移動   l 右へ移動   w 単語毎に右移動   W wよりももう少し大きめに右移動。   b 単語毎に左移動   B bよりももう少し大きめに左移動。   0 行の先頭へ移動   $ 行の終端へ移動   1G ファイルの先頭へ移動(1を50とかにすると、50行目に飛ぶ。)   G ファイルの終端へ移動   H 画面の上端に移動   M 画面の真ん中に移動   H 画面の下端に移動   z[RET] 現在行が画面の一番上に来るように画面を書き換える。(50z[RET]で&hellip;)   z.","contentSnippet":"設定ファイルは ~/.exrc になる。vi にはないキーバインドがいくつかあると思う。         k 上へ移動   j 下へ移動   h 左へ移動   l 右へ移動   w 単語毎に右移動   W wよりももう少し大きめに右移動。   b 単語毎に左移動   B bよりももう少し大きめに左移動。   0 行の先頭へ移動   $ 行の終端へ移動   1G ファイルの先頭へ移動(1を50とかにすると、50行目に飛ぶ。)   G ファイルの終端へ移動   H 画面の上端に移動   M 画面の真ん中に移動   H 画面の下端に移動   z[RET] 現在行が画面の一番上に来るように画面を書き換える。(50z[RET]で…)   z.","link":"https://masutaka.net/2007-03-25-1/","isoDate":"2007-03-25T00:00:00.000Z","dateMiliSeconds":1174780800000,"authorName":"masutaka"},{"title":"PIXUS 560i で印刷","content":"/etc/apt/sources.listに次の行を追加。\n deb http://mambo.kuhp.kyoto-u.ac.jp/~takushi/debian ./\n プリンタドライバを取得。\n apt-get update apt-get install libcnbj-2.4 bjfilter-2.4 pstocanonbj  CUPS もインストールされ、http://127.0.0.1:631/ 経由で CUPS の設定が\n出来るようだ。ただし、USB 経由の印刷の方法しか分からなかった。\n結局 USB での印刷も試さず、この作業はペンディングとする。。\nURL: http://debian.fam.cx/index.php?stable#s2fbf829 URL: http://mambo.kuhp.kyoto-u.ac.jp/~takushi/japanese.html ","contentSnippet":"/etc/apt/sources.listに次の行を追加。 deb http://mambo.kuhp.kyoto-u.ac.jp/~takushi/debian ./ プリンタドライバを取得。 apt-get update apt-get install libcnbj-2.4 bjfilter-2.4 pstocanonbj  CUPS もインストールされ、http://127.0.0.1:631/ 経由で CUPS の設定が出来るようだ。ただし、USB 経由の印刷の方法しか分からなかった。結局 USB での印刷も試さず、この作業はペンディングとする。。URL: http://debian.fam.cx/index.php?stable#s2fbf829 URL: http://mambo.kuhp.kyoto-u.ac.jp/~takushi/japanese.html","link":"https://masutaka.net/2007-03-17-2/","isoDate":"2007-03-17T01:00:00.000Z","dateMiliSeconds":1174093200000,"authorName":"masutaka"},{"title":"acroread7 で日本語を表示","content":"下記の場所から acroread-japanesefont_7.0.0-0_i386.deb を取得。\nURL: http://debian.fam.cx/index.php?uploader dpkg -i acroread-japanesefont_7.0.0-0_i386.deb でインストール完了。日本語が見えるようになった。","contentSnippet":"下記の場所から acroread-japanesefont_7.0.0-0_i386.deb を取得。URL: http://debian.fam.cx/index.php?uploader dpkg -i acroread-japanesefont_7.0.0-0_i386.deb でインストール完了。日本語が見えるようになった。","link":"https://masutaka.net/2007-03-17-1/","isoDate":"2007-03-17T00:00:00.000Z","dateMiliSeconds":1174089600000,"authorName":"masutaka"},{"title":"awk の短いスクリプトがあった。結構使えそう。","content":"http://takeno.iee.niit.ac.jp/~shige/misc/script/awk-mini.html ","contentSnippet":"http://takeno.iee.niit.ac.jp/~shige/misc/script/awk-mini.html","link":"https://masutaka.net/2007-03-13-1/","isoDate":"2007-03-13T00:00:00.000Z","dateMiliSeconds":1173744000000,"authorName":"masutaka"},{"title":"gconf-editor でアプリにキーを割り当てられる。","content":"/apps/metacity/global_keybindings =&gt; run_command_1 =&gt; F4\n/apps/metacity/keybinding_commands =&gt; command_1 =&gt; krxvt","contentSnippet":"/apps/metacity/global_keybindings => run_command_1 => F4/apps/metacity/keybinding_commands => command_1 => krxvt","link":"https://masutaka.net/2007-03-11-3/","isoDate":"2007-03-11T02:00:00.000Z","dateMiliSeconds":1173578400000,"authorName":"masutaka"},{"title":"NAS のフォルダを Linux からマウント","content":"smbfs パッケージが必要。後は /etc/fstab に書くだけ。\n//nas1/info /mnt/nas1/info smbfs username=masutaka,password=XXXXXXXX,iocharset=euc-jp,codepage=cp932 0 0 //nas1/share /mnt/nas1/share smbfs username=masutaka,password=XXXXXXXX,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 automount を使った NAS のマウント → [2007-10-27-1] ","contentSnippet":"smbfs パッケージが必要。後は /etc/fstab に書くだけ。//nas1/info /mnt/nas1/info smbfs username=masutaka,password=XXXXXXXX,iocharset=euc-jp,codepage=cp932 0 0 //nas1/share /mnt/nas1/share smbfs username=masutaka,password=XXXXXXXX,iocharset=euc-jp,codepage=cp932,uid=1000,gid=1000 0 0 automount を使った NAS のマウント → [2007-10-27-1]","link":"https://masutaka.net/2007-03-11-2/","isoDate":"2007-03-11T01:00:00.000Z","dateMiliSeconds":1173574800000,"authorName":"masutaka"},{"title":"gdm の日本語表示","content":"/etc/default/gdmというファイルに\nLANG=ja_JP.EUC-JP\nと書いておくと日本語表示になる。","contentSnippet":"/etc/default/gdmというファイルにLANG=ja_JP.EUC-JPと書いておくと日本語表示になる。","link":"https://masutaka.net/2007-03-11-1/","isoDate":"2007-03-11T00:00:00.000Z","dateMiliSeconds":1173571200000,"authorName":"masutaka"},{"title":"一番早いミラーサーバを探して /etc/apt/sources.list を書き換えてくれる。","content":"apt-spy -s jp -d sarge ","contentSnippet":"apt-spy -s jp -d sarge","link":"https://masutaka.net/2007-03-10-1/","isoDate":"2007-03-10T00:00:00.000Z","dateMiliSeconds":1173484800000,"authorName":"masutaka"},{"title":"vnc -- UNIX から Windows を操作する","content":"[2003-01-31-2] に知ってから、ようやく使えたよ。\n|1. Windows に RealVNC 日本語版をインストールした。\n| http://underdone.net/blog/sb.cgi?cid=30 |2. FireWall の設定で、ポート 5900 を開けた。\n|3. Debian に vncviewer をインストールした。\n| # apt-get install xvnc4viewer\n|4. Linux から下記を実行するだけ。\n| % vncview -FullScreen Windowsマシンの名前\n|5. フルスクリーンを解除したい時は、F8 キーを押せば良い。","contentSnippet":"[2003-01-31-2] に知ってから、ようやく使えたよ。|1. Windows に RealVNC 日本語版をインストールした。| http://underdone.net/blog/sb.cgi?cid=30 |2. FireWall の設定で、ポート 5900 を開けた。|3. Debian に vncviewer をインストールした。| # apt-get install xvnc4viewer|4. Linux から下記を実行するだけ。| % vncview -FullScreen Windowsマシンの名前|5. フルスクリーンを解除したい時は、F8 キーを押せば良い。","link":"https://masutaka.net/2007-03-02-2/","isoDate":"2007-03-02T01:00:00.000Z","dateMiliSeconds":1172797200000,"authorName":"masutaka"},{"title":"ldd ではなく、cygcheck を使う。","content":"引数はファイルではなくプログラム名であることに注意。","contentSnippet":"引数はファイルではなくプログラム名であることに注意。","link":"https://masutaka.net/2007-03-02-1/","isoDate":"2007-03-02T00:00:00.000Z","dateMiliSeconds":1172793600000,"authorName":"masutaka"},{"title":"gdb で SIG32 シグナルが出たら？","content":"(gdb) handle SIG32 noprin","contentSnippet":"(gdb) handle SIG32 noprin","link":"https://masutaka.net/2007-02-05-1/","isoDate":"2007-02-05T00:00:00.000Z","dateMiliSeconds":1170633600000,"authorName":"masutaka"},{"title":"ssh で本当にパスワードを聞かれなくなる。","content":"[2003-09-23-1] の改良版。SSH protocol version 2 の場合。\n DSA キーを生成します。   local% ssh-keygen -t dsa\n※ 出力するファイル名、パスフレーズの入力を求められますが、何も入力\nせずに全てEnteyキーを押下して下さい。\n 公開キーをリモートホストにコピーします。   local% scp ~/.ssh/id_dsa.pub name@remort:\n リモートホストにログインし、authorized_keys2 ファイルを生成します。   local% ssh name@remort\nremort% chmod go-w .\nremort% mkdir .ssh\nremort% chmod 700 .ssh\nremort% chmod g+s .ssh\nremort% cd .ssh\nremort% touch authorized_keys2\nremort% chmod 600 authorized_keys2\nremort% cat ~/id_dsa.pub &raquo; authorized_keys2\nremort% rm ~/id_dsa.pub\n 設定完了です。動作を確認します。   remort% logout","contentSnippet":"[2003-09-23-1] の改良版。SSH protocol version 2 の場合。 DSA キーを生成します。   local% ssh-keygen -t dsa※ 出力するファイル名、パスフレーズの入力を求められますが、何も入力せずに全てEnteyキーを押下して下さい。 公開キーをリモートホストにコピーします。   local% scp ~/.ssh/id_dsa.pub name@remort: リモートホストにログインし、authorized_keys2 ファイルを生成します。   local% ssh name@remortremort% chmod go-w .remort% mkdir .sshremort% chmod 700 .sshremort% chmod g+s .sshremort% cd .sshremort% touch authorized_keys2remort% chmod 600 authorized_keys2remort% cat ~/id_dsa.pub » authorized_keys2remort% rm ~/id_dsa.pub 設定完了です。動作を確認します。   remort% logout","link":"https://masutaka.net/2007-01-27-1/","isoDate":"2007-01-27T00:00:00.000Z","dateMiliSeconds":1169856000000,"authorName":"masutaka"},{"title":"設定ファイルの読み込み順番","content":"ログインシェルとして起動: .zshenv -&gt; .zprofile -&gt; .zshrc -&gt; .zlogin\nインタラクティブシェルとして起動: .zshenv -&gt; .zshrc\nシェルスクリプトとして起動: .zshenv\nログインシェルとして終了: .zlogout","contentSnippet":"ログインシェルとして起動: .zshenv -> .zprofile -> .zshrc -> .zloginインタラクティブシェルとして起動: .zshenv -> .zshrcシェルスクリプトとして起動: .zshenvログインシェルとして終了: .zlogout","link":"https://masutaka.net/2007-01-22-1/","isoDate":"2007-01-22T00:00:00.000Z","dateMiliSeconds":1169424000000,"authorName":"masutaka"},{"title":"web site のちっちゃなアイコンを指定する。","content":"&lt;LINK REL=&#34;SHORTCUT ICON&#34; HREF=&#34;favicon.ico&#34;&gt; or &lt;LINK REL=&#34;SHORTCUT ICON&#34; HREF=&#34;http://nais.to/favicon.ico&#34;&gt; ","contentSnippet":"<LINK REL=\"SHORTCUT ICON\" HREF=\"favicon.ico\"> or <LINK REL=\"SHORTCUT ICON\" HREF=\"http://nais.to/favicon.ico\">","link":"https://masutaka.net/2007-01-19-1/","isoDate":"2007-01-19T00:00:00.000Z","dateMiliSeconds":1169164800000,"authorName":"masutaka"},{"title":"const の位置","content":"(1) const int *p;\n(2) int *const p;\n(3) int const *p;\n(1) は const int なので、*p が read only になる。\n(2) は *const なので、p が read only になる。\n(3) は (1) と同じ。","contentSnippet":"(1) const int *p;(2) int *const p;(3) int const *p;(1) は const int なので、*p が read only になる。(2) は *const なので、p が read only になる。(3) は (1) と同じ。","link":"https://masutaka.net/2006-12-19-1/","isoDate":"2006-12-19T00:00:00.000Z","dateMiliSeconds":1166486400000,"authorName":"masutaka"},{"title":"起動方法の変更","content":"/usr/dt/bin/dtconfig -d すると、次回から CUI で起動する。\n/usr/dt/bin/dtconfig -e すると、次回から GUI で起動する。","contentSnippet":"/usr/dt/bin/dtconfig -d すると、次回から CUI で起動する。/usr/dt/bin/dtconfig -e すると、次回から GUI で起動する。","link":"https://masutaka.net/2006-12-09-1/","isoDate":"2006-12-09T00:00:00.000Z","dateMiliSeconds":1165622400000,"authorName":"masutaka"},{"title":"rebaseall","content":"|zsh を起動すると、↓こんなメッセージが出てどうしようもなくなった。\n|*** unable to remap &hellip;. to same address as parent(0xDF0000) != 0xE00000\n|fork failed: resource temporarily unavailable\n|ネットで調べたら、ファイル名を指定して実行→ash→rebaseallを\n|実行すれば良いことが分かった。解決！\nURL: http://d.hatena.ne.jp/Wacky/20050807 ","contentSnippet":"|zsh を起動すると、↓こんなメッセージが出てどうしようもなくなった。|*** unable to remap …. to same address as parent(0xDF0000) != 0xE00000|fork failed: resource temporarily unavailable|ネットで調べたら、ファイル名を指定して実行→ash→rebaseallを|実行すれば良いことが分かった。解決！URL: http://d.hatena.ne.jp/Wacky/20050807","link":"https://masutaka.net/2006-11-18-1/","isoDate":"2006-11-18T00:00:00.000Z","dateMiliSeconds":1163808000000,"authorName":"masutaka"},{"title":"労働基準法第91条（制裁規定の制限）","content":"就業規則で、労働者に対して減給の制裁を定める場合においては、その減\n給は、１回の額が平均賃金の１日分の半額を超え、総額が１賃金支払期に\nおける賃金の総額の10分の１を超えてはならない。\n→罰金制裁は１日の賃金の半額もしくは１月の給与の１割以内。\n参考情報: http://roudousha.net/ ","contentSnippet":"就業規則で、労働者に対して減給の制裁を定める場合においては、その減給は、１回の額が平均賃金の１日分の半額を超え、総額が１賃金支払期における賃金の総額の10分の１を超えてはならない。→罰金制裁は１日の賃金の半額もしくは１月の給与の１割以内。参考情報: http://roudousha.net/","link":"https://masutaka.net/2006-11-04-1/","isoDate":"2006-11-04T00:00:00.000Z","dateMiliSeconds":1162598400000,"authorName":"masutaka"},{"title":"ハゲ対策","content":"|自分も半年前フケ油脂で悩んでいて、一番よかったのが走って汗かいて、\n|ストレスを減らし、カプサイシン取り、ビタミンC亜鉛のサプリを飲んで\n|10時から2 時までに寝る。前より太く薄くなくなった","contentSnippet":"|自分も半年前フケ油脂で悩んでいて、一番よかったのが走って汗かいて、|ストレスを減らし、カプサイシン取り、ビタミンC亜鉛のサプリを飲んで|10時から2 時までに寝る。前より太く薄くなくなった","link":"https://masutaka.net/2006-10-22-2/","isoDate":"2006-10-22T01:00:00.000Z","dateMiliSeconds":1161478800000,"authorName":"masutaka"},{"title":"YouTube","content":"YOU TUBEの動画をダウソする方法ｗ5\n|http://javimoya.com/blog/youtube_en.php\n|or\n|http://keepvid.com/\n|\n|ダウソしたい YOU TUBE の url をコピベして、上のサイトに行け。\n|そして、そのurlを貼り付けて、横の選択で「YOU TUBE」にあわせ、\n|さらに右側の「down load」をクリックしろ！！\n|これで、お宝映像が手に入るってことだ！！","contentSnippet":"YOU TUBEの動画をダウソする方法ｗ5|http://javimoya.com/blog/youtube_en.php|or|http://keepvid.com/||ダウソしたい YOU TUBE の url をコピベして、上のサイトに行け。|そして、そのurlを貼り付けて、横の選択で「YOU TUBE」にあわせ、|さらに右側の「down load」をクリックしろ！！|これで、お宝映像が手に入るってことだ！！","link":"https://masutaka.net/2006-10-22-1/","isoDate":"2006-10-22T00:00:00.000Z","dateMiliSeconds":1161475200000,"authorName":"masutaka"},{"title":"/usr/bin、/usr/ucb、/usr/xpg4/bin","content":"|Solaris では SystemV 系、BSD 系、POSIX 系と、3種類のコマンドが利用できる。\n|それぞれ /usr/bin、/usr/ucb、/usr/xpg4/bin に収められている。\n|\n|SystemV :/usr/bin\n|BSD :/usr/ucb\n|POSIX :/usr/xpg4/bin\n|\n|デフォルトの設定では /usr/bin にあるコマンドが実行される。","contentSnippet":"|Solaris では SystemV 系、BSD 系、POSIX 系と、3種類のコマンドが利用できる。|それぞれ /usr/bin、/usr/ucb、/usr/xpg4/bin に収められている。||SystemV :/usr/bin|BSD :/usr/ucb|POSIX :/usr/xpg4/bin||デフォルトの設定では /usr/bin にあるコマンドが実行される。","link":"https://masutaka.net/2006-10-12-1/","isoDate":"2006-10-12T00:00:00.000Z","dateMiliSeconds":1160611200000,"authorName":"masutaka"},{"title":"システムコールやシグナルをトレースできる。","content":"スゴすぎ。下記は ls の実行結果をトレースしている。\nSolaris % truss ls\nDebian % strace ls","contentSnippet":"スゴすぎ。下記は ls の実行結果をトレースしている。Solaris % truss lsDebian % strace ls","link":"https://masutaka.net/2006-10-11-1/","isoDate":"2006-10-11T00:00:00.000Z","dateMiliSeconds":1160524800000,"authorName":"masutaka"},{"title":"Elisp から Emacs の使用メモリサイズを知る方法","content":"Eval: (memory-use-counts)","contentSnippet":"Eval: (memory-use-counts)","link":"https://masutaka.net/2006-08-19-1/","isoDate":"2006-08-19T00:00:00.000Z","dateMiliSeconds":1155945600000,"authorName":"masutaka"},{"title":"文字化け回避","content":"smb.conf に以下を設定しないと日本語ファイル名が化ける。\ndos charset = CP932 unix charset = EUCJP-MS display charset = LOCALE ","contentSnippet":"smb.conf に以下を設定しないと日本語ファイル名が化ける。dos charset = CP932 unix charset = EUCJP-MS display charset = LOCALE","link":"https://masutaka.net/2006-08-01-1/","isoDate":"2006-08-01T00:00:00.000Z","dateMiliSeconds":1154390400000,"authorName":"masutaka"},{"title":"生活","content":"ステッパーを３０分踏んだ。布団を干して、何回か洗濯をした。ノクチのマル\nイで、シャツ２枚とTシャツ１枚買ってきた。￥14,980なり。","contentSnippet":"ステッパーを３０分踏んだ。布団を干して、何回か洗濯をした。ノクチのマルイで、シャツ２枚とTシャツ１枚買ってきた。￥14,980なり。","link":"https://masutaka.net/2006-07-30-1/","isoDate":"2006-07-30T00:00:00.000Z","dateMiliSeconds":1154217600000,"authorName":"masutaka"},{"title":"生活","content":"ステッパーを３０分踏んで、シャワー浴びて、豆腐と納豆を食べた。","contentSnippet":"ステッパーを３０分踏んで、シャワー浴びて、豆腐と納豆を食べた。","link":"https://masutaka.net/2006-07-29-1/","isoDate":"2006-07-29T00:00:00.000Z","dateMiliSeconds":1154131200000,"authorName":"masutaka"},{"title":"新城","content":"[2006-07-23-2] のつづき\n昨日の西口商店街のお祭りはサンバだったらしい。数年前まではフロンターレ\nの選手も参加していて、全体的にも盛り上がっていたらしいが、最近は踊り子\nさん達の老朽化が目立つらしい。。。","contentSnippet":"[2006-07-23-2] のつづき昨日の西口商店街のお祭りはサンバだったらしい。数年前まではフロンターレの選手も参加していて、全体的にも盛り上がっていたらしいが、最近は踊り子さん達の老朽化が目立つらしい。。。","link":"https://masutaka.net/2006-07-24-2/","isoDate":"2006-07-24T01:00:00.000Z","dateMiliSeconds":1153702800000,"authorName":"masutaka"},{"title":"断水","content":"今日は 22:00〜4:00 まで断水とのこと。ちょっとふざけてないか？次回もこの\n時間だったら文句を言おう。","contentSnippet":"今日は 22:00〜4:00 まで断水とのこと。ちょっとふざけてないか？次回もこの時間だったら文句を言おう。","link":"https://masutaka.net/2006-07-24-1/","isoDate":"2006-07-24T00:00:00.000Z","dateMiliSeconds":1153699200000,"authorName":"masutaka"},{"title":"新城買いもの","content":"cosotoco にバジルを買いに行ったけど、GABAN のがなかった。全体的にあまり\n品揃えがよくないように見える。西口商店街で何かお祭りをやっていた。","contentSnippet":"cosotoco にバジルを買いに行ったけど、GABAN のがなかった。全体的にあまり品揃えがよくないように見える。西口商店街で何かお祭りをやっていた。","link":"https://masutaka.net/2006-07-23-2/","isoDate":"2006-07-23T01:00:00.000Z","dateMiliSeconds":1153616400000,"authorName":"masutaka"},{"title":"日記作成","content":"tdiary-mode は Debian 附属のものは古くて以下のエラーがでてしまう。\n|HTTP fetch: Connection timeout!\nここ から、tdiary-contrib.tar.gz を落としてきて置き換えたら書き込めるよ\nうになった。パッケージからは削除しておいた。\n|# apt-get &ndash;purge remove tdiary-mode","contentSnippet":"tdiary-mode は Debian 附属のものは古くて以下のエラーがでてしまう。|HTTP fetch: Connection timeout!ここ から、tdiary-contrib.tar.gz を落としてきて置き換えたら書き込めるようになった。パッケージからは削除しておいた。|# apt-get –purge remove tdiary-mode","link":"https://masutaka.net/2006-07-23-1/","isoDate":"2006-07-23T00:00:00.000Z","dateMiliSeconds":1153612800000,"authorName":"masutaka"},{"title":"日記作成開始","content":"Apache 立ち上げて、pukiwiki で日記を書いてみようと思った。\n|# apt-get install apache2-mpm-prefork libapache2-mod-php4\npukiwiki は ~/public_html 以下に展開する必要があったので、ここ から\npukiwiki-1.4.7.tar.gz を落としてきた。でも、tdiary はどうだろうと\n思い立ち、tdiary をインストールしてみた。\n|# apt-get install tdiary tdiary-theme tdiary-plugin tdiary-mode\n|% tdiary-setup symlink ~/public_html/diary\nApache のパーミッションでちょっと苦戦したが、何とか使えるようになった。\n--- /etc/apache2/mods-enabled/userdir.conf.bak 2006-07-23 18:01:22.000000000 +0900 +++ /etc/apache2/mods-enabled/userdir.conf 2006-07-23 18:01:33.000000000 +0900 @@ -3,7 +3,8 @@ UserDir disabled root &lt;Directory /home/*/public_html&gt; - AllowOverride FileInfo AuthConfig Limit + AllowOverride FileInfo AuthConfig Limit Options Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec + DirectoryIndex index.html index.rb &lt;/Directory&gt; &lt;/IfModule&gt; --- /home/masutaka/public_html/diary/.","contentSnippet":"Apache 立ち上げて、pukiwiki で日記を書いてみようと思った。|# apt-get install apache2-mpm-prefork libapache2-mod-php4pukiwiki は ~/public_html 以下に展開する必要があったので、ここ からpukiwiki-1.4.7.tar.gz を落としてきた。でも、tdiary はどうだろうと思い立ち、tdiary をインストールしてみた。|# apt-get install tdiary tdiary-theme tdiary-plugin tdiary-mode|% tdiary-setup symlink ~/public_html/diaryApache のパーミッションでちょっと苦戦したが、何とか使えるようになった。--- /etc/apache2/mods-enabled/userdir.conf.bak 2006-07-23 18:01:22.000000000 +0900 +++ /etc/apache2/mods-enabled/userdir.conf 2006-07-23 18:01:33.000000000 +0900 @@ -3,7 +3,8 @@ UserDir disabled root <Directory /home/*/public_html> - AllowOverride FileInfo AuthConfig Limit + AllowOverride FileInfo AuthConfig Limit Options Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec + DirectoryIndex index.html index.rb </Directory> </IfModule> --- /home/masutaka/public_html/diary/.","link":"https://masutaka.net/2006-07-22-1/","isoDate":"2006-07-22T00:00:00.000Z","dateMiliSeconds":1153526400000,"authorName":"masutaka"},{"title":"Samba の設定ファイル等","content":"/etc/samba/smb.conf が設定ファイル。\ntestparm で設定ファイルのチェックができる。\nsmbstatus で誰が今使っているかチェックできる。","contentSnippet":"/etc/samba/smb.conf が設定ファイル。testparm で設定ファイルのチェックができる。smbstatus で誰が今使っているかチェックできる。","link":"https://masutaka.net/2006-07-07-1/","isoDate":"2006-07-07T00:00:00.000Z","dateMiliSeconds":1152230400000,"authorName":"masutaka"},{"title":"w32codecs, realplayer,... などがある場所","content":"add to /etc/apt/sources.list deb http://www.debian-multimedia.org sarge main","contentSnippet":"add to /etc/apt/sources.list deb http://www.debian-multimedia.org sarge main","link":"https://masutaka.net/2006-06-27-1/","isoDate":"2006-06-27T00:00:00.000Z","dateMiliSeconds":1151366400000,"authorName":"masutaka"},{"title":"労働基準法第34条（休憩）","content":"「使用者は、労働時間が６時間を超える場合においては少くとも45分、８\n時間を超える場合においては少くとも１時間の休憩時間を労働時間の途中\nに与えなければならない。」\n参考情報: http://roudousha.net/ ","contentSnippet":"「使用者は、労働時間が６時間を超える場合においては少くとも45分、８時間を超える場合においては少くとも１時間の休憩時間を労働時間の途中に与えなければならない。」参考情報: http://roudousha.net/","link":"https://masutaka.net/2006-06-05-1/","isoDate":"2006-06-05T00:00:00.000Z","dateMiliSeconds":1149465600000,"authorName":"masutaka"},{"title":"このページは移転しました","content":"&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&#34;Refresh&#34; CONTENT=&#34;5;URL=http://toal.jp/devilmaycry3/&#34;&gt; &lt;title&gt;このページは移転しました。&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;このサイトは次の URL に移転しました。 &lt;br&gt;5秒後に新 URL に転送します。 &lt;br&gt;&lt;A HREF=&#34;http://toal.jp/devilmaycry3/&#34;&gt;http://toal.jp/devilmaycry3/&lt;/A&gt; &lt;/p&gt; &lt;br&gt; &lt;p&gt;自動的に飛ばない環境の方、早く進みたい方は上の URL をクリックしてくださいませ。 &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; ","contentSnippet":"<html> <head> <meta http-equiv=\"Refresh\" CONTENT=\"5;URL=http://toal.jp/devilmaycry3/\"> <title>このページは移転しました。</title> </head> <body> <p>このサイトは次の URL に移転しました。 <br>5秒後に新 URL に転送します。 <br><A HREF=\"http://toal.jp/devilmaycry3/\">http://toal.jp/devilmaycry3/</A> </p> <br> <p>自動的に飛ばない環境の方、早く進みたい方は上の URL をクリックしてくださいませ。 </p> </body> </html>","link":"https://masutaka.net/2006-05-28-1/","isoDate":"2006-05-28T00:00:00.000Z","dateMiliSeconds":1148774400000,"authorName":"masutaka"},{"title":"データ型のサイズ","content":"|char=1byte固定\n|\n|(整数型)\n|short int &lt;= int &lt;= long int\n|\n|short int は short と記述可能\n|long int は long と記述可能\n|\n|(実数型)\n|float &lt;= double &lt;= long double\nURL: http://www9.plala.or.jp/sgwr-t/c/sec13.html ","contentSnippet":"|char=1byte固定||(整数型)|short int <= int <= long int||short int は short と記述可能|long int は long と記述可能||(実数型)|float <= double <= long doubleURL: http://www9.plala.or.jp/sgwr-t/c/sec13.html","link":"https://masutaka.net/2006-05-25-1/","isoDate":"2006-05-25T00:00:00.000Z","dateMiliSeconds":1148515200000,"authorName":"masutaka"},{"title":"lspci すると、どんなハードを使っているかわかる。","content":"","contentSnippet":"","link":"https://masutaka.net/2006-04-23-1/","isoDate":"2006-04-23T00:00:00.000Z","dateMiliSeconds":1145750400000,"authorName":"masutaka"},{"title":"Apache あれこれ","content":"再起動には「restart」と「graceful」の2種類があります。いずれも基本的に\nプロセスの停止・再開を行います。主にhttpd.conf の設定を変更したいときに\n用います。\n% /usr/local/apache2/bin/apachectl configtest\nと打てば、httpd.conf にミスがないかチェックしてくれる。","contentSnippet":"再起動には「restart」と「graceful」の2種類があります。いずれも基本的にプロセスの停止・再開を行います。主にhttpd.conf の設定を変更したいときに用います。% /usr/local/apache2/bin/apachectl configtestと打てば、httpd.conf にミスがないかチェックしてくれる。","link":"https://masutaka.net/2006-04-19-1/","isoDate":"2006-04-19T00:00:00.000Z","dateMiliSeconds":1145404800000,"authorName":"masutaka"},{"title":"特定のプロセスで開いているファイルを確認する","content":"% lsof -p &lt;プロセスの pid&gt;\n関連項目 =&gt; [2006-01-07-3] ","contentSnippet":"% lsof -p <プロセスの pid>関連項目 => [2006-01-07-3]","link":"https://masutaka.net/2006-03-16-1/","isoDate":"2006-03-16T00:00:00.000Z","dateMiliSeconds":1142467200000,"authorName":"masutaka"},{"title":"英文の自動整形(C-u M-q)","content":"M-q でカーソル下のパラグラフの整形が出来るが、英文の場合は右端が揃わな\nいため不格好になる。そんな時は C-u M-q すると右端を揃えた整形を行なって\nくれる。\n■整形前 (3.1) If you want the Japanese info, type &#39;make install-jinfo&#39;. If you have the &#34;install-info&#34; command, the following line will be automatically added to the &#34;dir&#34; file. Otherwise, add it by yourself. ■整形後 (3.1) If you want the Japanese info, type &#39;make install-jinfo&#39;. If you have the &#34;install-info&#34; command, the following line will be automatically added to the &#34;dir&#34; file. Otherwise, add it by yourself.","contentSnippet":"M-q でカーソル下のパラグラフの整形が出来るが、英文の場合は右端が揃わないため不格好になる。そんな時は C-u M-q すると右端を揃えた整形を行なってくれる。■整形前 (3.1) If you want the Japanese info, type 'make install-jinfo'. If you have the \"install-info\" command, the following line will be automatically added to the \"dir\" file. Otherwise, add it by yourself. ■整形後 (3.1) If you want the Japanese info, type 'make install-jinfo'. If you have the \"install-info\" command, the following line will be automatically added to the \"dir\" file. Otherwise, add it by yourself.","link":"https://masutaka.net/2006-03-04-1/","isoDate":"2006-03-04T00:00:00.000Z","dateMiliSeconds":1141430400000,"authorName":"masutaka"},{"title":"新城の歯医者","content":"丹沢歯科、太田歯科、山崎歯科が評判いいみたい。","contentSnippet":"丹沢歯科、太田歯科、山崎歯科が評判いいみたい。","link":"https://masutaka.net/2006-02-28-1/","isoDate":"2006-02-28T00:00:00.000Z","dateMiliSeconds":1141084800000,"authorName":"masutaka"},{"title":"tcsh -- cd hogehoge でのエラー日本語メッセージが化けないようにする","content":"~/.cshrcにおいて\nset dspmbyte=云々\nman tcsh より","contentSnippet":"~/.cshrcにおいてset dspmbyte=云々man tcsh より","link":"https://masutaka.net/2006-01-19-2/","isoDate":"2006-01-19T01:00:00.000Z","dateMiliSeconds":1137632400000,"authorName":"masutaka"},{"title":"set symlinks = ignore","content":"tcsh でカレントディレクトリがシンボリックリンクを含むディレクトリになった時に、\n実際のディレクトリに展開しない。\n例えば /hogehoge/hugahuga は/net/WS名/hogehoge/hugahuga へのシンボリッ\nクリンクなんだけどそれを意識しないようにしたい。zsh はデフォルトでそう\nいう挙動。","contentSnippet":"tcsh でカレントディレクトリがシンボリックリンクを含むディレクトリになった時に、実際のディレクトリに展開しない。例えば /hogehoge/hugahuga は/net/WS名/hogehoge/hugahuga へのシンボリックリンクなんだけどそれを意識しないようにしたい。zsh はデフォルトでそういう挙動。","link":"https://masutaka.net/2006-01-19-1/","isoDate":"2006-01-19T00:00:00.000Z","dateMiliSeconds":1137628800000,"authorName":"masutaka"},{"title":"umount できない時","content":"umountコマンドを実行したとき、誰かのカレントディレクトリがそのデバイス\n上にあったり、ファイルをアクセスしている場合、次のようなメッセージが表\n示され、アンマウントできない。\n|umount: /mnt/nas1/share: device is busy\n&lsquo;-f&rsquo; オプションで強制的に umount できる時もあるが、できない時ややりたく\nない時は、fuserコマンドで誰が使っているのかを確認してから、適切に対処す\nれば良い。ただし、Solaris9 では -vm オプションは使えない。\n|root# fuser -vm /mnt/nas1/share\n| USER PID ACCESS COMMAND\n|/mnt/nas1/share root 1344 f&hellip;. famd","contentSnippet":"umountコマンドを実行したとき、誰かのカレントディレクトリがそのデバイス上にあったり、ファイルをアクセスしている場合、次のようなメッセージが表示され、アンマウントできない。|umount: /mnt/nas1/share: device is busy‘-f’ オプションで強制的に umount できる時もあるが、できない時ややりたくない時は、fuserコマンドで誰が使っているのかを確認してから、適切に対処すれば良い。ただし、Solaris9 では -vm オプションは使えない。|root# fuser -vm /mnt/nas1/share| USER PID ACCESS COMMAND|/mnt/nas1/share root 1344 f…. famd","link":"https://masutaka.net/2006-01-07-3/","isoDate":"2006-01-07T02:00:00.000Z","dateMiliSeconds":1136599200000,"authorName":"masutaka"},{"title":"ネームサービス","content":"/etc/nsswitch.conf に、使用するネームサービスを記述します。ネームサービ\nスとしては、files,dns,nis,nisplus,ldapが利用できます。各ネームサービス\nに対応したnsswitch.confの構成ファイル例が、\n/etc/nsswitch.xxxx (xxxx=files,dns,nis,nisplus,ldap）にあります。\n利用したいネームサービスに対応した構成ファイル例を/etc/nsswitch.confに\nコピーして利用すれば良いでしょう。例えば、ホスト名の解決を、\n/etc/inet/hosts,dnsの順に検索したい場合は、/etc/nsswitch.dnsを\n/etc/nsswitch.confにコピーして利用します。\nまた、dnsを使用する場合は、/etc/resolv.confの設定も必要です。\n|/etc/resolv.conf\n|domain mydomain.com &lt;&ndash; ドメイン名です。\n|nameserver 0.0.0.0 &lt;&ndash; ネームサーバーが自マシンの場合。\n|nameserver 111.22.3.5 &lt;&ndash; ネームサーバーが他マシンの場合、そのIPアドレス。\nURL: http://sunsabc.its-abc.net/modules/xfsection/article.php?articleid=22 URL: http://www.ail.cs.gunma-u.ac.jp/~saito/dns.html URL: http://ktarn.www.linux.or.jp/JF/JFdocs/DNS-HOWTO.html ","contentSnippet":"/etc/nsswitch.conf に、使用するネームサービスを記述します。ネームサービスとしては、files,dns,nis,nisplus,ldapが利用できます。各ネームサービスに対応したnsswitch.confの構成ファイル例が、/etc/nsswitch.xxxx (xxxx=files,dns,nis,nisplus,ldap）にあります。利用したいネームサービスに対応した構成ファイル例を/etc/nsswitch.confにコピーして利用すれば良いでしょう。例えば、ホスト名の解決を、/etc/inet/hosts,dnsの順に検索したい場合は、/etc/nsswitch.dnsを/etc/nsswitch.confにコピーして利用します。また、dnsを使用する場合は、/etc/resolv.confの設定も必要です。|/etc/resolv.conf|domain mydomain.com <– ドメイン名です。|nameserver 0.0.0.0 <– ネームサーバーが自マシンの場合。|nameserver 111.22.3.5 <– ネームサーバーが他マシンの場合、そのIPアドレス。URL: http://sunsabc.its-abc.net/modules/xfsection/article.php?articleid=22 URL: http://www.ail.cs.gunma-u.ac.jp/~saito/dns.html URL: http://ktarn.www.linux.or.jp/JF/JFdocs/DNS-HOWTO.html","link":"https://masutaka.net/2006-01-07-2/","isoDate":"2006-01-07T01:00:00.000Z","dateMiliSeconds":1136595600000,"authorName":"masutaka"},{"title":"NTPサーバーの設定","content":"公開NTPサーバーからクライアントとして時刻を同期し、LAN内ではNTPサーバー\nとして動作します。\n/etc/inet/ntp.confの作成\n|server 133.100.9.2 #clock.nc.fukuoka-u.ac.jp\n|enable auth monitor\n|driftfile /var/ntp/ntp.drift\n|statsdir /var/ntp/ntpstats/\n|filegen peerstats file peerstats type day enable\n|filegen loopstats file loopstats type day enable\n|filegen clockstats file clockstats type day enable\nserverに外部のNTPサーバーのIPアドレスを指定します。パブリックなNTPサー\nバーは 133.100.9.2 clock.nc.fukuoka-u.ac.jp が有名ですが、できればもっ\nと近いところを探したほうがいいでしょう。\n日本標準時グループ のインターネット上での日本標準時提供実験開始サービスは\n2002年3月末までの試行でしたが当面提供するそうです。http://www.jst.mfeed.ad.jp/\n/etc/inet/ntp.confを作ったらxntpdを起動\n|# /etc/rc2.d/S74xntpd start\n稼働確認\n|# /usr/sbin/ntpq -p\nURL: http://www.b-dash.net/solaris/tips.html#ntp ","contentSnippet":"公開NTPサーバーからクライアントとして時刻を同期し、LAN内ではNTPサーバーとして動作します。/etc/inet/ntp.confの作成|server 133.100.9.2 #clock.nc.fukuoka-u.ac.jp|enable auth monitor|driftfile /var/ntp/ntp.drift|statsdir /var/ntp/ntpstats/|filegen peerstats file peerstats type day enable|filegen loopstats file loopstats type day enable|filegen clockstats file clockstats type day enableserverに外部のNTPサーバーのIPアドレスを指定します。パブリックなNTPサーバーは 133.100.9.2 clock.nc.fukuoka-u.ac.jp が有名ですが、できればもっと近いところを探したほうがいいでしょう。日本標準時グループ のインターネット上での日本標準時提供実験開始サービスは2002年3月末までの試行でしたが当面提供するそうです。http://www.jst.mfeed.ad.jp//etc/inet/ntp.confを作ったらxntpdを起動|# /etc/rc2.d/S74xntpd start稼働確認|# /usr/sbin/ntpq -pURL: http://www.b-dash.net/solaris/tips.html#ntp","link":"https://masutaka.net/2006-01-07-1/","isoDate":"2006-01-07T00:00:00.000Z","dateMiliSeconds":1136592000000,"authorName":"masutaka"},{"title":"指定したサイズのファイルを作る","content":"windowsXP\n|&gt; fsutil file createnew\n|使用法 : fsutil file createnew &lt;ファイル名&gt; &lt;長さ&gt;\n|使用例 : fsutil file createnew C:\\testfile.txt 1000\nSolaris で同じことをやるには [2003-06-20-1] を参照のこと。\nURL: http://kitaj.no-ip.com/tdiary/20060104.html#p01 ","contentSnippet":"windowsXP|> fsutil file createnew|使用法 : fsutil file createnew <ファイル名> <長さ>|使用例 : fsutil file createnew C:\\testfile.txt 1000Solaris で同じことをやるには [2003-06-20-1] を参照のこと。URL: http://kitaj.no-ip.com/tdiary/20060104.html#p01","link":"https://masutaka.net/2006-01-06-3/","isoDate":"2006-01-06T02:00:00.000Z","dateMiliSeconds":1136512800000,"authorName":"masutaka"},{"title":"perl の実用的な使い方","content":"% cat CVS/Root :ext:anoncvs@savannah.gnu.org:/cvsroot/emacs % find . -path &#39;.*/CVS/Root&#39; -print0 | xargs -0 \\ &gt; perl -i -p -e &#39;s/:ext:anoncvs\\@(cvs\\.)?s/:pserver:anonymous\\@cvs.s/&#39; % cat CVS/Root :pserver:anonymous@cvs.savannah.gnu.org:/cvsroot/emacs ","contentSnippet":"% cat CVS/Root :ext:anoncvs@savannah.gnu.org:/cvsroot/emacs % find . -path '.*/CVS/Root' -print0 | xargs -0 \\ > perl -i -p -e 's/:ext:anoncvs\\@(cvs\\.)?s/:pserver:anonymous\\@cvs.s/' % cat CVS/Root :pserver:anonymous@cvs.savannah.gnu.org:/cvsroot/emacs","link":"https://masutaka.net/2006-01-06-2/","isoDate":"2006-01-06T01:00:00.000Z","dateMiliSeconds":1136509200000,"authorName":"masutaka"},{"title":"ファイルを直接置換","content":"% cat hoge.txt aaa aaa bbb aaa % perl -i -p -e &#39;s/aaa/ccc/g&#39; hoge.txt % cat hoge.txt ccc ccc bbb ccc ","contentSnippet":"% cat hoge.txt aaa aaa bbb aaa % perl -i -p -e 's/aaa/ccc/g' hoge.txt % cat hoge.txt ccc ccc bbb ccc","link":"https://masutaka.net/2006-01-06-1/","isoDate":"2006-01-06T00:00:00.000Z","dateMiliSeconds":1136505600000,"authorName":"masutaka"},{"title":"sudo を使えるユーザを登録する上の注意","content":"/etc/sudoers を直接編集してはいけない。visudo でユーザを追加する。\nmasutaka ALL=(ALL) ALL","contentSnippet":"/etc/sudoers を直接編集してはいけない。visudo でユーザを追加する。masutaka ALL=(ALL) ALL","link":"https://masutaka.net/2005-12-11-1/","isoDate":"2005-12-11T00:00:00.000Z","dateMiliSeconds":1134259200000,"authorName":"masutaka"},{"title":"svn の commit ログ","content":"svn log -v すると、今までの削除や更新の履歴が出力される。","contentSnippet":"svn log -v すると、今までの削除や更新の履歴が出力される。","link":"https://masutaka.net/2005-12-04-1/","isoDate":"2005-12-04T00:00:00.000Z","dateMiliSeconds":1133654400000,"authorName":"masutaka"},{"title":"不良ディスクのチェック","content":"badblocks -v /dev/hda1 ","contentSnippet":"badblocks -v /dev/hda1","link":"https://masutaka.net/2005-12-03-1/","isoDate":"2005-12-03T00:00:00.000Z","dateMiliSeconds":1133568000000,"authorName":"masutaka"},{"title":"ps の f オプション","content":"どのプロセスからどのプロセスが呼ばれたのか分かる。\n% ps axf\nSolaris9 ではできなかった。","contentSnippet":"どのプロセスからどのプロセスが呼ばれたのか分かる。% ps axfSolaris9 ではできなかった。","link":"https://masutaka.net/2005-11-23-1/","isoDate":"2005-11-23T00:00:00.000Z","dateMiliSeconds":1132704000000,"authorName":"masutaka"},{"title":"パスワードのセキュリティチェック","content":"crack とか john というツールを使うと、使用しているパスワードが安全\nかどうかを確かめられるとのこと。加えて、ユーザパスワードを変更する\nたびにその強度を crack のライブラリを使って検証する PAM のモジュー\nルもあるそうな。\nURL: http://www.atmarkit.co.jp/flinux/rensai/linuxtips/244johnripper.html URL: http://www.linux.or.jp/JF/JFdocs/User-Authentication-HOWTO/secure.html |# unshadow /etc/passwd /etc/shadow &gt; passwdfile\n|# john passwdfile\n|or\n|# john -wordfile:password.lst passwdfile","contentSnippet":"crack とか john というツールを使うと、使用しているパスワードが安全かどうかを確かめられるとのこと。加えて、ユーザパスワードを変更するたびにその強度を crack のライブラリを使って検証する PAM のモジュールもあるそうな。URL: http://www.atmarkit.co.jp/flinux/rensai/linuxtips/244johnripper.html URL: http://www.linux.or.jp/JF/JFdocs/User-Authentication-HOWTO/secure.html |# unshadow /etc/passwd /etc/shadow > passwdfile|# john passwdfile|or|# john -wordfile:password.lst passwdfile","link":"https://masutaka.net/2005-11-18-1/","isoDate":"2005-11-18T00:00:00.000Z","dateMiliSeconds":1132272000000,"authorName":"masutaka"},{"title":"CVSROOT の作成方法","content":"|% pwd\n|/home/masutaka\n管理領域を作成\n|% cvs -d /home/masutaka/CVSROOT init\nbin プロジェクトの登録\n|% mkdir empty\n|% cd empty\n|% cvs -d /home/masutaka/CVSROOT import -m &ldquo;Created bin directory&rdquo; bin gen start\nbin プロジェクトのチェックアウト\n|% cd\n|% cvs -d /home/masutaka/CVSROOT co bin\n|% rmdir empty\nこれ以降は add =&gt; commit で良いはず。\nURL: http://www.tanu.org/~sakane/doc/public/howto-cvs.html URL: http://www1.accsnet.ne.jp/~gen/cvs/cvs-memo.html ","contentSnippet":"|% pwd|/home/masutaka管理領域を作成|% cvs -d /home/masutaka/CVSROOT initbin プロジェクトの登録|% mkdir empty|% cd empty|% cvs -d /home/masutaka/CVSROOT import -m “Created bin directory” bin gen startbin プロジェクトのチェックアウト|% cd|% cvs -d /home/masutaka/CVSROOT co bin|% rmdir emptyこれ以降は add => commit で良いはず。URL: http://www.tanu.org/~sakane/doc/public/howto-cvs.html URL: http://www1.accsnet.ne.jp/~gen/cvs/cvs-memo.html","link":"https://masutaka.net/2005-11-17-1/","isoDate":"2005-11-17T00:00:00.000Z","dateMiliSeconds":1132185600000,"authorName":"masutaka"},{"title":"テフロン加工のフライパンについたコゲの取り除き方","content":"テフロン加工のフライパンについたしつこい汚れは、フライパンに重曹お\nおさじ２杯、酢カップ２分の１杯、水カップ１杯をいれて沸騰させれば落\nとすことができます。その後、サラダ油を塗って、なじませておくとよい\nでしょう。また、キッチンワイドハイターのような漂白剤でもとれます。\nURL: http://www.pref.ehime.jp/ecc/q&a/house/ahouse27.htm ","contentSnippet":"テフロン加工のフライパンについたしつこい汚れは、フライパンに重曹おおさじ２杯、酢カップ２分の１杯、水カップ１杯をいれて沸騰させれば落とすことができます。その後、サラダ油を塗って、なじませておくとよいでしょう。また、キッチンワイドハイターのような漂白剤でもとれます。URL: http://www.pref.ehime.jp/ecc/q&a/house/ahouse27.htm","link":"https://masutaka.net/2005-11-13-1/","isoDate":"2005-11-13T00:00:00.000Z","dateMiliSeconds":1131840000000,"authorName":"masutaka"},{"title":"list-text-properties-at の削除理由","content":"Emacs22 から list-text-properties-at() は以下の理由で削除された。\n|*** The command `list-text-properties-at&rsquo; has been deleted because\n|C-u C-x = gives the same information and more.\n|\n|etc/NEWS より","contentSnippet":"Emacs22 から list-text-properties-at() は以下の理由で削除された。|*** The command `list-text-properties-at’ has been deleted because|C-u C-x = gives the same information and more.||etc/NEWS より","link":"https://masutaka.net/2005-11-09-1/","isoDate":"2005-11-09T00:00:00.000Z","dateMiliSeconds":1131494400000,"authorName":"masutaka"},{"title":"svnserve 経由でコミットできないときは？","content":"svnserveで動かす場合、特に何も設定しないとリポジトリが読み取り専用に\nなる。よって、変更をコミットしようとした場合\n|svn: Commit failed (details follow):\n|svn: Connection is read-only\nというエラーになる。/home/masutaka/SVNROOT/conf/svnserve.conf に以下を\n追加して解決した。(外部に公開しているわけではないので、セキュリティは甘々)\n|[general]\n|anon-access = write","contentSnippet":"svnserveで動かす場合、特に何も設定しないとリポジトリが読み取り専用になる。よって、変更をコミットしようとした場合|svn: Commit failed (details follow):|svn: Connection is read-onlyというエラーになる。/home/masutaka/SVNROOT/conf/svnserve.conf に以下を追加して解決した。(外部に公開しているわけではないので、セキュリティは甘々)|[general]|anon-access = write","link":"https://masutaka.net/2005-11-07-2/","isoDate":"2005-11-07T01:00:00.000Z","dateMiliSeconds":1131325200000,"authorName":"masutaka"},{"title":"gconf-editor でショートカットを変更する","content":"mozilla とかを Emacs キーバインドにする。 /desktop/gnome/interface/gtk_key_theme =&gt; Emacs","contentSnippet":"mozilla とかを Emacs キーバインドにする。 /desktop/gnome/interface/gtk_key_theme => Emacs","link":"https://masutaka.net/2005-11-07-1/","isoDate":"2005-11-07T00:00:00.000Z","dateMiliSeconds":1131321600000,"authorName":"masutaka"},{"title":"Debian にサーバを立てて、Cygwin からアクセスできるようにした。","content":"/etc/inetd.conf に以下を記述して、inetd 経由で使えるようにする。\nこの例だと、リモートから /home/masutaka/SVNROOT にアクセスできるようになる。\n|svn\tstream\ttcp\tnowait\tmasutaka /usr/sbin/tcpd /usr/bin/svnserve -i -r /home/masutaka/SVNROOT\n  [2003-07-21-1] を参考にして、lokkit から svn:tcp のアクセスを許可する。\n/etc/services でポート番号 3690 が svn に割り当てられているはず。\n  inetd を再起動する。\n|# /etc/init.d/inetd restart\n  Cygwin からは以下のコマンドで checkout できる。\n  |# 全部\n|% svn co svn://dyna/SVNROOT/trunk .\n|# 第一階層だけ\n|% svn co -N svn://dyna/SVNROOT/trunk .\n|# misc だけ\n|% svn co svn://dyna/SVNROOT/trunk/misc .","contentSnippet":"/etc/inetd.conf に以下を記述して、inetd 経由で使えるようにする。この例だと、リモートから /home/masutaka/SVNROOT にアクセスできるようになる。|svn\tstream\ttcp\tnowait\tmasutaka /usr/sbin/tcpd /usr/bin/svnserve -i -r /home/masutaka/SVNROOT  [2003-07-21-1] を参考にして、lokkit から svn:tcp のアクセスを許可する。/etc/services でポート番号 3690 が svn に割り当てられているはず。  inetd を再起動する。|# /etc/init.d/inetd restart  Cygwin からは以下のコマンドで checkout できる。  |# 全部|% svn co svn://dyna/SVNROOT/trunk .|# 第一階層だけ|% svn co -N svn://dyna/SVNROOT/trunk .|# misc だけ|% svn co svn://dyna/SVNROOT/trunk/misc .","link":"https://masutaka.net/2005-11-05-4/","isoDate":"2005-11-05T03:00:00.000Z","dateMiliSeconds":1131159600000,"authorName":"masutaka"},{"title":"ダウンロードに失敗してしまう。","content":"何回ダウンロードを試みても _update-info-dir-00325-1.tar.bz2 のダウ\nンロードに失敗してしまう。原因はインストール元のホストに上記ファイ\nルがなかったため。\nftp://ftp.yz.yamagata-u.ac.jp/pub/cygwin/release/ には存在していた\nため、こちらからインストールするように変更した。","contentSnippet":"何回ダウンロードを試みても _update-info-dir-00325-1.tar.bz2 のダウンロードに失敗してしまう。原因はインストール元のホストに上記ファイルがなかったため。ftp://ftp.yz.yamagata-u.ac.jp/pub/cygwin/release/ には存在していたため、こちらからインストールするように変更した。","link":"https://masutaka.net/2005-11-05-3/","isoDate":"2005-11-05T02:00:00.000Z","dateMiliSeconds":1131156000000,"authorName":"masutaka"},{"title":"commit に失敗したら？","content":"svn commit すると、以下のメッセージが出て commit に失敗する。\n|svn: コミットに失敗しました (詳しい理由は以下のとおりです):\n|svn: URL に対し ra_local セッションを開始できません\n|svn: リポジトリ &lsquo;file:///home/masutaka/SVNROOT/trunk&rsquo; を開けませんでした\n|svn: Berkeley DB error while opening environment for filesystem /home/masutaka/SVNROOT/db:\n|?\\204?\\181?\\184?\\250?\\164?\\202?\\176?\\250?\\191?\\244?\\164?\\199?\\164?\\185\n|svn: bdb: Program version 4.2 doesn&rsquo;t match environment version\nDB のバージョンが違うみたい。以下のコマンドで復旧することができた。\n|% svnadmin recover ~/SVNROOT\nURL: http://blog.twintail.tv/2005/06/24/42/ ","contentSnippet":"svn commit すると、以下のメッセージが出て commit に失敗する。|svn: コミットに失敗しました (詳しい理由は以下のとおりです):|svn: URL に対し ra_local セッションを開始できません|svn: リポジトリ ‘file:///home/masutaka/SVNROOT/trunk’ を開けませんでした|svn: Berkeley DB error while opening environment for filesystem /home/masutaka/SVNROOT/db:|?\\204?\\181?\\184?\\250?\\164?\\202?\\176?\\250?\\191?\\244?\\164?\\199?\\164?\\185|svn: bdb: Program version 4.2 doesn’t match environment versionDB のバージョンが違うみたい。以下のコマンドで復旧することができた。|% svnadmin recover ~/SVNROOTURL: http://blog.twintail.tv/2005/06/24/42/","link":"https://masutaka.net/2005-11-05-2/","isoDate":"2005-11-05T01:00:00.000Z","dateMiliSeconds":1131152400000,"authorName":"masutaka"},{"title":"フォントが汚かったのは？","content":"フォントが汚かったのは、Debian デフォルトのフォントに原因があった。\n[2005-10-31-1] の設定を OFF にして、『Debian GNU/Linux 徹底入門』附\n属のリョービフォントをインストールしたら、かなりきれいになった。","contentSnippet":"フォントが汚かったのは、Debian デフォルトのフォントに原因があった。[2005-10-31-1] の設定を OFF にして、『Debian GNU/Linux 徹底入門』附属のリョービフォントをインストールしたら、かなりきれいになった。","link":"https://masutaka.net/2005-11-05-1/","isoDate":"2005-11-05T00:00:00.000Z","dateMiliSeconds":1131148800000,"authorName":"masutaka"},{"title":"Debian パッケージ管理","content":"# 更新されたパッケージを全てインストール (&#34;-s&#34; で実際には実行せず、確認を行える) $ sudo aptitude update $ sudo aptitude safe-upgrade\t# 安全なアップグレード $ sudo aptitude full-upgrade\t# 状況によりパッケージの追加や削除を行う。 # インストール $ sudo aptitude install &lt;pkg-name&gt; # アンインストール $ sudo aptitude remove &lt;pkg-name&gt; # アンインストール(設定ファイルも含め完全) $ sudo aptitude purge &lt;pkg-name&gt; # 現在のパッケージキャッシュを検索 $ aptitude search &lt;strings&gt; # パッケージの情報を表示 $ aptitude show &lt;pkg-name&gt; # パッケージの依存関係を調べる $ apt-cache depends &lt;pkg-name&gt; # 指定されたインストール済みパッケージに含まれているファイルをすべて表示 $ dpkg -L|--listfiles &lt;pkg-name&gt; # インストールしてあるパッケージをすべて表示 $ dpkg -l|--list # そのファイルがどのパッケージに属するか調べる。 $ dpkg -S|--search &lt;file-name&gt; # パッケージに含まれているファイルを確認 $ dpkg -c|--contents &lt;pkg-file-name&gt; # パッケージに含まれているファイルを指定したディレクトリに展開 $ dpkg -x|--extract &lt;pkg-file-name&gt; &lt;dir-name&gt; # キャッシュされているパッケージの削除(/var/cache/apt/archives/* の削除) $ sudo aptitude clean # キャッシュされている古いバージョンの削除(/var/cache/apt/archives/* の掃除) $ sudo aptitude autoclean # パッケージがなぜインストールされている/削除されているのか、依存関係を表示。 $ sudo aptitude why/why-not &lt;pkg-name&gt; # 依存関係から孤立したパッケージを検索 $ deborphan --guess-all # インストールしたパッケージを再設定する(インストール時に実行されたアレを再実行する)。 $ sudo dpkg-reconfigure &lt;pkg-name&gt; 参考URL: D: AptGet - Debian GNU/Linux スレッドテンプレ ※ CUI が苦手な人は Synaptic パッケージマネージャがおすすめ。","contentSnippet":"# 更新されたパッケージを全てインストール (\"-s\" で実際には実行せず、確認を行える) $ sudo aptitude update $ sudo aptitude safe-upgrade\t# 安全なアップグレード $ sudo aptitude full-upgrade\t# 状況によりパッケージの追加や削除を行う。 # インストール $ sudo aptitude install <pkg-name> # アンインストール $ sudo aptitude remove <pkg-name> # アンインストール(設定ファイルも含め完全) $ sudo aptitude purge <pkg-name> # 現在のパッケージキャッシュを検索 $ aptitude search <strings> # パッケージの情報を表示 $ aptitude show <pkg-name> # パッケージの依存関係を調べる $ apt-cache depends <pkg-name> # 指定されたインストール済みパッケージに含まれているファイルをすべて表示 $ dpkg -L|--listfiles <pkg-name> # インストールしてあるパッケージをすべて表示 $ dpkg -l|--list # そのファイルがどのパッケージに属するか調べる。 $ dpkg -S|--search <file-name> # パッケージに含まれているファイルを確認 $ dpkg -c|--contents <pkg-file-name> # パッケージに含まれているファイルを指定したディレクトリに展開 $ dpkg -x|--extract <pkg-file-name> <dir-name> # キャッシュされているパッケージの削除(/var/cache/apt/archives/* の削除) $ sudo aptitude clean # キャッシュされている古いバージョンの削除(/var/cache/apt/archives/* の掃除) $ sudo aptitude autoclean # パッケージがなぜインストールされている/削除されているのか、依存関係を表示。 $ sudo aptitude why/why-not <pkg-name> # 依存関係から孤立したパッケージを検索 $ deborphan --guess-all # インストールしたパッケージを再設定する(インストール時に実行されたアレを再実行する)。 $ sudo dpkg-reconfigure <pkg-name> 参考URL: D: AptGet - Debian GNU/Linux スレッドテンプレ ※ CUI が苦手な人は Synaptic パッケージマネージャがおすすめ。","link":"https://masutaka.net/2005-11-02-2/","isoDate":"2005-11-02T01:00:00.000Z","dateMiliSeconds":1130893200000,"authorName":"masutaka"},{"title":"fetchmail で取り込んだメールを Exim4 が配送するまでに時間がかかる。","content":"~/.fetchmailrcに &lsquo;batchlimit 10&rsquo; を追加して解決。\nURL: http://lists.debian.or.jp/debian-users/200404/msg00101.html ","contentSnippet":"~/.fetchmailrcに ‘batchlimit 10’ を追加して解決。URL: http://lists.debian.or.jp/debian-users/200404/msg00101.html","link":"https://masutaka.net/2005-11-02-1/","isoDate":"2005-11-02T00:00:00.000Z","dateMiliSeconds":1130889600000,"authorName":"masutaka"},{"title":"mozilla とかで使われるフォントの一般名","content":" serif\n明朝体のような「ひげ付きフォント」を意味します。 sans-serif\nゴシック体のような「ひげ無しフォント」を意味します。 cursive\n手書きのようなフォントを意味します。草書体系フォント。 fantasy\nComputer装飾に使えるようなフォントを意味します。 monospace\n等幅のフォントを意味します。\nURL: http://www.mozilla.gr.jp/standards/webtips0007.html URL: http://css.eweb-design.com/0406_ft.html   ","contentSnippet":"serif明朝体のような「ひげ付きフォント」を意味します。 sans-serifゴシック体のような「ひげ無しフォント」を意味します。 cursive手書きのようなフォントを意味します。草書体系フォント。 fantasyComputer装飾に使えるようなフォントを意味します。 monospace等幅のフォントを意味します。URL: http://www.mozilla.gr.jp/standards/webtips0007.html URL: http://css.eweb-design.com/0406_ft.html","link":"https://masutaka.net/2005-10-31-2/","isoDate":"2005-10-31T01:00:00.000Z","dateMiliSeconds":1130720400000,"authorName":"masutaka"},{"title":"Mozilla のフォント","content":"&ndash;enable-freetype2 付きでコンパイルした mozilla は Freetype2 が使え、\nAntiAlias なフォントがとっても素敵になるらしい。でも、1024x768 程度\nの解像度のマシンではとても汚い。そのため以下の設定を [2005-02-02-1] の方法で行ない、おとなしく pcf 版フォントを使うことにした。\n|user_pref(&ldquo;fonts.xft.enabled&rdquo;, false);\nURL: http://www.edit.ne.jp/~hoshina/wiki/?%5B%5BMozilla%5D%5D#content_1_10 ","contentSnippet":"–enable-freetype2 付きでコンパイルした mozilla は Freetype2 が使え、AntiAlias なフォントがとっても素敵になるらしい。でも、1024x768 程度の解像度のマシンではとても汚い。そのため以下の設定を [2005-02-02-1] の方法で行ない、おとなしく pcf 版フォントを使うことにした。|user_pref(“fonts.xft.enabled”, false);URL: http://www.edit.ne.jp/~hoshina/wiki/?%5B%5BMozilla%5D%5D#content_1_10","link":"https://masutaka.net/2005-10-31-1/","isoDate":"2005-10-31T00:00:00.000Z","dateMiliSeconds":1130716800000,"authorName":"masutaka"},{"title":"コンパイルオプションの確認方法","content":"mozilla を起動して、URL を書くところに about:buildconfig と打って Enter する。","contentSnippet":"mozilla を起動して、URL を書くところに about:buildconfig と打って Enter する。","link":"https://masutaka.net/2005-09-20-1/","isoDate":"2005-09-20T00:00:00.000Z","dateMiliSeconds":1127174400000,"authorName":"masutaka"},{"title":"bsfilter の使用感","content":"elisp だけで実装したスパムフィルタ mew-spam-stat.el でスパム除去し\nていたが、スパム判定洩れが多くなってきたので、評判が良い bsfilter\nを使ってみることにする。\n【環境】\nOS: RedHat Linux 7.2\nメール受信: fetchmail + procmail\nフィルタ: bsfilter\nfetchmail で外部の POP サーバーからメールを収集し、procmail でロー\nカルマシンに配送。その際、bsfilter を使って SPAM メールを指定ディレ\nクトリに移動してしまおう、というのがねらい。\nまず、fetchmail、procmail、bsfilter をインストールする。\nbsfilter は、http://bsfilter.org/ から入手できる。\n[bsfilter のインストール]\n上記 bsfilter のサイトから入手した bsfilter-X.Y.Z.tgz 内の\nbsfilter/bsfilter を、/usr/local/bin などにコピーするだけ。\n[bsfilter の育て方]\n最初、bsfilter は、どれが SPAM で、どれがクリーンなファイルなのか分\nからないので、教えてあげないといけない。具体的には以下のようにする。\n% find $HOME/Mail/inbox -type f ! -name &#34;.mew-*&#34; | xargs bsfilter --add-clean % find $HOME/Mail/spam -type f ! -name &#34;.mew-*&#34; | xargs bsfilter --add-spam % bsfilter --update もちろんこれに先だって、$HOME/Mail/inbox の中の SPAM メールを","contentSnippet":"elisp だけで実装したスパムフィルタ mew-spam-stat.el でスパム除去していたが、スパム判定洩れが多くなってきたので、評判が良い bsfilterを使ってみることにする。【環境】OS: RedHat Linux 7.2メール受信: fetchmail + procmailフィルタ: bsfilterfetchmail で外部の POP サーバーからメールを収集し、procmail でローカルマシンに配送。その際、bsfilter を使って SPAM メールを指定ディレクトリに移動してしまおう、というのがねらい。まず、fetchmail、procmail、bsfilter をインストールする。bsfilter は、http://bsfilter.org/ から入手できる。[bsfilter のインストール]上記 bsfilter のサイトから入手した bsfilter-X.Y.Z.tgz 内のbsfilter/bsfilter を、/usr/local/bin などにコピーするだけ。[bsfilter の育て方]最初、bsfilter は、どれが SPAM で、どれがクリーンなファイルなのか分からないので、教えてあげないといけない。具体的には以下のようにする。% find $HOME/Mail/inbox -type f ! -name \".mew-*\" | xargs bsfilter --add-clean % find $HOME/Mail/spam -type f ! -name \".mew-*\" | xargs bsfilter --add-spam % bsfilter --update もちろんこれに先だって、$HOME/Mail/inbox の中の SPAM メールを","link":"https://masutaka.net/2005-08-29-1/","isoDate":"2005-08-29T00:00:00.000Z","dateMiliSeconds":1125273600000,"authorName":"masutaka"},{"title":"表計算","content":"*.ses という拡張子のファイルを作って開くと、簡単な表計算が出来る。\nただし、日本語は表示できないみたい。なぜだ？","contentSnippet":"*.ses という拡張子のファイルを作って開くと、簡単な表計算が出来る。ただし、日本語は表示できないみたい。なぜだ？","link":"https://masutaka.net/2005-08-06-1/","isoDate":"2005-08-06T00:00:00.000Z","dateMiliSeconds":1123286400000,"authorName":"masutaka"},{"title":"vfstab","content":"vfstabは、virtual file system table の略","contentSnippet":"vfstabは、virtual file system table の略","link":"https://masutaka.net/2005-03-30-1/","isoDate":"2005-03-30T00:00:00.000Z","dateMiliSeconds":1112140800000,"authorName":"masutaka"},{"title":"clmemo での注意","content":"バイトコンパイルすると、日本語変換中の C-i でのカタカナ変換が\nただの TAB 挿入になってしまう。","contentSnippet":"バイトコンパイルすると、日本語変換中の C-i でのカタカナ変換がただの TAB 挿入になってしまう。","link":"https://masutaka.net/2005-03-09-1/","isoDate":"2005-03-09T00:00:00.000Z","dateMiliSeconds":1110326400000,"authorName":"masutaka"},{"title":"スーパーデーモン(xinitd)の起動、停止、再起動","content":"/etc/init.d/xinetd start\n/etc/init.d/xinetd stop\n/etc/init.d/xinetd restart","contentSnippet":"/etc/init.d/xinetd start/etc/init.d/xinetd stop/etc/init.d/xinetd restart","link":"https://masutaka.net/2005-03-06-2/","isoDate":"2005-03-06T01:00:00.000Z","dateMiliSeconds":1110070800000,"authorName":"masutaka"},{"title":"ProFTPD-1.2.10 から FFFTP でファイル一覧が取得出来ない。","content":"ProFTPD1.2.9までは、オプション付きの「NLST」コマンドをサポートして\nいたが、1.2.10からは規格(RFC959)に準拠するためNLSTのオプション指定\nをサポートしなくなった。\nFFFTPは標準設定では、「NLST -alL」を指定している。そのためファイル\n一覧が見れなくなる。\nFFFTPの設定を変更すれば、FFFTPでファイル一覧を見れるようになる。\nhttp://www.hayasoft.com/JP/software/linux/proftpd_nlst_patch.html ","contentSnippet":"ProFTPD1.2.9までは、オプション付きの「NLST」コマンドをサポートしていたが、1.2.10からは規格(RFC959)に準拠するためNLSTのオプション指定をサポートしなくなった。FFFTPは標準設定では、「NLST -alL」を指定している。そのためファイル一覧が見れなくなる。FFFTPの設定を変更すれば、FFFTPでファイル一覧を見れるようになる。http://www.hayasoft.com/JP/software/linux/proftpd_nlst_patch.html","link":"https://masutaka.net/2005-03-06-1/","isoDate":"2005-03-06T00:00:00.000Z","dateMiliSeconds":1110067200000,"authorName":"masutaka"},{"title":"root での login 制御","content":"/etc/default/login の CONSOLE=/dev/console の行をコメントアウトす\nると、rootでのloginが出来るようになる。\nセキュリティ的にはイマイチなので、注意すること。","contentSnippet":"/etc/default/login の CONSOLE=/dev/console の行をコメントアウトすると、rootでのloginが出来るようになる。セキュリティ的にはイマイチなので、注意すること。","link":"https://masutaka.net/2005-03-02-1/","isoDate":"2005-03-02T00:00:00.000Z","dateMiliSeconds":1109721600000,"authorName":"masutaka"},{"title":"RPATH の確認方法","content":"各 binary には RPATH (Runtime PATH) が埋めこまれており，実行時に必\n要となる shared library を RPATH から検索します。\nその binary に埋めこまれている RPATH は dump で，またその binary\nが dynamic link している shared library は ldd で確認することがで\nきます。\n% dump -Lv which emacs\n% ldd which emacs\nURL: http://solaris.roguelife.org/usr/ccs/bin/ld.xhtml ","contentSnippet":"各 binary には RPATH (Runtime PATH) が埋めこまれており，実行時に必要となる shared library を RPATH から検索します。その binary に埋めこまれている RPATH は dump で，またその binaryが dynamic link している shared library は ldd で確認することができます。% dump -Lv which emacs% ldd which emacsURL: http://solaris.roguelife.org/usr/ccs/bin/ld.xhtml","link":"https://masutaka.net/2005-03-01-1/","isoDate":"2005-03-01T00:00:00.000Z","dateMiliSeconds":1109635200000,"authorName":"masutaka"},{"title":"FYI","content":" 　読み方 : エフワイアイ\nフルスペル : For Your Information\n説明 : RFCのサブシリーズで、インターネットで使われる標準技術に関する情報を広く一般に広めることを目的とする文書群。本家のRFCとは違い、標準の策定を目的とはしていない。また、この意味から転じて、技術者間でやりとりするインフォーマルな文書において、「参考までに」というニュアンスを持つ単語として使われている。\n情報源 : IT用語辞典 e-Words http://e-words.jp/  ","contentSnippet":"読み方 : エフワイアイフルスペル : For Your Information説明 : RFCのサブシリーズで、インターネットで使われる標準技術に関する情報を広く一般に広めることを目的とする文書群。本家のRFCとは違い、標準の策定を目的とはしていない。また、この意味から転じて、技術者間でやりとりするインフォーマルな文書において、「参考までに」というニュアンスを持つ単語として使われている。情報源 : IT用語辞典 e-Words http://e-words.jp/","link":"https://masutaka.net/2005-02-12-1/","isoDate":"2005-02-12T00:00:00.000Z","dateMiliSeconds":1108166400000,"authorName":"masutaka"},{"title":"日本語パックをダウンロードする。","content":"Google で &ldquo;mozilla 日本語パック&rdquo; を検索し以下のサイトに辿り着いた。\nftp://ftp.mozilla-japan.org/pub/mozilla-japan/mozilla/releases/ ","contentSnippet":"Google で “mozilla 日本語パック” を検索し以下のサイトに辿り着いた。ftp://ftp.mozilla-japan.org/pub/mozilla-japan/mozilla/releases/","link":"https://masutaka.net/2005-02-02-2/","isoDate":"2005-02-02T01:00:00.000Z","dateMiliSeconds":1107306000000,"authorName":"masutaka"},{"title":"マニアックな設定","content":"| URL を書くところに about:config と打って Enter すると、マニアックな設定ができる。","contentSnippet":"| URL を書くところに about:config と打って Enter すると、マニアックな設定ができる。","link":"https://masutaka.net/2005-02-02-1/","isoDate":"2005-02-02T00:00:00.000Z","dateMiliSeconds":1107302400000,"authorName":"masutaka"},{"title":"Mew on Meadow で X-Face を表示する。","content":"uncompface =&gt; Cygwin から入手\nicontopbm =&gt; http://netpbm.sourceforge.net/ から入手\npbmtoxbm =&gt; 同上","contentSnippet":"uncompface => Cygwin から入手icontopbm => http://netpbm.sourceforge.net/ から入手pbmtoxbm => 同上","link":"https://masutaka.net/2005-02-01-1/","isoDate":"2005-02-01T00:00:00.000Z","dateMiliSeconds":1107216000000,"authorName":"masutaka"},{"title":"特定のパーミッション設定ファイルを検索する。","content":"パーミッションが 644 のファイルを検索 % find . -type f -perm 644\ngroup と other に write 属性が付いているディレクトリを検索 % find . -type d ( -perm -g+w -o -perm -o+w )","contentSnippet":"パーミッションが 644 のファイルを検索 % find . -type f -perm 644group と other に write 属性が付いているディレクトリを検索 % find . -type d ( -perm -g+w -o -perm -o+w )","link":"https://masutaka.net/2005-01-24-1/","isoDate":"2005-01-24T00:00:00.000Z","dateMiliSeconds":1106524800000,"authorName":"masutaka"},{"title":"rsh での * の扱い","content":"|% rsh remotehost ls -alF *\n|% rsh remotehost &ldquo;ls -alF &rdquo;\n前者はローカルホストで *' が展開され、後者はリモートホストで &rsquo; が展開されるとのこと(man rsh)。","contentSnippet":"|% rsh remotehost ls -alF *|% rsh remotehost “ls -alF ”前者はローカルホストで *' が展開され、後者はリモートホストで ’ が展開されるとのこと(man rsh)。","link":"https://masutaka.net/2005-01-19-1/","isoDate":"2005-01-19T00:00:00.000Z","dateMiliSeconds":1106092800000,"authorName":"masutaka"},{"title":"commit すると怒られてしまう場合は？","content":"|% svn commit -m &quot;&quot;\n|Deleting howm\n|svn: Commit failed (details follow):\n|svn: Out of date: &lsquo;/trunk/howm&rsquo; in transaction &lsquo;35&rsquo;\nこういう場合は update してから commit する。","contentSnippet":"|% svn commit -m \"\"|Deleting howm|svn: Commit failed (details follow):|svn: Out of date: ‘/trunk/howm’ in transaction ‘35’こういう場合は update してから commit する。","link":"https://masutaka.net/2005-01-16-1/","isoDate":"2005-01-16T00:00:00.000Z","dateMiliSeconds":1105833600000,"authorName":"masutaka"},{"title":"configure のオプション","content":"[mew-dist 25941]\nこういう指定もできるみたい。 |% configrure &ndash;prefix=&rsquo;$(DESTDIR)&rsquo;/usr/local","contentSnippet":"[mew-dist 25941]こういう指定もできるみたい。 |% configrure –prefix=’$(DESTDIR)’/usr/local","link":"https://masutaka.net/2005-01-12-1/","isoDate":"2005-01-12T00:00:00.000Z","dateMiliSeconds":1105488000000,"authorName":"masutaka"},{"title":"文字列の置換","content":"&ldquo;aaaa1234bbbb&rdquo; =&gt; &ldquo;aaaabbbb&rdquo;\n# sh % echo &#34;aaaa1234bbbb&#34; | sed -e &#39;s/^\\([a-z]*\\)\\([0-9]*\\)\\([a-z]*\\)$/\\1\\3/&#39; aaaabbbb ;; elisp(文字列の走査) (let ((str &#34;aaaa1234bbbb&#34;))  (string-match &#34;\\\\([a-z]+\\\\)\\\\([0-9]+\\\\)\\\\([a-z]+\\\\)&#34; str)  (concat  (match-string-no-properties 1 str)  (match-string-no-properties 3 str))) =&gt; &#34;aaaabbbb&#34; ;; elisp(バッファの走査) &lt;= ちょっと大げさ (with-temp-buffer  (let ((str &#34;aaaa1234bbbb&#34;))  (insert str)  (goto-char (point-min))  (if (re-search-forward &#34;\\\\([a-z]+\\\\)\\\\([0-9]+\\\\)\\\\([a-z]+\\\\)&#34; (point-max) t)  (concat  (match-string-no-properties 1)  (match-string-no-properties 3))))) =&gt; &#34;aaaabbbb&#34; ","contentSnippet":"“aaaa1234bbbb” => “aaaabbbb”# sh % echo \"aaaa1234bbbb\" | sed -e 's/^\\([a-z]*\\)\\([0-9]*\\)\\([a-z]*\\)$/\\1\\3/' aaaabbbb ;; elisp(文字列の走査) (let ((str \"aaaa1234bbbb\"))  (string-match \"\\\\([a-z]+\\\\)\\\\([0-9]+\\\\)\\\\([a-z]+\\\\)\" str)  (concat  (match-string-no-properties 1 str)  (match-string-no-properties 3 str))) => \"aaaabbbb\" ;; elisp(バッファの走査) <= ちょっと大げさ (with-temp-buffer  (let ((str \"aaaa1234bbbb\"))  (insert str)  (goto-char (point-min))  (if (re-search-forward \"\\\\([a-z]+\\\\)\\\\([0-9]+\\\\)\\\\([a-z]+\\\\)\" (point-max) t)  (concat  (match-string-no-properties 1)  (match-string-no-properties 3))))) => \"aaaabbbb\"","link":"https://masutaka.net/2004-12-22-1/","isoDate":"2004-12-22T00:00:00.000Z","dateMiliSeconds":1103673600000,"authorName":"masutaka"},{"title":"ログイン/ログアウトの監視","content":"tcshでもできるみたい。\nhttp://tehanu.hpcl.titech.ac.jp/zsh/waka/intro-LoginLogoutWatching.html % watch=all\n% WATCHFMT=&quot;%n has %a %l from %m at %t %w.&quot;\n% log","contentSnippet":"tcshでもできるみたい。http://tehanu.hpcl.titech.ac.jp/zsh/waka/intro-LoginLogoutWatching.html % watch=all% WATCHFMT=\"%n has %a %l from %m at %t %w.\"% log","link":"https://masutaka.net/2004-12-14-1/","isoDate":"2004-12-14T00:00:00.000Z","dateMiliSeconds":1102982400000,"authorName":"masutaka"},{"title":"C言語で、小数の小数部分だけを抜き出す方法","content":"その1\nfloat shousuu, zenbu = 1.5; shousuu = zenbu - (int)zenbu; その2\n#include &lt;math.h&gt; float zenbu = 1.5, seisuu, shousuu; shousuu = modff(zenbu, &amp;seisuu); ","contentSnippet":"その1float shousuu, zenbu = 1.5; shousuu = zenbu - (int)zenbu; その2#include <math.h> float zenbu = 1.5, seisuu, shousuu; shousuu = modff(zenbu, &seisuu);","link":"https://masutaka.net/2004-12-10-1/","isoDate":"2004-12-10T00:00:00.000Z","dateMiliSeconds":1102636800000,"authorName":"masutaka"},{"title":"CVS の commit ログから ChangeLog を生成してくれる。","content":"|% cvs2cl.pl -b\nブランチを指定することもできる。 |% cvs2cl.pl -b &ndash;follow-only TEST_BRANCH","contentSnippet":"|% cvs2cl.pl -bブランチを指定することもできる。 |% cvs2cl.pl -b –follow-only TEST_BRANCH","link":"https://masutaka.net/2004-12-06-1/","isoDate":"2004-12-06T00:00:00.000Z","dateMiliSeconds":1102291200000,"authorName":"masutaka"},{"title":"$* と $@ の違い","content":"$* 全引数リスト。ダブルクォートで囲んだ場合、\n&ldquo;$1 $2 … $n&rdquo; と全引数を一つにくっつけた物に展開される。\n$@ 全引数リスト。ダブルクォートで囲んだ場合、\n&ldquo;$1&rdquo; &ldquo;$2&rdquo; … &ldquo;$n&rdquo; とそれぞれの引数を個別にダブルクォートで囲んで展開する。","contentSnippet":"$* 全引数リスト。ダブルクォートで囲んだ場合、“$1 $2 … $n” と全引数を一つにくっつけた物に展開される。$@ 全引数リスト。ダブルクォートで囲んだ場合、“$1” “$2” … “$n” とそれぞれの引数を個別にダブルクォートで囲んで展開する。","link":"https://masutaka.net/2004-10-21-2/","isoDate":"2004-10-21T01:00:00.000Z","dateMiliSeconds":1098320400000,"authorName":"masutaka"},{"title":"trap とかに使うシグナルナンバーの説明(kill -l)","content":"|0:正常終了用, 1:ハングアップ, 2:割り込み(Ctrl-C), 3:クイットシグナル(Ctrl-)\n|9:キルシグナル(強制終了 Kill -KILL PID), 15:終了シグナル(kill PID)","contentSnippet":"|0:正常終了用, 1:ハングアップ, 2:割り込み(Ctrl-C), 3:クイットシグナル(Ctrl-)|9:キルシグナル(強制終了 Kill -KILL PID), 15:終了シグナル(kill PID)","link":"https://masutaka.net/2004-10-21-1/","isoDate":"2004-10-21T00:00:00.000Z","dateMiliSeconds":1098316800000,"authorName":"masutaka"},{"title":"関数の引数に文字列があると、BSS 領域に取られるようだ","content":"printf() を削除したときに BSS のサイズが減っていて気づいた。","contentSnippet":"printf() を削除したときに BSS のサイズが減っていて気づいた。","link":"https://masutaka.net/2004-09-29-1/","isoDate":"2004-09-29T00:00:00.000Z","dateMiliSeconds":1096416000000,"authorName":"masutaka"},{"title":"sysinfo が使えない時","content":"/usr/sbin/psrinfo や /usr/sbin/prtconf を使えばよい。\n/usr/platform/uname -i/sbin/prtdiag もありますね。","contentSnippet":"/usr/sbin/psrinfo や /usr/sbin/prtconf を使えばよい。/usr/platform/uname -i/sbin/prtdiag もありますね。","link":"https://masutaka.net/2004-08-27-1/","isoDate":"2004-08-27T00:00:00.000Z","dateMiliSeconds":1093564800000,"authorName":"masutaka"},{"title":"ファイルの任意の範囲を出力","content":"10000 行目から 10100 行目まで出力 |% sed -n &ldquo;10000,10100 p&rdquo; [filename]\n行番号も出力 |% cat -n [filename] | sed -n &ldquo;10000,10100 p&rdquo;","contentSnippet":"10000 行目から 10100 行目まで出力 |% sed -n “10000,10100 p” [filename]行番号も出力 |% cat -n [filename] | sed -n “10000,10100 p”","link":"https://masutaka.net/2004-08-04-1/","isoDate":"2004-08-04T00:00:00.000Z","dateMiliSeconds":1091577600000,"authorName":"masutaka"},{"title":"解像度のカスタマイズ","content":"現在の解像度を知る方法\n|% /usr/sbin/fbconfig -prconf\n設定可能な解像度リスト取得\n|% /usr/sbin/fbconfig -res ?\n解像度の初期値の変更\n|% /usr/sbin/fbconfig -res [解像度]\n解像度を初期値に戻す時\n|% /usr/sbin/fbconfig -default","contentSnippet":"現在の解像度を知る方法|% /usr/sbin/fbconfig -prconf設定可能な解像度リスト取得|% /usr/sbin/fbconfig -res ?解像度の初期値の変更|% /usr/sbin/fbconfig -res [解像度]解像度を初期値に戻す時|% /usr/sbin/fbconfig -default","link":"https://masutaka.net/2004-07-22-1/","isoDate":"2004-07-22T00:00:00.000Z","dateMiliSeconds":1090454400000,"authorName":"masutaka"},{"title":"migemo の諸問題","content":"  Emacs-21.3 on Solaris9\nbuffer に ataS がある状態で、C-s ataS まで打つと Emacs が必ず落ちる。\n(setq migemo-options &lsquo;(&quot;-S&quot; &ldquo;migemo&rdquo; &ldquo;-t&rdquo; &ldquo;emacs&rdquo;)) したら落ちなかった。\n  Emacs-21.3.50 on RedHat 7.2\n[Regular expression too big] と表示される。\n=&gt; Emacs のバグだったようだ。CVS 先端では直っている。\nhttp://www.m17n.org/mlarchive/mule-ja/200310/msg00000.html   ","contentSnippet":"Emacs-21.3 on Solaris9buffer に ataS がある状態で、C-s ataS まで打つと Emacs が必ず落ちる。(setq migemo-options ‘(\"-S\" “migemo” “-t” “emacs”)) したら落ちなかった。  Emacs-21.3.50 on RedHat 7.2[Regular expression too big] と表示される。=> Emacs のバグだったようだ。CVS 先端では直っている。http://www.m17n.org/mlarchive/mule-ja/200310/msg00000.html","link":"https://masutaka.net/2004-07-14-1/","isoDate":"2004-07-14T00:00:00.000Z","dateMiliSeconds":1089763200000,"authorName":"masutaka"},{"title":"screen の説明","content":"URL: http://risky-safety.org/~zinnia/screen/contribute2/ ","contentSnippet":"URL: http://risky-safety.org/~zinnia/screen/contribute2/","link":"https://masutaka.net/2004-06-11-1/","isoDate":"2004-06-11T00:00:00.000Z","dateMiliSeconds":1086912000000,"authorName":"masutaka"},{"title":"delete() の挙動","content":"|リストの一番始めの要素がマッチした場合は、元のリストを破壊しない。\n|list\n|=&gt;(&ldquo;CVS/&rdquo; &ldquo;.o&rdquo; &ldquo;~&rdquo; &ldquo;.bin&rdquo;)\n|\n|(delete &ldquo;CVS/&rdquo; list)\n|=&gt;(&quot;.o&quot; &ldquo;~&rdquo; &ldquo;.bin&rdquo;)\n|list\n|=&gt;(&ldquo;CVS/&rdquo; &ldquo;.o&rdquo; &ldquo;~&rdquo; &ldquo;.bin&rdquo;)\n|\n|(delete &ldquo;~&rdquo; list)\n|=&gt;(&ldquo;CVS/&rdquo; &ldquo;.o&rdquo; &ldquo;.bin&rdquo;)\n|list\n|=&gt;(&ldquo;CVS/&rdquo; &ldquo;.o&rdquo; &ldquo;.bin&rdquo;)","contentSnippet":"|リストの一番始めの要素がマッチした場合は、元のリストを破壊しない。|list|=>(“CVS/” “.o” “~” “.bin”)||(delete “CVS/” list)|=>(\".o\" “~” “.bin”)|list|=>(“CVS/” “.o” “~” “.bin”)||(delete “~” list)|=>(“CVS/” “.o” “.bin”)|list|=>(“CVS/” “.o” “.bin”)","link":"https://masutaka.net/2004-05-27-2/","isoDate":"2004-05-27T01:00:00.000Z","dateMiliSeconds":1085619600000,"authorName":"masutaka"},{"title":"正規表現で単語単位でマッチさせる","content":"\\&lt;word\\&gt; は word にはマッチするが、wordd にはマッチしない。","contentSnippet":"\\<word\\> は word にはマッチするが、wordd にはマッチしない。","link":"https://masutaka.net/2004-05-27-1/","isoDate":"2004-05-27T00:00:00.000Z","dateMiliSeconds":1085616000000,"authorName":"masutaka"},{"title":"色付け用の外部ツール","content":"[meadow-users-jp 5429]\nhttp://www.jpl.org/ftp/pub/elisp/develock.el.gz C や elisp のソースで余分な空白などを強調表示させてくれる。\nただしかなり厳しい色づけなので、実用は難しいかも。","contentSnippet":"[meadow-users-jp 5429]http://www.jpl.org/ftp/pub/elisp/develock.el.gz C や elisp のソースで余分な空白などを強調表示させてくれる。ただしかなり厳しい色づけなので、実用は難しいかも。","link":"https://masutaka.net/2004-05-17-1/","isoDate":"2004-05-17T00:00:00.000Z","dateMiliSeconds":1084752000000,"authorName":"masutaka"},{"title":"SVNROOT の作成方法","content":"|% pwd\n|/home/masutaka\n管理領域を作成 |% svnadmin create SVNROOT\n|% svn mkdir -m &ldquo;setup branches&rdquo; file:///home/masutaka/SVNROOT/branches\n|% svn mkdir -m &ldquo;setup tags&rdquo; file:///home/masutaka/SVNROOT/tags\n|% svn mkdir -m &ldquo;setup trunk&rdquo; file:///home/masutaka/SVNROOT/trunk\n~/.emacs を import |% svn import -m &ldquo;Init&rdquo; ~/.emacs file:///home/masutaka/SVNROOT/trunk/.emacs\n~/.emacs を checkout |% mv .emacs .emacs.bak; cd ..\n|% svn checkout file:///home/masutaka/SVNROOT/trunk masutaka\n|% cd masutaka\nこれ以降は add =&gt; commit で良いはず。 |% svn add .zshenv; svn commit -m &ldquo;Init&rdquo; .zshenv","contentSnippet":"|% pwd|/home/masutaka管理領域を作成 |% svnadmin create SVNROOT|% svn mkdir -m “setup branches” file:///home/masutaka/SVNROOT/branches|% svn mkdir -m “setup tags” file:///home/masutaka/SVNROOT/tags|% svn mkdir -m “setup trunk” file:///home/masutaka/SVNROOT/trunk~/.emacs を import |% svn import -m “Init” ~/.emacs file:///home/masutaka/SVNROOT/trunk/.emacs~/.emacs を checkout |% mv .emacs .emacs.bak; cd ..|% svn checkout file:///home/masutaka/SVNROOT/trunk masutaka|% cd masutakaこれ以降は add => commit で良いはず。 |% svn add .zshenv; svn commit -m “Init” .zshenv","link":"https://masutaka.net/2004-05-05-1/","isoDate":"2004-05-05T00:00:00.000Z","dateMiliSeconds":1083715200000,"authorName":"masutaka"},{"title":"コンパイルしたディレクトリの確認","content":"source-directory =&gt;\n&ldquo;/home/masutaka/share/src/emacs/gnu-emacs/emacs-21.3/&rdquo;","contentSnippet":"source-directory =>“/home/masutaka/share/src/emacs/gnu-emacs/emacs-21.3/”","link":"https://masutaka.net/2004-05-03-1/","isoDate":"2004-05-03T00:00:00.000Z","dateMiliSeconds":1083542400000,"authorName":"masutaka"},{"title":"桜庭の道場の秘伝のタレらしい","content":"醤油, かつおぶし, 卵の黄身, 長葱, 青海苔\nの順番に入れて、黄身が固まらないように鍋で温めるらしい。","contentSnippet":"醤油, かつおぶし, 卵の黄身, 長葱, 青海苔の順番に入れて、黄身が固まらないように鍋で温めるらしい。","link":"https://masutaka.net/2004-04-15-1/","isoDate":"2004-04-15T00:00:00.000Z","dateMiliSeconds":1081987200000,"authorName":"masutaka"},{"title":"共通鍵を使ってファイルを暗号化","content":"URL: http://namazu.org/~satoru/diary/20040322.html#p01 共通鍵を使ったときの得失\n○鍵のファイルを作って管理する必要がない。\n×暗号化するときにもパスフレーズを打つ必要がある。\n使い方\n|# 暗号化: パスフレーズを入力すると foo.gpg ができる\n|% gpg -c foo\n|# 復号化: パスフレーズを入力すると foo ができる\n|% gpg -o foo -d foo.gpg\nこれらの操作を Emacs から自動化するツール\nURL: http://www.mew.org/~kazu/proj/prog/gpg.el ","contentSnippet":"URL: http://namazu.org/~satoru/diary/20040322.html#p01 共通鍵を使ったときの得失○鍵のファイルを作って管理する必要がない。×暗号化するときにもパスフレーズを打つ必要がある。使い方|# 暗号化: パスフレーズを入力すると foo.gpg ができる|% gpg -c foo|# 復号化: パスフレーズを入力すると foo ができる|% gpg -o foo -d foo.gpgこれらの操作を Emacs から自動化するツールURL: http://www.mew.org/~kazu/proj/prog/gpg.el","link":"https://masutaka.net/2004-03-23-1/","isoDate":"2004-03-23T00:00:00.000Z","dateMiliSeconds":1080000000000,"authorName":"masutaka"},{"title":"Window の情報を得る","content":"% xwininfo -root xwininfo: Window id: 0x3a (the root window) (has no name) Absolute upper-left X: 0 Absolute upper-left Y: 0 Relative upper-left X: 0 Relative upper-left Y: 0 Width: 1152 Height: 900 Depth: 8 Visual Class: PseudoColor Border width: 0 Class: InputOutput Colormap: 0x21 (installed) Bit Gravity State: ForgetGravity Window Gravity State: NorthWestGravity Backing Store State: NotUseful Save Under State: no Map State: IsViewable Override Redirect State: no Corners: +0+0 -0+0 -0-0 +0-0 -geometry 1152x900+0+0 ","contentSnippet":"% xwininfo -root xwininfo: Window id: 0x3a (the root window) (has no name) Absolute upper-left X: 0 Absolute upper-left Y: 0 Relative upper-left X: 0 Relative upper-left Y: 0 Width: 1152 Height: 900 Depth: 8 Visual Class: PseudoColor Border width: 0 Class: InputOutput Colormap: 0x21 (installed) Bit Gravity State: ForgetGravity Window Gravity State: NorthWestGravity Backing Store State: NotUseful Save Under State: no Map State: IsViewable Override Redirect State: no Corners: +0+0 -0+0 -0-0 +0-0 -geometry 1152x900+0+0","link":"https://masutaka.net/2004-02-25-1/","isoDate":"2004-02-25T00:00:00.000Z","dateMiliSeconds":1077667200000,"authorName":"masutaka"},{"title":"xrdb - X server Resource DataBase utility","content":"# Xサーバの情報を得る。 % xrdb -symbols # X-resource の情報を得る。 % xrdb -query # ログオフせずに ~/.Xdefaults を反映 % xrdb -remove; xrdb -merge ~/.Xdefaults ","contentSnippet":"# Xサーバの情報を得る。 % xrdb -symbols # X-resource の情報を得る。 % xrdb -query # ログオフせずに ~/.Xdefaults を反映 % xrdb -remove; xrdb -merge ~/.Xdefaults","link":"https://masutaka.net/2004-02-20-2/","isoDate":"2004-02-20T01:00:00.000Z","dateMiliSeconds":1077238800000,"authorName":"masutaka"},{"title":"exec -- 現在実行中のシェルに代わり、指定したコマンドを実行する","content":"シェルから\n% ls とコマンドを実行すると、シェルは以下のことを行う。\n システムコール fork(2) を呼び、子プロセスを生成する。 子プロセスは ls を exec(2) する。 親プロセスであるシェルは、ls の実行が完了するのを待つ (wait する)。  一方、\n% exec ls と exec を使うと、シェルは fork(2) せず、いきなり ls コマンドを exec(2) する (シェルの内部コマンド exec(1) を実行すると、内部でシステムコール exec(2) が呼ばれるということ)。シェルのプロセス情報は ls のプロセスの情報で上書きされる。なお、子プロセスは生成されないので、シェルと ls のプロセス ID は同じになる。\nUNIXの部屋 http://x68000.startshop.co.jp/~68user/unix/ ","contentSnippet":"シェルから% ls とコマンドを実行すると、シェルは以下のことを行う。 システムコール fork(2) を呼び、子プロセスを生成する。 子プロセスは ls を exec(2) する。 親プロセスであるシェルは、ls の実行が完了するのを待つ (wait する)。  一方、% exec ls と exec を使うと、シェルは fork(2) せず、いきなり ls コマンドを exec(2) する (シェルの内部コマンド exec(1) を実行すると、内部でシステムコール exec(2) が呼ばれるということ)。シェルのプロセス情報は ls のプロセスの情報で上書きされる。なお、子プロセスは生成されないので、シェルと ls のプロセス ID は同じになる。UNIXの部屋 http://x68000.startshop.co.jp/~68user/unix/","link":"https://masutaka.net/2004-02-20-1/","isoDate":"2004-02-20T00:00:00.000Z","dateMiliSeconds":1077235200000,"authorName":"masutaka"},{"title":"フォントパス追加＆確認","content":"たとえば、\n% xset fp+ /usr/local/share/fonts/marumoji とすると、フォントパスの最後に /usr/local/share/fonts/marumoji が加わり、\n% xset +fp /usr/local/share/fonts/shinonome とすると、フォントパスの先頭に /usr/local/share/fonts/shinonome が加わります。\nフォントパスは\n% xset q とすると、\nKeyboard Control: auto repeat: on key click percent: 0 LED mask: 00000000 [...] Font Path: /usr/local/share/fonts/shinonome,unix/:7100,/usr/local/share/fonts/marumoji [...] のように確認できます。","contentSnippet":"たとえば、% xset fp+ /usr/local/share/fonts/marumoji とすると、フォントパスの最後に /usr/local/share/fonts/marumoji が加わり、% xset +fp /usr/local/share/fonts/shinonome とすると、フォントパスの先頭に /usr/local/share/fonts/shinonome が加わります。フォントパスは% xset q とすると、Keyboard Control: auto repeat: on key click percent: 0 LED mask: 00000000 [...] Font Path: /usr/local/share/fonts/shinonome,unix/:7100,/usr/local/share/fonts/marumoji [...] のように確認できます。","link":"https://masutaka.net/2004-02-19-1/","isoDate":"2004-02-19T00:00:00.000Z","dateMiliSeconds":1077148800000,"authorName":"masutaka"},{"title":"FLIM & SEMI Install","content":"% tar xvzf flim-1.14.6.tar.gz; cd flim-1.14.6 % make % emacs -batch -q -no-site-file -l texinfmt -f batch-texinfo-format *.texi # (cd /usr/local/share/emacs/site-lisp &amp;&amp; rm flim) # make install # cp *.info /usr/local/info # dir を編集する。&#34;install-info &lt;info&gt; &lt;dir&gt;&#34; も使えるかも知れない。 SEMI もやりかたは同じなので省略する。","contentSnippet":"% tar xvzf flim-1.14.6.tar.gz; cd flim-1.14.6 % make % emacs -batch -q -no-site-file -l texinfmt -f batch-texinfo-format *.texi # (cd /usr/local/share/emacs/site-lisp && rm flim) # make install # cp *.info /usr/local/info # dir を編集する。\"install-info <info> <dir>\" も使えるかも知れない。 SEMI もやりかたは同じなので省略する。","link":"https://masutaka.net/2004-02-16-2/","isoDate":"2004-02-16T01:00:00.000Z","dateMiliSeconds":1076893200000,"authorName":"masutaka"},{"title":"wanderlust 常に all scan ???","content":"(setq wl-default-sync-range &#34;all&#34;) ","contentSnippet":"(setq wl-default-sync-range \"all\")","link":"https://masutaka.net/2004-02-16-1/","isoDate":"2004-02-16T00:00:00.000Z","dateMiliSeconds":1076889600000,"authorName":"masutaka"},{"title":"日付＆時間を指定する。","content":"&lt;http://www.swlab.csce.kyushu-u.ac.jp/man/cvs-1.10.7/cvs-ja_toc.html&gt; # 日付を指定して TEST_BRANCH からチェックアウト。 % cvs co -rTEST_BRANCH -D20040203 src/hogehoge # もちろん時間も指定できる。 % cvs co -rTEST_BRANCH -D&#34;2004-02-03 12:00&#34; src/hogehoge # diff も取れるよ。 % cd ~/src/hogehoge % cvs diff -rTEST_BRANCH -D&#34;2004-02-03 12:00&#34; ","contentSnippet":"<http://www.swlab.csce.kyushu-u.ac.jp/man/cvs-1.10.7/cvs-ja_toc.html> # 日付を指定して TEST_BRANCH からチェックアウト。 % cvs co -rTEST_BRANCH -D20040203 src/hogehoge # もちろん時間も指定できる。 % cvs co -rTEST_BRANCH -D\"2004-02-03 12:00\" src/hogehoge # diff も取れるよ。 % cd ~/src/hogehoge % cvs diff -rTEST_BRANCH -D\"2004-02-03 12:00\"","link":"https://masutaka.net/2004-02-09-2/","isoDate":"2004-02-09T01:00:00.000Z","dateMiliSeconds":1076288400000,"authorName":"masutaka"},{"title":"telnet で直接 pop サーバとお話しする。","content":"% telnet example.com pop3 user xxxxxxxx pass YYYYYYYY stat # &lt;= メールが何通あるかを問い合わせ list # &lt;= メールをリスト表示 retr &lt;num&gt; # &lt;= &lt;num&gt;通目のメールの中味を表示 dele &lt;num&gt; # &lt;= &lt;num&gt;通目のメールを削除 quit # &lt;= 終了 ","contentSnippet":"% telnet example.com pop3 user xxxxxxxx pass YYYYYYYY stat # <= メールが何通あるかを問い合わせ list # <= メールをリスト表示 retr <num> # <= <num>通目のメールの中味を表示 dele <num> # <= <num>通目のメールを削除 quit # <= 終了","link":"https://masutaka.net/2004-02-09-1/","isoDate":"2004-02-09T00:00:00.000Z","dateMiliSeconds":1076284800000,"authorName":"masutaka"},{"title":"emacs を CVS の先端から持ってくる。","content":"http://homepage.mac.com/nand/macosx/emacs_cvs.html % export CVS_RSH=ssh % cvs -z3 -d :ext:anoncvs@savannah.gnu.org:/cvsroot/emacs checkout -P emacs # &#34;rpm -e texinfo&#34; して texinfo-4.6 を普通にインストール。 % mkdir emacs-work; cd emacs-work % ../emacs/configure --without-xim % make bootstrap\t# See INSTALL.CVS ","contentSnippet":"http://homepage.mac.com/nand/macosx/emacs_cvs.html % export CVS_RSH=ssh % cvs -z3 -d :ext:anoncvs@savannah.gnu.org:/cvsroot/emacs checkout -P emacs # \"rpm -e texinfo\" して texinfo-4.6 を普通にインストール。 % mkdir emacs-work; cd emacs-work % ../emacs/configure --without-xim % make bootstrap\t# See INSTALL.CVS","link":"https://masutaka.net/2004-02-03-2/","isoDate":"2004-02-03T01:00:00.000Z","dateMiliSeconds":1075770000000,"authorName":"masutaka"},{"title":"tamago を CVS の先端から持ってくる。","content":"http://emacs-21.ki.nu/application/tamago.html % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/tamago login % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/tamago co tamago emacs-20.7 では its/aynu.el の 137 行目あたりでコンパイルエラーになってしまう。\nコンパイルエラーとは関係ないけど、以下のスクリプトで調べてみたら、すでにインストールされている egg と違う部分が結構あった。\n% cd ~/share/elisp % for file in `find egg/. -name &#34;*.el&#34;`; do; \\ &gt; echo &#34;[`basename $file`]&#34;; \\ &gt; diff -c /usr/gnu/share/emacs/site-lisp/$file $file 2&gt;&amp;1 ; \\ &gt; done ","contentSnippet":"http://emacs-21.ki.nu/application/tamago.html % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/tamago login % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/tamago co tamago emacs-20.7 では its/aynu.el の 137 行目あたりでコンパイルエラーになってしまう。コンパイルエラーとは関係ないけど、以下のスクリプトで調べてみたら、すでにインストールされている egg と違う部分が結構あった。% cd ~/share/elisp % for file in `find egg/. -name \"*.el\"`; do; \\ > echo \"[`basename $file`]\"; \\ > diff -c /usr/gnu/share/emacs/site-lisp/$file $file 2>&1 ; \\ > done","link":"https://masutaka.net/2004-02-03-1/","isoDate":"2004-02-03T00:00:00.000Z","dateMiliSeconds":1075766400000,"authorName":"masutaka"},{"title":"Mew あれこれ","content":"|デフォルトの動作 mew-refile-ctrl-multi =&gt; t の時に\n|Summary-mode で c' すると、複数のフォルダに refile されるが、 |ハードリンクが存在するシステムなら、ハードリンクが使われるので、 |ファイルの容量が増えないのでした。 | |Mew-4.0.51 あたりから mew-summary-form-mark-review =&gt; t だけで |(To: だけでなく) CC: に自分が入っている時も *&rsquo; マークを付けて\n|くれるようになったようだ。","contentSnippet":"|デフォルトの動作 mew-refile-ctrl-multi => t の時に|Summary-mode で c' すると、複数のフォルダに refile されるが、 |ハードリンクが存在するシステムなら、ハードリンクが使われるので、 |ファイルの容量が増えないのでした。 | |Mew-4.0.51 あたりから mew-summary-form-mark-review => t だけで |(To: だけでなく) CC: に自分が入っている時も *’ マークを付けて|くれるようになったようだ。","link":"https://masutaka.net/2004-02-02-2/","isoDate":"2004-02-02T01:00:00.000Z","dateMiliSeconds":1075683600000,"authorName":"masutaka"},{"title":"16進数で色一覧を表示","content":"(defun list-hexadecimal-colors-display ()  &#34;16進数で色一覧を表示&#34;  (interactive)  (let ((r 0)  (g 0)  (b 0)  (delta 32)  (color-list ()))  (while (&lt; r 256)  (setq g 0)  (while (&lt; g 256)  (setq b 0)  (while (&lt; b 256)  (setq color-list (append color-list (list (format &#34;#%.2x%.2x%.2x&#34; r g b))))  (setq b (+ b delta)))  (setq g (+ g delta)))  (setq r (+ r delta)))  (list-colors-display color-list))) ","contentSnippet":"(defun list-hexadecimal-colors-display ()  \"16進数で色一覧を表示\"  (interactive)  (let ((r 0)  (g 0)  (b 0)  (delta 32)  (color-list ()))  (while (< r 256)  (setq g 0)  (while (< g 256)  (setq b 0)  (while (< b 256)  (setq color-list (append color-list (list (format \"#%.2x%.2x%.2x\" r g b))))  (setq b (+ b delta)))  (setq g (+ g delta)))  (setq r (+ r delta)))  (list-colors-display color-list)))","link":"https://masutaka.net/2004-02-02-1/","isoDate":"2004-02-02T00:00:00.000Z","dateMiliSeconds":1075680000000,"authorName":"masutaka"},{"title":"STOP エラーのデバッグ","content":"http://homepage1.nifty.com/~naru/analyze.htm 会社のPCもブルースクリーンになるけど、停止せずに一気に\nBIOS 起動画面に戻ってしまうからデバッグは難しいかなあ。","contentSnippet":"http://homepage1.nifty.com/~naru/analyze.htm 会社のPCもブルースクリーンになるけど、停止せずに一気にBIOS 起動画面に戻ってしまうからデバッグは難しいかなあ。","link":"https://masutaka.net/2004-01-27-1/","isoDate":"2004-01-27T00:00:00.000Z","dateMiliSeconds":1075161600000,"authorName":"masutaka"},{"title":"remove => commit したファイルを復活させる方法","content":"|% cvs log [ファイル名]\n|\n|で、過去のリビジョンをみて、削除する直前のリビジョンが 1.x だった場合、\n|\n|% cvs update -p -r 1.x [ファイル名] &gt; [ファイル名]\n| p\n|とかすれば、ローカルにもってこれる。それを再度コミットすれば復活する。\n|\n|手順としては\n|1. 過去のリビジョンのファイルをローカルに持ってくる。\n| % cvs update -p -r 1.x [ファイル名] &gt; [ファイル名]\n|2. このファイルをとっておく。\n| % cp [ファイル名] [ファイル名].bak\n|3. StickyTag を外す。今回はローカルからファイルが削除される。Warning でるけど無視。\n| % cvs update -A [ファイル名]\n|4. リネームしたファイルをもどす。\n| % mv [ファイル名].bak [ファイル名]\n|5. commit する。\n| % cvs add [ファイル名]\n| % cvs commit [ファイル名]","contentSnippet":"|% cvs log [ファイル名]||で、過去のリビジョンをみて、削除する直前のリビジョンが 1.x だった場合、||% cvs update -p -r 1.x [ファイル名] > [ファイル名]| p|とかすれば、ローカルにもってこれる。それを再度コミットすれば復活する。||手順としては|1. 過去のリビジョンのファイルをローカルに持ってくる。| % cvs update -p -r 1.x [ファイル名] > [ファイル名]|2. このファイルをとっておく。| % cp [ファイル名] [ファイル名].bak|3. StickyTag を外す。今回はローカルからファイルが削除される。Warning でるけど無視。| % cvs update -A [ファイル名]|4. リネームしたファイルをもどす。| % mv [ファイル名].bak [ファイル名]|5. commit する。| % cvs add [ファイル名]| % cvs commit [ファイル名]","link":"https://masutaka.net/2004-01-21-1/","isoDate":"2004-01-21T00:00:00.000Z","dateMiliSeconds":1074643200000,"authorName":"masutaka"},{"title":"大文字小文字を区別しない置換","content":"% echo &ldquo;charset=UTF-8&rdquo; | sed -e &rsquo;s/charset=utf-8/charset=euc-jp/'\ncharset=UTF-8\n% echo &ldquo;charset=UTF-8&rdquo; | sed -e &rsquo;s/charset=utf-8/charset=euc-jp/i'\ncharset=euc-jp","contentSnippet":"% echo “charset=UTF-8” | sed -e ’s/charset=utf-8/charset=euc-jp/'charset=UTF-8% echo “charset=UTF-8” | sed -e ’s/charset=utf-8/charset=euc-jp/i'charset=euc-jp","link":"https://masutaka.net/2004-01-20-1/","isoDate":"2004-01-20T00:00:00.000Z","dateMiliSeconds":1074556800000,"authorName":"masutaka"},{"title":"cd した履歴を辿ってくれる。","content":"% cd -[TAB]","contentSnippet":"% cd -[TAB]","link":"https://masutaka.net/2004-01-08-1/","isoDate":"2004-01-08T00:00:00.000Z","dateMiliSeconds":1073520000000,"authorName":"masutaka"},{"title":"ある *.el を require しているパッケージを表示。","content":"(require &#39;loadhist) (file-dependents (feature-file &#39;cl)) ","contentSnippet":"(require 'loadhist) (file-dependents (feature-file 'cl))","link":"https://masutaka.net/2003-11-17-1/","isoDate":"2003-11-17T00:00:00.000Z","dateMiliSeconds":1069027200000,"authorName":"masutaka"},{"title":"正規表現メモ","content":"|+ をサポートしているかどうかは、コマンドによります。\n|grep では使えない、perl 内蔵の grep では使える、などなど。\n|* は必ずサポートしているので、面倒でも [a-zA-Z0-9]+ を\n|[a-zA-Z0-9][a-zA-Z0-9]* と書くと普遍的です。\n|\n|# perl では回数も指定できます。[a-zA-Z0-9]{3} は3回。\n|\n|ということなので、grep するなら\n|[a-zA-Z0-9][a-zA-Z0-9]*.c\n|perlなら\n|\\w+.c あるいは \\b.c\n|でいけると思います。","contentSnippet":"|+ をサポートしているかどうかは、コマンドによります。|grep では使えない、perl 内蔵の grep では使える、などなど。|* は必ずサポートしているので、面倒でも [a-zA-Z0-9]+ を|[a-zA-Z0-9][a-zA-Z0-9]* と書くと普遍的です。||# perl では回数も指定できます。[a-zA-Z0-9]{3} は3回。||ということなので、grep するなら|[a-zA-Z0-9][a-zA-Z0-9]*.c|perlなら|\\w+.c あるいは \\b.c|でいけると思います。","link":"https://masutaka.net/2003-11-11-1/","isoDate":"2003-11-11T00:00:00.000Z","dateMiliSeconds":1068508800000,"authorName":"masutaka"},{"title":"コマンドラインから hoge.wav を再生する。","content":"% cat hoge.wav &gt; /dev/dsp\n% play hoge.wav\t# sox hoge.wav -t ossdsp /dev/dsp\n% playwave hoge.wav","contentSnippet":"% cat hoge.wav > /dev/dsp% play hoge.wav\t# sox hoge.wav -t ossdsp /dev/dsp% playwave hoge.wav","link":"https://masutaka.net/2003-10-27-1/","isoDate":"2003-10-27T00:00:00.000Z","dateMiliSeconds":1067212800000,"authorName":"masutaka"},{"title":"xmodmap","content":"xev でキーコードを確認し，xmodmap で\n|keycode 115 = Hyper_L\n|keycode 116 = Hyper_R\n|add mod3 = Hyper_L\n|add mod3 = Hyper_R\nとして Windows キーを Hyper キーとして使えるらしい。\nSuper キーというのもあるらしい。","contentSnippet":"xev でキーコードを確認し，xmodmap で|keycode 115 = Hyper_L|keycode 116 = Hyper_R|add mod3 = Hyper_L|add mod3 = Hyper_Rとして Windows キーを Hyper キーとして使えるらしい。Super キーというのもあるらしい。","link":"https://masutaka.net/2003-10-21-2/","isoDate":"2003-10-21T01:00:00.000Z","dateMiliSeconds":1066698000000,"authorName":"masutaka"},{"title":"Mac アドレスの調べ方","content":"|% dmesg | grep &ldquo;Ethernet address&rdquo;","contentSnippet":"|% dmesg | grep “Ethernet address”","link":"https://masutaka.net/2003-10-21-1/","isoDate":"2003-10-21T00:00:00.000Z","dateMiliSeconds":1066694400000,"authorName":"masutaka"},{"title":"run-at-time()","content":";;foo() を 2003/10/9 3:12:30 に実行する。 (run-at-time (encode-time 30 12 3 9 10 2003) nil &#39;foo) ","contentSnippet":";;foo() を 2003/10/9 3:12:30 に実行する。 (run-at-time (encode-time 30 12 3 9 10 2003) nil 'foo)","link":"https://masutaka.net/2003-10-09-1/","isoDate":"2003-10-09T00:00:00.000Z","dateMiliSeconds":1065657600000,"authorName":"masutaka"},{"title":"メールヘッダを出力","content":"% sed -n &lsquo;1,/^$/p&rsquo; [ファイル名]","contentSnippet":"% sed -n ‘1,/^$/p’ [ファイル名]","link":"https://masutaka.net/2003-10-08-1/","isoDate":"2003-10-08T00:00:00.000Z","dateMiliSeconds":1065571200000,"authorName":"masutaka"},{"title":"elisp で書かれた Window Manager","content":"(URL: X Emacs Window Manager )","contentSnippet":"(URL: X Emacs Window Manager )","link":"https://masutaka.net/2003-10-02-3/","isoDate":"2003-10-02T02:00:00.000Z","dateMiliSeconds":1065060000000,"authorName":"masutaka"},{"title":"Emacs 年表","content":"(URL: A History of Emacs )\n(URL: Emacs Timeline )\n(URL: Mule/Emacsの歴史 ) 右上の Mule/Emacs の歴史 -&gt; (左上の)Historical drawing","contentSnippet":"(URL: A History of Emacs )(URL: Emacs Timeline )(URL: Mule/Emacsの歴史 ) 右上の Mule/Emacs の歴史 -> (左上の)Historical drawing","link":"https://masutaka.net/2003-10-02-2/","isoDate":"2003-10-02T01:00:00.000Z","dateMiliSeconds":1065056400000,"authorName":"masutaka"},{"title":"Linuxによるシステム構築を目指す人のための情報交換フォーラム","content":"URL: http://www.atmarkit.co.jp/flinux/index.html ","contentSnippet":"URL: http://www.atmarkit.co.jp/flinux/index.html","link":"https://masutaka.net/2003-10-02-1/","isoDate":"2003-10-02T00:00:00.000Z","dateMiliSeconds":1065052800000,"authorName":"masutaka"},{"title":"ssh-agent を使用して、パスワードを聞かれないようにする。","content":"ローカルとリモートの ~/.ssh は消した。\n  公開鍵を生成\n   cygwin % ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/masutaka/.ssh/id_rsa): # &lt;= Enter(default)\nCreated directory &lsquo;/home/masutaka/.ssh&rsquo;.\nEnter passphrase (empty for no passphrase): # &lt;= パスワードを入力\nEnter same passphrase again: # &lt;= もう一度パスワードを入力\nYour identification has been saved in /home/masutaka/.ssh/id_rsa.\nYour public key has been saved in /home/masutaka/.ssh/id_rsa.pub.\nThe key fingerprint is:","contentSnippet":"ローカルとリモートの ~/.ssh は消した。  公開鍵を生成   cygwin % ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/home/masutaka/.ssh/id_rsa): # <= Enter(default)Created directory ‘/home/masutaka/.ssh’.Enter passphrase (empty for no passphrase): # <= パスワードを入力Enter same passphrase again: # <= もう一度パスワードを入力Your identification has been saved in /home/masutaka/.ssh/id_rsa.Your public key has been saved in /home/masutaka/.ssh/id_rsa.pub.The key fingerprint is:","link":"https://masutaka.net/2003-09-23-1/","isoDate":"2003-09-23T00:00:00.000Z","dateMiliSeconds":1064275200000,"authorName":"masutaka"},{"title":"memtest86 ","content":"memory checker として定番らしい。ちなみに下の URL は Meadow で有名な himi さんの日記。\nURL: http://ko.meadowy.net/~himi/diary/20030902.html ","contentSnippet":"memory checker として定番らしい。ちなみに下の URL は Meadow で有名な himi さんの日記。URL: http://ko.meadowy.net/~himi/diary/20030902.html","link":"https://masutaka.net/2003-09-13-1/","isoDate":"2003-09-13T00:00:00.000Z","dateMiliSeconds":1063411200000,"authorName":"masutaka"},{"title":"Emacs Lisp での繰り返しの書き方","content":"繰り返しを書くときは、まず mapcar, find-if などの高階関数で書けるかどう\nかを検討する。書けなければ dolist, dotimes などを使う。それでも書けなけ\nれば、while, loop, 再帰を使う。\n(URL: お気楽ごくらくプログラミング入門 &ndash; Lisper への道 &ndash; )\n(URL: (Scheme) (Lisp) )","contentSnippet":"繰り返しを書くときは、まず mapcar, find-if などの高階関数で書けるかどうかを検討する。書けなければ dolist, dotimes などを使う。それでも書けなければ、while, loop, 再帰を使う。(URL: お気楽ごくらくプログラミング入門 – Lisper への道 – )(URL: (Scheme) (Lisp) )","link":"https://masutaka.net/2003-09-11-1/","isoDate":"2003-09-11T00:00:00.000Z","dateMiliSeconds":1063238400000,"authorName":"masutaka"},{"title":"list を car しながら loop 処理させる。","content":"(dolist (target &#39;(a b c))  (if (eql &#39;b target) (return target))) ","contentSnippet":"(dolist (target '(a b c))  (if (eql 'b target) (return target)))","link":"https://masutaka.net/2003-09-07-2/","isoDate":"2003-09-07T01:00:00.000Z","dateMiliSeconds":1062896400000,"authorName":"masutaka"},{"title":"XEmacs-21.4.14 のインストール","content":"*** XEmacs 本体のインストール ***\n|% ncftpget ftp.xemacs.org . |&gt; /tux/xemacs/xemacs-21.4/xemacs-21.4.14-src.tar.gz |&gt; /tux/xemacs/xemacs-21.4/xemacs-21.4.14-elc.tar.gz |&gt; /tux/xemacs/xemacs-21.4/xemacs-21.4.14-info.tar.gz\n|% tar xvzf xemacs-21.4.14-src.tar.gz\n|% tar xvzf xemacs-21.4.14-info.tar.gz\n|% tar xvzf xemacs-21.4.14-elc.tar.gz\n|% cd xemacs-21.4.14\n|% ./configure &ndash;with-mule &ndash;with-wnn &ndash;with-xfs &ndash;without-canna &ndash;without-wnn6 &ndash;without-xim\n|% make\n|# make install\n|# cd /usr/local/lib/xemacs/mule-packages/etc\n|# (cd app-defaults &amp;&amp; ln -s ja ja_JP.eucJP)\n|# (cd start-files &amp;&amp; ln -s ja ja_JP.eucJP)\n|# cd /usr/local\n|# chmod -R go-w .\n|# chown -R root .","contentSnippet":"*** XEmacs 本体のインストール ***|% ncftpget ftp.xemacs.org . |> /tux/xemacs/xemacs-21.4/xemacs-21.4.14-src.tar.gz |> /tux/xemacs/xemacs-21.4/xemacs-21.4.14-elc.tar.gz |> /tux/xemacs/xemacs-21.4/xemacs-21.4.14-info.tar.gz|% tar xvzf xemacs-21.4.14-src.tar.gz|% tar xvzf xemacs-21.4.14-info.tar.gz|% tar xvzf xemacs-21.4.14-elc.tar.gz|% cd xemacs-21.4.14|% ./configure –with-mule –with-wnn –with-xfs –without-canna –without-wnn6 –without-xim|% make|# make install|# cd /usr/local/lib/xemacs/mule-packages/etc|# (cd app-defaults && ln -s ja ja_JP.eucJP)|# (cd start-files && ln -s ja ja_JP.eucJP)|# cd /usr/local|# chmod -R go-w .|# chown -R root .","link":"https://masutaka.net/2003-09-07-1/","isoDate":"2003-09-07T00:00:00.000Z","dateMiliSeconds":1062892800000,"authorName":"masutaka"},{"title":"正規表現を interactive にテストする","content":"M-x re-builder","contentSnippet":"M-x re-builder","link":"https://masutaka.net/2003-08-27-1/","isoDate":"2003-08-27T00:00:00.000Z","dateMiliSeconds":1061942400000,"authorName":"masutaka"},{"title":"XEmacs は site-lisp の一個下のディレクトリまでしか load-path に追加されない。","content":"2ch Emacs part9 の 235 と 236 のレスより\n|startup.el から利用されてる setup-paths.elの中の\n|paths-site-load-path-depth これか。\n|defvar になってるけど、init.el での指定は時期が遅いかな。ためしてないけど。","contentSnippet":"2ch Emacs part9 の 235 と 236 のレスより|startup.el から利用されてる setup-paths.elの中の|paths-site-load-path-depth これか。|defvar になってるけど、init.el での指定は時期が遅いかな。ためしてないけど。","link":"https://masutaka.net/2003-08-09-1/","isoDate":"2003-08-09T00:00:00.000Z","dateMiliSeconds":1060387200000,"authorName":"masutaka"},{"title":"cvs annotate","content":"特定の行を最後に変更した場所を表示する。\nソースコードを読むための技術 http://i.loveruby.net/ja/misc/readingcode.html ","contentSnippet":"特定の行を最後に変更した場所を表示する。ソースコードを読むための技術 http://i.loveruby.net/ja/misc/readingcode.html","link":"https://masutaka.net/2003-08-08-1/","isoDate":"2003-08-08T00:00:00.000Z","dateMiliSeconds":1060300800000,"authorName":"masutaka"},{"title":"HOSTS ファイルの在処","content":"WinXP&hellip;&hellip;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\nWin2000&hellip;.C:\\WINNT\\system32\\drivers\\etc\\hosts\nWin9X(ME)..C:\\Windows\\hosts","contentSnippet":"WinXP……C:\\WINDOWS\\system32\\drivers\\etc\\hostsWin2000….C:\\WINNT\\system32\\drivers\\etc\\hostsWin9X(ME)..C:\\Windows\\hosts","link":"https://masutaka.net/2003-08-01-1/","isoDate":"2003-08-01T00:00:00.000Z","dateMiliSeconds":1059696000000,"authorName":"masutaka"},{"title":"root で日本語パッチを当てた後は以下を実行。","content":"XUL.mfasl を削除。 &ldquo;MozillaFirebird &ndash;UILocale ja-JP -contentLocale JP&rdquo; で起動。  ※ FireFox は当時、Mozilla Firebird って名前だった。","contentSnippet":"XUL.mfasl を削除。 “MozillaFirebird –UILocale ja-JP -contentLocale JP” で起動。  ※ FireFox は当時、Mozilla Firebird って名前だった。","link":"https://masutaka.net/2003-07-22-1/","isoDate":"2003-07-22T00:00:00.000Z","dateMiliSeconds":1058832000000,"authorName":"masutaka"},{"title":"自宅での samba の設定","content":"日本sambaユーザ会：http://www.samba.gr.jp/ を参考にして\nLinux から http://192.168.0.3:901/ へのアクセスは出来るようになった。\nlokkitから設定 =&gt; 901:tcp,139:tcp,138:udp,137:udp\n追記(2003-09-22):\nroot で &ldquo;smbpasswd -a masutaka&rdquo; を実行する必要があった。\nhttp://www5c.biglobe.ne.jp/~yamag/data/Soft/LinuxInstMemo.html#Samba 追記(2005-10-09):\nWindowsXP からの各ディレクトリの最初のアクセスだけ異常に遅かったが、\nSamba サーバ側でポート 80 を閉じていたことが原因だった。lokkitの設\n定を変更することで解決できた。\nhttp://www.samba.gr.jp/ml/article/samba-jp/msg14926.html  (1) root で lokkit を起動する。\n(2) Customize を押下\n(3) SSH, Telnet, WWW, FTP にチェックを入れる。\n(4) Other ports に swat:tcp,netbios-ssn:tcp,netbios-dgm:udp,netbios-ns:udp を記述\n(5) OK を 押下\n(6) OK を 押下\nこの設定は RedHat では /etc/sysconfig/ipchains に書き込まれる。\nDebian では /etc/default/lokkit に書き込まれる。\n/etc/services にポート番号とサービスの一覧がある。\n ","contentSnippet":"日本sambaユーザ会：http://www.samba.gr.jp/ を参考にしてLinux から http://192.168.0.3:901/ へのアクセスは出来るようになった。lokkitから設定 => 901:tcp,139:tcp,138:udp,137:udp追記(2003-09-22):root で “smbpasswd -a masutaka” を実行する必要があった。http://www5c.biglobe.ne.jp/~yamag/data/Soft/LinuxInstMemo.html#Samba 追記(2005-10-09):WindowsXP からの各ディレクトリの最初のアクセスだけ異常に遅かったが、Samba サーバ側でポート 80 を閉じていたことが原因だった。lokkitの設定を変更することで解決できた。http://www.samba.gr.jp/ml/article/samba-jp/msg14926.html  (1) root で lokkit を起動する。(2) Customize を押下(3) SSH, Telnet, WWW, FTP にチェックを入れる。(4) Other ports に swat:tcp,netbios-ssn:tcp,netbios-dgm:udp,netbios-ns:udp を記述(5) OK を 押下(6) OK を 押下この設定は RedHat では /etc/sysconfig/ipchains に書き込まれる。Debian では /etc/default/lokkit に書き込まれる。/etc/services にポート番号とサービスの一覧がある。","link":"https://masutaka.net/2003-07-21-1/","isoDate":"2003-07-21T00:00:00.000Z","dateMiliSeconds":1058745600000,"authorName":"masutaka"},{"title":"Let's NOTE W2 CF-W2AW1AXR の紹介ページ","content":"URL: http://panasonic.jp/pc/products/w2a/index.html URL: http://www.kakaku.com/prdsearch/detail.asp?ItemCD=002004&MakerCD=65&Product=Let%27s+NOTE+W2+CF%2DW2AW1AXR URL: http://pc.watch.impress.co.jp/docs/2003/0507/pana.htm ","contentSnippet":"URL: http://panasonic.jp/pc/products/w2a/index.html URL: http://www.kakaku.com/prdsearch/detail.asp?ItemCD=002004&MakerCD=65&Product=Let%27s+NOTE+W2+CF%2DW2AW1AXR URL: http://pc.watch.impress.co.jp/docs/2003/0507/pana.htm","link":"https://masutaka.net/2003-07-20-1/","isoDate":"2003-07-20T00:00:00.000Z","dateMiliSeconds":1058659200000,"authorName":"masutaka"},{"title":"XEmacs-21.4.14 のインストール","content":"*** XEmacs 本体のインストール ***\n|% ncftpget ftp.jp.xemacs.org . |&gt; /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-src.tar.gz |&gt; /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-info.tar.gz |&gt; /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-elc.tar.gz\n|% tar xvzf xemacs-21.4.13-src.tar.gz\n|% tar xvzf xemacs-21.4.13-info.tar.gz\n|% tar xvzf xemacs-21.4.13-elc.tar.gz\n|% cd xemacs-21.4.13\n|% ./configure &ndash;with-mule &ndash;with-wnn &ndash;with-xfs &ndash;without-canna &ndash;without-wnn6 &ndash;without-xim\n|% make\n|# make install\n*** package のインストール ***\n|% ncftpget ftp.jp.xemacs.org . |&gt; /pub/GNU/xemacs/packages/Sun-1.13-pkg.tar.gz |&gt; /pub/GNU/xemacs/packages/tramp-1.15-pkg.tar.gz |&gt; /pub/GNU/xemacs/packages/vc-cc-1.21-pkg.tar.gz |&gt; /pub/GNU/xemacs/packages/xemacs-mule-sumo-2003-06-29.tar.bz2 |&gt; /pub/GNU/xemacs/packages/xemacs-sumo-2003-06-29.tar.bz2\n|# tar xvjf xemacs-sumo-2003-06-29.tar.bz2 -C /usr/local/lib/xemacs\n|# tar xvjf xemacs-mule-sumo-2003-06-29.tar.bz2 -C /usr/local/lib/xemacs","contentSnippet":"*** XEmacs 本体のインストール ***|% ncftpget ftp.jp.xemacs.org . |> /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-src.tar.gz |> /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-info.tar.gz |> /pub/GNU/xemacs/xemacs-21.4/xemacs-21.4.13-elc.tar.gz|% tar xvzf xemacs-21.4.13-src.tar.gz|% tar xvzf xemacs-21.4.13-info.tar.gz|% tar xvzf xemacs-21.4.13-elc.tar.gz|% cd xemacs-21.4.13|% ./configure –with-mule –with-wnn –with-xfs –without-canna –without-wnn6 –without-xim|% make|# make install*** package のインストール ***|% ncftpget ftp.jp.xemacs.org . |> /pub/GNU/xemacs/packages/Sun-1.13-pkg.tar.gz |> /pub/GNU/xemacs/packages/tramp-1.15-pkg.tar.gz |> /pub/GNU/xemacs/packages/vc-cc-1.21-pkg.tar.gz |> /pub/GNU/xemacs/packages/xemacs-mule-sumo-2003-06-29.tar.bz2 |> /pub/GNU/xemacs/packages/xemacs-sumo-2003-06-29.tar.bz2|# tar xvjf xemacs-sumo-2003-06-29.tar.bz2 -C /usr/local/lib/xemacs|# tar xvjf xemacs-mule-sumo-2003-06-29.tar.bz2 -C /usr/local/lib/xemacs","link":"https://masutaka.net/2003-07-19-1/","isoDate":"2003-07-19T00:00:00.000Z","dateMiliSeconds":1058572800000,"authorName":"masutaka"},{"title":"unidiff 形式で diff する。","content":"% cvs diff -u [file] &gt; [file.patch]","contentSnippet":"% cvs diff -u [file] > [file.patch]","link":"https://masutaka.net/2003-07-13-1/","isoDate":"2003-07-13T00:00:00.000Z","dateMiliSeconds":1058054400000,"authorName":"masutaka"},{"title":"10進数=>16進数は前者を使った方が安定しているみたい。","content":"(string-to-number &#34;20&#34; 16) #=&gt; 32 (read (concat &#34;?\\\\x&#34; &#34;20&#34;)) #=&gt; 32 ","contentSnippet":"(string-to-number \"20\" 16) #=> 32 (read (concat \"?\\\\x\" \"20\")) #=> 32","link":"https://masutaka.net/2003-07-07-1/","isoDate":"2003-07-07T00:00:00.000Z","dateMiliSeconds":1057536000000,"authorName":"masutaka"},{"title":"オーデトワレ","content":"ローパ ケンゾー の プールオム (Eau de Toilette)","contentSnippet":"ローパ ケンゾー の プールオム (Eau de Toilette)","link":"https://masutaka.net/2003-07-06-1/","isoDate":"2003-07-06T00:00:00.000Z","dateMiliSeconds":1057449600000,"authorName":"masutaka"},{"title":"kakasi の本領発揮らしい","content":"% wget -q -O - http://pc.2ch.net/unix | kakasi -Ha -Ka -Ja -Ea -ka | w3m\n% rsh localhost | kakasi -u -Ha -Ka -Ja -Ea -ka","contentSnippet":"% wget -q -O - http://pc.2ch.net/unix | kakasi -Ha -Ka -Ja -Ea -ka | w3m% rsh localhost | kakasi -u -Ha -Ka -Ja -Ea -ka","link":"https://masutaka.net/2003-06-28-1/","isoDate":"2003-06-28T00:00:00.000Z","dateMiliSeconds":1056758400000,"authorName":"masutaka"},{"title":"foreach 文の使い方","content":"foreach file (*); if [ -d &ldquo;$file&rdquo; ]; then; ls -alFd $file; fi; end","contentSnippet":"foreach file (*); if [ -d “$file” ]; then; ls -alFd $file; fi; end","link":"https://masutaka.net/2003-06-26-1/","isoDate":"2003-06-26T00:00:00.000Z","dateMiliSeconds":1056585600000,"authorName":"masutaka"},{"title":"tcsh のコンパイル","content":"config_f.h を以下のように変更\n|#define NLS_CATALOGS\n|#define KANJI\n|#define DSPMBYTE\n|#define COLORCAT\nconfigure を実行\n|# ./configure\nMakefile を以下のように変更\n|CFLAGS = -O2\n|DFLAGS = -D_PATH_TCSHELL=&rsquo;&quot;${DESTBIN}/tcsh&quot;'\n|LDFLAGS=-s\nmake &amp; install\n|# make\n|# make install","contentSnippet":"config_f.h を以下のように変更|#define NLS_CATALOGS|#define KANJI|#define DSPMBYTE|#define COLORCATconfigure を実行|# ./configureMakefile を以下のように変更|CFLAGS = -O2|DFLAGS = -D_PATH_TCSHELL=’\"${DESTBIN}/tcsh\"'|LDFLAGS=-smake & install|# make|# make install","link":"https://masutaka.net/2003-06-25-2/","isoDate":"2003-06-25T01:00:00.000Z","dateMiliSeconds":1056502800000,"authorName":"masutaka"},{"title":"ハードコピー","content":"ImageMagick 付属の import コマンドで Window のハードコピーを取ることができる。","contentSnippet":"ImageMagick 付属の import コマンドで Window のハードコピーを取ることができる。","link":"https://masutaka.net/2003-06-25-1/","isoDate":"2003-06-25T00:00:00.000Z","dateMiliSeconds":1056499200000,"authorName":"masutaka"},{"title":"指定したサイズのファイルを作る。","content":"% mkfile 1M aaa\n% ls -l aaa\n-rw&mdash;&mdash;- 1 masutaka masutaka 1048576 Jun 20 09:36 aaa","contentSnippet":"% mkfile 1M aaa% ls -l aaa-rw——- 1 masutaka masutaka 1048576 Jun 20 09:36 aaa","link":"https://masutaka.net/2003-06-20-1/","isoDate":"2003-06-20T00:00:00.000Z","dateMiliSeconds":1056067200000,"authorName":"masutaka"},{"title":"大きなサイズのデータを lpr する時は","content":"WS から大きなデータをlprで流す時 lpr のオプションに -s をつけて、シンボ\nリックリンクにして送ってみてください。この場合、元ファイルを参照します\nので、消してはいけません。詳しくは &ldquo;man lpr&rdquo; でどうぞ。","contentSnippet":"WS から大きなデータをlprで流す時 lpr のオプションに -s をつけて、シンボリックリンクにして送ってみてください。この場合、元ファイルを参照しますので、消してはいけません。詳しくは “man lpr” でどうぞ。","link":"https://masutaka.net/2003-06-12-1/","isoDate":"2003-06-12T00:00:00.000Z","dateMiliSeconds":1055376000000,"authorName":"masutaka"},{"title":"予約ドメイン名","content":"メールアドレス等で初期値を持たせる場合など、テストやドキュメントに\n使用するドメインは予約ドメイン名として example.com が用意されています。\nURL: http://www.rfc-editor.org/rfc/rfc2606.txt また、.jp の場合でも、予約ドメインとしてリザーブされています。\nURL: http://jprs.jp/doc/rule/wideusejp-reserved.html ","contentSnippet":"メールアドレス等で初期値を持たせる場合など、テストやドキュメントに使用するドメインは予約ドメイン名として example.com が用意されています。URL: http://www.rfc-editor.org/rfc/rfc2606.txt また、.jp の場合でも、予約ドメインとしてリザーブされています。URL: http://jprs.jp/doc/rule/wideusejp-reserved.html","link":"https://masutaka.net/2003-06-08-1/","isoDate":"2003-06-08T00:00:00.000Z","dateMiliSeconds":1055030400000,"authorName":"masutaka"},{"title":"WindowsXP でのシェルの変更","content":"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\nを書き換える。とりあえず、この状態でも[Ctrl]+[Shift]+[Esc]でタスクマネージャが\n起動するので、何かあったときはそれで回避できる。","contentSnippet":"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shellを書き換える。とりあえず、この状態でも[Ctrl]+[Shift]+[Esc]でタスクマネージャが起動するので、何かあったときはそれで回避できる。","link":"https://masutaka.net/2003-06-07-1/","isoDate":"2003-06-07T00:00:00.000Z","dateMiliSeconds":1054944000000,"authorName":"masutaka"},{"title":"パスを直接指定して man する。","content":"% man -M /usr/local/man nkf","contentSnippet":"% man -M /usr/local/man nkf","link":"https://masutaka.net/2003-06-05-1/","isoDate":"2003-06-05T00:00:00.000Z","dateMiliSeconds":1054771200000,"authorName":"masutaka"},{"title":"シングルクォートで括れば、なんでも実行できるな。","content":"% emacs -q &ndash;no-site-file -batch -eval &lsquo;(message (getenv &ldquo;HOME&rdquo;))&rsquo;","contentSnippet":"% emacs -q –no-site-file -batch -eval ‘(message (getenv “HOME”))’","link":"https://masutaka.net/2003-05-26-2/","isoDate":"2003-05-26T01:00:00.000Z","dateMiliSeconds":1053910800000,"authorName":"masutaka"},{"title":"ppout と copy /b","content":"&ldquo;ppout $1&rdquo; と &ldquo;copy /b $1 prn:&rdquo; は同じ？","contentSnippet":"“ppout $1” と “copy /b $1 prn:” は同じ？","link":"https://masutaka.net/2003-05-26-1/","isoDate":"2003-05-26T00:00:00.000Z","dateMiliSeconds":1053907200000,"authorName":"masutaka"},{"title":"Becky! のセキュリティホール","content":"基本はこういうリンクをクリック且つ、mailto プロトコルが Becky! に関連づ\nけられているとヤバイんだが、\n|mailto:masutaka.net@gmail.com?X-Becky-Attachment=C:\\tmp\\clmemo_sjis.txt&amp;X-Becky-Action=send&amp;subject=End_of_the_life&amp;body=moudamepo\nこういうファイルをブラウザで表示且つ、mailto プロトコルがBecky! に関連づけ\nられている場合もヤバイみたい。\n|HTML メールを Becky! で表示させていると、メールを見た瞬間に&hellip;。\n(ver 2.05.11 以前の話。Ver1 は大丈夫だった。)","contentSnippet":"基本はこういうリンクをクリック且つ、mailto プロトコルが Becky! に関連づけられているとヤバイんだが、|mailto:masutaka.net@gmail.com?X-Becky-Attachment=C:\\tmp\\clmemo_sjis.txt&X-Becky-Action=send&subject=End_of_the_life&body=moudamepoこういうファイルをブラウザで表示且つ、mailto プロトコルがBecky! に関連づけられている場合もヤバイみたい。|HTML メールを Becky! で表示させていると、メールを見た瞬間に…。(ver 2.05.11 以前の話。Ver1 は大丈夫だった。)","link":"https://masutaka.net/2003-05-17-1/","isoDate":"2003-05-17T00:00:00.000Z","dateMiliSeconds":1053129600000,"authorName":"masutaka"},{"title":"エルダップ Lightweight Directory Access Protocol","content":"ディレクトリサーバにアクセスして、登録ユーザのメールアドレスを引っ張っ\nてくることができるらしい。このサービスを使えるようになったら、mew-ldap.elを使ってみたい。\nURL: http://www.imasy.or.jp/~gotoh/mew.html ","contentSnippet":"ディレクトリサーバにアクセスして、登録ユーザのメールアドレスを引っ張ってくることができるらしい。このサービスを使えるようになったら、mew-ldap.elを使ってみたい。URL: http://www.imasy.or.jp/~gotoh/mew.html","link":"https://masutaka.net/2003-05-13-1/","isoDate":"2003-05-13T00:00:00.000Z","dateMiliSeconds":1052784000000,"authorName":"masutaka"},{"title":"fetchmail","content":"fetchmail は、fetch する先のメールサーバから反応がないと、\nあきらめて自分で自分を終了する傾向にあるそうです。","contentSnippet":"fetchmail は、fetch する先のメールサーバから反応がないと、あきらめて自分で自分を終了する傾向にあるそうです。","link":"https://masutaka.net/2003-04-24-1/","isoDate":"2003-04-24T00:00:00.000Z","dateMiliSeconds":1051142400000,"authorName":"masutaka"},{"title":"unzip のインストール","content":"|% tar xvzf unzip550.tar.gz\n|% cd unzip-5.50\n|% make CC=gcc -f unix/Makefile sunos4\n|% make install","contentSnippet":"|% tar xvzf unzip550.tar.gz|% cd unzip-5.50|% make CC=gcc -f unix/Makefile sunos4|% make install","link":"https://masutaka.net/2003-04-16-3/","isoDate":"2003-04-16T02:00:00.000Z","dateMiliSeconds":1050458400000,"authorName":"masutaka"},{"title":"zip のインストール","content":"|% tar xvzf zip23.tar.gz\n|% cd zip-2.3\n|% make -f unix/Makefile generic_gcc\n|% make install","contentSnippet":"|% tar xvzf zip23.tar.gz|% cd zip-2.3|% make -f unix/Makefile generic_gcc|% make install","link":"https://masutaka.net/2003-04-16-2/","isoDate":"2003-04-16T01:00:00.000Z","dateMiliSeconds":1050454800000,"authorName":"masutaka"},{"title":"rxvt のインストール","content":"|% tar xvzf rxvt-2.6.4.tar.gz\n|% cd rxvt-2.6.4\n|% CFLAGS=-O2 ./configure &ndash;enable-kanji &ndash;enable-utmp\n|% make\n|% make clock\n|% make install","contentSnippet":"|% tar xvzf rxvt-2.6.4.tar.gz|% cd rxvt-2.6.4|% CFLAGS=-O2 ./configure –enable-kanji –enable-utmp|% make|% make clock|% make install","link":"https://masutaka.net/2003-04-16-1/","isoDate":"2003-04-16T00:00:00.000Z","dateMiliSeconds":1050451200000,"authorName":"masutaka"},{"title":"Mozilla が落ちる。","content":"以下のように起動しないと、Acrobat Reader Plugin が起動した時に Mozilla が落ちることがある。\n% LD_PRELOAD=/usr/lib/libXm.so mozilla","contentSnippet":"以下のように起動しないと、Acrobat Reader Plugin が起動した時に Mozilla が落ちることがある。% LD_PRELOAD=/usr/lib/libXm.so mozilla","link":"https://masutaka.net/2003-04-05-1/","isoDate":"2003-04-05T00:00:00.000Z","dateMiliSeconds":1049500800000,"authorName":"masutaka"},{"title":"文字列の置換 \"hogehoge,\" => \"hogehoge\"","content":"(let ((str &#34;hogehoge,&#34;) (regexp &#34;,$&#34;) (newstr &#34;&#34;))  (cond  ((eq emacs-major-version 21)  (replace-regexp-in-string regexp newstr str))  ((eq emacs-major-version 20)  (progn (string-match regexp str) (replace-match newstr nil nil str)))  ((eq emacs-major-version 19)  (progn (require &#39;dired) (dired-replace-in-string regexp newstr str))))) ","contentSnippet":"(let ((str \"hogehoge,\") (regexp \",$\") (newstr \"\"))  (cond  ((eq emacs-major-version 21)  (replace-regexp-in-string regexp newstr str))  ((eq emacs-major-version 20)  (progn (string-match regexp str) (replace-match newstr nil nil str)))  ((eq emacs-major-version 19)  (progn (require 'dired) (dired-replace-in-string regexp newstr str)))))","link":"https://masutaka.net/2003-04-04-1/","isoDate":"2003-04-04T00:00:00.000Z","dateMiliSeconds":1049414400000,"authorName":"masutaka"},{"title":"M-x list-load-path-shadows","content":"ファイル名がかぶっていて、loadされないファイルを表示する。","contentSnippet":"ファイル名がかぶっていて、loadされないファイルを表示する。","link":"https://masutaka.net/2003-03-31-1/","isoDate":"2003-03-31T00:00:00.000Z","dateMiliSeconds":1049068800000,"authorName":"masutaka"},{"title":"ドメイン情報検索","content":"% whois -h whois.crsnic.net xxx.com\t# &lt;= etc .com .net\n% whois -h whois.nic.ad.jp xxx.jp\t# &lt;= .jp","contentSnippet":"% whois -h whois.crsnic.net xxx.com\t# <= etc .com .net% whois -h whois.nic.ad.jp xxx.jp\t# <= .jp","link":"https://masutaka.net/2003-03-30-1/","isoDate":"2003-03-30T00:00:00.000Z","dateMiliSeconds":1048982400000,"authorName":"masutaka"},{"title":"ユーザ名とパスワード","content":"http://username:password@www.example.net/ でユーザ名とパスワードを打たなくても良くなる。\nw3mだと ~/.w3m/passwdに以下のように書く。\nmachine ホスト名\nport ポート番号\npath ローカルパート\nrealm realmの文字列\nlogin ユーザ名\npasswd パスワード","contentSnippet":"http://username:password@www.example.net/ でユーザ名とパスワードを打たなくても良くなる。w3mだと ~/.w3m/passwdに以下のように書く。machine ホスト名port ポート番号path ローカルパートrealm realmの文字列login ユーザ名passwd パスワード","link":"https://masutaka.net/2003-03-28-1/","isoDate":"2003-03-28T00:00:00.000Z","dateMiliSeconds":1048809600000,"authorName":"masutaka"},{"title":"C プログラマが知る C++ の性質","content":"http://www.hi-ho.ne.jp/hawk/cpp.html ","contentSnippet":"http://www.hi-ho.ne.jp/hawk/cpp.html","link":"https://masutaka.net/2003-03-27-1/","isoDate":"2003-03-27T00:00:00.000Z","dateMiliSeconds":1048723200000,"authorName":"masutaka"},{"title":"wc の使い方","content":"|% wc -l ~/.emacs\t# &lt;= 行数をカウント\n|1654 /home/masutaka/.emacs\n|% wc -c ~/.emacs\t# &lt;= バイト数をカウント(≒ &ldquo;du -sk [file]&rdquo;)\n|61938 /home/masutaka/.emacs\n※ 他にもカラム数や単語数、文字数などが分かる。","contentSnippet":"|% wc -l ~/.emacs\t# <= 行数をカウント|1654 /home/masutaka/.emacs|% wc -c ~/.emacs\t# <= バイト数をカウント(≒ “du -sk [file]”)|61938 /home/masutaka/.emacs※ 他にもカラム数や単語数、文字数などが分かる。","link":"https://masutaka.net/2003-03-26-1/","isoDate":"2003-03-26T00:00:00.000Z","dateMiliSeconds":1048636800000,"authorName":"masutaka"},{"title":"autoconf -- configure を作成するための Bourne シェルスクリプト群","content":"autoconf は configure.in から configure を\nautoheader は configure.in から config.h.in を\nautoscan はソースファイルから configure.in(configure.scan) を作ります。","contentSnippet":"autoconf は configure.in から configure をautoheader は configure.in から config.h.in をautoscan はソースファイルから configure.in(configure.scan) を作ります。","link":"https://masutaka.net/2003-03-17-1/","isoDate":"2003-03-17T00:00:00.000Z","dateMiliSeconds":1047859200000,"authorName":"masutaka"},{"title":"コンマ・ピリオドか句読点か？ ","content":"http://www.jaist.ac.jp/~tojo/orthography.html ","contentSnippet":"http://www.jaist.ac.jp/~tojo/orthography.html","link":"https://masutaka.net/2003-03-15-1/","isoDate":"2003-03-15T00:00:00.000Z","dateMiliSeconds":1047686400000,"authorName":"masutaka"},{"title":"関数の実体を表示する。","content":"(symbol-function &#39;MEW-TO) =&gt; (lambda nil (aref mew-vec 5)) ","contentSnippet":"(symbol-function 'MEW-TO) => (lambda nil (aref mew-vec 5))","link":"https://masutaka.net/2003-03-12-1/","isoDate":"2003-03-12T00:00:00.000Z","dateMiliSeconds":1047427200000,"authorName":"masutaka"},{"title":"zlib の make","content":"zlib.so* を生成するには、configure に `&ndash;shared&rsquo; オプションを付ければよい。","contentSnippet":"zlib.so* を生成するには、configure に `–shared’ オプションを付ければよい。","link":"https://masutaka.net/2003-03-10-1/","isoDate":"2003-03-10T00:00:00.000Z","dateMiliSeconds":1047254400000,"authorName":"masutaka"},{"title":"ar の使い方","content":" *.a で使われているオブジェクトを見る。\n|% ar -t *.a *.a で使われているオブジェクトを削除する。\n|% ar -d *.a [ModuleName] *.a で使われているオブジェクトを展開する。\n|% ar -x *.a  ","contentSnippet":"*.a で使われているオブジェクトを見る。|% ar -t *.a *.a で使われているオブジェクトを削除する。|% ar -d *.a [ModuleName] *.a で使われているオブジェクトを展開する。|% ar -x *.a","link":"https://masutaka.net/2003-03-07-2/","isoDate":"2003-03-07T01:00:00.000Z","dateMiliSeconds":1046998800000,"authorName":"masutaka"},{"title":"ライブラリの種類","content":"|.a\t=&gt; スタッティックライブラリ\n|.so, *.dll\t=&gt; ダイナミック(リンク)ライブラリ","contentSnippet":"|.a\t=> スタッティックライブラリ|.so, *.dll\t=> ダイナミック(リンク)ライブラリ","link":"https://masutaka.net/2003-03-07-1/","isoDate":"2003-03-07T00:00:00.000Z","dateMiliSeconds":1046995200000,"authorName":"masutaka"},{"title":"shar で圧縮する","content":"|% shar -z [dir or file] &gt; [output.shar]\n| ~~gzip圧縮する\n|sharが添付されているメールに `@&lsquo;マークを付け M-s(mew-summary-unshar)すると、\n|指定したディレクトリに解凍される。","contentSnippet":"|% shar -z [dir or file] > [output.shar]| ~~gzip圧縮する|sharが添付されているメールに `@‘マークを付け M-s(mew-summary-unshar)すると、|指定したディレクトリに解凍される。","link":"https://masutaka.net/2003-03-06-1/","isoDate":"2003-03-06T00:00:00.000Z","dateMiliSeconds":1046908800000,"authorName":"masutaka"},{"title":"play-sound()","content":" GNU-Emacs 21.2.93 だと音を鳴らせるようだ。  (play-sound &#39;(sound :file &#34;~/Mail/email.wav&#34;)) ","contentSnippet":"GNU-Emacs 21.2.93 だと音を鳴らせるようだ。  (play-sound '(sound :file \"~/Mail/email.wav\"))","link":"https://masutaka.net/2003-03-02-2/","isoDate":"2003-03-02T01:00:00.000Z","dateMiliSeconds":1046566800000,"authorName":"masutaka"},{"title":"call-process()","content":" call-process()でファイル名等を渡す時は expand-file-name()しなければならない。  ","contentSnippet":"call-process()でファイル名等を渡す時は expand-file-name()しなければならない。","link":"https://masutaka.net/2003-03-02-1/","isoDate":"2003-03-02T00:00:00.000Z","dateMiliSeconds":1046563200000,"authorName":"masutaka"},{"title":"In-Reply-To は複数の Message-Id を指定できる","content":"In-Reply-To:って複数の Message-Id:を指定できるみたい。知らなかった。[mew-dist 23085]\nEssays about Internet Mail [RFC2822] message-id = &#34;Message-ID:&#34; msg-id CRLF in-reply-to = &#34;In-Reply-To:&#34; 1*msg-id CRLF references = &#34;References:&#34; 1*msg-id CRLF 仮にccヘッダに、A、B、Cという３つのアドレスが書かれている\nメールがあった場合、それをメールソフトが「RCPT-To: A」と書いた\nメール、そして「RCPT-To: B」、さらに「RCPT-To: C」と書いた３つの\nメールに分け、それを順々に１通１通、配送プログラムに渡している。\n↓RFC822 に規定されているヘッダは全て説明しているのでいいかも。\nhttp://www2.luice.or.jp/~deai/backn/master/index.html ","contentSnippet":"In-Reply-To:って複数の Message-Id:を指定できるみたい。知らなかった。[mew-dist 23085]Essays about Internet Mail [RFC2822] message-id = \"Message-ID:\" msg-id CRLF in-reply-to = \"In-Reply-To:\" 1*msg-id CRLF references = \"References:\" 1*msg-id CRLF 仮にccヘッダに、A、B、Cという３つのアドレスが書かれているメールがあった場合、それをメールソフトが「RCPT-To: A」と書いたメール、そして「RCPT-To: B」、さらに「RCPT-To: C」と書いた３つのメールに分け、それを順々に１通１通、配送プログラムに渡している。↓RFC822 に規定されているヘッダは全て説明しているのでいいかも。http://www2.luice.or.jp/~deai/backn/master/index.html","link":"https://masutaka.net/2003-03-01-2/","isoDate":"2003-03-01T01:00:00.000Z","dateMiliSeconds":1046480400000,"authorName":"masutaka"},{"title":"enumの最後の `,`","content":"[mew-dist 18862]\nenumの最後の , は K&amp;R では &ldquo;ない&rdquo; のが正解。\nしかし、C99d に対応したコンパイラ(例: GCC 2.96以降)では OK。\n関連URL =&gt; プログラミング言語 C の新機能 http://seclan.dll.jp/c99d/c99d00.htm ","contentSnippet":"[mew-dist 18862]enumの最後の , は K&R では “ない” のが正解。しかし、C99d に対応したコンパイラ(例: GCC 2.96以降)では OK。関連URL => プログラミング言語 C の新機能 http://seclan.dll.jp/c99d/c99d00.htm","link":"https://masutaka.net/2003-03-01-1/","isoDate":"2003-03-01T00:00:00.000Z","dateMiliSeconds":1046476800000,"authorName":"masutaka"},{"title":"edebug-def-mark","content":"scratch バッファで edebug-defun() すると、edebug-def-mark がないと言われるときがある。","contentSnippet":"scratch バッファで edebug-defun() すると、edebug-def-mark がないと言われるときがある。","link":"https://masutaka.net/2003-02-28-1/","isoDate":"2003-02-28T00:00:00.000Z","dateMiliSeconds":1046390400000,"authorName":"masutaka"},{"title":"補完テーブルを作り直す","content":"hash -r","contentSnippet":"hash -r","link":"https://masutaka.net/2003-02-25-1/","isoDate":"2003-02-25T00:00:00.000Z","dateMiliSeconds":1046131200000,"authorName":"masutaka"},{"title":"「このいいソフト。」 => 「このソフトはいい。」","content":"(query-replace-regexp &#34;\\\\(いい\\\\|わるい\\\\)\\\\(.+?\\\\)。&#34; &#34;\\\\2は\\\\1。&#34;) ","contentSnippet":"(query-replace-regexp \"\\\\(いい\\\\|わるい\\\\)\\\\(.+?\\\\)。\" \"\\\\2は\\\\1。\")","link":"https://masutaka.net/2003-02-19-2/","isoDate":"2003-02-19T01:00:00.000Z","dateMiliSeconds":1045616400000,"authorName":"masutaka"},{"title":"パイプとリダイレクト","content":"|&amp;' は 2&gt;&amp;1 |&rsquo; の省略形だが、&gt;&amp; word' は &gt; word 2&gt;&amp;1&rsquo; の省略形ではない。","contentSnippet":"|&' は 2>&1 |’ の省略形だが、>& word' は > word 2>&1’ の省略形ではない。","link":"https://masutaka.net/2003-02-19-1/","isoDate":"2003-02-19T00:00:00.000Z","dateMiliSeconds":1045612800000,"authorName":"masutaka"},{"title":"shell-mode でパスワードが丸見えになってしまう","content":"プロンプトが出たら M-x send-invisible してパスワードを打つ。","contentSnippet":"プロンプトが出たら M-x send-invisible してパスワードを打つ。","link":"https://masutaka.net/2003-02-16-1/","isoDate":"2003-02-16T00:00:00.000Z","dateMiliSeconds":1045353600000,"authorName":"masutaka"},{"title":"プリントキュー","content":"/var/spool/printがプリントキューらしい。","contentSnippet":"/var/spool/printがプリントキューらしい。","link":"https://masutaka.net/2003-02-14-1/","isoDate":"2003-02-14T00:00:00.000Z","dateMiliSeconds":1045180800000,"authorName":"masutaka"},{"title":"animate.el","content":"M-x animate-birthday-present [Enter] マスタカ [Enter]\n;; *scratch* バッファで、以下をコピペ。最後の &#34;)&#34; の後ろで Ctrl-j (animate-string &#34;キタ━━━━━━(゜∀゜)━━━━━━ !!!!!&#34; 13 0) ","contentSnippet":"M-x animate-birthday-present [Enter] マスタカ [Enter];; *scratch* バッファで、以下をコピペ。最後の \")\" の後ろで Ctrl-j (animate-string \"キタ━━━━━━(゜∀゜)━━━━━━ !!!!!\" 13 0)","link":"https://masutaka.net/2003-02-08-1/","isoDate":"2003-02-08T00:00:00.000Z","dateMiliSeconds":1044662400000,"authorName":"masutaka"},{"title":"Mozilla プラグイン","content":"一般ユーザが pluginをインストールすると、~/.mozilla/pluginsに\nインストールされるみたい。知らなかった。","contentSnippet":"一般ユーザが pluginをインストールすると、~/.mozilla/pluginsにインストールされるみたい。知らなかった。","link":"https://masutaka.net/2003-02-07-2/","isoDate":"2003-02-07T01:00:00.000Z","dateMiliSeconds":1044579600000,"authorName":"masutaka"},{"title":"apropos-*","content":"M-x apropos-variable\nC-uをつけないと、全部の変数を見てくれないんだ。知らなかった。\n今まで、M-x describe-variable [RET] [TAB] して、C-sで検索していたよ..。\nM-x apropos-value\nところで、M-x apropos-value っていうのも見つけた。\nどうやら、変数の値を探してくれるようだ。スゲー","contentSnippet":"M-x apropos-variableC-uをつけないと、全部の変数を見てくれないんだ。知らなかった。今まで、M-x describe-variable [RET] [TAB] して、C-sで検索していたよ..。M-x apropos-valueところで、M-x apropos-value っていうのも見つけた。どうやら、変数の値を探してくれるようだ。スゲー","link":"https://masutaka.net/2003-02-07-1/","isoDate":"2003-02-07T00:00:00.000Z","dateMiliSeconds":1044576000000,"authorName":"masutaka"},{"title":"vnc -- UNIX から Windows を操作する","content":"vncviewerで PCの画面を Sunに表示できるみたい。\nでも、PCに vncserverをインストールする必要があるそうな。","contentSnippet":"vncviewerで PCの画面を Sunに表示できるみたい。でも、PCに vncserverをインストールする必要があるそうな。","link":"https://masutaka.net/2003-01-31-2/","isoDate":"2003-01-31T01:00:00.000Z","dateMiliSeconds":1043974800000,"authorName":"masutaka"},{"title":"kinput2 on Solaris9","content":"使い方は知らないけど、以下の設定で &ldquo;kinput2 -wnn &amp;&ldquo;が正常起動する。\nXFILESEARCHPATH=/usr/X11R6/lib/X11/app-defaults/Kinput2:$XFILESEARCHPATH","contentSnippet":"使い方は知らないけど、以下の設定で “kinput2 -wnn &“が正常起動する。XFILESEARCHPATH=/usr/X11R6/lib/X11/app-defaults/Kinput2:$XFILESEARCHPATH","link":"https://masutaka.net/2003-01-31-1/","isoDate":"2003-01-31T00:00:00.000Z","dateMiliSeconds":1043971200000,"authorName":"masutaka"},{"title":"SunOS への NFS 越しの flock","content":"やはり、メールサーバに SunOSを使っているのが問題なのかな？\nURL: http://www.tt.rim.or.jp/~canada/comp/cgi/tech/sunflock/ ","contentSnippet":"やはり、メールサーバに SunOSを使っているのが問題なのかな？URL: http://www.tt.rim.or.jp/~canada/comp/cgi/tech/sunflock/","link":"https://masutaka.net/2003-01-27-2/","isoDate":"2003-01-27T01:00:00.000Z","dateMiliSeconds":1043629200000,"authorName":"masutaka"},{"title":"Web サイトから日時をゲット","content":"|% w3m -dump_source www2.crl.go.jp/cgi-bin/JST.cgi | awk -F&quot; &lsquo;/Date.parse/ {print $2}&rsquo;","contentSnippet":"|% w3m -dump_source www2.crl.go.jp/cgi-bin/JST.cgi | awk -F\" ‘/Date.parse/ {print $2}’","link":"https://masutaka.net/2003-01-27-1/","isoDate":"2003-01-27T00:00:00.000Z","dateMiliSeconds":1043625600000,"authorName":"masutaka"},{"title":"マクロを展開してくれる","content":"(cl-macroexpand &lsquo;(when (boundp &rsquo;emcws-version) emcws-version))\n=&gt; (if (boundp (quote emcws-version)) (progn emcws-version))","contentSnippet":"(cl-macroexpand ‘(when (boundp ’emcws-version) emcws-version))=> (if (boundp (quote emcws-version)) (progn emcws-version))","link":"https://masutaka.net/2003-01-25-1/","isoDate":"2003-01-25T00:00:00.000Z","dateMiliSeconds":1043452800000,"authorName":"masutaka"},{"title":"mpg123","content":"「ジェイベルズ」というウィルスが、不正な mp3ヘッダを利用して、\nホームディレクトリを空にしてしまうらしいので、RedHat7.2附属の mpg321に変更した。\nインストールしても、mpg123が mpg321へのシンボリックリンクになるので操作上は問題ない。\nどうやら、mpg123 0.59rおよび 0.59sの開発ブランチでバッファオーバフローを起こすらしい。\n感染はしないので、ウィルスではなく、正しくはトロイの木馬だそうだ。\nちなみに、mpg123でインストールしてあったファイルは以下のとおり。\n/usr/local/bin/mpg123\n/usr/local/man/man1/mpg123.1\nURL: http://it.nikkei.co.jp/it/news/index.cfm?i=2003011904094j0 ","contentSnippet":"「ジェイベルズ」というウィルスが、不正な mp3ヘッダを利用して、ホームディレクトリを空にしてしまうらしいので、RedHat7.2附属の mpg321に変更した。インストールしても、mpg123が mpg321へのシンボリックリンクになるので操作上は問題ない。どうやら、mpg123 0.59rおよび 0.59sの開発ブランチでバッファオーバフローを起こすらしい。感染はしないので、ウィルスではなく、正しくはトロイの木馬だそうだ。ちなみに、mpg123でインストールしてあったファイルは以下のとおり。/usr/local/bin/mpg123/usr/local/man/man1/mpg123.1URL: http://it.nikkei.co.jp/it/news/index.cfm?i=2003011904094j0","link":"https://masutaka.net/2003-01-21-1/","isoDate":"2003-01-21T00:00:00.000Z","dateMiliSeconds":1043107200000,"authorName":"masutaka"},{"title":"ChangeLog メモに日本語の曜日を入れる","content":"http://namazu.org/~satoru/diary/ のコードを ちょこちょこといじって\nこのファイルに日本語の曜日を入れるようにしてみた。\n色付けが気に食わないので add-log.el見て直そうとしたけど、めんどくさそうだ。","contentSnippet":"http://namazu.org/~satoru/diary/ のコードを ちょこちょこといじってこのファイルに日本語の曜日を入れるようにしてみた。色付けが気に食わないので add-log.el見て直そうとしたけど、めんどくさそうだ。","link":"https://masutaka.net/2003-01-16-1/","isoDate":"2003-01-16T00:00:00.000Z","dateMiliSeconds":1042675200000,"authorName":"masutaka"},{"title":"Intlfonts","content":"豆腐はなくなったけど、肝心の日本語がボールドになってしまう。\n% tar xvzf intlfonts-1.3.tar.gz\n% cd intlfonts-1.3\n% ./configure &ndash;with-fontdir=/usr/X11R6/lib/X11/fonts/intlfonts &ndash;enable-compress=compress &ndash;with-pcf=yes &ndash;with-bdf=no\nmake install % xset +fp /usr/X11R6/lib/X11/fonts/intlfonts\nURL: http://www.tgs.gr.jp/bsdi/software/intlfonts/ ","contentSnippet":"豆腐はなくなったけど、肝心の日本語がボールドになってしまう。% tar xvzf intlfonts-1.3.tar.gz% cd intlfonts-1.3% ./configure –with-fontdir=/usr/X11R6/lib/X11/fonts/intlfonts –enable-compress=compress –with-pcf=yes –with-bdf=nomake install % xset +fp /usr/X11R6/lib/X11/fonts/intlfontsURL: http://www.tgs.gr.jp/bsdi/software/intlfonts/","link":"https://masutaka.net/2003-01-11-2/","isoDate":"2003-01-11T01:00:00.000Z","dateMiliSeconds":1042246800000,"authorName":"masutaka"},{"title":"Mozilla 高速化","content":"user.jsに以下を追加。\nuser_pref(&ldquo;nglayout.initialpaint.delay&rdquo;, 0);","contentSnippet":"user.jsに以下を追加。user_pref(“nglayout.initialpaint.delay”, 0);","link":"https://masutaka.net/2003-01-11-1/","isoDate":"2003-01-11T00:00:00.000Z","dateMiliSeconds":1042243200000,"authorName":"masutaka"},{"title":"トライグラフ","content":"|warning: 6 trigraph(s) encountered\n??で始まる文字列はプリプロセッサによって置換される可能性がある。K&amp;R P287参照。","contentSnippet":"|warning: 6 trigraph(s) encountered??で始まる文字列はプリプロセッサによって置換される可能性がある。K&R P287参照。","link":"https://masutaka.net/2003-01-07-1/","isoDate":"2003-01-07T00:00:00.000Z","dateMiliSeconds":1041897600000,"authorName":"masutaka"},{"title":"glib","content":"|GLIB は Cプログラミングに便利な関数を集めたライブラリである。元々\n|は GUIツールキット GTK+ のために開発されたが、現在では汎用的なライ\n|ブラリとして GTK+ 以外のソフトウェアでも広く利用されている。私は、\n|伸縮可能な配列、連結リスト、ハッシュテーブルといったデータ構造をオ\n|ブジェクト指向の API で扱える点が気に入って使っている。\nURL: http://namazu.org/~satoru/unimag/9/ ","contentSnippet":"|GLIB は Cプログラミングに便利な関数を集めたライブラリである。元々|は GUIツールキット GTK+ のために開発されたが、現在では汎用的なライ|ブラリとして GTK+ 以外のソフトウェアでも広く利用されている。私は、|伸縮可能な配列、連結リスト、ハッシュテーブルといったデータ構造をオ|ブジェクト指向の API で扱える点が気に入って使っている。URL: http://namazu.org/~satoru/unimag/9/","link":"https://masutaka.net/2002-12-22-1/","isoDate":"2002-12-22T00:00:00.000Z","dateMiliSeconds":1040515200000,"authorName":"masutaka"},{"title":"ChangeLog メモについてのいろいろな説明","content":"URL: http://pop-club.hp.infoseek.co.jp/emacs/changelog.html ","contentSnippet":"URL: http://pop-club.hp.infoseek.co.jp/emacs/changelog.html","link":"https://masutaka.net/2002-12-19-1/","isoDate":"2002-12-19T00:00:00.000Z","dateMiliSeconds":1040256000000,"authorName":"masutaka"},{"title":"マクロ展開","content":"|リージョン内のテキストに対してCプリプロセッサを実行し, マクロ呼び\n|出しを展開した結果を表示する（`c-macro-expand&rsquo;）. リージョンのま\n|えにあるテキストにマクロ定義があることもあるので, それらもプリプ\n|ロセッサに渡されるが, その部分の出力は表示しない.\n|マクロを用いたCのコードをデバッグするとき, どのようにマクロが展開\n|されるか正確に理解するのが難しいことがある. このコマンドを使えば,\n|マクロ展開のことを考える必要はない. 展開結果を目にすることができる.\n|;; Solarisだと、/lib/cppは存在しないので、以下を設定する。\n|(setq c-macro-preprocessor &ldquo;cpp -C&rdquo;)","contentSnippet":"|リージョン内のテキストに対してCプリプロセッサを実行し, マクロ呼び|出しを展開した結果を表示する（`c-macro-expand’）. リージョンのま|えにあるテキストにマクロ定義があることもあるので, それらもプリプ|ロセッサに渡されるが, その部分の出力は表示しない.|マクロを用いたCのコードをデバッグするとき, どのようにマクロが展開|されるか正確に理解するのが難しいことがある. このコマンドを使えば,|マクロ展開のことを考える必要はない. 展開結果を目にすることができる.|;; Solarisだと、/lib/cppは存在しないので、以下を設定する。|(setq c-macro-preprocessor “cpp -C”)","link":"https://masutaka.net/2002-12-14-1/","isoDate":"2002-12-14T00:00:00.000Z","dateMiliSeconds":1039824000000,"authorName":"masutaka"},{"title":"PCから Solarisにリモートログインできるようにした","content":"これで Windows 上で sys を動かすことができる。さらに gnuclient を使えば、\nSolaris で動いている Emacs を表示＆操作できる。完璧。\n問題は、PC のキーボードが日本語キーボードな点か。","contentSnippet":"これで Windows 上で sys を動かすことができる。さらに gnuclient を使えば、Solaris で動いている Emacs を表示＆操作できる。完璧。問題は、PC のキーボードが日本語キーボードな点か。","link":"https://masutaka.net/2002-12-12-2/","isoDate":"2002-12-12T01:00:00.000Z","dateMiliSeconds":1039654800000,"authorName":"masutaka"},{"title":"いつも octal を使うので、忘れないように覚え書き","content":"% find $HOME -exec chmod go-w {} ;\t# &lt;= chmod -R go-w $HOME","contentSnippet":"% find $HOME -exec chmod go-w {} ;\t# <= chmod -R go-w $HOME","link":"https://masutaka.net/2002-12-12-1/","isoDate":"2002-12-12T00:00:00.000Z","dateMiliSeconds":1039651200000,"authorName":"masutaka"},{"title":"表と裏が違うかどうかだけをチェックする","content":"% cvs status 2&gt;&amp;1 | grep ^File | grep -v Up-to-date\nor\n% cvs -n update","contentSnippet":"% cvs status 2>&1 | grep ^File | grep -v Up-to-dateor% cvs -n update","link":"https://masutaka.net/2002-11-28-1/","isoDate":"2002-11-28T00:00:00.000Z","dateMiliSeconds":1038441600000,"authorName":"masutaka"},{"title":"文字コードについて by 2ch","content":"UTF-8 は言わば文字コードの一枚岩カーネル。世界中の文字をひとつの体系に。\nEUC は言わばマイクロカーネル。言語ごとにモジュール化。\nSJIS は言わば日本語だけの一枚岩。日本語と英数字が世界のすべて。","contentSnippet":"UTF-8 は言わば文字コードの一枚岩カーネル。世界中の文字をひとつの体系に。EUC は言わばマイクロカーネル。言語ごとにモジュール化。SJIS は言わば日本語だけの一枚岩。日本語と英数字が世界のすべて。","link":"https://masutaka.net/2002-11-23-1/","isoDate":"2002-11-23T00:00:00.000Z","dateMiliSeconds":1038009600000,"authorName":"masutaka"},{"title":"gnuserv Emacs-20.7 のためのパッチ by masutaka","content":"--- ./gnuserv-3.12.5-orig/gnuserv.el\t2002-09-13 21:20:00.000000000 +0900 +++ ./gnuserv-3.12.5/gnuserv.el\t2002-11-19 10:43:47.000000000 +0900 @@ -272,7 +272,10 @@  (make-variable-buffer-local &#39;gnuserv-minor-mode)  ;;(pushnew &#39;(gnuserv-minor-mode &#34;Server&#34;) minor-mode-alist  ;;\t:test &#39;equal) -(add-minor-mode &#39;gnuserv-minor-mode &#39;gnuserv-mode-line-string) +(if (fboundp &#39;add-minor-mode) + (add-minor-mode &#39;gnuserv-minor-mode &#39;gnuserv-mode-line-string) + (require &#39;alist) + (set-alist &#39;minor-mode-alist &#39;gnuserv-minor-mode (list gnuserv-mode-line-string)))    ;; Sample gnuserv-frame functions ","contentSnippet":"--- ./gnuserv-3.12.5-orig/gnuserv.el\t2002-09-13 21:20:00.000000000 +0900 +++ ./gnuserv-3.12.5/gnuserv.el\t2002-11-19 10:43:47.000000000 +0900 @@ -272,7 +272,10 @@  (make-variable-buffer-local 'gnuserv-minor-mode)  ;;(pushnew '(gnuserv-minor-mode \"Server\") minor-mode-alist  ;;\t:test 'equal) -(add-minor-mode 'gnuserv-minor-mode 'gnuserv-mode-line-string) +(if (fboundp 'add-minor-mode) + (add-minor-mode 'gnuserv-minor-mode 'gnuserv-mode-line-string) + (require 'alist) + (set-alist 'minor-mode-alist 'gnuserv-minor-mode (list gnuserv-mode-line-string)))    ;; Sample gnuserv-frame functions","link":"https://masutaka.net/2002-11-19-1/","isoDate":"2002-11-19T00:00:00.000Z","dateMiliSeconds":1037664000000,"authorName":"masutaka"},{"title":"環境変数 CYGWIN","content":"CYGWIN ntsec smbntsec glob\n「ntsec」\nWindows NT/2000/XPのセキュリティモデルを利用して\nUNIX風のファイルとプロセスに対するパーミッション設定を実現するもの。\nただしファイルセキュリティはNTFS上でしか動作しないので、\nFAT32上でCygwinを使う場合やWindows 9x系の場合は必要ない。\n「smbntsec」\n共有フォルダ(Sambaドライブも含む)でも「ntsec」を有効する設定だが、\nもしトラブルが起きるようであれば「nosmbntsec」と変更しよう。\n「glob」\nUNIXスタイルのファイルワイルドカード文字をコマンドプロンプトからでも\n有効にするというもの。あらかじめ初期設定で有効になっているが、\nここでは明示化するために指定している。\nURL: http://pcweb.mycom.co.jp/special/2002/cygwin/ ","contentSnippet":"CYGWIN ntsec smbntsec glob「ntsec」Windows NT/2000/XPのセキュリティモデルを利用してUNIX風のファイルとプロセスに対するパーミッション設定を実現するもの。ただしファイルセキュリティはNTFS上でしか動作しないので、FAT32上でCygwinを使う場合やWindows 9x系の場合は必要ない。「smbntsec」共有フォルダ(Sambaドライブも含む)でも「ntsec」を有効する設定だが、もしトラブルが起きるようであれば「nosmbntsec」と変更しよう。「glob」UNIXスタイルのファイルワイルドカード文字をコマンドプロンプトからでも有効にするというもの。あらかじめ初期設定で有効になっているが、ここでは明示化するために指定している。URL: http://pcweb.mycom.co.jp/special/2002/cygwin/","link":"https://masutaka.net/2002-11-16-1/","isoDate":"2002-11-16T00:00:00.000Z","dateMiliSeconds":1037404800000,"authorName":"masutaka"},{"title":"マクロ行末の '' を挿入","content":"&ldquo;C-c C-\\ (M-x c-backslash-region)&ldquo;で、リージョンの行末に &lsquo;'を挿入する。\nインデントも揃えてくれるのでいい感じ。\n↑この操作の後に (query-replace &ldquo;\\^J&rdquo; &ldquo;/* */^J&rdquo; nil nil nil)を\n実行すれば、行末にインデントが整ったコメントが出現する。","contentSnippet":"“C-c C-\\ (M-x c-backslash-region)“で、リージョンの行末に ‘'を挿入する。インデントも揃えてくれるのでいい感じ。↑この操作の後に (query-replace “\\^J” “/* */^J” nil nil nil)を実行すれば、行末にインデントが整ったコメントが出現する。","link":"https://masutaka.net/2002-11-08-2/","isoDate":"2002-11-08T01:00:00.000Z","dateMiliSeconds":1036717200000,"authorName":"masutaka"},{"title":"バイトコンパイルの互換性","content":"from [mew-dist 22212]\n Emacs 20でバイトコンパイルしたファイルを\nEmacs 21で使えない場合がある理由って何でしたっけ。\n通常は、古いバージョンのEmacsでバイトコンパイルしたファイルは新し\nいバージョンのEmacsでも使えるのだけど、Emacs 21ではミニバッファ関\n連で互換性を損なう変更があったから、かな。\n ","contentSnippet":"from [mew-dist 22212] Emacs 20でバイトコンパイルしたファイルをEmacs 21で使えない場合がある理由って何でしたっけ。通常は、古いバージョンのEmacsでバイトコンパイルしたファイルは新しいバージョンのEmacsでも使えるのだけど、Emacs 21ではミニバッファ関連で互換性を損なう変更があったから、かな。","link":"https://masutaka.net/2002-11-08-1/","isoDate":"2002-11-08T00:00:00.000Z","dateMiliSeconds":1036713600000,"authorName":"masutaka"},{"title":"ソフト使用レビュー","content":"|** X-cite(メール引用ユーティリテイ) **\n|&ldquo;名前&gt;&ldquo;で引用しない人が多いので、使ってもあんまり意味ない。\n|\n|** Wanderlust **\n|IMAPは、PCで Becky!などでメールを取り込む人にはいいかもしれない。\n|自分みたいに Windowsでメール見るときも Tera-term使う人には向かないかも。","contentSnippet":"|** X-cite(メール引用ユーティリテイ) **|“名前>“で引用しない人が多いので、使ってもあんまり意味ない。||** Wanderlust **|IMAPは、PCで Becky!などでメールを取り込む人にはいいかもしれない。|自分みたいに Windowsでメール見るときも Tera-term使う人には向かないかも。","link":"https://masutaka.net/2002-10-29-1/","isoDate":"2002-10-29T00:00:00.000Z","dateMiliSeconds":1035849600000,"authorName":"masutaka"},{"title":"xqbiff を $HOME にインストールした","content":"% LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib\n% LDFLAGS=&quot;-s -R/usr/local/lib&quot; ./configure &ndash;prefix=$HOME/local &ndash;disable-imlib\n% make\n% make install\n% cp xqbiff.jman ~/local/man/man1/xqbiff.1\n% rm -rf ~/local/share/xqbiff\n% cp -r image ~/local/share/xqbiff","contentSnippet":"% LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib% LDFLAGS=\"-s -R/usr/local/lib\" ./configure –prefix=$HOME/local –disable-imlib% make% make install% cp xqbiff.jman ~/local/man/man1/xqbiff.1% rm -rf ~/local/share/xqbiff% cp -r image ~/local/share/xqbiff","link":"https://masutaka.net/2002-10-18-1/","isoDate":"2002-10-18T00:00:00.000Z","dateMiliSeconds":1034899200000,"authorName":"masutaka"},{"title":"rail を $HOME にインストールした","content":"% make EMACS=emcws-20.7 DEST=$HOME/local/share/elisp/rail distclean all\n% make EMACS=emcws-20.7 DEST=$HOME/local/share/elisp/rail install","contentSnippet":"% make EMACS=emcws-20.7 DEST=$HOME/local/share/elisp/rail distclean all% make EMACS=emcws-20.7 DEST=$HOME/local/share/elisp/rail install","link":"https://masutaka.net/2002-10-15-1/","isoDate":"2002-10-15T00:00:00.000Z","dateMiliSeconds":1034640000000,"authorName":"masutaka"},{"title":"at, batch - 指定した時刻にコマンドを実行","content":"1time-crontabみたいなもの。sleep &lt; at &lt; crontab てな感じかな？","contentSnippet":"1time-crontabみたいなもの。sleep < at < crontab てな感じかな？","link":"https://masutaka.net/2002-10-08-2/","isoDate":"2002-10-08T01:00:00.000Z","dateMiliSeconds":1034038800000,"authorName":"masutaka"},{"title":"lpr の使い方","content":"Unixのシェルからだと\n|% lpr -Pxxx.xxx.xxx.xxx:lp file名\nWindowsNT、2000などでは、\n|&gt; lpr -Sxxx.xxx.xxx.xxx -Plp file名","contentSnippet":"Unixのシェルからだと|% lpr -Pxxx.xxx.xxx.xxx:lp file名WindowsNT、2000などでは、|> lpr -Sxxx.xxx.xxx.xxx -Plp file名","link":"https://masutaka.net/2002-10-08-1/","isoDate":"2002-10-08T00:00:00.000Z","dateMiliSeconds":1034035200000,"authorName":"masutaka"},{"title":"電子メールの書式","content":"電子メールの書式は RFC822 で定義されています。\n改定版は RFC2822で、RFC822は obsoleteとなりました。\nURL: http://www.mew.org/Newsletters/1.html ","contentSnippet":"電子メールの書式は RFC822 で定義されています。改定版は RFC2822で、RFC822は obsoleteとなりました。URL: http://www.mew.org/Newsletters/1.html","link":"https://masutaka.net/2002-10-03-1/","isoDate":"2002-10-03T00:00:00.000Z","dateMiliSeconds":1033603200000,"authorName":"masutaka"},{"title":"Mew で日本語 Subject の検索をする","content":"(setq mew-prog-vgrep &#34;mg&#34;) (setq mew-prog-vgrep-opts &#39;(&#34;-j&#34; &#34;jis&#34; &#34;-l&#34; &#34;-e&#34; &#34;-x&#34; &#34;&amp;mime&#34;)) というのを ~/.mew.el に書いて\n C-u / C-m Subject:.*ほげほげ C-m\nなどとするとできます。\n 追記(2009-05-24):\nMew 4.2.53 から、mew-prog-vgrep と mew-prog-vgrep-opts は削除されま\nした。代わりに以下の設定をしてください。検索方法の詳細は、Info の\nsearch と condition の項をご覧下さい。\n(setq mew-prog-grep &#34;mg&#34;) (setq mew-prog-grep-opts &#39;(&#34;-j&#34; &#34;jis&#34; &#34;-l&#34; &#34;-e&#34; &#34;-x&#34; &#34;&amp;mime&#34;)) ただ、上記の方法だと ?' や /&rsquo; の時に常に mg を使うことになってし\nまいます。それが嫌な人は上の設定はしないで、以下の設定をしてください。\n(setq mew-input-pick-command-hist &#39;(&#34;mg -l -jjis -x&amp;mime -e &#34;)) ?' や /&rsquo; の後、何も入力せずに Enter すると\n Cmd opts pattern: grep -l -e","contentSnippet":"(setq mew-prog-vgrep \"mg\") (setq mew-prog-vgrep-opts '(\"-j\" \"jis\" \"-l\" \"-e\" \"-x\" \"&mime\")) というのを ~/.mew.el に書いて C-u / C-m Subject:.*ほげほげ C-mなどとするとできます。 追記(2009-05-24):Mew 4.2.53 から、mew-prog-vgrep と mew-prog-vgrep-opts は削除されました。代わりに以下の設定をしてください。検索方法の詳細は、Info のsearch と condition の項をご覧下さい。(setq mew-prog-grep \"mg\") (setq mew-prog-grep-opts '(\"-j\" \"jis\" \"-l\" \"-e\" \"-x\" \"&mime\")) ただ、上記の方法だと ?' や /’ の時に常に mg を使うことになってしまいます。それが嫌な人は上の設定はしないで、以下の設定をしてください。(setq mew-input-pick-command-hist '(\"mg -l -jjis -x&mime -e \")) ?' や /’ の後、何も入力せずに Enter すると Cmd opts pattern: grep -l -e","link":"https://masutaka.net/2002-10-01-2/","isoDate":"2002-10-01T01:00:00.000Z","dateMiliSeconds":1033434000000,"authorName":"masutaka"},{"title":"外部変数のアドレスが決まるタイミング","content":"static な外部変数はコンパイル時、\nextern な外部変数はリンク時にアドレスが決定される。","contentSnippet":"static な外部変数はコンパイル時、extern な外部変数はリンク時にアドレスが決定される。","link":"https://masutaka.net/2002-10-01-1/","isoDate":"2002-10-01T00:00:00.000Z","dateMiliSeconds":1033430400000,"authorName":"masutaka"},{"title":"デュアルブートの場合の Windows 領域のマウント","content":"/etc/fstab に以下を追加した。\n|/dev/hda1\t/mnt/win\tvfat\tdefaults,conv=b 0 0","contentSnippet":"/etc/fstab に以下を追加した。|/dev/hda1\t/mnt/win\tvfat\tdefaults,conv=b 0 0","link":"https://masutaka.net/2002-09-29-2/","isoDate":"2002-09-29T01:00:00.000Z","dateMiliSeconds":1033261200000,"authorName":"masutaka"},{"title":"lopster のポート","content":"ポートは 6699 だけを使うようだ。","contentSnippet":"ポートは 6699 だけを使うようだ。","link":"https://masutaka.net/2002-09-29-1/","isoDate":"2002-09-29T00:00:00.000Z","dateMiliSeconds":1033257600000,"authorName":"masutaka"},{"title":"wu-ftpd の設定","content":"|/etc/xinetd.conf:13\n|# 2002.09.23 masutaka\n|#only_from\t= localhost\n|\n|/etc/xinetd.d/wu-ftpd:14\n|# 2002.09.23 masutaka &ldquo;disable = yes&quot;で起動不可\n|disable\t= no\n|\n|/etc/ftpaccess の中の最後に以下を追加。\n|guestgroup hoge\n|\n|これでhogeグループユーザーはバッチリ仮想ルートになります。","contentSnippet":"|/etc/xinetd.conf:13|# 2002.09.23 masutaka|#only_from\t= localhost||/etc/xinetd.d/wu-ftpd:14|# 2002.09.23 masutaka “disable = yes\"で起動不可|disable\t= no||/etc/ftpaccess の中の最後に以下を追加。|guestgroup hoge||これでhogeグループユーザーはバッチリ仮想ルートになります。","link":"https://masutaka.net/2002-09-28-2/","isoDate":"2002-09-28T01:00:00.000Z","dateMiliSeconds":1033174800000,"authorName":"masutaka"},{"title":"alist","content":"「alist」 とは Association List の略で、\n&lsquo;((key1 . val1) (key2 . val2) (key3 . val3) &hellip;.)\nという形式を表す言葉で 特殊な形式の list 構造です。(by yuuji)","contentSnippet":"「alist」 とは Association List の略で、‘((key1 . val1) (key2 . val2) (key3 . val3) ….)という形式を表す言葉で 特殊な形式の list 構造です。(by yuuji)","link":"https://masutaka.net/2002-09-28-1/","isoDate":"2002-09-28T00:00:00.000Z","dateMiliSeconds":1033171200000,"authorName":"masutaka"},{"title":"PBM/PGM/PPM ファイル作成方法","content":"|ヘッダは、以下の形式。\n        マジックナンバー   画像幅 画像高   階調(PGMとPPMで必要)   &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;      ↓マジックナンバーと画像データの対応表         &mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-   P1   P2   P3   P4   P5   P6      階調は、8bit-&gt;255、4bit-&gt;15、2bit-&gt;3。   PBMの場合は必要なし。      P[BGP]Mファイルを一番簡単に作製する方法は      % cat head   P5   6896 4848   255      のようなファイルを作っておき、      % cat head [rawファイル] &gt; [pgmファイル]      とかすればよい。    ","contentSnippet":"|ヘッダは、以下の形式。        マジックナンバー   画像幅 画像高   階調(PGMとPPMで必要)   ———————————–      ↓マジックナンバーと画像データの対応表         —+——————————-   P1   P2   P3   P4   P5   P6      階調は、8bit->255、4bit->15、2bit->3。   PBMの場合は必要なし。      P[BGP]Mファイルを一番簡単に作製する方法は      % cat head   P5   6896 4848   255      のようなファイルを作っておき、      % cat head [rawファイル] > [pgmファイル]      とかすればよい。","link":"https://masutaka.net/2002-09-26-3/","isoDate":"2002-09-26T02:00:00.000Z","dateMiliSeconds":1033005600000,"authorName":"masutaka"},{"title":"Palm標準ソフト","content":"| Dict.prc\t辞書管理ソフト\n| EiwaS.pdb\t英和辞書データ(中)\n| EiwaT.pdb\t英和辞書データ(小)\n| Giraffe.prc\tゲーム：Graffiti練習ゲーム\n| Hardball.prc\tゲーム：ブロック崩し\n| Minehunt.prc\tゲーム：マインスイーパー\n| padhtall.prc*\t通信関係のソフト\n| Puzzle.prc\tゲーム：パズル\n| serircom.prc*\t赤外線利用ソフト\n| Subhunt.prc\tゲーム：魚雷ゲーム\n| syncplane.prc*\tシンクロナイズのソフト\n| WaeiS.pdb\t和英辞書データ(中)\n| WaeiT.pdb\t和英辞書データ(小)\n| (*は初めのHotsyncの時に自動インストールされます)","contentSnippet":"| Dict.prc\t辞書管理ソフト| EiwaS.pdb\t英和辞書データ(中)| EiwaT.pdb\t英和辞書データ(小)| Giraffe.prc\tゲーム：Graffiti練習ゲーム| Hardball.prc\tゲーム：ブロック崩し| Minehunt.prc\tゲーム：マインスイーパー| padhtall.prc*\t通信関係のソフト| Puzzle.prc\tゲーム：パズル| serircom.prc*\t赤外線利用ソフト| Subhunt.prc\tゲーム：魚雷ゲーム| syncplane.prc*\tシンクロナイズのソフト| WaeiS.pdb\t和英辞書データ(中)| WaeiT.pdb\t和英辞書データ(小)| (*は初めのHotsyncの時に自動インストールされます)","link":"https://masutaka.net/2002-09-26-2/","isoDate":"2002-09-26T01:00:00.000Z","dateMiliSeconds":1033002000000,"authorName":"masutaka"},{"title":"Dynabook PA-DB70P5MC 奨励 CD-RW/CD-R メディア","content":"|【CD-RW】\n|三菱化学 (株)、リコー (株)\n|\n|【CD-R】\n|太陽誘電 (株)、TDK (株)、三井化学 (株)、三菱化学 (株)、リコー (株)、日立マクセル (株)","contentSnippet":"|【CD-RW】|三菱化学 (株)、リコー (株)||【CD-R】|太陽誘電 (株)、TDK (株)、三井化学 (株)、三菱化学 (株)、リコー (株)、日立マクセル (株)","link":"https://masutaka.net/2002-09-26-1/","isoDate":"2002-09-26T00:00:00.000Z","dateMiliSeconds":1032998400000,"authorName":"masutaka"},{"title":"CVS/RCS に使えるキーワードの種類","content":"&lsquo;man co&rsquo;で CVS/RCS に使えるキーワードの種類が分かる。(ex. $Author$)\nURL: http://www.linux.or.jp/JF/JFdocs/RCS.html ","contentSnippet":"‘man co’で CVS/RCS に使えるキーワードの種類が分かる。(ex. $Author$)URL: http://www.linux.or.jp/JF/JFdocs/RCS.html","link":"https://masutaka.net/2002-09-22-1/","isoDate":"2002-09-22T00:00:00.000Z","dateMiliSeconds":1032652800000,"authorName":"masutaka"},{"title":"hostのIPアドレス+αを得る","content":"% /usr/sbin/nslookup [hostname]","contentSnippet":"% /usr/sbin/nslookup [hostname]","link":"https://masutaka.net/2002-09-20-1/","isoDate":"2002-09-20T00:00:00.000Z","dateMiliSeconds":1032480000000,"authorName":"masutaka"},{"title":"up2date の接続先変更","content":"|# vi /etc/sysconfig/rhn/up2date\n|\n|※55行目付近\n|noSSLServerURL=http://www.rhns.redhat.com/XMLRPC\n| ↓\n|noSSLServerURL=http://rhns.jp.redhat.com/XMLRPC\n|\n|※67行目付近\n|serverURL=https://www.rhns.redhat.com/XMLRPC\n| ↓\n|serverURL=https://rhns.jp.redhat.com/XMLRPC","contentSnippet":"|# vi /etc/sysconfig/rhn/up2date||※55行目付近|noSSLServerURL=http://www.rhns.redhat.com/XMLRPC| ↓|noSSLServerURL=http://rhns.jp.redhat.com/XMLRPC||※67行目付近|serverURL=https://www.rhns.redhat.com/XMLRPC| ↓|serverURL=https://rhns.jp.redhat.com/XMLRPC","link":"https://masutaka.net/2002-09-19-1/","isoDate":"2002-09-19T00:00:00.000Z","dateMiliSeconds":1032393600000,"authorName":"masutaka"},{"title":"user.js に以下を書くことによって referer の送出を止める。","content":"user_pref(&ldquo;network.http.sendRefererHeader&rdquo;, 0);","contentSnippet":"user_pref(“network.http.sendRefererHeader”, 0);","link":"https://masutaka.net/2002-09-18-1/","isoDate":"2002-09-18T00:00:00.000Z","dateMiliSeconds":1032307200000,"authorName":"masutaka"},{"title":"拡張子変更","content":" *.aaa を *.bbb に一発で変える方法教えて下さい。\nmv *.aaa *.bbb じゃ出来ないです。\nrename aaa bbb *.aaa\nでいいじゃん\n ","contentSnippet":"*.aaa を *.bbb に一発で変える方法教えて下さい。mv *.aaa *.bbb じゃ出来ないです。rename aaa bbb *.aaaでいいじゃん","link":"https://masutaka.net/2002-09-14-1/","isoDate":"2002-09-14T00:00:00.000Z","dateMiliSeconds":1031961600000,"authorName":"masutaka"},{"title":"型変換","content":"from himi\n|C言語では、\n|\n|P +- P -&gt; I\n|P +- I -&gt; P\n|\n|が、型変換として保証されているので、pointerはpointerのまま、増減の分だけ\n|integerとして計算すればよろしい。(Pはpointer, Iは整数型)","contentSnippet":"from himi|C言語では、||P +- P -> I|P +- I -> P||が、型変換として保証されているので、pointerはpointerのまま、増減の分だけ|integerとして計算すればよろしい。(Pはpointer, Iは整数型)","link":"https://masutaka.net/2002-09-03-1/","isoDate":"2002-09-03T00:00:00.000Z","dateMiliSeconds":1031011200000,"authorName":"masutaka"},{"title":"ダンププログラム","content":"% od -x [ファイル名]","contentSnippet":"% od -x [ファイル名]","link":"https://masutaka.net/2002-08-22-1/","isoDate":"2002-08-22T00:00:00.000Z","dateMiliSeconds":1029974400000,"authorName":"masutaka"},{"title":"プリプロセスのみ","content":"gcc でプリプロセッサだけを走らせてコンパイルはしたくないときは\n&lsquo;-E&rsquo; オプションを付ければよい。","contentSnippet":"gcc でプリプロセッサだけを走らせてコンパイルはしたくないときは‘-E’ オプションを付ければよい。","link":"https://masutaka.net/2002-08-19-1/","isoDate":"2002-08-19T00:00:00.000Z","dateMiliSeconds":1029715200000,"authorName":"masutaka"},{"title":"httpサーバの種類を見る","content":"| % w3m -dump_head http://www.example.com/ | HTTP/1.1 200 OK\n| Server: Microsoft-IIS/4.0\n| Content-Location: http://www.example.com/index.htm | Date: Tue, 30 Jul 2002 15:29:36 GMT\n| Content-Type: text/html\n| Accept-Ranges: bytes\n| Last-Modified: Mon, 15 Jul 2002 02:27:42 GMT\n| ETag: &ldquo;40857732a72bc21:19a7&rdquo;\n| Content-Length: 7586","contentSnippet":"| % w3m -dump_head http://www.example.com/ | HTTP/1.1 200 OK| Server: Microsoft-IIS/4.0| Content-Location: http://www.example.com/index.htm | Date: Tue, 30 Jul 2002 15:29:36 GMT| Content-Type: text/html| Accept-Ranges: bytes| Last-Modified: Mon, 15 Jul 2002 02:27:42 GMT| ETag: “40857732a72bc21:19a7”| Content-Length: 7586","link":"https://masutaka.net/2002-07-31-1/","isoDate":"2002-07-31T00:00:00.000Z","dateMiliSeconds":1028073600000,"authorName":"masutaka"},{"title":"zsh-tips第？弾","content":"|which コマンド名 と &lsquo;=コマンド名&rsquo;は同じ\n|% ls -al =emacs\n|lrwxrwxrwx 1 root root 5 Apr 30 06:44 /usr/local/bin/emacs -&gt; emcws\n|\n|rm *.o~hoge.o で hoge.o 以外の全ての *.o が消せる。\n|\n|ワイルドカードの部分に &lt;ここから-ここまで&gt; のように\n|数値を指定すると数値的にその範囲内に当たるファイル名がマッチする。\n|{ここから..ここまで}との違いはエラーを出さないこと。\n|% ls -a &lt;1-10&gt;\n|1 2 4 5","contentSnippet":"|which コマンド名 と ‘=コマンド名’は同じ|% ls -al =emacs|lrwxrwxrwx 1 root root 5 Apr 30 06:44 /usr/local/bin/emacs -> emcws||rm *.o~hoge.o で hoge.o 以外の全ての *.o が消せる。||ワイルドカードの部分に <ここから-ここまで> のように|数値を指定すると数値的にその範囲内に当たるファイル名がマッチする。|{ここから..ここまで}との違いはエラーを出さないこと。|% ls -a <1-10>|1 2 4 5","link":"https://masutaka.net/2002-07-24-1/","isoDate":"2002-07-24T00:00:00.000Z","dateMiliSeconds":1027468800000,"authorName":"masutaka"},{"title":"略語あれこれ ","content":"usrは &ldquo;user services and resources&quot;の略らしい。\nRe は concerning の意、 re your letter of … , …の手紙に関して\n追記(2015-10-02):\nusr の情報源を書いていなかった。\nFilesystem Hierarchy Standard - Wikipedia 追記(2015-12-03):\nUSeR の略説も浮上してきた&hellip;。\n/usr は何の略か｜ビットログ  Unix系OSの “/usr” が “User SR” の略であるという裏付けは見つ\nかりませんでした。それがない限りは、 “USeR” の略とするのが自然で\nあるというのが今のところの結論です。\n ","contentSnippet":"usrは “user services and resources\"の略らしい。Re は concerning の意、 re your letter of … , …の手紙に関して追記(2015-10-02):usr の情報源を書いていなかった。Filesystem Hierarchy Standard - Wikipedia 追記(2015-12-03):USeR の略説も浮上してきた…。/usr は何の略か｜ビットログ  Unix系OSの “/usr” が “User SR” の略であるという裏付けは見つかりませんでした。それがない限りは、 “USeR” の略とするのが自然であるというのが今のところの結論です。","link":"https://masutaka.net/2002-07-23-1/","isoDate":"2002-07-23T00:00:00.000Z","dateMiliSeconds":1027382400000,"authorName":"masutaka"},{"title":"file の種類をある程度解析して表示してくれる","content":"% file [file-name]","contentSnippet":"% file [file-name]","link":"https://masutaka.net/2002-07-21-1/","isoDate":"2002-07-21T00:00:00.000Z","dateMiliSeconds":1027209600000,"authorName":"masutaka"},{"title":"find の結果を他のコマンドに渡してみたり、'!' で否定してみたり","content":"% find [dir] ! -name *.txt -exec [command] {} ;","contentSnippet":"% find [dir] ! -name *.txt -exec [command] {} ;","link":"https://masutaka.net/2002-07-18-1/","isoDate":"2002-07-18T00:00:00.000Z","dateMiliSeconds":1026950400000,"authorName":"masutaka"},{"title":"CPU のアーキテクチャ","content":"i586=Pentinum,MMX Pentinum\ni686=Pentinum Pro,Pentinum2〜,Celeron","contentSnippet":"i586=Pentinum,MMX Pentinumi686=Pentinum Pro,Pentinum2〜,Celeron","link":"https://masutaka.net/2002-07-17-1/","isoDate":"2002-07-17T00:00:00.000Z","dateMiliSeconds":1026864000000,"authorName":"masutaka"},{"title":"セクション構造","content":"|.text\n|実行コードを格納するセクション\n|実行・読み込みのみ可能で書込みは不可\n|\n|.rodata\n|定数値を格納するセクション\n|読み込みのみ可。書込み・実行は不可\n|\n|.data\n|初期化済みデータを格納するセクション\n|読み書きのみ可。実行は不可\n|\n|.bss\n|非初期化データを格納するセクション\n|読み書きのみ可。実行は不可\n|\n|bss はプログラムがロードされた時点で 0 クリア\n|されるべき領域だそうです。\n|bss が外部変数領域とすると、data はカラー関係の\n|テーブルのようなものでしょうかね ??","contentSnippet":"|.text|実行コードを格納するセクション|実行・読み込みのみ可能で書込みは不可||.rodata|定数値を格納するセクション|読み込みのみ可。書込み・実行は不可||.data|初期化済みデータを格納するセクション|読み書きのみ可。実行は不可||.bss|非初期化データを格納するセクション|読み書きのみ可。実行は不可||bss はプログラムがロードされた時点で 0 クリア|されるべき領域だそうです。|bss が外部変数領域とすると、data はカラー関係の|テーブルのようなものでしょうかね ??","link":"https://masutaka.net/2002-07-15-1/","isoDate":"2002-07-15T00:00:00.000Z","dateMiliSeconds":1026691200000,"authorName":"masutaka"},{"title":"Mew で emacs-w3m を使わないで HTML Mail を見る","content":"いわゆる HTMLメールをみやすい(?)テキストで見るには、summary-modeで &lsquo;:&lsquo;を押す。","contentSnippet":"いわゆる HTMLメールをみやすい(?)テキストで見るには、summary-modeで ‘:‘を押す。","link":"https://masutaka.net/2002-07-11-1/","isoDate":"2002-07-11T00:00:00.000Z","dateMiliSeconds":1026345600000,"authorName":"masutaka"},{"title":"アクセス権の `s' フラグの意味","content":"|chmod g+s filename or chmod 2755 filename -&gt; -rwxr-sr-x\n実行ファイルでグループの x が s になっているとそのグループ ID で動\nきます。つまり -rwxr-sr-x masutaka admin &hellip; だと誰でも実行でき、且\nつ、実行すると実行者が誰であっても admin group として実行しているこ\nとになります。\n|chmod u+s filename or chmod 4755 filename -&gt; -rwsr-xr-x\nオーナーに s をつけることもできます。-rwsr-xr-x root &hellip; は誰でも実\n行できて、実行すると root 権限で実行されます。つまり、root 権限でし\nか使えないコマンドをユーザが動かすことが出来ます。\n|chmod g+s dirname or chmod 2755 filename -&gt; -rwxr-sr-x\n以後、このディレクトリ以下で作るファイルやディレクトリは同じグルー\nプになります。","contentSnippet":"|chmod g+s filename or chmod 2755 filename -> -rwxr-sr-x実行ファイルでグループの x が s になっているとそのグループ ID で動きます。つまり -rwxr-sr-x masutaka admin … だと誰でも実行でき、且つ、実行すると実行者が誰であっても admin group として実行していることになります。|chmod u+s filename or chmod 4755 filename -> -rwsr-xr-xオーナーに s をつけることもできます。-rwsr-xr-x root … は誰でも実行できて、実行すると root 権限で実行されます。つまり、root 権限でしか使えないコマンドをユーザが動かすことが出来ます。|chmod g+s dirname or chmod 2755 filename -> -rwxr-sr-x以後、このディレクトリ以下で作るファイルやディレクトリは同じグループになります。","link":"https://masutaka.net/2002-07-09-1/","isoDate":"2002-07-09T00:00:00.000Z","dateMiliSeconds":1026172800000,"authorName":"masutaka"},{"title":"id コマンドで、所属グループの一覧が出るらしい","content":"","contentSnippet":"","link":"https://masutaka.net/2002-07-07-2/","isoDate":"2002-07-07T01:00:00.000Z","dateMiliSeconds":1026003600000,"authorName":"masutaka"},{"title":"ruby-gtk","content":"インストールされるのは、/usr/local/lib/ruby/1.6/i686-linux/gtk.soだけ。\n&lsquo;make install&rsquo;の直前に &lsquo;prefix = $(DESTDIR)/usr/local&rsquo;にした。(./src/Makefile)","contentSnippet":"インストールされるのは、/usr/local/lib/ruby/1.6/i686-linux/gtk.soだけ。‘make install’の直前に ‘prefix = $(DESTDIR)/usr/local’にした。(./src/Makefile)","link":"https://masutaka.net/2002-07-07-1/","isoDate":"2002-07-07T00:00:00.000Z","dateMiliSeconds":1026000000000,"authorName":"masutaka"},{"title":"パッケージとかパッチの作り方","content":"URL: http://www9.cds.ne.jp/~proxon/ ","contentSnippet":"URL: http://www9.cds.ne.jp/~proxon/","link":"https://masutaka.net/2002-07-04-1/","isoDate":"2002-07-04T00:00:00.000Z","dateMiliSeconds":1025740800000,"authorName":"masutaka"},{"title":"背景が暗いかどうかを調べる","content":"背景が暗いかどうかを見たいだけなら\n(eq &lsquo;dark (cdr (assq &lsquo;background-mode (frame-parameters))))\nでいけると思われ。\nt になったからといって -rv で起動したとは限らないが。","contentSnippet":"背景が暗いかどうかを見たいだけなら(eq ‘dark (cdr (assq ‘background-mode (frame-parameters))))でいけると思われ。t になったからといって -rv で起動したとは限らないが。","link":"https://masutaka.net/2002-06-30-1/","isoDate":"2002-06-30T00:00:00.000Z","dateMiliSeconds":1025395200000,"authorName":"masutaka"},{"title":"インストールされるファイルの場所を確認","content":"まず make install の前に make -n install して確認。\nインストールされるファイルの一覧を得るには。\n% touch timestamp\n% make install\n% find /etc /usr /var -cnewer timestamp | less","contentSnippet":"まず make install の前に make -n install して確認。インストールされるファイルの一覧を得るには。% touch timestamp% make install% find /etc /usr /var -cnewer timestamp | less","link":"https://masutaka.net/2002-06-29-1/","isoDate":"2002-06-29T00:00:00.000Z","dateMiliSeconds":1025308800000,"authorName":"masutaka"},{"title":"pkgadd や pkgrm などの説明","content":"URL: http://www-hlab.iis.u-tokyo.ac.jp/~n-ando/unix/solaris/package.html ","contentSnippet":"URL: http://www-hlab.iis.u-tokyo.ac.jp/~n-ando/unix/solaris/package.html","link":"https://masutaka.net/2002-06-25-1/","isoDate":"2002-06-25T00:00:00.000Z","dateMiliSeconds":1024963200000,"authorName":"masutaka"},{"title":"FIFAって何の略？","content":"FIFA Is the Football Association. GNU is Not Unix.と同じ。\n追記(2015-07-01):\nガセだった。フランス語で Fédération Internationale de Football\nAssociation とのこと。参考: 国際サッカー連盟 ","contentSnippet":"FIFA Is the Football Association. GNU is Not Unix.と同じ。追記(2015-07-01):ガセだった。フランス語で Fédération Internationale de FootballAssociation とのこと。参考: 国際サッカー連盟","link":"https://masutaka.net/2002-06-24-5/","isoDate":"2002-06-24T04:00:00.000Z","dateMiliSeconds":1024891200000,"authorName":"masutaka"},{"title":"スティッキービットフラグ","content":"スティッキービットフラグをディレクトリに立てると、\nすべてのユーザに書き込みを許すが、所有者以外は削除不可に\nすることができます。/tmp などに設定されています。\nパーミッション設定の頭に1を付けるか、+tを付けます。\n% chmod 1777 /tmp/hoge % chmod a+rwxt /tmp/hoge ","contentSnippet":"スティッキービットフラグをディレクトリに立てると、すべてのユーザに書き込みを許すが、所有者以外は削除不可にすることができます。/tmp などに設定されています。パーミッション設定の頭に1を付けるか、+tを付けます。% chmod 1777 /tmp/hoge % chmod a+rwxt /tmp/hoge","link":"https://masutaka.net/2002-06-24-4/","isoDate":"2002-06-24T03:00:00.000Z","dateMiliSeconds":1024887600000,"authorName":"masutaka"},{"title":"$HOME/bin/Emacs","content":"2行に分けて書くと、XMODIFIERS=@im=noneが効かなくなる。\n1行が長くなる場合は、&rsquo;'を使う。","contentSnippet":"2行に分けて書くと、XMODIFIERS=@im=noneが効かなくなる。1行が長くなる場合は、’'を使う。","link":"https://masutaka.net/2002-06-24-3/","isoDate":"2002-06-24T02:00:00.000Z","dateMiliSeconds":1024884000000,"authorName":"masutaka"},{"title":"PPM/PGM/PBM形式の画像について","content":"自作のプログラムから簡単に画像ファイルを出力したいときは、\nPPM(またはPGM/PBM)形式で出力するととても簡単です．\n[PPM形式とは？]\nPPM形式(Portable PixMap file format) はRGBカラー画像を扱うためのフォーマットで，\n「へッダ＋画像データの羅列」で表現できます．へッダはテキスト形式，\n画像データはテキスト/バイナリを選択でき，非常に簡単です．\nもちろんデータ圧縮などはありません．\nPGM形式(Portable GrayMap file format) は\n同様にグレイスケールの画像を扱うためのフォーマットです．\nPBM形式(Portable BitMap file format) も\n同様に白黒画像(ビットマップ)を扱うためのフォーマットです．\n[フォーマットの解説]\nPPM形式は以下の順にデータを並べるだけです．\n 文字列&quot;P3&quot;．PPM形式を表すための「マジックナンバー」です． 区切り文字．スペースまたはタブまたは改行です． 画像の幅．10進数のテキストで出力します． 区切り文字 画像の高さ．10進数のテキスト． 区切り文字 R,G,B値の最大値．10進数のテキスト． 区切り文字 画像データ．R,G,Bの順に10進数のテキストで並べます．\nもちろん値と値の間には区切り文字が必要．また，1行が70文字を越えてはいけません．\nなお，&quot;#&ldquo;で始まる行はコメントとして扱われます．  PPMにはバイナリ形式もあります．\n□ マジックナンバーを&quot;P3&quot;の代わりに&quot;P6&quot;にします．\n□ 画像データは10進数のテキストの代わりにバイナリデータ(8bit)を並べます．\nもちろん区切り文字は必要ありません．\n□ バイナリデータは8bitなので，R,G,Bの値の最大値は255までしかとれません\n(テキスト形式だとこの制約はありません)．\nたとえばテキストPPM形式だと以下のような感じです(&lsquo;man ppm&rsquo;より抜粋)．\n┌────────────────────────┐ │P3 │ │# feep.ppm │ │4 4 │ │15 │ │ 0 0 0 0 0 0 0 0 0 15 0 15 │ │ 0 0 0 0 15 7 0 0 0 0 0 0 │ │ 0 0 0 0 0 0 0 15 7 0 0 0 │ │15 0 15 0 0 0 0 0 0 0 0 0 │ └────────────────────────┘ PGM形式はPPMのモノクロ版といっていいでしょう．以下に違いを示します．","contentSnippet":"自作のプログラムから簡単に画像ファイルを出力したいときは、PPM(またはPGM/PBM)形式で出力するととても簡単です．[PPM形式とは？]PPM形式(Portable PixMap file format) はRGBカラー画像を扱うためのフォーマットで，「へッダ＋画像データの羅列」で表現できます．へッダはテキスト形式，画像データはテキスト/バイナリを選択でき，非常に簡単です．もちろんデータ圧縮などはありません．PGM形式(Portable GrayMap file format) は同様にグレイスケールの画像を扱うためのフォーマットです．PBM形式(Portable BitMap file format) も同様に白黒画像(ビットマップ)を扱うためのフォーマットです．[フォーマットの解説]PPM形式は以下の順にデータを並べるだけです． 文字列\"P3\"．PPM形式を表すための「マジックナンバー」です． 区切り文字．スペースまたはタブまたは改行です． 画像の幅．10進数のテキストで出力します． 区切り文字 画像の高さ．10進数のテキスト． 区切り文字 R,G,B値の最大値．10進数のテキスト． 区切り文字 画像データ．R,G,Bの順に10進数のテキストで並べます．もちろん値と値の間には区切り文字が必要．また，1行が70文字を越えてはいけません．なお，\"#“で始まる行はコメントとして扱われます．  PPMにはバイナリ形式もあります．□ マジックナンバーを\"P3\"の代わりに\"P6\"にします．□ 画像データは10進数のテキストの代わりにバイナリデータ(8bit)を並べます．もちろん区切り文字は必要ありません．□ バイナリデータは8bitなので，R,G,Bの値の最大値は255までしかとれません(テキスト形式だとこの制約はありません)．たとえばテキストPPM形式だと以下のような感じです(‘man ppm’より抜粋)．┌────────────────────────┐ │P3 │ │# feep.ppm │ │4 4 │ │15 │ │ 0 0 0 0 0 0 0 0 0 15 0 15 │ │ 0 0 0 0 15 7 0 0 0 0 0 0 │ │ 0 0 0 0 0 0 0 15 7 0 0 0 │ │15 0 15 0 0 0 0 0 0 0 0 0 │ └────────────────────────┘ PGM形式はPPMのモノクロ版といっていいでしょう．以下に違いを示します．","link":"https://masutaka.net/2002-06-24-2/","isoDate":"2002-06-24T01:00:00.000Z","dateMiliSeconds":1024880400000,"authorName":"masutaka"},{"title":"パッケージのインストール","content":"ネットワーク先のディレクトリにはインストールできなかったため、\ntinkに rootでログインしてインストールした。\n pkgadd -d. [解凍したパッケージディレクトリ名]  ","contentSnippet":"ネットワーク先のディレクトリにはインストールできなかったため、tinkに rootでログインしてインストールした。 pkgadd -d. [解凍したパッケージディレクトリ名]","link":"https://masutaka.net/2002-06-24-1/","isoDate":"2002-06-24T00:00:00.000Z","dateMiliSeconds":1024876800000,"authorName":"masutaka"},{"title":"root に送られてくるメール","content":"/etc/log.d/logwatch.confを編集して、masutakaに送るようにした。","contentSnippet":"/etc/log.d/logwatch.confを編集して、masutakaに送るようにした。","link":"https://masutaka.net/2002-06-23-3/","isoDate":"2002-06-23T02:00:00.000Z","dateMiliSeconds":1024797600000,"authorName":"masutaka"},{"title":"ログインの時に読み込まれるファイル","content":"ログインの時に読み込まれるファイルは、\n/etc/X11/xdm/Xsessionなので、$HOME/.xsessionを読み込むように修正した。\nさらに/etc/X11/xdm/Xsessionは、\n/etc/X11/gdm/Sessions/Gnomeから呼ばれているっぽい。","contentSnippet":"ログインの時に読み込まれるファイルは、/etc/X11/xdm/Xsessionなので、$HOME/.xsessionを読み込むように修正した。さらに/etc/X11/xdm/Xsessionは、/etc/X11/gdm/Sessions/Gnomeから呼ばれているっぽい。","link":"https://masutaka.net/2002-06-23-2/","isoDate":"2002-06-23T01:00:00.000Z","dateMiliSeconds":1024794000000,"authorName":"masutaka"},{"title":"キーの入れ換えと fetchmail","content":"http://libra.higashi.hit-u.ac.jp/manual/manual.html 自宅でも fetchmailでメールを取り込むようにしてみた。\nキーの入れ換え方法も書いてあってなかなか良いが、\nXmodmapを使わないでキーの入れ替えをする方法が良くわからない。","contentSnippet":"http://libra.higashi.hit-u.ac.jp/manual/manual.html 自宅でも fetchmailでメールを取り込むようにしてみた。キーの入れ換え方法も書いてあってなかなか良いが、Xmodmapを使わないでキーの入れ替えをする方法が良くわからない。","link":"https://masutaka.net/2002-06-23-1/","isoDate":"2002-06-23T00:00:00.000Z","dateMiliSeconds":1024790400000,"authorName":"masutaka"},{"title":"環境変数 LANG","content":"/usr/lib/locale/ 直下にあるディレクトリ名が LANG に入れるべき値。","contentSnippet":"/usr/lib/locale/ 直下にあるディレクトリ名が LANG に入れるべき値。","link":"https://masutaka.net/2002-06-22-1/","isoDate":"2002-06-22T00:00:00.000Z","dateMiliSeconds":1024704000000,"authorName":"masutaka"},{"title":"ファイルのステータスを見る","content":"% cvs st [ファイル名]","contentSnippet":"% cvs st [ファイル名]","link":"https://masutaka.net/2002-06-20-3/","isoDate":"2002-06-20T02:00:00.000Z","dateMiliSeconds":1024538400000,"authorName":"masutaka"},{"title":"fvwm をコンパイルしたら、ちゃんと書く","content":"基本的には/usr/X11R6以下にインストールするのれす。 ただ細かいところはconfigureで指定なのれす。 --prefix=/usr/X11R6 --libexecdir=/usr/X11R6/lib/X11 --sysconfdir=/usr/X11R6/lib/X11/fvwm --datadir=/usr/X11R6/lib/X11 --enable-multibyte --with-xpm-library=/usr/X11R6/lib --with-xpm-includes=/usr/X11R6/include/X11 --with-imagepath=/usr/X11R6/lib/X11/icons 設定のサンプルファイルが展開したdirectoryにsample.fvwmrc以下 としてあるので、これを$HOME/.fvwm2rcとして使用するのれす。 /etc/X11/xinit/xinitrcを$HOME/.xinitrcにコピーして、 最後のtwmをfvwm2に換えてstartxなのれす。 細かい設定は日本語環境が整ってからなのれす。 fvwm &lt;http://www.fvwm.org/&gt; オフィシャルなiconを入れてみるのれす。 さっき指定したimagepathに展開すればOKなのれす。 これならウインドウを最小化した時にicon化してくれるのれす。 # tar xzf fvwm_icons.tgz -C /usr/X11R6/lib/X11/ fvwm icon &lt;http://www.fvwm.org/icons.html&gt; fvwm2で何かを起動したときにフォーカスが当たるようにするのれす。 またフォーカスが１秒以上当たったら最前面になるようにするのれす。 以下のように~/.fvwm2rcに書くのれす。 Style * GrabFocus AddToFunc InitFunction + I Module FvwmAuto 1000 ","contentSnippet":"基本的には/usr/X11R6以下にインストールするのれす。 ただ細かいところはconfigureで指定なのれす。 --prefix=/usr/X11R6 --libexecdir=/usr/X11R6/lib/X11 --sysconfdir=/usr/X11R6/lib/X11/fvwm --datadir=/usr/X11R6/lib/X11 --enable-multibyte --with-xpm-library=/usr/X11R6/lib --with-xpm-includes=/usr/X11R6/include/X11 --with-imagepath=/usr/X11R6/lib/X11/icons 設定のサンプルファイルが展開したdirectoryにsample.fvwmrc以下 としてあるので、これを$HOME/.fvwm2rcとして使用するのれす。 /etc/X11/xinit/xinitrcを$HOME/.xinitrcにコピーして、 最後のtwmをfvwm2に換えてstartxなのれす。 細かい設定は日本語環境が整ってからなのれす。 fvwm <http://www.fvwm.org/> オフィシャルなiconを入れてみるのれす。 さっき指定したimagepathに展開すればOKなのれす。 これならウインドウを最小化した時にicon化してくれるのれす。 # tar xzf fvwm_icons.tgz -C /usr/X11R6/lib/X11/ fvwm icon <http://www.fvwm.org/icons.html> fvwm2で何かを起動したときにフォーカスが当たるようにするのれす。 またフォーカスが１秒以上当たったら最前面になるようにするのれす。 以下のように~/.fvwm2rcに書くのれす。 Style * GrabFocus AddToFunc InitFunction + I Module FvwmAuto 1000","link":"https://masutaka.net/2002-06-20-2/","isoDate":"2002-06-20T01:00:00.000Z","dateMiliSeconds":1024534800000,"authorName":"masutaka"},{"title":"elispをバッチ処理させる","content":"% emcws-20.7 -batch -q &ndash;no-site-file -l xxx.el","contentSnippet":"% emcws-20.7 -batch -q –no-site-file -l xxx.el","link":"https://masutaka.net/2002-06-20-1/","isoDate":"2002-06-20T00:00:00.000Z","dateMiliSeconds":1024531200000,"authorName":"masutaka"},{"title":"XEmacs-21.9 のインストール","content":"|% ./configure &ndash;with-mule &ndash;with-wnn &ndash;with-xfs &ndash;with-site-lisp &ndash;without-canna &ndash;without-wnn6 &ndash;without-xim\n|or\n|% ./configure &ndash;with-mule &ndash;with-wnn &ndash;with-xfs &ndash;with-pop &ndash;with-site-lisp &ndash;without-xim\n|% make\n|# touch timestamp\n|# make install\n|# find /etc /usr /var -cnewer timestamp &gt; /usr/local/var/install-log/xemacs-21.9.log\n|# cd /usr/local/lib/xemacs\n|# mv xemacs-packages .xemacs-packages\n|# mv mule-packages .mule-packages\n|# tar xvjf xemacs-sumo.tar.bz2\n|# tar xvjf xemacs-mule-sumo.tar.bz2\n|# cd /usr/local/lib/xemacs/xemacs-packages/lisp\n|# mv apel .apel\n|# cd /usr/local/lib/xemacs/.mule-packages/etc\n|# cp -r -p wl /usr/local/lib/xemacs/mule-packages/etc","contentSnippet":"|% ./configure –with-mule –with-wnn –with-xfs –with-site-lisp –without-canna –without-wnn6 –without-xim|or|% ./configure –with-mule –with-wnn –with-xfs –with-pop –with-site-lisp –without-xim|% make|# touch timestamp|# make install|# find /etc /usr /var -cnewer timestamp > /usr/local/var/install-log/xemacs-21.9.log|# cd /usr/local/lib/xemacs|# mv xemacs-packages .xemacs-packages|# mv mule-packages .mule-packages|# tar xvjf xemacs-sumo.tar.bz2|# tar xvjf xemacs-mule-sumo.tar.bz2|# cd /usr/local/lib/xemacs/xemacs-packages/lisp|# mv apel .apel|# cd /usr/local/lib/xemacs/.mule-packages/etc|# cp -r -p wl /usr/local/lib/xemacs/mule-packages/etc","link":"https://masutaka.net/2002-06-17-2/","isoDate":"2002-06-17T01:00:00.000Z","dateMiliSeconds":1024275600000,"authorName":"masutaka"},{"title":"XEmacs への不満","content":"リージョンの扱いがおかしい。(move-to-window-line 0)して、M-wができない。 -&gt; (setq zmacs-regions nil)\n日本語変換のコードをhookに引っかける方法が分からない。\n(font-lock-add-keywords)の代わりになるものは？","contentSnippet":"リージョンの扱いがおかしい。(move-to-window-line 0)して、M-wができない。 -> (setq zmacs-regions nil)日本語変換のコードをhookに引っかける方法が分からない。(font-lock-add-keywords)の代わりになるものは？","link":"https://masutaka.net/2002-06-17-1/","isoDate":"2002-06-17T00:00:00.000Z","dateMiliSeconds":1024272000000,"authorName":"masutaka"},{"title":"XEmacs-21.4 でメニュバーを日本語で表示する。","content":"|% cd /usr/local/lib/xemacs/mule-packages/etc/app-defaults\n|% ln -s ja ja_JP.eucJP","contentSnippet":"|% cd /usr/local/lib/xemacs/mule-packages/etc/app-defaults|% ln -s ja ja_JP.eucJP","link":"https://masutaka.net/2002-06-16-1/","isoDate":"2002-06-16T00:00:00.000Z","dateMiliSeconds":1024185600000,"authorName":"masutaka"},{"title":"Mozilla ショートカット","content":"C-l すると、URL を入力するところにフォーカスを移す。","contentSnippet":"C-l すると、URL を入力するところにフォーカスを移す。","link":"https://masutaka.net/2002-06-15-3/","isoDate":"2002-06-15T02:00:00.000Z","dateMiliSeconds":1024106400000,"authorName":"masutaka"},{"title":"起動時のスプラッシュの指定方法","content":"mozilla.bmpという名前で、Mozillaと同じディレクトリに入れる。\nhttp://hand_on.tripod.co.jp/ http://lotekk.net/index.php?page=moz&sub=splash ","contentSnippet":"mozilla.bmpという名前で、Mozillaと同じディレクトリに入れる。http://hand_on.tripod.co.jp/ http://lotekk.net/index.php?page=moz&sub=splash","link":"https://masutaka.net/2002-06-15-2/","isoDate":"2002-06-15T01:00:00.000Z","dateMiliSeconds":1024102800000,"authorName":"masutaka"},{"title":"コード変換をしないで、ファイルを開く","content":"M-x find-file-literally","contentSnippet":"M-x find-file-literally","link":"https://masutaka.net/2002-06-15-1/","isoDate":"2002-06-15T00:00:00.000Z","dateMiliSeconds":1024099200000,"authorName":"masutaka"},{"title":"GNU-Emacs = FSF-Emacs","content":"","contentSnippet":"","link":"https://masutaka.net/2002-06-14-1/","isoDate":"2002-06-14T00:00:00.000Z","dateMiliSeconds":1024012800000,"authorName":"masutaka"},{"title":"HIST_IGNORE_ALL_DUPS -> 同じコマンドの history は履歴に入れない。","content":"&lsquo;setopt histignorealldups&rsquo;して、&lsquo;history&rsquo;すると同じ履歴は消えているけど、\n$HISTFILEの中身は消えてない。これは、デフォルトでは $HISTFILEの同期は\nzsh プロセスが exit したときだから。INC_APPEND_HISTORY や SHARE_HISTORY を\n有効にしていると、このタイミングが変わる。\nSHARE_HISTORYは、直前の履歴を使い回すことが多い時は却って不便かもしれない。\nマニュアルにあるように、適当なタイミングで &lsquo;fc -RI&rsquo;する方が使い易いかも。","contentSnippet":"‘setopt histignorealldups’して、‘history’すると同じ履歴は消えているけど、$HISTFILEの中身は消えてない。これは、デフォルトでは $HISTFILEの同期はzsh プロセスが exit したときだから。INC_APPEND_HISTORY や SHARE_HISTORY を有効にしていると、このタイミングが変わる。SHARE_HISTORYは、直前の履歴を使い回すことが多い時は却って不便かもしれない。マニュアルにあるように、適当なタイミングで ‘fc -RI’する方が使い易いかも。","link":"https://masutaka.net/2002-06-13-1/","isoDate":"2002-06-13T00:00:00.000Z","dateMiliSeconds":1023926400000,"authorName":"masutaka"},{"title":"半角カナとは JISX0201 のこと","content":"","contentSnippet":"","link":"https://masutaka.net/2002-06-10-3/","isoDate":"2002-06-10T02:00:00.000Z","dateMiliSeconds":1023674400000,"authorName":"masutaka"},{"title":"kterm のインストール","content":"% xmkmf -a\n% make\nMakefileの &lsquo;VARDIR = /var/X11&rsquo; -&gt; &lsquo;VARDIR = /usr/local/var/X11&rsquo;\n% make install\n% nkf -e kterm.jman &gt; /usr/X11R6/man/man1/kterm.1\n% chmod 444 /usr/X11R6/man/man1/kterm.1\n% chmod 755 /usr/X11R6/bin/kterm\nhttp://www.anna.iwate-pu.ac.jp/~kojima/Solaris2.6/sol26-x.html ","contentSnippet":"% xmkmf -a% makeMakefileの ‘VARDIR = /var/X11’ -> ‘VARDIR = /usr/local/var/X11’% make install% nkf -e kterm.jman > /usr/X11R6/man/man1/kterm.1% chmod 444 /usr/X11R6/man/man1/kterm.1% chmod 755 /usr/X11R6/bin/ktermhttp://www.anna.iwate-pu.ac.jp/~kojima/Solaris2.6/sol26-x.html","link":"https://masutaka.net/2002-06-10-2/","isoDate":"2002-06-10T01:00:00.000Z","dateMiliSeconds":1023670800000,"authorName":"masutaka"},{"title":"Solaris Package Archive","content":"http://www.ibiblio.org/pub/packages/solaris/sparc/ ","contentSnippet":"http://www.ibiblio.org/pub/packages/solaris/sparc/","link":"https://masutaka.net/2002-06-10-1/","isoDate":"2002-06-10T00:00:00.000Z","dateMiliSeconds":1023667200000,"authorName":"masutaka"},{"title":"モードラインの EEEの意味 by Meadow ML","content":"最初の E が terminal input、 次が terminal output、最後が buffer 内の\nファイル保存用で、 E というのは euc-japan のことだと思います。","contentSnippet":"最初の E が terminal input、 次が terminal output、最後が buffer 内のファイル保存用で、 E というのは euc-japan のことだと思います。","link":"https://masutaka.net/2002-06-09-2/","isoDate":"2002-06-09T01:00:00.000Z","dateMiliSeconds":1023584400000,"authorName":"masutaka"},{"title":"VZ.el","content":"URL: http://www2.palnet.or.jp/~matsuda/linux_menu.html ","contentSnippet":"URL: http://www2.palnet.or.jp/~matsuda/linux_menu.html","link":"https://masutaka.net/2002-06-09-1/","isoDate":"2002-06-09T00:00:00.000Z","dateMiliSeconds":1023580800000,"authorName":"masutaka"},{"title":"起動ディスクの作り方","content":"最後の'2.4.9-31&rsquo;は、/boot/vmlinuz-2.4.9-31と同じにする。\nマウントは解除しておく。 ~~~~~~~~\nmkbootdisk &ndash;device /dev/fd0 2.4.9-31 ","contentSnippet":"最後の'2.4.9-31’は、/boot/vmlinuz-2.4.9-31と同じにする。マウントは解除しておく。 ~~~~~~~~mkbootdisk –device /dev/fd0 2.4.9-31","link":"https://masutaka.net/2002-06-03-1/","isoDate":"2002-06-03T00:00:00.000Z","dateMiliSeconds":1023062400000,"authorName":"masutaka"},{"title":"`-m' オプション","content":"わざわざエディタを開くのが嫌ならば、 `-m&rsquo; オプションで次のように指定できます:\n% cvs commit -m &ldquo;Added an optimization pass&rdquo; backend.c","contentSnippet":"わざわざエディタを開くのが嫌ならば、 `-m’ オプションで次のように指定できます:% cvs commit -m “Added an optimization pass” backend.c","link":"https://masutaka.net/2002-05-29-2/","isoDate":"2002-05-29T01:00:00.000Z","dateMiliSeconds":1022634000000,"authorName":"masutaka"},{"title":"ディスクとデバイス名","content":"|Solarisには、/dev, /devices といったデバイスに関するディレクトリーが用意されています。\n|/dev は今までの UNIX と同じような型式でデバイスファイルが存在します。\n|/devices はバスの情報や場所、接続されているデバイス、デバイスのID などが、\n|パスやファイルの名前で理解できるようになっています(そのお蔭で非常に長い)。\n|\n|ブロックデバイス /dev/dsk/c0t3d0s0\n|キャラクターデバイス /dev/rdsk/c0t3d0s0\n|\n|c0\tコントローラターゲット。コントローラが増えると c1, c2 と増える。\n|t3\tターゲットで SCSI-ID と対応。 IDE(ATA) ディスクの場合、無し。\n|d0\tRAID ディスク等で使用する&hellip;..\n|s0\tスライス。パーティションと呼ばれていたもので a-h が 0-8 に対応。\n|\t昔のなごりなのかデフォルトで s2(c) はディスク全体として使用されている。\n|\n|/dev は以前の UNIX との互換のためのリンクで存在している。実体は、以下の様に /devices に存在する。\n|/devices/iommu@f,e0000000/sbus@f,e0001000/espdma@f,400000/esp@f,800000/sd@3,0:a\nURL: http://home7.highway.ne.jp/dayan/tips/unix/solaris.html ","contentSnippet":"|Solarisには、/dev, /devices といったデバイスに関するディレクトリーが用意されています。|/dev は今までの UNIX と同じような型式でデバイスファイルが存在します。|/devices はバスの情報や場所、接続されているデバイス、デバイスのID などが、|パスやファイルの名前で理解できるようになっています(そのお蔭で非常に長い)。||ブロックデバイス /dev/dsk/c0t3d0s0|キャラクターデバイス /dev/rdsk/c0t3d0s0||c0\tコントローラターゲット。コントローラが増えると c1, c2 と増える。|t3\tターゲットで SCSI-ID と対応。 IDE(ATA) ディスクの場合、無し。|d0\tRAID ディスク等で使用する…..|s0\tスライス。パーティションと呼ばれていたもので a-h が 0-8 に対応。|\t昔のなごりなのかデフォルトで s2(c) はディスク全体として使用されている。||/dev は以前の UNIX との互換のためのリンクで存在している。実体は、以下の様に /devices に存在する。|/devices/iommu@f,e0000000/sbus@f,e0001000/espdma@f,400000/esp@f,800000/sd@3,0:aURL: http://home7.highway.ne.jp/dayan/tips/unix/solaris.html","link":"https://masutaka.net/2002-05-29-1/","isoDate":"2002-05-29T00:00:00.000Z","dateMiliSeconds":1022630400000,"authorName":"masutaka"},{"title":"起動時に読み込まれるファイル","content":"起動時に読み込まれるファイルは、$HOME/.dtprofile","contentSnippet":"起動時に読み込まれるファイルは、$HOME/.dtprofile","link":"https://masutaka.net/2002-05-28-1/","isoDate":"2002-05-28T00:00:00.000Z","dateMiliSeconds":1022544000000,"authorName":"masutaka"},{"title":"file1 から file2 を作るパッチが生成される。","content":"% /usr/gnu/bin/diff -urN file1 file2","contentSnippet":"% /usr/gnu/bin/diff -urN file1 file2","link":"https://masutaka.net/2002-05-27-1/","isoDate":"2002-05-27T00:00:00.000Z","dateMiliSeconds":1022457600000,"authorName":"masutaka"},{"title":"query-replace-regexp-eval","content":"正規表現を shell で実行させるらしい。","contentSnippet":"正規表現を shell で実行させるらしい。","link":"https://masutaka.net/2002-05-26-1/","isoDate":"2002-05-26T00:00:00.000Z","dateMiliSeconds":1022371200000,"authorName":"masutaka"},{"title":"tramp の書式","content":"/[masuda@129.144.3.25]","contentSnippet":"/[masuda@129.144.3.25]","link":"https://masutaka.net/2002-05-24-1/","isoDate":"2002-05-24T00:00:00.000Z","dateMiliSeconds":1022198400000,"authorName":"masutaka"},{"title":"zsh for the working researcher","content":"http://cl.aist-nara.ac.jp/student/daiti-m/text/zsh-intro.html ","contentSnippet":"http://cl.aist-nara.ac.jp/student/daiti-m/text/zsh-intro.html","link":"https://masutaka.net/2002-05-23-3/","isoDate":"2002-05-23T02:00:00.000Z","dateMiliSeconds":1022119200000,"authorName":"masutaka"},{"title":"カレントディレクトリ以下のすべての実行ファイルを削除","content":"zsh $ rm **/*(x.)","contentSnippet":"zsh $ rm **/*(x.)","link":"https://masutaka.net/2002-05-23-2/","isoDate":"2002-05-23T01:00:00.000Z","dateMiliSeconds":1022115600000,"authorName":"masutaka"},{"title":"窓使いの憂鬱で 1 行スクロールアップ/スクロールダウン？ ","content":"key C-Colon = &amp;MouseWheel(-120)\t# C-;\nkey C-Semicolon = &amp;MouseWheel(120)\t# C-:","contentSnippet":"key C-Colon = &MouseWheel(-120)\t# C-;key C-Semicolon = &MouseWheel(120)\t# C-:","link":"https://masutaka.net/2002-05-23-1/","isoDate":"2002-05-23T00:00:00.000Z","dateMiliSeconds":1022112000000,"authorName":"masutaka"},{"title":"Emacs が自動検出したフォントの名前を知る方法","content":"M-x describe-fontset =&gt; default-fontset","contentSnippet":"M-x describe-fontset => default-fontset","link":"https://masutaka.net/2002-05-22-2/","isoDate":"2002-05-22T01:00:00.000Z","dateMiliSeconds":1022029200000,"authorName":"masutaka"},{"title":"$HISTFILEの日付を分かりやすくする。","content":"|以下を適当なファイル(例えば histdate.awk)に保存します。\n|\n|#&mdash; begin &mdash;\n|BEGIN {\n| FS=&quot;:&quot;\n|}\n|\n|{\n| stime = strftime(&quot;%B %d %H:%M:%S %Y&quot;, $2);\n| print stime &quot; &ndash; &quot; $3\n|}\n|#&mdash; end &mdash;\n|\n|あとはプロンプトで\n|% awk -f histdate.awk $HISTFILE","contentSnippet":"|以下を適当なファイル(例えば histdate.awk)に保存します。||#— begin —|BEGIN {| FS=\":\"|}||{| stime = strftime(\"%B %d %H:%M:%S %Y\", $2);| print stime \" – \" $3|}|#— end —||あとはプロンプトで|% awk -f histdate.awk $HISTFILE","link":"https://masutaka.net/2002-05-22-1/","isoDate":"2002-05-22T00:00:00.000Z","dateMiliSeconds":1022025600000,"authorName":"masutaka"},{"title":"feh が susie に似ているらしい","content":"追記(2002-06-28):\nゼンゼン似ていなかった。。。使えないので削除。","contentSnippet":"追記(2002-06-28):ゼンゼン似ていなかった。。。使えないので削除。","link":"https://masutaka.net/2002-05-21-1/","isoDate":"2002-05-21T00:00:00.000Z","dateMiliSeconds":1021939200000,"authorName":"masutaka"},{"title":"grep-changelog への不満","content":"&ndash;text=(文字列1|文字列2):とかで検索させると、同じ日付が2つできたりする&hellip;。","contentSnippet":"–text=(文字列1|文字列2):とかで検索させると、同じ日付が2つできたりする…。","link":"https://masutaka.net/2002-05-20-2/","isoDate":"2002-05-20T01:00:00.000Z","dateMiliSeconds":1021856400000,"authorName":"masutaka"},{"title":"背景と文字の色を反転させる","content":"% emacs -rv","contentSnippet":"% emacs -rv","link":"https://masutaka.net/2002-05-20-1/","isoDate":"2002-05-20T00:00:00.000Z","dateMiliSeconds":1021852800000,"authorName":"masutaka"},{"title":"正規表現を使った grep-changelog","content":"% grep-changelog &ndash;text=&rsquo;(shell|emacs):&rsquo; diary.txt","contentSnippet":"% grep-changelog –text=’(shell|emacs):’ diary.txt","link":"https://masutaka.net/2002-05-19-3/","isoDate":"2002-05-19T02:00:00.000Z","dateMiliSeconds":1021773600000,"authorName":"masutaka"},{"title":"X が使えない原因 by 2ch","content":"Xが使えない原因の99.9%は/etc/X11/XF86Config-4の不備。","contentSnippet":"Xが使えない原因の99.9%は/etc/X11/XF86Config-4の不備。","link":"https://masutaka.net/2002-05-19-2/","isoDate":"2002-05-19T01:00:00.000Z","dateMiliSeconds":1021770000000,"authorName":"masutaka"},{"title":"defadvice の使い方","content":"kill-lineすると、this-commandに シンボル kill-regionが代入される。\nその状態で kill-regionすると、killした文字列をyank時に連結してしまうため、\nkill-lineが終わった後、this-commandに適当な値を入れる方法。\n(defadvice kill-line (after my-ad activate)  (setq this-command &#39;this-is-*not*-kill-region!!)) ","contentSnippet":"kill-lineすると、this-commandに シンボル kill-regionが代入される。その状態で kill-regionすると、killした文字列をyank時に連結してしまうため、kill-lineが終わった後、this-commandに適当な値を入れる方法。(defadvice kill-line (after my-ad activate)  (setq this-command 'this-is-*not*-kill-region!!))","link":"https://masutaka.net/2002-05-19-1/","isoDate":"2002-05-19T00:00:00.000Z","dateMiliSeconds":1021766400000,"authorName":"masutaka"},{"title":"mozillaの bookmarks.htmlの場所を変える。(by 2ch)","content":"user.jsに\nuser_pref(&ldquo;browser.bookmarks.file&rdquo;, &ldquo;c:\\usr\\.mozilla-bookmark.html&rdquo;);","contentSnippet":"user.jsにuser_pref(“browser.bookmarks.file”, “c:\\usr\\.mozilla-bookmark.html”);","link":"https://masutaka.net/2002-05-18-3/","isoDate":"2002-05-18T02:00:00.000Z","dateMiliSeconds":1021687200000,"authorName":"masutaka"},{"title":"一応取っておくURL","content":"○GNUの誕生\nhttp://www.sipeb.aoyama.ac.jp/~ida/books/ ○MOPA Assertion TAGタグたぐ〜\nhttp://village.infoweb.ne.jp/~mopa/html_tag.htm ○Mozilla customization - Ancient library\nhttp://www.alib.jp/mozilla/ ○Windows2000.FAQ\nhttp://homepage2.nifty.com/winfaq/w2k/ ○Windows Scripting Host Laboratory\nhttp://www.roy.hi-ho.ne.jp/mutaguchi/wsh/ ","contentSnippet":"○GNUの誕生http://www.sipeb.aoyama.ac.jp/~ida/books/ ○MOPA Assertion TAGタグたぐ〜http://village.infoweb.ne.jp/~mopa/html_tag.htm ○Mozilla customization - Ancient libraryhttp://www.alib.jp/mozilla/ ○Windows2000.FAQhttp://homepage2.nifty.com/winfaq/w2k/ ○Windows Scripting Host Laboratoryhttp://www.roy.hi-ho.ne.jp/mutaguchi/wsh/","link":"https://masutaka.net/2002-05-18-2/","isoDate":"2002-05-18T01:00:00.000Z","dateMiliSeconds":1021683600000,"authorName":"masutaka"},{"title":"masayuki からの xmodmap についてのアドバイス (/etc/X11/xdm/Xsession)","content":"$HOME/.xinitrcに以下を書いてもダメ？\n実行権も付けなくちゃいけないかもしれない。\n|usermodmap=$HOME/.Xmodmap\n|\n|if [ -f &ldquo;$usermodmap&rdquo; ]; then\n| xmodmap &ldquo;$usermodmap&rdquo;\n|fi","contentSnippet":"$HOME/.xinitrcに以下を書いてもダメ？実行権も付けなくちゃいけないかもしれない。|usermodmap=$HOME/.Xmodmap||if [ -f “$usermodmap” ]; then| xmodmap “$usermodmap”|fi","link":"https://masutaka.net/2002-05-18-1/","isoDate":"2002-05-18T00:00:00.000Z","dateMiliSeconds":1021680000000,"authorName":"masutaka"},{"title":"ADSL ","content":"Asymmetric Digital Subscriber Line","contentSnippet":"Asymmetric Digital Subscriber Line","link":"https://masutaka.net/2002-05-17-4/","isoDate":"2002-05-17T03:00:00.000Z","dateMiliSeconds":1021604400000,"authorName":"masutaka"},{"title":"mozilla-psm-1.0rc2-0.i386.rpm","content":"パーソナルセキュリティマネージャだったのね。(SSL)","contentSnippet":"パーソナルセキュリティマネージャだったのね。(SSL)","link":"https://masutaka.net/2002-05-17-3/","isoDate":"2002-05-17T02:00:00.000Z","dateMiliSeconds":1021600800000,"authorName":"masutaka"},{"title":"umaskの使い方","content":"#umask 0 → 0(000) XOR 6(110) = 6(110) = rw-\n#umask 1 → 1(001) XOR 6(110) = 7(111) = rwx\n#umask 2 → 2(010) XOR 6(110) = 4(100) = r&ndash;\n#umask 3 → 3(011) XOR 6(110) = 5(101) = r-x\n#umask 4 → 4(100) XOR 6(110) = 2(010) = -w-\n#umask 5 → 5(101) XOR 6(110) = 3(011) = -wx\n#umask 6 → 6(110) XOR 6(110) = 0(000) = &mdash;","contentSnippet":"#umask 0 → 0(000) XOR 6(110) = 6(110) = rw-#umask 1 → 1(001) XOR 6(110) = 7(111) = rwx#umask 2 → 2(010) XOR 6(110) = 4(100) = r–#umask 3 → 3(011) XOR 6(110) = 5(101) = r-x#umask 4 → 4(100) XOR 6(110) = 2(010) = -w-#umask 5 → 5(101) XOR 6(110) = 3(011) = -wx#umask 6 → 6(110) XOR 6(110) = 0(000) = —","link":"https://masutaka.net/2002-05-17-2/","isoDate":"2002-05-17T01:00:00.000Z","dateMiliSeconds":1021597200000,"authorName":"masutaka"},{"title":"grep-changelog","content":"以下のオプション指定で、2002年5月の &ldquo;文字列&rdquo; が含まれる項目を昇順に取ってくることができる。\n% grep-changelog &ndash;from-date=2002-05-01 &ndash;to-date=2002-05-31 &ndash;reverse &ndash;text=&ldquo;文字列&rdquo; ~/clmemo.txt","contentSnippet":"以下のオプション指定で、2002年5月の “文字列” が含まれる項目を昇順に取ってくることができる。% grep-changelog –from-date=2002-05-01 –to-date=2002-05-31 –reverse –text=“文字列” ~/clmemo.txt","link":"https://masutaka.net/2002-05-17-1/","isoDate":"2002-05-17T00:00:00.000Z","dateMiliSeconds":1021593600000,"authorName":"masutaka"},{"title":"java フォント設定ファイル","content":"/usr/java/jdk1.3.1_02/jre/lib/font.properties.ja","contentSnippet":"/usr/java/jdk1.3.1_02/jre/lib/font.properties.ja","link":"https://masutaka.net/2002-05-16-1/","isoDate":"2002-05-16T00:00:00.000Z","dateMiliSeconds":1021507200000,"authorName":"masutaka"},{"title":"stdout と stderror まとめ","content":"|1. 結果をファイルに記録する\n| sh, bash など\n| % program &gt; file.log\n| csh, tcsh など\n| % program &gt; file.log\n|\n|2. 標準エラー出力も記録する\n| sh, bash など\n| % program &gt; file.log 2&gt;&amp;1\n| csh, tcsh など\n| % program &gt;&amp; file.log\n|\n|3. 標準出力と標準エラー出力を別のファイルにリダイレクト\n| sh, bash など\n| % program &gt; file.log 2&gt; errors.log\n| csh, tcsh など\n| % (program &gt; file.log) &gt;&amp; errors.log\n|\n|4. コマンドの結果を別のコマンドに渡したい","contentSnippet":"|1. 結果をファイルに記録する| sh, bash など| % program > file.log| csh, tcsh など| % program > file.log||2. 標準エラー出力も記録する| sh, bash など| % program > file.log 2>&1| csh, tcsh など| % program >& file.log||3. 標準出力と標準エラー出力を別のファイルにリダイレクト| sh, bash など| % program > file.log 2> errors.log| csh, tcsh など| % (program > file.log) >& errors.log||4. コマンドの結果を別のコマンドに渡したい","link":"https://masutaka.net/2002-05-15-2/","isoDate":"2002-05-15T01:00:00.000Z","dateMiliSeconds":1021424400000,"authorName":"masutaka"},{"title":"フリーズしたら","content":"/var/log/boot.log\n/var/log/messages\nを調べれば、なんかしらの情報は得られると思います。\n設定しているのは、/etc/syslog.confです。","contentSnippet":"/var/log/boot.log/var/log/messagesを調べれば、なんかしらの情報は得られると思います。設定しているのは、/etc/syslog.confです。","link":"https://masutaka.net/2002-05-15-1/","isoDate":"2002-05-15T00:00:00.000Z","dateMiliSeconds":1021420800000,"authorName":"masutaka"},{"title":"ファイルが実行されるタイミング","content":"| $ZDOTDIR/.zshenv\t-f 以外全ての環境で使用される。\n| $ZDOTDIR/.zshrc\tinteractive shell で使用。\n|\talias, function, option, keybind&hellip; を入れる。\n| $ZDOTDIR/.zlogin\tlogin shell のみ使用。.zshrc の後。\n| $ZDOTDIR/.zprofile\t.zlogin と同様、但し .zshrc の前。\n| $ZDOTDIR/.zlogout\tlogout 時に実行。","contentSnippet":"| $ZDOTDIR/.zshenv\t-f 以外全ての環境で使用される。| $ZDOTDIR/.zshrc\tinteractive shell で使用。|\talias, function, option, keybind… を入れる。| $ZDOTDIR/.zlogin\tlogin shell のみ使用。.zshrc の後。| $ZDOTDIR/.zprofile\t.zlogin と同様、但し .zshrc の前。| $ZDOTDIR/.zlogout\tlogout 時に実行。","link":"https://masutaka.net/2002-05-14-1/","isoDate":"2002-05-14T00:00:00.000Z","dateMiliSeconds":1021334400000,"authorName":"masutaka"},{"title":"Dired で今日変更したファイルを色づけ","content":"なかなか(･∀･)イイYO!!\nURL: http://homepage1.nifty.com/blankspace/emacs/dired.html ","contentSnippet":"なかなか(･∀･)イイYO!!URL: http://homepage1.nifty.com/blankspace/emacs/dired.html","link":"https://masutaka.net/2002-05-11-2/","isoDate":"2002-05-11T01:00:00.000Z","dateMiliSeconds":1021078800000,"authorName":"masutaka"},{"title":"exitの罠","content":"GNOMEのツールバーから Emacsを起動すると環境変数が効かなかったので、\n~/.zshenvに &lsquo;source ~/.zshrc&rsquo;と書いておいたが、\nrcp&amp;rsh対策用に $TERMがNULLだったらexitする設定が\nログインする時に効いてしまいログインできなくなる罠にはまってしまった。","contentSnippet":"GNOMEのツールバーから Emacsを起動すると環境変数が効かなかったので、~/.zshenvに ‘source ~/.zshrc’と書いておいたが、rcp&rsh対策用に $TERMがNULLだったらexitする設定がログインする時に効いてしまいログインできなくなる罠にはまってしまった。","link":"https://masutaka.net/2002-05-11-1/","isoDate":"2002-05-11T00:00:00.000Z","dateMiliSeconds":1021075200000,"authorName":"masutaka"},{"title":"現在のホストのアーキテクチャ名を出力","content":"% arch","contentSnippet":"% arch","link":"https://masutaka.net/2002-05-09-1/","isoDate":"2002-05-09T00:00:00.000Z","dateMiliSeconds":1020902400000,"authorName":"masutaka"},{"title":"emacs-wget","content":"URL: http://isweb22.infoseek.co.jp/computer/pop-club/emacs/emacs-wget.html ","contentSnippet":"URL: http://isweb22.infoseek.co.jp/computer/pop-club/emacs/emacs-wget.html","link":"https://masutaka.net/2002-05-08-2/","isoDate":"2002-05-08T01:00:00.000Z","dateMiliSeconds":1020819600000,"authorName":"masutaka"},{"title":"navi2ch のアスキーアート変数","content":"navi2ch-message-aa-alist","contentSnippet":"navi2ch-message-aa-alist","link":"https://masutaka.net/2002-05-08-1/","isoDate":"2002-05-08T00:00:00.000Z","dateMiliSeconds":1020816000000,"authorName":"masutaka"},{"title":"ソースのインデントを整形するツール","content":"http://www.matsusaka-u.ac.jp/~okumura/c/style.html % indent -kr -ts255 *.c","contentSnippet":"http://www.matsusaka-u.ac.jp/~okumura/c/style.html % indent -kr -ts255 *.c","link":"https://masutaka.net/2002-05-07-3/","isoDate":"2002-05-07T02:00:00.000Z","dateMiliSeconds":1020736800000,"authorName":"masutaka"},{"title":"連番号出力","content":"% seq 1 3\n1\n2\n3","contentSnippet":"% seq 1 3123","link":"https://masutaka.net/2002-05-07-2/","isoDate":"2002-05-07T01:00:00.000Z","dateMiliSeconds":1020733200000,"authorName":"masutaka"},{"title":"ファイルのサイズを獲得","content":"% wc -c [file] | awk &lsquo;{print $1}&rsquo;\nor\n% du -sk file","contentSnippet":"% wc -c [file] | awk ‘{print $1}’or% du -sk file","link":"https://masutaka.net/2002-05-07-1/","isoDate":"2002-05-07T00:00:00.000Z","dateMiliSeconds":1020729600000,"authorName":"masutaka"},{"title":"kinput2 が落ちたら","content":"% kinput2 -wnnenvrc /etc/FreeWnn/ja/wnnenvrc &amp;","contentSnippet":"% kinput2 -wnnenvrc /etc/FreeWnn/ja/wnnenvrc &","link":"https://masutaka.net/2002-05-02-1/","isoDate":"2002-05-02T00:00:00.000Z","dateMiliSeconds":1020297600000,"authorName":"masutaka"},{"title":"GNUPG の基本","content":"[インストール＆鍵の作成方法]\nhttp://ykondou.dyndns.org:8080/columns/gpg.shtml http://linux.nikkeibp.co.jp/column/inflection/4/2.org.html http://www1.plala.or.jp/fukafuka/trouble/email.html http://tty0.exblog.jp/646860 [PGP 公開鍵サーバー]\nhttp://pgp.nic.ad.jp/jindex.html [&ldquo;やばいメモリーを使用しています!&ldquo;と言われてしまう]\n# ls -al `which gpg` -rwxr-xr-x 1 root root 560252 Aug 10 2001 /usr/bin/gpg* # chmod 4755 `which gpg`\t# (4755 or u+s) # ls -al `which gpg` -rwsr-xr-x 1 root root 560252 Aug 10 2001 /usr/bin/gpg* [uid を削除する]\n% gpg --edit-key masutaka.net@gmail.com (snip) (1). Takashi Masuda &lt;masutaka.net@gmail.com&gt; (2) Takashi Masuda &lt;masutaka@example.com&gt; コマンド&gt; uid 2 (1). Takashi Masuda &lt;masutaka.net@gmail.com&gt; (2)* Takashi Masuda &lt;masutaka@example.","contentSnippet":"[インストール＆鍵の作成方法]http://ykondou.dyndns.org:8080/columns/gpg.shtml http://linux.nikkeibp.co.jp/column/inflection/4/2.org.html http://www1.plala.or.jp/fukafuka/trouble/email.html http://tty0.exblog.jp/646860 [PGP 公開鍵サーバー]http://pgp.nic.ad.jp/jindex.html [“やばいメモリーを使用しています!“と言われてしまう]# ls -al `which gpg` -rwxr-xr-x 1 root root 560252 Aug 10 2001 /usr/bin/gpg* # chmod 4755 `which gpg`\t# (4755 or u+s) # ls -al `which gpg` -rwsr-xr-x 1 root root 560252 Aug 10 2001 /usr/bin/gpg* [uid を削除する]% gpg --edit-key masutaka.net@gmail.com (snip) (1). Takashi Masuda <masutaka.net@gmail.com> (2) Takashi Masuda <masutaka@example.com> コマンド> uid 2 (1). Takashi Masuda <masutaka.net@gmail.com> (2)* Takashi Masuda <masutaka@example.","link":"https://masutaka.net/2002-05-01-3/","isoDate":"2002-05-01T02:00:00.000Z","dateMiliSeconds":1020218400000,"authorName":"masutaka"},{"title":"CVSROOT の優先度","content":"&lsquo;cvs -d CVSROOT&rsquo; &gt; &lsquo;./CVS/Root&rsquo; &gt; &lsquo;$CVSROOT&rsquo;","contentSnippet":"‘cvs -d CVSROOT’ > ‘./CVS/Root’ > ‘$CVSROOT’","link":"https://masutaka.net/2002-05-01-2/","isoDate":"2002-05-01T01:00:00.000Z","dateMiliSeconds":1020214800000,"authorName":"masutaka"},{"title":"パネル(タスクバー)の起動方法","content":"% panel","contentSnippet":"% panel","link":"https://masutaka.net/2002-05-01-1/","isoDate":"2002-05-01T00:00:00.000Z","dateMiliSeconds":1020211200000,"authorName":"masutaka"},{"title":"migemo を cygwin でコンパイルする方法 (by 2ch)","content":"migemoをmakeしている最中に、\n./migemo-regex.rb:39:in `map&rsquo;: stack level too deep (SystemStackError)\nと、怒られてしまいます。\n何か解決策はありますかね？\nシステムのスタックサイズがたりない。\n% limit stacksize 2048k\nとかで、うまくいくはず。\n[ruby-list:34456]あたりを参照。","contentSnippet":"migemoをmakeしている最中に、./migemo-regex.rb:39:in `map’: stack level too deep (SystemStackError)と、怒られてしまいます。何か解決策はありますかね？システムのスタックサイズがたりない。% limit stacksize 2048kとかで、うまくいくはず。[ruby-list:34456]あたりを参照。","link":"https://masutaka.net/2002-04-30-2/","isoDate":"2002-04-30T01:00:00.000Z","dateMiliSeconds":1020128400000,"authorName":"masutaka"},{"title":"XFree86 の version とかを表示する","content":"% xdpyinfo\n% X -version","contentSnippet":"% xdpyinfo% X -version","link":"https://masutaka.net/2002-04-30-1/","isoDate":"2002-04-30T00:00:00.000Z","dateMiliSeconds":1020124800000,"authorName":"masutaka"},{"title":"mg の使い方","content":"% mg -n -jjis -X&rsquo;nkf -e'","contentSnippet":"% mg -n -jjis -X’nkf -e'","link":"https://masutaka.net/2002-04-27-1/","isoDate":"2002-04-27T00:00:00.000Z","dateMiliSeconds":1019865600000,"authorName":"masutaka"},{"title":"編集関連の tips","content":"・編集の過程で強調がおかしくなったら&hellip;\nM-x facemenu-set-default (M-g d)\n・別フレームに関数名を表示する？？？\nM-x speedbar\n・右端で折り返したり、折り返さなかったり&hellip;\nM-x toggle-truncate-lines","contentSnippet":"・編集の過程で強調がおかしくなったら…M-x facemenu-set-default (M-g d)・別フレームに関数名を表示する？？？M-x speedbar・右端で折り返したり、折り返さなかったり…M-x toggle-truncate-lines","link":"https://masutaka.net/2002-04-26-1/","isoDate":"2002-04-26T00:00:00.000Z","dateMiliSeconds":1019779200000,"authorName":"masutaka"},{"title":"直前の正規表現の回数を指定 from Emacs21","content":"(string-match &ldquo;^\\(バタ\\)\\{2\\}$&rdquo; &ldquo;バタバタ&rdquo;)\n0\n(string-match &ldquo;^\\(バタ\\)\\{2\\}$&rdquo; &ldquo;バタ&rdquo;)\nnil","contentSnippet":"(string-match “^\\(バタ\\)\\{2\\}$” “バタバタ”)0(string-match “^\\(バタ\\)\\{2\\}$” “バタ”)nil","link":"https://masutaka.net/2002-04-25-2/","isoDate":"2002-04-25T01:00:00.000Z","dateMiliSeconds":1019696400000,"authorName":"masutaka"},{"title":"crontab で設定されている環境変数","content":"HOME=/home/masutaka LOGNAME=masutaka PATH=/usr/bin: SHELL=/usr/bin/sh TZ=Japan  PWD=/home/masutaka HOSTNAME=chronicle.nifty.com MACHTYPE=i386-redhat-linux-gnu LOGNAME=masutaka SHLVL=1 SHELL=/bin/sh HOSTTYPE=i386 OSTYPE=linux-gnu HOME=/home/masutaka TERM=dumb PATH=/usr/bin:/bin _=/usr/bin/env &lt;Ubuntu 14.04&gt;\nLANGUAGE=en_US:\nHOME=/home/masutaka\nLOGNAME=masutaka\nPATH=/usr/bin:/bin\nLANG=en_US.UTF-8\nSHELL=/bin/sh\nPWD=/home/masutaka\n追記(2014-09-28):\nUbuntu 14.04を追加しました","contentSnippet":"HOME=/home/masutaka LOGNAME=masutaka PATH=/usr/bin: SHELL=/usr/bin/sh TZ=Japan  PWD=/home/masutaka HOSTNAME=chronicle.nifty.com MACHTYPE=i386-redhat-linux-gnu LOGNAME=masutaka SHLVL=1 SHELL=/bin/sh HOSTTYPE=i386 OSTYPE=linux-gnu HOME=/home/masutaka TERM=dumb PATH=/usr/bin:/bin _=/usr/bin/env <Ubuntu 14.04>LANGUAGE=en_US:HOME=/home/masutakaLOGNAME=masutakaPATH=/usr/bin:/binLANG=en_US.UTF-8SHELL=/bin/shPWD=/home/masutaka追記(2014-09-28):Ubuntu 14.04を追加しました","link":"https://masutaka.net/2002-04-25-1/","isoDate":"2002-04-25T00:00:00.000Z","dateMiliSeconds":1019692800000,"authorName":"masutaka"},{"title":"IME と FEP by 2ch","content":"[IME] http://computers.yahoo.co.jp/dict/software/application/im/560.html Windowsシステム上で日本語や中国語など、\n文字の多い言語で入力を行なうために必要な変換ソフト。\n日本語用の WnnIMEとしては、Windows 95/98に標準で添付されている\nMicrosoft社のMS-IMEの他に、ジャストシステムのATOKやバックスのVJEなどが有名。\n[FEP] http://computers.yahoo.co.jp/dict/software/application/im/446.html 古くは、大型コンピュータシステムにおいて、\nメインプロセッサの負担を軽減するためにデータの前処理やデータ転送の制御などを行う\n補助プロセッサのことをあらわしていた。\n転じて、データの前処理や入力の補助を行う装置やソフトウェア一般を指すようになり、\nMS-DOSシステム上では日本語を入力するために用いる、\nかな漢字変換ソフトウェア(ジャストシステムの「ATOK」など)の総称として定着した。\n現在では日本語入力ソフトウェアはIM(Input Method)と呼ばれることが多いが、\n未だにこの意味でFEPという用語を用いる場合もある。","contentSnippet":"[IME] http://computers.yahoo.co.jp/dict/software/application/im/560.html Windowsシステム上で日本語や中国語など、文字の多い言語で入力を行なうために必要な変換ソフト。日本語用の WnnIMEとしては、Windows 95/98に標準で添付されているMicrosoft社のMS-IMEの他に、ジャストシステムのATOKやバックスのVJEなどが有名。[FEP] http://computers.yahoo.co.jp/dict/software/application/im/446.html 古くは、大型コンピュータシステムにおいて、メインプロセッサの負担を軽減するためにデータの前処理やデータ転送の制御などを行う補助プロセッサのことをあらわしていた。転じて、データの前処理や入力の補助を行う装置やソフトウェア一般を指すようになり、MS-DOSシステム上では日本語を入力するために用いる、かな漢字変換ソフトウェア(ジャストシステムの「ATOK」など)の総称として定着した。現在では日本語入力ソフトウェアはIM(Input Method)と呼ばれることが多いが、未だにこの意味でFEPという用語を用いる場合もある。","link":"https://masutaka.net/2002-04-23-2/","isoDate":"2002-04-23T01:00:00.000Z","dateMiliSeconds":1019523600000,"authorName":"masutaka"},{"title":"ICE の起動順番","content":"by 2ch\n何度言ってもICE、電源、ボードの順にスイッチを入れることを守ってくれない人がいます。","contentSnippet":"by 2ch何度言ってもICE、電源、ボードの順にスイッチを入れることを守ってくれない人がいます。","link":"https://masutaka.net/2002-04-23-1/","isoDate":"2002-04-23T00:00:00.000Z","dateMiliSeconds":1019520000000,"authorName":"masutaka"},{"title":"crontab アホなページ","content":"crontab について、実用的だけどアホなページを見つけた。\nhttp://www.linux.or.jp/JM/html/cron/man5/crontab.5.html ","contentSnippet":"crontab について、実用的だけどアホなページを見つけた。http://www.linux.or.jp/JM/html/cron/man5/crontab.5.html","link":"https://masutaka.net/2002-04-21-2/","isoDate":"2002-04-21T01:00:00.000Z","dateMiliSeconds":1019350800000,"authorName":"masutaka"},{"title":"xv のコンパイル","content":"|% tar xvzf xv-3.10a.tar.gz\n|% tar xvzf jpegsrc.v6b.tar.gz\n|% tar xvzf tiff-v3.4-tar.gz\n|% tar xvzf xv310a-jp-extension-rev5.3.3.tar.gz\n|% rm -rf xv-3.10a/jpeg ; mv jpeg-6b xv-3.10a/jpeg\n|% rm -rf xv-3.10a/tiff ; mv tiff-v3.4/ xv-3.10a/tiff\n|% cd xv-3.10a\n|% cat ../xv-3.10a.JPEG-patch | patch\n|% cat ../xv-3.10a.TIFF-patch | patch\n|% cat ../grabpatch | patch\n|% cat ../longname.patch | patch\n|% cat ../mp-tiff-patch | patch\n|% cat ../pdf.patch | patch\n|% cat ../vispatch | patch","contentSnippet":"|% tar xvzf xv-3.10a.tar.gz|% tar xvzf jpegsrc.v6b.tar.gz|% tar xvzf tiff-v3.4-tar.gz|% tar xvzf xv310a-jp-extension-rev5.3.3.tar.gz|% rm -rf xv-3.10a/jpeg ; mv jpeg-6b xv-3.10a/jpeg|% rm -rf xv-3.10a/tiff ; mv tiff-v3.4/ xv-3.10a/tiff|% cd xv-3.10a|% cat ../xv-3.10a.JPEG-patch | patch|% cat ../xv-3.10a.TIFF-patch | patch|% cat ../grabpatch | patch|% cat ../longname.patch | patch|% cat ../mp-tiff-patch | patch|% cat ../pdf.patch | patch|% cat ../vispatch | patch","link":"https://masutaka.net/2002-04-21-1/","isoDate":"2002-04-21T00:00:00.000Z","dateMiliSeconds":1019347200000,"authorName":"masutaka"},{"title":"分散と標準偏差","content":"Xの出現する確率を Pとすると\n n 期待値 E(X) = Σ(Xk * Pk) k=1 E(X) = m とすると\n n 2 分散 V(X) = Σ((Xk - m) * Pk) k=1 標準偏差 σ(X) = √V(X) ","contentSnippet":"Xの出現する確率を Pとすると n 期待値 E(X) = Σ(Xk * Pk) k=1 E(X) = m とすると n 2 分散 V(X) = Σ((Xk - m) * Pk) k=1 標準偏差 σ(X) = √V(X)","link":"https://masutaka.net/2002-04-20-2/","isoDate":"2002-04-20T01:00:00.000Z","dateMiliSeconds":1019264400000,"authorName":"masutaka"},{"title":"Mozilla のビルド","content":"|# rpm -ivh flex-2.5.4a-15.i386.rpm\n|% tar xvzf libIDL-0.6.8.tar.gz\n|% cd libIDL-0.6.8\n|% ./configure ; make\n|# make install\n|% tar xvjf mozilla-source-1.0.rc1.tar.bz2\n|% cd mozilla\n|% ./configure ; make\n|# make install","contentSnippet":"|# rpm -ivh flex-2.5.4a-15.i386.rpm|% tar xvzf libIDL-0.6.8.tar.gz|% cd libIDL-0.6.8|% ./configure ; make|# make install|% tar xvjf mozilla-source-1.0.rc1.tar.bz2|% cd mozilla|% ./configure ; make|# make install","link":"https://masutaka.net/2002-04-20-1/","isoDate":"2002-04-20T00:00:00.000Z","dateMiliSeconds":1019260800000,"authorName":"masutaka"},{"title":"世界一長い英単語","content":"法律の分野で、蔑視、軽視を意味する\nFloccinaucinihilipilificationです。２９語のレターを持ちます。\n追記(2011-12-21):\nもっと長い単語があった。\nloading...\n   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i  ","contentSnippet":"法律の分野で、蔑視、軽視を意味するFloccinaucinihilipilificationです。２９語のレターを持ちます。追記(2011-12-21):もっと長い単語があった。loading...   if (localStorage.getItem(\"pref-theme\") === \"light\") { const elements = document.getElementsByClassName('twitter-tweet'); for (let i = 0; i","link":"https://masutaka.net/2002-04-18-2/","isoDate":"2002-04-18T01:00:00.000Z","dateMiliSeconds":1019091600000,"authorName":"masutaka"},{"title":"kakasi","content":"% echo &lsquo;山田&rsquo; | kakasi -JH\nやまだ","contentSnippet":"% echo ‘山田’ | kakasi -JHやまだ","link":"https://masutaka.net/2002-04-18-1/","isoDate":"2002-04-18T00:00:00.000Z","dateMiliSeconds":1019088000000,"authorName":"masutaka"},{"title":"etagsのヘルプ","content":"http://www.jagat.or.jp/sgml/emacs/etags.htm C++で使用する場合は、etags のオプションに &ndash;c++ &ndash;members を付けると良いでしょう。","contentSnippet":"http://www.jagat.or.jp/sgml/emacs/etags.htm C++で使用する場合は、etags のオプションに –c++ –members を付けると良いでしょう。","link":"https://masutaka.net/2002-04-16-2/","isoDate":"2002-04-16T01:00:00.000Z","dateMiliSeconds":1018918800000,"authorName":"masutaka"},{"title":"TAGS コマンドまとめ","content":"M-x find-tag (M-.)\tシンボルの定義部分に飛ぶ。\nM-x pop-tag-mark (M-*)\t前の状態に飛ぶ。\nM-x tags-search\tシンボルを検索させる。\nM-x tags-loop-continue (M-,)\t次の候補に飛ぶ。(検索状態で実行)\nM-x find-tag-other-window (C-x 4 .)\t定義部分を別ウィンドウに表示。\nM-x find-tag-other-frame (C-x 5 .)\t定義部分を別フレームに表示。\nM-x complete-symbol (M-TAB)\tシンボル名の補完(タブテーブルが読み込まれている時)\nM-x visit-tags-table\tタブテーブルを読み込み直す。","contentSnippet":"M-x find-tag (M-.)\tシンボルの定義部分に飛ぶ。M-x pop-tag-mark (M-*)\t前の状態に飛ぶ。M-x tags-search\tシンボルを検索させる。M-x tags-loop-continue (M-,)\t次の候補に飛ぶ。(検索状態で実行)M-x find-tag-other-window (C-x 4 .)\t定義部分を別ウィンドウに表示。M-x find-tag-other-frame (C-x 5 .)\t定義部分を別フレームに表示。M-x complete-symbol (M-TAB)\tシンボル名の補完(タブテーブルが読み込まれている時)M-x visit-tags-table\tタブテーブルを読み込み直す。","link":"https://masutaka.net/2002-04-16-1/","isoDate":"2002-04-16T00:00:00.000Z","dateMiliSeconds":1018915200000,"authorName":"masutaka"},{"title":"ワイルドカード","content":"sh系は一致しないとエラーを出すが、csh系は出さない。\n-&gt; 素直にfindしたほうがいいかもね。\n% ls *.{c,h,cxx}\nanimal.c wordfreq.c wordfreq.cxx@ wordfreq.h","contentSnippet":"sh系は一致しないとエラーを出すが、csh系は出さない。-> 素直にfindしたほうがいいかもね。% ls *.{c,h,cxx}animal.c wordfreq.c wordfreq.cxx@ wordfreq.h","link":"https://masutaka.net/2002-04-15-3/","isoDate":"2002-04-15T02:00:00.000Z","dateMiliSeconds":1018836000000,"authorName":"masutaka"},{"title":"XBM，XPM (X11 Bitmap，X11 Pixmap) ","content":"[ビットマップ][非圧縮][RGB，グレースケール]\nX Window System用のアイコンやマウスカーソルを定義したり作成したりする場合や，\nビットマップ画像をX Window Systemのプログラム中で取り扱う場合に使用されるフォー\nマットです．XBM形式の画像では2色，XPM形式の画像では複数色を扱えます．また圧縮\nは行われません．\nファイルの中にはC言語の配列の形態で画像が保存されており，#defineによるサイズ設\n定と，配列の要素として定義されたデータ本体からなるため，直接C言語 のプログラム\nに取り込んで利用できます．拡張子は一般的に.xbmや.xpmです．","contentSnippet":"[ビットマップ][非圧縮][RGB，グレースケール]X Window System用のアイコンやマウスカーソルを定義したり作成したりする場合や，ビットマップ画像をX Window Systemのプログラム中で取り扱う場合に使用されるフォーマットです．XBM形式の画像では2色，XPM形式の画像では複数色を扱えます．また圧縮は行われません．ファイルの中にはC言語の配列の形態で画像が保存されており，#defineによるサイズ設定と，配列の要素として定義されたデータ本体からなるため，直接C言語 のプログラムに取り込んで利用できます．拡張子は一般的に.xbmや.xpmです．","link":"https://masutaka.net/2002-04-15-2/","isoDate":"2002-04-15T01:00:00.000Z","dateMiliSeconds":1018832400000,"authorName":"masutaka"},{"title":"16進数から10進数への変換","content":"例えば ?\\x20を評価すると、32になる。\n追記(2002-04-17):\n上のはこれはあくまでchar型を16進表示したものだから、\n16進数を10進数に変換させるには不適当。\nこっちが正解\n(read &ldquo;#x20&rdquo;)\n32","contentSnippet":"例えば ?\\x20を評価すると、32になる。追記(2002-04-17):上のはこれはあくまでchar型を16進表示したものだから、16進数を10進数に変換させるには不適当。こっちが正解(read “#x20”)32","link":"https://masutaka.net/2002-04-15-1/","isoDate":"2002-04-15T00:00:00.000Z","dateMiliSeconds":1018828800000,"authorName":"masutaka"},{"title":"ICE は In Circuit Emulator の略称 ","content":"","contentSnippet":"","link":"https://masutaka.net/2002-04-14-1/","isoDate":"2002-04-14T00:00:00.000Z","dateMiliSeconds":1018742400000,"authorName":"masutaka"},{"title":"ミートソース","content":"十分にタマネギを炒めてからトマトを入れろ。\nそうしないと、もさもさしたソースになってしまう。","contentSnippet":"十分にタマネギを炒めてからトマトを入れろ。そうしないと、もさもさしたソースになってしまう。","link":"https://masutaka.net/2002-04-12-2/","isoDate":"2002-04-12T01:00:00.000Z","dateMiliSeconds":1018573200000,"authorName":"masutaka"},{"title":"ダイの大冒険","content":"メドローア・・・メラ+ヒャド+アロー","contentSnippet":"メドローア・・・メラ+ヒャド+アロー","link":"https://masutaka.net/2002-04-12-1/","isoDate":"2002-04-12T00:00:00.000Z","dateMiliSeconds":1018569600000,"authorName":"masutaka"},{"title":"8bpp の面順次データの見方 ","content":"8bppの面順次データはphotoshopのrawファイルとして見ることが出来ます。\n&lt;方法&gt;\n1.ファイルを&quot;汎用フォーマット(*.RAW)&ldquo;で開く。\n2.”汎用オプション”ダイアログが表示されるので，フォーマットと色とbppを入力\n（ヘッダは0で良いはず）","contentSnippet":"8bppの面順次データはphotoshopのrawファイルとして見ることが出来ます。<方法>1.ファイルを\"汎用フォーマット(*.RAW)“で開く。2.”汎用オプション”ダイアログが表示されるので，フォーマットと色とbppを入力（ヘッダは0で良いはず）","link":"https://masutaka.net/2002-04-11-2/","isoDate":"2002-04-11T01:00:00.000Z","dateMiliSeconds":1018486800000,"authorName":"masutaka"},{"title":"shell の tips","content":"% cd - [RET] 一つ前のディレクトリに戻る。\n% pushd [RET] ディレクトリスタックに入っているディレクトリに戻る。\n% popd [RET] ディレクトリスタックから削除。\n% dirs [RET] カレントディレクトリをディレクトリスタックに追加。","contentSnippet":"% cd - [RET] 一つ前のディレクトリに戻る。% pushd [RET] ディレクトリスタックに入っているディレクトリに戻る。% popd [RET] ディレクトリスタックから削除。% dirs [RET] カレントディレクトリをディレクトリスタックに追加。","link":"https://masutaka.net/2002-04-11-1/","isoDate":"2002-04-11T00:00:00.000Z","dateMiliSeconds":1018483200000,"authorName":"masutaka"},{"title":"Solaris9 での double と long long のサイズ","content":"sizeof(double) == 8\nsizeof(long long) == 8","contentSnippet":"sizeof(double) == 8sizeof(long long) == 8","link":"https://masutaka.net/2002-04-09-2/","isoDate":"2002-04-09T01:00:00.000Z","dateMiliSeconds":1018314000000,"authorName":"masutaka"},{"title":"~/.screenrc","content":"コピーモードのウザイメッセージを消す。\n nethack off\n ","contentSnippet":"コピーモードのウザイメッセージを消す。 nethack off","link":"https://masutaka.net/2002-04-09-1/","isoDate":"2002-04-09T00:00:00.000Z","dateMiliSeconds":1018310400000,"authorName":"masutaka"},{"title":"cvs でリビジョンを戻す。","content":"% cp [ファイル名] [バックアップファイル名]\n% cvs update -p -r [リビジョン番号] [ファイル名] &gt; [ファイル名]","contentSnippet":"% cp [ファイル名] [バックアップファイル名]% cvs update -p -r [リビジョン番号] [ファイル名] > [ファイル名]","link":"https://masutaka.net/2002-04-05-2/","isoDate":"2002-04-05T01:00:00.000Z","dateMiliSeconds":1017968400000,"authorName":"masutaka"},{"title":"add-hook","content":"add-hook()の３つ目の引数にtを指定すると、\nlistの最後に追加してくれる。","contentSnippet":"add-hook()の３つ目の引数にtを指定すると、listの最後に追加してくれる。","link":"https://masutaka.net/2002-04-05-1/","isoDate":"2002-04-05T00:00:00.000Z","dateMiliSeconds":1017964800000,"authorName":"masutaka"},{"title":"M-/の候補を表示する","content":"M-C-/ (M-x dabbrev-completion)","contentSnippet":"M-C-/ (M-x dabbrev-completion)","link":"https://masutaka.net/2002-04-04-3/","isoDate":"2002-04-04T02:00:00.000Z","dateMiliSeconds":1017885600000,"authorName":"masutaka"},{"title":"rgrep","content":"JISコードのファイルも検索できます。\nhttp://homepage1.nifty.com/~tetsu/ruby/cmd/rg.html ","contentSnippet":"JISコードのファイルも検索できます。http://homepage1.nifty.com/~tetsu/ruby/cmd/rg.html","link":"https://masutaka.net/2002-04-04-2/","isoDate":"2002-04-04T01:00:00.000Z","dateMiliSeconds":1017882000000,"authorName":"masutaka"},{"title":"カレントディレクトリだけの使用量","content":"% cd $HOME\n% du -s\n46708\t.","contentSnippet":"% cd $HOME% du -s46708\t.","link":"https://masutaka.net/2002-04-04-1/","isoDate":"2002-04-04T00:00:00.000Z","dateMiliSeconds":1017878400000,"authorName":"masutaka"},{"title":"chasen インストール","content":"% ./configure\n% make\n% make install","contentSnippet":"% ./configure% make% make install","link":"https://masutaka.net/2002-04-03-3/","isoDate":"2002-04-03T02:00:00.000Z","dateMiliSeconds":1017799200000,"authorName":"masutaka"},{"title":"アクセス権に s ビットを立てる","content":"% mkdir aaa\ndrwxrwxr-x 2 masutaka 512 Apr 3 10:42 aaa/\n% chmod g+s aaa\ndrwxrwsr-x 2 masutaka 512 Apr 3 10:42 aaa/\n% chmod g-s aaa\ndrwxrwxr-x 2 masutaka 512 Apr 3 10:42 aaa/","contentSnippet":"% mkdir aaadrwxrwxr-x 2 masutaka 512 Apr 3 10:42 aaa/% chmod g+s aaadrwxrwsr-x 2 masutaka 512 Apr 3 10:42 aaa/% chmod g-s aaadrwxrwxr-x 2 masutaka 512 Apr 3 10:42 aaa/","link":"https://masutaka.net/2002-04-03-2/","isoDate":"2002-04-03T01:00:00.000Z","dateMiliSeconds":1017795600000,"authorName":"masutaka"},{"title":"umask","content":"|# 新規作成ファイルのパーミッションは、644。\n|umask 022\nということをしていたが、これだと、CVSに新規登録するときに、表が自分以外\n書き込めなくなってしまう。もちろん他人が書き込めるようにして表出しすれ\nばいいけど、多分忘れるでしょ。","contentSnippet":"|# 新規作成ファイルのパーミッションは、644。|umask 022ということをしていたが、これだと、CVSに新規登録するときに、表が自分以外書き込めなくなってしまう。もちろん他人が書き込めるようにして表出しすればいいけど、多分忘れるでしょ。","link":"https://masutaka.net/2002-04-03-1/","isoDate":"2002-04-03T00:00:00.000Z","dateMiliSeconds":1017792000000,"authorName":"masutaka"},{"title":"gcc の最適化オプション","content":"gccに、オプション&rsquo;-O2&rsquo;を付けると、コードを最適化できる。\n知っていたけど、gdbの変な動きと結び付かなかった。。。","contentSnippet":"gccに、オプション’-O2’を付けると、コードを最適化できる。知っていたけど、gdbの変な動きと結び付かなかった。。。","link":"https://masutaka.net/2002-04-01-2/","isoDate":"2002-04-01T01:00:00.000Z","dateMiliSeconds":1017622800000,"authorName":"masutaka"},{"title":"プライベート IP アドレス","content":"URL: http://oku.edu.mie-u.ac.jp/~okumura/networking/private-ip.html ","contentSnippet":"URL: http://oku.edu.mie-u.ac.jp/~okumura/networking/private-ip.html","link":"https://masutaka.net/2002-04-01-1/","isoDate":"2002-04-01T00:00:00.000Z","dateMiliSeconds":1017619200000,"authorName":"masutaka"},{"title":"インライン関数","content":"GNUコンパイラだと、\ninline void func();\nとかでインライン関数になるらしい。","contentSnippet":"GNUコンパイラだと、inline void func();とかでインライン関数になるらしい。","link":"https://masutaka.net/2002-03-26-1/","isoDate":"2002-03-26T00:00:00.000Z","dateMiliSeconds":1017100800000,"authorName":"masutaka"},{"title":".forward 注意","content":"ホームに誰でも書き込めるようにしておくと\nその人の .forward は効かないみたいです。\nでもそれは20日にこっそり直しておいたはずなんだけどなぁ\n.forward についてもそういうのがあるかもしれないですね。\nいじっているうちに直りました。","contentSnippet":"ホームに誰でも書き込めるようにしておくとその人の .forward は効かないみたいです。でもそれは20日にこっそり直しておいたはずなんだけどなぁ.forward についてもそういうのがあるかもしれないですね。いじっているうちに直りました。","link":"https://masutaka.net/2002-03-22-1/","isoDate":"2002-03-22T00:00:00.000Z","dateMiliSeconds":1016755200000,"authorName":"masutaka"},{"title":"UNIX で MS-Excel と MS-Word なファイルを見るツール","content":"MS-WordTOHtml -&gt; wvHtml\nMS-ExcelTOHtml -&gt; xlhtml","contentSnippet":"MS-WordTOHtml -> wvHtmlMS-ExcelTOHtml -> xlhtml","link":"https://masutaka.net/2002-03-21-1/","isoDate":"2002-03-21T00:00:00.000Z","dateMiliSeconds":1016668800000,"authorName":"masutaka"},{"title":"WindowManager から Emacs を起動すると環境変数が読み込まれない","content":"~/.zshenvに `. $HOME/.zshrc&rsquo;を書いて解決した。","contentSnippet":"~/.zshenvに `. $HOME/.zshrc’を書いて解決した。","link":"https://masutaka.net/2002-03-17-1/","isoDate":"2002-03-17T00:00:00.000Z","dateMiliSeconds":1016323200000,"authorName":"masutaka"},{"title":"Xawd3d と Xpm のインストール","content":"/usr/X11R6/include/X11/Xaw3dに ./xc/lib/Xawd3d/*.hをコピーして無理やりコンパイルを通した。\nXpmは X11R6をインストールしたらコンパイルすることができた。","contentSnippet":"/usr/X11R6/include/X11/Xaw3dに ./xc/lib/Xawd3d/*.hをコピーして無理やりコンパイルを通した。Xpmは X11R6をインストールしたらコンパイルすることができた。","link":"https://masutaka.net/2002-03-16-1/","isoDate":"2002-03-16T00:00:00.000Z","dateMiliSeconds":1016236800000,"authorName":"masutaka"},{"title":"nfs で root からのアクセスを root として扱う方法","content":"[SunOS, exportfs nobody anonuidで検索]\nURL: http://www.ail.cs.gunma-u.ac.jp/~saito/nfs.html [Solaris, dfstab nobodyで検索]\nURL: http://home7.highway.ne.jp/dayan/tips/unix/solaris.html ","contentSnippet":"[SunOS, exportfs nobody anonuidで検索]URL: http://www.ail.cs.gunma-u.ac.jp/~saito/nfs.html [Solaris, dfstab nobodyで検索]URL: http://home7.highway.ne.jp/dayan/tips/unix/solaris.html","link":"https://masutaka.net/2002-03-15-1/","isoDate":"2002-03-15T00:00:00.000Z","dateMiliSeconds":1016150400000,"authorName":"masutaka"},{"title":"compfaceの本家","content":"ftp://metalab.unc.edu/pub/Linux/apps/graphics/convert/ ","contentSnippet":"ftp://metalab.unc.edu/pub/Linux/apps/graphics/convert/","link":"https://masutaka.net/2002-03-14-2/","isoDate":"2002-03-14T01:00:00.000Z","dateMiliSeconds":1016067600000,"authorName":"masutaka"},{"title":"バナー印刷","content":"UNIX上で誰が印刷したかわかるやつ。\nOHPとOHPの間にはさむ紙もバナー印刷という。","contentSnippet":"UNIX上で誰が印刷したかわかるやつ。OHPとOHPの間にはさむ紙もバナー印刷という。","link":"https://masutaka.net/2002-03-14-1/","isoDate":"2002-03-14T00:00:00.000Z","dateMiliSeconds":1016064000000,"authorName":"masutaka"},{"title":"script コマンド","content":"script と打つと、以後の標準出力をファイルに書き出してくれる。\nでも、結局sysの標準出力を書き出せなかった。","contentSnippet":"script と打つと、以後の標準出力をファイルに書き出してくれる。でも、結局sysの標準出力を書き出せなかった。","link":"https://masutaka.net/2002-03-13-1/","isoDate":"2002-03-13T00:00:00.000Z","dateMiliSeconds":1015977600000,"authorName":"masutaka"},{"title":"IdiskTool","content":"なんか時々同期が取れていないような&hellip;。","contentSnippet":"なんか時々同期が取れていないような…。","link":"https://masutaka.net/2002-03-12-1/","isoDate":"2002-03-12T00:00:00.000Z","dateMiliSeconds":1015891200000,"authorName":"masutaka"},{"title":"コマンドラインスタック","content":"(by 2ch)\nコマンド入力中に「あれ？、なんだっけ？」ってほかの作業がしたくなったとき\nESC-qで一時的にコマンドプロンプトにもどれるんですね。","contentSnippet":"(by 2ch)コマンド入力中に「あれ？、なんだっけ？」ってほかの作業がしたくなったときESC-qで一時的にコマンドプロンプトにもどれるんですね。","link":"https://masutaka.net/2002-03-11-1/","isoDate":"2002-03-11T00:00:00.000Z","dateMiliSeconds":1015804800000,"authorName":"masutaka"},{"title":"xmodmap","content":"% xmodmap -pke\nですべてのキーの対応表が見れるよ。","contentSnippet":"% xmodmap -pkeですべてのキーの対応表が見れるよ。","link":"https://masutaka.net/2002-03-06-2/","isoDate":"2002-03-06T01:00:00.000Z","dateMiliSeconds":1015376400000,"authorName":"masutaka"},{"title":"JBIG の略称","content":"二値画像符号化の標準\nJoint Bi-lebel Image experts Group","contentSnippet":"二値画像符号化の標準Joint Bi-lebel Image experts Group","link":"https://masutaka.net/2002-03-06-1/","isoDate":"2002-03-06T00:00:00.000Z","dateMiliSeconds":1015372800000,"authorName":"masutaka"},{"title":"CD-R のコピー","content":"デバイスの確認\n# cdrecord -scanbus # cd /root # mkdir cdrom iso-imageの作成\n# mkisofs -d -D -N -R -T -o [iso-imageファイル名] [ソースディレクトリ] マウントして中身を確認\n# mount -o loop [iso-imageファイル名] /mnt/cdrom # ls -alF /mnt/cdrom # umount /mnt/cdrom テスト書き込み\n# cdrecord dev=0,0,0 -v -dummy [iso-imageファイル名] 書きだし(DAO)\n# cdrecord dev=0,0,0 -v -dao -eject [iso-imageファイル名] CD-RWの消去\n# cdrecord dev=0,0,0 -v blank=fast ","contentSnippet":"デバイスの確認# cdrecord -scanbus # cd /root # mkdir cdrom iso-imageの作成# mkisofs -d -D -N -R -T -o [iso-imageファイル名] [ソースディレクトリ] マウントして中身を確認# mount -o loop [iso-imageファイル名] /mnt/cdrom # ls -alF /mnt/cdrom # umount /mnt/cdrom テスト書き込み# cdrecord dev=0,0,0 -v -dummy [iso-imageファイル名] 書きだし(DAO)# cdrecord dev=0,0,0 -v -dao -eject [iso-imageファイル名] CD-RWの消去# cdrecord dev=0,0,0 -v blank=fast","link":"https://masutaka.net/2002-03-05-3/","isoDate":"2002-03-05T02:00:00.000Z","dateMiliSeconds":1015293600000,"authorName":"masutaka"},{"title":"screen の使い方","content":" http://www.dekaino.net/screen/  http://www2.jan.ne.jp/~zinnia/screen/    分割: (PREFIX) S\n移動: (PREFIX) C-i\n削除: (PREFIX) X\n解除: (PREFIX) Q\nヘルプ: (PREFIX) ?\n ","contentSnippet":"http://www.dekaino.net/screen/  http://www2.jan.ne.jp/~zinnia/screen/    分割: (PREFIX) S移動: (PREFIX) C-i削除: (PREFIX) X解除: (PREFIX) Qヘルプ: (PREFIX) ?","link":"https://masutaka.net/2002-03-05-2/","isoDate":"2002-03-05T01:00:00.000Z","dateMiliSeconds":1015290000000,"authorName":"masutaka"},{"title":"認識されている CD-ROM ドライブを表示","content":"% cat /proc/ide/hdc/model\nTOSHIBA DVD-ROM SD-R2002","contentSnippet":"% cat /proc/ide/hdc/modelTOSHIBA DVD-ROM SD-R2002","link":"https://masutaka.net/2002-03-05-1/","isoDate":"2002-03-05T00:00:00.000Z","dateMiliSeconds":1015286400000,"authorName":"masutaka"},{"title":"emcws21 インストール","content":"できちゃった&hellip;。\n% tar xvzf emacs-21.1.tar.gz % zcat emcws-21.1-20020206.gz | patch -p0 % mkdir work ; cd work % ../emacs-21.1/configure --with-wnn --with-wnn-includes=/usr/include/wnn --with-wnn-libraries=/usr/lib --without-xim % make % su # make install ","contentSnippet":"できちゃった…。% tar xvzf emacs-21.1.tar.gz % zcat emcws-21.1-20020206.gz | patch -p0 % mkdir work ; cd work % ../emacs-21.1/configure --with-wnn --with-wnn-includes=/usr/include/wnn --with-wnn-libraries=/usr/lib --without-xim % make % su # make install","link":"https://masutaka.net/2002-03-03-4/","isoDate":"2002-03-03T03:00:00.000Z","dateMiliSeconds":1015124400000,"authorName":"masutaka"},{"title":"小技集","content":"port scanningする % nmap localhost プロセス名をプログラムの方から変更する /* 下記URLの 1.13に詳細が載っている。 */ #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(i32 argv, i8** argc) { /* プロセス名は 2048byteまで */ strcpy(argc[0], &#34;hoge&#34;); sleep (1000000); return 1; } xine-video-player # rpm -ivh alsa-driver-0.5.9a-1.SuSE-6.3.i386.rpm # rpm -ivh alsa-lib-0.5.9-1.SuSE-6.3.i386.rpm # rpm -ivh xine-lib-0.9.7-1k1.i586.rpm # rpm -ivh xine-ui-0.9.7-1k1.i586.rpm # rpm -ivh --force libpng-1.2.1-2.i386.rpm # rpm -ivh --force libpng-devel-1.2.1-2.i386.rpm # rpm -ivh xine-0.9.8-3.i386.rpm プロンプトにスクリーン番号を表示(tcsh) if(! $?WINDOW) then setenv WINDOW NO endif set prompt=&#34;[$WINDOW]%m[%~]%L% &#34; なんでも動画プレイヤーの MPlayer http://www.","contentSnippet":"port scanningする % nmap localhost プロセス名をプログラムの方から変更する /* 下記URLの 1.13に詳細が載っている。 */ #include <stdio.h> #include <string.h> int main(i32 argv, i8** argc) { /* プロセス名は 2048byteまで */ strcpy(argc[0], \"hoge\"); sleep (1000000); return 1; } xine-video-player # rpm -ivh alsa-driver-0.5.9a-1.SuSE-6.3.i386.rpm # rpm -ivh alsa-lib-0.5.9-1.SuSE-6.3.i386.rpm # rpm -ivh xine-lib-0.9.7-1k1.i586.rpm # rpm -ivh xine-ui-0.9.7-1k1.i586.rpm # rpm -ivh --force libpng-1.2.1-2.i386.rpm # rpm -ivh --force libpng-devel-1.2.1-2.i386.rpm # rpm -ivh xine-0.9.8-3.i386.rpm プロンプトにスクリーン番号を表示(tcsh) if(! $?WINDOW) then setenv WINDOW NO endif set prompt=\"[$WINDOW]%m[%~]%L% \" なんでも動画プレイヤーの MPlayer http://www.","link":"https://masutaka.net/2002-03-03-3/","isoDate":"2002-03-03T02:00:00.000Z","dateMiliSeconds":1015120800000,"authorName":"masutaka"},{"title":"タグブラウザではなくタブブラウザ","content":"時々どっちなのか分からなくなるが、タグブラウザではなくてタブブラウザらしい。\ngoogleで検索したら、タブブラウザの方が多かったので。","contentSnippet":"時々どっちなのか分からなくなるが、タグブラウザではなくてタブブラウザらしい。googleで検索したら、タブブラウザの方が多かったので。","link":"https://masutaka.net/2002-03-03-2/","isoDate":"2002-03-03T01:00:00.000Z","dateMiliSeconds":1015117200000,"authorName":"masutaka"},{"title":"いろいろなドキュメント","content":"他のディレクトリにもかなりたくさんのドキュメントが置いてある。\nhttp://www.sfc.wide.ad.jp/~nob/webdoc/c/faq-j.txt ","contentSnippet":"他のディレクトリにもかなりたくさんのドキュメントが置いてある。http://www.sfc.wide.ad.jp/~nob/webdoc/c/faq-j.txt","link":"https://masutaka.net/2002-03-03-1/","isoDate":"2002-03-03T00:00:00.000Z","dateMiliSeconds":1015113600000,"authorName":"masutaka"},{"title":"Mozilla のインストール","content":"Mozillaをインストールする時は、suで ~masutaka/.mozilla/を退避させて行なう。","contentSnippet":"Mozillaをインストールする時は、suで ~masutaka/.mozilla/を退避させて行なう。","link":"https://masutaka.net/2002-03-02-3/","isoDate":"2002-03-02T02:00:00.000Z","dateMiliSeconds":1015034400000,"authorName":"masutaka"},{"title":"gcc の内部定義の表示方法","content":" % gcc -E -dM -x c /dev/null\n ","contentSnippet":"% gcc -E -dM -x c /dev/null","link":"https://masutaka.net/2002-03-02-2/","isoDate":"2002-03-02T01:00:00.000Z","dateMiliSeconds":1015030800000,"authorName":"masutaka"},{"title":"tcsh メモ","content":"[ftpホストの補完]\n|set ftphosts=awk '{print $1}' $HOME/.lftp/bookmarks\n|complete ftp &lsquo;p/1/$ftphosts/&rsquo;\n[RPMのコマンド補完 (rpm -e するとインストール済みパッケージが補完される)]\n|complete rpm &lsquo;c/&ndash;/(short-circuit rebuild rmsource)/&rsquo;\n| &lsquo;c/-/(ivh Uvh)/&rsquo;\n| &rsquo;n/&ndash;rebuild/f:.src.rpm/&rsquo;\n| &rsquo;n/-i/f:.rpm/&rsquo; | &rsquo;n/-U/f:86.rpm/&rsquo;\n| &rsquo;n/-e/rpm -qa&rsquo;/\n[tarのオプション補完]\n|complete {gtar,tar} p/1/&quot;(cvf tvf xvf cvfz zxvf Ixvf)&quot;/\n| p/2/f:.{tar,tar.{bz2,gz,Z},taz,tgz}/\n| c/[ctx]vf*/&quot;(z O p B)&quot;/\n| n//f/\n[rcpでのリモートのファイル・ディレクトリ名補完]\n|complete rcp &lsquo;c%@:%set q=$:-0;set q=&quot;$q:s/@/ /&quot;;set q=&quot;$q:s/:/\\ | /&quot;;set q=($q &quot; &quot;);rsh $q[2] -l $q[1] ls -dp $q[3]\\*%&rsquo;\n| &lsquo;c%:%set q=$:-0;set q=&quot;$q:s/:/ /&quot;;set q=($q &quot; &quot;); \\ | rsh $q[1] ls -dp $q[2]\\*%&rsquo; &lsquo;c%@%$hosts%:&rsquo; | &lsquo;C@[.","contentSnippet":"[ftpホストの補完]|set ftphosts=awk '{print $1}' $HOME/.lftp/bookmarks|complete ftp ‘p/1/$ftphosts/’[RPMのコマンド補完 (rpm -e するとインストール済みパッケージが補完される)]|complete rpm ‘c/–/(short-circuit rebuild rmsource)/’| ‘c/-/(ivh Uvh)/’| ’n/–rebuild/f:.src.rpm/’| ’n/-i/f:.rpm/’ | ’n/-U/f:86.rpm/’| ’n/-e/rpm -qa’/[tarのオプション補完]|complete {gtar,tar} p/1/\"(cvf tvf xvf cvfz zxvf Ixvf)\"/| p/2/f:.{tar,tar.{bz2,gz,Z},taz,tgz}/| c/[ctx]vf*/\"(z O p B)\"/| n//f/[rcpでのリモートのファイル・ディレクトリ名補完]|complete rcp ‘c%@:%set q=$:-0;set q=\"$q:s/@/ /\";set q=\"$q:s/:/\\ | /\";set q=($q \" \");rsh $q[2] -l $q[1] ls -dp $q[3]\\*%’| ‘c%:%set q=$:-0;set q=\"$q:s/:/ /\";set q=($q \" \"); \\ | rsh $q[1] ls -dp $q[2]\\*%’ ‘c%@%$hosts%:’ | ‘C@[.","link":"https://masutaka.net/2002-03-02-1/","isoDate":"2002-03-02T00:00:00.000Z","dateMiliSeconds":1015027200000,"authorName":"masutaka"},{"title":"Red Hat で FreeWnn を利用する","content":"http://www.jp.redhat.com/manual/Doc72/RH-DOCS/rhl-cg-ja-7.2/japanese.html rootになって/etc/X11/xinit/xinitrc.d/xinputの該当個所を\n次のように&rsquo;#&lsquo;でコメントした後、ログインし直します。\n| #if [ X&quot;ldd /usr/X11R6/bin/kinput2 | grep libcanna&quot; = X ] ; then\n| XIM_ARGS=&quot;-wnnenvrc /etc/FreeWnn/ja/wnnenvrc&quot;\n| #else\n| #\tXIM_ARGS=&quot;-canna&quot;\n| #fi","contentSnippet":"http://www.jp.redhat.com/manual/Doc72/RH-DOCS/rhl-cg-ja-7.2/japanese.html rootになって/etc/X11/xinit/xinitrc.d/xinputの該当個所を次のように’#‘でコメントした後、ログインし直します。| #if [ X\"ldd /usr/X11R6/bin/kinput2 | grep libcanna\" = X ] ; then| XIM_ARGS=\"-wnnenvrc /etc/FreeWnn/ja/wnnenvrc\"| #else| #\tXIM_ARGS=\"-canna\"| #fi","link":"https://masutaka.net/2002-02-27-2/","isoDate":"2002-02-27T01:00:00.000Z","dateMiliSeconds":1014771600000,"authorName":"masutaka"},{"title":"なるほど！そういう参加方法もあったのか。 by 2ch","content":"とりあえず自分の興味がむくプロジェクトのメーリングリストとか\nIRCのチャネルに参加してみれば？\nもちろん開発系やメッセージカタログ／ドキュメント翻訳系のMLへの\n参加が理想だけど、ユーザー系のMLでも質問する側じゃなくて\n回答する側に回ればそれなりに知識は付くし、つまらない質問に\n開発者がわざわざ答える必要もなくなるからその分開発も進みやすく\nなる。","contentSnippet":"とりあえず自分の興味がむくプロジェクトのメーリングリストとかIRCのチャネルに参加してみれば？もちろん開発系やメッセージカタログ／ドキュメント翻訳系のMLへの参加が理想だけど、ユーザー系のMLでも質問する側じゃなくて回答する側に回ればそれなりに知識は付くし、つまらない質問に開発者がわざわざ答える必要もなくなるからその分開発も進みやすくなる。","link":"https://masutaka.net/2002-02-27-1/","isoDate":"2002-02-27T00:00:00.000Z","dateMiliSeconds":1014768000000,"authorName":"masutaka"},{"title":"外部変数の提供","content":"外部変数を提供する場合は、提供する人がCファイルに実体を持たなくてはいけない。\n当たり前といえば、当たり前か。。。","contentSnippet":"外部変数を提供する場合は、提供する人がCファイルに実体を持たなくてはいけない。当たり前といえば、当たり前か。。。","link":"https://masutaka.net/2002-02-26-2/","isoDate":"2002-02-26T01:00:00.000Z","dateMiliSeconds":1014685200000,"authorName":"masutaka"},{"title":"Xプロトコル (by 2ch)","content":"Xプロトコルについて、教えてくださいよ。このXプロトコルだけど、\nこのプロトコルの下位に、TCP、IP、などのプロトコルか位置してると\n思って間違いはないんですか？もしそうなら、HTTPや、FTPと同様、\nXプロトコルは、一般的なプロトコル階層のアプリケーション層に相当\nするプロトコルと考えていいのでしょうか？これが正しければ、Xの\nサーバとクライアントプロセスは、例えて言うなら、アパッチなどのH\nTTPサーバと、ブラウザというWEBクライアントの関係と全く同一って事\nになるけど、それで間違いは無いでしょうか？","contentSnippet":"Xプロトコルについて、教えてくださいよ。このXプロトコルだけど、このプロトコルの下位に、TCP、IP、などのプロトコルか位置してると思って間違いはないんですか？もしそうなら、HTTPや、FTPと同様、Xプロトコルは、一般的なプロトコル階層のアプリケーション層に相当するプロトコルと考えていいのでしょうか？これが正しければ、Xのサーバとクライアントプロセスは、例えて言うなら、アパッチなどのHTTPサーバと、ブラウザというWEBクライアントの関係と全く同一って事になるけど、それで間違いは無いでしょうか？","link":"https://masutaka.net/2002-02-26-1/","isoDate":"2002-02-26T00:00:00.000Z","dateMiliSeconds":1014681600000,"authorName":"masutaka"},{"title":"size_t 型","content":"sizeof演算子で生成される符号なし整数の型。","contentSnippet":"sizeof演算子で生成される符号なし整数の型。","link":"https://masutaka.net/2002-02-25-1/","isoDate":"2002-02-25T00:00:00.000Z","dateMiliSeconds":1014595200000,"authorName":"masutaka"},{"title":"qiv インストール","content":"CUIだけど、susie32に変わるものをやっと見つけた。\nhttp://www.klografx.net/qiv/ % tar xvzf qiv-1.7.tgz\n% cd qiv-1.7\n% make\nmake install ","contentSnippet":"CUIだけど、susie32に変わるものをやっと見つけた。http://www.klografx.net/qiv/ % tar xvzf qiv-1.7.tgz% cd qiv-1.7% makemake install","link":"https://masutaka.net/2002-02-24-1/","isoDate":"2002-02-24T00:00:00.000Z","dateMiliSeconds":1014508800000,"authorName":"masutaka"},{"title":"MPEG-player by 2ch","content":"DVDプレーヤの Xine というのがMPEGを再生するのに適している。\nRPMがあったはずなので検索して入れてみて。\nUIも使いやすくて便利。\n&hellip;らしいよ。","contentSnippet":"DVDプレーヤの Xine というのがMPEGを再生するのに適している。RPMがあったはずなので検索して入れてみて。UIも使いやすくて便利。…らしいよ。","link":"https://masutaka.net/2002-02-23-2/","isoDate":"2002-02-23T01:00:00.000Z","dateMiliSeconds":1014426000000,"authorName":"masutaka"},{"title":"elisp の謎","content":"(let ((user &#34;masutaka&#34;)) `((&#34;user&#34; . ,user)(&#34;popuser&#34; . ,user))) を評価すると当然\n((&#34;user&#34; . &#34;masutaka&#34;) (&#34;popuser&#34; . &#34;masutaka&#34;)) になるが、M-x edebug-defun している間は\nResult: ((&#34;user&#34; . #1=&#34;masutaka&#34;) (&#34;popuser&#34; . #1#)) とかになっている。謎だ。。。\n追記(2007-11-17):\n&ldquo;#&rdquo; はおそらくポインタみたいなもの。","contentSnippet":"(let ((user \"masutaka\")) `((\"user\" . ,user)(\"popuser\" . ,user))) を評価すると当然((\"user\" . \"masutaka\") (\"popuser\" . \"masutaka\")) になるが、M-x edebug-defun している間はResult: ((\"user\" . #1=\"masutaka\") (\"popuser\" . #1#)) とかになっている。謎だ。。。追記(2007-11-17):“#” はおそらくポインタみたいなもの。","link":"https://masutaka.net/2002-02-23-1/","isoDate":"2002-02-23T00:00:00.000Z","dateMiliSeconds":1014422400000,"authorName":"masutaka"},{"title":"セゾンカードのポイント引き替え","content":"2/13で終っていた。。。\nオレがあれだけカードを使ったのはなんだったのかと、小一時間問いつめられたいっ！！","contentSnippet":"2/13で終っていた。。。オレがあれだけカードを使ったのはなんだったのかと、小一時間問いつめられたいっ！！","link":"https://masutaka.net/2002-02-22-1/","isoDate":"2002-02-22T00:00:00.000Z","dateMiliSeconds":1014336000000,"authorName":"masutaka"},{"title":"nkf インストール","content":"自宅の namazu-rpm を削除して、ソースからコンパイルして入れ直した。\nその他のやりかたは、[2002-02-01-1] とそんなに変わらない。\nnkf-1.92-6 を削除して、nkf-171 をインストールしたくらい。\nrpm -e nkf-1.92-6 % mkdir nkf-171\n% mv nkf171.shar\n% chmod 777 nkf171.shar\n% ./nkf171.shar\n% vi Makefile\n% make\ncp nkf /usr/local/bin cp nkf.1* /usr/local/man/man1 ","contentSnippet":"自宅の namazu-rpm を削除して、ソースからコンパイルして入れ直した。その他のやりかたは、[2002-02-01-1] とそんなに変わらない。nkf-1.92-6 を削除して、nkf-171 をインストールしたくらい。rpm -e nkf-1.92-6 % mkdir nkf-171% mv nkf171.shar% chmod 777 nkf171.shar% ./nkf171.shar% vi Makefile% makecp nkf /usr/local/bin cp nkf.1* /usr/local/man/man1","link":"https://masutaka.net/2002-02-21-1/","isoDate":"2002-02-21T00:00:00.000Z","dateMiliSeconds":1014249600000,"authorName":"masutaka"},{"title":"X11R6.6 インストール","content":"% gtar xvzf xorg-[1-4].tar.gz\n% gtar xvzf Xaw3d-1.5.tar.gz\n% cd xc/config/cf\n% mv site.def site.def.bak\n% cp site.sample site.def\n|******************************************************************\n|*** site.sample\tFri Aug 18 04:41:48 2000\n|&mdash; site.def\tWed Feb 20 20:40:22 2002\n|***************\n|*** 50,67 ****\n| # endif\n| # endif\n|\n|- /*\n| #ifndef HasGcc2\n| #define HasGcc2 YES\n| #endif\n|- /\n|\n| #endif / BeforeVendorCF /\n|\n| #ifdef AfterVendorCF\n|\n| #define ProjectRoot /usr/X11R6.","contentSnippet":"% gtar xvzf xorg-[1-4].tar.gz% gtar xvzf Xaw3d-1.5.tar.gz% cd xc/config/cf% mv site.def site.def.bak% cp site.sample site.def|******************************************************************|*** site.sample\tFri Aug 18 04:41:48 2000|— site.def\tWed Feb 20 20:40:22 2002|***************|*** 50,67 ****| # endif| # endif||- /*| #ifndef HasGcc2| #define HasGcc2 YES| #endif|- /|| #endif / BeforeVendorCF /|| #ifdef AfterVendorCF|| #define ProjectRoot /usr/X11R6.","link":"https://masutaka.net/2002-02-20-3/","isoDate":"2002-02-20T02:00:00.000Z","dateMiliSeconds":1014170400000,"authorName":"masutaka"},{"title":"小技集","content":"・M-x rename-uniquely\n&lsquo;shell&rsquo; -&gt; &lsquo;shell&lt;2&gt;&lsquo;とか。\n・M-x eshell\n~ % (message &ldquo;(ﾟдﾟ)ウマー&rdquo;)\n(ﾟдﾟ)ウマー","contentSnippet":"・M-x rename-uniquely‘shell’ -> ‘shell<2>‘とか。・M-x eshell~ % (message “(ﾟдﾟ)ウマー”)(ﾟдﾟ)ウマー","link":"https://masutaka.net/2002-02-20-2/","isoDate":"2002-02-20T01:00:00.000Z","dateMiliSeconds":1014166800000,"authorName":"masutaka"},{"title":"pollen.el 修正されておりました","content":"http://plaza28.mbn.or.jp/~kitaj/XEmacs/pollen/pollen.html ","contentSnippet":"http://plaza28.mbn.or.jp/~kitaj/XEmacs/pollen/pollen.html","link":"https://masutaka.net/2002-02-20-1/","isoDate":"2002-02-20T00:00:00.000Z","dateMiliSeconds":1014163200000,"authorName":"masutaka"},{"title":"namazu で Not a catalog file","content":"やっと原因が分かった。FAQだった。。。\n【Solarisでmknmzを実行しようとすると、&ldquo;Not a catalog file&quot;と表示されてしまいます。】\n非常に場当たり的な対処ではありますが、configure時に &ndash;with-included-gettextオプションを追加して、\nSolaris gettextの代わりにnamazuに同梱されているGNU gettextライブラリを使うようにしてください。\nnamazuではSolaris gettextはサポートされていません。\nこれはGNU gettext とSolaris gettextではメッセージカタログの形式に互換性がなく、\nmknmzで使われているgettext.plスクリプトはGNUフォーマットのメッセージカタログしか取り扱えないためです。\nURL: http://www.namazu.org/FAQ.html.ja#not-a-catalog-file ","contentSnippet":"やっと原因が分かった。FAQだった。。。【Solarisでmknmzを実行しようとすると、“Not a catalog file\"と表示されてしまいます。】非常に場当たり的な対処ではありますが、configure時に –with-included-gettextオプションを追加して、Solaris gettextの代わりにnamazuに同梱されているGNU gettextライブラリを使うようにしてください。namazuではSolaris gettextはサポートされていません。これはGNU gettext とSolaris gettextではメッセージカタログの形式に互換性がなく、mknmzで使われているgettext.plスクリプトはGNUフォーマットのメッセージカタログしか取り扱えないためです。URL: http://www.namazu.org/FAQ.html.ja#not-a-catalog-file","link":"https://masutaka.net/2002-02-19-1/","isoDate":"2002-02-19T00:00:00.000Z","dateMiliSeconds":1014076800000,"authorName":"masutaka"},{"title":"Mew の添付ファイルの種類","content":"C-c C-aでファイルを添付した後、T で、ファイルの種類を決められる。\nMessage/Rfc822が、いわゆる転送メール。","contentSnippet":"C-c C-aでファイルを添付した後、T で、ファイルの種類を決められる。Message/Rfc822が、いわゆる転送メール。","link":"https://masutaka.net/2002-02-18-3/","isoDate":"2002-02-18T02:00:00.000Z","dateMiliSeconds":1013997600000,"authorName":"masutaka"},{"title":"Info-directory-list","content":"個人用の Infoファイルを読みに行ってくれるようになった。\nInfo-default-directory-list -&gt; Info-directory-list でした。","contentSnippet":"個人用の Infoファイルを読みに行ってくれるようになった。Info-default-directory-list -> Info-directory-list でした。","link":"https://masutaka.net/2002-02-18-2/","isoDate":"2002-02-18T01:00:00.000Z","dateMiliSeconds":1013994000000,"authorName":"masutaka"},{"title":"Wanderlust を使ってみた","content":"色使いとかイマイチだなあ。。。\nMewみたいに、iとかでメールをゲットできるのだろうか？\nどうでもいいけど、C-x C-f ~/.e [TAB]って打ったあとに、\n.elmo/も候補にはいるのがウザイ。","contentSnippet":"色使いとかイマイチだなあ。。。Mewみたいに、iとかでメールをゲットできるのだろうか？どうでもいいけど、C-x C-f ~/.e [TAB]って打ったあとに、.elmo/も候補にはいるのがウザイ。","link":"https://masutaka.net/2002-02-18-1/","isoDate":"2002-02-18T00:00:00.000Z","dateMiliSeconds":1013990400000,"authorName":"masutaka"},{"title":"testコマンド (by 2ch)","content":"test == [ だからこんなのがあったのか！\n|% ls -al which [\n|lrwxrwxrwx 1 root root 4 Jan 15 05:45 /usr/bin/[ -&gt; test\nあとついでに言っておくと、\n|read choise\nで何も入力せずただリターン押されると\n|[ = s ]\nという評価になり、&quot;[: s: unknown operand&quot;で激しく鬱になるので、\n|[ &ldquo;$choise&rdquo; = s ]\nと書くこと。","contentSnippet":"test == [ だからこんなのがあったのか！|% ls -al which [|lrwxrwxrwx 1 root root 4 Jan 15 05:45 /usr/bin/[ -> testあとついでに言っておくと、|read choiseで何も入力せずただリターン押されると|[ = s ]という評価になり、\"[: s: unknown operand\"で激しく鬱になるので、|[ “$choise” = s ]と書くこと。","link":"https://masutaka.net/2002-02-17-1/","isoDate":"2002-02-17T00:00:00.000Z","dateMiliSeconds":1013904000000,"authorName":"masutaka"},{"title":"crontab","content":"実体ファイルは、/var/spool/cron/crontabs\nデフォルトのパスは、/usr/binのみ。","contentSnippet":"実体ファイルは、/var/spool/cron/crontabsデフォルトのパスは、/usr/binのみ。","link":"https://masutaka.net/2002-02-16-2/","isoDate":"2002-02-16T01:00:00.000Z","dateMiliSeconds":1013821200000,"authorName":"masutaka"},{"title":"時刻合わせの罠","content":"date 02160035 2002年 2月 16日 土曜日 00:35:00 JST\n4/1にしてから、今日の日付に戻したら、ログイン画面にぶっ飛んだよ。","contentSnippet":"date 02160035 2002年 2月 16日 土曜日 00:35:00 JST4/1にしてから、今日の日付に戻したら、ログイン画面にぶっ飛んだよ。","link":"https://masutaka.net/2002-02-16-1/","isoDate":"2002-02-16T00:00:00.000Z","dateMiliSeconds":1013817600000,"authorName":"masutaka"},{"title":"filerogue","content":"こうやって起動するのか&hellip;。(IDiskToolも同様)\n% cat /usr/local/bin/filerogue\n#!/bin/sh\nexec /usr/java/jdk1.3.1_02/jre/bin/java -jar /usr/local/share/filerogue/filerogue.jar","contentSnippet":"こうやって起動するのか…。(IDiskToolも同様)% cat /usr/local/bin/filerogue#!/bin/shexec /usr/java/jdk1.3.1_02/jre/bin/java -jar /usr/local/share/filerogue/filerogue.jar","link":"https://masutaka.net/2002-02-14-3/","isoDate":"2002-02-14T02:00:00.000Z","dateMiliSeconds":1013652000000,"authorName":"masutaka"},{"title":"MS ゴシックを Linux で使う","content":"URL: http://www.coolbrain.net/xtt.html ","contentSnippet":"URL: http://www.coolbrain.net/xtt.html","link":"https://masutaka.net/2002-02-14-2/","isoDate":"2002-02-14T01:00:00.000Z","dateMiliSeconds":1013648400000,"authorName":"masutaka"},{"title":"カーソル下の face の種類を調べる","content":"M-x list-text-properties-at","contentSnippet":"M-x list-text-properties-at","link":"https://masutaka.net/2002-02-14-1/","isoDate":"2002-02-14T00:00:00.000Z","dateMiliSeconds":1013644800000,"authorName":"masutaka"},{"title":"nautilus","content":"RedHatで「ここからスタート」とか「masutakaのホーム」がなくなっていた原因。\nrpm -ivh nautilus-mozilla-1.0.4-43.i386.rpm nautilus-1.0.4-43.i386.rpm ","contentSnippet":"RedHatで「ここからスタート」とか「masutakaのホーム」がなくなっていた原因。rpm -ivh nautilus-mozilla-1.0.4-43.i386.rpm nautilus-1.0.4-43.i386.rpm","link":"https://masutaka.net/2002-02-13-5/","isoDate":"2002-02-13T04:00:00.000Z","dateMiliSeconds":1013572800000,"authorName":"masutaka"},{"title":"~/bin/Emacs","content":"面倒くさいのでこうした。\n% ln -s Emacs-wada Emacs\n今までの Emacsは、EMACSにリネームし、emacs-20.7を使うことにした。\nなんかエラーが出まくっているし、emcwsを捨てるいい機会なので。","contentSnippet":"面倒くさいのでこうした。% ln -s Emacs-wada Emacs今までの Emacsは、EMACSにリネームし、emacs-20.7を使うことにした。なんかエラーが出まくっているし、emcwsを捨てるいい機会なので。","link":"https://masutaka.net/2002-02-13-4/","isoDate":"2002-02-13T03:00:00.000Z","dateMiliSeconds":1013569200000,"authorName":"masutaka"},{"title":"InternetDisk","content":"http://www.idisk-just.com/?m=vup ブラウザからもファイルの Up/DownLoadができるようになった。(^-^)\nこれからは、フロッピーを使わずに済むかな？？？","contentSnippet":"http://www.idisk-just.com/?m=vup ブラウザからもファイルの Up/DownLoadができるようになった。(^-^)これからは、フロッピーを使わずに済むかな？？？","link":"https://masutaka.net/2002-02-13-3/","isoDate":"2002-02-13T02:00:00.000Z","dateMiliSeconds":1013565600000,"authorName":"masutaka"},{"title":"head と tail","content":"例えば -20 オプションで先頭または最後の 20 行を表示する。","contentSnippet":"例えば -20 オプションで先頭または最後の 20 行を表示する。","link":"https://masutaka.net/2002-02-13-2/","isoDate":"2002-02-13T01:00:00.000Z","dateMiliSeconds":1013562000000,"authorName":"masutaka"},{"title":"ファイルの分割＆連結","content":"|&lt;ファイルの分割&gt; ※ $LANG が &ldquo;ja&rdquo; のときには正しく動作しないそうだ。\n|(sh, bash, zsh etc&hellip;)\n|% LANG=C split -b [size] [filename]\n|(csh, tcsh)\n|% \\env LANG=C split -b [size] [filename]\n|\n|&lt;ファイルの連結&gt;\n|(Unix)\n|% cat [file1] [file2] [file3] &hellip; &gt; [filename]\n|(Dos)\n|&gt; copy /b [file1]+[file2]+[file3]+&hellip; [filename]\n|\n|&lt;詳細&gt;\n|(分割サイズの指定方法)\n| -b [size] &ndash;&gt; [size]Byte のファイルに分割\n| -b [size]k &ndash;&gt; [size]KByte のファイルに分割\n| -b [size]m &ndash;&gt; [size]MByte のファイルに分割\n|(分割されたファイルの名前)\n|[filename] の末尾に、aa, ab, ac, &hellip; az, ba, &hellip; zzが付加されたものになる。","contentSnippet":"|<ファイルの分割> ※ $LANG が “ja” のときには正しく動作しないそうだ。|(sh, bash, zsh etc…)|% LANG=C split -b [size] [filename]|(csh, tcsh)|% \\env LANG=C split -b [size] [filename]||<ファイルの連結>|(Unix)|% cat [file1] [file2] [file3] … > [filename]|(Dos)|> copy /b [file1]+[file2]+[file3]+… [filename]||<詳細>|(分割サイズの指定方法)| -b [size] –> [size]Byte のファイルに分割| -b [size]k –> [size]KByte のファイルに分割| -b [size]m –> [size]MByte のファイルに分割|(分割されたファイルの名前)|[filename] の末尾に、aa, ab, ac, … az, ba, … zzが付加されたものになる。","link":"https://masutaka.net/2002-02-13-1/","isoDate":"2002-02-13T00:00:00.000Z","dateMiliSeconds":1013558400000,"authorName":"masutaka"},{"title":"java インストール","content":"% unzip j2sdk-1_3_1_02-linux-i386-rpm.bin\nrpm -ivh jdk-1.3.1_02.i386.rpm URL: http://www.javasoft.com/products/jdk/1.2/ja/download-linux.html ","contentSnippet":"% unzip j2sdk-1_3_1_02-linux-i386-rpm.binrpm -ivh jdk-1.3.1_02.i386.rpm URL: http://www.javasoft.com/products/jdk/1.2/ja/download-linux.html","link":"https://masutaka.net/2002-02-09-6/","isoDate":"2002-02-09T05:00:00.000Z","dateMiliSeconds":1013230800000,"authorName":"masutaka"},{"title":"CD-R/RW の焼き方、ツールの紹介","content":"URL: http://www3.airnet.ne.jp/_tom_/CD-R.html ","contentSnippet":"URL: http://www3.airnet.ne.jp/_tom_/CD-R.html","link":"https://masutaka.net/2002-02-09-5/","isoDate":"2002-02-09T04:00:00.000Z","dateMiliSeconds":1013227200000,"authorName":"masutaka"},{"title":"Mozilla インストール","content":"rpm -e mozilla-psm rpm -e nautilus nautilus-mozilla rpm -e mozilla rpm -ivh mozilla-psm-0.9.8-0.i386.rpm rpm -ivh mozilla-0.9.8-0.i386.rpm ","contentSnippet":"rpm -e mozilla-psm rpm -e nautilus nautilus-mozilla rpm -e mozilla rpm -ivh mozilla-psm-0.9.8-0.i386.rpm rpm -ivh mozilla-0.9.8-0.i386.rpm","link":"https://masutaka.net/2002-02-09-4/","isoDate":"2002-02-09T03:00:00.000Z","dateMiliSeconds":1013223600000,"authorName":"masutaka"},{"title":"端末が化けたら？","content":"○方法１\n|% echo ^V^[c [Enter]\n(&quot;^V&quot; は &ldquo;ctl+v&rdquo; で、&quot;^[&quot; は &ldquo;ESC&rdquo; です。)\n○方法２\nresetとかclearってコマンドをモジバケの中で打つ。\n○方法３\nCtrl+中ボタンでfull reset選ぶ。\n○方法４\n|% stty sane","contentSnippet":"○方法１|% echo ^V^[c [Enter](\"^V\" は “ctl+v” で、\"^[\" は “ESC” です。)○方法２resetとかclearってコマンドをモジバケの中で打つ。○方法３Ctrl+中ボタンでfull reset選ぶ。○方法４|% stty sane","link":"https://masutaka.net/2002-02-09-3/","isoDate":"2002-02-09T02:00:00.000Z","dateMiliSeconds":1013220000000,"authorName":"masutaka"},{"title":"cp でシンボリックファイルを展開する方法","content":"普通にcpでシンボリックリンクファイルをコピーすると，\nリンク元のファイルの内容がコピーされてしまいます。\nこんな時には，-dオプションをつけます。\nこれで，リンクファイルはリンクファイルとしてコピーされます。","contentSnippet":"普通にcpでシンボリックリンクファイルをコピーすると，リンク元のファイルの内容がコピーされてしまいます。こんな時には，-dオプションをつけます。これで，リンクファイルはリンクファイルとしてコピーされます。","link":"https://masutaka.net/2002-02-09-2/","isoDate":"2002-02-09T01:00:00.000Z","dateMiliSeconds":1013216400000,"authorName":"masutaka"},{"title":"realplayer","content":"rpm -ivh rp8_linux20_libc6_i386_cs2_rpm ","contentSnippet":"rpm -ivh rp8_linux20_libc6_i386_cs2_rpm","link":"https://masutaka.net/2002-02-09-1/","isoDate":"2002-02-09T00:00:00.000Z","dateMiliSeconds":1013212800000,"authorName":"masutaka"},{"title":"gz と bzip2 の処理時間","content":"5:00から開始してこの時間差。かかりすぎだろ！ &gt; bzip2\n-rw-rw-r&ndash; 1 masutaka masutaka 358242960 Feb 7 05:11 masutaka.tar.gz\n-rw-rw-r&ndash; 1 masutaka masutaka 323616285 Feb 8 05:57 masutaka.tar.bz2","contentSnippet":"5:00から開始してこの時間差。かかりすぎだろ！ > bzip2-rw-rw-r– 1 masutaka masutaka 358242960 Feb 7 05:11 masutaka.tar.gz-rw-rw-r– 1 masutaka masutaka 323616285 Feb 8 05:57 masutaka.tar.bz2","link":"https://masutaka.net/2002-02-08-3/","isoDate":"2002-02-08T02:00:00.000Z","dateMiliSeconds":1013133600000,"authorName":"masutaka"},{"title":"Emacs21 インストール","content":"Emacs21のインストールはこんなに簡単なのか&hellip;。\n% tar xvzf emacs-21.1.tar.gz\n% mkdir work ; cd work\n% ../emacs-21.1/configure &ndash;without-xim\n% make\n% su\nmake install ","contentSnippet":"Emacs21のインストールはこんなに簡単なのか…。% tar xvzf emacs-21.1.tar.gz% mkdir work ; cd work% ../emacs-21.1/configure –without-xim% make% sumake install","link":"https://masutaka.net/2002-02-08-2/","isoDate":"2002-02-08T01:00:00.000Z","dateMiliSeconds":1013130000000,"authorName":"masutaka"},{"title":"makeinfo","content":"rpm -ivh texinfo-4.0b-3.i386.rpm ","contentSnippet":"rpm -ivh texinfo-4.0b-3.i386.rpm","link":"https://masutaka.net/2002-02-08-1/","isoDate":"2002-02-08T00:00:00.000Z","dateMiliSeconds":1013126400000,"authorName":"masutaka"},{"title":"構造体定義+宣言を同時にやる。","content":"↓これで、構造体定義+宣言を同時にできる。( ´_ゝ`)ヤレヤレ&hellip;\nstatic struct { i32 cnt; u8* pos; u8 buf[sem_UBUFSIZE]; } sem_ubuf; ","contentSnippet":"↓これで、構造体定義+宣言を同時にできる。( ´_ゝ`)ヤレヤレ…static struct { i32 cnt; u8* pos; u8 buf[sem_UBUFSIZE]; } sem_ubuf;","link":"https://masutaka.net/2002-02-07-1/","isoDate":"2002-02-07T00:00:00.000Z","dateMiliSeconds":1013040000000,"authorName":"masutaka"},{"title":"mknmz","content":"mknmzを M-x perldbで実行させたら、インデックスファイルを作ることができた。\nわけ分からん。","contentSnippet":"mknmzを M-x perldbで実行させたら、インデックスファイルを作ることができた。わけ分からん。","link":"https://masutaka.net/2002-02-06-1/","isoDate":"2002-02-06T00:00:00.000Z","dateMiliSeconds":1012953600000,"authorName":"masutaka"},{"title":"M-x top-level","content":"モードラインが [[(Message Encoded-kbd)]] などとなっているとき、M-x\ntop-level すると、[[]] を削除できる。BackTrace が出たときに、q して\nも OK。","contentSnippet":"モードラインが [[(Message Encoded-kbd)]] などとなっているとき、M-xtop-level すると、[[]] を削除できる。BackTrace が出たときに、q しても OK。","link":"https://masutaka.net/2002-02-05-3/","isoDate":"2002-02-05T02:00:00.000Z","dateMiliSeconds":1012874400000,"authorName":"masutaka"},{"title":"なんかいい","content":"＞＞669\nぷんすか","contentSnippet":"＞＞669ぷんすか","link":"https://masutaka.net/2002-02-05-2/","isoDate":"2002-02-05T01:00:00.000Z","dateMiliSeconds":1012870800000,"authorName":"masutaka"},{"title":"小技集","content":"-fという名前のファイルを削除\n% rm -- -f パーティションの残り容量を取得する。\n% df -k 出力先ディレクリを指定して、そこに解凍\n% tar xvzf &lt;tar.gz file&gt; -C &lt;output-directory&gt; ","contentSnippet":"-fという名前のファイルを削除% rm -- -f パーティションの残り容量を取得する。% df -k 出力先ディレクリを指定して、そこに解凍% tar xvzf <tar.gz file> -C <output-directory>","link":"https://masutaka.net/2002-02-05-1/","isoDate":"2002-02-05T00:00:00.000Z","dateMiliSeconds":1012867200000,"authorName":"masutaka"},{"title":"tamago の使い方","content":"○リージョンを(半角カナ|ひらがな|カタカナ|全角)に変換。\nM-x japanese-(hankaku|hiragana|katakana|zenkaku)-region\n○C-(toggle-input-method)で日本語が入力できる状態で&hellip;\nC-x C-m h(its-select-hiragana)&hellip;&hellip;&hellip;.. ひらがな\nC-x C-m k(its-select-katakana)&hellip;&hellip;&hellip;.. カタカナ\nC-x C-m x(its-select-hankaku-katakana)&hellip; 半角カナ\nC-x C-m z(its-select-zenkaku-downcase)&hellip; 全角小文字\nC-x C-m Z(its-select-zenkaku-upcase)&hellip;.. 全角大文字","contentSnippet":"○リージョンを(半角カナ|ひらがな|カタカナ|全角)に変換。M-x japanese-(hankaku|hiragana|katakana|zenkaku)-region○C-(toggle-input-method)で日本語が入力できる状態で…C-x C-m h(its-select-hiragana)……….. ひらがなC-x C-m k(its-select-katakana)……….. カタカナC-x C-m x(its-select-hankaku-katakana)… 半角カナC-x C-m z(its-select-zenkaku-downcase)… 全角小文字C-x C-m Z(its-select-zenkaku-upcase)….. 全角大文字","link":"https://masutaka.net/2002-02-04-1/","isoDate":"2002-02-04T00:00:00.000Z","dateMiliSeconds":1012780800000,"authorName":"masutaka"},{"title":"kakasi と namazu のインストール","content":"前やったときは acがないと言われたのになぜかうまくいった。\nでも、mknmzの動作が怪しい。。。\n|% gtar xvzf kakasi-2.3.4.tar.gz\n|% cd kakasi-2.3.4\n|% ./configure\n|% make\n|% make install\n|% cd ..\n|% gtar xvzf namazu-2.0.10.tar.gz\n|% cd namazu-2.0.10/File-MMagic\n|% perl Makefile.PL\n|% make\n|% make install\n|% cd ..\n|% ./configure &ndash;with-included-gettext\n|% make\n|% make install\n追記(2002-02-19):\nmknmz の動きが怪しいのは FAQ だった。\n&ndash;with-included-gettext を付けて解決した。","contentSnippet":"前やったときは acがないと言われたのになぜかうまくいった。でも、mknmzの動作が怪しい。。。|% gtar xvzf kakasi-2.3.4.tar.gz|% cd kakasi-2.3.4|% ./configure|% make|% make install|% cd ..|% gtar xvzf namazu-2.0.10.tar.gz|% cd namazu-2.0.10/File-MMagic|% perl Makefile.PL|% make|% make install|% cd ..|% ./configure –with-included-gettext|% make|% make install追記(2002-02-19):mknmz の動きが怪しいのは FAQ だった。–with-included-gettext を付けて解決した。","link":"https://masutaka.net/2002-02-01-1/","isoDate":"2002-02-01T00:00:00.000Z","dateMiliSeconds":1012521600000,"authorName":"masutaka"},{"title":"自宅に ruby をインストール","content":"% ./configure\n% make\nmake install ","contentSnippet":"% ./configure% makemake install","link":"https://masutaka.net/2002-01-31-3/","isoDate":"2002-01-31T02:00:00.000Z","dateMiliSeconds":1012442400000,"authorName":"masutaka"},{"title":"自宅に migemo をインストール","content":"cp bsearch.rb romkan.rb /usr/local/lib/ruby/site_ruby % ./configure &ndash;with-emacs=/usr/local/bin/emacs\n% make\nmake install ","contentSnippet":"cp bsearch.rb romkan.rb /usr/local/lib/ruby/site_ruby % ./configure –with-emacs=/usr/local/bin/emacs% makemake install","link":"https://masutaka.net/2002-01-31-2/","isoDate":"2002-01-31T01:00:00.000Z","dateMiliSeconds":1012438800000,"authorName":"masutaka"},{"title":"自宅に tamagoV4 をインストール","content":"% mkdir ../tmp\n% cd ../tmp\n% ln -s ../emacs/tamago-00423a-current.diff.gz\n% cd ../emacs/tamago-4.0.6\n% zcat ../../tmp/tamago-00423a-current.diff.gz | patch -p1\n// patchのエラーは無視。。。\n% make\nmake install ","contentSnippet":"% mkdir ../tmp% cd ../tmp% ln -s ../emacs/tamago-00423a-current.diff.gz% cd ../emacs/tamago-4.0.6% zcat ../../tmp/tamago-00423a-current.diff.gz | patch -p1// patchのエラーは無視。。。% makemake install","link":"https://masutaka.net/2002-01-31-1/","isoDate":"2002-01-31T00:00:00.000Z","dateMiliSeconds":1012435200000,"authorName":"masutaka"},{"title":"visio のショートカットキー ","content":"C-S-左クリック\t-&gt;\t拡大表示\nC-S-右クリック\t-&gt;\t縮小表示\nC-S-I\t-&gt;\t原寸大(100%)\nC-F6\t-&gt;\t他のウィンドウに移動","contentSnippet":"C-S-左クリック\t->\t拡大表示C-S-右クリック\t->\t縮小表示C-S-I\t->\t原寸大(100%)C-F6\t->\t他のウィンドウに移動","link":"https://masutaka.net/2002-01-29-1/","isoDate":"2002-01-29T00:00:00.000Z","dateMiliSeconds":1012262400000,"authorName":"masutaka"},{"title":"森本淳さんのお言葉","content":"我々(?)はあなたのすぐ側には居ないわけですから、\n「車のウインカーがつきません」\n「ウインカーレバーを倒してみるのは?」\n「ok, ウインカーつきました」\n程度のアドバイスはできると思いますが、\n「車のエンジンがかかりません」というのに対して、「ではボンネットを開けて、\n向かって右の前から２番目にあるバッテリーの緑のフタを外して赤いワイヤーを外して\n接点部の鉛の覆いを外して接点の銅に緑青が吹いていたらそれをサンドペーパーで\nこすって磨いて接点復活剤をかけてまた組み上げるのがまず１点。\n次に向かって左３番目の ECU を開けて CPU の (以下 120 行省略) 」みたいな指摘は、\n超人かアポロ13号の地上指令室でもないかぎり、残念ながらできません。\nURL: http://www.namazu.org/FAQ.html ","contentSnippet":"我々(?)はあなたのすぐ側には居ないわけですから、「車のウインカーがつきません」「ウインカーレバーを倒してみるのは?」「ok, ウインカーつきました」程度のアドバイスはできると思いますが、「車のエンジンがかかりません」というのに対して、「ではボンネットを開けて、向かって右の前から２番目にあるバッテリーの緑のフタを外して赤いワイヤーを外して接点部の鉛の覆いを外して接点の銅に緑青が吹いていたらそれをサンドペーパーでこすって磨いて接点復活剤をかけてまた組み上げるのがまず１点。次に向かって左３番目の ECU を開けて CPU の (以下 120 行省略) 」みたいな指摘は、超人かアポロ13号の地上指令室でもないかぎり、残念ながらできません。URL: http://www.namazu.org/FAQ.html","link":"https://masutaka.net/2002-01-25-1/","isoDate":"2002-01-25T00:00:00.000Z","dateMiliSeconds":1011916800000,"authorName":"masutaka"},{"title":"小技集","content":"○サービスの起動を制御する。\n% /usr/sbin/ntsysv\nor\n% /usr/sbin/setup\nで System servicesを選択。","contentSnippet":"○サービスの起動を制御する。% /usr/sbin/ntsysvor% /usr/sbin/setupで System servicesを選択。","link":"https://masutaka.net/2002-01-24-1/","isoDate":"2002-01-24T00:00:00.000Z","dateMiliSeconds":1011830400000,"authorName":"masutaka"},{"title":"ケンシロウ進数","content":"URL: http://www.asahi-net.or.jp/~rc4t-ishr/kensiro.html ","contentSnippet":"URL: http://www.asahi-net.or.jp/~rc4t-ishr/kensiro.html","link":"https://masutaka.net/2002-01-22-1/","isoDate":"2002-01-22T00:00:00.000Z","dateMiliSeconds":1011657600000,"authorName":"masutaka"},{"title":"rpm 使い方","content":"# インストール $ sudo rpm -ivh huga-1.0.0.i386.rpm # アップデート $ sudo rpm -Uvh huge-1.1.0.i386.rpm # 古いのがあったときだけアップデート $ sudo rpm -Fvh huga-1.1.0.i386.rpm # アンインストール(ex. gcc-2.96-98) $ sudo rpm -e gcc # 指定されたインストール済みパッケージに含まれているファイルをすべて表示 $ rpm -ql huga # インストールしてあるパッケージをすべて表示 $ rpm -qa # そのファイルがどの rpmに属するか調べる。 $ rpm -qf [file] # インストール/アンインストール時に実行されるスクリプトを確認 $ rpm -qp --scripts [file] $ rpm -q --scripts [package name] # パッケージに含まれているファイルを確認 $ rpm2cpio huge-1.1.0.i386.rpm | cpio -t # パッケージに含まれているファイルをカレントに展開 $ rpm2cpio huge-1.","contentSnippet":"# インストール $ sudo rpm -ivh huga-1.0.0.i386.rpm # アップデート $ sudo rpm -Uvh huge-1.1.0.i386.rpm # 古いのがあったときだけアップデート $ sudo rpm -Fvh huga-1.1.0.i386.rpm # アンインストール(ex. gcc-2.96-98) $ sudo rpm -e gcc # 指定されたインストール済みパッケージに含まれているファイルをすべて表示 $ rpm -ql huga # インストールしてあるパッケージをすべて表示 $ rpm -qa # そのファイルがどの rpmに属するか調べる。 $ rpm -qf [file] # インストール/アンインストール時に実行されるスクリプトを確認 $ rpm -qp --scripts [file] $ rpm -q --scripts [package name] # パッケージに含まれているファイルを確認 $ rpm2cpio huge-1.1.0.i386.rpm | cpio -t # パッケージに含まれているファイルをカレントに展開 $ rpm2cpio huge-1.","link":"https://masutaka.net/2002-01-20-1/","isoDate":"2002-01-20T00:00:00.000Z","dateMiliSeconds":1011484800000,"authorName":"masutaka"},{"title":"cvs でブランチを指定して取り出し (by kazu)","content":"% cvs co -r &lt;branch-name&gt; mew ","contentSnippet":"% cvs co -r <branch-name> mew","link":"https://masutaka.net/2002-01-18-1/","isoDate":"2002-01-18T00:00:00.000Z","dateMiliSeconds":1011312000000,"authorName":"masutaka"},{"title":"hide-ifdef-mode","content":"C-c @ d (シンボル登録 define)\nC-c @ u (シンボル登録 undef)\nC-c @ h (ifdefを隠す)\nC-c @ s (ifdefを出す)","contentSnippet":"C-c @ d (シンボル登録 define)C-c @ u (シンボル登録 undef)C-c @ h (ifdefを隠す)C-c @ s (ifdefを出す)","link":"https://masutaka.net/2002-01-17-1/","isoDate":"2002-01-17T00:00:00.000Z","dateMiliSeconds":1011225600000,"authorName":"masutaka"},{"title":"bash","content":"bash の alias では $@ などは使えません。\n引数は後ろにつけることしかできないです。\n~/.bashrc に alias のかわりに\n|lsa () {\n| ls -al $* | $LSPAGER\n|}\nと書けばよろしいかと思います。","contentSnippet":"bash の alias では $@ などは使えません。引数は後ろにつけることしかできないです。~/.bashrc に alias のかわりに|lsa () {| ls -al $* | $LSPAGER|}と書けばよろしいかと思います。","link":"https://masutaka.net/2002-01-16-1/","isoDate":"2002-01-16T00:00:00.000Z","dateMiliSeconds":1011139200000,"authorName":"masutaka"},{"title":"xmodmap -- Caps_Lock と Control_L の入れ換え","content":"!\n! Xの利用時に，Caps_Lock と\n! Control_L とを入れ替えます．\n!\nremove Lock = Caps_Lock\nremove Control = Control_L\nkeysym Control_L = Caps_Lock\nkeysym Caps_Lock = Control_L\nadd Lock = Caps_Lock\nadd Control = Control_L","contentSnippet":"!! Xの利用時に，Caps_Lock と! Control_L とを入れ替えます．!remove Lock = Caps_Lockremove Control = Control_Lkeysym Control_L = Caps_Lockkeysym Caps_Lock = Control_Ladd Lock = Caps_Lockadd Control = Control_L","link":"https://masutaka.net/2002-01-15-2/","isoDate":"2002-01-15T01:00:00.000Z","dateMiliSeconds":1011056400000,"authorName":"masutaka"},{"title":"printfで、0x0000f1f2のような書式にする。","content":"printf(&#34;hexl = 0x%08x\\n&#34;, hexl); ","contentSnippet":"printf(\"hexl = 0x%08x\\n\", hexl);","link":"https://masutaka.net/2002-01-15-1/","isoDate":"2002-01-15T00:00:00.000Z","dateMiliSeconds":1011052800000,"authorName":"masutaka"},{"title":"HTTP ディレクトリからすべての JPEG ファイルをダウンロードする","content":"|% wget -r -l1 &ndash;no-parent -A.jpg http://host/dir/\n|% wget -r -l 1 -A jpg,JPG,html -H -D gazo.foo.com -k -p http://www.foo.com/abc.html ","contentSnippet":"|% wget -r -l1 –no-parent -A.jpg http://host/dir/|% wget -r -l 1 -A jpg,JPG,html -H -D gazo.foo.com -k -p http://www.foo.com/abc.html","link":"https://masutaka.net/2002-01-13-4/","isoDate":"2002-01-13T03:00:00.000Z","dateMiliSeconds":1010890800000,"authorName":"masutaka"},{"title":"Emacs と Elisp のマニュアルを Info にする","content":"GNU Emacs マニュアル 20.6 http://www.ascii.co.jp/books/detail/4-7561/4-7561-3413-0.html ・マニュアル本体\nftp://ftp.ascii.co.jp/pub/GNU/emacs-20.x/emacs-20.6-man-jp.tgz ・@nodeの不備を補完するパッチ\nhttp://namazu.org/~tsuchiya/doc/emacs-20.6-man-jp.patch.bz2 % gtar xzf emacs-20.6-man-jp.tgz % cd emacs-20.6-man-jp % bzcat ../emacs-20.6-man-jp.patch.bz2 | patch ack.texiを emacs-20.7のアーカイブファイルからコピー C-x C-f emacs.texi [RET] M-x texinfo-format-buffer [RET] C-x C-s % cp emacs-ja* /usr/local/info /usr/local/info/dirを編集して終わり。 Emacs Lisp リファレンスマニュアル http://www.ascii.co.jp/books/detail/4-7561/4-7561-3414-9.html ・マニュアル本体\nftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.tgz ・訂正情報\nftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.ERRATA.000422.jis ftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.ERRATA.000508.jis ・@nodeの不備を補完するパッチ\nhttp://namazu.org/~tsuchiya/doc/elisp-manual-20-2.5-jp.patch.bz2 % gtar xzf elisp-manual-20-2.5-jp.tgz % cd elisp-manual-20-2.5-jp % bzcat ../elisp-manual-20-2.5-jp.patch.bz2 | patch % cat ../elisp-manual-20-2.5-jp.ERRATA.000422.jis | patch % cat ../elisp-manual-20-2.5-jp.ERRATA.000508.jis | patch % ln -s index.","contentSnippet":"GNU Emacs マニュアル 20.6 http://www.ascii.co.jp/books/detail/4-7561/4-7561-3413-0.html ・マニュアル本体ftp://ftp.ascii.co.jp/pub/GNU/emacs-20.x/emacs-20.6-man-jp.tgz ・@nodeの不備を補完するパッチhttp://namazu.org/~tsuchiya/doc/emacs-20.6-man-jp.patch.bz2 % gtar xzf emacs-20.6-man-jp.tgz % cd emacs-20.6-man-jp % bzcat ../emacs-20.6-man-jp.patch.bz2 | patch ack.texiを emacs-20.7のアーカイブファイルからコピー C-x C-f emacs.texi [RET] M-x texinfo-format-buffer [RET] C-x C-s % cp emacs-ja* /usr/local/info /usr/local/info/dirを編集して終わり。 Emacs Lisp リファレンスマニュアル http://www.ascii.co.jp/books/detail/4-7561/4-7561-3414-9.html ・マニュアル本体ftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.tgz ・訂正情報ftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.ERRATA.000422.jis ftp://ftp.ascii.co.jp/pub/GNU/elisp-manual-20/elisp-manual-20-2.5-jp.ERRATA.000508.jis ・@nodeの不備を補完するパッチhttp://namazu.org/~tsuchiya/doc/elisp-manual-20-2.5-jp.patch.bz2 % gtar xzf elisp-manual-20-2.5-jp.tgz % cd elisp-manual-20-2.5-jp % bzcat ../elisp-manual-20-2.5-jp.patch.bz2 | patch % cat ../elisp-manual-20-2.5-jp.ERRATA.000422.jis | patch % cat ../elisp-manual-20-2.5-jp.ERRATA.000508.jis | patch % ln -s index.","link":"https://masutaka.net/2002-01-13-3/","isoDate":"2002-01-13T02:00:00.000Z","dateMiliSeconds":1010887200000,"authorName":"masutaka"},{"title":"Web サイトメモ","content":"Acrobat Reader\nhttp://www.adobe.co.jp/products/acrobat/ Cygwin\nhttp://sources.redhat.com/cygwin/mirrors.html ex. ftp://ring.asahi-net.or.jp/archives/pc/gnu-win32/setup.exe FFFTP\nhttp://www2.biglobe.ne.jp/~sota/ GV\nhttp://www2h.biglobe.ne.jp/~tobita/ Lhaplus\nhttp://www.hoehoe.com/software/lhaplus/index.html Meadow\nftp://ftp.m17n.org/pub/mule/Windows/ [一次配布]\nftp://ftp.etl.go.jp/pub/mule/Windows/ Meadow-1.14-i386-base.tar.gz\nMeadow-1.14-i386-els.tar.gz\nhttp://www.egroups.co.jp/files/emacs21-users-ja/Meadow/ apel-10.3-for-Meadow1.14-1.tar.gz\nflim-1.14.2-for-Meadow1.14-2.tar.gz\nsemi-1.14.3-for-Meadow1.14-2.tar.gz\nhttp://www.netlaputa.ne.jp/~cymouque/ gnuserv-latest.zip\nReal Player\nhttp://www.jp.real.com/ WinGroove\nhttp://www.wg7.com/ 秀丸\nhttp://hidemaru.xaxon.co.jp/ 窓の手\nhttp://www.asahi-net.or.jp/~vr4m-ikw/index.htm 窓使いの憂鬱\nhttp://mayu.sourceforge.net/ja/index.html Becky!\nhttp://www.rimarts.co.jp/becky-j.htm Opera\nhttp://www.opera.com/download/ http://www.moonstone.jp/ ","contentSnippet":"Acrobat Readerhttp://www.adobe.co.jp/products/acrobat/ Cygwinhttp://sources.redhat.com/cygwin/mirrors.html ex. ftp://ring.asahi-net.or.jp/archives/pc/gnu-win32/setup.exe FFFTPhttp://www2.biglobe.ne.jp/~sota/ GVhttp://www2h.biglobe.ne.jp/~tobita/ Lhaplushttp://www.hoehoe.com/software/lhaplus/index.html Meadowftp://ftp.m17n.org/pub/mule/Windows/ [一次配布]ftp://ftp.etl.go.jp/pub/mule/Windows/ Meadow-1.14-i386-base.tar.gzMeadow-1.14-i386-els.tar.gzhttp://www.egroups.co.jp/files/emacs21-users-ja/Meadow/ apel-10.3-for-Meadow1.14-1.tar.gzflim-1.14.2-for-Meadow1.14-2.tar.gzsemi-1.14.3-for-Meadow1.14-2.tar.gzhttp://www.netlaputa.ne.jp/~cymouque/ gnuserv-latest.zipReal Playerhttp://www.jp.real.com/ WinGroovehttp://www.wg7.com/ 秀丸http://hidemaru.xaxon.co.jp/ 窓の手http://www.asahi-net.or.jp/~vr4m-ikw/index.htm 窓使いの憂鬱http://mayu.sourceforge.net/ja/index.html Becky!http://www.rimarts.co.jp/becky-j.htm Operahttp://www.opera.com/download/ http://www.moonstone.jp/","link":"https://masutaka.net/2002-01-13-2/","isoDate":"2002-01-13T01:00:00.000Z","dateMiliSeconds":1010883600000,"authorName":"masutaka"},{"title":"たつをのホームページ、いつでもどこでもメモしたい etc...","content":"URL: http://nais.to/~yto/ ","contentSnippet":"URL: http://nais.to/~yto/","link":"https://masutaka.net/2002-01-13-1/","isoDate":"2002-01-13T00:00:00.000Z","dateMiliSeconds":1010880000000,"authorName":"masutaka"},{"title":"雑記","content":"たとえ数GBのファイルであってもたった数バイトに\nしてしまう圧縮方式があります。\nそれは全てのファイルに番号を付けるのです。\n欠点は圧縮ソフト自身がどんどん肥大化していくことです。\nそう何百TBにも。。。","contentSnippet":"たとえ数GBのファイルであってもたった数バイトにしてしまう圧縮方式があります。それは全てのファイルに番号を付けるのです。欠点は圧縮ソフト自身がどんどん肥大化していくことです。そう何百TBにも。。。","link":"https://masutaka.net/2002-01-11-1/","isoDate":"2002-01-11T00:00:00.000Z","dateMiliSeconds":1010707200000,"authorName":"masutaka"},{"title":"Mew のインストール","content":"Mewをインストールした場合は、/usr/local/share/emacs/site-lisp以下の\nシンボリックリンクを必ず更新しなければいけない。\nこれは、/usr/local/bin/mew.* との整合性がおかしくなるから？？？\nということは、\n/usr/local/share/emacs/site-lisp:\ndrwxr-xr-x 3 masuda masutaka 2560 Dec 10 12:01 .mew-2.1/\ndrwxrwxr-x 3 masuda masutaka 2560 Dec 12 10:47 .mew-2.1.52/\ndrwxrwxr-x 3 masuda masutaka 2560 Dec 13 18:55 .mew-3.0.50/\nlrwxrwxrwx 1 masuda masutaka 11 Dec 14 10:10 mew -&gt; .mew-3.0.50/\nしても意味ないってこと？\nそのバージョンに問題があったらリンク先を変えればいいと思ったんだけど。。。\n(/usr/local/bin/mew.*を)インストールし直さないといけないのね。","contentSnippet":"Mewをインストールした場合は、/usr/local/share/emacs/site-lisp以下のシンボリックリンクを必ず更新しなければいけない。これは、/usr/local/bin/mew.* との整合性がおかしくなるから？？？ということは、/usr/local/share/emacs/site-lisp:drwxr-xr-x 3 masuda masutaka 2560 Dec 10 12:01 .mew-2.1/drwxrwxr-x 3 masuda masutaka 2560 Dec 12 10:47 .mew-2.1.52/drwxrwxr-x 3 masuda masutaka 2560 Dec 13 18:55 .mew-3.0.50/lrwxrwxrwx 1 masuda masutaka 11 Dec 14 10:10 mew -> .mew-3.0.50/しても意味ないってこと？そのバージョンに問題があったらリンク先を変えればいいと思ったんだけど。。。(/usr/local/bin/mew.*を)インストールし直さないといけないのね。","link":"https://masutaka.net/2002-01-08-3/","isoDate":"2002-01-08T02:00:00.000Z","dateMiliSeconds":1010455200000,"authorName":"masutaka"},{"title":"rcp の罠","content":"ローカルとリモートでアクセス権が異なる場合、\n-pオプションを付けると更新内容が反映されない場合がある。","contentSnippet":"ローカルとリモートでアクセス権が異なる場合、-pオプションを付けると更新内容が反映されない場合がある。","link":"https://masutaka.net/2002-01-08-2/","isoDate":"2002-01-08T01:00:00.000Z","dateMiliSeconds":1010451600000,"authorName":"masutaka"},{"title":"MAC アドレスの調べ方","content":"Windows2000\nコマンドプロンプトを開いて、「ipconfig /all」を実行。\n表示された Physical Address が MAC アドレス。","contentSnippet":"Windows2000コマンドプロンプトを開いて、「ipconfig /all」を実行。表示された Physical Address が MAC アドレス。","link":"https://masutaka.net/2002-01-08-1/","isoDate":"2002-01-08T00:00:00.000Z","dateMiliSeconds":1010448000000,"authorName":"masutaka"},{"title":"本物の symlinkを使う。","content":"set CYGWIN=nowinsymlinks","contentSnippet":"set CYGWIN=nowinsymlinks","link":"https://masutaka.net/2002-01-07-1/","isoDate":"2002-01-07T00:00:00.000Z","dateMiliSeconds":1010361600000,"authorName":"masutaka"},{"title":"ファイルローグ","content":"http://www.filerogue.net/ ","contentSnippet":"http://www.filerogue.net/","link":"https://masutaka.net/2002-01-06-1/","isoDate":"2002-01-06T00:00:00.000Z","dateMiliSeconds":1010275200000,"authorName":"masutaka"},{"title":"diary","content":"浜松から戻ってきた。やっぱり疲れた。","contentSnippet":"浜松から戻ってきた。やっぱり疲れた。","link":"https://masutaka.net/2002-01-05-1/","isoDate":"2002-01-05T00:00:00.000Z","dateMiliSeconds":1010188800000,"authorName":"masutaka"},{"title":"diary","content":"というわけで、盛岡から戻ってきた。\nまさか、(ショート)スキーまですることになるとは思わなかったな。\n夕方までには浜松に行く。","contentSnippet":"というわけで、盛岡から戻ってきた。まさか、(ショート)スキーまですることになるとは思わなかったな。夕方までには浜松に行く。","link":"https://masutaka.net/2002-01-01-2/","isoDate":"2002-01-01T01:00:00.000Z","dateMiliSeconds":1009846800000,"authorName":"masutaka"},{"title":"INOUE's Home Page (Emacs20情報(cc-mode))","content":"http://www.ainet.or.jp/~inoue/index.html http://home.catv.ne.jp/pp/ginoue/ に引っ越すかも。","contentSnippet":"http://www.ainet.or.jp/~inoue/index.html http://home.catv.ne.jp/pp/ginoue/ に引っ越すかも。","link":"https://masutaka.net/2002-01-01-1/","isoDate":"2002-01-01T00:00:00.000Z","dateMiliSeconds":1009843200000,"authorName":"masutaka"},{"title":"diary","content":"横着プログラミングの ChangeLogメモを見て始めた。\n今日は徹夜になりそう。で、そのまま盛岡に行く。。","contentSnippet":"横着プログラミングの ChangeLogメモを見て始めた。今日は徹夜になりそう。で、そのまま盛岡に行く。。","link":"https://masutaka.net/2001-12-30-10/","isoDate":"2001-12-30T09:00:00.000Z","dateMiliSeconds":1009702800000,"authorName":"masutaka"},{"title":"発明","content":"私は、&ldquo;必要は発明の母&quot;だとは思わない。私の考えでは、\n発明とは、まずもって怠惰から、そして無精からも生ま\nれるものである。手間を省くために、だ。\n- アガサ・クリスティー\nAgatha Christie, An Autobiography, Collins, 1977 (邦訳:\n「アガサ・クリスティー自伝」乾 信一郎訳、早川書房、1978年)","contentSnippet":"私は、“必要は発明の母\"だとは思わない。私の考えでは、発明とは、まずもって怠惰から、そして無精からも生まれるものである。手間を省くために、だ。- アガサ・クリスティーAgatha Christie, An Autobiography, Collins, 1977 (邦訳:「アガサ・クリスティー自伝」乾 信一郎訳、早川書房、1978年)","link":"https://masutaka.net/2001-12-30-9/","isoDate":"2001-12-30T08:00:00.000Z","dateMiliSeconds":1009699200000,"authorName":"masutaka"},{"title":"car と cdr の語源","content":"car(カー): Contents of the Address part of the Register' cdr(クダー): Contents of the Decrement part of the Register'\nこれらのフレーズは、Lisp が開発された頃の極めて初期のハードウェアの\n特定の部分に基づくものであるが、単に時代遅れであるというだけでなく、\n実に 25年以上もの間、Lisp に関わる人々にとって全く見当はずれのものであった。\nだがしかし、これらの関数をもっと合理的な名前で呼ぼうとした学者も\n何人かいたにも関わらず、現在でもこの古い用語が使われている。","contentSnippet":"car(カー): Contents of the Address part of the Register' cdr(クダー): Contents of the Decrement part of the Register'これらのフレーズは、Lisp が開発された頃の極めて初期のハードウェアの特定の部分に基づくものであるが、単に時代遅れであるというだけでなく、実に 25年以上もの間、Lisp に関わる人々にとって全く見当はずれのものであった。だがしかし、これらの関数をもっと合理的な名前で呼ぼうとした学者も何人かいたにも関わらず、現在でもこの古い用語が使われている。","link":"https://masutaka.net/2001-12-30-8/","isoDate":"2001-12-30T07:00:00.000Z","dateMiliSeconds":1009695600000,"authorName":"masutaka"},{"title":"SKK-JISYO.Lが置いてある場所","content":"http://openlab.ring.gr.jp/skk/dic/ ","contentSnippet":"http://openlab.ring.gr.jp/skk/dic/","link":"https://masutaka.net/2001-12-30-7/","isoDate":"2001-12-30T06:00:00.000Z","dateMiliSeconds":1009692000000,"authorName":"masutaka"},{"title":"Emacs のコンパイル、インストール","content":"URL: http://emacs-20.ki.nu/   Emacs20 のソース\nftp://ftp.iij.ad.jp/pub/GNU/emacs/emacs-20.7.tar.gz ftp://ftp.iij.ad.jp/pub/GNU/emacs/leim-20.7.tar.gz ftp://ftp.ki.nu/pub/emcws/emcws-20.7-20011002.gz   Emacs21 のソース\nftp://ftp.iij.ad.jp/pub/GNU/emacs/emacs-21.1.tar.gz ftp://ftp.iij.ad.jp/pub/GNU/emacs/leim-21.1.tar.gz ftp://ftp.ki.nu/pub/emcws/emcws-21.1-20011024.gz   apel, flim, semi のソース\nftp://ftp.m17n.org/pub/mule/apel/apel-10.3.tar.gz ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/flim-1.14.3.tar.gz ftp://ftp.m17n.org/pub/mule/semi/semi-1.14-for-flim-1.14/flim-1.14.3.tar.gz   コンパイル＆インストール\n|% setenv SITELISP /usr/local/share/emacs/site-lisp\n|% setenv EMACS emcws\n|% gtar xvzf emacs-20.7.tar.gz\n|% zcat emcws-20.7-20011002.gz | /usr/local/bin/patch -s -p0\n|% mkdir work ; cd work\n|% ../emacs-20.7/configure |&ndash;with-wnn6 |&ndash;with-wnn-includes=/usr/lib/locale/ja/wnn/demo/include/wnn |&ndash;with-wnn-libraries=/usr/lib/locale/ja/wnn/demo/lib |&ndash;x-includes=/usr/openwin/include |&ndash;x-libraries=/usr/openwin/lib\n|% make\n|% make install\n  ","contentSnippet":"URL: http://emacs-20.ki.nu/   Emacs20 のソースftp://ftp.iij.ad.jp/pub/GNU/emacs/emacs-20.7.tar.gz ftp://ftp.iij.ad.jp/pub/GNU/emacs/leim-20.7.tar.gz ftp://ftp.ki.nu/pub/emcws/emcws-20.7-20011002.gz   Emacs21 のソースftp://ftp.iij.ad.jp/pub/GNU/emacs/emacs-21.1.tar.gz ftp://ftp.iij.ad.jp/pub/GNU/emacs/leim-21.1.tar.gz ftp://ftp.ki.nu/pub/emcws/emcws-21.1-20011024.gz   apel, flim, semi のソースftp://ftp.m17n.org/pub/mule/apel/apel-10.3.tar.gz ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/flim-1.14.3.tar.gz ftp://ftp.m17n.org/pub/mule/semi/semi-1.14-for-flim-1.14/flim-1.14.3.tar.gz   コンパイル＆インストール|% setenv SITELISP /usr/local/share/emacs/site-lisp|% setenv EMACS emcws|% gtar xvzf emacs-20.7.tar.gz|% zcat emcws-20.7-20011002.gz | /usr/local/bin/patch -s -p0|% mkdir work ; cd work|% ../emacs-20.7/configure |–with-wnn6 |–with-wnn-includes=/usr/lib/locale/ja/wnn/demo/include/wnn |–with-wnn-libraries=/usr/lib/locale/ja/wnn/demo/lib |–x-includes=/usr/openwin/include |–x-libraries=/usr/openwin/lib|% make|% make install","link":"https://masutaka.net/2001-12-30-6/","isoDate":"2001-12-30T05:00:00.000Z","dateMiliSeconds":1009688400000,"authorName":"masutaka"},{"title":"clgrep -- ChangeLog メモ用の grep","content":"|usage: clgrep [OPTIONS]  [FILE]&hellip;\n|-i, 大文字・小文字を区別しない\n|-r, 検索結果を逆順に表示する\nURL: http://0xcc.net/unimag/1/ ","contentSnippet":"|usage: clgrep [OPTIONS]  [FILE]…|-i, 大文字・小文字を区別しない|-r, 検索結果を逆順に表示するURL: http://0xcc.net/unimag/1/","link":"https://masutaka.net/2001-12-30-5/","isoDate":"2001-12-30T04:00:00.000Z","dateMiliSeconds":1009684800000,"authorName":"masutaka"},{"title":"Tabだけの行を削除","content":"M-x query-replace-regexp [RET] &ldquo;^[TAB]+$&rdquo; [RET] &quot;&quot; [RET]","contentSnippet":"M-x query-replace-regexp [RET] “^[TAB]+$” [RET] \"\" [RET]","link":"https://masutaka.net/2001-12-30-4/","isoDate":"2001-12-30T03:00:00.000Z","dateMiliSeconds":1009681200000,"authorName":"masutaka"},{"title":"検索文字列に一致するバッファ内の各行の一覧を表示する。","content":"M-x occur [RET] REGEXP [RET]","contentSnippet":"M-x occur [RET] REGEXP [RET]","link":"https://masutaka.net/2001-12-30-3/","isoDate":"2001-12-30T02:00:00.000Z","dateMiliSeconds":1009677600000,"authorName":"masutaka"},{"title":"crontab -- 指定した時刻にスクリプトを動かす。","content":"-l, そのユーザが利用している crontabの内容を出力\n-e, 自分自身の crontabを編集","contentSnippet":"-l, そのユーザが利用している crontabの内容を出力-e, 自分自身の crontabを編集","link":"https://masutaka.net/2001-12-30-2/","isoDate":"2001-12-30T01:00:00.000Z","dateMiliSeconds":1009674000000,"authorName":"masutaka"},{"title":"高林哲の Web サイト","content":"Unix Magazine連載: 横着プログラミング、電子辞書オープンラボ\nURL: http://namazu.org/~satoru/ ","contentSnippet":"Unix Magazine連載: 横着プログラミング、電子辞書オープンラボURL: http://namazu.org/~satoru/","link":"https://masutaka.net/2001-12-30-1/","isoDate":"2001-12-30T00:00:00.000Z","dateMiliSeconds":1009670400000,"authorName":"masutaka"},{"title":"Search","content":" ","contentSnippet":"","link":"https://masutaka.net/search/","isoDate":"2001-01-01T00:00:00.000Z","dateMiliSeconds":978307200000,"authorName":"masutaka"}]},"__N_SSG":true}